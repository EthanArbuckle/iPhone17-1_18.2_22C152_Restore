WebCore::PixelBuffer *WebKit::RemoteImageBufferProxy::getPixelBuffer@<X0>(WebKit::RemoteImageBufferProxy *a1@<X0>, atomic_uint *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WebCore::PixelBuffer **a5@<X8>)
{
  double v5;
  WebCore::PixelBuffer *result;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WebCore::SharedMemory *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  WTF::ApproximateTime *v20;
  double v21;
  double v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  void *v49;
  WebCore::PixelBuffer *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unint64_t v66;
  uint64_t v67;
  WTF *v68;
  void *v69;
  uint64_t v70;
  const char *v71;
  WTF *v72;
  void *v73;
  void *__dst;
  WebCore::PixelBuffer *v75;
  uint64_t v76;
  uint64_t *v77;
  atomic_uint *v78;
  uint64_t **v79;
  uint64_t *v80;
  unsigned char v81[16];
  unsigned int v82;
  char v83[8];
  uint64_t v84;
  char v85;
  atomic_uint *v86;
  unint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t *v90;
  int v91;
  char v92;
  IPC::Decoder **v93;
  char v94[8];
  int v95;
  unsigned int *v96;
  unint64_t v97;
  unint64_t v98;
  char v99;
  unsigned char buf[24];
  unint64_t *v101;
  uint64_t v102;
  uint64_t vars8;

  v102 = *MEMORY[0x1E4F143B8];
  result = (WebCore::PixelBuffer *)WebKit::RemoteImageBufferProxy::ensureBackend(a1);
  if (!result)
  {
    *a5 = 0;
    return result;
  }
  if ((*(unsigned int (**)(WebCore::PixelBuffer *))(*(void *)result + 152))(result))
  {
    WebKit::RemoteImageBufferProxy::flushDrawingContext((uint64_t)a1);
    return (WebCore::PixelBuffer *)MEMORY[0x1F4174318](a1, a2, a3, a4);
  }
  *(void *)buf = *(void *)(a3 + 8);
  (*(void (**)(WebCore::PixelBuffer **__return_ptr, uint64_t, atomic_uint *, unsigned char *))(*(void *)a4 + 24))(&v75, a4, a2, buf);
  result = v75;
  if (!v75)
  {
    v50 = 0;
    goto LABEL_68;
  }
  v12 = *((void *)a1 + 17);
  if (!v12 || (v13 = *(void **)(v12 + 8)) == 0)
  {
LABEL_66:
    result = (WebCore::PixelBuffer *)WebCore::PixelBuffer::zeroRange(result);
    goto LABEL_67;
  }
  v14 = *((void *)a1 + 15);
  v16 = *((void *)v75 + 5);
  v15 = (WebCore::SharedMemory *)*((void *)v75 + 6);
  v17 = (uint64_t)(v13 + 19);
  if ((v13[23] & 0xFFFFFFFFFFFFLL) != 0 && *(double *)((v13[23] & 0xFFFFFFFFFFFFLL) + 8) != 0.0) {
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v13 + 19));
  }
  v18 = v13[18];
  __dst = (void *)v16;
  if (v18 && *(void *)(v18 + 8) >= (unint64_t)v15)
  {
    WebCore::TimerBase::start();
    v83[0] = 0;
    v85 = 0;
  }
  else
  {
    WebKit::RemoteRenderingBackendProxy::destroyGetPixelBufferSharedMemory((WebKit::RemoteRenderingBackendProxy *)v13);
    WebCore::SharedMemory::allocate(v15);
    if (v96)
    {
      WebCore::SharedMemory::createHandle();
      if (buf[16])
      {
        v63 = (uint64_t)v96;
        v96 = 0;
        v64 = (unsigned int *)v13[18];
        v13[18] = v63;
        if (v64)
        {
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v64);
          if (!buf[16]) {
            goto LABEL_125;
          }
        }
        WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
        WebCore::TimerBase::start();
        v83[0] = 0;
        v85 = 0;
        if (buf[16])
        {
          WTF::MachSendRight::MachSendRight();
          v84 = *(void *)&buf[8];
          v85 = 1;
          if (buf[16]) {
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)buf);
          }
        }
      }
      else
      {
        v83[0] = 0;
        v85 = 0;
      }
      v65 = v96;
      v96 = 0;
      if (v65) {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v65);
      }
    }
    else
    {
      v83[0] = 0;
      v85 = 0;
    }
    if (v85)
    {
      v66 = *(void *)(a3 + 8);
      v90 = *(uint64_t **)a3;
      v87 = v66;
      *(void *)buf = v83;
      *(void *)&buf[8] = a2;
      *(void *)&buf[16] = &v90;
      v101 = &v87;
      WebKit::RemoteRenderingBackendProxy::sendSync<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>((uint64_t)&v96, (WebKit::RemoteRenderingBackendProxy *)v13, (uint64_t)buf, v14);
      v16 = v98;
      if (v98 != -1)
      {
        ((void (*)(unsigned char *, unsigned int **))off_1EE9E9DF0[v98])(buf, &v96);
        if (!v16) {
          goto LABEL_104;
        }
      }
LABEL_63:
      if (v85) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v83);
      }
      goto LABEL_65;
    }
  }
  if (!v13[18])
  {
LABEL_65:
    result = v75;
    goto LABEL_66;
  }
  v19 = *(uint64_t **)a3;
  v76 = *(void *)(a3 + 8);
  v77 = v19;
  v78 = a2;
  v79 = &v77;
  v80 = &v76;
  v20 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)v13, &v86);
  a2 = v86;
  v16 = (unint64_t)off_1EE9E9E10;
  if (!v86)
  {
    v81[0] = 1;
    v82 = 1;
    goto LABEL_61;
  }
  v21 = *((double *)v86 + 15);
  v5 = INFINITY;
  if (fabs(v21) != INFINITY)
  {
    WTF::ApproximateTime::now(v20);
    v5 = v21 + v22;
  }
  if (*((void *)a2 + 7) == v14) {
    goto LABEL_15;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a2 + 16), buf, v5);
  if (!buf[16])
  {
    a3 = 15;
    goto LABEL_138;
  }
  v51 = *(void *)buf;
  v52 = *(void *)&buf[8];
  v53 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v54 = v53 - *(void *)buf;
  if (v53 < *(void *)buf)
  {
    v56 = 0;
    v55 = *(void *)&buf[8];
  }
  else
  {
    v55 = 0;
    if (v54 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v56 = 0;
    }
    else
    {
      v56 = 0;
      if (v54 + 2 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v54) = 2871;
        v55 = v52;
        v56 = v54 + 2;
      }
    }
  }
  v57 = (void *)((v51 + v56 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v57 >= v51 + v56)
  {
    v58 = (char *)v57 - v51;
    a3 = 17;
    if ((unint64_t)v57 - v51 > 0xFFFFFFFFFFFFFFF7
      || (v56 = (unint64_t)(v58 + 8), (unint64_t)(v58 + 8) > v55))
    {
LABEL_138:
      LOBYTE(v96) = a3;
      LODWORD(v98) = 1;
      v14 = (uint64_t)off_1EB3583E8;
      if (!os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_113;
      }
      goto LABEL_112;
    }
    *v57 = v14;
  }
  if (!v55)
  {
    a3 = 17;
    goto LABEL_138;
  }
  v59 = *((void *)a2 + 9);
  v60 = (*((void *)a2 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v61 = *((void *)a2 + 8);
  if (v60 + 16 >= v61) {
    v60 = 0;
  }
  if (v56 <= 0x10) {
    v56 = 16;
  }
  v62 = v60 + v56;
  if (v61 <= v62) {
    v62 = 0;
  }
  *((void *)a2 + 10) = v62;
  IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)a2, atomic_exchange((atomic_ullong *volatile)(*(void *)(v59 + 16) + 128), v62) == 0x80000000);
  *((void *)a2 + 7) = v14;
LABEL_15:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a2 + 16), &v87, v5);
  if (!v89)
  {
    LOBYTE(v96) = 15;
    LODWORD(v98) = 1;
    goto LABEL_56;
  }
  v23 = v87;
  v24 = v88;
  a3 = (uint64_t)(a2 + 2);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v93, (uint64_t **)a2 + 1);
  v17 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (IPC::Connection::pushPendingSyncRequestID((uint64_t)v93, v17))
  {
    v96 = (unsigned int *)v23;
    v97 = v24;
    v98 = 0;
    v25 = (v23 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v26 = v25 - v23;
    if (v25 < v23)
    {
      v27 = 0;
    }
    else if (v26 > 0xFFFFFFFFFFFFFFFDLL || (v27 = v26 + 2, v26 + 2 > v24))
    {
      v24 = 0;
      v27 = 0;
      v97 = 0;
    }
    else
    {
      *(_WORD *)(v23 + v26) = 3708;
      v98 = v26 + 2;
    }
    v28 = (void *)((v23 + v27 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v28 >= v23 + v27)
    {
      v29 = (char *)v28 - v23;
      if ((unint64_t)v28 - v23 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v29 + 8) > v24)
      {
        v97 = 0;
      }
      else
      {
        *v28 = v17;
        v98 = (unint64_t)(v29 + 8);
      }
    }
    IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::encode((WTF::StringImpl *)&v96, (uint64_t)v78);
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v96, v79);
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v96, v80);
    if (v97)
    {
      v30 = v98;
      v31 = (*((void *)a2 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v32 = *((void *)a2 + 8);
      if (v31 + 16 < v32) {
        goto LABEL_27;
      }
      goto LABEL_133;
    }
    LOBYTE(v90) = 0;
    v92 = 0;
    goto LABEL_45;
  }
  LOBYTE(v96) = 11;
  v17 = 1;
  LODWORD(v98) = 1;
  buf[0] = 0;
  *(_DWORD *)&buf[16] = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v96);
  LOBYTE(v101) = 1;
  if (v98 != -1) {
    ((void (*)(uint64_t **, unsigned int **))off_1EE9E9E10[v98])(&v90, &v96);
  }
  while (1)
  {
    while (1)
    {
LABEL_52:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v93);
      if ((_BYTE)v101)
      {
        LOBYTE(v96) = 0;
        LODWORD(v98) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)buf);
        if ((_BYTE)v101 && *(_DWORD *)&buf[16] != -1) {
          (*(void (**)(uint64_t **, unsigned char *))(v16 + 8 * *(unsigned int *)&buf[16]))(&v90, buf);
        }
      }
      else
      {
        if (!v89) {
          goto LABEL_125;
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)a2, v87, v88);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)a3);
        IPC::Connection::sendSync<Messages::RemoteImageBuffer::GetPixelBuffer>((uint64_t)&v96, *(uint64_t *)buf, (uint64_t)&v78, v14, v5);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
      }
LABEL_56:
      a3 = v98;
      if (!v98) {
        break;
      }
      v14 = (uint64_t)off_1EB3583E8;
      if (!os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_113;
      }
      if (a3 == 1)
      {
        a3 = v96;
LABEL_112:
        v17 = (uint64_t)buf;
        v70 = v13[8];
        v71 = IPC::errorAsString();
        *(_DWORD *)buf = 134218498;
        *(void *)&buf[4] = v70;
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "RemoteImageBuffer_GetPixelBuffer";
        *(_WORD *)&buf[22] = 2082;
        v101 = (unint64_t *)v71;
        _os_log_impl(&dword_1985F2000, (os_log_t)v14, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::sendSync - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
LABEL_113:
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v13);
        break;
      }
      while (1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_133:
        v31 = 0;
LABEL_27:
        if (v30 <= 0x10) {
          v30 = 16;
        }
        v33 = v31 + v30;
        if (v32 <= v33) {
          v33 = 0;
        }
        *((void *)a2 + 10) = v33;
        if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)a2 + 9) + 16) + 128), v33) == 0x80000000
          || a2[29])
        {
          if (*((unsigned char *)a2 + 104)) {
            MEMORY[0x1997420B0](a2[23]);
          }
          a2[29] = 0;
        }
        while (1)
        {
          v34 = atomic_exchange(*(atomic_ullong *volatile *)(*((void *)a2 + 9) + 16), 0x80000000uLL);
          if (!(v34 | atomic_load_explicit((atomic_ullong *volatile)(*(void *)(*((void *)a2 + 9) + 16) + 128), memory_order_acquire) & 0xFFFFFFFF7FFFFFFFLL))break; {
          if (*((unsigned char *)a2 + 104))
          }
          {
            v35 = IPC::Semaphore::waitFor((semaphore_t *)a2 + 24, v5);
            if (v35)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v35);
              if (v36 < v5) {
                continue;
              }
            }
          }
          LOBYTE(v90) = 16;
          v91 = 1;
LABEL_44:
          v92 = 1;
          goto LABEL_45;
        }
        atomic_store(0, *(unint64_t **)(*((void *)a2 + 9) + 16));
        *((void *)a2 + 10) = 0;
        v37 = *((void *)a2 + 9);
        v38 = *(void *)(v37 + 8);
        if (v38 <= 0xFF) {
          goto LABEL_125;
        }
        v39 = *((void *)a2 + 8);
        v40 = *(void *)(v37 + 16);
        v41 = v38 - 256;
        if (v39)
        {
          v42 = v39 - 1;
          v43 = v41 >= v42;
          v41 = v42;
          if (!v43) {
            goto LABEL_125;
          }
        }
        v44 = v40 + 256;
        v45 = WTF::fastMalloc((WTF *)0x50);
        v46 = (uint64_t *)IPC::Decoder::Decoder(v45, v44, v41, *((void *)a2 + 7));
        if (*((_WORD *)v46 + 25) != 2870)
        {
          v90 = v46;
          v91 = 0;
          goto LABEL_44;
        }
        IPC::Decoder::~Decoder((IPC::Decoder *)v46);
        WTF::fastFree(v72, v73);
        IPC::Connection::waitForSyncReply((uint64_t)v93, v17, 0xE7Cu, (uint64_t)v94, v5);
        LOBYTE(v90) = 0;
        v91 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v90, (uint64_t)v94);
        v92 = 1;
        if (v95 != -1) {
          ((void (*)(char *, char *))off_1EE9E9D68[v95])(&v99, v94);
        }
LABEL_45:
        IPC::Connection::popPendingSyncRequestID(v93);
        if (!v92) {
          goto LABEL_126;
        }
        if (!v91) {
          break;
        }
        if (v91 == 1)
        {
          buf[0] = (_BYTE)v90;
          v48 = 1;
          *(_DWORD *)&buf[16] = 1;
          LOBYTE(v101) = 1;
LABEL_51:
          ((void (*)(unsigned int **, uint64_t **))off_1EE9E9D68[v48])(&v96, &v90);
          goto LABEL_52;
        }
      }
      v47 = (uint64_t)v90;
      v90 = 0;
      v96 = (unsigned int *)v47;
      LODWORD(v98) = 0;
      buf[0] = 0;
      *(_DWORD *)&buf[16] = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v96);
      LOBYTE(v101) = 1;
      if (v98 != -1) {
        (*(void (**)(char *, unsigned int **))(v16 + 8 * v98))(v94, &v96);
      }
      if (v92)
      {
        v48 = v91;
        if (v91 != -1) {
          goto LABEL_51;
        }
      }
    }
    v81[0] = 0;
    v82 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v81, (uint64_t)&v96);
    if (v98 != -1) {
      (*(void (**)(unsigned char *, unsigned int **))(v16 + 8 * v98))(buf, &v96);
    }
    v86 = 0;
    if (atomic_fetch_add(a2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)a2);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)a2, v49);
      WTF::fastFree(v68, v69);
    }
LABEL_61:
    v14 = v82;
    if (v82 == -1) {
      goto LABEL_63;
    }
    (*(void (**)(unsigned char *, unsigned char *))(v16 + 8 * v82))(buf, v81);
    if (v14) {
      goto LABEL_63;
    }
LABEL_104:
    if (v85) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v83);
    }
    v67 = v13[18];
    if (*(void *)(v67 + 8) >= (unint64_t)v15) {
      break;
    }
LABEL_125:
    __break(1u);
LABEL_126:
    buf[0] = 0;
    LOBYTE(v101) = 0;
  }
  result = (WebCore::PixelBuffer *)memcpy(__dst, *(const void **)(v67 + 16), (size_t)v15);
LABEL_67:
  v50 = v75;
LABEL_68:
  *a5 = v50;
  return result;
}

uint64_t WebKit::RemoteImageBufferProxy::clearBackend(uint64_t this)
{
  uint64_t v1 = this;
  *(unsigned char *)(this + 4016) = 0;
  if (*(void *)(this + 112))
  {
    uint64_t v2 = WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)this);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 160))(v2);
    }
    this = *(void *)(v1 + 112);
    *(void *)(v1 + 112) = 0;
    if (this)
    {
      v3 = *(uint64_t (**)(void))(*(void *)this + 8);
      return v3();
    }
  }
  else
  {
    *(void *)(this + 112) = 0;
  }
  return this;
}

uint64_t WebKit::RemoteImageBufferProxy::context(WebKit::RemoteImageBufferProxy *this)
{
  return (uint64_t)this + 144;
}

WTF::ApproximateTime *WebKit::RemoteImageBufferProxy::putPixelBuffer(uint64_t a1, WebCore::ByteArrayPixelBuffer *a2, uint64_t *a3, int *a4, char a5)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  result = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)a1);
  if (result)
  {
    result = (WTF::ApproximateTime *)(*(uint64_t (**)(WTF::ApproximateTime *))(*(void *)result + 152))(result);
    if (result)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = 0;
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(a1 + 144) + 216))(a1 + 144, buf, 1);
      WebKit::RemoteImageBufferProxy::flushDrawingContext(a1);
      return (WTF::ApproximateTime *)WebCore::ImageBuffer::putPixelBuffer();
    }
    uint64_t v11 = *(void *)(a1 + 136);
    if (v11)
    {
      v12 = *(WebKit::RemoteRenderingBackendProxy **)(v11 + 8);
      if (v12)
      {
        if (!*(unsigned char *)(a1 + 4016))
        {
          *(unsigned char *)(a1 + 4016) = 1;
          WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange((WebKit::RemoteImageBufferProxy *)a1);
          uint64_t v63 = *(void *)(a1 + 136);
          if (v63) {
            v12 = *(WebKit::RemoteRenderingBackendProxy **)(v63 + 8);
          }
          else {
            v12 = 0;
          }
        }
        uint64_t v13 = *(void *)(a1 + 120);
        ++*((_DWORD *)a2 + 2);
        uint64_t v14 = *a3;
        uint64_t v64 = a3[1];
        uint64_t v65 = v14;
        result = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(v12, &v66);
        v15 = v66;
        if (!v66) {
          goto LABEL_35;
        }
        double v16 = *((double *)v66 + 15);
        double v17 = INFINITY;
        if (fabs(v16) != INFINITY)
        {
          WTF::ApproximateTime::now(result);
          double v17 = v16 + v18;
        }
        if (*((void *)v15 + 7) != v13)
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v15 + 16), buf, v17);
          if (!buf[16]) {
            goto LABEL_56;
          }
          uint64_t v47 = *(void *)buf;
          unint64_t v48 = *(void *)&buf[8];
          unint64_t v49 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v50 = v49 - *(void *)buf;
          if (v49 < *(void *)buf)
          {
            unint64_t v52 = 0;
            unint64_t v51 = *(void *)&buf[8];
          }
          else
          {
            unint64_t v51 = 0;
            if (v50 > 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v52 = 0;
            }
            else
            {
              unint64_t v52 = 0;
              if (v50 + 2 <= *(void *)&buf[8])
              {
                *(_WORD *)(*(void *)buf + v50) = 2871;
                unint64_t v51 = v48;
                unint64_t v52 = v50 + 2;
              }
            }
          }
          v53 = (void *)((v47 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((unint64_t)v53 >= v47 + v52)
          {
            v54 = (char *)v53 - v47;
            if ((unint64_t)v53 - v47 > 0xFFFFFFFFFFFFFFF7) {
              goto LABEL_56;
            }
            unint64_t v52 = (unint64_t)(v54 + 8);
            if ((unint64_t)(v54 + 8) > v51) {
              goto LABEL_56;
            }
            void *v53 = v13;
          }
          if (!v51)
          {
LABEL_56:
            v44 = off_1EB3583E8;
            if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v45 = *((void *)v12 + 8);
              v46 = IPC::errorAsString();
              *(_DWORD *)buf = 134218498;
              *(void *)&buf[4] = v45;
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "RemoteImageBuffer_PutPixelBuffer";
              *(_WORD *)&buf[22] = 2082;
              v72 = v46;
              _os_log_impl(&dword_1985F2000, v44, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
            }
            result = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v12);
            goto LABEL_33;
          }
          unint64_t v55 = (*((void *)v15 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v56 = *((void *)v15 + 8);
          if (v55 + 16 >= v56) {
            unint64_t v55 = 0;
          }
          if (v52 <= 0x10) {
            unint64_t v52 = 16;
          }
          unint64_t v57 = v55 + v52;
          if (v56 <= v57) {
            unint64_t v58 = 0;
          }
          else {
            unint64_t v58 = v57;
          }
          *((void *)v15 + 10) = v58;
          IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v15, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v15 + 9) + 16) + 128), v58) == 0x80000000);
          *((void *)v15 + 7) = v13;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v15 + 16), &v68, v17);
        if (v70)
        {
          *(void *)buf = v68;
          *(void *)&buf[8] = v69;
          *(void *)&buf[16] = 0;
          unint64_t v19 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v20 = v19 >= v68;
          unint64_t v21 = v19 - v68;
          if (v20)
          {
            if (v21 > 0xFFFFFFFFFFFFFFFDLL || v21 + 2 > v69)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v68 + v21) = 1123;
              *(void *)&buf[16] = v21 + 2;
            }
          }
          IPC::ArgumentCoder<WebCore::PixelBuffer,void>::encode((WTF::StringImpl *)buf, a2);
          uint64_t v22 = *(void *)buf;
          v23 = *(char **)&buf[16];
          v24 = (_DWORD *)((*(void *)buf + *(void *)&buf[16] + 3) & 0xFFFFFFFFFFFFFFFCLL);
          if ((unint64_t)v24 >= *(void *)buf + *(void *)&buf[16])
          {
            v25 = (char *)v24 - *(void *)buf;
            if ((unint64_t)v24 - *(void *)buf > 0xFFFFFFFFFFFFFFFBLL
              || (unint64_t)(v25 + 4) > *(void *)&buf[8])
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              _DWORD *v24 = v65;
              *(void *)&buf[16] = v25 + 4;
              uint64_t v22 = *(void *)buf;
              v23 = v25 + 4;
            }
          }
          v26 = (char *)((unint64_t)&v23[v22 + 3] & 0xFFFFFFFFFFFFFFFCLL);
          if (v26 >= &v23[v22])
          {
            v27 = &v26[-v22];
            if ((unint64_t)&v26[-v22] > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v27 + 4) > *(void *)&buf[8])
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_DWORD *)v26 = HIDWORD(v65);
              *(void *)&buf[16] = v27 + 4;
            }
          }
          IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)buf, &v64);
          result = (WTF::ApproximateTime *)IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)buf, a4);
          unint64_t v29 = *(void *)&buf[16];
          if (*(void *)&buf[16] < *(void *)&buf[8])
          {
            unint64_t v30 = *(void *)&buf[16] + 1;
            *(unsigned char *)(*(void *)buf + *(void *)&buf[16]) = a5;
            *(void *)&buf[16] = v29 + 1;
            unint64_t v29 = *(void *)&buf[8];
            if (*(void *)&buf[8])
            {
              unint64_t v31 = (*((void *)v15 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v29 = *((void *)v15 + 8);
              if (v31 + 16 < v29)
              {
LABEL_27:
                if (v30 <= 0x10) {
                  unint64_t v30 = 16;
                }
                unint64_t v32 = v31 + v30;
                if (v29 <= v32) {
                  unint64_t v32 = 0;
                }
                *((void *)v15 + 10) = v32;
                if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v15 + 9) + 16) + 128), v32) == 0x80000000
                  || v15[29])
                {
                  if (*((unsigned char *)v15 + 104)) {
                    result = (WTF::ApproximateTime *)MEMORY[0x1997420B0](v15[23]);
                  }
                  v15[29] = 0;
                }
LABEL_33:
                v66 = 0;
                if (atomic_fetch_add(v15, 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, (unsigned int *)v15);
                  IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v15, v28);
                  result = (WTF::ApproximateTime *)WTF::fastFree(v61, v62);
                }
LABEL_35:
                if (*((_DWORD *)a2 + 2) == 1) {
                  return (WTF::ApproximateTime *)(*(uint64_t (**)(WebCore::ByteArrayPixelBuffer *))(*(void *)a2 + 8))(a2);
                }
                --*((_DWORD *)a2 + 2);
                return result;
              }
LABEL_81:
              unint64_t v31 = 0;
              goto LABEL_27;
            }
          }
          unint64_t v30 = v70;
          if (!v70)
          {
            __break(1u);
            goto LABEL_81;
          }
          unint64_t v33 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v34 = v33 - v68;
          if (v33 < v68)
          {
            unint64_t v35 = 0;
          }
          else
          {
            unint64_t v35 = 0;
            if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v69)
            {
              *(_WORD *)(v68 + v34) = 2870;
              unint64_t v35 = v34 + 2;
            }
          }
          unint64_t v36 = (*((void *)v15 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v37 = *((void *)v15 + 8);
          if (v36 + 16 >= v37) {
            unint64_t v36 = 0;
          }
          if (v35 <= 0x10) {
            unint64_t v35 = 16;
          }
          unint64_t v38 = v36 + v35;
          if (v37 <= v38) {
            unint64_t v38 = 0;
          }
          *((void *)v15 + 10) = v38;
          atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v15 + 9) + 16) + 128), v38);
          v15[29] = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v15 + 1);
          v39 = v67;
          v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)v40 = 1123;
          *((void *)v40 + 1) = v13;
          *((void *)v40 + 66) = (char *)v40 + 16;
          *((void *)v40 + 67) = 512;
          *((void *)v40 + 68) = 0;
          *((void *)v40 + 70) = 0;
          *((void *)v40 + 69) = 0;
          IPC::Encoder::encodeHeader(v40);
          *(void *)buf = v40;
          IPC::ArgumentCoder<WebCore::PixelBuffer,void>::encode(v40, a2);
          IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v40, (int *)&v65);
          IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v40, (int *)&v64);
          IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v40, a4);
          IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v40, a5);
          int v42 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)buf, 1, 0);
          v43 = *(IPC::Encoder **)buf;
          *(void *)buf = 0;
          if (v43)
          {
            IPC::Encoder::~Encoder(v43, v41);
            WTF::fastFree(v59, v60);
          }
          result = (WTF::ApproximateTime *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v67);
          if (!v42) {
            goto LABEL_33;
          }
        }
        goto LABEL_56;
      }
    }
  }
  return result;
}

void WebKit::RemoteImageBufferProxy::convertToLuminanceMask(WebKit::RemoteImageBufferProxy *this)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 17);
  if (v1)
  {
    v3 = *(WebKit::RemoteRenderingBackendProxy **)(v1 + 8);
    if (v3)
    {
      v4 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(v3, &v51);
      v5 = v51;
      if (v51)
      {
        uint64_t v6 = *((void *)this + 15);
        double v7 = *((double *)v51 + 15);
        double v8 = INFINITY;
        if (fabs(v7) != INFINITY)
        {
          WTF::ApproximateTime::now(v4);
          double v8 = v7 + v9;
        }
        if (*((void *)v5 + 7) != v6)
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 16), buf, v8);
          if (!buf[16]) {
            goto LABEL_41;
          }
          uint64_t v20 = *(void *)buf;
          unint64_t v21 = *(void *)&buf[8];
          unint64_t v22 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v23 = v22 - *(void *)buf;
          if (v22 < *(void *)buf)
          {
            unint64_t v25 = 0;
            unint64_t v24 = *(void *)&buf[8];
          }
          else
          {
            unint64_t v24 = 0;
            if (v23 > 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v25 = 0;
            }
            else
            {
              unint64_t v25 = 0;
              if (v23 + 2 <= *(void *)&buf[8])
              {
                *(_WORD *)(*(void *)buf + v23) = 2871;
                unint64_t v24 = v21;
                unint64_t v25 = v23 + 2;
              }
            }
          }
          v26 = (void *)((v20 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((unint64_t)v26 >= v20 + v25)
          {
            v27 = (char *)v26 - v20;
            if ((unint64_t)v26 - v20 > 0xFFFFFFFFFFFFFFF7) {
              goto LABEL_41;
            }
            unint64_t v25 = (unint64_t)(v27 + 8);
            if ((unint64_t)(v27 + 8) > v24) {
              goto LABEL_41;
            }
            void *v26 = v6;
          }
          if (!v24)
          {
LABEL_41:
            unint64_t v32 = off_1EB3583E8;
            if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
            {
              unint64_t v33 = IPC::errorAsString();
              *(_DWORD *)buf = 136446466;
              *(void *)&buf[4] = "RemoteImageBuffer_ConvertToLuminanceMask";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v33;
              _os_log_impl(&dword_1985F2000, v32, OS_LOG_TYPE_DEFAULT, "RemoteImageBufferProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
            }
            uint64_t v34 = *((void *)this + 17);
            if (v34)
            {
              unint64_t v35 = *(unsigned char **)(v34 + 8);
              if (v35) {
                WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v35);
              }
            }
            goto LABEL_64;
          }
          unint64_t v28 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v29 = *((void *)v5 + 8);
          if (v28 + 16 >= v29) {
            unint64_t v28 = 0;
          }
          if (v25 <= 0x10) {
            unint64_t v25 = 16;
          }
          unint64_t v30 = v28 + v25;
          if (v29 <= v30) {
            unint64_t v31 = 0;
          }
          else {
            unint64_t v31 = v30;
          }
          *((void *)v5 + 10) = v31;
          IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v5, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v31) == 0x80000000);
          *((void *)v5 + 7) = v6;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 16), buf, v8);
        if (buf[16])
        {
          unint64_t v11 = *(void *)buf;
          uint64_t v12 = *(void *)&buf[8];
          uint64_t v13 = (_WORD *)((*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
          unint64_t v14 = (unint64_t)v13 - *(void *)buf;
          if ((unint64_t)v13 < *(void *)buf)
          {
            unint64_t v15 = 0;
            if (*(void *)&buf[8]) {
              goto LABEL_12;
            }
          }
          else
          {
            if (v14 > 0xFFFFFFFFFFFFFFFDLL) {
              goto LABEL_50;
            }
            unint64_t v15 = v14 + 2;
            if (v14 + 2 > *(void *)&buf[8]) {
              goto LABEL_50;
            }
            *uint64_t v13 = 1121;
            if (v12)
            {
LABEL_12:
              uint64_t v16 = *((void *)v5 + 9);
              unint64_t v17 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v18 = *((void *)v5 + 8);
              if (v17 + 16 >= v18) {
                unint64_t v17 = 0;
              }
              if (v15 <= 0x10) {
                unint64_t v15 = 16;
              }
              unint64_t v19 = v17 + v15;
              if (v18 <= v19) {
                unint64_t v19 = 0;
              }
              *((void *)v5 + 10) = v19;
              if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v16 + 16) + 128), v19) == 0x80000000
                || v5[29])
              {
                if (*((unsigned char *)v5 + 104)) {
                  MEMORY[0x1997420B0](v5[23]);
                }
                v5[29] = 0;
              }
LABEL_64:
              unint64_t v51 = 0;
              if (atomic_fetch_add(v5, 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, (unsigned int *)v5);
                IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v5, v10);
                WTF::fastFree(v49, v50);
              }
              return;
            }
          }
          unint64_t v36 = buf[16];
          if (!buf[16])
          {
            __break(1u);
            goto LABEL_68;
          }
          unint64_t v11 = *(void *)buf;
          uint64_t v13 = (_WORD *)((*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_50:
          unint64_t v15 = 0;
          BOOL v37 = (unint64_t)v13 >= v11;
          unint64_t v38 = (unint64_t)v13 - v11;
          if (v37 && v38 <= 0xFFFFFFFFFFFFFFFDLL && v38 + 2 <= *(void *)&buf[8])
          {
            *(_WORD *)(v11 + v38) = 2870;
            unint64_t v15 = v38 + 2;
          }
          unint64_t v39 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v36 = *((void *)v5 + 8);
          if (v39 + 16 < v36)
          {
LABEL_56:
            if (v15 <= 0x10) {
              unint64_t v15 = 16;
            }
            unint64_t v40 = v39 + v15;
            if (v36 <= v40) {
              unint64_t v41 = 0;
            }
            else {
              unint64_t v41 = v40;
            }
            *((void *)v5 + 10) = v41;
            atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v41);
            v5[29] = 0;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)v5 + 1);
            int v42 = v52;
            v43 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)v43 = 1121;
            *((void *)v43 + 1) = v6;
            *((void *)v43 + 66) = (char *)v43 + 16;
            *((void *)v43 + 67) = 512;
            *((void *)v43 + 68) = 0;
            *((void *)v43 + 70) = 0;
            *((void *)v43 + 69) = 0;
            IPC::Encoder::encodeHeader(v43);
            v53 = v43;
            int v45 = IPC::Connection::sendMessageImpl((uint64_t)v42, (uint64_t *)&v53, 1, 0);
            v46 = v53;
            v53 = 0;
            if (v46)
            {
              IPC::Encoder::~Encoder(v46, v44);
              WTF::fastFree(v47, v48);
            }
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v52);
            if (!v45) {
              goto LABEL_64;
            }
            goto LABEL_41;
          }
LABEL_68:
          unint64_t v39 = 0;
          goto LABEL_56;
        }
        goto LABEL_41;
      }
    }
  }
}

void WebKit::RemoteImageBufferProxy::transformToColorSpace(WebKit::RemoteImageBufferProxy *this, CFTypeRef *a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 17);
  if (v2)
  {
    v4 = *(WebKit::RemoteRenderingBackendProxy **)(v2 + 8);
    if (v4)
    {
      uint64_t v6 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(v4, &v52);
      double v7 = v52;
      if (v52)
      {
        uint64_t v8 = *((void *)this + 15);
        double v9 = *((double *)v52 + 15);
        double v10 = INFINITY;
        if (fabs(v9) != INFINITY)
        {
          WTF::ApproximateTime::now(v6);
          double v10 = v9 + v11;
        }
        if (*((void *)v7 + 7) != v8)
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 16), buf, v10);
          if (!buf[16]) {
            goto LABEL_57;
          }
          uint64_t v34 = *(void *)buf;
          unint64_t v35 = *(void *)&buf[8];
          unint64_t v36 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v37 = v36 - *(void *)buf;
          if (v36 < *(void *)buf)
          {
            unint64_t v39 = 0;
            unint64_t v38 = *(void *)&buf[8];
          }
          else
          {
            unint64_t v38 = 0;
            if (v37 > 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v39 = 0;
            }
            else
            {
              unint64_t v39 = 0;
              if (v37 + 2 <= *(void *)&buf[8])
              {
                *(_WORD *)(*(void *)buf + v37) = 2871;
                unint64_t v38 = v35;
                unint64_t v39 = v37 + 2;
              }
            }
          }
          unint64_t v40 = (void *)((v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((unint64_t)v40 >= v34 + v39)
          {
            unint64_t v41 = (char *)v40 - v34;
            if ((unint64_t)v40 - v34 > 0xFFFFFFFFFFFFFFF7) {
              goto LABEL_57;
            }
            unint64_t v39 = (unint64_t)(v41 + 8);
            if ((unint64_t)(v41 + 8) > v38) {
              goto LABEL_57;
            }
            void *v40 = v8;
          }
          if (!v38)
          {
LABEL_57:
            v46 = off_1EB3583E8;
            if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v47 = IPC::errorAsString();
              *(_DWORD *)buf = 136446466;
              *(void *)&buf[4] = "RemoteImageBuffer_TransformToColorSpace";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v47;
              _os_log_impl(&dword_1985F2000, v46, OS_LOG_TYPE_DEFAULT, "RemoteImageBufferProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
            }
            uint64_t v48 = *((void *)this + 17);
            if (v48)
            {
              unint64_t v49 = *(unsigned char **)(v48 + 8);
              if (v49) {
                WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v49);
              }
            }
            goto LABEL_62;
          }
          unint64_t v42 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v43 = *((void *)v7 + 8);
          if (v42 + 16 >= v43) {
            unint64_t v42 = 0;
          }
          if (v39 <= 0x10) {
            unint64_t v39 = 16;
          }
          unint64_t v44 = v42 + v39;
          if (v43 <= v44) {
            unint64_t v45 = 0;
          }
          else {
            unint64_t v45 = v44;
          }
          *((void *)v7 + 10) = v45;
          IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v7, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v45) == 0x80000000);
          *((void *)v7 + 7) = v8;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 16), &v54, v10);
        if (v56)
        {
          *(void *)buf = v54;
          *(void *)&buf[8] = v55;
          *(void *)&buf[16] = 0;
          unint64_t v12 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v13 = v12 >= v54;
          unint64_t v14 = v12 - v54;
          if (v13)
          {
            if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v55)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v54 + v14) = 1124;
              *(void *)&buf[16] = v14 + 2;
            }
          }
          IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)buf, a2);
          if (*(void *)&buf[8])
          {
            uint64_t v17 = *(void *)&buf[16];
            uint64_t v18 = *((void *)v7 + 9);
            unint64_t v19 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v20 = *((void *)v7 + 8);
            if (v19 + 16 >= v20) {
              unint64_t v19 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v17 = 16;
            }
            unint64_t v21 = v19 + v17;
            if (v20 <= v21) {
              unint64_t v21 = 0;
            }
            *((void *)v7 + 10) = v21;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v18 + 16) + 128), v21) == 0x80000000 || v7[29])
            {
              if (*((unsigned char *)v7 + 104)) {
                MEMORY[0x1997420B0](v7[23]);
              }
              v7[29] = 0;
            }
LABEL_62:
            unint64_t v52 = 0;
            if (atomic_fetch_add(v7, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, (unsigned int *)v7);
              IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v7, v15);
              WTF::fastFree(v50, v51);
            }
            return;
          }
          unint64_t v22 = v56;
          if (v56)
          {
            unint64_t v23 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v24 = v23 - v54;
            if (v23 < v54)
            {
              unint64_t v22 = 0;
            }
            else
            {
              unint64_t v22 = 0;
              if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v55)
              {
                *(_WORD *)(v54 + v24) = 2870;
                unint64_t v22 = v24 + 2;
              }
            }
            unint64_t v25 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v16 = *((void *)v7 + 8);
            if (v25 + 16 < v16)
            {
LABEL_31:
              if (v22 <= 0x10) {
                unint64_t v22 = 16;
              }
              unint64_t v26 = v25 + v22;
              if (v16 <= v26) {
                unint64_t v26 = 0;
              }
              *((void *)v7 + 10) = v26;
              atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v26);
              v7[29] = 0;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v53, (uint64_t **)v7 + 1);
              v27 = v53;
              unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)unint64_t v28 = 1124;
              *((void *)v28 + 1) = v8;
              *((void *)v28 + 66) = (char *)v28 + 16;
              *((void *)v28 + 67) = 512;
              *((void *)v28 + 68) = 0;
              *((void *)v28 + 70) = 0;
              *((void *)v28 + 69) = 0;
              IPC::Encoder::encodeHeader(v28);
              *(void *)buf = v28;
              IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(v28, a2);
              int v30 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)buf, 1, 0);
              unint64_t v31 = *(IPC::Encoder **)buf;
              *(void *)buf = 0;
              if (v31)
              {
                IPC::Encoder::~Encoder(v31, v29);
                WTF::fastFree(v32, v33);
              }
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v53);
              if (!v30) {
                goto LABEL_62;
              }
              goto LABEL_57;
            }
          }
          else
          {
            __break(1u);
          }
          unint64_t v25 = 0;
          goto LABEL_31;
        }
        goto LABEL_57;
      }
    }
  }
}

unsigned int *WebKit::RemoteImageBufferProxy::sinkIntoSerializedImageBuffer@<X0>(WebKit::RemoteImageBufferProxy *this@<X0>, uint64_t *a2@<X8>)
{
  WebKit::RemoteImageBufferProxy::flushDrawingContext((uint64_t)this);
  result = WebKit::RemoteDisplayListRecorderProxy::disconnect((WebKit::RemoteImageBufferProxy *)((char *)this + 144), v4);
  uint64_t v6 = *((void *)this + 17);
  if (!v6 || !*(void *)(v6 + 8)) {
    goto LABEL_15;
  }
  uint64_t v7 = WebKit::RemoteImageBufferProxy::ensureBackend(this);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 160))(v7);
  }
  result = (unsigned int *)WebKit::RemoteImageBufferProxy::ensureBackend(this);
  if (result)
  {
    uint64_t v8 = *((void *)this + 17);
    if (v8) {
      uint64_t v8 = *(void *)(v8 + 8);
    }
    WebKit::RemoteResourceCacheProxy::forgetImageBuffer(v8 + 72, *((void *)this + 15));
    uint64_t v9 = *((void *)this + 17);
    if (v9) {
      double v10 = *(WebKit::RemoteRenderingBackendProxy **)(v9 + 8);
    }
    else {
      double v10 = 0;
    }
    uint64_t v11 = WTF::fastMalloc((WTF *)0x78);
    uint64_t v12 = v11;
    uint64_t v15 = *((void *)this + 2);
    int v16 = *((_DWORD *)this + 6);
    BOOL v13 = (const void *)*((void *)this + 4);
    uint64_t v17 = v13;
    if (v13)
    {
      CFRetain(v13);
      __int16 v18 = *((_WORD *)this + 20);
      WebKit::RemoteSerializedImageBufferProxy::RemoteSerializedImageBufferProxy(v12, &v15, (long long *)this + 3, (uint64_t *)this + 15, v10);
      CFRelease(v13);
    }
    else
    {
      __int16 v18 = *((_WORD *)this + 20);
      WebKit::RemoteSerializedImageBufferProxy::RemoteSerializedImageBufferProxy(v11, &v15, (long long *)this + 3, (uint64_t *)this + 15, v10);
    }
    WebKit::RemoteImageBufferProxy::clearBackend((uint64_t)this);
    result = (unsigned int *)*((void *)this + 17);
    *((void *)this + 17) = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v14);
    }
  }
  else
  {
LABEL_15:
    uint64_t v12 = 0;
  }
  *a2 = v12;
  return result;
}

uint64_t WebKit::RemoteSerializedImageBufferProxy::RemoteSerializedImageBufferProxy(uint64_t a1, uint64_t *a2, long long *a3, uint64_t *a4, WebKit::RemoteRenderingBackendProxy *this)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EE9E9748;
  uint64_t v10 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 2);
  *(void *)(a1 + 8) = v10;
  uint64_t v11 = (const void *)a2[2];
  *(void *)(a1 + 24) = v11;
  if (v11) {
    CFRetain(v11);
  }
  *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 12);
  long long v12 = *a3;
  long long v13 = a3[1];
  long long v14 = a3[2];
  *(_OWORD *)(a1 + 88) = a3[3];
  *(_OWORD *)(a1 + 72) = v14;
  *(_OWORD *)(a1 + 56) = v13;
  *(_OWORD *)(a1 + 40) = v12;
  uint64_t v15 = *a4;
  *(void *)(a1 + 104) = *a4;
  *(void *)(a1 + 112) = 0;
  uint64_t v66 = v15;
  uint64_t v16 = *((void *)this + 8);
  uint64_t v17 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(this, &v67);
  __int16 v18 = v67;
  if (!v67) {
    return a1;
  }
  double v19 = *((double *)v67 + 15);
  double v20 = INFINITY;
  if (fabs(v19) != INFINITY)
  {
    WTF::ApproximateTime::now(v17);
    double v20 = v19 + v21;
  }
  if (*((void *)v18 + 7) != v16)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v18 + 16), buf, v20);
    if (!buf[16]) {
      goto LABEL_62;
    }
    uint64_t v48 = *(void *)buf;
    unint64_t v49 = *(void *)&buf[8];
    unint64_t v50 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - *(void *)buf;
    if (v50 < *(void *)buf)
    {
      unint64_t v53 = 0;
      unint64_t v52 = *(void *)&buf[8];
    }
    else
    {
      unint64_t v52 = 0;
      if (v51 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v53 = 0;
      }
      else
      {
        unint64_t v53 = 0;
        if (v51 + 2 <= *(void *)&buf[8])
        {
          *(_WORD *)(*(void *)buf + v51) = 2871;
          unint64_t v52 = v49;
          unint64_t v53 = v51 + 2;
        }
      }
    }
    unint64_t v54 = (void *)((v48 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v54 >= v48 + v53)
    {
      unint64_t v55 = (char *)v54 - v48;
      if ((unint64_t)v54 - v48 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_62;
      }
      unint64_t v53 = (unint64_t)(v55 + 8);
      if ((unint64_t)(v55 + 8) > v52) {
        goto LABEL_62;
      }
      void *v54 = v16;
    }
    if (!v52) {
      goto LABEL_62;
    }
    unint64_t v56 = (*((void *)v18 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v57 = *((void *)v18 + 8);
    if (v56 + 16 >= v57) {
      unint64_t v56 = 0;
    }
    if (v53 <= 0x10) {
      unint64_t v53 = 16;
    }
    unint64_t v58 = v56 + v53;
    if (v57 <= v58) {
      unint64_t v59 = 0;
    }
    else {
      unint64_t v59 = v58;
    }
    *((void *)v18 + 10) = v59;
    IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v18, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v18 + 9) + 16) + 128), v59) == 0x80000000);
    *((void *)v18 + 7) = v16;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v18 + 16), buf, v20);
  if (!buf[16]) {
    goto LABEL_62;
  }
  uint64_t v23 = *(void *)buf;
  unint64_t v24 = *(void *)&buf[8];
  unint64_t v25 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v26 = v25 - *(void *)buf;
  if (v25 < *(void *)buf)
  {
    unint64_t v28 = 0;
    unint64_t v27 = *(void *)&buf[8];
  }
  else
  {
    unint64_t v27 = 0;
    if (v26 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_69;
    }
    unint64_t v28 = 0;
    if (v26 + 2 <= *(void *)&buf[8])
    {
      *(_WORD *)(*(void *)buf + v26) = 1338;
      unint64_t v27 = v24;
      unint64_t v28 = v26 + 2;
    }
  }
  while (1)
  {
    unint64_t v29 = (void *)((v23 + v28 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v29 >= v23 + v28)
    {
      int v30 = (char *)v29 - v23;
      if ((unint64_t)v29 - v23 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_29;
      }
      unint64_t v28 = (unint64_t)(v30 + 8);
      if ((unint64_t)(v30 + 8) > v27) {
        goto LABEL_29;
      }
      *unint64_t v29 = v66;
    }
    if (v27)
    {
      unint64_t v31 = (*((void *)v18 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *((void *)v18 + 8);
      if (v31 + 16 >= v32) {
        unint64_t v31 = 0;
      }
      if (v28 <= 0x10) {
        unint64_t v28 = 16;
      }
      unint64_t v33 = v31 + v28;
      if (v32 <= v33) {
        unint64_t v34 = 0;
      }
      else {
        unint64_t v34 = v33;
      }
      *((void *)v18 + 10) = v34;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v18 + 9) + 16) + 128), v34) == 0x80000000
        || v18[29])
      {
        if (*((unsigned char *)v18 + 104)) {
          MEMORY[0x1997420B0](v18[23]);
        }
        v18[29] = 0;
      }
      goto LABEL_65;
    }
LABEL_29:
    uint64_t v23 = buf[16];
    if (buf[16]) {
      break;
    }
    __break(1u);
LABEL_69:
    unint64_t v28 = v27;
  }
  unint64_t v35 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v35 - *(void *)buf;
  if (v35 < *(void *)buf)
  {
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= *(void *)&buf[8])
    {
      *(_WORD *)(*(void *)buf + v36) = 2870;
      unint64_t v37 = v36 + 2;
    }
  }
  unint64_t v38 = (*((void *)v18 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *((void *)v18 + 8);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v37 <= 0x10) {
    unint64_t v37 = 16;
  }
  unint64_t v40 = v38 + v37;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *((void *)v18 + 10) = v40;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v18 + 9) + 16) + 128), v40);
  v18[29] = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v68, (uint64_t **)v18 + 1);
  unint64_t v41 = v68;
  unint64_t v42 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v42 = 1338;
  *((void *)v42 + 1) = v16;
  *((void *)v42 + 66) = (char *)v42 + 16;
  *((void *)v42 + 67) = 512;
  *((void *)v42 + 68) = 0;
  *((void *)v42 + 70) = 0;
  *((void *)v42 + 69) = 0;
  IPC::Encoder::encodeHeader(v42);
  unint64_t v69 = v42;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v42, &v66);
  int v44 = IPC::Connection::sendMessageImpl((uint64_t)v41, (uint64_t *)&v69, 1, 0);
  unint64_t v45 = v69;
  unint64_t v69 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v43);
    WTF::fastFree(v46, v47);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v68);
  if (v44)
  {
LABEL_62:
    v60 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v61 = *((void *)this + 8);
      v62 = IPC::errorAsString();
      *(_DWORD *)buf = 134218498;
      *(void *)&buf[4] = v61;
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = "RemoteRenderingBackend_MoveToSerializedBuffer";
      __int16 v71 = 2082;
      v72 = v62;
      _os_log_impl(&dword_1985F2000, v60, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
    }
    WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(this);
  }
LABEL_65:
  v67 = 0;
  if (atomic_fetch_add(v18, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v18);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v18, v22);
    WTF::fastFree(v64, v65);
  }
  return a1;
}

WTF::ApproximateTime *WebKit::RemoteSerializedImageBufferProxy::sinkIntoImageBuffer@<X0>(uint64_t *a1@<X0>, WebKit::RemoteRenderingBackendProxy *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WTF::fastMalloc((WTF *)0xFB8);
  uint64_t v7 = *a1;
  uint64_t v68 = *(void *)(*a1 + 8);
  int v69 = *(_DWORD *)(v7 + 16);
  uint64_t v8 = *(const void **)(v7 + 24);
  unsigned __int8 v70 = v8;
  uint64_t v9 = v7;
  if (v8)
  {
    CFRetain(v8);
    uint64_t v9 = *a1;
  }
  __int16 v71 = *(_WORD *)(v7 + 32);
  *(void *)buf = 0;
  WebKit::RemoteImageBufferProxy::RemoteImageBufferProxy(v6, (uint64_t)&v68, v9 + 40, (uint64_t)a2);
  uint64_t v10 = *(void *)buf;
  *(void *)buf = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  unsigned __int8 v70 = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v72 = *(void *)(v6 + 120);
  uint64_t v11 = *((void *)a2 + 8);
  result = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(a2, &v73);
  long long v13 = v73;
  if (!v73) {
    goto LABEL_70;
  }
  double v14 = *((double *)v73 + 15);
  double v15 = INFINITY;
  if (fabs(v14) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v15 = v14 + v16;
  }
  if (*((void *)v13 + 7) != v11)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v13 + 16), buf, v15);
    if (!buf[16]) {
      goto LABEL_66;
    }
    uint64_t v43 = *(void *)buf;
    unint64_t v44 = *(void *)&buf[8];
    unint64_t v45 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - *(void *)buf;
    if (v45 < *(void *)buf)
    {
      unint64_t v48 = 0;
      unint64_t v47 = *(void *)&buf[8];
    }
    else
    {
      unint64_t v47 = 0;
      if (v46 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v48 = 0;
      }
      else
      {
        unint64_t v48 = 0;
        if (v46 + 2 <= *(void *)&buf[8])
        {
          *(_WORD *)(*(void *)buf + v46) = 2871;
          unint64_t v47 = v44;
          unint64_t v48 = v46 + 2;
        }
      }
    }
    unint64_t v49 = (void *)((v43 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v49 >= v43 + v48)
    {
      unint64_t v50 = (char *)v49 - v43;
      if ((unint64_t)v49 - v43 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_66;
      }
      unint64_t v48 = (unint64_t)(v50 + 8);
      if ((unint64_t)(v50 + 8) > v47) {
        goto LABEL_66;
      }
      *unint64_t v49 = v11;
    }
    if (!v47) {
      goto LABEL_66;
    }
    unint64_t v51 = (*((void *)v13 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v52 = *((void *)v13 + 8);
    if (v51 + 16 >= v52) {
      unint64_t v51 = 0;
    }
    if (v48 <= 0x10) {
      unint64_t v48 = 16;
    }
    unint64_t v53 = v51 + v48;
    if (v52 <= v53) {
      unint64_t v54 = 0;
    }
    else {
      unint64_t v54 = v53;
    }
    *((void *)v13 + 10) = v54;
    IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v13, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v13 + 9) + 16) + 128), v54) == 0x80000000);
    *((void *)v13 + 7) = v11;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v13 + 16), buf, v15);
  if (!buf[16]) {
    goto LABEL_66;
  }
  uint64_t v18 = *(void *)buf;
  unint64_t v19 = *(void *)&buf[8];
  unint64_t v20 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v21 = v20 - *(void *)buf;
  if (v20 < *(void *)buf)
  {
    unint64_t v23 = 0;
    unint64_t v22 = *(void *)&buf[8];
  }
  else
  {
    unint64_t v22 = 0;
    if (v21 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_84;
    }
    unint64_t v23 = 0;
    if (v21 + 2 <= *(void *)&buf[8])
    {
      *(_WORD *)(*(void *)buf + v21) = 1337;
      unint64_t v22 = v19;
      unint64_t v23 = v21 + 2;
    }
  }
  while (1)
  {
    unint64_t v24 = (void *)((v18 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v24 >= v18 + v23)
    {
      unint64_t v25 = (char *)v24 - v18;
      if ((unint64_t)v24 - v18 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_33;
      }
      unint64_t v23 = (unint64_t)(v25 + 8);
      if ((unint64_t)(v25 + 8) > v22) {
        goto LABEL_33;
      }
      void *v24 = v72;
    }
    if (v22)
    {
      unint64_t v26 = (*((void *)v13 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v27 = *((void *)v13 + 8);
      if (v26 + 16 >= v27) {
        unint64_t v26 = 0;
      }
      if (v23 <= 0x10) {
        unint64_t v23 = 16;
      }
      unint64_t v28 = v26 + v23;
      if (v27 <= v28) {
        unint64_t v29 = 0;
      }
      else {
        unint64_t v29 = v28;
      }
      *((void *)v13 + 10) = v29;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v13 + 9) + 16) + 128), v29) == 0x80000000
        || v13[29])
      {
        if (*((unsigned char *)v13 + 104)) {
          MEMORY[0x1997420B0](v13[23]);
        }
        v13[29] = 0;
      }
      goto LABEL_69;
    }
LABEL_33:
    uint64_t v18 = buf[16];
    if (buf[16]) {
      break;
    }
    __break(1u);
LABEL_84:
    unint64_t v23 = v22;
  }
  unint64_t v30 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = v30 - *(void *)buf;
  if (v30 < *(void *)buf)
  {
    unint64_t v32 = 0;
  }
  else
  {
    unint64_t v32 = 0;
    if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= *(void *)&buf[8])
    {
      *(_WORD *)(*(void *)buf + v31) = 2870;
      unint64_t v32 = v31 + 2;
    }
  }
  unint64_t v33 = (*((void *)v13 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = *((void *)v13 + 8);
  if (v33 + 16 >= v34) {
    unint64_t v33 = 0;
  }
  if (v32 <= 0x10) {
    unint64_t v32 = 16;
  }
  unint64_t v35 = v33 + v32;
  if (v34 <= v35) {
    unint64_t v35 = 0;
  }
  *((void *)v13 + 10) = v35;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v13 + 9) + 16) + 128), v35);
  v13[29] = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v74, (uint64_t **)v13 + 1);
  unint64_t v36 = v74;
  unint64_t v37 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v37 = 1337;
  *((void *)v37 + 1) = v11;
  *((void *)v37 + 66) = (char *)v37 + 16;
  *((void *)v37 + 67) = 512;
  *((void *)v37 + 68) = 0;
  *((void *)v37 + 70) = 0;
  *((void *)v37 + 69) = 0;
  IPC::Encoder::encodeHeader(v37);
  v75 = v37;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v37, &v72);
  int v39 = IPC::Connection::sendMessageImpl((uint64_t)v36, (uint64_t *)&v75, 1, 0);
  unint64_t v40 = v75;
  v75 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v74);
  if (v39)
  {
LABEL_66:
    unint64_t v55 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v56 = *((void *)a2 + 8);
      unint64_t v57 = IPC::errorAsString();
      *(_DWORD *)buf = 134218498;
      *(void *)&buf[4] = v56;
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = "RemoteRenderingBackend_MoveToImageBuffer";
      __int16 v77 = 2082;
      v78 = v57;
      _os_log_impl(&dword_1985F2000, v55, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
    }
    WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a2);
  }
LABEL_69:
  result = (WTF::ApproximateTime *)WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v13, v17);
LABEL_70:
  unint64_t v58 = *(atomic_uchar *volatile **)(*a1 + 112);
  *(void *)(*a1 + 112) = 0;
  if (v58)
  {
    char v59 = 0;
    atomic_uchar *volatile v60 = *v58;
    atomic_compare_exchange_strong_explicit(*v58, (unsigned __int8 *)&v59, 1u, memory_order_acquire, memory_order_acquire);
    if (v59) {
      result = (WTF::ApproximateTime *)MEMORY[0x19972E8D0](v60);
    }
    uint64_t v61 = *((void *)v60 + 1);
    uint64_t v62 = v61 - 1;
    *((void *)v60 + 1) = v61 - 1;
    if (v61 == 1)
    {
      uint64_t v67 = *((void *)v60 + 2);
      uint64_t v64 = *((void *)v60 + 3);
      *((void *)v60 + 3) = 0;
      BOOL v63 = v67 == 0;
    }
    else
    {
      BOOL v63 = 0;
      uint64_t v64 = 0;
    }
    int v65 = 1;
    atomic_compare_exchange_strong_explicit(v60, (unsigned __int8 *)&v65, 0, memory_order_release, memory_order_relaxed);
    if (v65 == 1)
    {
      if (!v62)
      {
LABEL_77:
        uint64_t v66 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v66 = &unk_1EE9B37E8;
        *(void *)(v66 + 8) = v60;
        *(void *)(v66 + 16) = v64;
        *(unsigned char *)(v66 + 24) = v63;
        *(void *)buf = v66;
        WTF::ensureOnMainRunLoop();
        result = *(WTF::ApproximateTime **)buf;
        *(void *)buf = 0;
        if (result) {
          result = (WTF::ApproximateTime *)(*(uint64_t (**)(WTF::ApproximateTime *))(*(void *)result + 8))(result);
        }
      }
    }
    else
    {
      result = (WTF::ApproximateTime *)WTF::Lock::unlockSlow((WTF::Lock *)v60);
      if (!v62) {
        goto LABEL_77;
      }
    }
  }
  *a3 = v6;
  return result;
}

void WebKit::RemoteSerializedImageBufferProxy::~RemoteSerializedImageBufferProxy(WebKit::RemoteSerializedImageBufferProxy *this)
{
  *(void *)this = &unk_1EE9E9748;
  uint64_t v2 = *((void *)this + 14);
  if (!v2)
  {
    *((void *)this + 14) = 0;
    goto LABEL_14;
  }
  v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)v3 = 1375;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v20 = v3;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v3, (uint64_t *)this + 13);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v20, 0, 0);
  v5 = v20;
  unint64_t v20 = 0;
  if (v5)
  {
    IPC::Encoder::~Encoder(v5, v4);
    WTF::fastFree(v17, v18);
  }
  uint64_t v6 = (atomic_uchar *volatile *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v6)
  {
    char v7 = 0;
    atomic_uchar *volatile v8 = *v6;
    atomic_compare_exchange_strong_explicit(*v6, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      MEMORY[0x19972E8D0](v8);
    }
    uint64_t v9 = *((void *)v8 + 1);
    uint64_t v10 = v9 - 1;
    *((void *)v8 + 1) = v9 - 1;
    if (v9 == 1)
    {
      uint64_t v19 = *((void *)v8 + 2);
      uint64_t v12 = *((void *)v8 + 3);
      *((void *)v8 + 3) = 0;
      BOOL v11 = v19 == 0;
    }
    else
    {
      BOOL v11 = 0;
      uint64_t v12 = 0;
    }
    int v13 = 1;
    atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 == 1)
    {
      if (v10) {
        goto LABEL_14;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
      if (v10) {
        goto LABEL_14;
      }
    }
    uint64_t v14 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v14 = &unk_1EE9B37E8;
    *(void *)(v14 + 8) = v8;
    *(void *)(v14 + 16) = v12;
    *(unsigned char *)(v14 + 24) = v11;
    unint64_t v20 = (IPC::Encoder *)v14;
    WTF::ensureOnMainRunLoop();
    double v15 = v20;
    unint64_t v20 = 0;
    if (v15) {
      (*(void (**)(IPC::Encoder *))(*(void *)v15 + 8))(v15);
    }
  }
LABEL_14:
  double v16 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v16) {
    CFRelease(v16);
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteSerializedImageBufferProxy::~RemoteSerializedImageBufferProxy(this);

  WTF::fastFree(v1, v2);
}

unsigned int *WebKit::RemoteImageBufferSetProxy::remoteBufferSetWasDestroyed(WebKit::RemoteImageBufferSetProxy *this)
{
  char v2 = 0;
  v3 = (WebKit::RemoteImageBufferSetProxy *)((char *)this + 89);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 89, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0]((char *)this + 89);
  }
  uint64_t v4 = *((void *)this + 12);
  if (v4)
  {
    v10[0] = 0;
    char v12 = 0;
    char v13 = 0;
    char v14 = 0;
    char v15 = 0;
    char v16 = 0;
    char v17 = 0;
    char v18 = 0;
    WebKit::RemoteImageBufferSetProxyFlushFence::setHandles(v4, (uint64_t)v10);
    if (v12 && v11 != -1) {
      off_1EE9E9D58[v11]((int)&v19, (WTF::MachSendRight *)v10);
    }
    uint64_t v6 = *((void *)this + 12);
    *((void *)this + 12) = 0;
    if (v6) {
      WTF::ThreadSafeRefCounted<WebKit::RemoteImageBufferSetProxyFlushFence,(WTF::DestructionThread)0>::deref(v6, v5);
    }
  }
  result = (unsigned int *)*((void *)this + 13);
  if (result)
  {
    IPC::StreamClientConnection::removeWorkQueueMessageReceiver((uint64_t)result, 0x57u, *((void *)this + 3));
    result = (unsigned int *)*((void *)this + 13);
    *((void *)this + 13) = 0;
    if (result) {
      result = WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(result, v8);
    }
  }
  *((unsigned char *)this + 112) = 0;
  ++*((_DWORD *)this + 21);
  int v9 = 1;
  *((unsigned char *)this + 88) = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 89, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    return (unsigned int *)WTF::Lock::unlockSlow(v3);
  }
  return result;
}

void WebKit::RemoteNativeImageBackendProxy::~RemoteNativeImageBackendProxy(WebKit::RemoteNativeImageBackendProxy *this)
{
  WebCore::PlatformImageNativeImageBackend::~PlatformImageNativeImageBackend((WebKit::RemoteNativeImageBackendProxy *)((char *)this + 16));
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v3, v2);
  }

  MEMORY[0x1F416F280](this);
}

{
  uint64_t vars8;

  WebKit::RemoteNativeImageBackendProxy::~RemoteNativeImageBackendProxy(this);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::RemoteNativeImageBackendProxy::platformImage(WebKit::RemoteNativeImageBackendProxy *this)
{
  return MEMORY[0x1F4175C10]((char *)this + 16);
}

uint64_t WebKit::RemoteNativeImageBackendProxy::size(WebKit::RemoteNativeImageBackendProxy *this)
{
  return MEMORY[0x1F4175C18]((char *)this + 16);
}

uint64_t WebKit::RemoteNativeImageBackendProxy::hasAlpha(WebKit::RemoteNativeImageBackendProxy *this)
{
  return MEMORY[0x1F4175C20]((char *)this + 16);
}

uint64_t WebKit::RemoteNativeImageBackendProxy::colorSpace(WebKit::RemoteNativeImageBackendProxy *this)
{
  return MEMORY[0x1F4175C08]((char *)this + 16);
}

uint64_t WebKit::RemoteNativeImageBackendProxy::isRemoteNativeImageBackendProxy(WebKit::RemoteNativeImageBackendProxy *this)
{
  return 1;
}

void WebKit::RemoteRenderingBackendProxy::create(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = WTF::fastMalloc((WTF *)0x100);
  *a2 = WebKit::RemoteRenderingBackendProxy::RemoteRenderingBackendProxy(v4, a1);
  v5 = off_1EB3583E8;
  if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(v4 + 64);
    int v7 = 134217984;
    uint64_t v8 = v6;
    _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] Created rendering backend for a worker", (uint8_t *)&v7, 0xCu);
  }
}

unsigned int *WebKit::RemoteRenderingBackendProxy::destroyGetPixelBufferSharedMemory(WebKit::RemoteRenderingBackendProxy *this)
{
  result = (unsigned int *)*((void *)this + 18);
  if (result)
  {
    *((void *)this + 18) = 0;
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
    uint64_t v3 = *((void *)this + 8);
    return WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::DestroyGetPixelBufferSharedMemory,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(this, v3);
  }
  return result;
}

void WebKit::RemoteRenderingBackendProxy::~RemoteRenderingBackendProxy(WebKit::RemoteRenderingBackendProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9E9800;
  uint64_t v3 = (WebKit::RemoteRenderingBackendProxy *)((char *)this + 24);
  *((void *)this + 3) = &unk_1EE9E9860;
  uint64_t v4 = *((void *)this + 26);
  if (!v4)
  {
    int v7 = 0;
    uint64_t v5 = 0;
    goto LABEL_9;
  }
  uint64_t v5 = *(unsigned int *)(v4 - 4);
  uint64_t v6 = (void *)(v4 + 16 * v5);
  if (!*(_DWORD *)(v4 - 12))
  {
    int v7 = (void *)(v4 + 16 * v5);
LABEL_9:
    uint64_t v6 = (void *)(v4 + 16 * v5);
    goto LABEL_10;
  }
  int v7 = (void *)*((void *)this + 26);
  if (v5)
  {
    uint64_t v8 = 16 * v5;
    int v7 = (void *)*((void *)this + 26);
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      v7 += 2;
      v8 -= 16;
      if (!v8)
      {
        int v7 = v6;
        break;
      }
    }
  }
LABEL_10:
  if (v4) {
    uint64_t v9 = (void *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  }
  else {
    uint64_t v9 = 0;
  }
  while (v7 != v9)
  {
    uint64_t v10 = v7[1];
    v7[1] = 0;
    (*(void (**)(uint64_t, void))(*(void *)v10 + 16))(v10, 0);
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    int v11 = v7 + 2;
    int v7 = v6;
    if (v11 != v6)
    {
      int v7 = v11;
      while ((unint64_t)(*v7 + 1) <= 1)
      {
        v7 += 2;
        if (v7 == v6)
        {
          int v7 = v6;
          break;
        }
      }
    }
  }
  if (*((void *)this + 6))
  {
    uint64_t v12 = *((void *)this + 8);
    uint64_t v13 = *((void *)this + 5);
    *((void *)this + 5) = 0;
    char v14 = (void *)WTF::fastMalloc((WTF *)0x18);
    *char v14 = &unk_1EE9EA420;
    v14[1] = v12;
    v14[2] = v13;
    unint64_t v33 = v14;
    WTF::ensureOnMainRunLoop();
    if (v33) {
      (*(void (**)(void *))(*v33 + 8))(v33);
    }
    WebKit::RemoteResourceCacheProxy::clearImageBufferBackends((WebKit::RemoteRenderingBackendProxy *)((char *)this + 72));
    uint64_t v16 = *((void *)this + 11);
    if (v16)
    {
      *((void *)this + 11) = 0;
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v16, v15);
    }
    WebKit::RemoteResourceCacheProxy::clearRenderingResourceMap((WebKit::RemoteRenderingBackendProxy *)((char *)this + 72), (atomic_uchar *)v15);
    WebKit::RemoteRenderingBackendProxy::disconnectGPUProcess(this);
  }
  uint64_t v17 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 56))(v17);
  }
  uint64_t v18 = *((void *)this + 27);
  if (v18)
  {
    uint64_t v19 = *(unsigned int *)(v18 - 4);
    if (v19)
    {
      unint64_t v20 = (unsigned int **)(v18 + 8);
      do
      {
        if (*(v20 - 1) != (unsigned int *)-1)
        {
          unint64_t v21 = *v20;
          *unint64_t v20 = 0;
          if (v21)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v21);
              WTF::fastFree((WTF *)v21, a2);
            }
          }
        }
        v20 += 2;
        --v19;
      }
      while (v19);
    }
    WTF::fastFree((WTF *)(v18 - 16), a2);
  }
  uint64_t v22 = *((void *)this + 26);
  if (v22)
  {
    uint64_t v23 = *(unsigned int *)(v22 - 4);
    if (v23)
    {
      unint64_t v24 = (uint64_t *)(v22 + 8);
      do
      {
        if (*(v24 - 1) != -1)
        {
          uint64_t v25 = *v24;
          uint64_t *v24 = 0;
          if (v25) {
            (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
          }
        }
        v24 += 2;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree((WTF *)(v22 - 16), a2);
  }
  *((void *)this + 19) = &unk_1EE9BA5F0;
  uint64_t v26 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  WebCore::TimerBase::~TimerBase((WebKit::RemoteRenderingBackendProxy *)((char *)this + 152));
  unint64_t v27 = (unsigned int *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v27) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v27);
  }
  WebKit::RemoteResourceCacheProxy::~RemoteResourceCacheProxy((WebKit::RemoteRenderingBackendProxy *)((char *)this + 72));
  unint64_t v29 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v29 && atomic_fetch_add((atomic_uint *volatile)v29 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v29 + 2);
    (*(void (**)(unsigned int *))(*(void *)v29 + 8))(v29);
  }
  unint64_t v30 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v30) {
    WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(v30, v28);
  }
  unint64_t v31 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v31 && atomic_fetch_add((atomic_uint *volatile)v31, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v31);
    WTF::fastFree((WTF *)v31, v28);
  }
  WTF::FunctionDispatcher::~FunctionDispatcher(v3);
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v32);
}

unsigned int *WebKit::RemoteRenderingBackendProxy::disconnectGPUProcess(WebKit::RemoteRenderingBackendProxy *this)
{
  if ((*((void *)this + 23) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((void *)this + 23) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebKit::RemoteRenderingBackendProxy *)((char *)this + 152));
  }
  char v2 = (unsigned int *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  IPC::StreamClientConnection::invalidate(*((uint64_t ***)this + 6));
  uint64_t v4 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(v4, v3);
  }
  *((unsigned char *)this + 248) = 0;
  result = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, v3);
  }
  return result;
}

void non-virtual thunk to'WebKit::RemoteRenderingBackendProxy::~RemoteRenderingBackendProxy(WebKit::RemoteRenderingBackendProxy *this, void *a2)
{
}

{
  WebKit::RemoteRenderingBackendProxy::operator delete((WebKit::RemoteRenderingBackendProxy *)((char *)this - 24), a2);
}

double WebKit::RemoteRenderingBackendProxy::operator delete(WebKit::RemoteRenderingBackendProxy *a1, void *a2)
{
  WebKit::RemoteRenderingBackendProxy::~RemoteRenderingBackendProxy(a1, a2);
  if (atomic_load((unsigned int *)(v2 + 16)))
  {
    double result = 0.0;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
  return result;
}

void *WebKit::RemoteRenderingBackendProxy::didClose(void *this, IPC::Connection *a2)
{
  if (!this[6]) {
    return this;
  }
  uint64_t v2 = this;
  WebKit::RemoteRenderingBackendProxy::disconnectGPUProcess((WebKit::RemoteRenderingBackendProxy *)this);
  WebKit::RemoteResourceCacheProxy::clearImageBufferBackends((WebKit::RemoteResourceCacheProxy *)(v2 + 9));
  uint64_t v3 = (atomic_uchar *)v2[11];
  uint64_t v4 = (atomic_uchar *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin(v3);
  if (v3) {
    v3 += 24 * *((unsigned int *)v3 - 1);
  }
  while (v4 != v3)
  {
    uint64_t v6 = (atomic_uchar *)*((void *)v4 + 1);
    if (v6)
    {
      int v7 = v3;
      uint64_t v8 = v5;
      char v9 = 0;
      uint64_t v10 = v4;
      int v11 = (atomic_uchar *volatile *)*((void *)v4 + 2);
      uint64_t v12 = *((void *)v4 + 1);
      atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
      if (v9) {
        MEMORY[0x19972E8D0](v6);
      }
      if (*(void *)(v12 + 24)) {
        ++*(void *)(v12 + 8);
      }
      else {
        int v11 = 0;
      }
      int v13 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
      if (v13 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v12);
      }
      uint64_t v5 = v8;
      uint64_t v4 = v10;
      uint64_t v3 = v7;
      if (v11)
      {
        WebKit::RemoteRenderingBackendProxy::createRemoteImageBuffer((WebKit::RemoteRenderingBackendProxy *)v2[16], (WebCore::ImageBuffer *)v11);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref(v11 + 1, v14);
        uint64_t v4 = v10;
        uint64_t v5 = v8;
      }
    }
    while (1)
    {
      v4 += 24;
      if (v4 == v5) {
        break;
      }
      if ((unint64_t)(*(void *)v4 + 1) > 1) {
        goto LABEL_10;
      }
    }
    uint64_t v4 = v5;
LABEL_10:
    ;
  }
  this = WebKit::RemoteResourceCacheProxy::clearRenderingResourceMap((WebKit::RemoteResourceCacheProxy *)(v2 + 9), v5);
  uint64_t v16 = v2[13];
  if (v16)
  {
    v2[13] = 0;
    this = (void *)WTF::fastFree((WTF *)(v16 - 16), v15);
  }
  *((_DWORD *)v2 + 30) = 0;
  uint64_t v17 = v2[14];
  if (v17)
  {
    v2[14] = 0;
    this = (void *)WTF::fastFree((WTF *)(v17 - 16), v15);
  }
  *((_DWORD *)v2 + 31) = 0;
  uint64_t v18 = v2[27];
  if (v18)
  {
    uint64_t v19 = *(unsigned int *)(v18 - 4);
    unint64_t v20 = (void *)(v18 + 16 * v19);
    if (*(_DWORD *)(v18 - 12))
    {
      unint64_t v21 = (void *)v2[27];
      if (v19)
      {
        uint64_t v22 = 16 * v19;
        unint64_t v21 = (void *)v2[27];
        while ((unint64_t)(*v21 + 1) <= 1)
        {
          v21 += 2;
          v22 -= 16;
          if (!v22)
          {
            unint64_t v21 = v20;
            goto LABEL_34;
          }
        }
      }
      goto LABEL_34;
    }
    unint64_t v21 = (void *)(v18 + 16 * v19);
  }
  else
  {
    unint64_t v21 = 0;
    uint64_t v19 = 0;
  }
  unint64_t v20 = (void *)(v18 + 16 * v19);
LABEL_34:
  if (v18) {
    uint64_t v23 = (void *)(v18 + 16 * *(unsigned int *)(v18 - 4));
  }
  else {
    uint64_t v23 = 0;
  }
  if (v23 != v21)
  {
    while (1)
    {
      uint64_t v24 = v21[1];
      if (!v24) {
        break;
      }
      atomic_fetch_add((atomic_uint *volatile)v24, 1u);
      WebKit::RemoteImageBufferSetProxy::remoteBufferSetWasDestroyed(*(WebKit::RemoteImageBufferSetProxy **)(v24 + 8));
      uint64_t v25 = *(void *)(v24 + 8);
      uint64_t v26 = *(void *)(v25 + 24);
      uint64_t v29 = *(void *)(v25 + 40);
      uint64_t v30 = v26;
      v31[0] = &v30;
      v31[1] = &v29;
      this = (void *)WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CreateRemoteImageBufferSet,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>((WebKit::RemoteRenderingBackendProxy *)v2, v31, v2[8]);
      if (atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v24);
        this = (void *)WTF::fastFree((WTF *)v24, v27);
      }
      unint64_t v28 = v21 + 2;
      unint64_t v21 = v20;
      if (v28 != v20)
      {
        unint64_t v21 = v28;
        while ((unint64_t)(*v21 + 1) <= 1)
        {
          v21 += 2;
          if (v21 == v20)
          {
            unint64_t v21 = v20;
            break;
          }
        }
      }
      if (v21 == v23) {
        return this;
      }
    }
    this = WebKit::RemoteImageBufferSetProxy::remoteBufferSetWasDestroyed(0);
    __break(1u);
  }
  return this;
}

void WebKit::RemoteRenderingBackendProxy::createRemoteImageBuffer(WebKit::RemoteRenderingBackendProxy *this, WebCore::ImageBuffer *a2)
{
  uint64_t v12 = *((void *)a2 + 2);
  char v11 = *((unsigned char *)a2 + 48);
  char v10 = *((unsigned char *)a2 + 41);
  int v4 = *((_DWORD *)a2 + 6);
  uint64_t v5 = (const void *)*((void *)a2 + 4);
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  char v6 = *((unsigned char *)a2 + 40);
  uint64_t v8 = *((void *)a2 + 15);
  v13[0] = &v12;
  v13[1] = &v11;
  v13[2] = &v10;
  int v14 = v4;
  p_CFTypeRef cf = &cf;
  char v16 = v6;
  uint64_t v17 = &v8;
  WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CreateImageBuffer,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(this, (uint64_t)v13, *((void *)this + 8));
  CFTypeRef v7 = cf;
  CFTypeRef cf = 0;
  if (v7) {
    CFRelease(v7);
  }
}

void WebKit::RemoteImageBufferProxy::create<WebKit::ImageBufferShareableMappedIOSurfaceBackend>(uint64_t *a1@<X0>, CFTypeRef *a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>, float a8@<S0>)
{
  uint64_t v25 = *a1;
  float v26 = a8;
  CFTypeRef v27 = *a2;
  if (v27) {
    CFRetain(v27);
  }
  LOBYTE(v28) = a3;
  HIBYTE(v28) = a4;
  WebCore::ImageBuffer::backendParameters();
  if ((a6 & 1) != 0
    || (uint64_t v13 = WebCore::ImageBufferIOSurfaceBackend::calculateSafeBackendSize(), (int)v13 >= 1) && v13 > 0)
  {
    v22[0] = 1;
    WebCore::ImageBufferBackend::calculateBaseTransform();
    uint64_t v23 = WebCore::ImageBufferIOSurfaceBackend::calculateMemoryCost();
    uint64_t v14 = WTF::fastMalloc((WTF *)0xFB8);
    uint64_t v18 = v25;
    float v19 = v26;
    CFTypeRef v15 = v27;
    CFTypeRef v20 = v27;
    if (v27) {
      CFRetain(v27);
    }
    __int16 v21 = v28;
    WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    WebKit::RemoteImageBufferProxy::RemoteImageBufferProxy(v14, (uint64_t)&v18, (uint64_t)v22, a5);
    *a7 = v14;
    if (v15) {
      CFRelease(v15);
    }
  }
  else
  {
    *a7 = 0;
  }
  CFTypeRef v16 = cf;
  CFTypeRef cf = 0;
  if (v16) {
    CFRelease(v16);
  }
  CFTypeRef v17 = v27;
  CFTypeRef v27 = 0;
  if (v17) {
    CFRelease(v17);
  }
}

void WebKit::RemoteImageBufferProxy::create<WebKit::ImageBufferRemoteIOSurfaceBackend>(uint64_t *a1@<X0>, CFTypeRef *a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>, float a8@<S0>)
{
  uint64_t v25 = *a1;
  float v26 = a8;
  CFTypeRef v27 = *a2;
  if (v27) {
    CFRetain(v27);
  }
  LOBYTE(v28) = a3;
  HIBYTE(v28) = a4;
  WebCore::ImageBuffer::backendParameters();
  if ((a6 & 1) != 0
    || (uint64_t v13 = WebCore::ImageBufferIOSurfaceBackend::calculateSafeBackendSize(), (int)v13 >= 1) && v13 > 0)
  {
    v22[0] = 1;
    WebCore::ImageBufferBackend::calculateBaseTransform();
    uint64_t v23 = WebCore::ImageBufferIOSurfaceBackend::calculateMemoryCost();
    uint64_t v14 = WTF::fastMalloc((WTF *)0xFB8);
    uint64_t v18 = v25;
    float v19 = v26;
    CFTypeRef v15 = v27;
    CFTypeRef v20 = v27;
    if (v27) {
      CFRetain(v27);
    }
    __int16 v21 = v28;
    WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    WebKit::RemoteImageBufferProxy::RemoteImageBufferProxy(v14, (uint64_t)&v18, (uint64_t)v22, a5);
    *a7 = v14;
    if (v15) {
      CFRelease(v15);
    }
  }
  else
  {
    *a7 = 0;
  }
  CFTypeRef v16 = cf;
  CFTypeRef cf = 0;
  if (v16) {
    CFRelease(v16);
  }
  CFTypeRef v17 = v27;
  CFTypeRef v27 = 0;
  if (v17) {
    CFRelease(v17);
  }
}

void WebKit::RemoteImageBufferProxy::create<WebKit::ImageBufferShareableBitmapBackend>(uint64_t *a1@<X0>, CFTypeRef *a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>, float a8@<S0>)
{
  uint64_t v30 = *a1;
  float v31 = a8;
  CFTypeRef v32 = *a2;
  if (v32) {
    CFRetain(v32);
  }
  LOBYTE(v33) = a3;
  HIBYTE(v33) = a4;
  WebCore::ImageBuffer::backendParameters();
  if ((a6 & 1) != 0
    || (IntSize v15 = WebKit::ImageBufferShareableBitmapBackend::calculateSafeBackendSize(v28, v13, v14), v15.m_width >= 1)
    && v15.m_height > 0)
  {
    v26[0] = 0;
    WebCore::ImageBufferBackend::calculateBaseTransform();
    CFTypeRef v27 = WebKit::ImageBufferShareableBitmapBackend::calculateMemoryCost(v28, v16, v17);
    uint64_t v18 = WTF::fastMalloc((WTF *)0xFB8);
    uint64_t v22 = v30;
    float v23 = v31;
    CFTypeRef v19 = v32;
    CFTypeRef v24 = v32;
    if (v32) {
      CFRetain(v32);
    }
    __int16 v25 = v33;
    WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    WebKit::RemoteImageBufferProxy::RemoteImageBufferProxy(v18, (uint64_t)&v22, (uint64_t)v26, a5);
    *a7 = v18;
    if (v19) {
      CFRelease(v19);
    }
  }
  else
  {
    *a7 = 0;
  }
  CFTypeRef v20 = cf;
  CFTypeRef cf = 0;
  if (v20) {
    CFRelease(v20);
  }
  CFTypeRef v21 = v32;
  CFTypeRef v32 = 0;
  if (v21) {
    CFRelease(v21);
  }
}

unsigned int *WebKit::RemoteRenderingBackendProxy::sendSync<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, WebKit::RemoteRenderingBackendProxy *this, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  double result = (unsigned int *)WebKit::RemoteRenderingBackendProxy::connection(this, &v20);
  char v9 = (unsigned int *)v20;
  if (!v20)
  {
    *(unsigned char *)a1 = 1;
    *(_DWORD *)(a1 + 16) = 1;
    return result;
  }
  IPC::StreamClientConnection::sendSync<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>((WTF::ApproximateTime *)v18, (uint64_t)v20, a3, a4);
  int v10 = v19;
  if (v19)
  {
    uint64_t v12 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      if (v10 != 1)
      {
        IntSize v15 = (WebKit::RemoteRenderingBackendProxy *)std::__throw_bad_variant_access[abi:sn180100]();
        return (unsigned int *)WebKit::RemoteRenderingBackendProxy::dispatchMessage(v15, v16, v17);
      }
      uint64_t v13 = *((void *)this + 8);
      uint64_t v14 = IPC::errorAsString();
      *(_DWORD *)buf = 134218498;
      uint64_t v22 = v13;
      __int16 v23 = 2082;
      CFTypeRef v24 = "RemoteImageBuffer_GetPixelBufferWithNewMemory";
      __int16 v25 = 2082;
      float v26 = v14;
      _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::sendSync - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
    }
    WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(this);
  }
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v18);
  if (v19 != -1) {
    ((void (*)(uint8_t *, unsigned char *))off_1EE9E9DF0[v19])(buf, v18);
  }
  return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(v9, v11);
}

uint64_t WebKit::RemoteRenderingBackendProxy::dispatchMessage(WebKit::RemoteRenderingBackendProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int v3 = *((unsigned __int16 *)a3 + 25);
  if (v3 >= 0xEF4) {
    unsigned int v3 = 3828;
  }
  int v4 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v3 + 2]);
  if (v4 != 85) {
    return v4 == 85;
  }
  uint64_t v7 = *((void *)a3 + 8);
  if (v7 != -1)
  {
    WebKit::RemoteResourceCacheProxy::cachedImageBuffer((uint64_t)this + 72, v7, &v11);
    if (v11)
    {
      WebKit::RemoteImageBufferProxy::didReceiveMessage((uint64_t)v11, a2, a3);
      char v9 = v11;
      char v11 = 0;
      if (v9) {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)v9 + 1, v8);
      }
    }
    return v4 == 85;
  }
  uint64_t result = 151;
  __break(0xC471u);
  return result;
}

atomic_uchar *WebKit::RemoteResourceCacheProxy::cachedImageBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((atomic_uchar *)(a1 + 16), &v7, (atomic_uchar **)v6);
  uint64_t result = (atomic_uchar *)v6[0];
  if (v6[0])
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6[0], (uint64_t)v6[1], a3);
    uint64_t result = (atomic_uchar *)v6[0];
    v6[0] = 0;
    if (result) {
      return WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v5);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void WebKit::RemoteResourceCacheProxy::~RemoteResourceCacheProxy(WebKit::RemoteResourceCacheProxy *this)
{
  *(void *)this = &unk_1EE9E9890;
  WebKit::RemoteResourceCacheProxy::clearImageBufferBackends(this);
  WebKit::RemoteResourceCacheProxy::clearRenderingResourceMap(this, v2);
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    WTF::fastFree((WTF *)(v5 - 16), v3);
  }
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v6, v3);
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v7, v3);
  }
  uint64_t v8 = *((void *)this + 1);
  if (v8)
  {
    *(void *)(v8 + 8) = 0;
    char v9 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v9)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v3);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  uint64_t vars8;

  WebKit::RemoteResourceCacheProxy::~RemoteResourceCacheProxy(this);

  JUMPOUT(0x199740C10);
}

atomic_uchar *WebKit::RemoteResourceCacheProxy::clearImageBufferBackends(WebKit::RemoteResourceCacheProxy *this)
{
  uint64_t v1 = (atomic_uchar *)*((void *)this + 2);
  uint64_t result = (atomic_uchar *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin(v1);
  uint64_t v4 = result;
  uint64_t v5 = v3;
  if (v1)
  {
    uint64_t v6 = &v1[24 * *((unsigned int *)v1 - 1)];
    uint64_t v7 = *((unsigned int *)v1 - 3);
    if (v7)
    {
      if (v7 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = (atomic_uchar *)WTF::fastMalloc((WTF *)(16 * v7));
      uint64_t v1 = result;
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v6 != v4)
  {
    int v8 = 0;
    int v9 = 1;
    do
    {
      unsigned int v10 = v9;
      uint64_t result = (atomic_uchar *)*((void *)v4 + 1);
      if (result) {
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakRef(result);
      }
      char v11 = (atomic_uchar *)*((void *)v4 + 2);
      uint64_t v12 = (atomic_uchar **)&v1[16 * v8];
      NSObject *v12 = result;
      v12[1] = v11;
      while (1)
      {
        v4 += 24;
        if (v4 == v5) {
          break;
        }
        if ((unint64_t)(*(void *)v4 + 1) > 1) {
          goto LABEL_15;
        }
      }
      uint64_t v4 = v5;
LABEL_15:
      ++v8;
      int v9 = v10 + 1;
    }
    while (v4 != v6);
    if (v8)
    {
      uint64_t v13 = 16 * v10;
      uint64_t v14 = (uint64_t *)(v1 + 8);
      do
      {
        uint64_t v15 = *(v14 - 1);
        if (v15)
        {
          char v16 = 0;
          uint64_t v17 = *v14;
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v15, (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
          if (v16) {
            MEMORY[0x19972E8D0](v15);
          }
          if (*(void *)(v15 + 24)) {
            ++*(void *)(v15 + 8);
          }
          else {
            uint64_t v17 = 0;
          }
          int v18 = 1;
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v15, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
          if (v18 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v15);
          }
          if (v17)
          {
            WebKit::RemoteImageBufferProxy::clearBackend(v17);
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)(v17 + 8), v19);
          }
        }
        v14 += 2;
        v13 -= 16;
      }
      while (v13);
      uint64_t v20 = 16 * v10;
      CFTypeRef v21 = (atomic_uchar **)v1;
      do
      {
        uint64_t result = *v21;
        *CFTypeRef v21 = 0;
        if (result) {
          uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v3);
        }
        v21 += 2;
        v20 -= 16;
      }
      while (v20);
    }
  }
  if (v1)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v1, v3);
  }
  return result;
}

void *WebKit::RemoteResourceCacheProxy::clearRenderingResourceMap(WebKit::RemoteResourceCacheProxy *this, atomic_uchar *a2)
{
  uint64_t result = (void *)*((void *)this + 3);
  if (!result)
  {
    uint64_t v6 = 0;
    LODWORD(v4) = 0;
    goto LABEL_9;
  }
  uint64_t v4 = *((unsigned int *)result - 1);
  uint64_t v5 = &result[3 * v4];
  if (!*((_DWORD *)result - 3))
  {
    uint64_t v6 = &result[3 * v4];
LABEL_9:
    uint64_t v5 = &result[3 * v4];
    goto LABEL_10;
  }
  uint64_t v6 = result;
  if (v4)
  {
    uint64_t v7 = 24 * v4;
    uint64_t v6 = result;
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      v6 += 3;
      v7 -= 24;
      if (!v7)
      {
        uint64_t v6 = v5;
        break;
      }
    }
  }
LABEL_10:
  if (result) {
    int v8 = &result[3 * *((unsigned int *)result - 1)];
  }
  else {
    int v8 = 0;
  }
  if (v8 != v6)
  {
    while (1)
    {
      a2 = (atomic_uchar *)v6[1];
      if (a2)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v19, a2, v6[2]);
        uint64_t v9 = v19;
        if (v19)
        {
          WTF::WeakHashSet<WebCore::RenderingResourceObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderingResourceObserver>((uint64_t *)(v19 + 16), this);
          char v10 = 0;
          uint64_t v19 = 0;
          uint64_t v11 = *(void *)(v9 + 8);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
          if (v10) {
            MEMORY[0x19972E8D0](v11);
          }
          uint64_t v12 = *(void *)(v11 + 8);
          uint64_t v13 = v12 - 1;
          *(void *)(v11 + 8) = v12 - 1;
          if (v12 == 1)
          {
            uint64_t v18 = *(void *)(v11 + 16);
            uint64_t v14 = *(void *)(v11 + 24);
            *(void *)(v11 + 24) = 0;
            BOOL v15 = v18 != 0;
          }
          else
          {
            uint64_t v14 = 0;
            BOOL v15 = 1;
          }
          int v16 = 1;
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
          if (v16 == 1)
          {
            if (!v13) {
              goto LABEL_21;
            }
          }
          else
          {
            WTF::Lock::unlockSlow((WTF::Lock *)v11);
            if (!v13)
            {
LABEL_21:
              if (v14) {
                (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
              }
              if (!v15) {
                WTF::fastFree((WTF *)v11, a2);
              }
            }
          }
        }
      }
      uint64_t v17 = v6 + 3;
      uint64_t v6 = v5;
      if (v17 != v5)
      {
        uint64_t v6 = v17;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 3;
          if (v6 == v5)
          {
            uint64_t v6 = v5;
            break;
          }
        }
      }
      if (v6 == v8)
      {
        uint64_t result = (void *)*((void *)this + 3);
        break;
      }
    }
  }
  if (result)
  {
    *((void *)this + 3) = 0;
    return (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable((uint64_t)result, a2);
  }
  return result;
}

uint64_t WebKit::RemoteResourceCacheProxy::imagesCount(WebKit::RemoteResourceCacheProxy *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1)
  {
    uint64_t v4 = 0;
    LODWORD(v2) = 0;
    goto LABEL_9;
  }
  uint64_t v2 = *(unsigned int *)(v1 - 4);
  unsigned int v3 = (void *)(v1 + 24 * v2);
  if (!*(_DWORD *)(v1 - 12))
  {
    uint64_t v4 = (void *)(v1 + 24 * v2);
LABEL_9:
    unsigned int v3 = (void *)(v1 + 24 * v2);
    goto LABEL_10;
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v2)
  {
    uint64_t v5 = 24 * v2;
    uint64_t v4 = (void *)*((void *)this + 3);
    while ((unint64_t)(*v4 + 1) <= 1)
    {
      v4 += 3;
      v5 -= 24;
      if (!v5)
      {
        uint64_t v4 = v3;
        break;
      }
    }
  }
LABEL_10:
  if (v1) {
    uint64_t v6 = (void *)(v1 + 24 * *(unsigned int *)(v1 - 4));
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 != v4)
  {
    uint64_t v7 = 0;
    while (1)
    {
      int v8 = (atomic_uchar *)v4[1];
      if (!v8) {
        goto LABEL_27;
      }
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v22, v8, v4[2]);
      uint64_t v9 = v22;
      if (!v22) {
        goto LABEL_27;
      }
      int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22);
      char v12 = 0;
      uint64_t v22 = 0;
      uint64_t v13 = *(void *)(v9 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v13, (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
      if (v12) {
        MEMORY[0x19972E8D0](v13);
      }
      uint64_t v14 = *(void *)(v13 + 8);
      uint64_t v15 = v14 - 1;
      *(void *)(v13 + 8) = v14 - 1;
      if (v14 == 1)
      {
        uint64_t v20 = *(void *)(v13 + 16);
        uint64_t v16 = *(void *)(v13 + 24);
        *(void *)(v13 + 24) = 0;
        BOOL v17 = v20 != 0;
      }
      else
      {
        uint64_t v16 = 0;
        BOOL v17 = 1;
      }
      int v18 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v13, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
      if (v18 == 1)
      {
        if (v15) {
          goto LABEL_25;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v13);
        if (v15) {
          goto LABEL_25;
        }
      }
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      if (!v17)
      {
        WTF::fastFree((WTF *)v13, v10);
        if ((v11 & 1) == 0) {
          goto LABEL_27;
        }
LABEL_26:
        uint64_t v7 = (v7 + 1);
        goto LABEL_27;
      }
LABEL_25:
      if (v11) {
        goto LABEL_26;
      }
LABEL_27:
      uint64_t v19 = v4 + 3;
      uint64_t v4 = v3;
      if (v19 != v3)
      {
        uint64_t v4 = v19;
        while ((unint64_t)(*v4 + 1) <= 1)
        {
          v4 += 3;
          if (v4 == v3)
          {
            uint64_t v4 = v3;
            break;
          }
        }
      }
      if (v4 == v6) {
        return v7;
      }
    }
  }
  return 0;
}

uint64_t WebKit::RemoteResourceCacheProxy::recordFontCustomPlatformDataUse(uint64_t this, const WebCore::FontCustomPlatformData *a2)
{
  uint64_t v3 = this;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t *)(this + 40);
  uint64_t v4 = *(void *)(this + 40);
  if (v4
    || (this = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(this + 40)),
        (uint64_t v4 = *v5) != 0))
  {
    int v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v7 = *((void *)a2 + 4);
  unint64_t v8 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  unsigned int v11 = v6 & ((v10 >> 31) ^ v10);
  char v12 = (void *)(v4 + 16 * v11);
  uint64_t v13 = *v12;
  if (!*v12)
  {
LABEL_12:
    void *v12 = v7;
    v12[1] = *(void *)(v3 + 64);
    uint64_t v16 = *(void *)(v3 + 40);
    if (v16) {
      int v17 = *(_DWORD *)(v16 - 12) + 1;
    }
    else {
      int v17 = 1;
    }
    *(_DWORD *)(v16 - 12) = v17;
    uint64_t v19 = *v5;
    if (*v5) {
      int v20 = *(_DWORD *)(v19 - 12);
    }
    else {
      int v20 = 0;
    }
    uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
    unint64_t v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 > 2 * v21)
      {
LABEL_23:
        __int16 v23 = *(WebKit::RemoteRenderingBackendProxy **)(v3 + 56);
        ++*(_DWORD *)a2;
        WebCore::FontCustomPlatformData::serializedData((uint64_t *)&v66, a2);
        uint64_t v24 = *((void *)v23 + 8);
        __int16 v25 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(v23, &v69);
        uint64_t v27 = v69;
        if (!v69)
        {
LABEL_69:
          uint64_t v61 = v68;
          uint64_t v68 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2) {
              WTF::StringImpl::destroy(v61, v26);
            }
            else {
              *(_DWORD *)v61 -= 2;
            }
          }
          uint64_t v62 = v66;
          if (v66)
          {
            uint64_t v66 = 0;
            int v67 = 0;
            WTF::fastFree(v62, v26);
          }
          this = (uint64_t)WTF::RefCounted<WebCore::FontCustomPlatformData>::deref(a2);
          goto LABEL_76;
        }
        double v28 = *((double *)v69 + 15);
        double v29 = INFINITY;
        if (fabs(v28) != INFINITY)
        {
          WTF::ApproximateTime::now(v25);
          double v29 = v28 + v30;
        }
        if (*((void *)v27 + 7) == v24)
        {
LABEL_27:
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v27 + 16), buf, v29);
          if (buf[16])
          {
            unint64_t v31 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v32 = v31 - *(void *)buf;
            if (v31 < *(void *)buf)
            {
              unint64_t v33 = 0;
            }
            else
            {
              unint64_t v33 = 0;
              if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= *(void *)&buf[8])
              {
                *(_WORD *)(*(void *)buf + v32) = 2870;
                unint64_t v33 = v32 + 2;
              }
            }
            unint64_t v34 = (*((void *)v27 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v35 = *((void *)v27 + 8);
            if (v34 + 16 >= v35) {
              unint64_t v34 = 0;
            }
            if (v33 <= 0x10) {
              unint64_t v33 = 16;
            }
            unint64_t v36 = v34 + v33;
            if (v35 <= v36) {
              unint64_t v36 = 0;
            }
            *((void *)v27 + 10) = v36;
            atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v27 + 9) + 16) + 128), v36);
            v27[29] = 0;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v70, (uint64_t **)v27 + 1);
            unint64_t v37 = v70;
            unint64_t v38 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)unint64_t v38 = 1324;
            *((void *)v38 + 1) = v24;
            *((void *)v38 + 66) = (char *)v38 + 16;
            *((void *)v38 + 67) = 512;
            *((void *)v38 + 68) = 0;
            *((void *)v38 + 70) = 0;
            *((void *)v38 + 69) = 0;
            IPC::Encoder::encodeHeader(v38);
            __int16 v71 = v38;
            IPC::ArgumentCoder<WebCore::FontCustomPlatformSerializedData,void>::encode(v38, (uint64_t)&v66);
            int v40 = IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)&v71, 1, 0);
            unint64_t v41 = v71;
            __int16 v71 = 0;
            if (v41)
            {
              IPC::Encoder::~Encoder(v41, v39);
              WTF::fastFree(v42, v43);
            }
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v70);
            if (!v40) {
              goto LABEL_67;
            }
          }
          goto LABEL_64;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v27 + 16), buf, v29);
        if (buf[16])
        {
          uint64_t v44 = *(void *)buf;
          unint64_t v45 = *(void *)&buf[8];
          unint64_t v46 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v47 = v46 - *(void *)buf;
          if (v46 < *(void *)buf)
          {
            unint64_t v49 = 0;
            unint64_t v48 = *(void *)&buf[8];
          }
          else
          {
            unint64_t v48 = 0;
            if (v47 > 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v49 = 0;
            }
            else
            {
              unint64_t v49 = 0;
              if (v47 + 2 <= *(void *)&buf[8])
              {
                *(_WORD *)(*(void *)buf + v47) = 2871;
                unint64_t v48 = v45;
                unint64_t v49 = v47 + 2;
              }
            }
          }
          unint64_t v50 = (void *)((v44 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((unint64_t)v50 >= v44 + v49)
          {
            unint64_t v51 = (char *)v50 - v44;
            if ((unint64_t)v50 - v44 > 0xFFFFFFFFFFFFFFF7) {
              goto LABEL_64;
            }
            unint64_t v49 = (unint64_t)(v51 + 8);
            if ((unint64_t)(v51 + 8) > v48) {
              goto LABEL_64;
            }
            *unint64_t v50 = v24;
          }
          if (v48)
          {
            unint64_t v52 = (*((void *)v27 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v53 = *((void *)v27 + 8);
            if (v52 + 16 >= v53) {
              unint64_t v52 = 0;
            }
            if (v49 <= 0x10) {
              unint64_t v49 = 16;
            }
            unint64_t v54 = v52 + v49;
            if (v53 <= v54) {
              unint64_t v55 = 0;
            }
            else {
              unint64_t v55 = v54;
            }
            *((void *)v27 + 10) = v55;
            unint64_t v56 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v27 + 9) + 16) + 128), v55);
            atomic_uint v57 = v27[29];
            if (v56 == 0x80000000 || v57)
            {
              unsigned int v63 = v57 + 1;
              v27[29] = v63;
              if (v63 >= v27[28])
              {
                if (*((unsigned char *)v27 + 104)) {
                  MEMORY[0x1997420B0](v27[23]);
                }
                v27[29] = 0;
              }
            }
            *((void *)v27 + 7) = v24;
            goto LABEL_27;
          }
        }
LABEL_64:
        unint64_t v58 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v59 = *((void *)v23 + 8);
          atomic_uchar *volatile v60 = IPC::errorAsString();
          *(_DWORD *)buf = 134218498;
          *(void *)&uint8_t buf[4] = v59;
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "RemoteRenderingBackend_CacheFontCustomPlatformData";
          __int16 v73 = 2082;
          v74 = v60;
          _os_log_impl(&dword_1985F2000, v58, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
        }
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v23);
LABEL_67:
        int v69 = 0;
        if (atomic_fetch_add(v27, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v27);
          IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v27, v26);
          WTF::fastFree(v64, v65);
        }
        goto LABEL_69;
      }
    }
    else if (3 * v22 > 4 * v21)
    {
      goto LABEL_23;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v5);
    goto LABEL_23;
  }
  uint64_t v14 = 0;
  int v15 = 1;
  while (v13 != v7)
  {
    if (v13 == -1) {
      uint64_t v14 = v12;
    }
    unsigned int v11 = (v11 + v15) & v6;
    char v12 = (void *)(v4 + 16 * v11);
    uint64_t v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *uint64_t v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        uint64_t v7 = *((void *)a2 + 4);
        char v12 = v14;
      }
      goto LABEL_12;
    }
  }
  uint64_t v18 = *(void *)(v3 + 64);
  if (v12[1] == v18) {
    return this;
  }
  v12[1] = v18;
LABEL_76:
  ++*(_DWORD *)(v3 + 52);
  return this;
}

unsigned int *WebKit::RemoteResourceCacheProxy::releaseRenderingResource(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    goto LABEL_22;
  }
  int v6 = *(_DWORD *)(v2 - 8);
  unint64_t v7 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
  unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = v6 & ((v9 >> 31) ^ v9);
  unsigned int v11 = (void **)(v2 + 24 * v10);
  char v12 = *v11;
  if (*v11 != a2)
  {
    int v21 = 1;
    while (v12)
    {
      unsigned int v10 = (v10 + v21) & v6;
      unsigned int v11 = (void **)(v2 + 24 * v10);
      char v12 = *v11;
      ++v21;
      if (*v11 == a2) {
        goto LABEL_3;
      }
    }
    unsigned int v11 = (void **)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
LABEL_3:
  if ((void **)(v2 + 24 * *(unsigned int *)(v2 - 4)) == v11)
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x19905ACF0);
  }
  uint64_t v13 = (atomic_uchar *)v11[1];
  *unsigned int v11 = (void *)-1;
  v11[1] = 0;
  if (v13) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v13, a2);
  }
  ++*(_DWORD *)(*v3 - 16);
  uint64_t v14 = *v3;
  if (*v3) {
    int v15 = *(_DWORD *)(v14 - 12) - 1;
  }
  else {
    int v15 = -1;
  }
  *(_DWORD *)(v14 - 12) = v15;
  uint64_t v16 = *v3;
  if (*v3)
  {
    unsigned int v17 = 6 * *(_DWORD *)(v16 - 12);
    unsigned int v18 = *(_DWORD *)(v16 - 4);
    if (v17 < v18 && v18 >= 9) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v3, v18 >> 1);
    }
  }
  uint64_t result = *(unsigned int **)(a1 + 56);
  __int16 v23 = a2;
  if (*((void *)result + 6))
  {
    unint64_t v22 = &v23;
    return WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseRenderingResource,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>((WebKit::RemoteRenderingBackendProxy *)result, (uint64_t **)&v22, *((void *)result + 8));
  }
  return result;
}

void WebKit::RemoteResourceCacheProxy::clearNativeImageMap(WebKit::RemoteResourceCacheProxy *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return;
  }
  int v2 = *(_DWORD *)(v1 - 4);
  if (!v2) {
    return;
  }
  unint64_t v45 = (uint64_t *)((char *)this + 24);
  int v3 = 0;
  unsigned int v4 = v2 - 1;
  do
  {
    uint64_t v5 = v4;
    int v6 = (void *)(v1 + 24 * v4);
    if ((unint64_t)(*v6 + 1) < 2) {
      goto LABEL_31;
    }
    uint64_t v7 = v1 + 24 * v4;
    unsigned int v10 = *(atomic_uchar **)(v7 + 8);
    unint64_t v9 = (atomic_uchar **)(v7 + 8);
    unint64_t v8 = v10;
    if (!v10) {
      goto LABEL_31;
    }
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v48, v8, *(void *)(v1 + 24 * v4 + 16));
    uint64_t v11 = v48;
    if (!v48) {
      goto LABEL_31;
    }
    char v12 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 16))(v48);
    uint64_t v48 = 0;
    if (v12)
    {
      int v47 = v3;
      WTF::WeakHashSet<WebCore::RenderingResourceObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderingResourceObserver>((uint64_t *)(v11 + 16), this);
      char v15 = 0;
      uint64_t v16 = *(void *)(v11 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v16, (unsigned __int8 *)&v15, 1u, memory_order_acquire, memory_order_acquire);
      if (v15) {
        MEMORY[0x19972E8D0](v16);
      }
      uint64_t v17 = *(void *)(v16 + 8);
      uint64_t v18 = v17 - 1;
      *(void *)(v16 + 8) = v17 - 1;
      if (v17 == 1)
      {
        uint64_t v30 = *(void *)(v16 + 16);
        uint64_t v19 = *(void *)(v16 + 24);
        *(void *)(v16 + 24) = 0;
        BOOL v20 = v30 != 0;
      }
      else
      {
        uint64_t v19 = 0;
        BOOL v20 = 1;
      }
      int v21 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v16, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
      if (v21 == 1)
      {
        if (!v18)
        {
LABEL_14:
          if (v19) {
            (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
          }
          if (!v20) {
            WTF::fastFree((WTF *)v16, v14);
          }
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v16);
        if (!v18) {
          goto LABEL_14;
        }
      }
      *int v6 = -1;
      unint64_t v22 = *v9;
      *unint64_t v9 = 0;
      if (v22) {
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v22, v14);
      }
      int v3 = v47 + 1;
      goto LABEL_31;
    }
    char v23 = 0;
    uint64_t v24 = *(void *)(v11 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v23, 1u, memory_order_acquire, memory_order_acquire);
    if (v23) {
      MEMORY[0x19972E8D0](v24);
    }
    uint64_t v25 = *(void *)(v24 + 8);
    uint64_t v26 = v25 - 1;
    *(void *)(v24 + 8) = v25 - 1;
    if (v25 == 1)
    {
      uint64_t v31 = *(void *)(v24 + 16);
      uint64_t v27 = *(void *)(v24 + 24);
      *(void *)(v24 + 24) = 0;
      BOOL v28 = v31 != 0;
    }
    else
    {
      uint64_t v27 = 0;
      BOOL v28 = 1;
    }
    int v29 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v29, 0, memory_order_release, memory_order_relaxed);
    if (v29 == 1)
    {
      if (v26) {
        goto LABEL_31;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
      if (v26) {
        goto LABEL_31;
      }
    }
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
    if (!v28) {
      WTF::fastFree((WTF *)v24, v13);
    }
LABEL_31:
    --v4;
  }
  while (v5);
  uint64_t v32 = *v45;
  if (v3)
  {
    *(_DWORD *)(v32 - 16) += v3;
    uint64_t v33 = *v45;
    if (*v45) {
      int v34 = *(_DWORD *)(v33 - 12);
    }
    else {
      int v34 = 0;
    }
    *(_DWORD *)(v33 - 12) = v34 - v3;
    uint64_t v32 = *v45;
  }
  if (v32)
  {
    unsigned int v35 = *(_DWORD *)(v32 - 4);
    uint64_t v36 = *(unsigned int *)(v32 - 12);
    if (v35 >= 9 && 6 * (int)v36 < v35)
    {
      unsigned int v38 = (v36 - 1) | ((v36 - 1) >> 1) | (((v36 - 1) | ((v36 - 1) >> 1)) >> 2);
      unsigned int v39 = v38 | (v38 >> 4) | ((v38 | (v38 >> 4)) >> 8);
      unint64_t v40 = (v39 | HIWORD(v39)) + 1;
      if (v40 > 0x400)
      {
        if (v40 <= 2 * v36)
        {
LABEL_52:
          LODWORD(v40) = 2 * v40;
          if (v40 <= 0x400) {
            goto LABEL_53;
          }
        }
        double v41 = (double)v36;
        double v42 = (double)v40;
        double v43 = 0.416666667;
      }
      else
      {
        if (3 * v40 <= 4 * v36) {
          goto LABEL_52;
        }
LABEL_53:
        double v41 = (double)v36;
        double v42 = (double)v40;
        double v43 = 0.604166667;
      }
      if (v42 * v43 <= v41) {
        LODWORD(v40) = 2 * v40;
      }
      if (v40 <= 8) {
        unsigned int v44 = 8;
      }
      else {
        unsigned int v44 = v40;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v45, v44);
    }
  }
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::removeIf<WebKit::RemoteResourceCacheProxy::finalizeRenderingUpdateForFonts(void)::$_1>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  if (*result)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    if (v3)
    {
      uint64_t v5 = result;
      int v6 = 0;
      unsigned int v7 = v3 - 1;
      do
      {
        unint64_t v8 = (uint64_t *)(v2 + 16 * v7);
        if ((unint64_t)(*v8 + 1) >= 2)
        {
          uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*a2, *v8);
          if (result)
          {
            *unint64_t v8 = -1;
            ++v6;
          }
        }
      }
      while ((unint64_t)v7--);
      uint64_t v10 = *v5;
      if (v6)
      {
        *(_DWORD *)(v10 - 16) += v6;
        uint64_t v11 = *v5;
        if (*v5) {
          int v12 = *(_DWORD *)(v11 - 12);
        }
        else {
          int v12 = 0;
        }
        *(_DWORD *)(v11 - 12) = v12 - v6;
        uint64_t v10 = *v5;
      }
      if (v10)
      {
        unsigned int v13 = *(_DWORD *)(v10 - 4);
        unsigned int v14 = 6 * *(_DWORD *)(v10 - 12);
        if (v13 >= 9 && v14 < v13)
        {
          return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::shrinkToBestSize(v5);
        }
      }
    }
  }
  return result;
}

WebKit::RemoteRenderingBackendProxy *WebKit::RemoteResourceCacheProxy::releaseMemory(WebKit::RemoteRenderingBackendProxy **this, atomic_uchar *a2)
{
  WebKit::RemoteResourceCacheProxy::clearRenderingResourceMap((WebKit::RemoteResourceCacheProxy *)this, a2);
  unsigned int v4 = this[4];
  if (v4)
  {
    this[4] = 0;
    WTF::fastFree((WebKit::RemoteRenderingBackendProxy *)((char *)v4 - 16), v3);
  }
  *((_DWORD *)this + 12) = 0;
  uint64_t v5 = this[5];
  if (v5)
  {
    this[5] = 0;
    WTF::fastFree((WebKit::RemoteRenderingBackendProxy *)((char *)v5 - 16), v3);
  }
  *((_DWORD *)this + 13) = 0;
  uint64_t result = this[7];
  if (*((void *)result + 6))
  {
    char v7 = 0;
    return (WebKit::RemoteRenderingBackendProxy *)WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseAllDrawingResources,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (uint64_t)&v7, *((void *)result + 8));
  }
  return result;
}

WebKit::RemoteRenderingBackendProxy *WebKit::RemoteResourceCacheProxy::releaseAllImageResources(WebKit::RemoteRenderingBackendProxy **this)
{
  WebKit::RemoteResourceCacheProxy::clearNativeImageMap((WebKit::RemoteResourceCacheProxy *)this);
  uint64_t result = this[7];
  if (*((void *)result + 6))
  {
    char v3 = 0;
    return (WebKit::RemoteRenderingBackendProxy *)WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseAllImageResources,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, (uint64_t)&v3, *((void *)result + 8));
  }
  return result;
}

uint64_t WebCore::DisplayList::Recorder::platformContext(WebCore::DisplayList::Recorder *this)
{
  return 0;
}

uint64_t WebCore::DisplayList::Recorder::colorSpace(WebCore::DisplayList::Recorder *this)
{
  return (uint64_t)this + 3792;
}

uint64_t WebCore::GraphicsContext::performingPaintInvalidation(WebCore::GraphicsContext *this)
{
  return 0;
}

uint64_t WebCore::GraphicsContext::invalidatingControlTints(WebCore::GraphicsContext *this)
{
  return 0;
}

uint64_t WebCore::DisplayList::Recorder::isCALayerContext(WebCore::DisplayList::Recorder *this)
{
  return 0;
}

uint64_t WebCore::GraphicsContext::supportsInternalLinks(WebCore::GraphicsContext *this)
{
  return 0;
}

uint64_t WebCore::ImageBuffer::ensureBackendCreated(WebCore::ImageBuffer *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 160))();
}

uint64_t WebKit::RemoteSerializedImageBufferProxy::memoryCost(WebKit::RemoteSerializedImageBufferProxy *this)
{
  return *((void *)this + 12);
}

uint64_t WebKit::RemoteSerializedImageBufferProxy::isRemoteSerializedImageBufferProxy(WebKit::RemoteSerializedImageBufferProxy *this)
{
  return 1;
}

void WebKit::RemoteSerializedImageBufferProxy::sinkIntoImageBuffer(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::RemoteRenderingBackendProxy::dispatch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))();
}

uint64_t WebKit::RemoteRenderingBackendProxy::isCurrent(WebKit::RemoteRenderingBackendProxy *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 24))();
}

uint64_t non-virtual thunk to'WebKit::RemoteRenderingBackendProxy::isCurrent(WebKit::RemoteRenderingBackendProxy *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t std::default_delete<WebKit::SharedVideoFrameWriter>::operator()[abi:sn180100](uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)a1, 0);

  return WTF::fastFree((WTF *)a1, v3);
}

unsigned int *WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(unsigned int *result, void *a2)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result, a2);
    return (unsigned int *)WTF::fastFree(v2, v3);
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25CopyTextureFromVideoFrameEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetErrorsEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL28GetBufferSubDataSharedMemoryEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22GetBufferSubDataInlineEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22ReadPixelsSharedMemoryEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16ReadPixelsInlineEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  char v3 = (WTF::StringImpl *)*((void *)a2 + 2);
  *((void *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  char v3 = (WTF::StringImpl *)*((void *)a2 + 2);
  *((void *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetStringEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  char v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetFloatvEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetIntegervEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetIntegeri_vEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetInteger64EE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetInteger64iEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetProgramiEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetBooleanvEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  char v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10GetShaderiEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  char v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL24GetShaderPrecisionFormatEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  char v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetUniformfvEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetUniformivEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetUniformuivEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsBufferEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsEnabledEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsFramebufferEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsProgramEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsShaderEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsTextureEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL7IsQueryEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetQueryEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsSamplerEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9FenceSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL6IsSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetSynciEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  char v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  char v3 = *(WTF **)(a2 + 8);
  if (v3)
  {
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    WTF::fastFree(v3, (void *)a2);
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  char v3 = *(WTF **)(a2 + 8);
  if (v3)
  {
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    WTF::fastFree(v3, (void *)a2);
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  char v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL23GetActiveUniformBlockivEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  char v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetInternalformativEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

uint64_t IPC::StreamClientConnection::trySendDestinationIDIfNeeded(void *a1, uint64_t a2, double a3)
{
  if (a1[7] == a2) {
    return 0;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 8), &v18, a3);
  if (!v20) {
    return 15;
  }
  unint64_t v7 = v18;
  unint64_t v6 = v19;
  unint64_t v8 = (v18 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v9 = v8 - v18;
  if (v8 >= v18)
  {
    unint64_t v10 = v9 + 2;
    if (v9 <= 0xFFFFFFFFFFFFFFFDLL && v10 <= v19)
    {
      *(_WORD *)(v18 + v9) = 2871;
      goto LABEL_11;
    }
    unint64_t v6 = 0;
  }
  unint64_t v10 = 0;
LABEL_11:
  int v12 = (void *)((v7 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v12 >= v7 + v10)
  {
    unint64_t v10 = (unint64_t)v12 - v7 + 8;
    if ((unint64_t)v12 - v7 > 0xFFFFFFFFFFFFFFF7 || v10 > v6) {
      return 17;
    }
    void *v12 = a2;
  }
  if (!v6) {
    return 17;
  }
  uint64_t v14 = a1[9];
  unint64_t v15 = (a1[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v16 = a1[8];
  if (v15 + 16 >= v16) {
    unint64_t v15 = 0;
  }
  if (v10 <= 0x10) {
    unint64_t v10 = 16;
  }
  unint64_t v17 = v15 + v10;
  if (v16 <= v17) {
    unint64_t v17 = 0;
  }
  a1[10] = v17;
  IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(v14 + 16) + 128), v17) == 0x80000000);
  uint64_t result = 0;
  a1[7] = a2;
  return result;
}

uint64_t IPC::StreamClientConnection::sendProcessOutOfStreamMessage(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = (a2 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v4 = v3 - a2;
  if (v3 < a2 || ((v5 = v4 + 2, v4 <= 0xFFFFFFFFFFFFFFFDLL) ? (BOOL v6 = v5 > a3) : (BOOL v6 = 1), v6)) {
    unint64_t v5 = 0;
  }
  else {
    *(_WORD *)(a2 + v4) = 2870;
  }
  uint64_t v7 = *(void *)(result + 72);
  unint64_t v8 = (*(void *)(result + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v9 = *(void *)(result + 64);
  if (v8 + 16 >= v9) {
    unint64_t v8 = 0;
  }
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  unint64_t v10 = v8 + v5;
  if (v9 <= v10) {
    unint64_t v10 = 0;
  }
  *(void *)(result + 80) = v10;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(v7 + 16) + 128), v10);
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t *IPC::Decoder::operator>><std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>(uint64_t *a1, WTF::MachSendRight *a2)
{
  IPC::Decoder::decode<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>(a1, v5);
  std::__optional_storage_base<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>,false>>(a2, (uint64_t)v5);
  if (v5[72]) {
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v5);
  }
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9D68[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E9D78[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9UniqueRefIN3IPC7DecoderEEENSA_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9UniqueRefIN3IPC7DecoderEEENSA_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void std::__optional_storage_base<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>,false>>(WTF::MachSendRight *a1, uint64_t a2)
{
  if (*((unsigned __int8 *)a1 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*((unsigned char *)a1 + 72))
    {
      std::__optional_storage_base<WebCore::ShareableBitmapHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ShareableBitmapHandle,false>>(a1, a2);
    }
  }
  else if (*((unsigned char *)a1 + 72))
  {
    *((unsigned char *)std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100](a1)
    + 72) = 0;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *((unsigned char *)a1 + 64) = 0;
    if (*(unsigned char *)(a2 + 64))
    {
      WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)a1, a2);
      *((unsigned char *)a1 + 64) = 1;
    }
    *((unsigned char *)a1 + 72) = 1;
  }
}

uint64_t IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ConnectionSendSyncResult(uint64_t a1, IPC::Decoder **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  char v6 = v4;
  v7[0] = 0;
  char v8 = 0;
  if (*(unsigned char *)(a3 + 64))
  {
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v7, a3);
    char v8 = 1;
    *(void *)a1 = v6;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle(a1 + 8, (uint64_t)v7);
    *(unsigned char *)(a1 + 72) = 1;
  }
  else
  {
    *(void *)a1 = v4;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 72) = 0;
  }
  *(_DWORD *)(a1 + 80) = 0;
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v7);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 80);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9D88[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 80) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 80);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E9D98[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer19FilteredNativeImageEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)(a2 + 1));

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer19FilteredNativeImageEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  if (*((unsigned char *)a3 + 72))
  {
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle(a2 + 8, (uint64_t)(a3 + 1));
    *(unsigned char *)(a2 + 72) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer19FilteredNativeImageEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

WTF::ApproximateTime *IPC::Connection::sendSync<Messages::RemoteImageBuffer::FlushContextSync>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v19 = 0;
  IPC::Connection::createSyncMessageEncoder(3707, a3, &v19, &v18);
  IPC::Connection::sendSyncMessage(a2, v19, (uint64_t *)&v18, 0, (uint64_t)&v16, a4);
  uint64_t v7 = v17;
  if (v17)
  {
    if (v17 != 1)
    {
      unsigned int v13 = (WTF::ApproximateTime *)std::__throw_bad_variant_access[abi:sn180100]();
      return IPC::StreamClientConnectionBuffer::tryAcquireAll(v13, v14, v15);
    }
    *(unsigned char *)a1 = v16;
  }
  else
  {
    uint64_t v8 = v16;
    uint64_t v16 = 0;
    *(void *)a1 = v8;
  }
  *(_DWORD *)(a1 + 16) = v7;
  ((void (*)(char *, uint64_t *))off_1EE9E9D68[v7])(&v20, &v16);
  uint64_t result = v18;
  unint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (WTF::ApproximateTime *)WTF::fastFree(v11, v12);
  }
  return result;
}

WTF::ApproximateTime *IPC::StreamClientConnectionBuffer::tryAcquireAll(WTF::ApproximateTime *result, uint64_t a2, double a3)
{
  uint64_t v5 = result;
  char v6 = (semaphore_t *)(a2 + 32);
  while (1)
  {
    unint64_t v7 = atomic_exchange(*(atomic_ullong *volatile *)(*(void *)(a2 + 8) + 16), 0x80000000uLL);
    if (!(v7 | atomic_load_explicit((atomic_ullong *volatile)(*(void *)(*(void *)(a2 + 8) + 16) + 128), memory_order_acquire) & 0xFFFFFFFF7FFFFFFFLL))break; {
    if (*(unsigned char *)(a2 + 40))
    }
    {
      uint64_t result = (WTF::ApproximateTime *)IPC::Semaphore::waitFor(v6, a3);
      if (result)
      {
        uint64_t result = (WTF::ApproximateTime *)WTF::ApproximateTime::now(result);
        if (v8 < a3) {
          continue;
        }
      }
    }
    char v9 = 0;
    *(unsigned char *)uint64_t v5 = 0;
LABEL_12:
    *((unsigned char *)v5 + 16) = v9;
    return result;
  }
  atomic_store(0, *(unint64_t **)(*(void *)(a2 + 8) + 16));
  *(void *)(a2 + 16) = 0;
  uint64_t v10 = *(void *)(a2 + 8);
  unint64_t v11 = *(void *)(v10 + 8);
  if (v11 > 0xFF)
  {
    uint64_t v12 = *(void *)(v10 + 16);
    unint64_t v13 = v11 - 256;
    if (!*(void *)a2 || (v14 = v13 >= *(void *)a2 - 1, unint64_t v13 = *(void *)a2 - 1, v14))
    {
      *(void *)uint64_t v5 = v12 + 256;
      *((void *)v5 + 1) = v13;
      char v9 = 1;
      goto LABEL_12;
    }
  }
  __break(1u);
  return result;
}

uint64_t WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x50);
  uint64_t result = IPC::Decoder::Decoder(v6, *(void *)a2, *(void *)(a2 + 8), *a3);
  *a1 = result;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9DA8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E9DB8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer16FlushContextSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer16FlushContextSyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer16FlushContextSyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::Connection::send<Messages::RemoteImageBufferSet::EndPrepareForDisplay>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 1119;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  char v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::CreateRemoteImageBufferSet>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 1330;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, *a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, a2[1]);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  char v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CreateImageBuffer,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  char v6 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(a1, &v44);
  char v7 = v44;
  if (!v44) {
    return 1;
  }
  double v8 = *((double *)v44 + 15);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now(v6);
    double v9 = v8 + v10;
  }
  if (*((void *)v7 + 7) == a3) {
    goto LABEL_5;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 16), buf, v9);
  if (!buf[16])
  {
LABEL_62:
    uint64_t Image = 15;
    goto LABEL_63;
  }
  uint64_t v31 = *(void *)buf;
  unint64_t v30 = *(void *)&buf[8];
  unint64_t v32 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - *(void *)buf;
  if (v32 >= *(void *)buf)
  {
    unint64_t v34 = v33 + 2;
    if (v33 <= 0xFFFFFFFFFFFFFFFDLL && v34 <= *(void *)&buf[8])
    {
      *(_WORD *)(*(void *)buf + v33) = 2871;
      goto LABEL_48;
    }
    unint64_t v30 = 0;
  }
  unint64_t v34 = 0;
LABEL_48:
  uint64_t v36 = (void *)((v31 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v36 >= v31 + v34)
  {
    unint64_t v34 = (unint64_t)v36 - v31 + 8;
    if ((unint64_t)v36 - v31 > 0xFFFFFFFFFFFFFFF7 || v34 > v30) {
      goto LABEL_75;
    }
    *uint64_t v36 = a3;
  }
  if (v30)
  {
    unint64_t v38 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v39 = *((void *)v7 + 8);
    if (v38 + 16 >= v39) {
      unint64_t v38 = 0;
    }
    if (v34 <= 0x10) {
      unint64_t v34 = 16;
    }
    unint64_t v40 = v38 + v34;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *((void *)v7 + 10) = v40;
    IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v7, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v40) == 0x80000000);
    *((void *)v7 + 7) = a3;
LABEL_5:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 16), &v45, v9);
    if (v47)
    {
      *(void *)buf = v45;
      *(void *)&buf[8] = v46;
      *(void *)&buf[16] = 0;
      unint64_t v11 = (v45 + 1) & 0xFFFFFFFFFFFFFFFELL;
      BOOL v12 = v11 >= v45;
      unint64_t v13 = v11 - v45;
      if (v12)
      {
        if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v46)
        {
          *(void *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v45 + v13) = 1327;
          *(void *)&buf[16] = v13 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)buf, *(_DWORD **)a2);
      unint64_t v16 = *(void *)&buf[8];
      uint64_t v15 = *(void *)&buf[16];
      uint64_t v17 = *(void *)buf;
      if (*(void *)&buf[16] >= *(void *)&buf[8]) {
        goto LABEL_78;
      }
      uint64_t v18 = *(void *)&buf[16] + 1;
      *(unsigned char *)(*(void *)buf + *(void *)&buf[16]) = **(unsigned char **)(a2 + 8);
      *(void *)&buf[16] = v15 + 1;
      if (v15 + 1 >= v16) {
        goto LABEL_77;
      }
      v15 += 2;
      *(unsigned char *)(v17 + v18) = **(unsigned char **)(a2 + 16);
      *(void *)&buf[16] = v15;
      while (1)
      {
        uint64_t v19 = (_DWORD *)((v17 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v17 + v15)
        {
          char v20 = (char *)v19 - v17;
          if ((unint64_t)v19 - v17 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v20 + 4) > v16)
          {
            *(void *)&buf[8] = 0;
          }
          else
          {
            *uint64_t v19 = *(_DWORD *)(a2 + 24);
            *(void *)&buf[16] = v20 + 4;
          }
        }
        IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)buf, *(CFTypeRef **)(a2 + 32));
        unint64_t v22 = *(void *)&buf[16];
        if (*(void *)&buf[16] >= *(void *)&buf[8])
        {
          unint64_t v23 = 0;
          *(void *)&buf[8] = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)buf + *(void *)&buf[16]) = *(unsigned char *)(a2 + 40);
          *(void *)&buf[16] = ++v22;
          unint64_t v23 = *(void *)&buf[8];
        }
        uint64_t v24 = (void *)((*(void *)buf + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v18 = (uint64_t)v24 - *(void *)buf - v22;
        if ((unint64_t)v24 >= *(void *)buf + v22)
        {
          uint64_t v18 = (uint64_t)v24 - *(void *)buf;
          if ((unint64_t)v24 - *(void *)buf > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_66;
          }
          unint64_t v22 = v18 + 8;
          if (v18 + 8 > v23) {
            goto LABEL_66;
          }
          void *v24 = **(void **)(a2 + 48);
          *(void *)&buf[16] = v18 + 8;
          unint64_t v23 = *(void *)&buf[8];
        }
        if (v23)
        {
          unint64_t v25 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v26 = *((void *)v7 + 8);
          if (v25 + 16 >= v26) {
            unint64_t v25 = 0;
          }
          if (v22 <= 0x10) {
            unint64_t v22 = 16;
          }
          unint64_t v27 = v25 + v22;
          if (v26 <= v27) {
            unint64_t v27 = 0;
          }
          *((void *)v7 + 10) = v27;
          if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v27) == 0x80000000
            || v7[29])
          {
            if (*((unsigned char *)v7 + 104)) {
              MEMORY[0x1997420B0](v7[23]);
            }
            v7[29] = 0;
          }
          uint64_t Image = 0;
          goto LABEL_36;
        }
LABEL_66:
        uint64_t v17 = v47;
        if (v47)
        {
          IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v7, v45, v46);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v7 + 1);
          uint64_t Image = IPC::Connection::send<Messages::RemoteRenderingBackend::CreateImageBuffer>(*(uint64_t *)buf, a2, a3);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
          if (!Image) {
            goto LABEL_36;
          }
          goto LABEL_63;
        }
        __break(1u);
LABEL_77:
        uint64_t v15 = v18;
LABEL_78:
        unint64_t v16 = 0;
        *(void *)&buf[8] = 0;
      }
    }
    goto LABEL_62;
  }
LABEL_75:
  uint64_t Image = 17;
LABEL_63:
  double v41 = off_1EB3583E8;
  if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v42 = *((void *)a1 + 8);
    double v43 = IPC::errorAsString();
    *(_DWORD *)buf = 134218498;
    *(void *)&uint8_t buf[4] = v42;
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = "RemoteRenderingBackend_CreateImageBuffer";
    *(_WORD *)&unsigned char buf[22] = 2082;
    unint64_t v49 = v43;
    _os_log_impl(&dword_1985F2000, v41, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
  }
  WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
LABEL_36:
  WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v21);
  return Image;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::CreateImageBuffer>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 1327;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v6, *(float **)a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v6, **(unsigned char **)(a2 + 8));
  char v14 = **(unsigned char **)(a2 + 16);
  IPC::Encoder::operator<<<BOOL>(v6, &v14);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v6, *(float *)(a2 + 24));
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(v6, *(CFTypeRef **)(a2 + 32));
  char v15 = *(unsigned char *)(a2 + 40);
  IPC::Encoder::operator<<<BOOL>(v6, &v15);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, *(uint64_t **)(a2 + 48));
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  double v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

unsigned int *WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseImageBuffer,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t result = (unsigned int *)WebKit::RemoteRenderingBackendProxy::connection(a1, &v38);
  char v7 = v38;
  if (v38)
  {
    double v8 = *((double *)v38 + 15);
    double v9 = INFINITY;
    if (fabs(v8) != INFINITY)
    {
      WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
      double v9 = v8 + v10;
    }
    if (*((void *)v7 + 7) == a3)
    {
      while (1)
      {
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 16), buf, v9);
        if (!buf[16]) {
          goto LABEL_53;
        }
        uint64_t v13 = *(void *)buf;
        unint64_t v12 = *(void *)&buf[8];
        unint64_t v14 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v15 = v14 - *(void *)buf;
        if (v14 >= *(void *)buf)
        {
          unint64_t v16 = v15 + 2;
          if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= *(void *)&buf[8])
          {
            *(_WORD *)(*(void *)buf + v15) = 1342;
            goto LABEL_12;
          }
          unint64_t v12 = 0;
        }
        unint64_t v16 = 0;
LABEL_12:
        uint64_t v18 = (void *)((v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v18 >= v13 + v16)
        {
          unint64_t v16 = (unint64_t)v18 - v13 + 8;
          if ((unint64_t)v18 - v13 > 0xFFFFFFFFFFFFFFF7 || v16 > v12) {
            goto LABEL_56;
          }
          *uint64_t v18 = **a2;
        }
        if (v12)
        {
          uint64_t v20 = *((void *)v7 + 9);
          unint64_t v21 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v22 = *((void *)v7 + 8);
          if (v21 + 16 >= v22) {
            unint64_t v21 = 0;
          }
          if (v16 <= 0x10) {
            unint64_t v16 = 16;
          }
          unint64_t v23 = v21 + v16;
          if (v22 <= v23) {
            unint64_t v23 = 0;
          }
          *((void *)v7 + 10) = v23;
          if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v20 + 16) + 128), v23) == 0x80000000 || v7[29])
          {
            if (*((unsigned char *)v7 + 104)) {
              MEMORY[0x1997420B0](v7[23]);
            }
            v7[29] = 0;
          }
          return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v11);
        }
LABEL_56:
        if (buf[16])
        {
          IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v7, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v39, (uint64_t **)v7 + 1);
          int v37 = IPC::Connection::send<Messages::RemoteRenderingBackend::ReleaseImageBuffer>((uint64_t)v39, a2, a3);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v39);
          if (!v37) {
            return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v11);
          }
          goto LABEL_53;
        }
        __break(1u);
LABEL_62:
        unint64_t v24 = 0;
LABEL_63:
        unint64_t v27 = 0;
LABEL_39:
        int v29 = (void *)((v13 + v27 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v29 >= v13 + v27)
        {
          unint64_t v27 = (unint64_t)v29 - v13 + 8;
          if ((unint64_t)v29 - v13 > 0xFFFFFFFFFFFFFFF7 || v27 > v24) {
            goto LABEL_53;
          }
          *int v29 = a3;
        }
        if (!v24) {
          goto LABEL_53;
        }
        unint64_t v31 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v32 = *((void *)v7 + 8);
        if (v31 + 16 >= v32) {
          unint64_t v31 = 0;
        }
        if (v27 <= 0x10) {
          unint64_t v27 = 16;
        }
        unint64_t v33 = v31 + v27;
        if (v32 <= v33) {
          unint64_t v33 = 0;
        }
        *((void *)v7 + 10) = v33;
        IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v7, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v33) == 0x80000000);
        *((void *)v7 + 7) = a3;
      }
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 16), buf, v9);
    if (buf[16])
    {
      uint64_t v13 = *(void *)buf;
      unint64_t v24 = *(void *)&buf[8];
      unint64_t v25 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v26 = v25 - *(void *)buf;
      if (v25 < *(void *)buf) {
        goto LABEL_63;
      }
      unint64_t v27 = v26 + 2;
      if (v26 > 0xFFFFFFFFFFFFFFFDLL || v27 > *(void *)&buf[8]) {
        goto LABEL_62;
      }
      *(_WORD *)(*(void *)buf + v26) = 2871;
      goto LABEL_39;
    }
LABEL_53:
    unint64_t v34 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v35 = *((void *)a1 + 8);
      uint64_t v36 = IPC::errorAsString();
      *(_DWORD *)buf = 134218498;
      *(void *)&uint8_t buf[4] = v35;
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = "RemoteRenderingBackend_ReleaseImageBuffer";
      __int16 v41 = 2082;
      uint64_t v42 = v36;
      _os_log_impl(&dword_1985F2000, v34, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
    }
    WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
    return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v11);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::ReleaseImageBuffer>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 1342;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v13 = v6;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  double v9 = v13;
  uint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::ReleaseRemoteImageBufferSet>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 1345;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v13 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  double v9 = v13;
  uint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(WTF::ApproximateTime *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v8 = *(double *)(a2 + 120);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v9 = v8 + v10;
  }
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnection::trySendDestinationIDIfNeeded((void *)a2, a4, v9);
  if (result)
  {
    *(unsigned char *)a1 = (_BYTE)result;
  }
  else
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 64, v13, v9);
    if (v14)
    {
      IPC::StreamClientConnection::sendProcessOutOfStreamMessage(a2, v13[0], v13[1]);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, (uint64_t **)(a2 + 8));
      IPC::Connection::sendSync<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory>((uint64_t)a1, (uint64_t)v12, a3, a4, v9);
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v12);
    }
    *(unsigned char *)a1 = 15;
  }
  *((_DWORD *)a1 + 4) = 1;
  return result;
}

IPC::Encoder **IPC::Connection::sendSync<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v18 = 0;
  IPC::Connection::createSyncMessageEncoder(3709, a4, &v18, &v17);
  IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat const&,WebCore::IntPoint const&,WebCore::IntSize const&>,void>::encode<IPC::Encoder,WebCore::IntSize const&,0ul,1ul,2ul,3ul>(v17, a3);
  IPC::Connection::sendSyncMessage(a2, v18, (uint64_t *)&v17, 0, (uint64_t)&v15, a5);
  uint64_t v9 = v16;
  if (!v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    *(void *)a1 = v10;
LABEL_3:
    *(_DWORD *)(a1 + 16) = v9;
    ((void (*)(char *, uint64_t *))off_1EE9E9D68[v9])(&v19, &v15);
    return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v17, v11);
  }
  if (v16 == 1)
  {
    *(unsigned char *)a1 = v15;
    goto LABEL_3;
  }
  uint64_t v13 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
  return (IPC::Encoder **)IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat const&,WebCore::IntPoint const&,WebCore::IntSize const&>,void>::encode<IPC::Encoder,WebCore::IntSize const&,0ul,1ul,2ul,3ul>(v13, v14);
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat const&,WebCore::IntPoint const&,WebCore::IntSize const&>,void>::encode<IPC::Encoder,WebCore::IntSize const&,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(a1, *(void *)a2);
  IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::encode(a1, *(void *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(a1, *(int **)(a2 + 16));
  uint64_t v4 = *(int **)(a2 + 24);

  return IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(a1, v4);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9DF0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E9E00[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer27GetPixelBufferWithNewMemoryEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer27GetPixelBufferWithNewMemoryEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer27GetPixelBufferWithNewMemoryEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::RemoteImageBuffer::GetPixelBuffer>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v21 = 0;
  IPC::Connection::createSyncMessageEncoder(3708, a4, &v21, &v20);
  uint64_t v9 = v20;
  IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::encode(v20, *(void *)a3);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v9, *(int **)(a3 + 8));
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v9, *(int **)(a3 + 16));
  IPC::Connection::sendSyncMessage(a2, v21, (uint64_t *)&v20, 0, (uint64_t)&v18, a5);
  uint64_t v10 = v19;
  if (v19)
  {
    if (v19 != 1)
    {
      uint64_t v16 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(v16, v17);
    }
    *(unsigned char *)a1 = v18;
  }
  else
  {
    uint64_t v11 = v18;
    uint64_t v18 = 0;
    *(void *)a1 = v11;
  }
  *(_DWORD *)(a1 + 16) = v10;
  ((void (*)(char *, uint64_t *))off_1EE9E9D68[v10])(&v22, &v18);
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9E10[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E9E20[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer14GetPixelBufferEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer14GetPixelBufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer14GetPixelBufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

unsigned int *WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::DestroyGetPixelBufferSharedMemory,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t result = (unsigned int *)WebKit::RemoteRenderingBackendProxy::connection(a1, &v10);
  uint64_t v5 = (unsigned int *)v10;
  if (v10)
  {
    if (IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::DestroyGetPixelBufferSharedMemory,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>((uint64_t)v10, a2))
    {
      char v7 = off_1EB3583E8;
      if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *((void *)a1 + 8);
        uint64_t v9 = IPC::errorAsString();
        *(_DWORD *)buf = 134218498;
        uint64_t v12 = v8;
        __int16 v13 = 2082;
        uint64_t v14 = "RemoteRenderingBackend_DestroyGetPixelBufferSharedMemory";
        __int16 v15 = 2082;
        uint64_t v16 = v9;
        _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
      }
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
    }
    return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(v5, v6);
  }
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::DestroyGetPixelBufferSharedMemory,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v5 = v4 + v6;
  }
  uint64_t v7 = IPC::StreamClientConnection::trySendDestinationIDIfNeeded((void *)a1, a2, v5);
  if (v7) {
    return v7;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v11, v5);
  if (!v13) {
    return 15;
  }
  uint64_t result = IPC::StreamClientConnection::trySendStream<Messages::RemoteRenderingBackend::DestroyGetPixelBufferSharedMemory>(a1, v11, v12);
  if (result) {
    return 0;
  }
  if (v13)
  {
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage(a1, v11, v12);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v10, (uint64_t **)(a1 + 8));
    uint64_t PixelBufferShared = IPC::Connection::send<Messages::RemoteRenderingBackend::DestroyGetPixelBufferSharedMemory>((uint64_t)v10, a2);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v10);
    return PixelBufferShared;
  }
  __break(1u);
  return result;
}

uint64_t IPC::StreamClientConnection::trySendStream<Messages::RemoteRenderingBackend::DestroyGetPixelBufferSharedMemory>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = (a2 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v5 = v4 - a2;
  if (v4 < a2)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = v5 + 2;
    if (v5 > 0xFFFFFFFFFFFFFFFDLL || v6 > a3) {
      return 0;
    }
    *(_WORD *)(a2 + v5) = 1332;
  }
  if (!a3) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 72);
  unint64_t v9 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v10 = *(void *)(a1 + 64);
  if (v9 + 16 >= v10) {
    unint64_t v9 = 0;
  }
  if (v6 <= 0x10) {
    unint64_t v6 = 16;
  }
  unint64_t v11 = v9 + v6;
  if (v10 <= v11) {
    unint64_t v11 = 0;
  }
  *(void *)(a1 + 80) = v11;
  if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v8 + 16) + 128), v11) == 0x80000000
    || *(_DWORD *)(a1 + 116))
  {
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    *(_DWORD *)(a1 + 116) = 0;
  }
  return 1;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::DestroyGetPixelBufferSharedMemory>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v4 = 1332;
  *((void *)v4 + 1) = a2;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  unint64_t v11 = v4;
  uint64_t v6 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 1, 0);
  uint64_t v7 = v11;
  unint64_t v11 = 0;
  if (v7)
  {
    IPC::Encoder::~Encoder(v7, v5);
    WTF::fastFree(v9, v10);
  }
  return v6;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 80);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9E30[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 80) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 80);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E9E40[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer18GetShareableBitmapEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)(a2 + 1));

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer18GetShareableBitmapEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  if (*((unsigned char *)a3 + 72))
  {
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle(a2 + 8, (uint64_t)(a3 + 1));
    *(unsigned char *)(a2 + 72) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer18GetShareableBitmapEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

unsigned int *WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CacheFilter,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t result = (unsigned int *)WebKit::RemoteRenderingBackendProxy::connection(a1, &v12);
  char v7 = (unsigned int *)v12;
  if (v12)
  {
    if (IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::CacheFilter,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>((uint64_t)v12, a2, a3))
    {
      unint64_t v9 = off_1EB3583E8;
      if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *((void *)a1 + 8);
        unint64_t v11 = IPC::errorAsString();
        *(_DWORD *)buf = 134218498;
        uint64_t v14 = v10;
        __int16 v15 = 2082;
        uint64_t v16 = "RemoteRenderingBackend_CacheFilter";
        __int16 v17 = 2082;
        uint64_t v18 = v11;
        _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
      }
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
    }
    return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(v7, v8);
  }
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::CacheFilter,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  uint64_t v9 = IPC::StreamClientConnection::trySendDestinationIDIfNeeded((void *)a1, a3, v7);
  if (v9) {
    return v9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, v13, v7);
  if (!v14) {
    return 15;
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage(a1, v13[0], v13[1]);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, (uint64_t **)(a1 + 8));
  uint64_t v10 = IPC::Connection::send<Messages::RemoteRenderingBackend::CacheFilter>((uint64_t)v12, a2, a3);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v12);
  return v10;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::CacheFilter>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  double v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v6 = 1322;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v10 = v6;
  IPC::ArgumentCoder<WebCore::Filter,void>::encode(v6, **a2);
  uint64_t v7 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 1, 0);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v10, v8);
  return v7;
}

uint64_t WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseAllDrawingResources,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(a1, &v49);
  double v6 = v49;
  if (v49)
  {
    double v7 = *((double *)v49 + 15);
    double v8 = INFINITY;
    if (fabs(v7) != INFINITY)
    {
      WTF::ApproximateTime::now(v5);
      double v8 = v7 + v9;
    }
    if (*((void *)v6 + 7) == a3)
    {
LABEL_5:
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 16), buf, v8);
      if (buf[16])
      {
        unint64_t v11 = *(void *)buf;
        uint64_t v12 = *(void *)&buf[8];
        char v13 = (_WORD *)((*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
        unint64_t v14 = (unint64_t)v13 - *(void *)buf;
        if ((unint64_t)v13 < *(void *)buf)
        {
          unint64_t v15 = 0;
          if (*(void *)&buf[8]) {
            goto LABEL_12;
          }
        }
        else
        {
          unint64_t v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > *(void *)&buf[8]) {
            goto LABEL_56;
          }
          *char v13 = 1340;
          if (v12)
          {
LABEL_12:
            uint64_t v17 = *((void *)v6 + 9);
            unint64_t v18 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v19 = *((void *)v6 + 8);
            if (v18 + 16 >= v19) {
              unint64_t v18 = 0;
            }
            if (v15 <= 0x10) {
              unint64_t v15 = 16;
            }
            unint64_t v20 = v18 + v15;
            if (v19 <= v20) {
              unint64_t v20 = 0;
            }
            *((void *)v6 + 10) = v20;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) == 0x80000000 || v6[29])
            {
              if (*((unsigned char *)v6 + 104)) {
                MEMORY[0x1997420B0](v6[23]);
              }
              v6[29] = 0;
            }
            uint64_t v21 = 0;
LABEL_70:
            WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v6, v10);
            return v21;
          }
        }
        unint64_t v36 = buf[16];
        if (!buf[16])
        {
          __break(1u);
          goto LABEL_73;
        }
        unint64_t v11 = *(void *)buf;
        char v13 = (_WORD *)((*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_56:
        unint64_t v15 = 0;
        BOOL v37 = (unint64_t)v13 >= v11;
        unint64_t v38 = (unint64_t)v13 - v11;
        if (v37 && v38 <= 0xFFFFFFFFFFFFFFFDLL && v38 + 2 <= *(void *)&buf[8])
        {
          *(_WORD *)(v11 + v38) = 2870;
          unint64_t v15 = v38 + 2;
        }
        unint64_t v39 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v36 = *((void *)v6 + 8);
        if (v39 + 16 < v36)
        {
LABEL_62:
          if (v15 <= 0x10) {
            unint64_t v15 = 16;
          }
          unint64_t v40 = v39 + v15;
          if (v36 <= v40) {
            unint64_t v41 = 0;
          }
          else {
            unint64_t v41 = v40;
          }
          *((void *)v6 + 10) = v41;
          atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v41);
          v6[29] = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)v6 + 1);
          uint64_t v42 = v50;
          uint64_t v43 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v43 = 1340;
          *((void *)v43 + 1) = a3;
          *((void *)v43 + 66) = (char *)v43 + 16;
          *((void *)v43 + 67) = 512;
          *((void *)v43 + 68) = 0;
          *((void *)v43 + 70) = 0;
          *((void *)v43 + 69) = 0;
          IPC::Encoder::encodeHeader(v43);
          unint64_t v51 = v43;
          uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v42, (uint64_t *)&v51, 1, 0);
          unint64_t v45 = v51;
          unint64_t v51 = 0;
          if (v45)
          {
            IPC::Encoder::~Encoder(v45, v44);
            WTF::fastFree(v47, v48);
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
          if (!v21) {
            goto LABEL_70;
          }
          goto LABEL_46;
        }
LABEL_73:
        unint64_t v39 = 0;
        goto LABEL_62;
      }
      goto LABEL_45;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 16), buf, v8);
    if (!buf[16])
    {
LABEL_45:
      uint64_t v21 = 15;
LABEL_46:
      unint64_t v33 = off_1EB3583E8;
      if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v34 = *((void *)a1 + 8);
        uint64_t v35 = IPC::errorAsString();
        *(_DWORD *)buf = 134218498;
        *(void *)&uint8_t buf[4] = v34;
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "RemoteRenderingBackend_ReleaseAllDrawingResources";
        __int16 v53 = 2082;
        unint64_t v54 = v35;
        _os_log_impl(&dword_1985F2000, v33, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
      }
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
      goto LABEL_70;
    }
    uint64_t v23 = *(void *)buf;
    unint64_t v22 = *(void *)&buf[8];
    unint64_t v24 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v25 = v24 - *(void *)buf;
    if (v24 >= *(void *)buf)
    {
      unint64_t v26 = v25 + 2;
      if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v26 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v25) = 2871;
        goto LABEL_31;
      }
      unint64_t v22 = 0;
    }
    unint64_t v26 = 0;
LABEL_31:
    BOOL v28 = (void *)((v23 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v28 >= v23 + v26)
    {
      unint64_t v26 = (unint64_t)v28 - v23 + 8;
      if ((unint64_t)v28 - v23 > 0xFFFFFFFFFFFFFFF7 || v26 > v22) {
        goto LABEL_52;
      }
      void *v28 = a3;
    }
    if (v22)
    {
      unint64_t v30 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v31 = *((void *)v6 + 8);
      if (v30 + 16 >= v31) {
        unint64_t v30 = 0;
      }
      if (v26 <= 0x10) {
        unint64_t v26 = 16;
      }
      unint64_t v32 = v30 + v26;
      if (v31 <= v32) {
        unint64_t v32 = 0;
      }
      *((void *)v6 + 10) = v32;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v32) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_5;
    }
LABEL_52:
    uint64_t v21 = 17;
    goto LABEL_46;
  }
  return 1;
}

unsigned int *WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseRenderingResource,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t result = (unsigned int *)WebKit::RemoteRenderingBackendProxy::connection(a1, &v45);
  double v7 = v45;
  if (v45)
  {
    double v8 = *((double *)v45 + 15);
    double v9 = INFINITY;
    if (fabs(v8) != INFINITY)
    {
      WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
      double v9 = v8 + v10;
    }
    if (*((void *)v7 + 7) == a3) {
      goto LABEL_5;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 16), buf, v9);
    if (!buf[16]) {
      goto LABEL_57;
    }
    uint64_t v25 = *(void *)buf;
    unint64_t v24 = *(void *)&buf[8];
    unint64_t v26 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v27 = v26 - *(void *)buf;
    if (v26 >= *(void *)buf)
    {
      unint64_t v28 = v27 + 2;
      if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v28 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v27) = 2871;
LABEL_39:
        unint64_t v30 = (void *)((v25 + v28 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v30 >= v25 + v28)
        {
          unint64_t v28 = (unint64_t)v30 - v25 + 8;
          if ((unint64_t)v30 - v25 > 0xFFFFFFFFFFFFFFF7 || v28 > v24) {
            goto LABEL_57;
          }
          *unint64_t v30 = a3;
        }
        if (!v24)
        {
LABEL_57:
          unint64_t v40 = off_1EB3583E8;
          if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v41 = *((void *)a1 + 8);
            uint64_t v42 = IPC::errorAsString();
            *(_DWORD *)buf = 134218498;
            *(void *)&uint8_t buf[4] = v41;
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "RemoteRenderingBackend_ReleaseRenderingResource";
            __int16 v49 = 2082;
            uint64_t v50 = v42;
            _os_log_impl(&dword_1985F2000, v40, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
          }
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
          return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v11);
        }
        unint64_t v32 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v33 = *((void *)v7 + 8);
        if (v32 + 16 >= v33) {
          unint64_t v32 = 0;
        }
        if (v28 <= 0x10) {
          unint64_t v28 = 16;
        }
        unint64_t v34 = v32 + v28;
        if (v33 <= v34) {
          unint64_t v34 = 0;
        }
        *((void *)v7 + 10) = v34;
        IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v7, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v34) == 0x80000000);
        *((void *)v7 + 7) = a3;
LABEL_5:
        uint64_t result = (unsigned int *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 16), buf, v9);
        if (buf[16])
        {
          uint64_t v13 = *(void *)buf;
          unint64_t v12 = *(void *)&buf[8];
          unint64_t v14 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v15 = v14 - *(void *)buf;
          if (v14 >= *(void *)buf)
          {
            unint64_t v16 = v15 + 2;
            if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= *(void *)&buf[8])
            {
              *(_WORD *)(*(void *)buf + v15) = 1347;
              goto LABEL_12;
            }
            unint64_t v12 = 0;
          }
          unint64_t v16 = 0;
LABEL_12:
          unint64_t v18 = (void *)((v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((unint64_t)v18 >= v13 + v16)
          {
            unint64_t v16 = (unint64_t)v18 - v13 + 8;
            if ((unint64_t)v18 - v13 > 0xFFFFFFFFFFFFFFF7 || v16 > v12)
            {
LABEL_53:
              if (!buf[16])
              {
                __break(1u);
                return result;
              }
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v7, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v46, (uint64_t **)v7 + 1);
              uint64_t v35 = v46;
              unint64_t v36 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)unint64_t v36 = 1347;
              *((void *)v36 + 1) = a3;
              *((void *)v36 + 66) = (char *)v36 + 16;
              *((void *)v36 + 67) = 512;
              *((void *)v36 + 68) = 0;
              *((void *)v36 + 70) = 0;
              *((void *)v36 + 69) = 0;
              IPC::Encoder::encodeHeader(v36);
              unsigned __int8 v47 = v36;
              IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v36, *a2);
              int v38 = IPC::Connection::sendMessageImpl((uint64_t)v35, (uint64_t *)&v47, 1, 0);
              unint64_t v39 = v47;
              unsigned __int8 v47 = 0;
              if (v39)
              {
                IPC::Encoder::~Encoder(v39, v37);
                WTF::fastFree(v43, v44);
              }
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v46);
              if (!v38) {
                return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v11);
              }
              goto LABEL_57;
            }
            *unint64_t v18 = **a2;
          }
          if (v12)
          {
            uint64_t v20 = *((void *)v7 + 9);
            unint64_t v21 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v22 = *((void *)v7 + 8);
            if (v21 + 16 >= v22) {
              unint64_t v21 = 0;
            }
            if (v16 <= 0x10) {
              unint64_t v16 = 16;
            }
            unint64_t v23 = v21 + v16;
            if (v22 <= v23) {
              unint64_t v23 = 0;
            }
            *((void *)v7 + 10) = v23;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v20 + 16) + 128), v23) == 0x80000000 || v7[29])
            {
              if (*((unsigned char *)v7 + 104)) {
                MEMORY[0x1997420B0](v7[23]);
              }
              v7[29] = 0;
            }
            return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v11);
          }
          goto LABEL_53;
        }
        goto LABEL_57;
      }
      unint64_t v24 = 0;
    }
    unint64_t v28 = 0;
    goto LABEL_39;
  }
  return result;
}

uint64_t WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseAllImageResources,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(a1, &v49);
  double v6 = v49;
  if (v49)
  {
    double v7 = *((double *)v49 + 15);
    double v8 = INFINITY;
    if (fabs(v7) != INFINITY)
    {
      WTF::ApproximateTime::now(v5);
      double v8 = v7 + v9;
    }
    if (*((void *)v6 + 7) == a3)
    {
LABEL_5:
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 16), buf, v8);
      if (buf[16])
      {
        unint64_t v11 = *(void *)buf;
        uint64_t v12 = *(void *)&buf[8];
        uint64_t v13 = (_WORD *)((*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
        unint64_t v14 = (unint64_t)v13 - *(void *)buf;
        if ((unint64_t)v13 < *(void *)buf)
        {
          unint64_t v15 = 0;
          if (*(void *)&buf[8]) {
            goto LABEL_12;
          }
        }
        else
        {
          unint64_t v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > *(void *)&buf[8]) {
            goto LABEL_56;
          }
          *uint64_t v13 = 1341;
          if (v12)
          {
LABEL_12:
            uint64_t v17 = *((void *)v6 + 9);
            unint64_t v18 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v19 = *((void *)v6 + 8);
            if (v18 + 16 >= v19) {
              unint64_t v18 = 0;
            }
            if (v15 <= 0x10) {
              unint64_t v15 = 16;
            }
            unint64_t v20 = v18 + v15;
            if (v19 <= v20) {
              unint64_t v20 = 0;
            }
            *((void *)v6 + 10) = v20;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) == 0x80000000 || v6[29])
            {
              if (*((unsigned char *)v6 + 104)) {
                MEMORY[0x1997420B0](v6[23]);
              }
              v6[29] = 0;
            }
            uint64_t v21 = 0;
LABEL_70:
            WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v6, v10);
            return v21;
          }
        }
        unint64_t v36 = buf[16];
        if (!buf[16])
        {
          __break(1u);
          goto LABEL_73;
        }
        unint64_t v11 = *(void *)buf;
        uint64_t v13 = (_WORD *)((*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_56:
        unint64_t v15 = 0;
        BOOL v37 = (unint64_t)v13 >= v11;
        unint64_t v38 = (unint64_t)v13 - v11;
        if (v37 && v38 <= 0xFFFFFFFFFFFFFFFDLL && v38 + 2 <= *(void *)&buf[8])
        {
          *(_WORD *)(v11 + v38) = 2870;
          unint64_t v15 = v38 + 2;
        }
        unint64_t v39 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v36 = *((void *)v6 + 8);
        if (v39 + 16 < v36)
        {
LABEL_62:
          if (v15 <= 0x10) {
            unint64_t v15 = 16;
          }
          unint64_t v40 = v39 + v15;
          if (v36 <= v40) {
            unint64_t v41 = 0;
          }
          else {
            unint64_t v41 = v40;
          }
          *((void *)v6 + 10) = v41;
          atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v41);
          v6[29] = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)v6 + 1);
          uint64_t v42 = v50;
          uint64_t v43 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v43 = 1341;
          *((void *)v43 + 1) = a3;
          *((void *)v43 + 66) = (char *)v43 + 16;
          *((void *)v43 + 67) = 512;
          *((void *)v43 + 68) = 0;
          *((void *)v43 + 70) = 0;
          *((void *)v43 + 69) = 0;
          IPC::Encoder::encodeHeader(v43);
          uint64_t v51 = v43;
          uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v42, (uint64_t *)&v51, 1, 0);
          unint64_t v45 = v51;
          uint64_t v51 = 0;
          if (v45)
          {
            IPC::Encoder::~Encoder(v45, v44);
            WTF::fastFree(v47, v48);
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
          if (!v21) {
            goto LABEL_70;
          }
          goto LABEL_46;
        }
LABEL_73:
        unint64_t v39 = 0;
        goto LABEL_62;
      }
      goto LABEL_45;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 16), buf, v8);
    if (!buf[16])
    {
LABEL_45:
      uint64_t v21 = 15;
LABEL_46:
      unint64_t v33 = off_1EB3583E8;
      if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v34 = *((void *)a1 + 8);
        uint64_t v35 = IPC::errorAsString();
        *(_DWORD *)buf = 134218498;
        *(void *)&uint8_t buf[4] = v34;
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "RemoteRenderingBackend_ReleaseAllImageResources";
        __int16 v53 = 2082;
        unint64_t v54 = v35;
        _os_log_impl(&dword_1985F2000, v33, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
      }
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
      goto LABEL_70;
    }
    uint64_t v23 = *(void *)buf;
    unint64_t v22 = *(void *)&buf[8];
    unint64_t v24 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v25 = v24 - *(void *)buf;
    if (v24 >= *(void *)buf)
    {
      unint64_t v26 = v25 + 2;
      if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v26 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v25) = 2871;
        goto LABEL_31;
      }
      unint64_t v22 = 0;
    }
    unint64_t v26 = 0;
LABEL_31:
    unint64_t v28 = (void *)((v23 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v28 >= v23 + v26)
    {
      unint64_t v26 = (unint64_t)v28 - v23 + 8;
      if ((unint64_t)v28 - v23 > 0xFFFFFFFFFFFFFFF7 || v26 > v22) {
        goto LABEL_52;
      }
      void *v28 = a3;
    }
    if (v22)
    {
      unint64_t v30 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v31 = *((void *)v6 + 8);
      if (v30 + 16 >= v31) {
        unint64_t v30 = 0;
      }
      if (v26 <= 0x10) {
        unint64_t v26 = 16;
      }
      unint64_t v32 = v30 + v26;
      if (v31 <= v32) {
        unint64_t v32 = 0;
      }
      *((void *)v6 + 10) = v32;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v32) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_5;
    }
LABEL_52:
    uint64_t v21 = 17;
    goto LABEL_46;
  }
  return 1;
}

unsigned int *WebKit::RemoteRenderingBackendProxy::sendSync<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, WebKit::RemoteRenderingBackendProxy *this, uint64_t *a3, uint64_t a4)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t result = (unsigned int *)WebKit::RemoteRenderingBackendProxy::connection(this, &v59);
  double v9 = v59;
  if (!v59)
  {
    *(unsigned char *)a1 = 1;
    *(_DWORD *)(a1 + 24) = 1;
    return result;
  }
  double v10 = *((double *)v59 + 15);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    double v11 = v10 + v12;
  }
  if (*((void *)v9 + 7) == a4) {
    goto LABEL_5;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v9 + 16), buf, v11);
  if (!buf[16])
  {
    char v57 = 15;
LABEL_115:
    LOBYTE(v66) = v57;
    unsigned int v69 = 1;
    a3 = (uint64_t *)off_1EB3583E8;
    if (!os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_105;
    }
    goto LABEL_104;
  }
  uint64_t v44 = *(void *)buf;
  unint64_t v43 = *(void *)&buf[8];
  unint64_t v45 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v46 = v45 - *(void *)buf;
  if (v45 >= *(void *)buf)
  {
    unint64_t v47 = v46 + 2;
    if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= *(void *)&buf[8])
    {
      *(_WORD *)(*(void *)buf + v46) = 2871;
      goto LABEL_88;
    }
    unint64_t v43 = 0;
  }
  unint64_t v47 = 0;
LABEL_88:
  __int16 v49 = (void *)((v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v49 >= v44 + v47)
  {
    unint64_t v47 = (unint64_t)v49 - v44 + 8;
    if ((unint64_t)v49 - v44 > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
      goto LABEL_114;
    }
    *__int16 v49 = a4;
  }
  if (!v43)
  {
LABEL_114:
    char v57 = 17;
    goto LABEL_115;
  }
  uint64_t v51 = *((void *)v9 + 9);
  unint64_t v52 = (*((void *)v9 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v53 = *((void *)v9 + 8);
  if (v52 + 16 >= v53) {
    unint64_t v52 = 0;
  }
  if (v47 <= 0x10) {
    unint64_t v47 = 16;
  }
  unint64_t v54 = v52 + v47;
  if (v53 <= v54) {
    unint64_t v54 = 0;
  }
  *((void *)v9 + 10) = v54;
  IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v9, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
  *((void *)v9 + 7) = a4;
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v9 + 16), &v60, v11);
  if (!v62)
  {
    LOBYTE(v66) = 15;
    unsigned int v69 = 1;
    goto LABEL_77;
  }
  unint64_t v14 = v60;
  unint64_t v13 = v61;
  unint64_t v58 = (uint64_t **)(v9 + 2);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v70, (uint64_t **)v9 + 1);
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v70, v15))
  {
    LOBYTE(v66) = 11;
    unsigned int v69 = 1;
    buf[0] = 0;
    LODWORD(v77) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v66);
    char v78 = 1;
    if (v69 != -1) {
      ((void (*)(uint64_t **, uint64_t **))off_1EE9E9E50[v69])(&v71, &v66);
    }
    goto LABEL_52;
  }
  uint64_t v66 = v14;
  int v67 = (uint64_t *)v13;
  unint64_t v68 = 0;
  unint64_t v16 = ((unint64_t)v14 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = v16 - (void)v14;
  if (v16 < (unint64_t)v14)
  {
    unint64_t v18 = 0;
  }
  else
  {
    if (v17 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_107;
    }
    unint64_t v18 = v17 + 2;
    if (v17 + 2 > v13) {
      goto LABEL_107;
    }
    *(_WORD *)((char *)v14 + v17) = 3731;
    unint64_t v68 = v17 + 2;
  }
  while (1)
  {
    unint64_t v19 = (char *)(((unint64_t)v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v19 >= (char *)v14 + v18)
    {
      unint64_t v20 = (char *)(v19 - (char *)v14);
      if ((unint64_t)(v19 - (char *)v14) > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v20 + 8) > v13)
      {
        int v67 = 0;
      }
      else
      {
        *(void *)unint64_t v19 = v15;
        unint64_t v68 = (unint64_t)(v20 + 8);
      }
    }
    IPC::VectorArgumentCoder<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((WTF *)&v66, *a3);
    if (!v67)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_39;
    }
    uint64_t v21 = v68;
    unint64_t v22 = (*((void *)v9 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = *((void *)v9 + 8);
    if (v22 + 16 >= v23) {
      unint64_t v22 = 0;
    }
    if (v68 <= 0x10) {
      uint64_t v21 = 16;
    }
    unint64_t v24 = v22 + v21;
    if (v23 <= v24) {
      unint64_t v24 = 0;
    }
    *((void *)v9 + 10) = v24;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v9 + 9) + 16) + 128), v24) == 0x80000000
      || v9[29])
    {
      if (*((unsigned char *)v9 + 104)) {
        MEMORY[0x1997420B0](v9[23]);
      }
      v9[29] = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v71, (uint64_t)(v9 + 16), v11);
    if (!v73)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_38:
      char v65 = 1;
      goto LABEL_39;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v74, (uint64_t)&v71, (uint64_t *)v9 + 7);
    if (*((_WORD *)v74 + 25) != 2870)
    {
      unsigned int v63 = (uint64_t *)v74;
      int v64 = 0;
      goto LABEL_38;
    }
    IPC::Decoder::~Decoder(v74);
    WTF::fastFree(v25, v26);
    IPC::Connection::waitForSyncReply((uint64_t)v70, v15, 0xE93u, (uint64_t)&v71, v11);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v71);
    char v65 = 1;
    if (v72 != -1) {
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[v72])(&v74, &v71);
    }
LABEL_39:
    IPC::Connection::popPendingSyncRequestID(v70);
    if (!v65)
    {
      buf[0] = 0;
      char v78 = 0;
      goto LABEL_52;
    }
    if (v64 == 1)
    {
      buf[0] = (_BYTE)v63;
      int v28 = 1;
      LODWORD(v77) = 1;
      char v78 = 1;
LABEL_51:
      ((void (*)(uint64_t **, uint64_t **))off_1EE9E9D68[v28])(&v66, &v63);
      goto LABEL_52;
    }
    if (v64) {
      break;
    }
    LOBYTE(v71) = 0;
    char v73 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::Vector<WebKit::SwapBuffersDisplayRequirement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v63, (uint64_t)&v71);
    if (v73)
    {
      if (!v65) {
        goto LABEL_106;
      }
      if (v64) {
        goto LABEL_110;
      }
      unint64_t v27 = v63;
      unsigned int v63 = 0;
      uint64_t v66 = v27;
      int v67 = v71;
      unint64_t v68 = v72;
      unsigned int v69 = 0;
      buf[0] = 0;
      LODWORD(v77) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v66);
      char v78 = 1;
      if (v69 != -1) {
        ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9E50[v69])(&v74, &v66);
      }
    }
    else
    {
      buf[0] = 13;
      LODWORD(v77) = 1;
      char v78 = 1;
    }
    if (v65)
    {
      int v28 = v64;
      if (v64 != -1) {
        goto LABEL_51;
      }
    }
LABEL_52:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v70);
    if (v78)
    {
      LOBYTE(v66) = 0;
      unsigned int v69 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v66, (uint64_t)buf);
      if (v78 && v77 != -1) {
        ((void (*)(uint64_t **, unsigned char *))off_1EE9E9E50[v77])(&v71, buf);
      }
      goto LABEL_77;
    }
    if (v62)
    {
      unint64_t v29 = ((unint64_t)v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v30 = v29 - (void)v60;
      if (v29 < (unint64_t)v60)
      {
        unint64_t v31 = 0;
      }
      else
      {
        unint64_t v31 = 0;
        if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v61)
        {
          *(_WORD *)((char *)v60 + v30) = 2870;
          unint64_t v31 = v30 + 2;
        }
      }
      unint64_t v32 = (*((void *)v9 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v33 = *((void *)v9 + 8);
      if (v32 + 16 < v33) {
        goto LABEL_62;
      }
      goto LABEL_111;
    }
LABEL_106:
    __break(1u);
LABEL_107:
    unint64_t v13 = 0;
    unint64_t v18 = 0;
    int v67 = 0;
  }
  while (1)
  {
LABEL_110:
    while (1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_111:
      unint64_t v32 = 0;
LABEL_62:
      if (v31 <= 0x10) {
        unint64_t v31 = 16;
      }
      unint64_t v34 = v32 + v31;
      if (v33 <= v34) {
        unint64_t v34 = 0;
      }
      *((void *)v9 + 10) = v34;
      atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v9 + 9) + 16) + 128), v34);
      v9[29] = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v70, v58);
      uint64_t v35 = (uint64_t *)v70;
      unsigned int v63 = 0;
      IPC::Connection::createSyncMessageEncoder(3731, a4, (uint64_t *)&v63, &v74);
      IPC::VectorArgumentCoder<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v74, *a3);
      IPC::Connection::sendSyncMessage((uint64_t)v35, (uint64_t)v63, (uint64_t *)&v74, 0, (uint64_t)&v71, v11);
      if (!v72) {
        break;
      }
      if (v72 == 1)
      {
        LOBYTE(v66) = (_BYTE)v71;
        int v36 = 1;
        unsigned int v69 = 1;
        goto LABEL_73;
      }
    }
    buf[0] = 0;
    buf[16] = 0;
    IPC::Decoder::operator>><std::tuple<WTF::Vector<WebKit::SwapBuffersDisplayRequirement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v71, (uint64_t)buf);
    if (!buf[16]) {
      break;
    }
    int v36 = v72;
    if (!v72)
    {
      unint64_t v38 = v71;
      __int16 v71 = 0;
      uint64_t v66 = v38;
      int v67 = *(uint64_t **)buf;
      unint64_t v68 = *(void *)&buf[8];
      unsigned int v69 = 0;
      goto LABEL_73;
    }
  }
  LOBYTE(v66) = 13;
  unsigned int v69 = 1;
  int v36 = v72;
  if (v72 == -1) {
    goto LABEL_74;
  }
LABEL_73:
  ((void (*)(unsigned char *, uint64_t **))off_1EE9E9D68[v36])(buf, &v71);
LABEL_74:
  unint64_t v39 = v74;
  v74 = 0;
  if (v39)
  {
    IPC::Encoder::~Encoder(v39, v37);
    WTF::fastFree(v41, v42);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v70);
LABEL_77:
  a4 = v69;
  if (v69)
  {
    a3 = (uint64_t *)off_1EB3583E8;
    if (!os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
LABEL_105:
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(this);
      goto LABEL_78;
    }
    if (a4 != 1) {
      goto LABEL_110;
    }
LABEL_104:
    uint64_t v55 = *((void *)this + 8);
    unint64_t v56 = IPC::errorAsString();
    *(_DWORD *)buf = 134218498;
    *(void *)&uint8_t buf[4] = v55;
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = "RemoteRenderingBackend_PrepareImageBufferSetsForDisplaySync";
    __int16 v76 = 2082;
    __int16 v77 = v56;
    _os_log_impl(&dword_1985F2000, (os_log_t)a3, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::sendSync - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
    goto LABEL_105;
  }
LABEL_78:
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)&v66);
  if (v69 != -1) {
    ((void (*)(unsigned char *, uint64_t **))off_1EE9E9E50[v69])(buf, &v66);
  }
  return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v9, v40);
}

uint64_t *IPC::Decoder::operator>><std::tuple<WTF::Vector<WebKit::SwapBuffersDisplayRequirement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a2;
  unint64_t v6 = a1[1];
  uint64_t v7 = *a1;
  unint64_t v8 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v6 < v8 || v6 - v8 <= 7)
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v33 = a1[3];
    if (v33)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v33 + 16))(v33, v7, v6);
        uint64_t v32 = *a1;
        uint64_t v31 = a1[1];
      }
      else
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
      }
    }
    goto LABEL_48;
  }
  double v10 = (WTF **)(v7 + v8);
  a1[2] = (uint64_t)(v10 + 1);
  if (!v7)
  {
    uint64_t v31 = v6;
    uint64_t v32 = 0;
LABEL_48:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v34 = a1[3];
    if (v34 && v31) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
    }
LABEL_25:
    a2 = *a1;
    uint64_t v23 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v24 = a1[3];
    if (v24 && v23)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, a2);
      double v11 = 0;
      int v16 = 0;
      a2 = *a1;
      uint64_t v29 = a1[1];
      uint64_t v30 = a1[3];
      char v15 = 1;
      *a1 = 0;
      a1[1] = 0;
      if (v30 && v29)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, a2);
        int v16 = 0;
        double v11 = 0;
      }
    }
    else
    {
      int v16 = 0;
      double v11 = 0;
      char v15 = 1;
    }
    goto LABEL_27;
  }
  double v11 = *v10;
  int v36 = 0;
  uint64_t v37 = 0;
  if ((unint64_t)v11 >= 0x100000)
  {
    while (1)
    {
      unsigned __int16 v21 = IPC::Decoder::decode<WebKit::SwapBuffersDisplayRequirement>(a1);
      unsigned __int16 v35 = v21;
      if (v21 < 0x100u) {
        goto LABEL_23;
      }
      int v17 = HIDWORD(v37);
      if (HIDWORD(v37) == v37)
      {
        unint64_t v18 = (unsigned char *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, (WTF *)(HIDWORD(v37) + 1), (unint64_t)&v35);
        int v17 = HIDWORD(v37);
        unint64_t v19 = v36;
        *((unsigned char *)v36 + HIDWORD(v37)) = *v18;
      }
      else
      {
        char v20 = v21;
        unint64_t v19 = v36;
        *((unsigned char *)v36 + HIDWORD(v37)) = v20;
      }
      a2 = (v17 + 1);
      HIDWORD(v37) = v17 + 1;
      double v11 = (WTF *)((char *)v11 - 1);
      if (!v11)
      {
        if (v37 > a2)
        {
          if (v17 == -1)
          {
            int v36 = 0;
            LODWORD(v37) = 0;
            WTF::fastFree(v19, (void *)a2);
          }
          else
          {
            LODWORD(v37) = v17 + 1;
            int v36 = (WTF *)WTF::fastRealloc(v19, (void *)a2);
          }
        }
        double v11 = v36;
        int v3 = v37;
        int v2 = HIDWORD(v37);
        goto LABEL_17;
      }
    }
  }
  if (v11)
  {
    LODWORD(v37) = v11;
    int v36 = (WTF *)WTF::fastMalloc(v11);
    while (1)
    {
      unsigned __int16 v12 = IPC::Decoder::decode<WebKit::SwapBuffersDisplayRequirement>(a1);
      unsigned __int16 v35 = v12;
      if (v12 < 0x100u) {
        break;
      }
      int v13 = HIDWORD(v37);
      if (HIDWORD(v37) == v37)
      {
        unint64_t v14 = (unsigned char *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, (WTF *)(HIDWORD(v37) + 1), (unint64_t)&v35);
        int v13 = HIDWORD(v37);
        *((unsigned char *)v36 + HIDWORD(v37)) = *v14;
      }
      else
      {
        *((unsigned char *)v36 + HIDWORD(v37)) = v12;
      }
      int v2 = v13 + 1;
      HIDWORD(v37) = v13 + 1;
      double v11 = (WTF *)((char *)v11 - 1);
      if (!v11)
      {
        double v11 = v36;
        int v3 = v37;
        goto LABEL_17;
      }
    }
LABEL_23:
    unint64_t v22 = v36;
    if (v36)
    {
      int v36 = 0;
      LODWORD(v37) = 0;
      WTF::fastFree(v22, (void *)a2);
    }
    goto LABEL_25;
  }
  int v2 = 0;
  int v3 = 0;
LABEL_17:
  char v15 = 0;
  int v16 = 1;
LABEL_27:
  if (*(unsigned __int8 *)(v4 + 16) == v16)
  {
    if (*(unsigned char *)(v4 + 16))
    {
      unint64_t v25 = *(WTF **)v4;
      if (*(void *)v4)
      {
        *(void *)uint64_t v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
        WTF::fastFree(v25, (void *)a2);
      }
      *(void *)uint64_t v4 = v11;
      *(_DWORD *)(v4 + 8) = v3;
      *(_DWORD *)(v4 + 12) = v2;
      return a1;
    }
  }
  else
  {
    if (!*(unsigned char *)(v4 + 16))
    {
      *(void *)uint64_t v4 = v11;
      *(_DWORD *)(v4 + 8) = v3;
      *(_DWORD *)(v4 + 12) = v2;
      *(unsigned char *)(v4 + 16) = 1;
      return a1;
    }
    unint64_t v26 = *(WTF **)v4;
    if (*(void *)v4)
    {
      *(void *)uint64_t v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      WTF::fastFree(v26, (void *)a2);
    }
    *(unsigned char *)(v4 + 16) = 0;
  }
  if (v11) {
    char v27 = v15;
  }
  else {
    char v27 = 1;
  }
  if ((v27 & 1) == 0) {
    WTF::fastFree(v11, (void *)a2);
  }
  return a1;
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 40 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,void>::encode(a1, v6);
      v6 += 40;
      v7 -= 40;
    }
    while (v7);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9E50[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E9E60[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteRenderingBackend36PrepareImageBufferSetsForDisplaySyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(WTF **)(a2 + 8);
  if (v3)
  {
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    WTF::fastFree(v3, (void *)a2);
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteRenderingBackend36PrepareImageBufferSetsForDisplaySyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  *(void *)(a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 4);
  *((_DWORD *)a3 + 4) = 0;
  *(_DWORD *)(a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 5);
  *((_DWORD *)a3 + 5) = 0;
  *(_DWORD *)(a2 + 20) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteRenderingBackend36PrepareImageBufferSetsForDisplaySyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplay>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 1339;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  double v10 = v6;
  IPC::VectorArgumentCoder<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v6, *a2);
  uint64_t v7 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 1, 0);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v10, v8);
  return v7;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::MarkSurfacesVolatile>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 1336;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  int v13 = v6;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,0ul,1ul,2ul>(v6, a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  double v9 = v13;
  int v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::FinalizeRenderingUpdate>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 1333;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  int v13 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  double v9 = v13;
  int v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t WebKit::RemoteRenderingBackendProxy::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(a1, &v51);
  uint64_t v8 = v51;
  if (!v51) {
    return 1;
  }
  double v9 = *((double *)v51 + 15);
  double v10 = INFINITY;
  if (fabs(v9) != INFINITY)
  {
    WTF::ApproximateTime::now(v7);
    double v10 = v9 + v11;
  }
  if (IPC::StreamClientConnection::trySendDestinationIDIfNeeded(v8, a4, v10)) {
    goto LABEL_5;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 16), buf, v10);
  if (!buf[16]) {
    goto LABEL_5;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v57, (uint64_t **)v8 + 1);
  uint64_t v16 = *a3;
  *a3 = 0;
  int v17 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v17 = &unk_1EE9E9E80;
  v17[1] = v16;
  v56[0] = (uint64_t)v17;
  uint64_t v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v56[1] = v18;
  uint64_t v55 = v18;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v57, v56);
  uint64_t v20 = buf[16];
  if (!buf[16]) {
    goto LABEL_60;
  }
  uint64_t v20 = *(void *)buf;
  unint64_t v21 = *(void *)&buf[8];
  unint64_t v22 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v23 = v22 - *(void *)buf;
  if (v22 < *(void *)buf)
  {
    unint64_t v24 = 0;
    unint64_t v19 = *(void *)&buf[8];
  }
  else
  {
    unint64_t v19 = 0;
    if (v23 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_61;
    }
    unint64_t v24 = 0;
    if (v23 + 2 <= *(void *)&buf[8])
    {
      *(_WORD *)(*(void *)buf + v23) = 1334;
      unint64_t v19 = v21;
      unint64_t v24 = v23 + 2;
    }
  }
  while (1)
  {
    unint64_t v25 = (void *)((v20 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v25 >= v20 + v24)
    {
      unint64_t v26 = (char *)v25 - v20;
      if ((unint64_t)v25 - v20 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_32;
      }
      unint64_t v24 = (unint64_t)(v26 + 8);
      if ((unint64_t)(v26 + 8) > v19) {
        goto LABEL_32;
      }
      void *v25 = v18;
    }
    if (v19)
    {
      unint64_t v27 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v28 = *((void *)v8 + 8);
      if (v27 + 16 >= v28) {
        unint64_t v27 = 0;
      }
      if (v24 <= 0x10) {
        unint64_t v24 = 16;
      }
      unint64_t v29 = v27 + v24;
      if (v28 <= v29) {
        unint64_t v30 = 0;
      }
      else {
        unint64_t v30 = v29;
      }
      *((void *)v8 + 10) = v30;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v30) == 0x80000000
        || v8[29])
      {
        if (*((unsigned char *)v8 + 104)) {
          MEMORY[0x1997420B0](v8[23]);
        }
        v8[29] = 0;
      }
      uint64_t v31 = v55;
      goto LABEL_53;
    }
LABEL_32:
    uint64_t v20 = buf[16];
    if (buf[16]) {
      break;
    }
LABEL_60:
    __break(1u);
LABEL_61:
    unint64_t v24 = v19;
  }
  unint64_t v32 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - *(void *)buf;
  if (v32 < *(void *)buf)
  {
    unint64_t v34 = 0;
  }
  else
  {
    unint64_t v34 = 0;
    if (v33 <= 0xFFFFFFFFFFFFFFFDLL && v33 + 2 <= *(void *)&buf[8])
    {
      *(_WORD *)(*(void *)buf + v33) = 2870;
      unint64_t v34 = v33 + 2;
    }
  }
  unint64_t v35 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = *((void *)v8 + 8);
  if (v35 + 16 >= v36) {
    unint64_t v35 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v37 = v35 + v34;
  if (v36 <= v37) {
    unint64_t v37 = 0;
  }
  *((void *)v8 + 10) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v37);
  v8[29] = 0;
  unint64_t v38 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v38 = 1334;
  *((void *)v38 + 1) = a4;
  *((void *)v38 + 66) = (char *)v38 + 16;
  *((void *)v38 + 67) = 512;
  *((void *)v38 + 68) = 0;
  *((void *)v38 + 70) = 0;
  *((void *)v38 + 69) = 0;
  IPC::Encoder::encodeHeader(v38);
  unint64_t v54 = v38;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v38, &v55);
  if (IPC::Connection::sendMessageImpl((uint64_t)v57, (uint64_t *)&v54, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v57, v55, &v53);
    if (v53)
    {
      unint64_t v41 = (atomic_uint *)(WTF::RunLoop::main(v40) + 8);
      atomic_fetch_add(v41, 1u);
      uint64_t v42 = v53;
      uint64_t v53 = 0;
      unint64_t v43 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v43 = &unk_1EE9E9EA8;
      v43[1] = v42;
      unint64_t v52 = v43;
      WTF::RunLoop::dispatch();
      uint64_t v44 = v52;
      unint64_t v52 = 0;
      if (v44) {
        (*(void (**)(void *))(*v44 + 8))(v44);
      }
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref((unsigned int *)v41);
      uint64_t v45 = v53;
      uint64_t v53 = 0;
      if (v45) {
        (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
      }
    }
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v31 = v55;
  }
  unint64_t v46 = v54;
  unint64_t v54 = 0;
  if (v46)
  {
    IPC::Encoder::~Encoder(v46, v39);
    WTF::fastFree(v49, v50);
  }
LABEL_53:
  uint64_t v47 = v56[0];
  v56[0] = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v57);
  if (v31)
  {
    uint64_t v15 = 0;
    goto LABEL_57;
  }
LABEL_5:
  unsigned __int16 v12 = off_1EB3583E8;
  if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *((void *)a1 + 8);
    *(_DWORD *)buf = 134218242;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = "RemoteRenderingBackend_GetImageBufferResourceLimitsForTesting";
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::sendWithAsyncReply - failed, name:%{public}s", buf, 0x16u);
  }
  WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
  uint64_t v15 = 5;
LABEL_57:
  WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v8, v14);
  return v15;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)>>(WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E9E80;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)>>(WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E9E80;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)>>(WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (!a2 || !*a2)
  {
LABEL_7:
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    memset(v16, 0, sizeof(v16));
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v4 + 16))(v4, v16);
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  IPC::ArgumentCoder<WebCore::ImageBufferResourceLimits,void>::decode(a2, (uint64_t)v16);
  if (!v17)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v7 = a2[3];
    if (v7 && v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
      uint64_t v11 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v11 && v10) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    goto LABEL_7;
  }
  long long v13 = *(_OWORD *)((char *)v16 + 1);
  long long v14 = *(_OWORD *)((char *)&v16[1] + 1);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)((char *)&v16[2] + 1);
  *(_OWORD *)&v15[15] = v16[3];
  char v12 = v16[0];
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v4 + 16))(v4, &v12);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
}

void *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting &&,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)> &&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E9EA8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting &&,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)> &&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E9EA8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting &&,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)> &&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unsigned int *WTF::WeakHashSet<WebCore::RenderingResourceObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderingResourceObserver>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned int v4 = a2[3];
  unsigned int v5 = a2[2] + 1;
  a2[2] = v5;
  if (v5 > v4)
  {
    uint64_t v6 = *(void *)a2;
    if (!*(void *)a2) {
      goto LABEL_18;
    }
    int v7 = *(_DWORD *)(v6 - 4);
    if (!v7)
    {
LABEL_4:
      a2[2] = 0;
      goto LABEL_5;
    }
    uint64_t v26 = a3;
    uint64_t v27 = a1;
    int v10 = 0;
    unsigned int v11 = v7 - 1;
    do
    {
      char v12 = (unsigned int **)(v6 + 8 * v11);
      if ((unint64_t)*v12 + 1 >= 2 && !*((void *)*v12 + 1))
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v12, a2);
        ++v10;
      }
    }
    while ((unint64_t)v11--);
    uint64_t v6 = *(void *)a2;
    if (v10)
    {
      *(_DWORD *)(v6 - 16) += v10;
      uint64_t v14 = *(void *)a2;
      if (*(void *)a2) {
        int v15 = *(_DWORD *)(v14 - 12);
      }
      else {
        int v15 = 0;
      }
      *(_DWORD *)(v14 - 12) = v15 - v10;
      uint64_t v6 = *(void *)a2;
    }
    a3 = v26;
    a1 = v27;
    if (v6)
    {
      unsigned int v24 = *(_DWORD *)(v6 - 4);
      if (v24 < 9 || 6 * *(_DWORD *)(v6 - 12) >= v24) {
        goto LABEL_4;
      }
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
      a3 = v26;
      a1 = v27;
      unsigned int v8 = 0;
      uint64_t v6 = *(void *)a2;
      a2[2] = 0;
      if (v6)
      {
LABEL_5:
        unsigned int v8 = *(_DWORD *)(v6 - 12);
        int v9 = 0x7FFFFFFF;
        if (v8 >= 0x7FFFFFFF) {
          goto LABEL_20;
        }
      }
    }
    else
    {
LABEL_18:
      unsigned int v8 = 0;
      a2[2] = 0;
    }
    int v9 = v8;
LABEL_20:
    a2[3] = 2 * v9;
  }
  uint64_t v16 = *(void *)(a3 + 8);
  if (!v16)
  {
    uint64_t v19 = a1;
    uint64_t v20 = a3;
    uint64_t v16 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v16 = 1;
    *(void *)(v16 + 8) = v20;
    unint64_t v22 = *(unsigned int **)(v20 + 8);
    *(void *)(v20 + 8) = v16;
    if (v22)
    {
      uint64_t v23 = v20;
      if (atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v21);
        uint64_t v23 = v20;
      }
      uint64_t v16 = *(void *)(v23 + 8);
    }
    a1 = v19;
  }
  atomic_fetch_add((atomic_uint *volatile)v16, 1u);
  atomic_fetch_add((atomic_uint *volatile)v16, 1u);
  unint64_t v28 = (WTF *)v16;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a2, &v28, a1);
  unint64_t result = (unsigned int *)v28;
  unint64_t v28 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    unint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v17);
  }
  if (v16)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v16);
      return (unsigned int *)WTF::fastFree((WTF *)v16, v17);
    }
  }
  return result;
}

unsigned int **_ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN7WebCore25RenderingResourceObserverES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(unsigned int **result, void *a2)
{
  if (*result)
  {
    int v2 = *(*result - 1);
    if (v2)
    {
      long long v13 = *result;
      uint64_t v14 = (uint64_t *)result;
      int v3 = 0;
      unsigned int v4 = v2 - 1;
      do
      {
        unsigned int v5 = (unsigned int **)&v13[2 * v4];
        if ((unint64_t)*v5 + 1 >= 2 && !*((void *)*v5 + 1))
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v5, a2);
          ++v3;
        }
      }
      while ((unint64_t)v4--);
      uint64_t v7 = *v14;
      if (v3)
      {
        *(_DWORD *)(v7 - 16) += v3;
        uint64_t v8 = *v14;
        if (*v14) {
          int v9 = *(_DWORD *)(v8 - 12);
        }
        else {
          int v9 = 0;
        }
        *(_DWORD *)(v8 - 12) = v9 - v3;
        uint64_t v7 = *v14;
      }
      unint64_t result = (unsigned int **)v14;
      if (v7)
      {
        unsigned int v10 = *(_DWORD *)(v7 - 4);
        unsigned int v11 = 6 * *(_DWORD *)(v7 - 12);
        if (v10 >= 9 && v11 < v10)
        {
          return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v14);
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::WeakHashSet<WebCore::RenderingResourceObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderingResourceObserver>(uint64_t *result, void *a2)
{
  int v3 = result;
  unsigned int v4 = *((_DWORD *)result + 3);
  unsigned int v5 = *((_DWORD *)result + 2) + 1;
  *((_DWORD *)result + 2) = v5;
  if (v5 > v4)
  {
    unint64_t result = (uint64_t *)_ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN7WebCore25RenderingResourceObserverES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((unsigned int **)result, a2);
    *((_DWORD *)v3 + 2) = 0;
    uint64_t v6 = *v3;
    if (*v3)
    {
      LODWORD(v6) = *(_DWORD *)(v6 - 12);
      if (v6 > 0x7FFFFFFE) {
        LODWORD(v6) = 0x7FFFFFFF;
      }
    }
    *((_DWORD *)v3 + 3) = 2 * v6;
  }
  uint64_t v7 = a2[1];
  if (v7 && *(void *)(v7 + 8))
  {
    uint64_t v9 = a2[1];
    unint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v3, &v9);
    if (*v3)
    {
      uint64_t v8 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
      if ((uint64_t *)v8 == result) {
        return result;
      }
    }
    else
    {
      if (!result) {
        return result;
      }
      uint64_t v8 = 0;
    }
    if ((uint64_t *)v8 != result) {
      return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v3, (unsigned int **)result);
    }
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::Translate>(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 892;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  long long v13 = v6;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v6, *a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v6, a2[1]);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  long long v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::Rotate>(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 869;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  long long v13 = v6;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  long long v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::Scale>(uint64_t a1, float **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 871;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  long long v13 = v6;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  long long v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::SetInlineFillColor>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 873;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  long long v13 = v6;
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v6, **a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  long long v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::SetInlineStroke>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 874;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  long long v13 = v6;
  IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  long long v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::SetLineDash>(uint64_t a1, const void ***a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 876;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v14 = v6;
  uint64_t v7 = *a2;
  IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v6, **a2, *((unsigned int *)*a2 + 3));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v6, *((float *)v7 + 4));
  uint64_t v9 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v14, 1, 0);
  unsigned int v10 = v14;
  uint64_t v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::Clip>(uint64_t a1, float **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 825;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  long long v13 = v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  long long v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::ClipRoundedRect>(uint64_t a1, float **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 830;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  long long v13 = v6;
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  long long v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::ClipOut>(uint64_t a1, float **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 826;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  long long v13 = v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  long long v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::ClipOutRoundedRect>(uint64_t a1, float **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 827;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  long long v13 = v6;
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  long long v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawFilteredImageBuffer>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 838;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  long long v13 = v6;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(v6, *(void *)a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, *(float **)(a2 + 8));
  IPC::ArgumentCoder<WebCore::Filter,void>::encode(v6, **(void **)(a2 + 16));
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  long long v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawImageBuffer>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 842;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unsigned int v10 = v6;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::ImagePaintingOptions const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::ImagePaintingOptions const&>,0ul,1ul,2ul,3ul>(v6, a2);
  uint64_t v7 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 1, 0);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v10, v8);
  return v7;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::ImagePaintingOptions const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::ImagePaintingOptions const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, *(float **)(a2 + 8));
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, *(float **)(a2 + 16));
  unsigned int v4 = *(unsigned char **)(a2 + 24);

  return IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::encode(a1, v4);
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteDisplayListRecorder::DrawPattern,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  uint64_t v9 = IPC::StreamClientConnection::trySendDestinationIDIfNeeded((void *)a1, a3, v7);
  if (v9) {
    return v9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v13, v7);
  if (!v15) {
    return 15;
  }
  uint64_t result = IPC::StreamClientConnection::trySendStream<Messages::RemoteDisplayListRecorder::DrawPattern>(a1, v13, v14, a2);
  if (result) {
    return 0;
  }
  if (v15)
  {
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage(a1, v13, v14);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, (uint64_t **)(a1 + 8));
    uint64_t v11 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawPattern>((uint64_t)v12, a2, a3);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v12);
    return v11;
  }
  __break(1u);
  return result;
}

BOOL IPC::StreamClientConnection::trySendStream<Messages::RemoteDisplayListRecorder::DrawPattern>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v16 = a2;
  unint64_t v17 = a3;
  unint64_t v18 = 0;
  unint64_t v5 = (a2 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v6 = v5 >= a2;
  unint64_t v7 = v5 - a2;
  if (v6)
  {
    if (v7 > 0xFFFFFFFFFFFFFFFDLL || v7 + 2 > a3)
    {
      unint64_t v17 = 0;
    }
    else
    {
      *(_WORD *)(a2 + v7) = 847;
      unint64_t v18 = v7 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::AffineTransform const&,WebCore::FloatPoint const&,WebCore::FloatSize const&,WebCore::ImagePaintingOptions const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::AffineTransform const&,WebCore::FloatPoint const&,WebCore::FloatSize const&,WebCore::ImagePaintingOptions const&>,0ul,1ul,2ul,3ul,4ul,5ul,6ul>((uint64_t *)&v16, a4);
  unint64_t v9 = v17;
  if (v17)
  {
    uint64_t v10 = v18;
    uint64_t v11 = *(void *)(a1 + 72);
    unint64_t v12 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v12 + 16 >= v13) {
      unint64_t v12 = 0;
    }
    if (v18 <= 0x10) {
      uint64_t v10 = 16;
    }
    unint64_t v14 = v12 + v10;
    if (v13 <= v14) {
      unint64_t v14 = 0;
    }
    *(void *)(a1 + 80) = v14;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v11 + 16) + 128), v14) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
  }
  return v9 != 0;
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::AffineTransform const&,WebCore::FloatPoint const&,WebCore::FloatSize const&,WebCore::ImagePaintingOptions const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::AffineTransform const&,WebCore::FloatPoint const&,WebCore::FloatSize const&,WebCore::ImagePaintingOptions const&>,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(uint64_t *a1, uint64_t a2)
{
  IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(a1, *(void **)a2);
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, *(_DWORD **)(a2 + 8));
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, *(_DWORD **)(a2 + 16));
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(a1, *(void **)(a2 + 24));
  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, *(_DWORD **)(a2 + 32));
  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, *(_DWORD **)(a2 + 40));
  unsigned int v4 = *(unsigned char **)(a2 + 48);

  return IPC::StreamConnectionEncoder::operator<<<WebCore::ImagePaintingOptions>(a1, v4);
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawPattern>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v6 = 847;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, *(float **)(a2 + 8));
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, *(float **)(a2 + 16));
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(v6, *(double **)(a2 + 24));
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v6, *(float **)(a2 + 32));
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v6, *(float **)(a2 + 40));
  IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::encode(v6, *(unsigned char **)(a2 + 48));
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  unint64_t v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::BeginTransparencyLayer>(uint64_t a1, float *a2, uint64_t a3)
{
  BOOL v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v6 = 821;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  unint64_t v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::EndTransparencyLayer>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v4 = 851;
  *((void *)v4 + 1) = a2;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  uint64_t v6 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 1, 0);
  unint64_t v7 = v11;
  uint64_t v11 = 0;
  if (v7)
  {
    IPC::Encoder::~Encoder(v7, v5);
    WTF::fastFree(v9, v10);
  }
  return v6;
}

uint64_t *IPC::ArgumentCoder<std::tuple<WebCore::FloatRect const&,float>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<WebCore::FloatRect const&,float>,0ul,1ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, *(_DWORD **)a2);
  uint64_t v5 = a1[2];
  unint64_t v6 = *a1 + v5;
  unint64_t v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v10 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v10) = *(_DWORD *)(a2 + 8);
      a1[2] = v11;
    }
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawRect>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v6 = 848;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, *(float **)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v6, *(float *)(a2 + 8));
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  unint64_t v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawLinesForText>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v6 = 844;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLinesForText,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  unint64_t v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawFocusRingRects>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v6 = 840;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v10 = v6;
  IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,float,float,WebCore::Color const&>,void>::encode<IPC::Encoder,std::tuple<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,float,float,WebCore::Color const&>,0ul,1ul,2ul,3ul>(v6, a2);
  uint64_t v7 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 1, 0);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v10, v8);
  return v7;
}

unsigned char *IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,float,float,WebCore::Color const&>,void>::encode<IPC::Encoder,std::tuple<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,float,float,WebCore::Color const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, *(void *)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 8));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 12));
  unsigned int v4 = *(WebCore::Color **)(a2 + 16);

  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, v4);
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillRect>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v6 = 861;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v10 = v6;
  IPC::ArgumentCoder<std::tuple<WebCore::FloatRect const&,WebCore::GraphicsContext::RequiresClipToRect const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::FloatRect const&,WebCore::GraphicsContext::RequiresClipToRect const&>,0ul,1ul>(v6, a2);
  uint64_t v7 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 1, 0);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v10, v8);
  return v7;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::FloatRect const&,WebCore::GraphicsContext::RequiresClipToRect const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::FloatRect const&,WebCore::GraphicsContext::RequiresClipToRect const&>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, *(float **)a2);
  char v5 = **(unsigned char **)(a2 + 8);
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillRectWithColor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v6 = 862;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, *(float **)a2);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(v6, *(WebCore::Color **)(a2 + 8));
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  unint64_t v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillRectWithGradient>(uint64_t a1, float **a2, uint64_t a3)
{
  unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v6 = 863;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v14 = v6;
  uint64_t v7 = *a2;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, *a2);
  IPC::ArgumentCoder<WebCore::Gradient,void>::encode(v6, *((void *)v7 + 2));
  uint64_t v9 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v14, 1, 0);
  unint64_t v10 = v14;
  unint64_t v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillCompositedRect>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v6 = 855;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v10 = v6;
  IPC::ArgumentCoder<std::tuple<WebCore::FloatRect const&,WebCore::Color const&,WebCore::CompositeOperator,WebCore::BlendMode>,void>::encode<IPC::Encoder,std::tuple<WebCore::FloatRect const&,WebCore::Color const&,WebCore::CompositeOperator,WebCore::BlendMode>,0ul,1ul,2ul,3ul>(v6, a2);
  uint64_t v7 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 1, 0);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v10, v8);
  return v7;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::FloatRect const&,WebCore::Color const&,WebCore::CompositeOperator,WebCore::BlendMode>,void>::encode<IPC::Encoder,std::tuple<WebCore::FloatRect const&,WebCore::Color const&,WebCore::CompositeOperator,WebCore::BlendMode>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, *(float **)a2);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, *(WebCore::Color **)(a2 + 8));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 16));
  char v4 = *(unsigned char *)(a2 + 17);

  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillRectWithRoundedHole>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v6 = 865;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, *(float **)a2);
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(v6, *(float **)(a2 + 8));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(v6, *(WebCore::Color **)(a2 + 16));
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillLine>(uint64_t a1, float **a2, uint64_t a3)
{
  unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v6 = 857;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillArc>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v6 = 852;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v10 = v6;
  IPC::ArgumentCoder<WebCore::PathArc,void>::encode(v6, *a2);
  uint64_t v7 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 1, 0);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v10, v8);
  return v7;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillPathSegment>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v6 = 859;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WebCore::PathSegment,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillEllipse>(uint64_t a1, float **a2, uint64_t a3)
{
  unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v6 = 856;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

WebKit::RemoteRenderingBackendProxy *WTF::Detail::CallableWrapper<WebKit::RemoteDisplayListRecorderProxy::recordDrawVideoFrame(WebCore::VideoFrame &,WebCore::FloatRect const&,WebCore::ImageOrientation,BOOL)::$_0,void,IPC::Semaphore &>::call(WebKit::RemoteRenderingBackendProxy *result, IPC::Semaphore *a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  int v2 = (void *)*((void *)result + 1);
  uint64_t v3 = v2[481];
  if (!v3) {
    return result;
  }
  uint64_t result = *(WebKit::RemoteRenderingBackendProxy **)(v3 + 8);
  if (!result) {
    return result;
  }
  uint64_t result = (WebKit::RemoteRenderingBackendProxy *)WebKit::RemoteRenderingBackendProxy::connection(result, (atomic_uint **)&v59);
  if (!v59) {
    return result;
  }
  uint64_t v5 = v2[479];
  char v6 = 1;
  if (!v5)
  {
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  char v57 = 0;
  uint64_t v7 = v2[480];
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v57, 1u, memory_order_acquire, memory_order_acquire);
  if (v57) {
    uint64_t result = (WebKit::RemoteRenderingBackendProxy *)MEMORY[0x19972E8D0](v5);
  }
  if (*(void *)(v5 + 24)) {
    ++*(void *)(v5 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  int v58 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v58, 0, memory_order_release, memory_order_relaxed);
  if (v58 == 1)
  {
    if (!v7) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t result = (WebKit::RemoteRenderingBackendProxy *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (!*(unsigned char *)(v7 + 4016))
  {
    *(unsigned char *)(v7 + 4016) = 1;
    uint64_t result = (WebKit::RemoteRenderingBackendProxy *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v7);
    if (result) {
      uint64_t result = (WebKit::RemoteRenderingBackendProxy *)(*(uint64_t (**)(WebKit::RemoteRenderingBackendProxy *))(*(void *)result + 160))(result);
    }
  }
  char v6 = 0;
LABEL_6:
  uint64_t v8 = v59;
  uint64_t v9 = v2[478];
  double v10 = *((double *)v59 + 15);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v11 = v10 + v12;
  }
  if (*((void *)v8 + 7) != v9)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, buf, v11);
    if (buf[16])
    {
      uint64_t v27 = *(void *)buf;
      unint64_t v28 = *(void *)&buf[8];
      unint64_t v29 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v30 = v29 - *(void *)buf;
      if (v29 < *(void *)buf)
      {
        unint64_t v32 = 0;
        unint64_t v31 = *(void *)&buf[8];
      }
      else
      {
        unint64_t v31 = 0;
        if (v30 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v32 = 0;
        }
        else
        {
          unint64_t v32 = 0;
          if (v30 + 2 <= *(void *)&buf[8])
          {
            *(_WORD *)(*(void *)buf + v30) = 2871;
            unint64_t v31 = v28;
            unint64_t v32 = v30 + 2;
          }
        }
      }
      unint64_t v33 = (void *)((v27 + v32 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v33 >= v27 + v32)
      {
        unint64_t v34 = (char *)v33 - v27;
        if ((unint64_t)v33 - v27 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_47;
        }
        unint64_t v32 = (unint64_t)(v34 + 8);
        if ((unint64_t)(v34 + 8) > v31) {
          goto LABEL_47;
        }
        *unint64_t v33 = v9;
      }
      if (v31)
      {
        unint64_t v35 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v36 = *((void *)v8 + 8);
        if (v35 + 16 >= v36) {
          unint64_t v35 = 0;
        }
        if (v32 <= 0x10) {
          unint64_t v32 = 16;
        }
        unint64_t v37 = v35 + v32;
        if (v36 <= v37) {
          unint64_t v38 = 0;
        }
        else {
          unint64_t v38 = v37;
        }
        *((void *)v8 + 10) = v38;
        unint64_t v39 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v38);
        int v40 = *((_DWORD *)v8 + 29);
        if (v39 == 0x80000000 || v40 != 0)
        {
          unsigned int v53 = v40 + 1;
          *((_DWORD *)v8 + 29) = v53;
          if (v53 >= *((_DWORD *)v8 + 28))
          {
            if (*((unsigned char *)v8 + 104)) {
              MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
            }
            *((_DWORD *)v8 + 29) = 0;
          }
        }
        *((void *)v8 + 7) = v9;
        goto LABEL_9;
      }
    }
LABEL_47:
    uint64_t v42 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v43 = IPC::errorAsString();
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_SetSharedVideoFrameSemaphore";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v43;
      _os_log_impl(&dword_1985F2000, v42, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v44 = v2[481];
    if (v44)
    {
      uint64_t v45 = *(unsigned char **)(v44 + 8);
      if (v45) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v45);
      }
    }
    goto LABEL_52;
  }
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, buf, v11);
  if (!buf[16]) {
    goto LABEL_47;
  }
  unint64_t v13 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v14 = v13 - *(void *)buf;
  if (v13 < *(void *)buf)
  {
    unint64_t v15 = 0;
  }
  else
  {
    unint64_t v15 = 0;
    if (v14 <= 0xFFFFFFFFFFFFFFFDLL && v14 + 2 <= *(void *)&buf[8])
    {
      *(_WORD *)(*(void *)buf + v14) = 2870;
      unint64_t v15 = v14 + 2;
    }
  }
  unint64_t v16 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = *((void *)v8 + 8);
  if (v16 + 16 >= v17) {
    unint64_t v16 = 0;
  }
  if (v15 <= 0x10) {
    unint64_t v15 = 16;
  }
  unint64_t v18 = v16 + v15;
  if (v17 <= v18) {
    unint64_t v18 = 0;
  }
  *((void *)v8 + 10) = v18;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v18);
  *((_DWORD *)v8 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v60, (uint64_t **)v8 + 1);
  uint64_t v19 = v60;
  uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v20 = 880;
  *((void *)v20 + 1) = v9;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 68) = 0;
  *((void *)v20 + 70) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  unint64_t v61 = v20;
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode((uint64_t)v20, a2);
  int v22 = IPC::Connection::sendMessageImpl((uint64_t)v19, (uint64_t *)&v61, 1, 0);
  uint64_t v23 = v61;
  unint64_t v61 = 0;
  if (v23)
  {
    IPC::Encoder::~Encoder(v23, v21);
    WTF::fastFree(v25, v26);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v60);
  if (v22) {
    goto LABEL_47;
  }
LABEL_52:
  if ((v6 & 1) == 0)
  {
    char v46 = 0;
    uint64_t v47 = *(void *)(v7 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v47, (unsigned __int8 *)&v46, 1u, memory_order_acquire, memory_order_acquire);
    if (v46) {
      MEMORY[0x19972E8D0](v47);
    }
    uint64_t v48 = *(void *)(v47 + 8);
    int v49 = 1;
    uint64_t v50 = v48 - 1;
    *(void *)(v47 + 8) = v48 - 1;
    if (v48 == 1)
    {
      uint64_t v56 = *(void *)(v47 + 16);
      uint64_t v51 = *(void *)(v47 + 24);
      *(void *)(v47 + 24) = 0;
      BOOL v52 = v56 != 0;
    }
    else
    {
      uint64_t v51 = 0;
      BOOL v52 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v47, (unsigned __int8 *)&v49, 0, memory_order_release, memory_order_relaxed);
    if (v49 == 1)
    {
      if (!v50)
      {
LABEL_59:
        if (v51) {
          (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
        }
        if (!v52) {
          WTF::fastFree((WTF *)v47, v24);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v47);
      if (!v50) {
        goto LABEL_59;
      }
    }
  }
  uint64_t result = v59;
  uint64_t v59 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection(result, v24);
      return (WebKit::RemoteRenderingBackendProxy *)WTF::fastFree(v54, v55);
    }
  }
  return result;
}

WebKit::RemoteRenderingBackendProxy *WTF::Detail::CallableWrapper<WebKit::RemoteDisplayListRecorderProxy::recordDrawVideoFrame(WebCore::VideoFrame &,WebCore::FloatRect const&,WebCore::ImageOrientation,BOOL)::$_1,void,WebCore::SharedMemoryHandle &&>::call(WebKit::RemoteRenderingBackendProxy *result, unint64_t a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  int v2 = (void *)*((void *)result + 1);
  uint64_t v3 = v2[481];
  if (!v3) {
    return result;
  }
  uint64_t result = *(WebKit::RemoteRenderingBackendProxy **)(v3 + 8);
  if (!result) {
    return result;
  }
  uint64_t result = (WebKit::RemoteRenderingBackendProxy *)WebKit::RemoteRenderingBackendProxy::connection(result, (atomic_uint **)&v59);
  if (!v59) {
    return result;
  }
  uint64_t v5 = v2[479];
  char v6 = 1;
  if (!v5)
  {
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  char v57 = 0;
  uint64_t v7 = v2[480];
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v57, 1u, memory_order_acquire, memory_order_acquire);
  if (v57) {
    uint64_t result = (WebKit::RemoteRenderingBackendProxy *)MEMORY[0x19972E8D0](v5);
  }
  if (*(void *)(v5 + 24)) {
    ++*(void *)(v5 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  int v58 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v58, 0, memory_order_release, memory_order_relaxed);
  if (v58 == 1)
  {
    if (!v7) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t result = (WebKit::RemoteRenderingBackendProxy *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (!*(unsigned char *)(v7 + 4016))
  {
    *(unsigned char *)(v7 + 4016) = 1;
    uint64_t result = (WebKit::RemoteRenderingBackendProxy *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v7);
    if (result) {
      uint64_t result = (WebKit::RemoteRenderingBackendProxy *)(*(uint64_t (**)(WebKit::RemoteRenderingBackendProxy *))(*(void *)result + 160))(result);
    }
  }
  char v6 = 0;
LABEL_6:
  uint64_t v8 = v59;
  uint64_t v9 = v2[478];
  double v10 = *((double *)v59 + 15);
  double v11 = INFINITY;
  if (fabs(v10) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    double v11 = v10 + v12;
  }
  if (*((void *)v8 + 7) != v9)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, buf, v11);
    if (buf[16])
    {
      uint64_t v27 = *(void *)buf;
      unint64_t v28 = *(void *)&buf[8];
      unint64_t v29 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v30 = v29 - *(void *)buf;
      if (v29 < *(void *)buf)
      {
        unint64_t v32 = 0;
        unint64_t v31 = *(void *)&buf[8];
      }
      else
      {
        unint64_t v31 = 0;
        if (v30 > 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v32 = 0;
        }
        else
        {
          unint64_t v32 = 0;
          if (v30 + 2 <= *(void *)&buf[8])
          {
            *(_WORD *)(*(void *)buf + v30) = 2871;
            unint64_t v31 = v28;
            unint64_t v32 = v30 + 2;
          }
        }
      }
      unint64_t v33 = (void *)((v27 + v32 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v33 >= v27 + v32)
      {
        unint64_t v34 = (char *)v33 - v27;
        if ((unint64_t)v33 - v27 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_47;
        }
        unint64_t v32 = (unint64_t)(v34 + 8);
        if ((unint64_t)(v34 + 8) > v31) {
          goto LABEL_47;
        }
        *unint64_t v33 = v9;
      }
      if (v31)
      {
        unint64_t v35 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v36 = *((void *)v8 + 8);
        if (v35 + 16 >= v36) {
          unint64_t v35 = 0;
        }
        if (v32 <= 0x10) {
          unint64_t v32 = 16;
        }
        unint64_t v37 = v35 + v32;
        if (v36 <= v37) {
          unint64_t v38 = 0;
        }
        else {
          unint64_t v38 = v37;
        }
        *((void *)v8 + 10) = v38;
        unint64_t v39 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v38);
        int v40 = *((_DWORD *)v8 + 29);
        if (v39 == 0x80000000 || v40 != 0)
        {
          unsigned int v53 = v40 + 1;
          *((_DWORD *)v8 + 29) = v53;
          if (v53 >= *((_DWORD *)v8 + 28))
          {
            if (*((unsigned char *)v8 + 104)) {
              MEMORY[0x1997420B0](*((unsigned int *)v8 + 23));
            }
            *((_DWORD *)v8 + 29) = 0;
          }
        }
        *((void *)v8 + 7) = v9;
        goto LABEL_9;
      }
    }
LABEL_47:
    uint64_t v42 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v43 = IPC::errorAsString();
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_SetSharedVideoFrameMemory";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v43;
      _os_log_impl(&dword_1985F2000, v42, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v44 = v2[481];
    if (v44)
    {
      uint64_t v45 = *(unsigned char **)(v44 + 8);
      if (v45) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v45);
      }
    }
    goto LABEL_52;
  }
LABEL_9:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 64, buf, v11);
  if (!buf[16]) {
    goto LABEL_47;
  }
  unint64_t v13 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v14 = v13 - *(void *)buf;
  if (v13 < *(void *)buf)
  {
    unint64_t v15 = 0;
  }
  else
  {
    unint64_t v15 = 0;
    if (v14 <= 0xFFFFFFFFFFFFFFFDLL && v14 + 2 <= *(void *)&buf[8])
    {
      *(_WORD *)(*(void *)buf + v14) = 2870;
      unint64_t v15 = v14 + 2;
    }
  }
  unint64_t v16 = (*((void *)v8 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = *((void *)v8 + 8);
  if (v16 + 16 >= v17) {
    unint64_t v16 = 0;
  }
  if (v15 <= 0x10) {
    unint64_t v15 = 16;
  }
  unint64_t v18 = v16 + v15;
  if (v17 <= v18) {
    unint64_t v18 = 0;
  }
  *((void *)v8 + 10) = v18;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v8 + 9) + 16) + 128), v18);
  *((_DWORD *)v8 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v60, (uint64_t **)v8 + 1);
  uint64_t v19 = v60;
  uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v20 = 879;
  *((void *)v20 + 1) = v9;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 68) = 0;
  *((void *)v20 + 70) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  unint64_t v61 = v20;
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v20, a2);
  int v22 = IPC::Connection::sendMessageImpl((uint64_t)v19, (uint64_t *)&v61, 1, 0);
  uint64_t v23 = v61;
  unint64_t v61 = 0;
  if (v23)
  {
    IPC::Encoder::~Encoder(v23, v21);
    WTF::fastFree(v25, v26);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v60);
  if (v22) {
    goto LABEL_47;
  }
LABEL_52:
  if ((v6 & 1) == 0)
  {
    char v46 = 0;
    uint64_t v47 = *(void *)(v7 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v47, (unsigned __int8 *)&v46, 1u, memory_order_acquire, memory_order_acquire);
    if (v46) {
      MEMORY[0x19972E8D0](v47);
    }
    uint64_t v48 = *(void *)(v47 + 8);
    int v49 = 1;
    uint64_t v50 = v48 - 1;
    *(void *)(v47 + 8) = v48 - 1;
    if (v48 == 1)
    {
      uint64_t v56 = *(void *)(v47 + 16);
      uint64_t v51 = *(void *)(v47 + 24);
      *(void *)(v47 + 24) = 0;
      BOOL v52 = v56 != 0;
    }
    else
    {
      uint64_t v51 = 0;
      BOOL v52 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v47, (unsigned __int8 *)&v49, 0, memory_order_release, memory_order_relaxed);
    if (v49 == 1)
    {
      if (!v50)
      {
LABEL_59:
        if (v51) {
          (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
        }
        if (!v52) {
          WTF::fastFree((WTF *)v47, v24);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v47);
      if (!v50) {
        goto LABEL_59;
      }
    }
  }
  uint64_t result = v59;
  uint64_t v59 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection(result, v24);
      return (WebKit::RemoteRenderingBackendProxy *)WTF::fastFree(v54, v55);
    }
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeRect>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 891;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, *(float **)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v6, *(float *)(a2 + 8));
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeLine>(uint64_t a1, float **a2, uint64_t a3)
{
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 886;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeQuadCurve>(uint64_t a1, float **a2, uint64_t a3)
{
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 890;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  double v10 = v6;
  IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::encode(v6, *a2);
  uint64_t v7 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 1, 0);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v10, v8);
  return v7;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeBezierCurve>(uint64_t a1, float **a2, uint64_t a3)
{
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 883;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  double v10 = v6;
  IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode(v6, *a2);
  uint64_t v7 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 1, 0);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v10, v8);
  return v7;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokePathSegment>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 889;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WebCore::PathSegment,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeEllipse>(uint64_t a1, float **a2, uint64_t a3)
{
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 885;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::ClearRect>(uint64_t a1, float **a2, uint64_t a3)
{
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 824;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawControlPart>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 833;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<WebCore::ControlPart,void>::encode(v6, **(void **)a2);
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(v6, *(float **)(a2 + 8));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v6, *(float *)(a2 + 16));
  IPC::ArgumentCoder<WebCore::ControlStyle,void>::encode(v6, *(void *)(a2 + 24));
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteDisplayListRecorder::ApplyDeviceScaleFactor,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  uint64_t v9 = IPC::StreamClientConnection::trySendDestinationIDIfNeeded((void *)a1, a3, v7);
  if (v9) {
    return v9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v13, v7);
  if (!v15) {
    return 15;
  }
  uint64_t result = IPC::StreamClientConnection::trySendStream<Messages::RemoteDisplayListRecorder::ApplyDeviceScaleFactor>(a1, v13, v14, a2);
  if (result) {
    return 0;
  }
  if (v15)
  {
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage(a1, v13, v14);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, (uint64_t **)(a1 + 8));
    uint64_t v11 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::ApplyDeviceScaleFactor>((uint64_t)v12, a2, a3);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v12);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t IPC::StreamClientConnection::trySendStream<Messages::RemoteDisplayListRecorder::ApplyDeviceScaleFactor>(uint64_t a1, unint64_t a2, unint64_t a3, _DWORD *a4)
{
  unint64_t v5 = (a2 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v6 = v5 - a2;
  if (v5 >= a2)
  {
    unint64_t v7 = v6 + 2;
    if (v6 <= 0xFFFFFFFFFFFFFFFDLL && v7 <= a3)
    {
      *(_WORD *)(a2 + v6) = 818;
      goto LABEL_7;
    }
    a3 = 0;
  }
  unint64_t v7 = 0;
LABEL_7:
  uint64_t v9 = (_DWORD *)((a2 + v7 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v9 >= a2 + v7)
  {
    unint64_t v7 = (unint64_t)v9 - a2 + 4;
    if ((unint64_t)v9 - a2 > 0xFFFFFFFFFFFFFFFBLL || v7 > a3) {
      return 0;
    }
    *uint64_t v9 = *a4;
  }
  if (!a3) {
    return 0;
  }
  uint64_t v11 = *(void *)(a1 + 72);
  unint64_t v12 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v13 = *(void *)(a1 + 64);
  if (v12 + 16 >= v13) {
    unint64_t v12 = 0;
  }
  if (v7 <= 0x10) {
    unint64_t v7 = 16;
  }
  unint64_t v14 = v12 + v7;
  if (v13 <= v14) {
    unint64_t v14 = 0;
  }
  *(void *)(a1 + 80) = v14;
  if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v11 + 16) + 128), v14) == 0x80000000
    || *(_DWORD *)(a1 + 116))
  {
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    *(_DWORD *)(a1 + 116) = 0;
  }
  return 1;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::ApplyDeviceScaleFactor>(uint64_t a1, float *a2, uint64_t a3)
{
  unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v6 = 818;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v6, *a2);
  uint64_t v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  uint64_t v9 = v13;
  unint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8;
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGLProxy::initializeIPC(WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>> &&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::StreamServerConnectionHandle &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  {
    unint64_t v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v14);
  }
  uint64_t v3 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v4 = *(void *)(v2 + 80);
  char v5 = *(unsigned char *)(v2 + 65);
  uint64_t v15 = *(void *)(v2 + 57);
  char v16 = v5;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = **(void **)(a1 + 16);
  uint64_t v19 = v4;
  v17[3] = v6;
  uint64_t v18 = v7;
  uint64_t v8 = *(void *)(v3 + 32);
  v17[0] = &v19;
  v17[1] = &v15;
  v17[2] = &v18;
  IPC::Connection::send<Messages::GPUConnectionToWebProcess::CreateGraphicsContextGL>(v8, (uint64_t)v17, 0, 1, 0);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v3 + 8), v3);
  double v10 = *(atomic_uint **)(v3 + 8);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  uint64_t v11 = *(unsigned int **)(v2 + 96);
  *(void *)(v2 + 96) = v10;
  if (v11 && atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v9);
  }
  unint64_t v12 = (atomic_uint *)WebKit::GPUProcessConnection::videoFrameObjectHeapProxy((WebKit::GPUProcessConnection *)v3);
  atomic_fetch_add(v12, 1u);
  uint64_t result = *(unsigned int **)(v2 + 168);
  *(void *)(v2 + 168) = v12;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(result);
  }
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EnsureExtensionEnabled,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  uint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1003;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v47, *a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v26 = 1003;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  uint64_t v47 = v26;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v26, *a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  uint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Reshape,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  uint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1034;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v26 = 1034;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  uint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  uint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

_DWORD *IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(IPC::Encoder *a1, int *a2)
{
  int v4 = *a2;
  char v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3 || (_DWORD *v5 = v4, v7 = a2[1], result = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4), v9 <= 3))
  {
    __break(0xC471u);
    JUMPOUT(0x1990635C8);
  }
  _DWORD *result = v7;
  return result;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, uint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((IPC::Encoder **)v6 + 7) != a3)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v61, v9);
    if (!(_BYTE)v63) {
      goto LABEL_97;
    }
    unint64_t v49 = v61;
    unint64_t v48 = v62;
    unint64_t v50 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - v61;
    if (v50 >= v61)
    {
      unint64_t v52 = v51 + 2;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v62)
      {
        *(_WORD *)(v61 + v51) = 2871;
        goto LABEL_83;
      }
      unint64_t v48 = 0;
    }
    unint64_t v52 = 0;
LABEL_83:
    unint64_t v54 = (void *)((v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v54 >= v49 + v52)
    {
      unint64_t v52 = (unint64_t)v54 - v49 + 8;
      if ((unint64_t)v54 - v49 > 0xFFFFFFFFFFFFFFF7 || v52 > v48) {
        goto LABEL_107;
      }
      void *v54 = a3;
    }
    if (v48)
    {
      uint64_t v56 = *((void *)v6 + 9);
      unint64_t v57 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v58 = *((void *)v6 + 8);
      if (v57 + 16 >= v58) {
        unint64_t v57 = 0;
      }
      if (v52 <= 0x10) {
        unint64_t v52 = 16;
      }
      unint64_t v59 = v57 + v52;
      if (v58 <= v59) {
        unint64_t v59 = 0;
      }
      *((void *)v6 + 10) = v59;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v56 + 16) + 128), v59) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_107:
    char v60 = 17;
    goto LABEL_98;
  }
LABEL_4:
  uint64_t v12 = (uint64_t)v6 + 64;
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v65, v9);
  if (!v67)
  {
LABEL_97:
    char v60 = 15;
LABEL_98:
    *(unsigned char *)a4 = v60;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v14 = v65;
  unint64_t v15 = v66;
  unint64_t v16 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)v6 + 1);
  uint64_t v17 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (IPC::Connection::pushPendingSyncRequestID((uint64_t)v71, v17))
  {
    unint64_t v18 = (v14 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = v18 - v14;
    if (v18 >= v14)
    {
      unint64_t v20 = 0;
      if (v19 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v21 = 0;
      }
      else
      {
        unint64_t v21 = 0;
        if (v19 + 2 <= v15)
        {
          *(_WORD *)(v14 + v19) = 3640;
          unint64_t v20 = v15;
          unint64_t v21 = v19 + 2;
        }
      }
      goto LABEL_10;
    }
    goto LABEL_109;
  }
  LOBYTE(v73) = 11;
  uint64_t v11 = 1;
  int v75 = 1;
  LOBYTE(v61) = 0;
  int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v73);
  char v64 = 1;
  if (v75 != -1) {
    ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v75])(&v68, &v73);
  }
  while (1)
  {
LABEL_54:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
    if (v64)
    {
      *(unsigned char *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      uint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v61);
      if (v64)
      {
        if (v63 != -1) {
          return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v63])(&v73, &v61);
        }
      }
      return result;
    }
    unint64_t v21 = v67;
    if (v67) {
      break;
    }
    __break(1u);
LABEL_101:
    unint64_t v20 = 0;
    while (1)
    {
      uint64_t v27 = (void *)((v14 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v27 >= v14 + v21)
      {
        unint64_t v28 = (char *)v27 - v14;
        if ((unint64_t)v27 - v14 > 0xFFFFFFFFFFFFFFF7
          || (unint64_t v21 = (unint64_t)(v28 + 8), (unint64_t)(v28 + 8) > v20))
        {
LABEL_40:
          LOBYTE(v68) = 0;
          char v70 = 0;
          goto LABEL_44;
        }
        void *v27 = **(void **)(a2 + 8);
      }
      if (!v20) {
        goto LABEL_40;
      }
      unint64_t v29 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v30 = *((void *)v6 + 8);
      if (v29 + 16 >= v30) {
        unint64_t v29 = 0;
      }
      if (v21 <= 0x10) {
        unint64_t v21 = 16;
      }
      unint64_t v31 = v29 + v21;
      if (v30 <= v31) {
        unint64_t v31 = 0;
      }
      *((void *)v6 + 10) = v31;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v31) == 0x80000000
        || *((_DWORD *)v6 + 29))
      {
        if (*((unsigned char *)v6 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
        }
        *((_DWORD *)v6 + 29) = 0;
      }
      IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v73, v12, v9);
      if (!(_BYTE)v75)
      {
        LOBYTE(v68) = 16;
        int v69 = 1;
LABEL_43:
        char v70 = 1;
        goto LABEL_44;
      }
      WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v72, (uint64_t)&v73, (uint64_t *)v11);
      if (*((_WORD *)v72 + 25) != 2870)
      {
        unint64_t v68 = v72;
        int v69 = 0;
        goto LABEL_43;
      }
      IPC::Decoder::~Decoder(v72);
      WTF::fastFree(v32, v33);
      IPC::Connection::waitForSyncReply((uint64_t)v71, v17, 0xE38u, (uint64_t)&v73, v9);
      LOBYTE(v68) = 0;
      int v69 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, (uint64_t)&v73);
      char v70 = 1;
      if (v74 != -1) {
        ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v74])(&v72, &v73);
      }
LABEL_44:
      IPC::Connection::popPendingSyncRequestID(v71);
      if (!v70)
      {
        LOBYTE(v61) = 0;
        char v64 = 0;
        goto LABEL_54;
      }
      if (v69 == 1)
      {
        LOBYTE(v61) = (_BYTE)v68;
        int v35 = 1;
        int v63 = 1;
        char v64 = 1;
LABEL_53:
        ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v35])(&v73, &v68);
        goto LABEL_54;
      }
      if (!v69) {
        break;
      }
LABEL_108:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
      unint64_t v21 = 0;
      unint64_t v20 = v15;
LABEL_10:
      unint64_t v22 = (v14 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v23 = v22 - (v14 + v21);
      if (v22 >= v14 + v21)
      {
        unint64_t v24 = v22 - v14;
        unint64_t v25 = v23 + v21 + 8;
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v25 > v20)
        {
          unint64_t v20 = 0;
        }
        else
        {
          *(void *)(v14 + v24) = v17;
          unint64_t v21 = v25;
        }
      }
      if (v21 >= v20) {
        goto LABEL_101;
      }
      *(unsigned char *)(v14 + v21++) = *(unsigned char *)a2;
    }
    unint64_t v34 = v68;
    unint64_t v68 = 0;
    char v73 = v34;
    int v75 = 0;
    LOBYTE(v61) = 0;
    int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v73);
    char v64 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v75])(&v72, &v73);
    }
    if (v70)
    {
      int v35 = v69;
      if (v69 != -1) {
        goto LABEL_53;
      }
    }
  }
  unint64_t v36 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - v65;
  if (v36 < v65)
  {
    unint64_t v38 = 0;
  }
  else
  {
    unint64_t v38 = 0;
    if (v37 <= 0xFFFFFFFFFFFFFFFDLL && v37 + 2 <= v66)
    {
      *(_WORD *)(v65 + v37) = 2870;
      unint64_t v38 = v37 + 2;
    }
  }
  unint64_t v39 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *((void *)v6 + 8);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v38 <= 0x10) {
    unint64_t v38 = 16;
  }
  unint64_t v41 = v39 + v38;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *((void *)v6 + 10) = v41;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v41);
  *((_DWORD *)v6 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v72, v16);
  unint64_t v6 = v72;
  char v73 = 0;
  IPC::Connection::createSyncMessageEncoder(3640, (uint64_t)a3, (uint64_t *)&v73, &v68);
  a3 = v68;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v68, *(unsigned char *)a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a3, *(uint64_t **)(a2 + 8));
  IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v73, (uint64_t *)&v68, 0, (uint64_t)&v61, v9);
  uint64_t v42 = v62;
  if (v62)
  {
    if (v62 != 1) {
      goto LABEL_108;
    }
    *(unsigned char *)a4 = v61;
  }
  else
  {
    unint64_t v43 = v61;
    unint64_t v61 = 0;
    *(void *)a4 = v43;
  }
  *(_DWORD *)(a4 + 16) = v42;
  ((void (*)(IPC::Decoder ***, unint64_t *))off_1EE9E9D68[v42])(&v71, &v61);
  unint64_t v45 = v68;
  unint64_t v68 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v44);
    WTF::fastFree(v46, v47);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v72);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E9F38[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = v6 + 7;
  if (v6[7] != a3)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), v61, v9);
    if (!v61[16]) {
      goto LABEL_97;
    }
    uint64_t v48 = *(void *)v61;
    unint64_t v47 = *(void *)&v61[8];
    unint64_t v49 = (*(void *)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v50 = v49 - *(void *)v61;
    if (v49 >= *(void *)v61)
    {
      unint64_t v51 = v50 + 2;
      if (v50 <= 0xFFFFFFFFFFFFFFFDLL && v51 <= *(void *)&v61[8])
      {
        *(_WORD *)(*(void *)v61 + v50) = 2871;
        goto LABEL_83;
      }
      unint64_t v47 = 0;
    }
    unint64_t v51 = 0;
LABEL_83:
    unsigned int v53 = (void *)((v48 + v51 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v53 >= v48 + v51)
    {
      unint64_t v51 = (unint64_t)v53 - v48 + 8;
      if ((unint64_t)v53 - v48 > 0xFFFFFFFFFFFFFFF7 || v51 > v47) {
        goto LABEL_108;
      }
      void *v53 = a3;
    }
    if (v47)
    {
      uint64_t v55 = v6[9];
      unint64_t v56 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v57 = v6[8];
      if (v56 + 16 >= v57) {
        unint64_t v56 = 0;
      }
      if (v51 <= 0x10) {
        unint64_t v51 = 16;
      }
      unint64_t v58 = v56 + v51;
      if (v57 <= v58) {
        unint64_t v58 = 0;
      }
      v6[10] = v58;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v55 + 16) + 128), v58) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_108:
    char v59 = 17;
    goto LABEL_98;
  }
LABEL_4:
  uint64_t v12 = (uint64_t)(v6 + 8);
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v67, v9);
  if (!v69)
  {
LABEL_97:
    char v59 = 15;
LABEL_98:
    *(unsigned char *)a4 = v59;
    *(_DWORD *)(a4 + 72) = 1;
    return result;
  }
  unint64_t v15 = v67;
  unint64_t v14 = v68;
  unint64_t v16 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, (uint64_t **)v6 + 1);
  uint64_t v17 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (IPC::Connection::pushPendingSyncRequestID((uint64_t)v73, v17))
  {
    unint64_t v18 = (v15 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = v18 - v15;
    if (v18 < v15)
    {
      unint64_t v21 = 0;
      unint64_t v20 = v14;
    }
    else
    {
      unint64_t v20 = 0;
      if (v19 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v21 = 0;
      }
      else
      {
        unint64_t v21 = 0;
        if (v19 + 2 <= v14)
        {
          *(_WORD *)(v15 + v19) = 3705;
          unint64_t v20 = v14;
          unint64_t v21 = v19 + 2;
        }
      }
    }
    unint64_t v22 = (void *)((v15 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v22 >= v15 + v21)
    {
      unint64_t v21 = (unint64_t)v22 - v15 + 8;
      if ((unint64_t)v22 - v15 > 0xFFFFFFFFFFFFFFF7 || v21 > v20)
      {
LABEL_100:
        LOBYTE(v70) = 0;
        char v72 = 0;
        goto LABEL_37;
      }
      *unint64_t v22 = v17;
    }
    if (v21 < v20)
    {
      *(unsigned char *)(v15 + v21) = *a2;
      unint64_t v24 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v25 = v6[8];
      if (v24 + 16 < v25) {
        goto LABEL_18;
      }
      goto LABEL_105;
    }
    goto LABEL_100;
  }
  v77[0] = 11;
  int v78 = 1;
  v61[0] = 0;
  int v65 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v61, (uint64_t)v77);
  char v66 = 1;
  if (v78 != -1) {
    ((void (*)(long long *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v78])(&v74, v77);
  }
  while (1)
  {
LABEL_50:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
    if (v66)
    {
      *(unsigned char *)a4 = 0;
      *(_DWORD *)(a4 + 72) = -1;
      uint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)v61);
      if (v66)
      {
        if (v65 != -1) {
          return (atomic_uchar *volatile **)((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v65])(v77, v61);
        }
      }
      return result;
    }
    if (v69) {
      break;
    }
LABEL_101:
    __break(1u);
LABEL_102:
    v61[0] = 0;
    char v66 = 0;
  }
  unint64_t v33 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - v67;
  if (v33 < v67)
  {
    unint64_t v35 = 0;
  }
  else
  {
    unint64_t v35 = 0;
    if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v68)
    {
      *(_WORD *)(v67 + v34) = 2870;
      unint64_t v35 = v34 + 2;
    }
  }
  unint64_t v36 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v6[8];
  if (v36 + 16 >= v37) {
    unint64_t v36 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v38 = v36 + v35;
  if (v37 <= v38) {
    unint64_t v38 = 0;
  }
  v6[10] = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v38);
  *((_DWORD *)v6 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v60, v16);
  char v6 = v60;
  char v70 = 0;
  IPC::Connection::createSyncMessageEncoder(3705, a3, (uint64_t *)&v70, &v73);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v73, *a2);
  IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v70, (uint64_t *)&v73, 0, (uint64_t)&v74, v9);
  if (DWORD2(v74))
  {
    if (DWORD2(v74) == 1)
    {
      *(unsigned char *)a4 = v74;
      int v39 = 1;
      *(_DWORD *)(a4 + 72) = 1;
      goto LABEL_72;
    }
    while (1)
    {
LABEL_104:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_105:
      unint64_t v24 = 0;
LABEL_18:
      if (v21 <= 0xF) {
        unint64_t v21 = 15;
      }
      unint64_t v26 = v21 + v24;
      if (v25 > v26 + 1) {
        unint64_t v27 = v26 + 1;
      }
      else {
        unint64_t v27 = 0;
      }
      v6[10] = v27;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v27) == 0x80000000
        || *((_DWORD *)v6 + 29))
      {
        if (*((unsigned char *)v6 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
        }
        *((_DWORD *)v6 + 29) = 0;
      }
      IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)v77, v12, v9);
      if (v77[16])
      {
        WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v74, (uint64_t)v77, v11);
        if (*(_WORD *)(v74 + 50) == 2870)
        {
          IPC::Decoder::~Decoder((IPC::Decoder *)v74);
          WTF::fastFree(v28, v29);
          IPC::Connection::waitForSyncReply((uint64_t)v73, v17, 0xE79u, (uint64_t)v77, v9);
          LOBYTE(v70) = 0;
          int v71 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v70, (uint64_t)v77);
          char v72 = 1;
          if (*(_DWORD *)&v77[8] != -1) {
            ((void (*)(long long *, unsigned char *))off_1EE9E9D68[*(unsigned int *)&v77[8]])(&v74, v77);
          }
          goto LABEL_37;
        }
        char v70 = (uint64_t *)v74;
        int v71 = 0;
      }
      else
      {
        LOBYTE(v70) = 16;
        int v71 = 1;
      }
      char v72 = 1;
LABEL_37:
      IPC::Connection::popPendingSyncRequestID((IPC::Decoder **)v73);
      if (!v72) {
        goto LABEL_102;
      }
      if (v71 == 1)
      {
        v61[0] = (_BYTE)v70;
        int v32 = 1;
        int v65 = 1;
        char v66 = 1;
        goto LABEL_49;
      }
      if (!v71)
      {
        IPC::Decoder::decode<std::tuple<std::optional<WebKit::RemoteVideoFrameProxyProperties>>>((uint64_t)v77, v70);
        if (!v77[64])
        {
          v61[0] = 13;
          int v65 = 1;
          char v66 = 1;
          goto LABEL_47;
        }
        char v30 = v77[0];
        long long v74 = *(_OWORD *)&v77[1];
        long long v75 = *(_OWORD *)&v77[17];
        v76[0] = *(_OWORD *)&v77[33];
        *(_OWORD *)((char *)v76 + 15) = *(_OWORD *)&v77[48];
        if (!v72) {
          goto LABEL_101;
        }
        if (!v71)
        {
          *(_OWORD *)&v77[9] = v74;
          unint64_t v31 = v70;
          char v70 = 0;
          *(_OWORD *)&v77[25] = v75;
          *(_OWORD *)&v77[41] = v76[0];
          *(_OWORD *)&v77[56] = *(_OWORD *)((char *)v76 + 15);
          *(void *)__int16 v77 = v31;
          v77[8] = v30;
          int v78 = 0;
          v61[0] = 0;
          int v65 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v61, (uint64_t)v77);
          char v66 = 1;
          if (v78 != -1) {
            ((void (*)(uint64_t **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v78])(&v60, v77);
          }
LABEL_47:
          if (v72)
          {
            int v32 = v71;
            if (v71 != -1)
            {
LABEL_49:
              ((void (*)(unsigned char *, uint64_t **))off_1EE9E9D68[v32])(v77, &v70);
              goto LABEL_50;
            }
          }
          goto LABEL_50;
        }
      }
    }
  }
  IPC::Decoder::decode<std::tuple<std::optional<WebKit::RemoteVideoFrameProxyProperties>>>((uint64_t)v61, (uint64_t *)v74);
  if (v64)
  {
    char v41 = v61[0];
    *(_OWORD *)__int16 v77 = *(_OWORD *)&v61[1];
    *(_OWORD *)&v77[16] = v62;
    *(_OWORD *)&v77[32] = *(_OWORD *)v63;
    *(_OWORD *)&v77[47] = *(_OWORD *)&v63[15];
    int v39 = DWORD2(v74);
    if (DWORD2(v74)) {
      goto LABEL_104;
    }
    uint64_t v42 = v74;
    *(void *)&long long v74 = 0;
    long long v43 = *(_OWORD *)&v77[16];
    *(_OWORD *)(a4 + 9) = *(_OWORD *)v77;
    *(_OWORD *)(a4 + 25) = v43;
    *(_OWORD *)(a4 + 41) = *(_OWORD *)&v77[32];
    *(_OWORD *)(a4 + 56) = *(_OWORD *)&v77[47];
    *(void *)a4 = v42;
    *(unsigned char *)(a4 + 8) = v41;
    *(_DWORD *)(a4 + 72) = 0;
  }
  else
  {
    *(unsigned char *)a4 = 13;
    *(_DWORD *)(a4 + 72) = 1;
    int v39 = DWORD2(v74);
    if (DWORD2(v74) == -1) {
      goto LABEL_73;
    }
  }
LABEL_72:
  ((void (*)(unsigned char *, long long *))off_1EE9E9D68[v39])(v61, &v74);
LABEL_73:
  uint64_t v44 = v73;
  char v73 = 0;
  if (v44)
  {
    IPC::Encoder::~Encoder(v44, v40);
    WTF::fastFree(v45, v46);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v60);
}

uint64_t *IPC::Decoder::decode<std::tuple<std::optional<WebKit::RemoteVideoFrameProxyProperties>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WebKit::RemoteVideoFrameProxyProperties>>(a2, (uint64_t)v10);
  if (v11)
  {
    long long v5 = v10[1];
    *(_OWORD *)a1 = v10[0];
    *(_OWORD *)(a1 + 16) = v5;
    long long v6 = v10[3];
    *(_OWORD *)(a1 + 32) = v10[2];
    *(_OWORD *)(a1 + 48) = v6;
    *(unsigned char *)(a1 + 64) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 64) = 0;
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (uint64_t *)a2[3];
    if (result) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v7);
    }
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::optional<WebKit::RemoteVideoFrameProxyProperties>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::RemoteVideoFrameProxyProperties>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 64))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v7();
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::RemoteVideoFrameProxyProperties>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      unint64_t v15 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t result = v15;
        uint64_t v11 = *v15;
        unint64_t v10 = v15[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_12;
  }
  long long v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v10 = v3;
    uint64_t v11 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t v13 = result[3];
    if (v13)
    {
      unint64_t v14 = result;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t result = v14;
        uint64_t v4 = *v14;
        unint64_t v3 = v14[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = (uint64_t *)IPC::Decoder::decode<WebKit::RemoteVideoFrameProxyProperties>(result, (uint64_t)v16);
      char v8 = v18;
      if (v18)
      {
        long long v9 = v16[1];
        *(_OWORD *)a2 = v16[0];
        *(_OWORD *)(a2 + 16) = v9;
        *(_OWORD *)(a2 + 32) = v16[2];
        *(void *)(a2 + 48) = v17;
        char v8 = 1;
        *(unsigned char *)(a2 + 56) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 56) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 64) = v8;
    return result;
  }
LABEL_13:
  uint64_t *result = 0;
  result[1] = 0;
  uint64_t result = (uint64_t *)result[3];
  if (result && v3) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 64) = 0;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 72);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 72) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 72);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E9F48[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 72) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  __n128 result = *(__n128 *)(a3 + 1);
  long long v5 = *(_OWORD *)(a3 + 3);
  long long v6 = *(_OWORD *)(a3 + 5);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 7);
  *(_OWORD *)(a2 + 40) = v6;
  *(_OWORD *)(a2 + 24) = v5;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGLProxy::copyTextureFromVideoFrame(WebCore::VideoFrame &,unsigned int,unsigned int,int,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0,void,IPC::Semaphore &>::call(WTF::ApproximateTime *a1, IPC::Semaphore *a2)
{
  uint64_t v3 = (WebKit::RemoteGraphicsContextGLProxy *)*((void *)a1 + 1);
  uint64_t v4 = *((void *)v3 + 13);
  uint64_t v5 = *((void *)v3 + 10);
  double v6 = *(double *)(v4 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(v4 + 56) == v5) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v36, v7);
  if (!v38) {
    goto LABEL_20;
  }
  unint64_t v25 = v36;
  unint64_t v24 = v37;
  unint64_t v26 = (v36 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = v26 - v36;
  if (v26 < v36) {
    goto LABEL_45;
  }
  unint64_t v28 = v27 + 2;
  if (v27 > 0xFFFFFFFFFFFFFFFDLL || v28 > v37)
  {
    unint64_t v24 = 0;
LABEL_45:
    unint64_t v28 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v36 + v27) = 2871;
LABEL_29:
  char v30 = (void *)((v25 + v28 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v30 >= v25 + v28)
  {
    unint64_t v28 = (unint64_t)v30 - v25 + 8;
    if ((unint64_t)v30 - v25 > 0xFFFFFFFFFFFFFFF7 || v28 > v24) {
      goto LABEL_20;
    }
    *char v30 = v5;
  }
  if (!v24) {
    goto LABEL_20;
  }
  unint64_t v32 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = *(void *)(v4 + 64);
  if (v32 + 16 >= v33) {
    unint64_t v32 = 0;
  }
  if (v28 <= 0x10) {
    unint64_t v28 = 16;
  }
  unint64_t v34 = v32 + v28;
  if (v33 <= v34) {
    unint64_t v34 = 0;
  }
  *(void *)(v4 + 80) = v34;
  IPC::StreamClientConnection::wakeUpServerBatched(v4, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v34) == 0x80000000);
  *(void *)(v4 + 56) = v5;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v36, v7);
  if (!v38) {
    goto LABEL_20;
  }
  unint64_t v9 = (v36 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v10 = v9 - v36;
  if (v9 < v36 || ((unint64_t v11 = v10 + 2, v10 <= 0xFFFFFFFFFFFFFFFDLL) ? (v12 = v11 > v37) : (v12 = 1), v12)) {
    unint64_t v11 = 0;
  }
  else {
    *(_WORD *)(v36 + v10) = 2870;
  }
  unint64_t v13 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v14 = *(void *)(v4 + 64);
  if (v13 + 16 >= v14) {
    unint64_t v13 = 0;
  }
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v15 = v13 + v11;
  if (v14 <= v15) {
    unint64_t v15 = 0;
  }
  *(void *)(v4 + 80) = v15;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v15);
  *(_DWORD *)(v4 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v35, (uint64_t **)(v4 + 8));
  unint64_t v16 = v35;
  uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v17 = 1042;
  *((void *)v17 + 1) = v5;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  int v39 = v17;
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode((uint64_t)v17, a2);
  int v19 = IPC::Connection::sendMessageImpl((uint64_t)v16, (uint64_t *)&v39, 1, 0);
  unint64_t v20 = v39;
  int v39 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v18);
    WTF::fastFree(v22, v23);
  }
  __n128 result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v35);
  if (v19) {
LABEL_20:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
  return result;
}

atomic_uchar *volatile **WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGLProxy::copyTextureFromVideoFrame(WebCore::VideoFrame &,unsigned int,unsigned int,int,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_1,void,WebCore::SharedMemoryHandle &&>::call(WTF::ApproximateTime *a1, unint64_t a2)
{
  uint64_t v3 = (WebKit::RemoteGraphicsContextGLProxy *)*((void *)a1 + 1);
  uint64_t v4 = *((void *)v3 + 13);
  uint64_t v5 = *((void *)v3 + 10);
  double v6 = *(double *)(v4 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(v4 + 56) == v5) {
    goto LABEL_4;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v36, v7);
  if (!v38) {
    goto LABEL_20;
  }
  unint64_t v25 = v36;
  unint64_t v24 = v37;
  unint64_t v26 = (v36 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = v26 - v36;
  if (v26 < v36) {
    goto LABEL_45;
  }
  unint64_t v28 = v27 + 2;
  if (v27 > 0xFFFFFFFFFFFFFFFDLL || v28 > v37)
  {
    unint64_t v24 = 0;
LABEL_45:
    unint64_t v28 = 0;
    goto LABEL_29;
  }
  *(_WORD *)(v36 + v27) = 2871;
LABEL_29:
  char v30 = (void *)((v25 + v28 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v30 >= v25 + v28)
  {
    unint64_t v28 = (unint64_t)v30 - v25 + 8;
    if ((unint64_t)v30 - v25 > 0xFFFFFFFFFFFFFFF7 || v28 > v24) {
      goto LABEL_20;
    }
    *char v30 = v5;
  }
  if (!v24) {
    goto LABEL_20;
  }
  unint64_t v32 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = *(void *)(v4 + 64);
  if (v32 + 16 >= v33) {
    unint64_t v32 = 0;
  }
  if (v28 <= 0x10) {
    unint64_t v28 = 16;
  }
  unint64_t v34 = v32 + v28;
  if (v33 <= v34) {
    unint64_t v34 = 0;
  }
  *(void *)(v4 + 80) = v34;
  IPC::StreamClientConnection::wakeUpServerBatched(v4, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v34) == 0x80000000);
  *(void *)(v4 + 56) = v5;
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 64, &v36, v7);
  if (!v38) {
    goto LABEL_20;
  }
  unint64_t v9 = (v36 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v10 = v9 - v36;
  if (v9 < v36 || ((unint64_t v11 = v10 + 2, v10 <= 0xFFFFFFFFFFFFFFFDLL) ? (v12 = v11 > v37) : (v12 = 1), v12)) {
    unint64_t v11 = 0;
  }
  else {
    *(_WORD *)(v36 + v10) = 2870;
  }
  unint64_t v13 = (*(void *)(v4 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v14 = *(void *)(v4 + 64);
  if (v13 + 16 >= v14) {
    unint64_t v13 = 0;
  }
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  unint64_t v15 = v13 + v11;
  if (v14 <= v15) {
    unint64_t v15 = 0;
  }
  *(void *)(v4 + 80) = v15;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(v4 + 72) + 16) + 128), v15);
  *(_DWORD *)(v4 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v35, (uint64_t **)(v4 + 8));
  unint64_t v16 = v35;
  uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v17 = 1041;
  *((void *)v17 + 1) = v5;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  int v39 = v17;
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v17, a2);
  int v19 = IPC::Connection::sendMessageImpl((uint64_t)v16, (uint64_t *)&v39, 1, 0);
  unint64_t v20 = v39;
  int v39 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v18);
    WTF::fastFree(v22, v23);
  }
  __n128 result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v35);
  if (v19) {
LABEL_20:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGLProxy::videoFrameToImage(WebCore::VideoFrame &)::$_0,void>::call(uint64_t a1)
{
  WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getNativeImage(*(IPC::Semaphore ***)(*(void *)(*(void *)(a1 + 16) + 168) + 8), *(const WebCore::VideoFrame **)(a1 + 24), &v23);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = v23;
  uint64_t v23 = 0;
  uint64_t v5 = *v3;
  uint64_t *v3 = v4;
  if (v5)
  {
    char v6 = 0;
    uint64_t v7 = *(void *)(v5 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      MEMORY[0x19972E8D0](v7);
    }
    uint64_t v8 = *(void *)(v7 + 8);
    int v9 = 1;
    uint64_t v10 = v8 - 1;
    *(void *)(v7 + 8) = v8 - 1;
    if (v8 == 1)
    {
      uint64_t v21 = *(void *)(v7 + 16);
      uint64_t v11 = *(void *)(v7 + 24);
      *(void *)(v7 + 24) = 0;
      BOOL v12 = v21 != 0;
    }
    else
    {
      uint64_t v11 = 0;
      BOOL v12 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 == 1)
    {
      if (v10) {
        goto LABEL_12;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (v10) {
        goto LABEL_12;
      }
    }
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    if (!v12) {
      WTF::fastFree((WTF *)v7, v2);
    }
  }
LABEL_12:
  uint64_t v13 = v23;
  uint64_t v23 = 0;
  if (!v13) {
    return;
  }
  char v14 = 0;
  uint64_t v15 = *(void *)(v13 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v15, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
  if (v14) {
    MEMORY[0x19972E8D0](v15);
  }
  uint64_t v16 = *(void *)(v15 + 8);
  int v17 = 1;
  uint64_t v18 = v16 - 1;
  *(void *)(v15 + 8) = v16 - 1;
  if (v16 == 1)
  {
    uint64_t v22 = *(void *)(v15 + 16);
    uint64_t v19 = *(void *)(v15 + 24);
    *(void *)(v15 + 24) = 0;
    BOOL v20 = v22 != 0;
  }
  else
  {
    uint64_t v19 = 0;
    BOOL v20 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v15, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
  if (v17 == 1)
  {
    if (v18) {
      return;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (v18) {
      return;
    }
  }
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  if (!v20) {
    WTF::fastFree((WTF *)v15, v2);
  }
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::OptionSet<GCGLErrorCode>>>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      BOOL v20 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v2, v1);
        a1 = v20;
        uint64_t v10 = *v20;
        unint64_t v9 = v20[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
  }
  else
  {
    uint64_t v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      LODWORD(v5) = *v4;
      int v6 = (v5 & 0x82) == 0;
      if ((v5 & 0x82) != 0) {
        LODWORD(v5) = 0;
      }
      goto LABEL_5;
    }
    unint64_t v9 = v1;
    uint64_t v10 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v19 = a1;
    if (v9) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v10);
    }
    LODWORD(v5) = 0;
    int v6 = 0;
    a1 = v19;
  }
  else
  {
    int v6 = 0;
  }
LABEL_5:
  unsigned int v7 = v5 | (v6 << 8);
  LODWORD(v5) = 256;
  if (v7 <= 0xFF)
  {
    uint64_t v12 = *a1;
    uint64_t v13 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5)
    {
      unsigned int v17 = v7;
      uint64_t v18 = a1;
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v12);
        LODWORD(v5) = 0;
        uint64_t v14 = *v18;
        uint64_t v15 = v18[1];
        uint64_t v16 = v18[3];
        *uint64_t v18 = 0;
        v18[1] = 0;
        if (v16)
        {
          unsigned int v7 = v17;
          if (v15)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14);
            unsigned int v7 = v17;
            LODWORD(v5) = 0;
          }
        }
        else
        {
          unsigned int v7 = v17;
        }
      }
      else
      {
        LODWORD(v5) = 0;
      }
    }
  }
  if (v7 <= 0x100) {
    LOBYTE(v7) = 0;
  }
  return v5 | v7;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetErrors>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetErrors>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9948[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E9FD0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetErrorsEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetErrorsEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SimulateEventForTesting,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, char *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v22 = v46;
    unint64_t v21 = v47;
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 >= v46)
    {
      unint64_t v25 = v24 + 2;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v25 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2871;
        goto LABEL_32;
      }
      unint64_t v21 = 0;
    }
    unint64_t v25 = 0;
LABEL_32:
    unint64_t v27 = (void *)((v22 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v27 >= v22 + v25)
    {
      unint64_t v25 = (unint64_t)v27 - v22 + 8;
      if ((unint64_t)v27 - v22 > 0xFFFFFFFFFFFFFFF7 || v25 > v21) {
        return 17;
      }
      void *v27 = a3;
    }
    if (v21)
    {
      unint64_t v29 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v30 = *(void *)(a1 + 64);
      if (v29 + 16 >= v30) {
        unint64_t v29 = 0;
      }
      if (v25 <= 0x10) {
        unint64_t v25 = 16;
      }
      unint64_t v31 = v29 + v25;
      if (v30 <= v31) {
        unint64_t v31 = 0;
      }
      *(void *)(a1 + 80) = v31;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v31) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v9 = v46;
  unint64_t v10 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 < v46) {
    goto LABEL_66;
  }
  unint64_t v13 = v12 + 2;
  if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v47)
  {
LABEL_49:
    unint64_t v33 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - v46;
    if (v33 < v46)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v35 = 0;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v47)
      {
        *(_WORD *)(v46 + v34) = 2870;
        unint64_t v35 = v34 + 2;
      }
    }
    unint64_t v36 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v37 = *(void *)(a1 + 64);
    if (v36 + 16 >= v37) {
      unint64_t v36 = 0;
    }
    if (v35 <= 0x10) {
      unint64_t v35 = 16;
    }
    unint64_t v38 = v36 + v35;
    if (v37 <= v38) {
      unint64_t v38 = 0;
    }
    *(void *)(a1 + 80) = v38;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v38);
    *(_DWORD *)(a1 + 116) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
    int v39 = v45;
    unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v40 = 1044;
    *((void *)v40 + 1) = a3;
    *((void *)v40 + 66) = (char *)v40 + 16;
    *((void *)v40 + 67) = 512;
    *((void *)v40 + 68) = 0;
    *((void *)v40 + 70) = 0;
    *((void *)v40 + 69) = 0;
    IPC::Encoder::encodeHeader(v40);
    unint64_t v49 = v40;
    char v50 = *a2;
    IPC::Encoder::operator<<<BOOL>(v40, &v50);
    uint64_t v20 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v49, 1, 0);
    uint64_t v42 = v49;
    unint64_t v49 = 0;
    if (v42)
    {
      IPC::Encoder::~Encoder(v42, v41);
      WTF::fastFree(v43, v44);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  }
  else
  {
    *(_WORD *)(v46 + v12) = 1044;
    while (v13 >= v10)
    {
      if (v48) {
        goto LABEL_49;
      }
      __break(1u);
LABEL_66:
      unint64_t v13 = 0;
    }
    *(unsigned char *)(v9 + v13) = *a2;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v13 <= 0xF) {
      unint64_t v13 = 15;
    }
    unint64_t v18 = v13 + v16;
    if (v17 > v18 + 1) {
      unint64_t v19 = v18 + 1;
    }
    else {
      unint64_t v19 = 0;
    }
    *(void *)(a1 + 80) = v19;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v19) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      uint64_t v20 = 0;
      *(_DWORD *)(a1 + 116) = 0;
    }
    else
    {
      return 0;
    }
  }
  return v20;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferSubDataInline>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferSubDataInline>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9968[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E9FE0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22GetBufferSubDataInlineEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  __n128 result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22GetBufferSubDataInlineEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

unint64_t IPC::Decoder::decode<std::optional<WebCore::IntSize>>(unint64_t *a1)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = *a1;
  unint64_t v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v14 = a1[3];
    if (v14)
    {
      if (v2)
      {
        (*(void (**)(unint64_t))(*(void *)v14 + 16))(v14);
        unint64_t v13 = *a1;
        unint64_t v12 = a1[1];
      }
      else
      {
        unint64_t v12 = 0;
        unint64_t v13 = 0;
      }
    }
    goto LABEL_10;
  }
  uint64_t v5 = (unsigned __int8 *)(v3 + v4);
  a1[2] = (unint64_t)(v5 + 1);
  if (!v3)
  {
    unint64_t v12 = v2;
    unint64_t v13 = 0;
LABEL_10:
    unint64_t v2 = 0;
    unint64_t v3 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v15 = a1[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        unint64_t v3 = *a1;
        unint64_t v2 = a1[1];
      }
      else
      {
        unint64_t v2 = 0;
        unint64_t v3 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v6 = *v5;
  if (v6 >= 2)
  {
LABEL_11:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v16 = a1[3];
    if (v16 && v2) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v16 + 16))(v16, v3);
    }
    goto LABEL_16;
  }
  if (!v6)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    return v9 | v10;
  }
  char v7 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  if (v8)
  {
    unint64_t v9 = (unint64_t)v7 & 0xFFFFFFFFFFFFFF00;
    uint64_t v10 = v7;
    return v9 | v10;
  }
  unint64_t v17 = *a1;
  unint64_t v18 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  unint64_t v19 = a1[3];
  if (v19 && v18) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v19 + 16))(v19, v17);
  }
LABEL_16:
  unint64_t v20 = *a1;
  unint64_t v21 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  unint64_t v22 = a1[3];
  if (v22)
  {
    if (v21) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v22 + 16))(v22, v20);
    }
    unint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  return v9 | v10;
}

unint64_t *IPC::Decoder::operator>><std::tuple<std::optional<WebCore::IntSize>,std::span<unsigned char const,18446744073709551615ul>>>(unint64_t *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = IPC::Decoder::decode<std::optional<WebCore::IntSize>>(a1);
  if ((v6 & 0xFF00000000) != 0
    && (unint64_t v7 = v5,
        int v2 = v6,
        IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)&v15),
        v16))
  {
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFF00;
    *(_OWORD *)&void v17[4] = v15;
    uint64_t v9 = v7;
    int v10 = 1;
  }
  else
  {
    unint64_t v11 = *a1;
    unint64_t v12 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v13 = a1[3];
    if (v13 && v12) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11);
    }
    uint64_t v9 = 0;
    unint64_t v8 = 0;
    int v10 = 0;
  }
  if (*(unsigned __int8 *)(a2 + 32) == v10)
  {
    if (*(unsigned char *)(a2 + 32))
    {
      *(void *)a2 = v8 | v9;
      *(unsigned char *)(a2 + 8) = v2;
      *(_OWORD *)(a2 + 16) = *(_OWORD *)&v17[4];
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    *(unsigned char *)(a2 + 32) = 0;
  }
  else
  {
    *(void *)a2 = v8 | v9;
    *(_DWORD *)(a2 + 8) = v2;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)v17;
    *(_DWORD *)(a2 + 28) = *(_DWORD *)&v17[16];
    *(unsigned char *)(a2 + 32) = 1;
  }
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ReadPixelsInline>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ReadPixelsInline>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 40);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9988[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 40) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 40);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E9FF0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 40) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16ReadPixelsInlineEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  __n128 result = *(__n128 *)(a3 + 1);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 3);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16ReadPixelsInlineEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void *IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int>,void>::encode<IPC::StreamConnectionEncoder,0ul,1ul>(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = result[2];
  unint64_t v6 = *result + v5;
  unint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v10 + 8;
    if (v10 > 0xFFFFFFFFFFFFFFF7 || v11 > result[1])
    {
      result[1] = 0;
      if (!v4) {
        return result;
      }
      goto LABEL_9;
    }
    *(void *)(*result + v10) = v4;
    result[2] = v11;
  }
  if (!v4) {
    return result;
  }
LABEL_9:
  IPC::StreamConnectionEncoder::encodeSpan<float const,18446744073709551615ul>(result, *(const void **)(a2 + 8), v4);
  unint64_t v13 = *(const void **)(a2 + 16);

  return (void *)IPC::StreamConnectionEncoder::encodeSpan<float const,18446744073709551615ul>(v3, v13, v4);
}

void *IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int>,void>::encode<IPC::Encoder,0ul,1ul>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  __n128 result = (void *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *a2);
  if (v4)
  {
    unint64_t v6 = (const void *)a2[1];
    unint64_t v7 = (void *)IPC::Encoder::grow(a1, 4uLL, 4 * v4);
    if (v8 < 4 * v4
      || (memcpy(v7, v6, 4 * v4),
          unint64_t v9 = (const void *)a2[2],
          unint64_t v10 = (void *)IPC::Encoder::grow(a1, 4uLL, 4 * v4),
          v11 < 4 * v4))
    {
      __break(0xC471u);
      JUMPOUT(0x199065CC0);
    }
    return memcpy(v10, v9, 4 * v4);
  }
  return result;
}

void *IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int,int>,void>::encode<IPC::StreamConnectionEncoder,0ul,1ul,2ul>(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = result[2];
  unint64_t v6 = *result + v5;
  unint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v10 + 8;
    if (v10 > 0xFFFFFFFFFFFFFFF7 || v11 > result[1])
    {
      result[1] = 0;
      if (!v4) {
        return result;
      }
      goto LABEL_9;
    }
    *(void *)(*result + v10) = v4;
    result[2] = v11;
  }
  if (!v4) {
    return result;
  }
LABEL_9:
  IPC::StreamConnectionEncoder::encodeSpan<float const,18446744073709551615ul>(result, *(const void **)(a2 + 8), v4);
  IPC::StreamConnectionEncoder::encodeSpan<float const,18446744073709551615ul>(v3, *(const void **)(a2 + 16), v4);
  unint64_t v13 = *(const void **)(a2 + 24);

  return (void *)IPC::StreamConnectionEncoder::encodeSpan<float const,18446744073709551615ul>(v3, v13, v4);
}

void *IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int,int>,void>::encode<IPC::Encoder,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  __n128 result = (void *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *a2);
  if (v4)
  {
    unint64_t v6 = (const void *)a2[1];
    unint64_t v7 = 4 * v4;
    BOOL v8 = (void *)IPC::Encoder::grow(a1, 4uLL, 4 * v4);
    if (v9 < 4 * v4) {
      goto LABEL_11;
    }
    memcpy(v8, v6, 4 * v4);
    unint64_t v10 = (const void *)a2[2];
    unint64_t v11 = (void *)IPC::Encoder::grow(a1, 4uLL, v7);
    if (v12 < v7)
    {
      __break(0xC471u);
      JUMPOUT(0x199065EC4);
    }
    memcpy(v11, v10, v7);
    unint64_t v13 = (const void *)a2[3];
    unint64_t v14 = (void *)IPC::Encoder::grow(a1, 4uLL, v7);
    if (v15 < v7)
    {
LABEL_11:
      __break(0xC471u);
      JUMPOUT(0x199065EA4);
    }
    return memcpy(v14, v13, v7);
  }
  return result;
}

uint64_t IPC::Connection::waitForAndDispatchImmediately<Messages::RemoteGraphicsContextGLProxy::WasCreated>(uint64_t a1, uint64_t a2, int a3, double a4)
{
  IPC::Connection::waitForMessage((atomic_uchar *volatile **)a1, 0x385u, a2, a3, (uint64_t)&v10, a4);
  int v5 = v11;
  if (!v11)
  {
    unsigned __int8 v7 = atomic_load((unsigned __int8 *)(a1 + 33));
    int v5 = v11;
    if (v7)
    {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a1, v10);
      uint64_t v6 = 0;
      int v5 = v11;
    }
    else
    {
      uint64_t v6 = 1;
    }
    if (v5 == -1) {
      return v6;
    }
    goto LABEL_8;
  }
  if (v11 == 1)
  {
    uint64_t v6 = v10;
LABEL_8:
    ((void (*)(char *, uint64_t *))off_1EE9E9D68[v5])(&v12, &v10);
    return v6;
  }
  uint64_t v9 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(void)::$_0,void>::~CallableWrapper(v9);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9EA010;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EA010;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(void)::$_0,void>::call(atomic_uchar *result)
{
  uint64_t v1 = *((void *)result + 2);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = result;
      char v4 = 0;
      uint64_t v5 = *(void *)(v2 + 24);
      int v6 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x19972E8D0](v5);
      }
      ++*(void *)(v5 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v5);
      }
      uint64_t v7 = *((void *)v3 + 1);
      uint64_t v8 = *(void *)(v2 + 32);
      int v11 = &v12;
      uint64_t v12 = v7;
      IPC::Connection::send<Messages::GPUConnectionToWebProcess::ReleaseGraphicsContextGL>(v8, &v11, 0, 1, 0);
      uint64_t v10 = *(atomic_uchar **)(v2 + 24);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(v10, v9);
    }
  }
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ActiveTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    int v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 904;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 904;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::AttachShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 905;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 905;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindAttribLocation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v62, v7);
    if (!(_BYTE)v64) {
      return 15;
    }
    unint64_t v47 = v62;
    unint64_t v46 = v63;
    unint64_t v48 = ((unint64_t)v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v49 = v48 - (void)v62;
    if (v48 >= (unint64_t)v62)
    {
      unint64_t v50 = v49 + 2;
      if (v49 <= 0xFFFFFFFFFFFFFFFDLL && v50 <= v63)
      {
        *(_WORD *)((char *)v62 + v49) = 2871;
        goto LABEL_59;
      }
      unint64_t v46 = 0;
    }
    unint64_t v50 = 0;
LABEL_59:
    unint64_t v52 = (char *)(((unint64_t)v47 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v52 >= (char *)v47 + v50)
    {
      unint64_t v50 = v52 - (char *)v47 + 8;
      if ((unint64_t)(v52 - (char *)v47) > 0xFFFFFFFFFFFFFFF7 || v50 > v46) {
        return 17;
      }
      *(void *)unint64_t v52 = a3;
    }
    if (v46)
    {
      unint64_t v54 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v55 = *(void *)(a1 + 64);
      if (v54 + 16 >= v55) {
        unint64_t v54 = 0;
      }
      if (v50 <= 0x10) {
        unint64_t v50 = 16;
      }
      unint64_t v56 = v54 + v50;
      if (v55 <= v56) {
        unint64_t v56 = 0;
      }
      *(void *)(a1 + 80) = v56;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v56) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v59, v7);
  if (!v61) {
    return 15;
  }
  unint64_t v9 = v59;
  unint64_t v10 = v60;
  long long v62 = v59;
  unint64_t v63 = v60;
  unint64_t v64 = 0;
  unint64_t v11 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v59;
  if (v11 < (unint64_t)v59)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v60)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v63 = 0;
    }
    else
    {
      *(_WORD *)((char *)v59 + v12) = 909;
      unint64_t v64 = v12 + 2;
    }
  }
  unint64_t v15 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - ((void)v9 + v13);
  if (v15 >= (unint64_t)v9 + v13)
  {
    unint64_t v17 = v15 - (void)v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v63 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v17) = *(_DWORD *)a2;
      unint64_t v64 = v18;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v20 >= (char *)v9 + v13)
  {
    if ((unint64_t)(v20 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || v20 - (char *)v9 + 4 > v10)
    {
      unint64_t v63 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v20 = *((_DWORD *)a2 + 1);
      unint64_t v64 = v20 - (char *)v9 + 4;
    }
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v62, a2[1]);
  if (v63)
  {
    uint64_t v22 = v64;
    uint64_t v23 = *(void *)(a1 + 72);
    unint64_t v24 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v25 = *(void *)(a1 + 64);
    if (v24 + 16 >= v25) {
      unint64_t v24 = 0;
    }
    if (v64 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v26 = v24 + v22;
    if (v25 <= v26) {
      unint64_t v26 = 0;
    }
    *(void *)(a1 + 80) = v26;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v23 + 16) + 128), v26) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  if (!v61)
  {
    __break(1u);
    goto LABEL_79;
  }
  unint64_t v28 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v29 = v28 - (void)v59;
  if (v28 < (unint64_t)v59)
  {
    unint64_t v30 = 0;
  }
  else
  {
    unint64_t v30 = 0;
    if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v29 + 2 <= v60)
    {
      *(_WORD *)((char *)v59 + v29) = 2870;
      unint64_t v30 = v29 + 2;
    }
  }
  unint64_t v31 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = *(void *)(a1 + 64);
  if (v31 + 16 >= v32) {
    unint64_t v31 = 0;
  }
  if (v30 <= 0x10) {
    unint64_t v30 = 16;
  }
  unint64_t v33 = v31 + v30;
  if (v32 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(a1 + 80) = v33;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v33);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(a1 + 8));
  unint64_t v34 = v58;
  unint64_t v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v35 = 909;
  *((void *)v35 + 1) = a3;
  *((void *)v35 + 66) = (char *)v35 + 16;
  *((void *)v35 + 67) = 512;
  *((void *)v35 + 68) = 0;
  *((void *)v35 + 70) = 0;
  *((void *)v35 + 69) = 0;
  IPC::Encoder::encodeHeader(v35);
  long long v62 = v35;
  int v36 = *(_DWORD *)a2;
  unint64_t v37 = (_DWORD *)IPC::Encoder::grow(v35, 4uLL, 4);
  if (v38 <= 3)
  {
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x199066CC0);
  }
  *unint64_t v37 = v36;
  int v39 = *((_DWORD *)a2 + 1);
  unint64_t v40 = (_DWORD *)IPC::Encoder::grow(v35, 4uLL, 4);
  if (v41 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199066CE0);
  }
  _DWORD *v40 = v39;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v35, a2[1]);
  uint64_t v27 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v62, 1, 0);
  unint64_t v43 = v62;
  long long v62 = 0;
  if (v43)
  {
    IPC::Encoder::~Encoder(v43, v42);
    WTF::fastFree(v44, v45);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v58);
  return v27;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 910;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 910;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 913;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 913;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 914;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 914;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 916;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 916;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendColor,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 919;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::PathDataLine,void>::encode((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 919;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendEquation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 920;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  uint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 920;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendEquationSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 921;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 921;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendFunc,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 924;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 924;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendFuncSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 925;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 925;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t *IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    unint64_t v13 = v11 - v2;
    unint64_t v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      uint64_t v2 = *result;
      unint64_t v3 = v14;
    }
  }
  unint64_t v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    unint64_t v18 = v16 - v2;
    unint64_t v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = a2[2];
      result[2] = v19;
      uint64_t v2 = *result;
      unint64_t v3 = v19;
    }
  }
  unint64_t v21 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v21 >= v2 + v3)
  {
    unint64_t v22 = (unint64_t)v21 - v2 + 4;
    if ((unint64_t)v21 - v2 > 0xFFFFFFFFFFFFFFFBLL || v22 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *unint64_t v21 = a2[3];
      result[2] = v22;
    }
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, int *a2)
{
  int v4 = *a2;
  unint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3) {
    goto LABEL_9;
  }
  _DWORD *v5 = v4;
  int v7 = a2[1];
  unint64_t v8 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v9 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199068E90);
  }
  *unint64_t v8 = v7;
  int v10 = a2[2];
  unint64_t v11 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v12 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199068EB0);
  }
  *unint64_t v11 = v10;
  int v13 = a2[3];
  __n128 result = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v15 <= 3)
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x199068E70);
  }
  _DWORD *result = v13;
  return result;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v61, v9);
    if (!(_BYTE)v63) {
      goto LABEL_105;
    }
    unint64_t v49 = v61;
    unint64_t v48 = v62;
    unint64_t v50 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - (void)v61;
    if (v50 >= (unint64_t)v61)
    {
      unint64_t v52 = v51 + 2;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v62)
      {
        *(_WORD *)((char *)v61 + v51) = 2871;
        goto LABEL_91;
      }
      unint64_t v48 = 0;
    }
    unint64_t v52 = 0;
LABEL_91:
    unint64_t v54 = (char *)(((unint64_t)v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v54 >= (char *)v49 + v52)
    {
      unint64_t v52 = v54 - (char *)v49 + 8;
      if ((unint64_t)(v54 - (char *)v49) > 0xFFFFFFFFFFFFFFF7 || v52 > v48) {
        goto LABEL_115;
      }
      *(void *)unint64_t v54 = a3;
    }
    if (v48)
    {
      uint64_t v56 = *((void *)v6 + 9);
      unint64_t v57 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v58 = *((void *)v6 + 8);
      if (v57 + 16 >= v58) {
        unint64_t v57 = 0;
      }
      if (v52 <= 0x10) {
        unint64_t v52 = 16;
      }
      unint64_t v59 = v57 + v52;
      if (v58 <= v59) {
        unint64_t v59 = 0;
      }
      *((void *)v6 + 10) = v59;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v56 + 16) + 128), v59) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_115:
    char v60 = 17;
    goto LABEL_106;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v65, v9);
  if (!v67)
  {
LABEL_105:
    char v60 = 15;
LABEL_106:
    *(unsigned char *)a4 = v60;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v65;
  unint64_t v14 = v66;
  unint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v71, v16))
  {
    LOBYTE(v73) = 11;
    uint64_t v11 = 1;
    int v75 = 1;
    LOBYTE(v61) = 0;
    int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v73);
    char v64 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v75])(&v68, &v73);
    }
    goto LABEL_57;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3637;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_109;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    unint64_t v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      uint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v68) = 0;
        unsigned __int8 v70 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *((void *)v6 + 8);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    *((void *)v6 + 10) = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v73, (uint64_t)v6 + 64, v9);
    if (!(_BYTE)v75)
    {
      LOBYTE(v68) = 16;
      int v69 = 1;
LABEL_41:
      unsigned __int8 v70 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v72, (uint64_t)&v73, (uint64_t *)v11);
    if (*((_WORD *)v72 + 25) != 2870)
    {
      unint64_t v68 = v72;
      int v69 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v72);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v71, v16, 0xE35u, (uint64_t)&v73, v9);
    LOBYTE(v68) = 0;
    int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, (uint64_t)&v73);
    unsigned __int8 v70 = 1;
    if (v74 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v74])(&v72, &v73);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v71);
    if (!v70)
    {
      LOBYTE(v61) = 0;
      char v64 = 0;
      goto LABEL_54;
    }
    if (v69 == 1)
    {
      char v35 = (char)v68;
LABEL_53:
      LOBYTE(v61) = v35;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_54;
    }
    if (v69) {
      goto LABEL_111;
    }
    uint64_t v33 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v68);
    if ((v33 & 0xFF00000000) == 0)
    {
      char v35 = 13;
      goto LABEL_53;
    }
    unint64_t v20 = v70;
    if (v70) {
      break;
    }
LABEL_108:
    __break(1u);
LABEL_109:
    unint64_t v19 = 0;
  }
  if (v69) {
    goto LABEL_111;
  }
  unint64_t v34 = v68;
  unint64_t v68 = 0;
  char v73 = v34;
  int v74 = v33;
  int v75 = 0;
  LOBYTE(v61) = 0;
  int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v73);
  char v64 = 1;
  if (v75 != -1) {
    ((void (*)(IPC::Decoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v75])(&v72, &v73);
  }
LABEL_54:
  if (v70 && v69 != -1) {
    ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v73, &v68);
  }
LABEL_57:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
  if (v64)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v61);
    if (v64)
    {
      if (v63 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v63])(&v73, &v61);
      }
    }
    return result;
  }
  unint64_t v20 = v67;
  if (!v67) {
    goto LABEL_108;
  }
  unint64_t v36 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - v65;
  if (v36 < v65)
  {
    unint64_t v38 = 0;
  }
  else
  {
    unint64_t v38 = 0;
    if (v37 <= 0xFFFFFFFFFFFFFFFDLL && v37 + 2 <= v66)
    {
      *(_WORD *)(v65 + v37) = 2870;
      unint64_t v38 = v37 + 2;
    }
  }
  unint64_t v39 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *((void *)v6 + 8);
  if (v39 + 16 >= v40) {
    goto LABEL_112;
  }
  while (1)
  {
    if (v38 <= 0x10) {
      unint64_t v38 = 16;
    }
    unint64_t v41 = v39 + v38;
    if (v40 <= v41) {
      unint64_t v41 = 0;
    }
    *((void *)v6 + 10) = v41;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v41);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v72, v15);
    unint64_t v6 = v72;
    char v73 = 0;
    IPC::Connection::createSyncMessageEncoder(3637, a3, (uint64_t *)&v73, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v73, (uint64_t *)&v68, 0, (uint64_t)&v61, v9);
    a2 = (int *)v62;
    if (v62)
    {
      if (v62 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v61;
        goto LABEL_77;
      }
      goto LABEL_111;
    }
    uint64_t v42 = IPC::Decoder::decode<std::tuple<float>>(v61);
    if ((v42 & 0xFF00000000) == 0) {
      break;
    }
    if (!v62)
    {
      uint64_t v44 = v61;
      char v61 = 0;
      *(void *)a4 = v44;
      *(_DWORD *)(a4 + 8) = v42;
LABEL_77:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_78:
      ((void (*)(IPC::Decoder ***, uint64_t **))off_1EE9E9D68[a2])(&v71, &v61);
      goto LABEL_79;
    }
LABEL_111:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_112:
    unint64_t v39 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v62;
  if (v62 != -1) {
    goto LABEL_78;
  }
LABEL_79:
  unint64_t v45 = v68;
  unint64_t v68 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v43);
    WTF::fastFree(v46, v47);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v72);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA028[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Clear,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 932;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  uint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 932;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearColor,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 937;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::PathDataLine,void>::encode((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 937;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearDepth,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 938;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *(_DWORD *)a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  uint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 938;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v28, *a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearStencil,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 939;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  uint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 939;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ColorMask,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v58, v7);
    if (!v60) {
      return 15;
    }
    unint64_t v21 = v58;
    unint64_t v20 = v59;
    unint64_t v22 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = v22 - v58;
    if (v22 >= v58)
    {
      unint64_t v24 = v23 + 2;
      if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v24 <= v59)
      {
        *(_WORD *)(v58 + v23) = 2871;
        goto LABEL_34;
      }
      unint64_t v20 = 0;
    }
    unint64_t v24 = 0;
LABEL_34:
    unint64_t v26 = (void *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v26 >= v21 + v24)
    {
      unint64_t v24 = (unint64_t)v26 - v21 + 8;
      if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20) {
        return 17;
      }
      void *v26 = a3;
    }
    if (v20)
    {
      unint64_t v28 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v29 = *(void *)(a1 + 64);
      if (v28 + 16 >= v29) {
        unint64_t v28 = 0;
      }
      if (v24 <= 0x10) {
        unint64_t v24 = 16;
      }
      unint64_t v30 = v28 + v24;
      if (v29 <= v30) {
        unint64_t v30 = 0;
      }
      *(void *)(a1 + 80) = v30;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v30) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v58, v7);
  if (!v60) {
    return 15;
  }
  unint64_t v9 = v58;
  unint64_t v10 = v59;
  unint64_t v11 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v58;
  if (v11 < v58)
  {
LABEL_69:
    unint64_t v13 = 0;
    goto LABEL_11;
  }
  unint64_t v13 = v12 + 2;
  if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v59)
  {
    unint64_t v10 = 0;
    goto LABEL_69;
  }
  *(_WORD *)(v58 + v12) = 941;
LABEL_11:
  if (v13 < v10)
  {
    *(unsigned char *)(v9 + v13) = *a2;
    if (v13 + 1 < v10)
    {
      *(unsigned char *)(v9 + v13 + 1) = a2[1];
      if (v13 + 2 < v10)
      {
        *(unsigned char *)(v9 + v13 + 2) = a2[2];
        if (v13 + 3 < v10)
        {
          *(unsigned char *)(v9 + v13 + 3) = a2[3];
          uint64_t v15 = *(void *)(a1 + 72);
          unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v17 = *(void *)(a1 + 64);
          if (v16 + 16 >= v17) {
            unint64_t v16 = 0;
          }
          if (v13 <= 0xC) {
            unint64_t v13 = 12;
          }
          unint64_t v18 = v13 + v16 + 4;
          if (v17 <= v18) {
            unint64_t v18 = 0;
          }
          *(void *)(a1 + 80) = v18;
          if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) != 0x80000000
            && !*(_DWORD *)(a1 + 116))
          {
            return 0;
          }
          if (*(unsigned char *)(a1 + 104)) {
            MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
          }
          uint64_t v19 = 0;
          *(_DWORD *)(a1 + 116) = 0;
          return v19;
        }
      }
    }
  }
  if (!v60)
  {
    __break(1u);
    goto LABEL_74;
  }
  unint64_t v32 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - v58;
  if (v32 < v58)
  {
    unint64_t v34 = 0;
  }
  else
  {
    unint64_t v34 = 0;
    if (v33 <= 0xFFFFFFFFFFFFFFFDLL && v33 + 2 <= v59)
    {
      *(_WORD *)(v58 + v33) = 2870;
      unint64_t v34 = v33 + 2;
    }
  }
  unint64_t v35 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = *(void *)(a1 + 64);
  if (v35 + 16 >= v36) {
    unint64_t v35 = 0;
  }
  if (v34 <= 0x10) {
    unint64_t v34 = 16;
  }
  unint64_t v37 = v35 + v34;
  if (v36 <= v37) {
    unint64_t v37 = 0;
  }
  *(void *)(a1 + 80) = v37;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v37);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(a1 + 8));
  unint64_t v38 = v57;
  unint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v39 = 941;
  *((void *)v39 + 1) = a3;
  unint64_t v40 = v39;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  char v61 = v40;
  char v41 = *a2;
  unint64_t v42 = (unsigned char *)IPC::Encoder::grow(v40, 1uLL, 1);
  if (!v43)
  {
LABEL_74:
    __break(0xC471u);
    JUMPOUT(0x19906A900);
  }
  *unint64_t v42 = v41;
  char v44 = a2[1];
  unint64_t v45 = (unsigned char *)IPC::Encoder::grow(v40, 1uLL, 1);
  if (!v46)
  {
    __break(0xC471u);
    JUMPOUT(0x19906A920);
  }
  *unint64_t v45 = v44;
  char v47 = a2[2];
  unsigned __int8 v48 = (unsigned char *)IPC::Encoder::grow(v40, 1uLL, 1);
  if (!v49)
  {
    __break(0xC471u);
    JUMPOUT(0x19906A940);
  }
  *unsigned __int8 v48 = v47;
  char v50 = a2[3];
  unint64_t v51 = (unsigned char *)IPC::Encoder::grow(v40, 1uLL, 1);
  if (!v52)
  {
    __break(0xC471u);
    JUMPOUT(0x19906A960);
  }
  *unint64_t v51 = v50;
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v61, 1, 0);
  unint64_t v54 = v61;
  char v61 = 0;
  if (v54)
  {
    IPC::Encoder::~Encoder(v54, v53);
    WTF::fastFree(v55, v56);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v57);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompileShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 943;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  uint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 943;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  uint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  uint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CopyTexImage2D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v102, v7);
    if (!v104) {
      return 15;
    }
    unint64_t v86 = v102;
    unint64_t v85 = v103;
    unint64_t v87 = (v102 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v88 = v87 - v102;
    if (v87 >= v102)
    {
      unint64_t v89 = v88 + 2;
      if (v88 <= 0xFFFFFFFFFFFFFFFDLL && v89 <= v103)
      {
        *(_WORD *)(v102 + v88) = 2871;
        goto LABEL_94;
      }
      unint64_t v85 = 0;
    }
    unint64_t v89 = 0;
LABEL_94:
    v91 = (void *)((v86 + v89 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v91 >= v86 + v89)
    {
      unint64_t v89 = (unint64_t)v91 - v86 + 8;
      if ((unint64_t)v91 - v86 > 0xFFFFFFFFFFFFFFF7 || v89 > v85) {
        return 17;
      }
      void *v91 = a3;
    }
    if (v85)
    {
      unint64_t v93 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v94 = *(void *)(a1 + 64);
      if (v93 + 16 >= v94) {
        unint64_t v93 = 0;
      }
      if (v89 <= 0x10) {
        unint64_t v89 = 16;
      }
      unint64_t v95 = v93 + v89;
      if (v94 <= v95) {
        unint64_t v95 = 0;
      }
      *(void *)(a1 + 80) = v95;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v95) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v102, v7);
  if (!v104) {
    return 15;
  }
  unint64_t v9 = v102;
  unint64_t v10 = v103;
  unint64_t v11 = (v102 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v102;
  if (v11 >= v102)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v103)
    {
      *(_WORD *)(v102 + v12) = 953;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v100 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v100 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v100 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v97 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v100)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v97 = v100;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v97 = v100;
  }
  unint64_t v32 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v32 >= v9 + v13;
  unint64_t v33 = v32 - (v9 + v13);
  if (v26)
  {
    unint64_t v98 = 0;
    unint64_t v34 = v33 + v13;
    if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= v97)
    {
      *(_DWORD *)(v9 + v34) = a2[4];
      unint64_t v98 = v97;
      unint64_t v13 = v34 + 4;
    }
  }
  else
  {
    unint64_t v98 = v97;
  }
  unint64_t v35 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v36 = v35 - (v9 + v13);
  if (v35 < v9 + v13)
  {
    unint64_t v37 = v98;
  }
  else
  {
    unint64_t v37 = 0;
    unint64_t v38 = v36 + v13;
    if (v38 <= 0xFFFFFFFFFFFFFFFBLL && v38 + 4 <= v98)
    {
      *(_DWORD *)(v9 + v38) = a2[5];
      unint64_t v37 = v98;
      unint64_t v13 = v38 + 4;
    }
  }
  unint64_t v39 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v39 >= v9 + v13;
  unint64_t v40 = v39 - (v9 + v13);
  if (v26)
  {
    unint64_t v99 = 0;
    unint64_t v41 = v40 + v13;
    if (v41 <= 0xFFFFFFFFFFFFFFFBLL && v41 + 4 <= v37)
    {
      *(_DWORD *)(v9 + v41) = a2[6];
      unint64_t v99 = v37;
      unint64_t v13 = v41 + 4;
    }
  }
  else
  {
    unint64_t v99 = v37;
  }
  unint64_t v42 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v42 >= v9 + v13)
  {
    unint64_t v43 = (char *)v42 - v9;
    if ((unint64_t)v42 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_62;
    }
    unint64_t v13 = (unint64_t)(v43 + 4);
    if ((unint64_t)(v43 + 4) > v99) {
      goto LABEL_62;
    }
    *unint64_t v42 = a2[7];
  }
  if (v99)
  {
    unint64_t v44 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v45 = *(void *)(a1 + 64);
    if (v44 + 16 >= v45) {
      unint64_t v44 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v46 = v44 + v13;
    if (v45 <= v46) {
      unint64_t v47 = 0;
    }
    else {
      unint64_t v47 = v46;
    }
    *(void *)(a1 + 80) = v47;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v47) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v48 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v48;
  }
LABEL_62:
  if (!v104)
  {
    __break(1u);
    goto LABEL_115;
  }
  unint64_t v49 = (v102 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v50 = v49 - v102;
  if (v49 < v102)
  {
    unint64_t v51 = 0;
  }
  else
  {
    unint64_t v51 = 0;
    if (v50 <= 0xFFFFFFFFFFFFFFFDLL && v50 + 2 <= v103)
    {
      *(_WORD *)(v102 + v50) = 2870;
      unint64_t v51 = v50 + 2;
    }
  }
  unint64_t v52 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v53 = *(void *)(a1 + 64);
  if (v52 + 16 >= v53) {
    unint64_t v52 = 0;
  }
  if (v51 <= 0x10) {
    unint64_t v51 = 16;
  }
  unint64_t v54 = v52 + v51;
  if (v53 <= v54) {
    unint64_t v54 = 0;
  }
  *(void *)(a1 + 80) = v54;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v54);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v101, (uint64_t **)(a1 + 8));
  unint64_t v55 = v101;
  uint64_t v56 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v56 = 953;
  *((void *)v56 + 1) = a3;
  *((void *)v56 + 66) = (char *)v56 + 16;
  *((void *)v56 + 67) = 512;
  *((void *)v56 + 68) = 0;
  *((void *)v56 + 70) = 0;
  *((void *)v56 + 69) = 0;
  IPC::Encoder::encodeHeader(v56);
  v105 = v56;
  int v57 = *a2;
  unint64_t v58 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v59 <= 3)
  {
LABEL_115:
    __break(0xC471u);
    JUMPOUT(0x19906B350);
  }
  *unint64_t v58 = v57;
  int v60 = a2[1];
  char v61 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v62 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19906B370);
  }
  _DWORD *v61 = v60;
  int v63 = a2[2];
  char v64 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v65 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19906B390);
  }
  *char v64 = v63;
  int v66 = a2[3];
  unsigned __int8 v67 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v68 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19906B3B0);
  }
  _DWORD *v67 = v66;
  int v69 = a2[4];
  unsigned __int8 v70 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v71 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19906B3D0);
  }
  *unsigned __int8 v70 = v69;
  int v72 = a2[5];
  char v73 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v74 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19906B3F0);
  }
  *char v73 = v72;
  int v75 = a2[6];
  __int16 v76 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v77 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19906B410);
  }
  *__int16 v76 = v75;
  int v78 = a2[7];
  uint64_t v79 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v80 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19906B430);
  }
  *uint64_t v79 = v78;
  uint64_t v48 = IPC::Connection::sendMessageImpl((uint64_t)v55, (uint64_t *)&v105, 1, 0);
  v82 = v105;
  v105 = 0;
  if (v82)
  {
    IPC::Encoder::~Encoder(v82, v81);
    WTF::fastFree(v83, v84);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v101);
  return v48;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CopyTexSubImage2D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v102, v7);
    if (!v104) {
      return 15;
    }
    unint64_t v86 = v102;
    unint64_t v85 = v103;
    unint64_t v87 = (v102 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v88 = v87 - v102;
    if (v87 >= v102)
    {
      unint64_t v89 = v88 + 2;
      if (v88 <= 0xFFFFFFFFFFFFFFFDLL && v89 <= v103)
      {
        *(_WORD *)(v102 + v88) = 2871;
        goto LABEL_94;
      }
      unint64_t v85 = 0;
    }
    unint64_t v89 = 0;
LABEL_94:
    v91 = (void *)((v86 + v89 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v91 >= v86 + v89)
    {
      unint64_t v89 = (unint64_t)v91 - v86 + 8;
      if ((unint64_t)v91 - v86 > 0xFFFFFFFFFFFFFFF7 || v89 > v85) {
        return 17;
      }
      void *v91 = a3;
    }
    if (v85)
    {
      unint64_t v93 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v94 = *(void *)(a1 + 64);
      if (v93 + 16 >= v94) {
        unint64_t v93 = 0;
      }
      if (v89 <= 0x10) {
        unint64_t v89 = 16;
      }
      unint64_t v95 = v93 + v89;
      if (v94 <= v95) {
        unint64_t v95 = 0;
      }
      *(void *)(a1 + 80) = v95;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v95) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v102, v7);
  if (!v104) {
    return 15;
  }
  unint64_t v9 = v102;
  unint64_t v10 = v103;
  unint64_t v11 = (v102 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v102;
  if (v11 >= v102)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v103)
    {
      *(_WORD *)(v102 + v12) = 954;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v97 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v97 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v97 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v98 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v97)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v98 = v97;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v98 = v97;
  }
  unint64_t v32 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v32 >= v9 + v13;
  unint64_t v33 = v32 - (v9 + v13);
  if (v26)
  {
    unint64_t v99 = 0;
    unint64_t v34 = v33 + v13;
    if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= v98)
    {
      *(_DWORD *)(v9 + v34) = a2[4];
      unint64_t v99 = v98;
      unint64_t v13 = v34 + 4;
    }
  }
  else
  {
    unint64_t v99 = v98;
  }
  unint64_t v35 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v36 = v35 - (v9 + v13);
  if (v35 < v9 + v13)
  {
    unint64_t v37 = v99;
  }
  else
  {
    unint64_t v37 = 0;
    unint64_t v38 = v36 + v13;
    if (v38 <= 0xFFFFFFFFFFFFFFFBLL && v38 + 4 <= v99)
    {
      *(_DWORD *)(v9 + v38) = a2[5];
      unint64_t v37 = v99;
      unint64_t v13 = v38 + 4;
    }
  }
  unint64_t v39 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v39 >= v9 + v13;
  unint64_t v40 = v39 - (v9 + v13);
  if (v26)
  {
    unint64_t v100 = 0;
    unint64_t v41 = v40 + v13;
    if (v41 <= 0xFFFFFFFFFFFFFFFBLL && v41 + 4 <= v37)
    {
      *(_DWORD *)(v9 + v41) = a2[6];
      unint64_t v100 = v37;
      unint64_t v13 = v41 + 4;
    }
  }
  else
  {
    unint64_t v100 = v37;
  }
  unint64_t v42 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v42 >= v9 + v13)
  {
    unint64_t v43 = (char *)v42 - v9;
    if ((unint64_t)v42 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_62;
    }
    unint64_t v13 = (unint64_t)(v43 + 4);
    if ((unint64_t)(v43 + 4) > v100) {
      goto LABEL_62;
    }
    *unint64_t v42 = a2[7];
  }
  if (v100)
  {
    unint64_t v44 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v45 = *(void *)(a1 + 64);
    if (v44 + 16 >= v45) {
      unint64_t v44 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v46 = v44 + v13;
    if (v45 <= v46) {
      unint64_t v47 = 0;
    }
    else {
      unint64_t v47 = v46;
    }
    *(void *)(a1 + 80) = v47;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v47) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v48 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v48;
  }
LABEL_62:
  if (!v104)
  {
    __break(1u);
    goto LABEL_115;
  }
  unint64_t v49 = (v102 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v50 = v49 - v102;
  if (v49 < v102)
  {
    unint64_t v51 = 0;
  }
  else
  {
    unint64_t v51 = 0;
    if (v50 <= 0xFFFFFFFFFFFFFFFDLL && v50 + 2 <= v103)
    {
      *(_WORD *)(v102 + v50) = 2870;
      unint64_t v51 = v50 + 2;
    }
  }
  unint64_t v52 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v53 = *(void *)(a1 + 64);
  if (v52 + 16 >= v53) {
    unint64_t v52 = 0;
  }
  if (v51 <= 0x10) {
    unint64_t v51 = 16;
  }
  unint64_t v54 = v52 + v51;
  if (v53 <= v54) {
    unint64_t v54 = 0;
  }
  *(void *)(a1 + 80) = v54;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v54);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v101, (uint64_t **)(a1 + 8));
  unint64_t v55 = v101;
  uint64_t v56 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v56 = 954;
  *((void *)v56 + 1) = a3;
  *((void *)v56 + 66) = (char *)v56 + 16;
  *((void *)v56 + 67) = 512;
  *((void *)v56 + 68) = 0;
  *((void *)v56 + 70) = 0;
  *((void *)v56 + 69) = 0;
  IPC::Encoder::encodeHeader(v56);
  v105 = v56;
  int v57 = *a2;
  unint64_t v58 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v59 <= 3)
  {
LABEL_115:
    __break(0xC471u);
    JUMPOUT(0x19906BACCLL);
  }
  *unint64_t v58 = v57;
  int v60 = a2[1];
  char v61 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v62 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19906BAECLL);
  }
  _DWORD *v61 = v60;
  int v63 = a2[2];
  char v64 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v65 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19906BB0CLL);
  }
  *char v64 = v63;
  int v66 = a2[3];
  unsigned __int8 v67 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v68 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19906BB2CLL);
  }
  _DWORD *v67 = v66;
  int v69 = a2[4];
  unsigned __int8 v70 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v71 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19906BB4CLL);
  }
  *unsigned __int8 v70 = v69;
  int v72 = a2[5];
  char v73 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v74 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19906BB6CLL);
  }
  *char v73 = v72;
  int v75 = a2[6];
  __int16 v76 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v77 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19906BB8CLL);
  }
  *__int16 v76 = v75;
  int v78 = a2[7];
  uint64_t v79 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v80 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19906BBACLL);
  }
  *uint64_t v79 = v78;
  uint64_t v48 = IPC::Connection::sendMessageImpl((uint64_t)v55, (uint64_t *)&v105, 1, 0);
  v82 = v105;
  v105 = 0;
  if (v82)
  {
    IPC::Encoder::~Encoder(v82, v81);
    WTF::fastFree(v83, v84);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v101);
  return v48;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 956;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 956;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 957;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 957;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 958;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 958;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 961;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 961;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 963;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 963;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 964;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 964;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CullFace,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 967;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 967;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 968;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 968;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 970;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 970;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 971;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 971;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 974;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 974;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 976;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 976;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 978;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 978;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DepthFunc,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 981;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 981;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DepthMask,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, char *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v22 = v46;
    unint64_t v21 = v47;
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 >= v46)
    {
      unint64_t v25 = v24 + 2;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v25 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2871;
        goto LABEL_32;
      }
      unint64_t v21 = 0;
    }
    unint64_t v25 = 0;
LABEL_32:
    unint64_t v27 = (void *)((v22 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v27 >= v22 + v25)
    {
      unint64_t v25 = (unint64_t)v27 - v22 + 8;
      if ((unint64_t)v27 - v22 > 0xFFFFFFFFFFFFFFF7 || v25 > v21) {
        return 17;
      }
      void *v27 = a3;
    }
    if (v21)
    {
      unint64_t v29 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v30 = *(void *)(a1 + 64);
      if (v29 + 16 >= v30) {
        unint64_t v29 = 0;
      }
      if (v25 <= 0x10) {
        unint64_t v25 = 16;
      }
      unint64_t v31 = v29 + v25;
      if (v30 <= v31) {
        unint64_t v31 = 0;
      }
      *(void *)(a1 + 80) = v31;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v31) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v9 = v46;
  unint64_t v10 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 < v46) {
    goto LABEL_66;
  }
  unint64_t v13 = v12 + 2;
  if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v47)
  {
LABEL_49:
    unint64_t v33 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - v46;
    if (v33 < v46)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v35 = 0;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v47)
      {
        *(_WORD *)(v46 + v34) = 2870;
        unint64_t v35 = v34 + 2;
      }
    }
    unint64_t v36 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v37 = *(void *)(a1 + 64);
    if (v36 + 16 >= v37) {
      unint64_t v36 = 0;
    }
    if (v35 <= 0x10) {
      unint64_t v35 = 16;
    }
    unint64_t v38 = v36 + v35;
    if (v37 <= v38) {
      unint64_t v38 = 0;
    }
    *(void *)(a1 + 80) = v38;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v38);
    *(_DWORD *)(a1 + 116) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
    unint64_t v39 = v45;
    unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v40 = 982;
    *((void *)v40 + 1) = a3;
    *((void *)v40 + 66) = (char *)v40 + 16;
    *((void *)v40 + 67) = 512;
    *((void *)v40 + 68) = 0;
    *((void *)v40 + 70) = 0;
    *((void *)v40 + 69) = 0;
    IPC::Encoder::encodeHeader(v40);
    unint64_t v49 = v40;
    IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v40, a2);
    uint64_t v20 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v49, 1, 0);
    unint64_t v42 = v49;
    unint64_t v49 = 0;
    if (v42)
    {
      IPC::Encoder::~Encoder(v42, v41);
      WTF::fastFree(v43, v44);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  }
  else
  {
    *(_WORD *)(v46 + v12) = 982;
    while (v13 >= v10)
    {
      if (v48) {
        goto LABEL_49;
      }
      __break(1u);
LABEL_66:
      unint64_t v13 = 0;
    }
    *(unsigned char *)(v9 + v13) = *a2;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v13 <= 0xF) {
      unint64_t v13 = 15;
    }
    unint64_t v18 = v13 + v16;
    if (v17 > v18 + 1) {
      unint64_t v19 = v18 + 1;
    }
    else {
      unint64_t v19 = 0;
    }
    *(void *)(a1 + 80) = v19;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v19) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      uint64_t v20 = 0;
      *(_DWORD *)(a1 + 116) = 0;
    }
    else
    {
      return 0;
    }
  }
  return v20;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DepthRange,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 983;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)&v47, (_DWORD *)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 983;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v26, *(float *)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v26, *(float *)(a2 + 4));
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DetachShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 984;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 984;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Disable,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 985;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 985;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DisableVertexAttribArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 986;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 986;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawArrays,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v67, v7);
    if (!v69) {
      return 15;
    }
    unint64_t v55 = v67;
    unint64_t v54 = v68;
    unint64_t v56 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v57 = v56 - v67;
    if (v56 >= v67)
    {
      unint64_t v58 = v57 + 2;
      if (v57 <= 0xFFFFFFFFFFFFFFFDLL && v58 <= v68)
      {
        *(_WORD *)(v67 + v57) = 2871;
        goto LABEL_64;
      }
      unint64_t v54 = 0;
    }
    unint64_t v58 = 0;
LABEL_64:
    int v60 = (void *)((v55 + v58 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v60 >= v55 + v58)
    {
      unint64_t v58 = (unint64_t)v60 - v55 + 8;
      if ((unint64_t)v60 - v55 > 0xFFFFFFFFFFFFFFF7 || v58 > v54) {
        return 17;
      }
      void *v60 = a3;
    }
    if (v54)
    {
      unint64_t v62 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v63 = *(void *)(a1 + 64);
      if (v62 + 16 >= v63) {
        unint64_t v62 = 0;
      }
      if (v58 <= 0x10) {
        unint64_t v58 = 16;
      }
      unint64_t v64 = v62 + v58;
      if (v63 <= v64) {
        unint64_t v64 = 0;
      }
      *(void *)(a1 + 80) = v64;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v64) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v67, v7);
  if (!v69) {
    return 15;
  }
  unint64_t v9 = v67;
  unint64_t v10 = v68;
  unint64_t v11 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v67;
  if (v11 >= v67)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v68)
    {
      *(_WORD *)(v67 + v12) = 988;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v25 >= v9 + v13)
  {
    unint64_t v26 = (char *)v25 - v9;
    if ((unint64_t)v25 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_37;
    }
    unint64_t v13 = (unint64_t)(v26 + 4);
    if ((unint64_t)(v26 + 4) > v10) {
      goto LABEL_37;
    }
    _DWORD *v25 = a2[2];
  }
  if (v10)
  {
    uint64_t v27 = *(void *)(a1 + 72);
    unint64_t v28 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *(void *)(a1 + 64);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    uint64_t v30 = 16;
    if (v13 > 0x10) {
      uint64_t v30 = v13;
    }
    unint64_t v31 = v28 + v30;
    if (v29 <= v31) {
      unint64_t v31 = 0;
    }
    *(void *)(a1 + 80) = v31;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v27 + 16) + 128), v31) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v32 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v32;
  }
LABEL_37:
  if (!v69)
  {
    __break(1u);
    goto LABEL_85;
  }
  unint64_t v33 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - v67;
  if (v33 < v67)
  {
    unint64_t v35 = 0;
  }
  else
  {
    unint64_t v35 = 0;
    if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v68)
    {
      *(_WORD *)(v67 + v34) = 2870;
      unint64_t v35 = v34 + 2;
    }
  }
  unint64_t v36 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = *(void *)(a1 + 64);
  if (v36 + 16 >= v37) {
    unint64_t v36 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v38 = v36 + v35;
  if (v37 <= v38) {
    unint64_t v38 = 0;
  }
  *(void *)(a1 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v38);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v66, (uint64_t **)(a1 + 8));
  unint64_t v39 = v66;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 988;
  *((void *)v40 + 1) = a3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unsigned __int8 v70 = v40;
  int v41 = *a2;
  unint64_t v42 = (_DWORD *)IPC::Encoder::grow(v40, 4uLL, 4);
  if (v43 <= 3)
  {
LABEL_85:
    __break(0xC471u);
    JUMPOUT(0x199070440);
  }
  *unint64_t v42 = v41;
  int v44 = a2[1];
  unint64_t v45 = (_DWORD *)IPC::Encoder::grow(v40, 4uLL, 4);
  if (v46 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199070460);
  }
  *unint64_t v45 = v44;
  int v47 = a2[2];
  unsigned __int8 v48 = (_DWORD *)IPC::Encoder::grow(v40, 4uLL, 4);
  if (v49 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199070480);
  }
  *unsigned __int8 v48 = v47;
  uint64_t v32 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v70, 1, 0);
  unint64_t v51 = v70;
  unsigned __int8 v70 = 0;
  if (v51)
  {
    IPC::Encoder::~Encoder(v51, v50);
    WTF::fastFree(v52, v53);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  return v32;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawElements,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v74, v7);
    if (!v76) {
      return 15;
    }
    unint64_t v61 = v74;
    unint64_t v60 = v75;
    unint64_t v62 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v63 = v62 - v74;
    if (v62 >= v74)
    {
      unint64_t v64 = v63 + 2;
      if (v63 <= 0xFFFFFFFFFFFFFFFDLL && v64 <= v75)
      {
        *(_WORD *)(v74 + v63) = 2871;
        goto LABEL_70;
      }
      unint64_t v60 = 0;
    }
    unint64_t v64 = 0;
LABEL_70:
    int v66 = (void *)((v61 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v66 >= v61 + v64)
    {
      unint64_t v64 = (unint64_t)v66 - v61 + 8;
      if ((unint64_t)v66 - v61 > 0xFFFFFFFFFFFFFFF7 || v64 > v60) {
        return 17;
      }
      void *v66 = a3;
    }
    if (v60)
    {
      unint64_t v68 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v69 = *(void *)(a1 + 64);
      if (v68 + 16 >= v69) {
        unint64_t v68 = 0;
      }
      if (v64 <= 0x10) {
        unint64_t v64 = 16;
      }
      unint64_t v70 = v68 + v64;
      if (v69 <= v70) {
        unint64_t v70 = 0;
      }
      *(void *)(a1 + 80) = v70;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v70) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v74, v7);
  if (!v76) {
    return 15;
  }
  unint64_t v9 = v74;
  unint64_t v10 = v75;
  unint64_t v11 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v74;
  if (v11 >= v74)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v75)
    {
      *(_WORD *)(v74 + v12) = 993;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v72 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v72 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v72 = v10;
  }
  unint64_t v29 = (void *)((v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v29 >= v9 + v13)
  {
    uint64_t v30 = (char *)v29 - v9;
    if ((unint64_t)v29 - v9 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_42;
    }
    unint64_t v13 = (unint64_t)(v30 + 8);
    if ((unint64_t)(v30 + 8) > v72) {
      goto LABEL_42;
    }
    *unint64_t v29 = *((void *)a2 + 2);
  }
  if (v72)
  {
    uint64_t v31 = *(void *)(a1 + 72);
    unint64_t v32 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v33 = *(void *)(a1 + 64);
    if (v32 + 16 >= v33) {
      unint64_t v32 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v34 = v32 + v13;
    if (v33 <= v34) {
      unint64_t v34 = 0;
    }
    *(void *)(a1 + 80) = v34;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v31 + 16) + 128), v34) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v35 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v35;
  }
LABEL_42:
  if (!v76)
  {
    __break(1u);
    goto LABEL_91;
  }
  unint64_t v36 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - v74;
  if (v36 < v74)
  {
    unint64_t v38 = 0;
  }
  else
  {
    unint64_t v38 = 0;
    if (v37 <= 0xFFFFFFFFFFFFFFFDLL && v37 + 2 <= v75)
    {
      *(_WORD *)(v74 + v37) = 2870;
      unint64_t v38 = v37 + 2;
    }
  }
  unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(a1 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v38 <= 0x10) {
    unint64_t v38 = 16;
  }
  unint64_t v41 = v39 + v38;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(a1 + 80) = v41;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)(a1 + 8));
  unint64_t v42 = v73;
  unint64_t v43 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v43 = 993;
  *((void *)v43 + 1) = a3;
  *((void *)v43 + 66) = (char *)v43 + 16;
  *((void *)v43 + 67) = 512;
  *((void *)v43 + 68) = 0;
  *((void *)v43 + 70) = 0;
  *((void *)v43 + 69) = 0;
  IPC::Encoder::encodeHeader(v43);
  unint64_t v77 = v43;
  int v44 = *a2;
  unint64_t v45 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v46 <= 3)
  {
LABEL_91:
    __break(0xC471u);
    JUMPOUT(0x199070968);
  }
  *unint64_t v45 = v44;
  int v47 = a2[1];
  unsigned __int8 v48 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v49 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199070988);
  }
  *unsigned __int8 v48 = v47;
  int v50 = a2[2];
  unint64_t v51 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990709A8);
  }
  *unint64_t v51 = v50;
  uint64_t v53 = *((void *)a2 + 2);
  unint64_t v54 = (void *)IPC::Encoder::grow(v43, 8uLL, 8);
  if (v55 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1990709C8);
  }
  void *v54 = v53;
  uint64_t v35 = IPC::Connection::sendMessageImpl((uint64_t)v42, (uint64_t *)&v77, 1, 0);
  unint64_t v57 = v77;
  unint64_t v77 = 0;
  if (v57)
  {
    IPC::Encoder::~Encoder(v57, v56);
    WTF::fastFree(v58, v59);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
  return v35;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Enable,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 997;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 997;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  uint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EnableVertexAttribArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 998;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 998;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  uint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Finish,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = *(double *)(a1 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v42, v6);
    if (!v44) {
      return 15;
    }
    unint64_t v19 = v42;
    unint64_t v18 = v43;
    unint64_t v20 = (v42 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - v42;
    if (v20 >= v42)
    {
      unint64_t v22 = v21 + 2;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v22 <= v43)
      {
        *(_WORD *)(v42 + v21) = 2871;
        goto LABEL_30;
      }
      unint64_t v18 = 0;
    }
    unint64_t v22 = 0;
LABEL_30:
    unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v24 >= v19 + v22)
    {
      unint64_t v22 = (unint64_t)v24 - v19 + 8;
      if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
        return 17;
      }
      void *v24 = a3;
    }
    if (v18)
    {
      unint64_t v26 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v27 = *(void *)(a1 + 64);
      if (v26 + 16 >= v27) {
        unint64_t v26 = 0;
      }
      if (v22 <= 0x10) {
        unint64_t v22 = 16;
      }
      unint64_t v28 = v26 + v22;
      if (v27 <= v28) {
        unint64_t v28 = 0;
      }
      *(void *)(a1 + 80) = v28;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v28) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v42, v6);
  if (!v44) {
    return 15;
  }
  unint64_t v8 = v43;
  unint64_t v9 = (v42 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v10 = v9 - v42;
  if (v9 < v42)
  {
    unint64_t v11 = 0;
    if (v43) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v43)
    {
LABEL_50:
      unint64_t v30 = (v42 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v31 = v30 - v42;
      if (v30 < v42)
      {
        unint64_t v29 = 0;
      }
      else
      {
        unint64_t v29 = 0;
        if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= v43)
        {
          *(_WORD *)(v42 + v31) = 2870;
          unint64_t v29 = v31 + 2;
        }
      }
      unint64_t v32 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v8 = *(void *)(a1 + 64);
      if (v32 + 16 < v8) {
        goto LABEL_55;
      }
      goto LABEL_64;
    }
    *(_WORD *)(v42 + v10) = 1004;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(a1 + 72);
      unint64_t v14 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(a1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(a1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) != 0x80000000
        && !*(_DWORD *)(a1 + 116))
      {
        return 0;
      }
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      uint64_t v17 = 0;
      *(_DWORD *)(a1 + 116) = 0;
      return v17;
    }
  }
  unint64_t v29 = v44;
  if (v44) {
    goto LABEL_50;
  }
  __break(1u);
LABEL_64:
  unint64_t v32 = 0;
LABEL_55:
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v33 = v32 + v29;
  if (v8 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(a1 + 80) = v33;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v33);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v41, (uint64_t **)(a1 + 8));
  unint64_t v34 = v41;
  unint64_t v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v35 = 1004;
  *((void *)v35 + 1) = a3;
  *((void *)v35 + 66) = (char *)v35 + 16;
  *((void *)v35 + 67) = 512;
  *((void *)v35 + 68) = 0;
  *((void *)v35 + 70) = 0;
  *((void *)v35 + 69) = 0;
  IPC::Encoder::encodeHeader(v35);
  unint64_t v45 = v35;
  uint64_t v17 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v45, 1, 0);
  unint64_t v37 = v45;
  unint64_t v45 = 0;
  if (v37)
  {
    IPC::Encoder::~Encoder(v37, v36);
    WTF::fastFree(v39, v40);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v41);
  return v17;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Flush,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = *(double *)(a1 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v42, v6);
    if (!v44) {
      return 15;
    }
    unint64_t v19 = v42;
    unint64_t v18 = v43;
    unint64_t v20 = (v42 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - v42;
    if (v20 >= v42)
    {
      unint64_t v22 = v21 + 2;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v22 <= v43)
      {
        *(_WORD *)(v42 + v21) = 2871;
        goto LABEL_30;
      }
      unint64_t v18 = 0;
    }
    unint64_t v22 = 0;
LABEL_30:
    unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v24 >= v19 + v22)
    {
      unint64_t v22 = (unint64_t)v24 - v19 + 8;
      if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
        return 17;
      }
      void *v24 = a3;
    }
    if (v18)
    {
      unint64_t v26 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v27 = *(void *)(a1 + 64);
      if (v26 + 16 >= v27) {
        unint64_t v26 = 0;
      }
      if (v22 <= 0x10) {
        unint64_t v22 = 16;
      }
      unint64_t v28 = v26 + v22;
      if (v27 <= v28) {
        unint64_t v28 = 0;
      }
      *(void *)(a1 + 80) = v28;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v28) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v42, v6);
  if (!v44) {
    return 15;
  }
  unint64_t v8 = v43;
  unint64_t v9 = (v42 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v10 = v9 - v42;
  if (v9 < v42)
  {
    unint64_t v11 = 0;
    if (v43) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v43)
    {
LABEL_50:
      unint64_t v30 = (v42 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v31 = v30 - v42;
      if (v30 < v42)
      {
        unint64_t v29 = 0;
      }
      else
      {
        unint64_t v29 = 0;
        if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= v43)
        {
          *(_WORD *)(v42 + v31) = 2870;
          unint64_t v29 = v31 + 2;
        }
      }
      unint64_t v32 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v8 = *(void *)(a1 + 64);
      if (v32 + 16 < v8) {
        goto LABEL_55;
      }
      goto LABEL_64;
    }
    *(_WORD *)(v42 + v10) = 1005;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(a1 + 72);
      unint64_t v14 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(a1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(a1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) != 0x80000000
        && !*(_DWORD *)(a1 + 116))
      {
        return 0;
      }
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      uint64_t v17 = 0;
      *(_DWORD *)(a1 + 116) = 0;
      return v17;
    }
  }
  unint64_t v29 = v44;
  if (v44) {
    goto LABEL_50;
  }
  __break(1u);
LABEL_64:
  unint64_t v32 = 0;
LABEL_55:
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v33 = v32 + v29;
  if (v8 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(a1 + 80) = v33;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v33);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v41, (uint64_t **)(a1 + 8));
  unint64_t v34 = v41;
  unint64_t v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v35 = 1005;
  *((void *)v35 + 1) = a3;
  *((void *)v35 + 66) = (char *)v35 + 16;
  *((void *)v35 + 67) = 512;
  *((void *)v35 + 68) = 0;
  *((void *)v35 + 70) = 0;
  *((void *)v35 + 69) = 0;
  IPC::Encoder::encodeHeader(v35);
  unint64_t v45 = v35;
  uint64_t v17 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v45, 1, 0);
  unint64_t v37 = v45;
  unint64_t v45 = 0;
  if (v37)
  {
    IPC::Encoder::~Encoder(v37, v36);
    WTF::fastFree(v39, v40);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v41);
  return v17;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::FramebufferRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1006;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1006;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::FramebufferTexture2D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
    if (!v83) {
      return 15;
    }
    unint64_t v67 = v81;
    unint64_t v66 = v82;
    unint64_t v68 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v69 = v68 - v81;
    if (v68 >= v81)
    {
      unint64_t v70 = v69 + 2;
      if (v69 <= 0xFFFFFFFFFFFFFFFDLL && v70 <= v82)
      {
        *(_WORD *)(v81 + v69) = 2871;
        goto LABEL_77;
      }
      unint64_t v66 = 0;
    }
    unint64_t v70 = 0;
LABEL_77:
    unint64_t v72 = (void *)((v67 + v70 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v72 >= v67 + v70)
    {
      unint64_t v70 = (unint64_t)v72 - v67 + 8;
      if ((unint64_t)v72 - v67 > 0xFFFFFFFFFFFFFFF7 || v70 > v66) {
        return 17;
      }
      void *v72 = a3;
    }
    if (v66)
    {
      unint64_t v74 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v75 = *(void *)(a1 + 64);
      if (v74 + 16 >= v75) {
        unint64_t v74 = 0;
      }
      if (v70 <= 0x10) {
        unint64_t v70 = 16;
      }
      unint64_t v76 = v74 + v70;
      if (v75 <= v76) {
        unint64_t v76 = 0;
      }
      *(void *)(a1 + 80) = v76;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v76) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
  if (!v83) {
    return 15;
  }
  unint64_t v9 = v81;
  unint64_t v10 = v82;
  unint64_t v11 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v81;
  if (v11 >= v81)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v82)
    {
      *(_WORD *)(v81 + v12) = 1007;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v78 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v78 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v78 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v79 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v78)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v79 = v78;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v79 = v78;
  }
  unint64_t v32 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v32 >= v9 + v13)
  {
    unint64_t v33 = (char *)v32 - v9;
    if ((unint64_t)v32 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_48;
    }
    unint64_t v13 = (unint64_t)(v33 + 4);
    if ((unint64_t)(v33 + 4) > v79) {
      goto LABEL_48;
    }
    *unint64_t v32 = a2[4];
  }
  if (v79)
  {
    unint64_t v34 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = *(void *)(a1 + 64);
    if (v34 + 16 >= v35) {
      unint64_t v34 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v36 = v34 + v13;
    if (v35 <= v36) {
      unint64_t v37 = 0;
    }
    else {
      unint64_t v37 = v36;
    }
    *(void *)(a1 + 80) = v37;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v37) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v38 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v38;
  }
LABEL_48:
  if (!v83)
  {
    __break(1u);
    goto LABEL_98;
  }
  unint64_t v39 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - v81;
  if (v39 < v81)
  {
    unint64_t v41 = 0;
  }
  else
  {
    unint64_t v41 = 0;
    if (v40 <= 0xFFFFFFFFFFFFFFFDLL && v40 + 2 <= v82)
    {
      *(_WORD *)(v81 + v40) = 2870;
      unint64_t v41 = v40 + 2;
    }
  }
  unint64_t v42 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *(void *)(a1 + 64);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v44 = v42 + v41;
  if (v43 <= v44) {
    unint64_t v44 = 0;
  }
  *(void *)(a1 + 80) = v44;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v44);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v80, (uint64_t **)(a1 + 8));
  unint64_t v45 = v80;
  unsigned __int8 v46 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v46 = 1007;
  *((void *)v46 + 1) = a3;
  *((void *)v46 + 66) = (char *)v46 + 16;
  *((void *)v46 + 67) = 512;
  *((void *)v46 + 68) = 0;
  *((void *)v46 + 70) = 0;
  *((void *)v46 + 69) = 0;
  IPC::Encoder::encodeHeader(v46);
  v84 = v46;
  int v47 = *a2;
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v49 <= 3)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x199072070);
  }
  *unint64_t v48 = v47;
  int v50 = a2[1];
  unint64_t v51 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199072090);
  }
  *unint64_t v51 = v50;
  int v53 = a2[2];
  unint64_t v54 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990720B0);
  }
  _DWORD *v54 = v53;
  int v56 = a2[3];
  unint64_t v57 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v58 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990720D0);
  }
  *unint64_t v57 = v56;
  int v59 = a2[4];
  unint64_t v60 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v61 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990720F0);
  }
  _DWORD *v60 = v59;
  uint64_t v38 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v84, 1, 0);
  unint64_t v63 = v84;
  v84 = 0;
  if (v63)
  {
    IPC::Encoder::~Encoder(v63, v62);
    WTF::fastFree(v64, v65);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80);
  return v38;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::FrontFace,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 1009;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 1009;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::GenerateMipmap,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 1010;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 1010;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetActiveAttrib,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v58, v9);
    if (!(_BYTE)v60) {
      goto LABEL_97;
    }
    unint64_t v46 = v58;
    unint64_t v45 = v59;
    unint64_t v47 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v48 = v47 - v58;
    if (v47 >= v58)
    {
      unint64_t v49 = v48 + 2;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v49 <= v59)
      {
        *(_WORD *)(v58 + v48) = 2871;
        goto LABEL_83;
      }
      unint64_t v45 = 0;
    }
    unint64_t v49 = 0;
LABEL_83:
    unint64_t v51 = (void *)((v46 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v51 >= v46 + v49)
    {
      unint64_t v49 = (unint64_t)v51 - v46 + 8;
      if ((unint64_t)v51 - v46 > 0xFFFFFFFFFFFFFFF7 || v49 > v45) {
        goto LABEL_108;
      }
      *unint64_t v51 = a3;
    }
    if (v45)
    {
      uint64_t v53 = v6[9];
      unint64_t v54 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v55 = v6[8];
      if (v54 + 16 >= v55) {
        unint64_t v54 = 0;
      }
      if (v49 <= 0x10) {
        unint64_t v49 = 16;
      }
      unint64_t v56 = v54 + v49;
      if (v55 <= v56) {
        unint64_t v56 = 0;
      }
      v6[10] = v56;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v53 + 16) + 128), v56) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_108:
    char v57 = 17;
    goto LABEL_98;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v64, v9);
  if (!v66)
  {
LABEL_97:
    char v57 = 15;
LABEL_98:
    *(unsigned char *)a4 = v57;
    *(_DWORD *)(a4 + 32) = 1;
    return result;
  }
  unint64_t v13 = v64;
  unint64_t v14 = v65;
  unint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v79, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v79, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    int v78 = 1;
    LOBYTE(v58) = 0;
    int v62 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveAttrib>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveAttrib>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v58, (uint64_t)&v74);
    char v63 = 1;
    if (v78 != -1) {
      ((void (*)(uint64_t *, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v78])(&v67, &v74);
    }
    goto LABEL_51;
  }
  unint64_t v74 = v13;
  unint64_t v75 = v14;
  unint64_t v76 = 0;
  unint64_t v17 = ((unint64_t)v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - (void)v13;
  if (v17 < (unint64_t)v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_101;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_101;
    }
    *(_WORD *)((char *)v13 + v18) = 3642;
    unint64_t v76 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (char *)(((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v20 >= (char *)v13 + v19)
    {
      if ((unint64_t)(v20 - (char *)v13) > 0xFFFFFFFFFFFFFFF7 || v20 - (char *)v13 + 8 > v14)
      {
        unint64_t v75 = 0;
      }
      else
      {
        *(void *)unint64_t v20 = v16;
        unint64_t v76 = v20 - (char *)v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v74, a2);
    if (!v75)
    {
      LOBYTE(v71) = 0;
      char v73 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v76;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v76 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v67, (uint64_t)(v6 + 8), v9);
    if (!(_BYTE)v69)
    {
      LOBYTE(v71) = 16;
      int v72 = 1;
LABEL_37:
      char v73 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)v80, (uint64_t)&v67, (uint64_t *)v11);
    if (*((_WORD *)v80[0] + 25) != 2870)
    {
      unint64_t v71 = (IPC::Encoder *)v80[0];
      int v72 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v80[0]);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v79, v16, 0xE3Au, (uint64_t)&v67, v9);
    LOBYTE(v71) = 0;
    int v72 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v71, (uint64_t)&v67);
    char v73 = 1;
    if (v68 != -1) {
      ((void (*)(uint64_t **, uint64_t *))off_1EE9E9D68[v68])(v80, &v67);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v79);
    if (!v73)
    {
      LOBYTE(v58) = 0;
      char v63 = 0;
      goto LABEL_51;
    }
    if (v72 == 1)
    {
      LOBYTE(v58) = (_BYTE)v71;
      int v29 = 1;
      int v62 = 1;
      char v63 = 1;
      goto LABEL_50;
    }
    if (v72) {
      goto LABEL_104;
    }
    LOBYTE(v67) = 0;
    char v70 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL,WebCore::GraphicsContextGLActiveInfo>>(v71, (uint64_t)&v67);
    if (!v70)
    {
      LOBYTE(v58) = 13;
      int v62 = 1;
      char v63 = 1;
      goto LABEL_48;
    }
    if (v73) {
      break;
    }
LABEL_100:
    __break(1u);
LABEL_101:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v75 = 0;
  }
  if (v72) {
    goto LABEL_104;
  }
  unint64_t v28 = v71;
  unint64_t v71 = 0;
  unint64_t v74 = v28;
  LOBYTE(v75) = v67;
  unint64_t v76 = v68;
  uint64_t v77 = v69;
  int v78 = 0;
  LOBYTE(v58) = 0;
  int v62 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveAttrib>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveAttrib>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v58, (uint64_t)&v74);
  char v63 = 1;
  if (v78 != -1) {
    ((void (*)(uint64_t **, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v78])(v80, &v74);
  }
LABEL_48:
  if (v73)
  {
    int v29 = v72;
    if (v72 != -1) {
LABEL_50:
    }
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v29])(&v74, &v71);
  }
LABEL_51:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v79);
  if (v63)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 32) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveAttrib>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveAttrib>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v58);
    if (v63)
    {
      if (v62 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Decoder **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v62])(&v74, &v58);
      }
    }
    return result;
  }
  if (!v66) {
    goto LABEL_100;
  }
  unint64_t v30 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = v30 - (void)v64;
  if (v30 < (unint64_t)v64)
  {
    unint64_t v32 = 0;
  }
  else
  {
    unint64_t v32 = 0;
    if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= v65)
    {
      *(_WORD *)((char *)v64 + v31) = 2870;
      unint64_t v32 = v31 + 2;
    }
  }
  unint64_t v33 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v6[8];
  if (v33 + 16 >= v34) {
    goto LABEL_105;
  }
  while (1)
  {
    if (v32 <= 0x10) {
      unint64_t v32 = 16;
    }
    unint64_t v35 = v33 + v32;
    if (v34 <= v35) {
      unint64_t v35 = 0;
    }
    v6[10] = v35;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v35);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v80, v15);
    double v6 = v80[0];
    uint64_t v67 = 0;
    IPC::Connection::createSyncMessageEncoder(3642, a3, &v67, &v71);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v71, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v67, (uint64_t *)&v71, 0, (uint64_t)&v74, v9);
    if (v75)
    {
      if (v75 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v74;
        int v36 = 1;
        *(_DWORD *)(a4 + 32) = 1;
        goto LABEL_72;
      }
      goto LABEL_104;
    }
    LOBYTE(v58) = 0;
    char v61 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL,WebCore::GraphicsContextGLActiveInfo>>(v74, (uint64_t)&v58);
    if (!v61) {
      break;
    }
    int v36 = v75;
    if (!v75)
    {
      uint64_t v38 = v74;
      unint64_t v74 = 0;
      char v39 = v58;
      unint64_t v40 = v59;
      uint64_t v41 = v60;
      *(void *)a4 = v38;
      *(unsigned char *)(a4 + 8) = v39;
      *(void *)(a4 + 16) = v40;
      *(void *)(a4 + 24) = v41;
      *(_DWORD *)(a4 + 32) = 0;
      goto LABEL_72;
    }
LABEL_104:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_105:
    unint64_t v33 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 32) = 1;
  int v36 = v75;
  if (v75 == -1) {
    goto LABEL_73;
  }
LABEL_72:
  ((void (*)(unint64_t *, IPC::Decoder **))off_1EE9E9D68[v36])(&v58, &v74);
LABEL_73:
  unint64_t v42 = v71;
  unint64_t v71 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v37);
    WTF::fastFree(v43, v44);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v80);
}

IPC::Decoder *IPC::Decoder::operator>><std::tuple<BOOL,WebCore::GraphicsContextGLActiveInfo>>(IPC::Decoder *a1, uint64_t a2)
{
  unint64_t v6 = *((void *)a1 + 1);
  double v7 = *(WTF::StringImpl **)a1;
  unint64_t v8 = *((void *)a1 + 2) - *(void *)a1;
  if (v6 <= v8)
  {
    unint64_t v14 = 0;
    unint64_t v15 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v16 = *((void *)a1 + 3);
    if (v16)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
        unint64_t v15 = *(WTF::StringImpl **)a1;
        unint64_t v14 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v14 = 0;
        unint64_t v15 = 0;
      }
    }
    goto LABEL_7;
  }
  double v9 = (unsigned __int8 *)v7 + v8;
  *((void *)a1 + 2) = v9 + 1;
  if (!v7)
  {
    unint64_t v14 = v6;
    unint64_t v15 = 0;
LABEL_7:
    unint64_t v6 = 0;
    double v7 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v17 = *((void *)a1 + 3);
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v17 + 16))(v17, v15, v14);
        double v7 = *(WTF::StringImpl **)a1;
        unint64_t v6 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        double v7 = 0;
      }
    }
    goto LABEL_8;
  }
  uint64_t v2 = (WTF::StringImpl *)*v9;
  if (v2 >= 2)
  {
LABEL_8:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v18 = *((void *)a1 + 3);
    if (v18 && v6) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v18 + 16))(v18, v7);
    }
    goto LABEL_9;
  }
  IPC::Decoder::decode<WebCore::GraphicsContextGLActiveInfo>((uint64_t)v25, a1);
  if (v26)
  {
    char v11 = 0;
    BOOL v12 = v2 != 0;
    uint64_t v2 = (WTF::StringImpl *)v25[0];
    uint64_t v3 = v25[1];
    int v13 = 1;
    goto LABEL_11;
  }
LABEL_9:
  double v10 = *(WTF::StringImpl **)a1;
  uint64_t v19 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v20 = *((void *)a1 + 3);
  if (v20 && v19) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v20 + 16))(v20, v10);
  }
  int v13 = 0;
  BOOL v12 = 0;
  char v11 = 1;
LABEL_11:
  if (*(unsigned __int8 *)(a2 + 24) == v13)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      *(unsigned char *)a2 = v12;
      uint64_t v21 = *(WTF::StringImpl **)(a2 + 8);
      *(void *)(a2 + 8) = v2;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v10);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      *(void *)(a2 + 16) = v3;
      return a1;
    }
  }
  else
  {
    if (!*(unsigned char *)(a2 + 24))
    {
      *(unsigned char *)a2 = v12;
      *(void *)(a2 + 8) = v2;
      *(void *)(a2 + 16) = v3;
      *(unsigned char *)(a2 + 24) = 1;
      return a1;
    }
    uint64_t v22 = *(WTF::StringImpl **)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v10);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    *(unsigned char *)(a2 + 24) = 0;
  }
  if (v2) {
    char v23 = v11;
  }
  else {
    char v23 = 1;
  }
  if ((v23 & 1) == 0)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, v10);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebCore::GraphicsContextGLActiveInfo>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result && v5 != 0)
    {
      double v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveAttrib>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveAttrib>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 32);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 32) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA038[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 32) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
  uint64_t v4 = a3[2];
  a3[2] = 0;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = a3[3];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniform,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v58, v9);
    if (!(_BYTE)v60) {
      goto LABEL_97;
    }
    unint64_t v46 = v58;
    unint64_t v45 = v59;
    unint64_t v47 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v48 = v47 - v58;
    if (v47 >= v58)
    {
      unint64_t v49 = v48 + 2;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v49 <= v59)
      {
        *(_WORD *)(v58 + v48) = 2871;
        goto LABEL_83;
      }
      unint64_t v45 = 0;
    }
    unint64_t v49 = 0;
LABEL_83:
    unint64_t v51 = (void *)((v46 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v51 >= v46 + v49)
    {
      unint64_t v49 = (unint64_t)v51 - v46 + 8;
      if ((unint64_t)v51 - v46 > 0xFFFFFFFFFFFFFFF7 || v49 > v45) {
        goto LABEL_108;
      }
      *unint64_t v51 = a3;
    }
    if (v45)
    {
      uint64_t v53 = v6[9];
      unint64_t v54 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v55 = v6[8];
      if (v54 + 16 >= v55) {
        unint64_t v54 = 0;
      }
      if (v49 <= 0x10) {
        unint64_t v49 = 16;
      }
      unint64_t v56 = v54 + v49;
      if (v55 <= v56) {
        unint64_t v56 = 0;
      }
      v6[10] = v56;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v53 + 16) + 128), v56) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_108:
    char v57 = 17;
    goto LABEL_98;
  }
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v64, v9);
  if (!v66)
  {
LABEL_97:
    char v57 = 15;
LABEL_98:
    *(unsigned char *)a4 = v57;
    *(_DWORD *)(a4 + 32) = 1;
    return result;
  }
  int v13 = v64;
  unint64_t v14 = v65;
  unint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v79, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v79, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    int v78 = 1;
    LOBYTE(v58) = 0;
    int v62 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniform>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniform>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v58, (uint64_t)&v74);
    char v63 = 1;
    if (v78 != -1) {
      ((void (*)(uint64_t *, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v78])(&v67, &v74);
    }
    goto LABEL_51;
  }
  unint64_t v74 = v13;
  unint64_t v75 = v14;
  unint64_t v76 = 0;
  unint64_t v17 = ((unint64_t)v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - (void)v13;
  if (v17 < (unint64_t)v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_101;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_101;
    }
    *(_WORD *)((char *)v13 + v18) = 3643;
    unint64_t v76 = v18 + 2;
  }
  while (1)
  {
    uint64_t v20 = (char *)(((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v20 >= (char *)v13 + v19)
    {
      if ((unint64_t)(v20 - (char *)v13) > 0xFFFFFFFFFFFFFFF7 || v20 - (char *)v13 + 8 > v14)
      {
        unint64_t v75 = 0;
      }
      else
      {
        *(void *)uint64_t v20 = v16;
        unint64_t v76 = v20 - (char *)v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v74, a2);
    if (!v75)
    {
      LOBYTE(v71) = 0;
      char v73 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v76;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v76 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v67, (uint64_t)(v6 + 8), v9);
    if (!(_BYTE)v69)
    {
      LOBYTE(v71) = 16;
      int v72 = 1;
LABEL_37:
      char v73 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)v80, (uint64_t)&v67, (uint64_t *)v11);
    if (*((_WORD *)v80[0] + 25) != 2870)
    {
      unint64_t v71 = (IPC::Encoder *)v80[0];
      int v72 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v80[0]);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v79, v16, 0xE3Bu, (uint64_t)&v67, v9);
    LOBYTE(v71) = 0;
    int v72 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v71, (uint64_t)&v67);
    char v73 = 1;
    if (v68 != -1) {
      ((void (*)(uint64_t **, uint64_t *))off_1EE9E9D68[v68])(v80, &v67);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v79);
    if (!v73)
    {
      LOBYTE(v58) = 0;
      char v63 = 0;
      goto LABEL_51;
    }
    if (v72 == 1)
    {
      LOBYTE(v58) = (_BYTE)v71;
      int v29 = 1;
      int v62 = 1;
      char v63 = 1;
      goto LABEL_50;
    }
    if (v72) {
      goto LABEL_104;
    }
    LOBYTE(v67) = 0;
    char v70 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL,WebCore::GraphicsContextGLActiveInfo>>(v71, (uint64_t)&v67);
    if (!v70)
    {
      LOBYTE(v58) = 13;
      int v62 = 1;
      char v63 = 1;
      goto LABEL_48;
    }
    if (v73) {
      break;
    }
LABEL_100:
    __break(1u);
LABEL_101:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v75 = 0;
  }
  if (v72) {
    goto LABEL_104;
  }
  unint64_t v28 = v71;
  unint64_t v71 = 0;
  unint64_t v74 = v28;
  LOBYTE(v75) = v67;
  unint64_t v76 = v68;
  uint64_t v77 = v69;
  int v78 = 0;
  LOBYTE(v58) = 0;
  int v62 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniform>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniform>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v58, (uint64_t)&v74);
  char v63 = 1;
  if (v78 != -1) {
    ((void (*)(uint64_t **, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v78])(v80, &v74);
  }
LABEL_48:
  if (v73)
  {
    int v29 = v72;
    if (v72 != -1) {
LABEL_50:
    }
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v29])(&v74, &v71);
  }
LABEL_51:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v79);
  if (v63)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 32) = -1;
    uint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniform>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniform>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v58);
    if (v63)
    {
      if (v62 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Decoder **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v62])(&v74, &v58);
      }
    }
    return result;
  }
  if (!v66) {
    goto LABEL_100;
  }
  unint64_t v30 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = v30 - (void)v64;
  if (v30 < (unint64_t)v64)
  {
    unint64_t v32 = 0;
  }
  else
  {
    unint64_t v32 = 0;
    if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= v65)
    {
      *(_WORD *)((char *)v64 + v31) = 2870;
      unint64_t v32 = v31 + 2;
    }
  }
  unint64_t v33 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v6[8];
  if (v33 + 16 >= v34) {
    goto LABEL_105;
  }
  while (1)
  {
    if (v32 <= 0x10) {
      unint64_t v32 = 16;
    }
    unint64_t v35 = v33 + v32;
    if (v34 <= v35) {
      unint64_t v35 = 0;
    }
    v6[10] = v35;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v35);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v80, v15);
    char v6 = v80[0];
    uint64_t v67 = 0;
    IPC::Connection::createSyncMessageEncoder(3643, a3, &v67, &v71);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v71, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v67, (uint64_t *)&v71, 0, (uint64_t)&v74, v9);
    if (v75)
    {
      if (v75 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v74;
        int v36 = 1;
        *(_DWORD *)(a4 + 32) = 1;
        goto LABEL_72;
      }
      goto LABEL_104;
    }
    LOBYTE(v58) = 0;
    char v61 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL,WebCore::GraphicsContextGLActiveInfo>>(v74, (uint64_t)&v58);
    if (!v61) {
      break;
    }
    int v36 = v75;
    if (!v75)
    {
      uint64_t v38 = v74;
      unint64_t v74 = 0;
      char v39 = v58;
      unint64_t v40 = v59;
      uint64_t v41 = v60;
      *(void *)a4 = v38;
      *(unsigned char *)(a4 + 8) = v39;
      *(void *)(a4 + 16) = v40;
      *(void *)(a4 + 24) = v41;
      *(_DWORD *)(a4 + 32) = 0;
      goto LABEL_72;
    }
LABEL_104:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_105:
    unint64_t v33 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 32) = 1;
  int v36 = v75;
  if (v75 == -1) {
    goto LABEL_73;
  }
LABEL_72:
  ((void (*)(unint64_t *, IPC::Decoder **))off_1EE9E9D68[v36])(&v58, &v74);
LABEL_73:
  unint64_t v42 = v71;
  unint64_t v71 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v37);
    WTF::fastFree(v43, v44);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v80);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniform>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniform>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 32);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 32) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA048[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 32) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
  uint64_t v4 = a3[2];
  a3[2] = 0;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = a3[3];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetAttribLocation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v56, v9);
    if (!(_BYTE)v58) {
      goto LABEL_101;
    }
    unint64_t v44 = v56;
    unint64_t v43 = v57;
    unint64_t v45 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v56;
    if (v45 >= (unint64_t)v56)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v57)
      {
        *(_WORD *)((char *)v56 + v46) = 2871;
        goto LABEL_87;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_87:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
        goto LABEL_111;
      }
      *(void *)unint64_t v49 = a3;
    }
    if (v43)
    {
      uint64_t v51 = v6[9];
      unint64_t v52 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v6[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v6[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v55 = 17;
    goto LABEL_102;
  }
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v60, v9);
  if (!v62)
  {
LABEL_101:
    char v55 = 15;
LABEL_102:
    *(unsigned char *)a4 = v55;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v60;
  unint64_t v14 = v61;
  unint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v66, v16))
  {
    LOBYTE(v71) = 11;
    uint64_t v11 = 1;
    LODWORD(v73) = 1;
    LOBYTE(v56) = 0;
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetAttribLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetAttribLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
    char v59 = 1;
    if (v73 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
    }
    goto LABEL_53;
  }
  uint64_t v71 = v13;
  unint64_t v72 = v14;
  unint64_t v73 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3647;
    unint64_t v73 = v18 + 2;
  }
  while (1)
  {
    uint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v72 = 0;
      }
      else
      {
        *uint64_t v20 = v16;
        unint64_t v73 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(&v71, a2);
    if (!v72)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v73;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v73 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v68, (uint64_t)(v6 + 8), v9);
    if (!v70)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_37:
      char v65 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v68, (uint64_t *)v11);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      char v63 = (uint64_t *)v67;
      int v64 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v66, v16, 0xE3Fu, (uint64_t)&v68, v9);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v68);
    char v65 = 1;
    if (v69 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v67, &v68);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v66);
    if (!v65)
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
      goto LABEL_50;
    }
    if (v64 == 1)
    {
      char v30 = (char)v63;
LABEL_49:
      LOBYTE(v56) = v30;
      int v58 = 1;
      char v59 = 1;
      goto LABEL_50;
    }
    if (v64) {
      goto LABEL_107;
    }
    uint64_t v28 = IPC::Decoder::decode<std::tuple<float>>(v63);
    if ((v28 & 0xFF00000000) == 0)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v65) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v72 = 0;
  }
  if (v64) {
    goto LABEL_107;
  }
  int v29 = v63;
  char v63 = 0;
  uint64_t v71 = (uint64_t)v29;
  LODWORD(v72) = v28;
  LODWORD(v73) = 0;
  LOBYTE(v56) = 0;
  int v58 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetAttribLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetAttribLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
  char v59 = 1;
  if (v73 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
  }
LABEL_50:
  if (v65 && v64 != -1) {
    ((void (*)(uint64_t *, uint64_t **))off_1EE9E9D68[v64])(&v71, &v63);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v59)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    uint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetAttribLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetAttribLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v56);
    if (v59)
    {
      if (v58 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v58])(&v71, &v56);
      }
    }
    return result;
  }
  if (!v62) {
    goto LABEL_104;
  }
  unint64_t v31 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v60;
  if (v31 < v60)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v61)
    {
      *(_WORD *)(v60 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, v15);
    char v6 = v63;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3647, a3, &v71, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(v68, (int *)a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v71, (uint64_t *)&v68, 0, (uint64_t)&v56, v9);
    a2 = v57;
    if (v57)
    {
      if (v57 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v56;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    uint64_t v37 = IPC::Decoder::decode<std::tuple<float>>(v56);
    if ((v37 & 0xFF00000000) == 0) {
      break;
    }
    if (!v57)
    {
      char v39 = v56;
      unint64_t v56 = 0;
      *(void *)a4 = v39;
      *(_DWORD *)(a4 + 8) = v37;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[a2])(&v67, &v56);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v57;
  if (v57 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v40 = v68;
  unint64_t v68 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
}

void *IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = *a1 + v2;
  unint64_t v4 = (v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (v5)
  {
    unint64_t v7 = v6 + v2;
    unint64_t v8 = v7 + 4;
    if (v7 > 0xFFFFFFFFFFFFFFFBLL || v8 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v7) = *(_DWORD *)a2;
      a1[2] = v8;
    }
  }
  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, *(uint64_t **)(a2 + 8));
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetAttribLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetAttribLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA058[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetBufferParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v56, v9);
    if (!(_BYTE)v58) {
      goto LABEL_101;
    }
    unint64_t v44 = v56;
    unint64_t v43 = v57;
    unint64_t v45 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v56;
    if (v45 >= (unint64_t)v56)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v57)
      {
        *(_WORD *)((char *)v56 + v46) = 2871;
        goto LABEL_87;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_87:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
        goto LABEL_111;
      }
      *(void *)unint64_t v49 = a3;
    }
    if (v43)
    {
      uint64_t v51 = v6[9];
      unint64_t v52 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v6[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v6[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v55 = 17;
    goto LABEL_102;
  }
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v60, v9);
  if (!v62)
  {
LABEL_101:
    char v55 = 15;
LABEL_102:
    *(unsigned char *)a4 = v55;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v60;
  unint64_t v14 = v61;
  unint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v66, v16))
  {
    LOBYTE(v71) = 11;
    uint64_t v11 = 1;
    LODWORD(v73) = 1;
    LOBYTE(v56) = 0;
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
    char v59 = 1;
    if (v73 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
    }
    goto LABEL_53;
  }
  uint64_t v71 = v13;
  unint64_t v72 = v14;
  unint64_t v73 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3649;
    unint64_t v73 = v18 + 2;
  }
  while (1)
  {
    uint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v72 = 0;
      }
      else
      {
        *uint64_t v20 = v16;
        unint64_t v73 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v71, a2);
    if (!v72)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v73;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v73 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v68, (uint64_t)(v6 + 8), v9);
    if (!v70)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_37:
      char v65 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v68, (uint64_t *)v11);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      char v63 = (uint64_t *)v67;
      int v64 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v66, v16, 0xE41u, (uint64_t)&v68, v9);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v68);
    char v65 = 1;
    if (v69 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v67, &v68);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v66);
    if (!v65)
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
      goto LABEL_50;
    }
    if (v64 == 1)
    {
      char v30 = (char)v63;
LABEL_49:
      LOBYTE(v56) = v30;
      int v58 = 1;
      char v59 = 1;
      goto LABEL_50;
    }
    if (v64) {
      goto LABEL_107;
    }
    uint64_t v28 = IPC::Decoder::decode<std::tuple<float>>(v63);
    if ((v28 & 0xFF00000000) == 0)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v65) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v72 = 0;
  }
  if (v64) {
    goto LABEL_107;
  }
  int v29 = v63;
  char v63 = 0;
  uint64_t v71 = (uint64_t)v29;
  LODWORD(v72) = v28;
  LODWORD(v73) = 0;
  LOBYTE(v56) = 0;
  int v58 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
  char v59 = 1;
  if (v73 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
  }
LABEL_50:
  if (v65 && v64 != -1) {
    ((void (*)(uint64_t *, uint64_t **))off_1EE9E9D68[v64])(&v71, &v63);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v59)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    uint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v56);
    if (v59)
    {
      if (v58 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v58])(&v71, &v56);
      }
    }
    return result;
  }
  if (!v62) {
    goto LABEL_104;
  }
  unint64_t v31 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v60;
  if (v31 < v60)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v61)
    {
      *(_WORD *)(v60 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, v15);
    char v6 = v63;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3649, a3, &v71, &v68);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v71, (uint64_t *)&v68, 0, (uint64_t)&v56, v9);
    a2 = (int *)v57;
    if (v57)
    {
      if (v57 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v56;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    uint64_t v37 = IPC::Decoder::decode<std::tuple<float>>(v56);
    if ((v37 & 0xFF00000000) == 0) {
      break;
    }
    if (!v57)
    {
      char v39 = v56;
      unint64_t v56 = 0;
      *(void *)a4 = v39;
      *(_DWORD *)(a4 + 8) = v37;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[a2])(&v67, &v56);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v57;
  if (v57 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v40 = v68;
  unint64_t v68 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA068[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetString,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v64, v9);
    if (!(_BYTE)v66) {
      goto LABEL_105;
    }
    unint64_t v52 = v64;
    unint64_t v51 = v65;
    unint64_t v53 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v54 = v53 - (void)v64;
    if (v53 >= (unint64_t)v64)
    {
      unint64_t v55 = v54 + 2;
      if (v54 <= 0xFFFFFFFFFFFFFFFDLL && v55 <= v65)
      {
        *(_WORD *)((char *)v64 + v54) = 2871;
        goto LABEL_91;
      }
      unint64_t v51 = 0;
    }
    unint64_t v55 = 0;
LABEL_91:
    unint64_t v57 = (char *)(((unint64_t)v52 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v57 >= (char *)v52 + v55)
    {
      unint64_t v55 = v57 - (char *)v52 + 8;
      if ((unint64_t)(v57 - (char *)v52) > 0xFFFFFFFFFFFFFFF7 || v55 > v51) {
        goto LABEL_117;
      }
      *(void *)unint64_t v57 = a3;
    }
    if (v51)
    {
      uint64_t v59 = v6[9];
      unint64_t v60 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v61 = v6[8];
      if (v60 + 16 >= v61) {
        unint64_t v60 = 0;
      }
      if (v55 <= 0x10) {
        unint64_t v55 = 16;
      }
      unint64_t v62 = v60 + v55;
      if (v61 <= v62) {
        unint64_t v62 = 0;
      }
      v6[10] = v62;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v59 + 16) + 128), v62) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_117:
    char v63 = 17;
    goto LABEL_106;
  }
LABEL_4:
  uint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v68, v9);
  if (!v70)
  {
LABEL_105:
    char v63 = 15;
LABEL_106:
    *(unsigned char *)a4 = v63;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v68;
  unint64_t v14 = v69;
  unint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v76, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v76, v16))
  {
    LOBYTE(v78) = 11;
    uint64_t v11 = 1;
    int v80 = 1;
    LOBYTE(v64) = 0;
    int v66 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetString>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetString>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)&v78);
    char v67 = 1;
    if (v80 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetStringEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v80])(&v73, &v78);
    }
    goto LABEL_59;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3676;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_110;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    char v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v73) = 0;
        unsigned __int8 v75 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = v6[8];
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    v6[10] = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v78, (uint64_t)(v6 + 8), v9);
    if (!(_BYTE)v80)
    {
      LOBYTE(v73) = 16;
      int v74 = 1;
LABEL_41:
      unsigned __int8 v75 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v71, (uint64_t)&v78, (uint64_t *)v11);
    if (*((_WORD *)v71 + 25) != 2870)
    {
      unint64_t v73 = v71;
      int v74 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v71);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v76, v16, 0xE5Cu, (uint64_t)&v78, v9);
    LOBYTE(v73) = 0;
    int v74 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v73, (uint64_t)&v78);
    unsigned __int8 v75 = 1;
    if (v79 != -1) {
      ((void (*)(WTF::StringImpl **, IPC::Decoder **))off_1EE9E9D68[v79])(&v71, &v78);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v76);
    if (!v75)
    {
      LOBYTE(v64) = 0;
      char v67 = 0;
      goto LABEL_59;
    }
    if (v74 == 1)
    {
      LOBYTE(v64) = (_BYTE)v73;
      int v37 = 1;
      int v66 = 1;
      char v67 = 1;
      goto LABEL_58;
    }
    if (v74) {
      goto LABEL_113;
    }
    LOBYTE(v71) = 0;
    char v72 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v73, (uint64_t *)&v71);
    if (!v72)
    {
      LOBYTE(v64) = 13;
      int v66 = 1;
      char v67 = 1;
      goto LABEL_56;
    }
    unint64_t v20 = v75;
    if (v75) {
      break;
    }
LABEL_109:
    __break(1u);
LABEL_110:
    unint64_t v19 = 0;
  }
  if (v74) {
    goto LABEL_113;
  }
  unint64_t v33 = v73;
  unint64_t v73 = 0;
  unint64_t v34 = v71;
  uint64_t v71 = 0;
  int v78 = v33;
  unint64_t v79 = v34;
  int v80 = 0;
  LOBYTE(v64) = 0;
  int v66 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetString>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetString>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)&v78);
  char v67 = 1;
  if (v80 != -1) {
    ((void (*)(char *, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetStringEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v80])(&v77, &v78);
  }
  if (v72)
  {
    unint64_t v36 = v71;
    uint64_t v71 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v35);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
LABEL_56:
  if (v75)
  {
    int v37 = v74;
    if (v74 != -1) {
LABEL_58:
    }
      ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9D68[v37])(&v78, &v73);
  }
LABEL_59:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v76);
  if (v67)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    uint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetString>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetString>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v64);
    if (v67)
    {
      if (v66 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetStringEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v66])(&v78, &v64);
      }
    }
    return result;
  }
  unint64_t v20 = v70;
  if (!v70) {
    goto LABEL_109;
  }
  unint64_t v38 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = v38 - v68;
  if (v38 < v68)
  {
    unint64_t v40 = 0;
  }
  else
  {
    unint64_t v40 = 0;
    if (v39 <= 0xFFFFFFFFFFFFFFFDLL && v39 + 2 <= v69)
    {
      *(_WORD *)(v68 + v39) = 2870;
      unint64_t v40 = v39 + 2;
    }
  }
  unint64_t v41 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v42 = v6[8];
  if (v41 + 16 >= v42) {
    goto LABEL_114;
  }
  while (1)
  {
    if (v40 <= 0x10) {
      unint64_t v40 = 16;
    }
    unint64_t v43 = v41 + v40;
    if (v42 <= v43) {
      unint64_t v43 = 0;
    }
    v6[10] = v43;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v43);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v76, v15);
    char v6 = (uint64_t *)v76;
    unint64_t v73 = 0;
    IPC::Connection::createSyncMessageEncoder(3676, a3, (uint64_t *)&v73, &v71);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v71, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v73, (uint64_t *)&v71, 0, (uint64_t)&v64, v9);
    if (v65)
    {
      if (v65 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v64;
        int v44 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_80;
      }
      goto LABEL_113;
    }
    LOBYTE(v78) = 0;
    LOBYTE(v79) = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v64, (uint64_t *)&v78);
    if (!(_BYTE)v79) {
      break;
    }
    int v44 = v65;
    if (!v65)
    {
      unint64_t v46 = v64;
      int v64 = 0;
      uint64_t v47 = (uint64_t)v78;
      *(void *)a4 = v46;
      *(void *)(a4 + 8) = v47;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_80;
    }
LABEL_113:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_114:
    unint64_t v41 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v44 = v65;
  if (v65 == -1) {
    goto LABEL_81;
  }
LABEL_80:
  ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9D68[v44])(&v78, &v64);
LABEL_81:
  unint64_t v48 = v71;
  uint64_t v71 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v45);
    WTF::fastFree(v49, v50);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v76);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetString>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetString>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetStringEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA078[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetStringEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetStringEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t *IPC::ArgumentCoder<std::tuple<unsigned int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned long>,0ul,1ul>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *(_DWORD *)a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  uint64_t v11 = (void *)((v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v11 >= v2 + v3)
  {
    unint64_t v12 = (unint64_t)v11 - v2 + 8;
    if ((unint64_t)v11 - v2 > 0xFFFFFFFFFFFFFFF7 || v12 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *uint64_t v11 = *(void *)(a2 + 8);
      result[2] = v12;
    }
  }
  return result;
}

void *IPC::Decoder::decode<std::tuple<std::span<float const,18446744073709551615ul>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<std::span<float const,18446744073709551615ul>>(a2, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a1 = v8;
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (void *)*((void *)a2 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFloatv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFloatv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E99F8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA088[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetFloatvEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  __n128 result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetFloatvEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

unint64_t IPC::ArgumentCoder<std::tuple<unsigned int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned long>,0ul,1ul>(IPC::Encoder *a1, int *a2)
{
  int v4 = *a2;
  uint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    _DWORD *v5 = v4;
    uint64_t v7 = *((void *)a2 + 1);
    return IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, v7);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result = IPC::Decoder::decode<std::span<int const,18446744073709551615ul>>(a2, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a1 = v8;
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = a2[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegerv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegerv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9A08[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA098[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetIntegervEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  __n128 result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetIntegervEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

unint64_t IPC::Decoder::decode<std::tuple<std::span<int const,4ul>>>(uint64_t *a1)
{
  unint64_t result = IPC::Decoder::decode<std::span<int const,4ul>>(a1);
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7 && v6 != 0)
    {
      unint64_t v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
      uint64_t v4 = 0;
      unint64_t result = v9;
    }
  }
  if (!v4) {
    return 0;
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegeri_v>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegeri_v>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9A18[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA0A8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetIntegeri_vEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  a2[1] = a3[1];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetIntegeri_vEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v62, v9);
    if (!(_BYTE)v64) {
      goto LABEL_105;
    }
    int v50 = v62;
    unint64_t v49 = v63;
    unint64_t v51 = ((unint64_t)v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v52 = v51 - (void)v62;
    if (v51 >= (unint64_t)v62)
    {
      unint64_t v53 = v52 + 2;
      if (v52 <= 0xFFFFFFFFFFFFFFFDLL && v53 <= v63)
      {
        *(_WORD *)((char *)v62 + v52) = 2871;
        goto LABEL_91;
      }
      unint64_t v49 = 0;
    }
    unint64_t v53 = 0;
LABEL_91:
    unint64_t v55 = (char *)(((unint64_t)v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v55 >= (char *)v50 + v53)
    {
      unint64_t v53 = v55 - (char *)v50 + 8;
      if ((unint64_t)(v55 - (char *)v50) > 0xFFFFFFFFFFFFFFF7 || v53 > v49) {
        goto LABEL_115;
      }
      *(void *)unint64_t v55 = a3;
    }
    if (v49)
    {
      uint64_t v57 = *((void *)v6 + 9);
      unint64_t v58 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v59 = *((void *)v6 + 8);
      if (v58 + 16 >= v59) {
        unint64_t v58 = 0;
      }
      if (v53 <= 0x10) {
        unint64_t v53 = 16;
      }
      unint64_t v60 = v58 + v53;
      if (v59 <= v60) {
        unint64_t v60 = 0;
      }
      *((void *)v6 + 10) = v60;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v57 + 16) + 128), v60) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_115:
    char v61 = 17;
    goto LABEL_106;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v66, v9);
  if (!v68)
  {
LABEL_105:
    char v61 = 15;
LABEL_106:
    *(unsigned char *)a4 = v61;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v66;
  unint64_t v14 = v67;
  unint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v72, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v72, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    int v76 = 1;
    LOBYTE(v62) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v62, (uint64_t)&v74);
    char v65 = 1;
    if (v76 != -1) {
      ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetInteger64EE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v69, &v74);
    }
    goto LABEL_57;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3656;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_109;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    char v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v69) = 0;
        unsigned __int8 v71 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *((void *)v6 + 8);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    *((void *)v6 + 10) = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v74, (uint64_t)v6 + 64, v9);
    if (!(_BYTE)v76)
    {
      LOBYTE(v69) = 16;
      int v70 = 1;
LABEL_41:
      unsigned __int8 v71 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v73, (uint64_t)&v74, (uint64_t *)v11);
    if (*((_WORD *)v73 + 25) != 2870)
    {
      unint64_t v69 = v73;
      int v70 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v73);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v72, v16, 0xE48u, (uint64_t)&v74, v9);
    LOBYTE(v69) = 0;
    int v70 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v69, (uint64_t)&v74);
    unsigned __int8 v71 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v75])(&v73, &v74);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v72);
    if (!v71)
    {
      LOBYTE(v62) = 0;
      char v65 = 0;
      goto LABEL_54;
    }
    if (v70 == 1)
    {
      char v36 = (char)v69;
LABEL_53:
      LOBYTE(v62) = v36;
      int v64 = 1;
      char v65 = 1;
      goto LABEL_54;
    }
    if (v70) {
      goto LABEL_111;
    }
    unint64_t v33 = IPC::Decoder::decode<std::tuple<long long>>(v69);
    if (!v34)
    {
      char v36 = 13;
      goto LABEL_53;
    }
    unint64_t v20 = v71;
    if (v71) {
      break;
    }
LABEL_108:
    __break(1u);
LABEL_109:
    unint64_t v19 = 0;
  }
  if (v70) {
    goto LABEL_111;
  }
  unint64_t v35 = v69;
  unint64_t v69 = 0;
  int v74 = v35;
  unint64_t v75 = v33;
  int v76 = 0;
  LOBYTE(v62) = 0;
  int v64 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v62, (uint64_t)&v74);
  char v65 = 1;
  if (v76 != -1) {
    ((void (*)(IPC::Decoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetInteger64EE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v73, &v74);
  }
LABEL_54:
  if (v71 && v70 != -1) {
    ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v70])(&v74, &v69);
  }
LABEL_57:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v72);
  if (v65)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v62);
    if (v65)
    {
      if (v64 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetInteger64EE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v64])(&v74, &v62);
      }
    }
    return result;
  }
  unint64_t v20 = v68;
  if (!v68) {
    goto LABEL_108;
  }
  unint64_t v37 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v38 = v37 - v66;
  if (v37 < v66)
  {
    unint64_t v39 = 0;
  }
  else
  {
    unint64_t v39 = 0;
    if (v38 <= 0xFFFFFFFFFFFFFFFDLL && v38 + 2 <= v67)
    {
      *(_WORD *)(v66 + v38) = 2870;
      unint64_t v39 = v38 + 2;
    }
  }
  unint64_t v40 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v41 = *((void *)v6 + 8);
  if (v40 + 16 >= v41) {
    goto LABEL_112;
  }
  while (1)
  {
    if (v39 <= 0x10) {
      unint64_t v39 = 16;
    }
    unint64_t v42 = v40 + v39;
    if (v41 <= v42) {
      unint64_t v42 = 0;
    }
    *((void *)v6 + 10) = v42;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v42);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, v15);
    char v6 = v73;
    int v74 = 0;
    IPC::Connection::createSyncMessageEncoder(3656, a3, (uint64_t *)&v74, &v69);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v69, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v74, (uint64_t *)&v69, 0, (uint64_t)&v62, v9);
    a2 = (int *)v63;
    if (v63)
    {
      if (v63 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v62;
        goto LABEL_77;
      }
      goto LABEL_111;
    }
    unint64_t v43 = IPC::Decoder::decode<std::tuple<long long>>(v62);
    if (!(_BYTE)v44) {
      break;
    }
    if (!v63)
    {
      unint64_t v45 = v62;
      unint64_t v62 = 0;
      *(void *)a4 = v45;
      *(void *)(a4 + 8) = v43;
LABEL_77:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_78:
      ((void (*)(IPC::Decoder ***, IPC::Decoder **))off_1EE9E9D68[a2])(&v72, &v62);
      goto LABEL_79;
    }
LABEL_111:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_112:
    unint64_t v40 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v63;
  if (v63 != -1) {
    goto LABEL_78;
  }
LABEL_79:
  unint64_t v46 = v69;
  unint64_t v69 = 0;
  if (v46)
  {
    IPC::Encoder::~Encoder(v46, v44);
    WTF::fastFree(v47, v48);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetInteger64EE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA0B8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetInteger64EE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  a2[1] = a3[1];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetInteger64EE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v57, v9);
    if (!(_BYTE)v59) {
      goto LABEL_101;
    }
    unint64_t v45 = v57;
    unint64_t v44 = v58;
    unint64_t v46 = ((unint64_t)v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = v46 - (void)v57;
    if (v46 >= (unint64_t)v57)
    {
      unint64_t v48 = v47 + 2;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v48 <= v58)
      {
        *(_WORD *)((char *)v57 + v47) = 2871;
        goto LABEL_87;
      }
      unint64_t v44 = 0;
    }
    unint64_t v48 = 0;
LABEL_87:
    int v50 = (char *)(((unint64_t)v45 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v50 >= (char *)v45 + v48)
    {
      unint64_t v48 = v50 - (char *)v45 + 8;
      if ((unint64_t)(v50 - (char *)v45) > 0xFFFFFFFFFFFFFFF7 || v48 > v44) {
        goto LABEL_111;
      }
      *(void *)int v50 = a3;
    }
    if (v44)
    {
      uint64_t v52 = v6[9];
      unint64_t v53 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v54 = v6[8];
      if (v53 + 16 >= v54) {
        unint64_t v53 = 0;
      }
      if (v48 <= 0x10) {
        unint64_t v48 = 16;
      }
      unint64_t v55 = v53 + v48;
      if (v54 <= v55) {
        unint64_t v55 = 0;
      }
      v6[10] = v55;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v52 + 16) + 128), v55) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v56 = 17;
    goto LABEL_102;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v61, v9);
  if (!v63)
  {
LABEL_101:
    char v56 = 15;
LABEL_102:
    *(unsigned char *)a4 = v56;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v61;
  unint64_t v14 = v62;
  unint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v67, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v67, v16))
  {
    LOBYTE(v72) = 11;
    uint64_t v11 = 1;
    LODWORD(v74) = 1;
    LOBYTE(v57) = 0;
    int v59 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64i>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64i>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v57, (uint64_t)&v72);
    char v60 = 1;
    if (v74 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetInteger64iEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v74])(&v69, &v72);
    }
    goto LABEL_53;
  }
  uint64_t v72 = v13;
  unint64_t v73 = v14;
  unint64_t v74 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3658;
    unint64_t v74 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v73 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v74 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v72, a2);
    if (!v73)
    {
      LOBYTE(v64) = 0;
      char v66 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v74;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v74 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v69, (uint64_t)(v6 + 8), v9);
    if (!v71)
    {
      LOBYTE(v64) = 16;
      int v65 = 1;
LABEL_37:
      char v66 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v68, (uint64_t)&v69, (uint64_t *)v11);
    if (*((_WORD *)v68 + 25) != 2870)
    {
      int v64 = v68;
      int v65 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v68);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v67, v16, 0xE4Au, (uint64_t)&v69, v9);
    LOBYTE(v64) = 0;
    int v65 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)&v69);
    char v66 = 1;
    if (v70 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v70])(&v68, &v69);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v67);
    if (!v66)
    {
      LOBYTE(v57) = 0;
      char v60 = 0;
      goto LABEL_50;
    }
    if (v65 == 1)
    {
      char v31 = (char)v64;
LABEL_49:
      LOBYTE(v57) = v31;
      int v59 = 1;
      char v60 = 1;
      goto LABEL_50;
    }
    if (v65) {
      goto LABEL_107;
    }
    unint64_t v28 = IPC::Decoder::decode<std::tuple<long long>>(v64);
    if (!v29)
    {
      char v31 = 13;
      goto LABEL_49;
    }
    if (v66) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v73 = 0;
  }
  if (v65) {
    goto LABEL_107;
  }
  unint64_t v30 = v64;
  int v64 = 0;
  uint64_t v72 = (uint64_t)v30;
  unint64_t v73 = v28;
  LODWORD(v74) = 0;
  LOBYTE(v57) = 0;
  int v59 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64i>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64i>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v57, (uint64_t)&v72);
  char v60 = 1;
  if (v74 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetInteger64iEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v74])(&v69, &v72);
  }
LABEL_50:
  if (v66 && v65 != -1) {
    ((void (*)(uint64_t *, IPC::Decoder **))off_1EE9E9D68[v65])(&v72, &v64);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v67);
  if (v60)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64i>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64i>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v57);
    if (v60)
    {
      if (v59 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetInteger64iEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v59])(&v72, &v57);
      }
    }
    return result;
  }
  if (!v63) {
    goto LABEL_104;
  }
  unint64_t v32 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - v61;
  if (v32 < v61)
  {
    unint64_t v34 = 0;
  }
  else
  {
    unint64_t v34 = 0;
    if (v33 <= 0xFFFFFFFFFFFFFFFDLL && v33 + 2 <= v62)
    {
      *(_WORD *)(v61 + v33) = 2870;
      unint64_t v34 = v33 + 2;
    }
  }
  unint64_t v35 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v6[8];
  if (v35 + 16 >= v36) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v34 <= 0x10) {
      unint64_t v34 = 16;
    }
    unint64_t v37 = v35 + v34;
    if (v36 <= v37) {
      unint64_t v37 = 0;
    }
    v6[10] = v37;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v37);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v64, v15);
    char v6 = (uint64_t *)v64;
    uint64_t v72 = 0;
    IPC::Connection::createSyncMessageEncoder(3658, a3, &v72, &v69);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v69, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v72, (uint64_t *)&v69, 0, (uint64_t)&v57, v9);
    a2 = (int *)v58;
    if (v58)
    {
      if (v58 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v57;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    unint64_t v38 = IPC::Decoder::decode<std::tuple<long long>>(v57);
    if (!(_BYTE)v39) {
      break;
    }
    if (!v58)
    {
      unint64_t v40 = v57;
      uint64_t v57 = 0;
      *(void *)a4 = v40;
      *(void *)(a4 + 8) = v38;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9D68[a2])(&v68, &v57);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v35 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v58;
  if (v58 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v41 = v69;
  unint64_t v69 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v39);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v64);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64i>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64i>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetInteger64iEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA0C8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetInteger64iEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  a2[1] = a3[1];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetInteger64iEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetProgrami,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v56, v9);
    if (!(_BYTE)v58) {
      goto LABEL_101;
    }
    unint64_t v44 = v56;
    unint64_t v43 = v57;
    unint64_t v45 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v56;
    if (v45 >= (unint64_t)v56)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v57)
      {
        *(_WORD *)((char *)v56 + v46) = 2871;
        goto LABEL_87;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_87:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
        goto LABEL_111;
      }
      *(void *)unint64_t v49 = a3;
    }
    if (v43)
    {
      uint64_t v51 = v6[9];
      unint64_t v52 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v6[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v6[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v55 = 17;
    goto LABEL_102;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v60, v9);
  if (!v62)
  {
LABEL_101:
    char v55 = 15;
LABEL_102:
    *(unsigned char *)a4 = v55;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v60;
  unint64_t v14 = v61;
  unint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v66, v16))
  {
    LOBYTE(v71) = 11;
    uint64_t v11 = 1;
    LODWORD(v73) = 1;
    LOBYTE(v56) = 0;
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgrami>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgrami>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
    char v59 = 1;
    if (v73 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetProgramiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
    }
    goto LABEL_53;
  }
  uint64_t v71 = v13;
  unint64_t v72 = v14;
  unint64_t v73 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3663;
    unint64_t v73 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v72 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v73 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v71, a2);
    if (!v72)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v73;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v73 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v68, (uint64_t)(v6 + 8), v9);
    if (!v70)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_37:
      char v65 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v68, (uint64_t *)v11);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      char v63 = (uint64_t *)v67;
      int v64 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v66, v16, 0xE4Fu, (uint64_t)&v68, v9);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v68);
    char v65 = 1;
    if (v69 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v67, &v68);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v66);
    if (!v65)
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
      goto LABEL_50;
    }
    if (v64 == 1)
    {
      char v30 = (char)v63;
LABEL_49:
      LOBYTE(v56) = v30;
      int v58 = 1;
      char v59 = 1;
      goto LABEL_50;
    }
    if (v64) {
      goto LABEL_107;
    }
    uint64_t v28 = IPC::Decoder::decode<std::tuple<float>>(v63);
    if ((v28 & 0xFF00000000) == 0)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v65) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v72 = 0;
  }
  if (v64) {
    goto LABEL_107;
  }
  char v29 = v63;
  char v63 = 0;
  uint64_t v71 = (uint64_t)v29;
  LODWORD(v72) = v28;
  LODWORD(v73) = 0;
  LOBYTE(v56) = 0;
  int v58 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgrami>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgrami>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
  char v59 = 1;
  if (v73 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetProgramiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
  }
LABEL_50:
  if (v65 && v64 != -1) {
    ((void (*)(uint64_t *, uint64_t **))off_1EE9E9D68[v64])(&v71, &v63);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v59)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgrami>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgrami>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v56);
    if (v59)
    {
      if (v58 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetProgramiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v58])(&v71, &v56);
      }
    }
    return result;
  }
  if (!v62) {
    goto LABEL_104;
  }
  unint64_t v31 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v60;
  if (v31 < v60)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v61)
    {
      *(_WORD *)(v60 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, v15);
    char v6 = v63;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3663, a3, &v71, &v68);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v71, (uint64_t *)&v68, 0, (uint64_t)&v56, v9);
    a2 = (int *)v57;
    if (v57)
    {
      if (v57 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v56;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    uint64_t v37 = IPC::Decoder::decode<std::tuple<float>>(v56);
    if ((v37 & 0xFF00000000) == 0) {
      break;
    }
    if (!v57)
    {
      unint64_t v39 = v56;
      char v56 = 0;
      *(void *)a4 = v39;
      *(_DWORD *)(a4 + 8) = v37;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[a2])(&v67, &v56);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v57;
  if (v57 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v40 = v68;
  unsigned __int8 v68 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgrami>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgrami>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetProgramiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA0D8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetProgramiEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetProgramiEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetBooleanv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v57, v9);
    if (!v58) {
      goto LABEL_97;
    }
    unint64_t v44 = *((void *)&v57 + 1);
    uint64_t v45 = v57;
    unint64_t v46 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = v46 - v57;
    if (v46 >= (unint64_t)v57)
    {
      unint64_t v48 = v47 + 2;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v48 <= *((void *)&v57 + 1))
      {
        *(_WORD *)(v57 + v47) = 2871;
        goto LABEL_83;
      }
      unint64_t v44 = 0;
    }
    unint64_t v48 = 0;
LABEL_83:
    int v50 = (void *)((v45 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v50 >= v45 + v48)
    {
      unint64_t v48 = (unint64_t)v50 - v45 + 8;
      if ((unint64_t)v50 - v45 > 0xFFFFFFFFFFFFFFF7 || v48 > v44) {
        goto LABEL_108;
      }
      *int v50 = a3;
    }
    if (v44)
    {
      uint64_t v52 = v6[9];
      unint64_t v53 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v54 = v6[8];
      if (v53 + 16 >= v54) {
        unint64_t v53 = 0;
      }
      if (v48 <= 0x10) {
        unint64_t v48 = 16;
      }
      unint64_t v55 = v53 + v48;
      if (v54 <= v55) {
        unint64_t v55 = 0;
      }
      v6[10] = v55;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v52 + 16) + 128), v55) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_108:
    char v56 = 17;
    goto LABEL_98;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v61, v9);
  if (!v63)
  {
LABEL_97:
    char v56 = 15;
LABEL_98:
    *(unsigned char *)a4 = v56;
    *(_DWORD *)(a4 + 24) = 1;
    return result;
  }
  unint64_t v14 = v61;
  unint64_t v13 = v62;
  unint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v69, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v69, v16))
  {
    v67[0] = 11;
    uint64_t v11 = 1;
    int v68 = 1;
    LOBYTE(v57) = 0;
    int v59 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBooleanv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBooleanv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v57, (uint64_t)v67);
    char v60 = 1;
    if (v68 != -1) {
      ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetBooleanvEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v68])(v71, v67);
    }
    goto LABEL_51;
  }
  *(void *)unint64_t v67 = v14;
  *(void *)&v67[8] = v13;
  *(void *)&v67[16] = 0;
  unint64_t v17 = (v14 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v14;
  if (v17 < v14)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_101;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v13) {
      goto LABEL_101;
    }
    *(_WORD *)(v14 + v18) = 3648;
    *(void *)&v67[16] = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v14 + v19)
    {
      if ((unint64_t)v20 - v14 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v14 + 8 > v13)
      {
        *(void *)&v67[8] = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        *(void *)&v67[16] = (char *)v20 - v14 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned long>,0ul,1ul>((uint64_t *)v67, (uint64_t)a2);
    if (!*(void *)&v67[8])
    {
      LOBYTE(v64) = 0;
      char v66 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = *(void *)&v67[16];
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (*(void *)&v67[16] <= 0x10uLL) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)v71, (uint64_t)(v6 + 8), v9);
    if (!v72)
    {
      LOBYTE(v64) = 16;
      int v65 = 1;
LABEL_37:
      char v66 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v70, (uint64_t)v71, (uint64_t *)v11);
    if (*((_WORD *)v70 + 25) != 2870)
    {
      int v64 = (uint64_t *)v70;
      int v65 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v70);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v69, v16, 0xE40u, (uint64_t)v71, v9);
    LOBYTE(v64) = 0;
    int v65 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)v71);
    char v66 = 1;
    if (*(_DWORD *)&v71[8] != -1) {
      ((void (*)(IPC::Decoder **, unsigned char *))off_1EE9E9D68[*(unsigned int *)&v71[8]])(&v70, v71);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v69);
    if (!v66)
    {
      LOBYTE(v57) = 0;
      char v60 = 0;
      goto LABEL_51;
    }
    if (v65 == 1)
    {
      LOBYTE(v57) = (_BYTE)v64;
      int v30 = 1;
      int v59 = 1;
      char v60 = 1;
      goto LABEL_50;
    }
    if (v65) {
      goto LABEL_104;
    }
    IPC::Decoder::decode<std::tuple<std::span<BOOL const,18446744073709551615ul>>>((uint64_t)v67, v64);
    if (!v67[16])
    {
      LOBYTE(v57) = 13;
      int v59 = 1;
      char v60 = 1;
      goto LABEL_48;
    }
    char v28 = v67[0];
    *(void *)uint64_t v71 = *(void *)&v67[1];
    *(void *)&v71[7] = *(void *)&v67[8];
    if (v66) {
      break;
    }
LABEL_100:
    __break(1u);
LABEL_101:
    unint64_t v13 = 0;
    unint64_t v19 = 0;
    *(void *)&v67[8] = 0;
  }
  if (v65) {
    goto LABEL_104;
  }
  char v29 = v64;
  int v64 = 0;
  *(void *)&v67[9] = *(void *)v71;
  *(void *)&v67[16] = *(void *)&v71[7];
  *(void *)unint64_t v67 = v29;
  v67[8] = v28;
  int v68 = 0;
  LOBYTE(v57) = 0;
  int v59 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBooleanv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBooleanv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v57, (uint64_t)v67);
  char v60 = 1;
  if (v68 != -1) {
    ((void (*)(IPC::Decoder **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetBooleanvEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v68])(&v70, v67);
  }
LABEL_48:
  if (v66)
  {
    int v30 = v65;
    if (v65 != -1) {
LABEL_50:
    }
      ((void (*)(unsigned char *, uint64_t **))off_1EE9E9D68[v30])(v67, &v64);
  }
LABEL_51:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v69);
  if (v60)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 24) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBooleanv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBooleanv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v57);
    if (v60)
    {
      if (v59 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(unsigned char *, long long *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetBooleanvEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v59])(v67, &v57);
      }
    }
    return result;
  }
  if (!v63) {
    goto LABEL_100;
  }
  unint64_t v31 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v61;
  if (v31 < v61)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v62)
    {
      *(_WORD *)(v61 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_105;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v69, v15);
    char v6 = (uint64_t *)v69;
    int v64 = 0;
    IPC::Connection::createSyncMessageEncoder(3648, a3, (uint64_t *)&v64, &v70);
    IPC::ArgumentCoder<std::tuple<unsigned int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned long>,0ul,1ul>(v70, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v64, (uint64_t *)&v70, 0, (uint64_t)v67, v9);
    if (*(_DWORD *)&v67[8])
    {
      if (*(_DWORD *)&v67[8] == 1)
      {
        *(unsigned char *)a4 = v67[0];
        int v37 = 1;
        *(_DWORD *)(a4 + 24) = 1;
        goto LABEL_72;
      }
      goto LABEL_104;
    }
    IPC::Decoder::decode<std::tuple<std::span<BOOL const,18446744073709551615ul>>>((uint64_t)&v57, *(uint64_t **)v67);
    if (!v58) {
      break;
    }
    char v39 = v57;
    *(void *)uint64_t v71 = *(void *)((char *)&v57 + 1);
    *(void *)&v71[7] = *((void *)&v57 + 1);
    int v37 = *(_DWORD *)&v67[8];
    if (!*(_DWORD *)&v67[8])
    {
      uint64_t v40 = *(void *)v67;
      *(void *)unint64_t v67 = 0;
      *(void *)(a4 + 9) = *(void *)v71;
      *(void *)(a4 + 16) = *(void *)&v71[7];
      *(void *)a4 = v40;
      *(unsigned char *)(a4 + 8) = v39;
      *(_DWORD *)(a4 + 24) = 0;
      goto LABEL_72;
    }
LABEL_104:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_105:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 24) = 1;
  int v37 = *(_DWORD *)&v67[8];
  if (*(_DWORD *)&v67[8] == -1) {
    goto LABEL_73;
  }
LABEL_72:
  ((void (*)(long long *, unsigned char *))off_1EE9E9D68[v37])(&v57, v67);
LABEL_73:
  unint64_t v41 = v70;
  char v70 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v38);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v69);
}

uint64_t IPC::Decoder::decode<std::tuple<std::span<BOOL const,18446744073709551615ul>>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = (unsigned char *)result;
  unint64_t v4 = (a2[2] + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 < v7 || v6 - v7 <= 7)
  {
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v20 = a2[3];
    if (v20)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
        uint64_t v19 = *a2;
        unint64_t v18 = a2[1];
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
      }
    }
    goto LABEL_31;
  }
  double v9 = (unint64_t *)(v5 + v7);
  uint64_t v10 = v5 + v7 + 8;
  a2[2] = v10;
  if (!v5)
  {
    unint64_t v18 = v6;
    uint64_t v19 = 0;
LABEL_31:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v21 = a2[3];
    if (v21 && v18) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v21 + 16))(v21, v19, v18);
    }
    goto LABEL_18;
  }
  unint64_t v11 = *v9;
  if (!v11)
  {
    uint64_t v10 = 0;
    goto LABEL_26;
  }
  unint64_t v12 = v6 - (v10 - v5);
  if (v6 < v10 - v5 || v12 < v11)
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v22 = a2[3];
    if (v22 && v6) {
      (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
    }
    goto LABEL_18;
  }
  a2[2] = v10 + v11;
  if (v12 == -1 || v11 != -1)
  {
LABEL_26:
    *(void *)unint64_t result = v10;
    *(void *)(result + 8) = v11;
    *(unsigned char *)(result + 16) = 1;
    return result;
  }
LABEL_18:
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = a2[3];
  if (result)
  {
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v15);
      uint64_t v16 = a2[1];
      unint64_t result = a2[3];
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  unsigned char *v3 = 0;
  v3[16] = 0;
  *a2 = 0;
  a2[1] = 0;
  if (result && v16)
  {
    unint64_t v17 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v17();
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBooleanv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBooleanv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetBooleanvEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA0E8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetBooleanvEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  __n128 result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetBooleanvEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v56, v9);
    if (!(_BYTE)v58) {
      goto LABEL_101;
    }
    unint64_t v44 = v56;
    unint64_t v43 = v57;
    unint64_t v45 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v56;
    if (v45 >= (unint64_t)v56)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v57)
      {
        *(_WORD *)((char *)v56 + v46) = 2871;
        goto LABEL_87;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_87:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
        goto LABEL_111;
      }
      *(void *)unint64_t v49 = a3;
    }
    if (v43)
    {
      uint64_t v51 = v6[9];
      unint64_t v52 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v6[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v6[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v55 = 17;
    goto LABEL_102;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v60, v9);
  if (!v62)
  {
LABEL_101:
    char v55 = 15;
LABEL_102:
    *(unsigned char *)a4 = v55;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v60;
  unint64_t v14 = v61;
  uint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v66, v16))
  {
    LOBYTE(v71) = 11;
    uint64_t v11 = 1;
    LODWORD(v73) = 1;
    LOBYTE(v56) = 0;
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
    char v59 = 1;
    if (v73 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
    }
    goto LABEL_53;
  }
  uint64_t v71 = v13;
  unint64_t v72 = v14;
  unint64_t v73 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3655;
    unint64_t v73 = v18 + 2;
  }
  while (1)
  {
    uint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v72 = 0;
      }
      else
      {
        *uint64_t v20 = v16;
        unint64_t v73 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode(&v71, a2);
    if (!v72)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v73;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v73 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v68, (uint64_t)(v6 + 8), v9);
    if (!v70)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_37:
      char v65 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v68, (uint64_t *)v11);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      char v63 = (uint64_t *)v67;
      int v64 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v66, v16, 0xE47u, (uint64_t)&v68, v9);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v68);
    char v65 = 1;
    if (v69 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v67, &v68);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v66);
    if (!v65)
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
      goto LABEL_50;
    }
    if (v64 == 1)
    {
      char v30 = (char)v63;
LABEL_49:
      LOBYTE(v56) = v30;
      int v58 = 1;
      char v59 = 1;
      goto LABEL_50;
    }
    if (v64) {
      goto LABEL_107;
    }
    uint64_t v28 = IPC::Decoder::decode<std::tuple<float>>(v63);
    if ((v28 & 0xFF00000000) == 0)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v65) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v72 = 0;
  }
  if (v64) {
    goto LABEL_107;
  }
  char v29 = v63;
  char v63 = 0;
  uint64_t v71 = (uint64_t)v29;
  LODWORD(v72) = v28;
  LODWORD(v73) = 0;
  LOBYTE(v56) = 0;
  int v58 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
  char v59 = 1;
  if (v73 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
  }
LABEL_50:
  if (v65 && v64 != -1) {
    ((void (*)(uint64_t *, uint64_t **))off_1EE9E9D68[v64])(&v71, &v63);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v59)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v56);
    if (v59)
    {
      if (v58 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v58])(&v71, &v56);
      }
    }
    return result;
  }
  if (!v62) {
    goto LABEL_104;
  }
  unint64_t v31 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v60;
  if (v31 < v60)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v61)
    {
      *(_WORD *)(v60 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, v15);
    char v6 = v63;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3655, a3, &v71, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v71, (uint64_t *)&v68, 0, (uint64_t)&v56, v9);
    a2 = (int *)v57;
    if (v57)
    {
      if (v57 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v56;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    uint64_t v37 = IPC::Decoder::decode<std::tuple<float>>(v56);
    if ((v37 & 0xFF00000000) == 0) {
      break;
    }
    if (!v57)
    {
      char v39 = v56;
      char v56 = 0;
      *(void *)a4 = v39;
      *(_DWORD *)(a4 + 8) = v37;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[a2])(&v67, &v56);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v57;
  if (v57 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  uint64_t v40 = v68;
  int v68 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA0F8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

_DWORD *IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul>(IPC::Encoder *a1, int *a2)
{
  int v4 = *a2;
  uint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3) {
    goto LABEL_7;
  }
  _DWORD *v5 = v4;
  int v7 = a2[1];
  double v8 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v9 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990781BCLL);
  }
  *double v8 = v7;
  int v10 = a2[2];
  __n128 result = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v12 <= 3)
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x19907819CLL);
  }
  _DWORD *result = v10;
  return result;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetProgramInfoLog,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v64, v9);
    if (!(_BYTE)v66) {
      goto LABEL_105;
    }
    unint64_t v52 = v64;
    unint64_t v51 = v65;
    unint64_t v53 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v54 = v53 - (void)v64;
    if (v53 >= (unint64_t)v64)
    {
      unint64_t v55 = v54 + 2;
      if (v54 <= 0xFFFFFFFFFFFFFFFDLL && v55 <= v65)
      {
        *(_WORD *)((char *)v64 + v54) = 2871;
        goto LABEL_91;
      }
      unint64_t v51 = 0;
    }
    unint64_t v55 = 0;
LABEL_91:
    unint64_t v57 = (char *)(((unint64_t)v52 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v57 >= (char *)v52 + v55)
    {
      unint64_t v55 = v57 - (char *)v52 + 8;
      if ((unint64_t)(v57 - (char *)v52) > 0xFFFFFFFFFFFFFFF7 || v55 > v51) {
        goto LABEL_117;
      }
      *(void *)unint64_t v57 = a3;
    }
    if (v51)
    {
      uint64_t v59 = v6[9];
      unint64_t v60 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v61 = v6[8];
      if (v60 + 16 >= v61) {
        unint64_t v60 = 0;
      }
      if (v55 <= 0x10) {
        unint64_t v55 = 16;
      }
      unint64_t v62 = v60 + v55;
      if (v61 <= v62) {
        unint64_t v62 = 0;
      }
      v6[10] = v62;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v59 + 16) + 128), v62) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_117:
    char v63 = 17;
    goto LABEL_106;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v68, v9);
  if (!v70)
  {
LABEL_105:
    char v63 = 15;
LABEL_106:
    *(unsigned char *)a4 = v63;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v68;
  unint64_t v14 = v69;
  uint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v76, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v76, v16))
  {
    LOBYTE(v78) = 11;
    uint64_t v11 = 1;
    int v80 = 1;
    LOBYTE(v64) = 0;
    int v66 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)&v78);
    char v67 = 1;
    if (v80 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v80])(&v73, &v78);
    }
    goto LABEL_59;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3662;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_110;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    char v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v73) = 0;
        unsigned __int8 v75 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = v6[8];
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    v6[10] = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v78, (uint64_t)(v6 + 8), v9);
    if (!(_BYTE)v80)
    {
      LOBYTE(v73) = 16;
      int v74 = 1;
LABEL_41:
      unsigned __int8 v75 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v71, (uint64_t)&v78, (uint64_t *)v11);
    if (*((_WORD *)v71 + 25) != 2870)
    {
      unint64_t v73 = v71;
      int v74 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v71);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v76, v16, 0xE4Eu, (uint64_t)&v78, v9);
    LOBYTE(v73) = 0;
    int v74 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v73, (uint64_t)&v78);
    unsigned __int8 v75 = 1;
    if (v79 != -1) {
      ((void (*)(WTF::StringImpl **, IPC::Decoder **))off_1EE9E9D68[v79])(&v71, &v78);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v76);
    if (!v75)
    {
      LOBYTE(v64) = 0;
      char v67 = 0;
      goto LABEL_59;
    }
    if (v74 == 1)
    {
      LOBYTE(v64) = (_BYTE)v73;
      int v37 = 1;
      int v66 = 1;
      char v67 = 1;
      goto LABEL_58;
    }
    if (v74) {
      goto LABEL_113;
    }
    LOBYTE(v71) = 0;
    char v72 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v73, (uint64_t *)&v71);
    if (!v72)
    {
      LOBYTE(v64) = 13;
      int v66 = 1;
      char v67 = 1;
      goto LABEL_56;
    }
    unint64_t v20 = v75;
    if (v75) {
      break;
    }
LABEL_109:
    __break(1u);
LABEL_110:
    unint64_t v19 = 0;
  }
  if (v74) {
    goto LABEL_113;
  }
  unint64_t v33 = v73;
  unint64_t v73 = 0;
  unint64_t v34 = v71;
  uint64_t v71 = 0;
  int v78 = v33;
  unint64_t v79 = v34;
  int v80 = 0;
  LOBYTE(v64) = 0;
  int v66 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)&v78);
  char v67 = 1;
  if (v80 != -1) {
    ((void (*)(char *, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v80])(&v77, &v78);
  }
  if (v72)
  {
    unint64_t v36 = v71;
    uint64_t v71 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v35);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
LABEL_56:
  if (v75)
  {
    int v37 = v74;
    if (v74 != -1) {
LABEL_58:
    }
      ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9D68[v37])(&v78, &v73);
  }
LABEL_59:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v76);
  if (v67)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v64);
    if (v67)
    {
      if (v66 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v66])(&v78, &v64);
      }
    }
    return result;
  }
  unint64_t v20 = v70;
  if (!v70) {
    goto LABEL_109;
  }
  unint64_t v38 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = v38 - v68;
  if (v38 < v68)
  {
    unint64_t v40 = 0;
  }
  else
  {
    unint64_t v40 = 0;
    if (v39 <= 0xFFFFFFFFFFFFFFFDLL && v39 + 2 <= v69)
    {
      *(_WORD *)(v68 + v39) = 2870;
      unint64_t v40 = v39 + 2;
    }
  }
  unint64_t v41 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v42 = v6[8];
  if (v41 + 16 >= v42) {
    goto LABEL_114;
  }
  while (1)
  {
    if (v40 <= 0x10) {
      unint64_t v40 = 16;
    }
    unint64_t v43 = v41 + v40;
    if (v42 <= v43) {
      unint64_t v43 = 0;
    }
    v6[10] = v43;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v43);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v76, v15);
    unint64_t v6 = (uint64_t *)v76;
    unint64_t v73 = 0;
    IPC::Connection::createSyncMessageEncoder(3662, a3, (uint64_t *)&v73, &v71);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v71, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v73, (uint64_t *)&v71, 0, (uint64_t)&v64, v9);
    if (v65)
    {
      if (v65 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v64;
        int v44 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_80;
      }
      goto LABEL_113;
    }
    LOBYTE(v78) = 0;
    LOBYTE(v79) = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v64, (uint64_t *)&v78);
    if (!(_BYTE)v79) {
      break;
    }
    int v44 = v65;
    if (!v65)
    {
      unint64_t v46 = v64;
      int v64 = 0;
      uint64_t v47 = (uint64_t)v78;
      *(void *)a4 = v46;
      *(void *)(a4 + 8) = v47;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_80;
    }
LABEL_113:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_114:
    unint64_t v41 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v44 = v65;
  if (v65 == -1) {
    goto LABEL_81;
  }
LABEL_80:
  ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9D68[v44])(&v78, &v64);
LABEL_81:
  unint64_t v48 = v71;
  uint64_t v71 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v45);
    WTF::fastFree(v49, v50);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v76);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA108[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v56, v9);
    if (!(_BYTE)v58) {
      goto LABEL_101;
    }
    int v44 = v56;
    unint64_t v43 = v57;
    unint64_t v45 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v56;
    if (v45 >= (unint64_t)v56)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v57)
      {
        *(_WORD *)((char *)v56 + v46) = 2871;
        goto LABEL_87;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_87:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
        goto LABEL_111;
      }
      *(void *)unint64_t v49 = a3;
    }
    if (v43)
    {
      uint64_t v51 = v6[9];
      unint64_t v52 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v6[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v6[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v55 = 17;
    goto LABEL_102;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v60, v9);
  if (!v62)
  {
LABEL_101:
    char v55 = 15;
LABEL_102:
    *(unsigned char *)a4 = v55;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v60;
  unint64_t v14 = v61;
  uint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v66, v16))
  {
    LOBYTE(v71) = 11;
    uint64_t v11 = 1;
    LODWORD(v73) = 1;
    LOBYTE(v56) = 0;
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
    char v59 = 1;
    if (v73 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
    }
    goto LABEL_53;
  }
  uint64_t v71 = v13;
  unint64_t v72 = v14;
  unint64_t v73 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3669;
    unint64_t v73 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v72 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v73 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v71, a2);
    if (!v72)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v73;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v73 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v68, (uint64_t)(v6 + 8), v9);
    if (!v70)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_37:
      char v65 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v68, (uint64_t *)v11);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      char v63 = (uint64_t *)v67;
      int v64 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v66, v16, 0xE55u, (uint64_t)&v68, v9);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v68);
    char v65 = 1;
    if (v69 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v67, &v68);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v66);
    if (!v65)
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
      goto LABEL_50;
    }
    if (v64 == 1)
    {
      char v30 = (char)v63;
LABEL_49:
      LOBYTE(v56) = v30;
      int v58 = 1;
      char v59 = 1;
      goto LABEL_50;
    }
    if (v64) {
      goto LABEL_107;
    }
    uint64_t v28 = IPC::Decoder::decode<std::tuple<float>>(v63);
    if ((v28 & 0xFF00000000) == 0)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v65) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v72 = 0;
  }
  if (v64) {
    goto LABEL_107;
  }
  unint64_t v29 = v63;
  char v63 = 0;
  uint64_t v71 = (uint64_t)v29;
  LODWORD(v72) = v28;
  LODWORD(v73) = 0;
  LOBYTE(v56) = 0;
  int v58 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
  char v59 = 1;
  if (v73 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
  }
LABEL_50:
  if (v65 && v64 != -1) {
    ((void (*)(uint64_t *, uint64_t **))off_1EE9E9D68[v64])(&v71, &v63);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v59)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v56);
    if (v59)
    {
      if (v58 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v58])(&v71, &v56);
      }
    }
    return result;
  }
  if (!v62) {
    goto LABEL_104;
  }
  unint64_t v31 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v60;
  if (v31 < v60)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v61)
    {
      *(_WORD *)(v60 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, v15);
    char v6 = v63;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3669, a3, &v71, &v68);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v71, (uint64_t *)&v68, 0, (uint64_t)&v56, v9);
    a2 = (int *)v57;
    if (v57)
    {
      if (v57 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v56;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    uint64_t v37 = IPC::Decoder::decode<std::tuple<float>>(v56);
    if ((v37 & 0xFF00000000) == 0) {
      break;
    }
    if (!v57)
    {
      unint64_t v39 = v56;
      char v56 = 0;
      *(void *)a4 = v39;
      *(_DWORD *)(a4 + 8) = v37;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[a2])(&v67, &v56);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v57;
  if (v57 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v40 = v68;
  unint64_t v68 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA118[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetShaderi,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v56, v9);
    if (!(_BYTE)v58) {
      goto LABEL_101;
    }
    int v44 = v56;
    unint64_t v43 = v57;
    unint64_t v45 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v56;
    if (v45 >= (unint64_t)v56)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v57)
      {
        *(_WORD *)((char *)v56 + v46) = 2871;
        goto LABEL_87;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_87:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
        goto LABEL_111;
      }
      *(void *)unint64_t v49 = a3;
    }
    if (v43)
    {
      uint64_t v51 = v6[9];
      unint64_t v52 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v6[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v6[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v55 = 17;
    goto LABEL_102;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v60, v9);
  if (!v62)
  {
LABEL_101:
    char v55 = 15;
LABEL_102:
    *(unsigned char *)a4 = v55;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v60;
  unint64_t v14 = v61;
  uint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v66, v16))
  {
    LOBYTE(v71) = 11;
    uint64_t v11 = 1;
    LODWORD(v73) = 1;
    LOBYTE(v56) = 0;
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderi>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderi>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
    char v59 = 1;
    if (v73 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10GetShaderiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
    }
    goto LABEL_53;
  }
  uint64_t v71 = v13;
  unint64_t v72 = v14;
  unint64_t v73 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3675;
    unint64_t v73 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v72 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v73 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v71, a2);
    if (!v72)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v73;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v73 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v68, (uint64_t)(v6 + 8), v9);
    if (!v70)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_37:
      char v65 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v68, (uint64_t *)v11);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      char v63 = (uint64_t *)v67;
      int v64 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v66, v16, 0xE5Bu, (uint64_t)&v68, v9);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v68);
    char v65 = 1;
    if (v69 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v67, &v68);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v66);
    if (!v65)
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
      goto LABEL_50;
    }
    if (v64 == 1)
    {
      char v30 = (char)v63;
LABEL_49:
      LOBYTE(v56) = v30;
      int v58 = 1;
      char v59 = 1;
      goto LABEL_50;
    }
    if (v64) {
      goto LABEL_107;
    }
    uint64_t v28 = IPC::Decoder::decode<std::tuple<float>>(v63);
    if ((v28 & 0xFF00000000) == 0)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v65) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v72 = 0;
  }
  if (v64) {
    goto LABEL_107;
  }
  unint64_t v29 = v63;
  char v63 = 0;
  uint64_t v71 = (uint64_t)v29;
  LODWORD(v72) = v28;
  LODWORD(v73) = 0;
  LOBYTE(v56) = 0;
  int v58 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderi>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderi>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
  char v59 = 1;
  if (v73 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10GetShaderiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
  }
LABEL_50:
  if (v65 && v64 != -1) {
    ((void (*)(uint64_t *, uint64_t **))off_1EE9E9D68[v64])(&v71, &v63);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v59)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderi>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderi>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v56);
    if (v59)
    {
      if (v58 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10GetShaderiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v58])(&v71, &v56);
      }
    }
    return result;
  }
  if (!v62) {
    goto LABEL_104;
  }
  unint64_t v31 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v60;
  if (v31 < v60)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v61)
    {
      *(_WORD *)(v60 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, v15);
    char v6 = v63;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3675, a3, &v71, &v68);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v71, (uint64_t *)&v68, 0, (uint64_t)&v56, v9);
    a2 = (int *)v57;
    if (v57)
    {
      if (v57 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v56;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    uint64_t v37 = IPC::Decoder::decode<std::tuple<float>>(v56);
    if ((v37 & 0xFF00000000) == 0) {
      break;
    }
    if (!v57)
    {
      unint64_t v39 = v56;
      char v56 = 0;
      *(void *)a4 = v39;
      *(_DWORD *)(a4 + 8) = v37;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[a2])(&v67, &v56);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v57;
  if (v57 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v40 = v68;
  unint64_t v68 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderi>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderi>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10GetShaderiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA128[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10GetShaderiEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10GetShaderiEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetShaderInfoLog,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v64, v9);
    if (!(_BYTE)v66) {
      goto LABEL_105;
    }
    unint64_t v52 = v64;
    unint64_t v51 = v65;
    unint64_t v53 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v54 = v53 - (void)v64;
    if (v53 >= (unint64_t)v64)
    {
      unint64_t v55 = v54 + 2;
      if (v54 <= 0xFFFFFFFFFFFFFFFDLL && v55 <= v65)
      {
        *(_WORD *)((char *)v64 + v54) = 2871;
        goto LABEL_91;
      }
      unint64_t v51 = 0;
    }
    unint64_t v55 = 0;
LABEL_91:
    unint64_t v57 = (char *)(((unint64_t)v52 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v57 >= (char *)v52 + v55)
    {
      unint64_t v55 = v57 - (char *)v52 + 8;
      if ((unint64_t)(v57 - (char *)v52) > 0xFFFFFFFFFFFFFFF7 || v55 > v51) {
        goto LABEL_117;
      }
      *(void *)unint64_t v57 = a3;
    }
    if (v51)
    {
      uint64_t v59 = v6[9];
      unint64_t v60 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v61 = v6[8];
      if (v60 + 16 >= v61) {
        unint64_t v60 = 0;
      }
      if (v55 <= 0x10) {
        unint64_t v55 = 16;
      }
      unint64_t v62 = v60 + v55;
      if (v61 <= v62) {
        unint64_t v62 = 0;
      }
      v6[10] = v62;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v59 + 16) + 128), v62) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_117:
    char v63 = 17;
    goto LABEL_106;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v68, v9);
  if (!v70)
  {
LABEL_105:
    char v63 = 15;
LABEL_106:
    *(unsigned char *)a4 = v63;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v68;
  unint64_t v14 = v69;
  uint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v76, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v76, v16))
  {
    LOBYTE(v78) = 11;
    uint64_t v11 = 1;
    int v80 = 1;
    LOBYTE(v64) = 0;
    int v66 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)&v78);
    char v67 = 1;
    if (v80 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v80])(&v73, &v78);
    }
    goto LABEL_59;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3672;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_110;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    char v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v73) = 0;
        unsigned __int8 v75 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = v6[8];
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    v6[10] = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v78, (uint64_t)(v6 + 8), v9);
    if (!(_BYTE)v80)
    {
      LOBYTE(v73) = 16;
      int v74 = 1;
LABEL_41:
      unsigned __int8 v75 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v71, (uint64_t)&v78, (uint64_t *)v11);
    if (*((_WORD *)v71 + 25) != 2870)
    {
      unint64_t v73 = v71;
      int v74 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v71);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v76, v16, 0xE58u, (uint64_t)&v78, v9);
    LOBYTE(v73) = 0;
    int v74 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v73, (uint64_t)&v78);
    unsigned __int8 v75 = 1;
    if (v79 != -1) {
      ((void (*)(WTF::StringImpl **, IPC::Decoder **))off_1EE9E9D68[v79])(&v71, &v78);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v76);
    if (!v75)
    {
      LOBYTE(v64) = 0;
      char v67 = 0;
      goto LABEL_59;
    }
    if (v74 == 1)
    {
      LOBYTE(v64) = (_BYTE)v73;
      int v37 = 1;
      int v66 = 1;
      char v67 = 1;
      goto LABEL_58;
    }
    if (v74) {
      goto LABEL_113;
    }
    LOBYTE(v71) = 0;
    char v72 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v73, (uint64_t *)&v71);
    if (!v72)
    {
      LOBYTE(v64) = 13;
      int v66 = 1;
      char v67 = 1;
      goto LABEL_56;
    }
    unint64_t v20 = v75;
    if (v75) {
      break;
    }
LABEL_109:
    __break(1u);
LABEL_110:
    unint64_t v19 = 0;
  }
  if (v74) {
    goto LABEL_113;
  }
  unint64_t v33 = v73;
  unint64_t v73 = 0;
  unint64_t v34 = v71;
  uint64_t v71 = 0;
  int v78 = v33;
  unint64_t v79 = v34;
  int v80 = 0;
  LOBYTE(v64) = 0;
  int v66 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)&v78);
  char v67 = 1;
  if (v80 != -1) {
    ((void (*)(char *, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v80])(&v77, &v78);
  }
  if (v72)
  {
    unint64_t v36 = v71;
    uint64_t v71 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v35);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
LABEL_56:
  if (v75)
  {
    int v37 = v74;
    if (v74 != -1) {
LABEL_58:
    }
      ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9D68[v37])(&v78, &v73);
  }
LABEL_59:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v76);
  if (v67)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v64);
    if (v67)
    {
      if (v66 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v66])(&v78, &v64);
      }
    }
    return result;
  }
  unint64_t v20 = v70;
  if (!v70) {
    goto LABEL_109;
  }
  unint64_t v38 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = v38 - v68;
  if (v38 < v68)
  {
    unint64_t v40 = 0;
  }
  else
  {
    unint64_t v40 = 0;
    if (v39 <= 0xFFFFFFFFFFFFFFFDLL && v39 + 2 <= v69)
    {
      *(_WORD *)(v68 + v39) = 2870;
      unint64_t v40 = v39 + 2;
    }
  }
  unint64_t v41 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v42 = v6[8];
  if (v41 + 16 >= v42) {
    goto LABEL_114;
  }
  while (1)
  {
    if (v40 <= 0x10) {
      unint64_t v40 = 16;
    }
    unint64_t v43 = v41 + v40;
    if (v42 <= v43) {
      unint64_t v43 = 0;
    }
    v6[10] = v43;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v43);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v76, v15);
    char v6 = (uint64_t *)v76;
    unint64_t v73 = 0;
    IPC::Connection::createSyncMessageEncoder(3672, a3, (uint64_t *)&v73, &v71);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v71, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v73, (uint64_t *)&v71, 0, (uint64_t)&v64, v9);
    if (v65)
    {
      if (v65 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v64;
        int v44 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_80;
      }
      goto LABEL_113;
    }
    LOBYTE(v78) = 0;
    LOBYTE(v79) = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v64, (uint64_t *)&v78);
    if (!(_BYTE)v79) {
      break;
    }
    int v44 = v65;
    if (!v65)
    {
      unint64_t v46 = v64;
      int v64 = 0;
      uint64_t v47 = (uint64_t)v78;
      *(void *)a4 = v46;
      *(void *)(a4 + 8) = v47;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_80;
    }
LABEL_113:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_114:
    unint64_t v41 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v44 = v65;
  if (v65 == -1) {
    goto LABEL_81;
  }
LABEL_80:
  ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9D68[v44])(&v78, &v64);
LABEL_81:
  unint64_t v48 = v71;
  uint64_t v71 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v45);
    WTF::fastFree(v49, v50);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v76);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA138[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t *IPC::Decoder::operator>><std::tuple<std::span<int const,2ul>,int>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    unint64_t v8 = v5 + v6;
    a1[2] = v8 + 8;
    if (v5)
    {
      LODWORD(v9) = 1;
      goto LABEL_12;
    }
    unint64_t v8 = v4;
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v17 = a1[3];
    if (v17)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v5);
        uint64_t v10 = *a1;
        unint64_t v8 = a1[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v10 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v11 = a1[3];
  if (!v11)
  {
    unint64_t v4 = 0;
    unint64_t v8 = 0;
LABEL_11:
    LODWORD(v9) = 0;
    goto LABEL_12;
  }
  if (!v8)
  {
    unint64_t v4 = 0;
    goto LABEL_11;
  }
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v10, v8);
  unint64_t v8 = 0;
  LODWORD(v9) = 0;
  unint64_t v4 = a1[1];
LABEL_12:
  if ((_BYTE)v9)
  {
    uint64_t v9 = *a1;
    unint64_t v12 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v4 >= v12 && v4 - v12 > 3)
    {
      unint64_t v14 = (_DWORD *)(v9 + v12);
      a1[2] = (uint64_t)(v14 + 1);
      if (v9)
      {
        LODWORD(v9) = *v14;
        unint64_t v15 = v8 & 0xFFFFFFFFFFFFFF00;
        unint64_t v8 = v8;
        int v16 = 1;
        goto LABEL_29;
      }
      unint64_t v18 = v4;
      uint64_t v19 = 0;
    }
    else
    {
      unint64_t v18 = 0;
      uint64_t v19 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v20 = a1[3];
      if (v20)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v9);
          uint64_t v19 = *a1;
          unint64_t v18 = a1[1];
        }
        else
        {
          unint64_t v18 = 0;
          uint64_t v19 = 0;
        }
      }
    }
    unint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v21 = a1[3];
    if (v21)
    {
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v21 + 16))(v21, v19, v18);
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v4 = 0;
      }
    }
  }
  uint64_t v22 = *a1;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v23 = a1[3];
  if (v23 && v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v22);
  }
  unint64_t v8 = 0;
  int v16 = 0;
  unint64_t v15 = 0;
LABEL_29:
  if (*(unsigned __int8 *)(a2 + 16) == v16)
  {
    if (*(unsigned char *)(a2 + 16))
    {
      *(void *)a2 = v15 | v8;
      *(_DWORD *)(a2 + 8) = v9;
    }
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    *(unsigned char *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a2 = v15 | v8;
    *(_DWORD *)(a2 + 8) = v9;
    *(unsigned char *)(a2 + 16) = 1;
  }
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderPrecisionFormat>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderPrecisionFormat>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9AB8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA148[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL24GetShaderPrecisionFormatEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  __n128 result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL24GetShaderPrecisionFormatEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetShaderSource,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v64, v9);
    if (!(_BYTE)v66) {
      goto LABEL_105;
    }
    unint64_t v52 = v64;
    unint64_t v51 = v65;
    unint64_t v53 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v54 = v53 - (void)v64;
    if (v53 >= (unint64_t)v64)
    {
      unint64_t v55 = v54 + 2;
      if (v54 <= 0xFFFFFFFFFFFFFFFDLL && v55 <= v65)
      {
        *(_WORD *)((char *)v64 + v54) = 2871;
        goto LABEL_91;
      }
      unint64_t v51 = 0;
    }
    unint64_t v55 = 0;
LABEL_91:
    unint64_t v57 = (char *)(((unint64_t)v52 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v57 >= (char *)v52 + v55)
    {
      unint64_t v55 = v57 - (char *)v52 + 8;
      if ((unint64_t)(v57 - (char *)v52) > 0xFFFFFFFFFFFFFFF7 || v55 > v51) {
        goto LABEL_117;
      }
      *(void *)unint64_t v57 = a3;
    }
    if (v51)
    {
      uint64_t v59 = v6[9];
      unint64_t v60 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v61 = v6[8];
      if (v60 + 16 >= v61) {
        unint64_t v60 = 0;
      }
      if (v55 <= 0x10) {
        unint64_t v55 = 16;
      }
      unint64_t v62 = v60 + v55;
      if (v61 <= v62) {
        unint64_t v62 = 0;
      }
      v6[10] = v62;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v59 + 16) + 128), v62) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_117:
    char v63 = 17;
    goto LABEL_106;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v68, v9);
  if (!v70)
  {
LABEL_105:
    char v63 = 15;
LABEL_106:
    *(unsigned char *)a4 = v63;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v68;
  unint64_t v14 = v69;
  unint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v76, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v76, v16))
  {
    LOBYTE(v78) = 11;
    uint64_t v11 = 1;
    int v80 = 1;
    LOBYTE(v64) = 0;
    int v66 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderSource>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderSource>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)&v78);
    char v67 = 1;
    if (v80 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v80])(&v73, &v78);
    }
    goto LABEL_59;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3674;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_110;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    char v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v73) = 0;
        unsigned __int8 v75 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = v6[8];
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    v6[10] = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v78, (uint64_t)(v6 + 8), v9);
    if (!(_BYTE)v80)
    {
      LOBYTE(v73) = 16;
      int v74 = 1;
LABEL_41:
      unsigned __int8 v75 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v71, (uint64_t)&v78, (uint64_t *)v11);
    if (*((_WORD *)v71 + 25) != 2870)
    {
      unint64_t v73 = v71;
      int v74 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v71);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v76, v16, 0xE5Au, (uint64_t)&v78, v9);
    LOBYTE(v73) = 0;
    int v74 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v73, (uint64_t)&v78);
    unsigned __int8 v75 = 1;
    if (v79 != -1) {
      ((void (*)(WTF::StringImpl **, IPC::Decoder **))off_1EE9E9D68[v79])(&v71, &v78);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v76);
    if (!v75)
    {
      LOBYTE(v64) = 0;
      char v67 = 0;
      goto LABEL_59;
    }
    if (v74 == 1)
    {
      LOBYTE(v64) = (_BYTE)v73;
      int v37 = 1;
      int v66 = 1;
      char v67 = 1;
      goto LABEL_58;
    }
    if (v74) {
      goto LABEL_113;
    }
    LOBYTE(v71) = 0;
    char v72 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v73, (uint64_t *)&v71);
    if (!v72)
    {
      LOBYTE(v64) = 13;
      int v66 = 1;
      char v67 = 1;
      goto LABEL_56;
    }
    unint64_t v20 = v75;
    if (v75) {
      break;
    }
LABEL_109:
    __break(1u);
LABEL_110:
    unint64_t v19 = 0;
  }
  if (v74) {
    goto LABEL_113;
  }
  unint64_t v33 = v73;
  unint64_t v73 = 0;
  unint64_t v34 = v71;
  uint64_t v71 = 0;
  int v78 = v33;
  unint64_t v79 = v34;
  int v80 = 0;
  LOBYTE(v64) = 0;
  int v66 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderSource>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderSource>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)&v78);
  char v67 = 1;
  if (v80 != -1) {
    ((void (*)(char *, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v80])(&v77, &v78);
  }
  if (v72)
  {
    unint64_t v36 = v71;
    uint64_t v71 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v35);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
LABEL_56:
  if (v75)
  {
    int v37 = v74;
    if (v74 != -1) {
LABEL_58:
    }
      ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9D68[v37])(&v78, &v73);
  }
LABEL_59:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v76);
  if (v67)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderSource>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderSource>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v64);
    if (v67)
    {
      if (v66 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v66])(&v78, &v64);
      }
    }
    return result;
  }
  unint64_t v20 = v70;
  if (!v70) {
    goto LABEL_109;
  }
  unint64_t v38 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = v38 - v68;
  if (v38 < v68)
  {
    unint64_t v40 = 0;
  }
  else
  {
    unint64_t v40 = 0;
    if (v39 <= 0xFFFFFFFFFFFFFFFDLL && v39 + 2 <= v69)
    {
      *(_WORD *)(v68 + v39) = 2870;
      unint64_t v40 = v39 + 2;
    }
  }
  unint64_t v41 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v42 = v6[8];
  if (v41 + 16 >= v42) {
    goto LABEL_114;
  }
  while (1)
  {
    if (v40 <= 0x10) {
      unint64_t v40 = 16;
    }
    unint64_t v43 = v41 + v40;
    if (v42 <= v43) {
      unint64_t v43 = 0;
    }
    v6[10] = v43;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v43);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v76, v15);
    char v6 = (uint64_t *)v76;
    unint64_t v73 = 0;
    IPC::Connection::createSyncMessageEncoder(3674, a3, (uint64_t *)&v73, &v71);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v71, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v73, (uint64_t *)&v71, 0, (uint64_t)&v64, v9);
    if (v65)
    {
      if (v65 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v64;
        int v44 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_80;
      }
      goto LABEL_113;
    }
    LOBYTE(v78) = 0;
    LOBYTE(v79) = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v64, (uint64_t *)&v78);
    if (!(_BYTE)v79) {
      break;
    }
    int v44 = v65;
    if (!v65)
    {
      unint64_t v46 = v64;
      int v64 = 0;
      uint64_t v47 = (uint64_t)v78;
      *(void *)a4 = v46;
      *(void *)(a4 + 8) = v47;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_80;
    }
LABEL_113:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_114:
    unint64_t v41 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v44 = v65;
  if (v65 == -1) {
    goto LABEL_81;
  }
LABEL_80:
  ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9D68[v44])(&v78, &v64);
LABEL_81:
  unint64_t v48 = v71;
  uint64_t v71 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v45);
    WTF::fastFree(v49, v50);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v76);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderSource>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderSource>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA158[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetTexParameterf,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v56, v9);
    if (!(_BYTE)v58) {
      goto LABEL_101;
    }
    int v44 = v56;
    unint64_t v43 = v57;
    unint64_t v45 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v56;
    if (v45 >= (unint64_t)v56)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v57)
      {
        *(_WORD *)((char *)v56 + v46) = 2871;
        goto LABEL_87;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_87:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
        goto LABEL_111;
      }
      *(void *)unint64_t v49 = a3;
    }
    if (v43)
    {
      uint64_t v51 = v6[9];
      unint64_t v52 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v6[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v6[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v55 = 17;
    goto LABEL_102;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v60, v9);
  if (!v62)
  {
LABEL_101:
    char v55 = 15;
LABEL_102:
    *(unsigned char *)a4 = v55;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v60;
  unint64_t v14 = v61;
  unint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v66, v16))
  {
    LOBYTE(v71) = 11;
    uint64_t v11 = 1;
    LODWORD(v73) = 1;
    LOBYTE(v56) = 0;
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameterf>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameterf>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
    char v59 = 1;
    if (v73 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
    }
    goto LABEL_53;
  }
  uint64_t v71 = v13;
  unint64_t v72 = v14;
  unint64_t v73 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3678;
    unint64_t v73 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v72 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v73 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v71, a2);
    if (!v72)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v73;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v73 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v68, (uint64_t)(v6 + 8), v9);
    if (!v70)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_37:
      char v65 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v68, (uint64_t *)v11);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      char v63 = (uint64_t *)v67;
      int v64 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v66, v16, 0xE5Eu, (uint64_t)&v68, v9);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v68);
    char v65 = 1;
    if (v69 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v67, &v68);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v66);
    if (!v65)
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
      goto LABEL_50;
    }
    if (v64 == 1)
    {
      char v30 = (char)v63;
LABEL_49:
      LOBYTE(v56) = v30;
      int v58 = 1;
      char v59 = 1;
      goto LABEL_50;
    }
    if (v64) {
      goto LABEL_107;
    }
    uint64_t v28 = IPC::Decoder::decode<std::tuple<float>>(v63);
    if ((v28 & 0xFF00000000) == 0)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v65) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v72 = 0;
  }
  if (v64) {
    goto LABEL_107;
  }
  unint64_t v29 = v63;
  char v63 = 0;
  uint64_t v71 = (uint64_t)v29;
  LODWORD(v72) = v28;
  LODWORD(v73) = 0;
  LOBYTE(v56) = 0;
  int v58 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameterf>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameterf>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
  char v59 = 1;
  if (v73 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
  }
LABEL_50:
  if (v65 && v64 != -1) {
    ((void (*)(uint64_t *, uint64_t **))off_1EE9E9D68[v64])(&v71, &v63);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v59)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameterf>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameterf>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v56);
    if (v59)
    {
      if (v58 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v58])(&v71, &v56);
      }
    }
    return result;
  }
  if (!v62) {
    goto LABEL_104;
  }
  unint64_t v31 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v60;
  if (v31 < v60)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v61)
    {
      *(_WORD *)(v60 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, v15);
    char v6 = v63;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3678, a3, &v71, &v68);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v71, (uint64_t *)&v68, 0, (uint64_t)&v56, v9);
    a2 = (int *)v57;
    if (v57)
    {
      if (v57 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v56;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    uint64_t v37 = IPC::Decoder::decode<std::tuple<float>>(v56);
    if ((v37 & 0xFF00000000) == 0) {
      break;
    }
    if (!v57)
    {
      unint64_t v39 = v56;
      char v56 = 0;
      *(void *)a4 = v39;
      *(_DWORD *)(a4 + 8) = v37;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[a2])(&v67, &v56);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v57;
  if (v57 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v40 = v68;
  unint64_t v68 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameterf>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameterf>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA168[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetTexParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v56, v9);
    if (!(_BYTE)v58) {
      goto LABEL_101;
    }
    int v44 = v56;
    unint64_t v43 = v57;
    unint64_t v45 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v56;
    if (v45 >= (unint64_t)v56)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v57)
      {
        *(_WORD *)((char *)v56 + v46) = 2871;
        goto LABEL_87;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_87:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
        goto LABEL_111;
      }
      *(void *)unint64_t v49 = a3;
    }
    if (v43)
    {
      uint64_t v51 = v6[9];
      unint64_t v52 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v6[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v6[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v55 = 17;
    goto LABEL_102;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v60, v9);
  if (!v62)
  {
LABEL_101:
    char v55 = 15;
LABEL_102:
    *(unsigned char *)a4 = v55;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v60;
  unint64_t v14 = v61;
  unint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v66, v16))
  {
    LOBYTE(v71) = 11;
    uint64_t v11 = 1;
    LODWORD(v73) = 1;
    LOBYTE(v56) = 0;
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
    char v59 = 1;
    if (v73 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
    }
    goto LABEL_53;
  }
  uint64_t v71 = v13;
  unint64_t v72 = v14;
  unint64_t v73 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3679;
    unint64_t v73 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v72 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v73 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v71, a2);
    if (!v72)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v73;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v73 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v68, (uint64_t)(v6 + 8), v9);
    if (!v70)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_37:
      char v65 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v68, (uint64_t *)v11);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      char v63 = (uint64_t *)v67;
      int v64 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v66, v16, 0xE5Fu, (uint64_t)&v68, v9);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v68);
    char v65 = 1;
    if (v69 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v67, &v68);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v66);
    if (!v65)
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
      goto LABEL_50;
    }
    if (v64 == 1)
    {
      char v30 = (char)v63;
LABEL_49:
      LOBYTE(v56) = v30;
      int v58 = 1;
      char v59 = 1;
      goto LABEL_50;
    }
    if (v64) {
      goto LABEL_107;
    }
    uint64_t v28 = IPC::Decoder::decode<std::tuple<float>>(v63);
    if ((v28 & 0xFF00000000) == 0)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v65) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v72 = 0;
  }
  if (v64) {
    goto LABEL_107;
  }
  unint64_t v29 = v63;
  char v63 = 0;
  uint64_t v71 = (uint64_t)v29;
  LODWORD(v72) = v28;
  LODWORD(v73) = 0;
  LOBYTE(v56) = 0;
  int v58 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
  char v59 = 1;
  if (v73 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
  }
LABEL_50:
  if (v65 && v64 != -1) {
    ((void (*)(uint64_t *, uint64_t **))off_1EE9E9D68[v64])(&v71, &v63);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v59)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v56);
    if (v59)
    {
      if (v58 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v58])(&v71, &v56);
      }
    }
    return result;
  }
  if (!v62) {
    goto LABEL_104;
  }
  unint64_t v31 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v60;
  if (v31 < v60)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v61)
    {
      *(_WORD *)(v60 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, v15);
    char v6 = v63;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3679, a3, &v71, &v68);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v71, (uint64_t *)&v68, 0, (uint64_t)&v56, v9);
    a2 = (int *)v57;
    if (v57)
    {
      if (v57 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v56;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    uint64_t v37 = IPC::Decoder::decode<std::tuple<float>>(v56);
    if ((v37 & 0xFF00000000) == 0) {
      break;
    }
    if (!v57)
    {
      unint64_t v39 = v56;
      char v56 = 0;
      *(void *)a4 = v39;
      *(_DWORD *)(a4 + 8) = v37;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[a2])(&v67, &v56);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v57;
  if (v57 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v40 = v68;
  unint64_t v68 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA178[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t *IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned long>,0ul,1ul,2ul>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *(_DWORD *)a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    unint64_t v13 = v11 - v2;
    unint64_t v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = *(_DWORD *)(a2 + 4);
      result[2] = v14;
      uint64_t v2 = *result;
      unint64_t v3 = v14;
    }
  }
  uint64_t v16 = (void *)((v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v16 >= v2 + v3)
  {
    unint64_t v17 = (unint64_t)v16 - v2 + 8;
    if ((unint64_t)v16 - v2 > 0xFFFFFFFFFFFFFFF7 || v17 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *uint64_t v16 = *(void *)(a2 + 8);
      result[2] = v17;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformfv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformfv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9AF8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA188[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetUniformfvEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  __n128 result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetUniformfvEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

unint64_t IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned long>,0ul,1ul,2ul>(IPC::Encoder *a1, int *a2)
{
  int v4 = *a2;
  uint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3 || (_DWORD *v5 = v4, v7 = a2[1], v8 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4), v9 <= 3))
  {
    __break(0xC471u);
    JUMPOUT(0x19907BE58);
  }
  *unint64_t v8 = v7;
  uint64_t v10 = *((void *)a2 + 1);

  return IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, v10);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9B08[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA198[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetUniformivEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  __n128 result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetUniformivEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformuiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformuiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9B18[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA1A8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetUniformuivEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  __n128 result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetUniformuivEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetUniformLocation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v56, v9);
    if (!(_BYTE)v58) {
      goto LABEL_101;
    }
    int v44 = v56;
    unint64_t v43 = v57;
    unint64_t v45 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v56;
    if (v45 >= (unint64_t)v56)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v57)
      {
        *(_WORD *)((char *)v56 + v46) = 2871;
        goto LABEL_87;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_87:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
        goto LABEL_111;
      }
      *(void *)unint64_t v49 = a3;
    }
    if (v43)
    {
      uint64_t v51 = v6[9];
      unint64_t v52 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v6[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v6[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v55 = 17;
    goto LABEL_102;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v60, v9);
  if (!v62)
  {
LABEL_101:
    char v55 = 15;
LABEL_102:
    *(unsigned char *)a4 = v55;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v60;
  unint64_t v14 = v61;
  unint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v66, v16))
  {
    LOBYTE(v71) = 11;
    uint64_t v11 = 1;
    LODWORD(v73) = 1;
    LOBYTE(v56) = 0;
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
    char v59 = 1;
    if (v73 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
    }
    goto LABEL_53;
  }
  uint64_t v71 = v13;
  unint64_t v72 = v14;
  unint64_t v73 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3684;
    unint64_t v73 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v72 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v73 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(&v71, a2);
    if (!v72)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v73;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v73 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v68, (uint64_t)(v6 + 8), v9);
    if (!v70)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_37:
      char v65 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v68, (uint64_t *)v11);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      char v63 = (uint64_t *)v67;
      int v64 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v66, v16, 0xE64u, (uint64_t)&v68, v9);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v68);
    char v65 = 1;
    if (v69 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v67, &v68);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v66);
    if (!v65)
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
      goto LABEL_50;
    }
    if (v64 == 1)
    {
      char v30 = (char)v63;
LABEL_49:
      LOBYTE(v56) = v30;
      int v58 = 1;
      char v59 = 1;
      goto LABEL_50;
    }
    if (v64) {
      goto LABEL_107;
    }
    uint64_t v28 = IPC::Decoder::decode<std::tuple<float>>(v63);
    if ((v28 & 0xFF00000000) == 0)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v65) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v72 = 0;
  }
  if (v64) {
    goto LABEL_107;
  }
  unint64_t v29 = v63;
  char v63 = 0;
  uint64_t v71 = (uint64_t)v29;
  LODWORD(v72) = v28;
  LODWORD(v73) = 0;
  LOBYTE(v56) = 0;
  int v58 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
  char v59 = 1;
  if (v73 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
  }
LABEL_50:
  if (v65 && v64 != -1) {
    ((void (*)(uint64_t *, uint64_t **))off_1EE9E9D68[v64])(&v71, &v63);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v59)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v56);
    if (v59)
    {
      if (v58 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v58])(&v71, &v56);
      }
    }
    return result;
  }
  if (!v62) {
    goto LABEL_104;
  }
  unint64_t v31 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v60;
  if (v31 < v60)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v61)
    {
      *(_WORD *)(v60 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, v15);
    char v6 = v63;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3684, a3, &v71, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(v68, (int *)a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v71, (uint64_t *)&v68, 0, (uint64_t)&v56, v9);
    a2 = v57;
    if (v57)
    {
      if (v57 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v56;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    uint64_t v37 = IPC::Decoder::decode<std::tuple<float>>(v56);
    if ((v37 & 0xFF00000000) == 0) {
      break;
    }
    if (!v57)
    {
      unint64_t v39 = v56;
      char v56 = 0;
      *(void *)a4 = v39;
      *(_DWORD *)(a4 + 8) = v37;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[a2])(&v67, &v56);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v57;
  if (v57 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v40 = v68;
  unint64_t v68 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA1B8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v57, v9);
    if (!(_BYTE)v59) {
      goto LABEL_101;
    }
    unint64_t v45 = v57;
    unint64_t v44 = v58;
    unint64_t v46 = ((unint64_t)v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = v46 - (void)v57;
    if (v46 >= (unint64_t)v57)
    {
      unint64_t v48 = v47 + 2;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v48 <= v58)
      {
        *(_WORD *)((char *)v57 + v47) = 2871;
        goto LABEL_87;
      }
      unint64_t v44 = 0;
    }
    unint64_t v48 = 0;
LABEL_87:
    int v50 = (char *)(((unint64_t)v45 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v50 >= (char *)v45 + v48)
    {
      unint64_t v48 = v50 - (char *)v45 + 8;
      if ((unint64_t)(v50 - (char *)v45) > 0xFFFFFFFFFFFFFFF7 || v48 > v44) {
        goto LABEL_111;
      }
      *(void *)int v50 = a3;
    }
    if (v44)
    {
      uint64_t v52 = v6[9];
      unint64_t v53 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v54 = v6[8];
      if (v53 + 16 >= v54) {
        unint64_t v53 = 0;
      }
      if (v48 <= 0x10) {
        unint64_t v48 = 16;
      }
      unint64_t v55 = v53 + v48;
      if (v54 <= v55) {
        unint64_t v55 = 0;
      }
      v6[10] = v55;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v52 + 16) + 128), v55) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v56 = 17;
    goto LABEL_102;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v61, v9);
  if (!v63)
  {
LABEL_101:
    char v56 = 15;
LABEL_102:
    *(unsigned char *)a4 = v56;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v61;
  unint64_t v14 = v62;
  unint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v67, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v67, v16))
  {
    LOBYTE(v72) = 11;
    uint64_t v11 = 1;
    LODWORD(v74) = 1;
    LOBYTE(v57) = 0;
    int v59 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v57, (uint64_t)&v72);
    char v60 = 1;
    if (v74 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v74])(&v69, &v72);
    }
    goto LABEL_53;
  }
  uint64_t v72 = v13;
  unint64_t v73 = v14;
  unint64_t v74 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3688;
    unint64_t v74 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v73 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v74 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v72, a2);
    if (!v73)
    {
      LOBYTE(v64) = 0;
      char v66 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v74;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v74 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v69, (uint64_t)(v6 + 8), v9);
    if (!v71)
    {
      LOBYTE(v64) = 16;
      int v65 = 1;
LABEL_37:
      char v66 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v68, (uint64_t)&v69, (uint64_t *)v11);
    if (*((_WORD *)v68 + 25) != 2870)
    {
      int v64 = v68;
      int v65 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v68);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v67, v16, 0xE68u, (uint64_t)&v69, v9);
    LOBYTE(v64) = 0;
    int v65 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)&v69);
    char v66 = 1;
    if (v70 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v70])(&v68, &v69);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v67);
    if (!v66)
    {
      LOBYTE(v57) = 0;
      char v60 = 0;
      goto LABEL_50;
    }
    if (v65 == 1)
    {
      char v31 = (char)v64;
LABEL_49:
      LOBYTE(v57) = v31;
      int v59 = 1;
      char v60 = 1;
      goto LABEL_50;
    }
    if (v65) {
      goto LABEL_107;
    }
    unint64_t v28 = IPC::Decoder::decode<std::tuple<unsigned long long>>(v64);
    if (!v29)
    {
      char v31 = 13;
      goto LABEL_49;
    }
    if (v66) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v73 = 0;
  }
  if (v65) {
    goto LABEL_107;
  }
  char v30 = v64;
  int v64 = 0;
  uint64_t v72 = (uint64_t)v30;
  unint64_t v73 = v28;
  LODWORD(v74) = 0;
  LOBYTE(v57) = 0;
  int v59 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v57, (uint64_t)&v72);
  char v60 = 1;
  if (v74 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v74])(&v69, &v72);
  }
LABEL_50:
  if (v66 && v65 != -1) {
    ((void (*)(uint64_t *, IPC::Decoder **))off_1EE9E9D68[v65])(&v72, &v64);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v67);
  if (v60)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v57);
    if (v60)
    {
      if (v59 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v59])(&v72, &v57);
      }
    }
    return result;
  }
  if (!v63) {
    goto LABEL_104;
  }
  unint64_t v32 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - v61;
  if (v32 < v61)
  {
    unint64_t v34 = 0;
  }
  else
  {
    unint64_t v34 = 0;
    if (v33 <= 0xFFFFFFFFFFFFFFFDLL && v33 + 2 <= v62)
    {
      *(_WORD *)(v61 + v33) = 2870;
      unint64_t v34 = v33 + 2;
    }
  }
  unint64_t v35 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v6[8];
  if (v35 + 16 >= v36) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v34 <= 0x10) {
      unint64_t v34 = 16;
    }
    unint64_t v37 = v35 + v34;
    if (v36 <= v37) {
      unint64_t v37 = 0;
    }
    v6[10] = v37;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v37);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v64, v15);
    char v6 = (uint64_t *)v64;
    uint64_t v72 = 0;
    IPC::Connection::createSyncMessageEncoder(3688, a3, &v72, &v69);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v69, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v72, (uint64_t *)&v69, 0, (uint64_t)&v57, v9);
    a2 = (int *)v58;
    if (v58)
    {
      if (v58 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v57;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    unint64_t v38 = IPC::Decoder::decode<std::tuple<unsigned long long>>(v57);
    if (!(_BYTE)v39) {
      break;
    }
    if (!v58)
    {
      unint64_t v40 = v57;
      unint64_t v57 = 0;
      *(void *)a4 = v40;
      *(void *)(a4 + 8) = v38;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9D68[a2])(&v68, &v57);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v35 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v58;
  if (v58 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v41 = v69;
  int v69 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v39);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v64);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA1C8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  a2[1] = a3[1];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Hint,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1011;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  char v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v26 = 1011;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v61, v9);
    if (!(_BYTE)v63) {
      goto LABEL_101;
    }
    unint64_t v49 = v61;
    unint64_t v48 = v62;
    unint64_t v50 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - (void)v61;
    if (v50 >= (unint64_t)v61)
    {
      unint64_t v52 = v51 + 2;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v62)
      {
        *(_WORD *)((char *)v61 + v51) = 2871;
        goto LABEL_87;
      }
      unint64_t v48 = 0;
    }
    unint64_t v52 = 0;
LABEL_87:
    unint64_t v54 = (char *)(((unint64_t)v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v54 >= (char *)v49 + v52)
    {
      unint64_t v52 = v54 - (char *)v49 + 8;
      if ((unint64_t)(v54 - (char *)v49) > 0xFFFFFFFFFFFFFFF7 || v52 > v48) {
        goto LABEL_112;
      }
      *(void *)unint64_t v54 = a3;
    }
    if (v48)
    {
      uint64_t v56 = *((void *)v6 + 9);
      unint64_t v57 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v58 = *((void *)v6 + 8);
      if (v57 + 16 >= v58) {
        unint64_t v57 = 0;
      }
      if (v52 <= 0x10) {
        unint64_t v52 = 16;
      }
      unint64_t v59 = v57 + v52;
      if (v58 <= v59) {
        unint64_t v59 = 0;
      }
      *((void *)v6 + 10) = v59;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v56 + 16) + 128), v59) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_112:
    char v60 = 17;
    goto LABEL_102;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v65, v9);
  if (!v67)
  {
LABEL_101:
    char v60 = 15;
LABEL_102:
    *(unsigned char *)a4 = v60;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v65;
  unint64_t v14 = v66;
  uint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v71, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    int v76 = 1;
    LOBYTE(v61) = 0;
    int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
    char v64 = 1;
    if (v76 != -1) {
      ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v68, &v74);
    }
    goto LABEL_55;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3689;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_105;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    char v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v68) = 0;
        unsigned __int8 v70 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *((void *)v6 + 8);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    *((void *)v6 + 10) = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v74, (uint64_t)v6 + 64, v9);
    if (!(_BYTE)v76)
    {
      LOBYTE(v68) = 16;
      int v69 = 1;
LABEL_41:
      unsigned __int8 v70 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v73, (uint64_t)&v74, (uint64_t *)v11);
    if (*((_WORD *)v73 + 25) != 2870)
    {
      unint64_t v68 = v73;
      int v69 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v73);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v71, v16, 0xE69u, (uint64_t)&v74, v9);
    LOBYTE(v68) = 0;
    int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, (uint64_t)&v74);
    unsigned __int8 v70 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v75])(&v73, &v74);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v71);
    if (!v70)
    {
      LOBYTE(v61) = 0;
      char v64 = 0;
      goto LABEL_55;
    }
    if (v69 == 1)
    {
      LOBYTE(v61) = (_BYTE)v68;
      int v34 = 1;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_54;
    }
    if (v69) {
      goto LABEL_108;
    }
    LOWORD(v73) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>((uint64_t *)v68, &v73);
    if (!BYTE1(v73))
    {
      LOBYTE(v61) = 13;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_52;
    }
    unint64_t v20 = v70;
    if (v70) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v19 = 0;
  }
  if (v69) {
    goto LABEL_108;
  }
  unint64_t v33 = v68;
  unint64_t v68 = 0;
  unint64_t v74 = v33;
  LOBYTE(v75) = (_BYTE)v73;
  int v76 = 0;
  LOBYTE(v61) = 0;
  int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
  char v64 = 1;
  if (v76 != -1) {
    ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v72, &v74);
  }
LABEL_52:
  if (v70)
  {
    int v34 = v69;
    if (v69 != -1) {
LABEL_54:
    }
      ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v34])(&v74, &v68);
  }
LABEL_55:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
  if (v64)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v61);
    if (v64)
    {
      if (v63 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v63])(&v74, &v61);
      }
    }
    return result;
  }
  unint64_t v20 = v67;
  if (!v67) {
    goto LABEL_104;
  }
  unint64_t v35 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v35 - v65;
  if (v35 < v65)
  {
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v66)
    {
      *(_WORD *)(v65 + v36) = 2870;
      unint64_t v37 = v36 + 2;
    }
  }
  unint64_t v38 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *((void *)v6 + 8);
  if (v38 + 16 >= v39) {
    goto LABEL_109;
  }
  while (1)
  {
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v40 = v38 + v37;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *((void *)v6 + 10) = v40;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v40);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, v15);
    double v6 = v73;
    unint64_t v74 = 0;
    IPC::Connection::createSyncMessageEncoder(3689, a3, (uint64_t *)&v74, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v74, (uint64_t *)&v68, 0, (uint64_t)&v61, v9);
    if (v62)
    {
      if (v62 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v61;
        int v41 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_76;
      }
      goto LABEL_108;
    }
    LOWORD(v71) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v61, &v71);
    if (!BYTE1(v71)) {
      break;
    }
    int v41 = v62;
    if (!v62)
    {
      unint64_t v43 = v61;
      unint64_t v61 = 0;
      char v44 = (char)v71;
      *(void *)a4 = v43;
      *(unsigned char *)(a4 + 8) = v44;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_76;
    }
LABEL_108:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
    unint64_t v38 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v41 = v62;
  if (v62 == -1) {
    goto LABEL_77;
  }
LABEL_76:
  ((void (*)(IPC::Decoder ***, uint64_t **))off_1EE9E9D68[v41])(&v71, &v61);
LABEL_77:
  unint64_t v45 = v68;
  unint64_t v68 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v42);
    WTF::fastFree(v46, v47);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA1D8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsBufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsBufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsEnabled,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v61, v9);
    if (!(_BYTE)v63) {
      goto LABEL_101;
    }
    unint64_t v49 = v61;
    unint64_t v48 = v62;
    unint64_t v50 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - (void)v61;
    if (v50 >= (unint64_t)v61)
    {
      unint64_t v52 = v51 + 2;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v62)
      {
        *(_WORD *)((char *)v61 + v51) = 2871;
        goto LABEL_87;
      }
      unint64_t v48 = 0;
    }
    unint64_t v52 = 0;
LABEL_87:
    unint64_t v54 = (char *)(((unint64_t)v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v54 >= (char *)v49 + v52)
    {
      unint64_t v52 = v54 - (char *)v49 + 8;
      if ((unint64_t)(v54 - (char *)v49) > 0xFFFFFFFFFFFFFFF7 || v52 > v48) {
        goto LABEL_112;
      }
      *(void *)unint64_t v54 = a3;
    }
    if (v48)
    {
      uint64_t v56 = *((void *)v6 + 9);
      unint64_t v57 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v58 = *((void *)v6 + 8);
      if (v57 + 16 >= v58) {
        unint64_t v57 = 0;
      }
      if (v52 <= 0x10) {
        unint64_t v52 = 16;
      }
      unint64_t v59 = v57 + v52;
      if (v58 <= v59) {
        unint64_t v59 = 0;
      }
      *((void *)v6 + 10) = v59;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v56 + 16) + 128), v59) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_112:
    char v60 = 17;
    goto LABEL_102;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v65, v9);
  if (!v67)
  {
LABEL_101:
    char v60 = 15;
LABEL_102:
    *(unsigned char *)a4 = v60;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v65;
  unint64_t v14 = v66;
  uint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v71, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    int v76 = 1;
    LOBYTE(v61) = 0;
    int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsEnabled>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsEnabled>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
    char v64 = 1;
    if (v76 != -1) {
      ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsEnabledEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v68, &v74);
    }
    goto LABEL_55;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3690;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_105;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    char v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v68) = 0;
        unsigned __int8 v70 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *((void *)v6 + 8);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    *((void *)v6 + 10) = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v74, (uint64_t)v6 + 64, v9);
    if (!(_BYTE)v76)
    {
      LOBYTE(v68) = 16;
      int v69 = 1;
LABEL_41:
      unsigned __int8 v70 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v73, (uint64_t)&v74, (uint64_t *)v11);
    if (*((_WORD *)v73 + 25) != 2870)
    {
      unint64_t v68 = v73;
      int v69 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v73);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v71, v16, 0xE6Au, (uint64_t)&v74, v9);
    LOBYTE(v68) = 0;
    int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, (uint64_t)&v74);
    unsigned __int8 v70 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v75])(&v73, &v74);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v71);
    if (!v70)
    {
      LOBYTE(v61) = 0;
      char v64 = 0;
      goto LABEL_55;
    }
    if (v69 == 1)
    {
      LOBYTE(v61) = (_BYTE)v68;
      int v34 = 1;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_54;
    }
    if (v69) {
      goto LABEL_108;
    }
    LOWORD(v73) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>((uint64_t *)v68, &v73);
    if (!BYTE1(v73))
    {
      LOBYTE(v61) = 13;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_52;
    }
    unint64_t v20 = v70;
    if (v70) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v19 = 0;
  }
  if (v69) {
    goto LABEL_108;
  }
  unint64_t v33 = v68;
  unint64_t v68 = 0;
  unint64_t v74 = v33;
  LOBYTE(v75) = (_BYTE)v73;
  int v76 = 0;
  LOBYTE(v61) = 0;
  int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsEnabled>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsEnabled>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
  char v64 = 1;
  if (v76 != -1) {
    ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsEnabledEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v72, &v74);
  }
LABEL_52:
  if (v70)
  {
    int v34 = v69;
    if (v69 != -1) {
LABEL_54:
    }
      ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v34])(&v74, &v68);
  }
LABEL_55:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
  if (v64)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsEnabled>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsEnabled>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v61);
    if (v64)
    {
      if (v63 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsEnabledEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v63])(&v74, &v61);
      }
    }
    return result;
  }
  unint64_t v20 = v67;
  if (!v67) {
    goto LABEL_104;
  }
  unint64_t v35 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v35 - v65;
  if (v35 < v65)
  {
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v66)
    {
      *(_WORD *)(v65 + v36) = 2870;
      unint64_t v37 = v36 + 2;
    }
  }
  unint64_t v38 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *((void *)v6 + 8);
  if (v38 + 16 >= v39) {
    goto LABEL_109;
  }
  while (1)
  {
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v40 = v38 + v37;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *((void *)v6 + 10) = v40;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v40);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, v15);
    char v6 = v73;
    unint64_t v74 = 0;
    IPC::Connection::createSyncMessageEncoder(3690, a3, (uint64_t *)&v74, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v74, (uint64_t *)&v68, 0, (uint64_t)&v61, v9);
    if (v62)
    {
      if (v62 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v61;
        int v41 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_76;
      }
      goto LABEL_108;
    }
    LOWORD(v71) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v61, &v71);
    if (!BYTE1(v71)) {
      break;
    }
    int v41 = v62;
    if (!v62)
    {
      unint64_t v43 = v61;
      unint64_t v61 = 0;
      char v44 = (char)v71;
      *(void *)a4 = v43;
      *(unsigned char *)(a4 + 8) = v44;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_76;
    }
LABEL_108:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
    unint64_t v38 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v41 = v62;
  if (v62 == -1) {
    goto LABEL_77;
  }
LABEL_76:
  ((void (*)(IPC::Decoder ***, uint64_t **))off_1EE9E9D68[v41])(&v71, &v61);
LABEL_77:
  unint64_t v45 = v68;
  unint64_t v68 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v42);
    WTF::fastFree(v46, v47);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsEnabled>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsEnabled>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsEnabledEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA1E8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsEnabledEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsEnabledEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v61, v9);
    if (!(_BYTE)v63) {
      goto LABEL_101;
    }
    unint64_t v49 = v61;
    unint64_t v48 = v62;
    unint64_t v50 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - (void)v61;
    if (v50 >= (unint64_t)v61)
    {
      unint64_t v52 = v51 + 2;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v62)
      {
        *(_WORD *)((char *)v61 + v51) = 2871;
        goto LABEL_87;
      }
      unint64_t v48 = 0;
    }
    unint64_t v52 = 0;
LABEL_87:
    unint64_t v54 = (char *)(((unint64_t)v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v54 >= (char *)v49 + v52)
    {
      unint64_t v52 = v54 - (char *)v49 + 8;
      if ((unint64_t)(v54 - (char *)v49) > 0xFFFFFFFFFFFFFFF7 || v52 > v48) {
        goto LABEL_112;
      }
      *(void *)unint64_t v54 = a3;
    }
    if (v48)
    {
      uint64_t v56 = *((void *)v6 + 9);
      unint64_t v57 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v58 = *((void *)v6 + 8);
      if (v57 + 16 >= v58) {
        unint64_t v57 = 0;
      }
      if (v52 <= 0x10) {
        unint64_t v52 = 16;
      }
      unint64_t v59 = v57 + v52;
      if (v58 <= v59) {
        unint64_t v59 = 0;
      }
      *((void *)v6 + 10) = v59;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v56 + 16) + 128), v59) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_112:
    char v60 = 17;
    goto LABEL_102;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v65, v9);
  if (!v67)
  {
LABEL_101:
    char v60 = 15;
LABEL_102:
    *(unsigned char *)a4 = v60;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v65;
  unint64_t v14 = v66;
  uint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v71, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    int v76 = 1;
    LOBYTE(v61) = 0;
    int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsFramebuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsFramebuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
    char v64 = 1;
    if (v76 != -1) {
      ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsFramebufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v68, &v74);
    }
    goto LABEL_55;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3691;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_105;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    char v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v68) = 0;
        unsigned __int8 v70 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *((void *)v6 + 8);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    *((void *)v6 + 10) = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v74, (uint64_t)v6 + 64, v9);
    if (!(_BYTE)v76)
    {
      LOBYTE(v68) = 16;
      int v69 = 1;
LABEL_41:
      unsigned __int8 v70 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v73, (uint64_t)&v74, (uint64_t *)v11);
    if (*((_WORD *)v73 + 25) != 2870)
    {
      unint64_t v68 = v73;
      int v69 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v73);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v71, v16, 0xE6Bu, (uint64_t)&v74, v9);
    LOBYTE(v68) = 0;
    int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, (uint64_t)&v74);
    unsigned __int8 v70 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v75])(&v73, &v74);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v71);
    if (!v70)
    {
      LOBYTE(v61) = 0;
      char v64 = 0;
      goto LABEL_55;
    }
    if (v69 == 1)
    {
      LOBYTE(v61) = (_BYTE)v68;
      int v34 = 1;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_54;
    }
    if (v69) {
      goto LABEL_108;
    }
    LOWORD(v73) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>((uint64_t *)v68, &v73);
    if (!BYTE1(v73))
    {
      LOBYTE(v61) = 13;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_52;
    }
    unint64_t v20 = v70;
    if (v70) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v19 = 0;
  }
  if (v69) {
    goto LABEL_108;
  }
  unint64_t v33 = v68;
  unint64_t v68 = 0;
  unint64_t v74 = v33;
  LOBYTE(v75) = (_BYTE)v73;
  int v76 = 0;
  LOBYTE(v61) = 0;
  int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsFramebuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsFramebuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
  char v64 = 1;
  if (v76 != -1) {
    ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsFramebufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v72, &v74);
  }
LABEL_52:
  if (v70)
  {
    int v34 = v69;
    if (v69 != -1) {
LABEL_54:
    }
      ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v34])(&v74, &v68);
  }
LABEL_55:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
  if (v64)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsFramebuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsFramebuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v61);
    if (v64)
    {
      if (v63 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsFramebufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v63])(&v74, &v61);
      }
    }
    return result;
  }
  unint64_t v20 = v67;
  if (!v67) {
    goto LABEL_104;
  }
  unint64_t v35 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v35 - v65;
  if (v35 < v65)
  {
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v66)
    {
      *(_WORD *)(v65 + v36) = 2870;
      unint64_t v37 = v36 + 2;
    }
  }
  unint64_t v38 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *((void *)v6 + 8);
  if (v38 + 16 >= v39) {
    goto LABEL_109;
  }
  while (1)
  {
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v40 = v38 + v37;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *((void *)v6 + 10) = v40;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v40);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, v15);
    char v6 = v73;
    unint64_t v74 = 0;
    IPC::Connection::createSyncMessageEncoder(3691, a3, (uint64_t *)&v74, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v74, (uint64_t *)&v68, 0, (uint64_t)&v61, v9);
    if (v62)
    {
      if (v62 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v61;
        int v41 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_76;
      }
      goto LABEL_108;
    }
    LOWORD(v71) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v61, &v71);
    if (!BYTE1(v71)) {
      break;
    }
    int v41 = v62;
    if (!v62)
    {
      unint64_t v43 = v61;
      unint64_t v61 = 0;
      char v44 = (char)v71;
      *(void *)a4 = v43;
      *(unsigned char *)(a4 + 8) = v44;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_76;
    }
LABEL_108:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
    unint64_t v38 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v41 = v62;
  if (v62 == -1) {
    goto LABEL_77;
  }
LABEL_76:
  ((void (*)(IPC::Decoder ***, uint64_t **))off_1EE9E9D68[v41])(&v71, &v61);
LABEL_77:
  unint64_t v45 = v68;
  unint64_t v68 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v42);
    WTF::fastFree(v46, v47);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsFramebuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsFramebuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsFramebufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA1F8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsFramebufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsFramebufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v61, v9);
    if (!(_BYTE)v63) {
      goto LABEL_101;
    }
    unint64_t v49 = v61;
    unint64_t v48 = v62;
    unint64_t v50 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - (void)v61;
    if (v50 >= (unint64_t)v61)
    {
      unint64_t v52 = v51 + 2;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v62)
      {
        *(_WORD *)((char *)v61 + v51) = 2871;
        goto LABEL_87;
      }
      unint64_t v48 = 0;
    }
    unint64_t v52 = 0;
LABEL_87:
    unint64_t v54 = (char *)(((unint64_t)v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v54 >= (char *)v49 + v52)
    {
      unint64_t v52 = v54 - (char *)v49 + 8;
      if ((unint64_t)(v54 - (char *)v49) > 0xFFFFFFFFFFFFFFF7 || v52 > v48) {
        goto LABEL_112;
      }
      *(void *)unint64_t v54 = a3;
    }
    if (v48)
    {
      uint64_t v56 = *((void *)v6 + 9);
      unint64_t v57 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v58 = *((void *)v6 + 8);
      if (v57 + 16 >= v58) {
        unint64_t v57 = 0;
      }
      if (v52 <= 0x10) {
        unint64_t v52 = 16;
      }
      unint64_t v59 = v57 + v52;
      if (v58 <= v59) {
        unint64_t v59 = 0;
      }
      *((void *)v6 + 10) = v59;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v56 + 16) + 128), v59) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_112:
    char v60 = 17;
    goto LABEL_102;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v65, v9);
  if (!v67)
  {
LABEL_101:
    char v60 = 15;
LABEL_102:
    *(unsigned char *)a4 = v60;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v65;
  unint64_t v14 = v66;
  uint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v71, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    int v76 = 1;
    LOBYTE(v61) = 0;
    int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsProgram>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsProgram>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
    char v64 = 1;
    if (v76 != -1) {
      ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsProgramEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v68, &v74);
    }
    goto LABEL_55;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3692;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_105;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    char v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v68) = 0;
        unsigned __int8 v70 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *((void *)v6 + 8);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    *((void *)v6 + 10) = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v74, (uint64_t)v6 + 64, v9);
    if (!(_BYTE)v76)
    {
      LOBYTE(v68) = 16;
      int v69 = 1;
LABEL_41:
      unsigned __int8 v70 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v73, (uint64_t)&v74, (uint64_t *)v11);
    if (*((_WORD *)v73 + 25) != 2870)
    {
      unint64_t v68 = v73;
      int v69 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v73);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v71, v16, 0xE6Cu, (uint64_t)&v74, v9);
    LOBYTE(v68) = 0;
    int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, (uint64_t)&v74);
    unsigned __int8 v70 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v75])(&v73, &v74);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v71);
    if (!v70)
    {
      LOBYTE(v61) = 0;
      char v64 = 0;
      goto LABEL_55;
    }
    if (v69 == 1)
    {
      LOBYTE(v61) = (_BYTE)v68;
      int v34 = 1;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_54;
    }
    if (v69) {
      goto LABEL_108;
    }
    LOWORD(v73) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>((uint64_t *)v68, &v73);
    if (!BYTE1(v73))
    {
      LOBYTE(v61) = 13;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_52;
    }
    unint64_t v20 = v70;
    if (v70) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v19 = 0;
  }
  if (v69) {
    goto LABEL_108;
  }
  unint64_t v33 = v68;
  unint64_t v68 = 0;
  unint64_t v74 = v33;
  LOBYTE(v75) = (_BYTE)v73;
  int v76 = 0;
  LOBYTE(v61) = 0;
  int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsProgram>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsProgram>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
  char v64 = 1;
  if (v76 != -1) {
    ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsProgramEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v72, &v74);
  }
LABEL_52:
  if (v70)
  {
    int v34 = v69;
    if (v69 != -1) {
LABEL_54:
    }
      ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v34])(&v74, &v68);
  }
LABEL_55:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
  if (v64)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsProgram>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsProgram>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v61);
    if (v64)
    {
      if (v63 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsProgramEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v63])(&v74, &v61);
      }
    }
    return result;
  }
  unint64_t v20 = v67;
  if (!v67) {
    goto LABEL_104;
  }
  unint64_t v35 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v35 - v65;
  if (v35 < v65)
  {
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v66)
    {
      *(_WORD *)(v65 + v36) = 2870;
      unint64_t v37 = v36 + 2;
    }
  }
  unint64_t v38 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *((void *)v6 + 8);
  if (v38 + 16 >= v39) {
    goto LABEL_109;
  }
  while (1)
  {
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v40 = v38 + v37;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *((void *)v6 + 10) = v40;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v40);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, v15);
    char v6 = v73;
    unint64_t v74 = 0;
    IPC::Connection::createSyncMessageEncoder(3692, a3, (uint64_t *)&v74, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v74, (uint64_t *)&v68, 0, (uint64_t)&v61, v9);
    if (v62)
    {
      if (v62 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v61;
        int v41 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_76;
      }
      goto LABEL_108;
    }
    LOWORD(v71) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v61, &v71);
    if (!BYTE1(v71)) {
      break;
    }
    int v41 = v62;
    if (!v62)
    {
      unint64_t v43 = v61;
      unint64_t v61 = 0;
      char v44 = (char)v71;
      *(void *)a4 = v43;
      *(unsigned char *)(a4 + 8) = v44;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_76;
    }
LABEL_108:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
    unint64_t v38 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v41 = v62;
  if (v62 == -1) {
    goto LABEL_77;
  }
LABEL_76:
  ((void (*)(IPC::Decoder ***, uint64_t **))off_1EE9E9D68[v41])(&v71, &v61);
LABEL_77:
  unint64_t v45 = v68;
  unint64_t v68 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v42);
    WTF::fastFree(v46, v47);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsProgram>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsProgram>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsProgramEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA208[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsProgramEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsProgramEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v61, v9);
    if (!(_BYTE)v63) {
      goto LABEL_101;
    }
    unint64_t v49 = v61;
    unint64_t v48 = v62;
    unint64_t v50 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - (void)v61;
    if (v50 >= (unint64_t)v61)
    {
      unint64_t v52 = v51 + 2;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v62)
      {
        *(_WORD *)((char *)v61 + v51) = 2871;
        goto LABEL_87;
      }
      unint64_t v48 = 0;
    }
    unint64_t v52 = 0;
LABEL_87:
    unint64_t v54 = (char *)(((unint64_t)v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v54 >= (char *)v49 + v52)
    {
      unint64_t v52 = v54 - (char *)v49 + 8;
      if ((unint64_t)(v54 - (char *)v49) > 0xFFFFFFFFFFFFFFF7 || v52 > v48) {
        goto LABEL_112;
      }
      *(void *)unint64_t v54 = a3;
    }
    if (v48)
    {
      uint64_t v56 = *((void *)v6 + 9);
      unint64_t v57 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v58 = *((void *)v6 + 8);
      if (v57 + 16 >= v58) {
        unint64_t v57 = 0;
      }
      if (v52 <= 0x10) {
        unint64_t v52 = 16;
      }
      unint64_t v59 = v57 + v52;
      if (v58 <= v59) {
        unint64_t v59 = 0;
      }
      *((void *)v6 + 10) = v59;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v56 + 16) + 128), v59) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_112:
    char v60 = 17;
    goto LABEL_102;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v65, v9);
  if (!v67)
  {
LABEL_101:
    char v60 = 15;
LABEL_102:
    *(unsigned char *)a4 = v60;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v65;
  unint64_t v14 = v66;
  uint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v71, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    int v76 = 1;
    LOBYTE(v61) = 0;
    int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsRenderbuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsRenderbuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
    char v64 = 1;
    if (v76 != -1) {
      ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v68, &v74);
    }
    goto LABEL_55;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3695;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_105;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    char v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v68) = 0;
        unsigned __int8 v70 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *((void *)v6 + 8);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    *((void *)v6 + 10) = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v74, (uint64_t)v6 + 64, v9);
    if (!(_BYTE)v76)
    {
      LOBYTE(v68) = 16;
      int v69 = 1;
LABEL_41:
      unsigned __int8 v70 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v73, (uint64_t)&v74, (uint64_t *)v11);
    if (*((_WORD *)v73 + 25) != 2870)
    {
      unint64_t v68 = v73;
      int v69 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v73);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v71, v16, 0xE6Fu, (uint64_t)&v74, v9);
    LOBYTE(v68) = 0;
    int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, (uint64_t)&v74);
    unsigned __int8 v70 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v75])(&v73, &v74);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v71);
    if (!v70)
    {
      LOBYTE(v61) = 0;
      char v64 = 0;
      goto LABEL_55;
    }
    if (v69 == 1)
    {
      LOBYTE(v61) = (_BYTE)v68;
      int v34 = 1;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_54;
    }
    if (v69) {
      goto LABEL_108;
    }
    LOWORD(v73) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>((uint64_t *)v68, &v73);
    if (!BYTE1(v73))
    {
      LOBYTE(v61) = 13;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_52;
    }
    unint64_t v20 = v70;
    if (v70) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v19 = 0;
  }
  if (v69) {
    goto LABEL_108;
  }
  unint64_t v33 = v68;
  unint64_t v68 = 0;
  unint64_t v74 = v33;
  LOBYTE(v75) = (_BYTE)v73;
  int v76 = 0;
  LOBYTE(v61) = 0;
  int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsRenderbuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsRenderbuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
  char v64 = 1;
  if (v76 != -1) {
    ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v72, &v74);
  }
LABEL_52:
  if (v70)
  {
    int v34 = v69;
    if (v69 != -1) {
LABEL_54:
    }
      ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v34])(&v74, &v68);
  }
LABEL_55:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
  if (v64)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsRenderbuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsRenderbuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v61);
    if (v64)
    {
      if (v63 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v63])(&v74, &v61);
      }
    }
    return result;
  }
  unint64_t v20 = v67;
  if (!v67) {
    goto LABEL_104;
  }
  unint64_t v35 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v35 - v65;
  if (v35 < v65)
  {
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v66)
    {
      *(_WORD *)(v65 + v36) = 2870;
      unint64_t v37 = v36 + 2;
    }
  }
  unint64_t v38 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *((void *)v6 + 8);
  if (v38 + 16 >= v39) {
    goto LABEL_109;
  }
  while (1)
  {
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v40 = v38 + v37;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *((void *)v6 + 10) = v40;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v40);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, v15);
    char v6 = v73;
    unint64_t v74 = 0;
    IPC::Connection::createSyncMessageEncoder(3695, a3, (uint64_t *)&v74, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v74, (uint64_t *)&v68, 0, (uint64_t)&v61, v9);
    if (v62)
    {
      if (v62 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v61;
        int v41 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_76;
      }
      goto LABEL_108;
    }
    LOWORD(v71) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v61, &v71);
    if (!BYTE1(v71)) {
      break;
    }
    int v41 = v62;
    if (!v62)
    {
      unint64_t v43 = v61;
      unint64_t v61 = 0;
      char v44 = (char)v71;
      *(void *)a4 = v43;
      *(unsigned char *)(a4 + 8) = v44;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_76;
    }
LABEL_108:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
    unint64_t v38 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v41 = v62;
  if (v62 == -1) {
    goto LABEL_77;
  }
LABEL_76:
  ((void (*)(IPC::Decoder ***, uint64_t **))off_1EE9E9D68[v41])(&v71, &v61);
LABEL_77:
  unint64_t v45 = v68;
  unint64_t v68 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v42);
    WTF::fastFree(v46, v47);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsRenderbuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsRenderbuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA218[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v61, v9);
    if (!(_BYTE)v63) {
      goto LABEL_101;
    }
    unint64_t v49 = v61;
    unint64_t v48 = v62;
    unint64_t v50 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - (void)v61;
    if (v50 >= (unint64_t)v61)
    {
      unint64_t v52 = v51 + 2;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v62)
      {
        *(_WORD *)((char *)v61 + v51) = 2871;
        goto LABEL_87;
      }
      unint64_t v48 = 0;
    }
    unint64_t v52 = 0;
LABEL_87:
    unint64_t v54 = (char *)(((unint64_t)v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v54 >= (char *)v49 + v52)
    {
      unint64_t v52 = v54 - (char *)v49 + 8;
      if ((unint64_t)(v54 - (char *)v49) > 0xFFFFFFFFFFFFFFF7 || v52 > v48) {
        goto LABEL_112;
      }
      *(void *)unint64_t v54 = a3;
    }
    if (v48)
    {
      uint64_t v56 = *((void *)v6 + 9);
      unint64_t v57 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v58 = *((void *)v6 + 8);
      if (v57 + 16 >= v58) {
        unint64_t v57 = 0;
      }
      if (v52 <= 0x10) {
        unint64_t v52 = 16;
      }
      unint64_t v59 = v57 + v52;
      if (v58 <= v59) {
        unint64_t v59 = 0;
      }
      *((void *)v6 + 10) = v59;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v56 + 16) + 128), v59) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_112:
    char v60 = 17;
    goto LABEL_102;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v65, v9);
  if (!v67)
  {
LABEL_101:
    char v60 = 15;
LABEL_102:
    *(unsigned char *)a4 = v60;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v65;
  unint64_t v14 = v66;
  uint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v71, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    int v76 = 1;
    LOBYTE(v61) = 0;
    int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsShader>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsShader>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
    char v64 = 1;
    if (v76 != -1) {
      ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsShaderEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v68, &v74);
    }
    goto LABEL_55;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3697;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_105;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    char v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v68) = 0;
        unsigned __int8 v70 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *((void *)v6 + 8);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    *((void *)v6 + 10) = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v74, (uint64_t)v6 + 64, v9);
    if (!(_BYTE)v76)
    {
      LOBYTE(v68) = 16;
      int v69 = 1;
LABEL_41:
      unsigned __int8 v70 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v73, (uint64_t)&v74, (uint64_t *)v11);
    if (*((_WORD *)v73 + 25) != 2870)
    {
      unint64_t v68 = v73;
      int v69 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v73);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v71, v16, 0xE71u, (uint64_t)&v74, v9);
    LOBYTE(v68) = 0;
    int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, (uint64_t)&v74);
    unsigned __int8 v70 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v75])(&v73, &v74);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v71);
    if (!v70)
    {
      LOBYTE(v61) = 0;
      char v64 = 0;
      goto LABEL_55;
    }
    if (v69 == 1)
    {
      LOBYTE(v61) = (_BYTE)v68;
      int v34 = 1;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_54;
    }
    if (v69) {
      goto LABEL_108;
    }
    LOWORD(v73) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>((uint64_t *)v68, &v73);
    if (!BYTE1(v73))
    {
      LOBYTE(v61) = 13;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_52;
    }
    unint64_t v20 = v70;
    if (v70) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v19 = 0;
  }
  if (v69) {
    goto LABEL_108;
  }
  unint64_t v33 = v68;
  unint64_t v68 = 0;
  unint64_t v74 = v33;
  LOBYTE(v75) = (_BYTE)v73;
  int v76 = 0;
  LOBYTE(v61) = 0;
  int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsShader>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsShader>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
  char v64 = 1;
  if (v76 != -1) {
    ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsShaderEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v72, &v74);
  }
LABEL_52:
  if (v70)
  {
    int v34 = v69;
    if (v69 != -1) {
LABEL_54:
    }
      ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v34])(&v74, &v68);
  }
LABEL_55:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
  if (v64)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsShader>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsShader>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v61);
    if (v64)
    {
      if (v63 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsShaderEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v63])(&v74, &v61);
      }
    }
    return result;
  }
  unint64_t v20 = v67;
  if (!v67) {
    goto LABEL_104;
  }
  unint64_t v35 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v35 - v65;
  if (v35 < v65)
  {
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v66)
    {
      *(_WORD *)(v65 + v36) = 2870;
      unint64_t v37 = v36 + 2;
    }
  }
  unint64_t v38 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *((void *)v6 + 8);
  if (v38 + 16 >= v39) {
    goto LABEL_109;
  }
  while (1)
  {
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v40 = v38 + v37;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *((void *)v6 + 10) = v40;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v40);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, v15);
    char v6 = v73;
    unint64_t v74 = 0;
    IPC::Connection::createSyncMessageEncoder(3697, a3, (uint64_t *)&v74, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v74, (uint64_t *)&v68, 0, (uint64_t)&v61, v9);
    if (v62)
    {
      if (v62 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v61;
        int v41 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_76;
      }
      goto LABEL_108;
    }
    LOWORD(v71) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v61, &v71);
    if (!BYTE1(v71)) {
      break;
    }
    int v41 = v62;
    if (!v62)
    {
      unint64_t v43 = v61;
      unint64_t v61 = 0;
      char v44 = (char)v71;
      *(void *)a4 = v43;
      *(unsigned char *)(a4 + 8) = v44;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_76;
    }
LABEL_108:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
    unint64_t v38 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v41 = v62;
  if (v62 == -1) {
    goto LABEL_77;
  }
LABEL_76:
  ((void (*)(IPC::Decoder ***, uint64_t **))off_1EE9E9D68[v41])(&v71, &v61);
LABEL_77:
  unint64_t v45 = v68;
  unint64_t v68 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v42);
    WTF::fastFree(v46, v47);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsShader>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsShader>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsShaderEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA228[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsShaderEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsShaderEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v61, v9);
    if (!(_BYTE)v63) {
      goto LABEL_101;
    }
    unint64_t v49 = v61;
    unint64_t v48 = v62;
    unint64_t v50 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - (void)v61;
    if (v50 >= (unint64_t)v61)
    {
      unint64_t v52 = v51 + 2;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v62)
      {
        *(_WORD *)((char *)v61 + v51) = 2871;
        goto LABEL_87;
      }
      unint64_t v48 = 0;
    }
    unint64_t v52 = 0;
LABEL_87:
    unint64_t v54 = (char *)(((unint64_t)v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v54 >= (char *)v49 + v52)
    {
      unint64_t v52 = v54 - (char *)v49 + 8;
      if ((unint64_t)(v54 - (char *)v49) > 0xFFFFFFFFFFFFFFF7 || v52 > v48) {
        goto LABEL_112;
      }
      *(void *)unint64_t v54 = a3;
    }
    if (v48)
    {
      uint64_t v56 = *((void *)v6 + 9);
      unint64_t v57 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v58 = *((void *)v6 + 8);
      if (v57 + 16 >= v58) {
        unint64_t v57 = 0;
      }
      if (v52 <= 0x10) {
        unint64_t v52 = 16;
      }
      unint64_t v59 = v57 + v52;
      if (v58 <= v59) {
        unint64_t v59 = 0;
      }
      *((void *)v6 + 10) = v59;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v56 + 16) + 128), v59) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_112:
    char v60 = 17;
    goto LABEL_102;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v65, v9);
  if (!v67)
  {
LABEL_101:
    char v60 = 15;
LABEL_102:
    *(unsigned char *)a4 = v60;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v65;
  unint64_t v14 = v66;
  uint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v71, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    int v76 = 1;
    LOBYTE(v61) = 0;
    int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTexture>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTexture>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
    char v64 = 1;
    if (v76 != -1) {
      ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsTextureEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v68, &v74);
    }
    goto LABEL_55;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3699;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_105;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    char v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v68) = 0;
        unsigned __int8 v70 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *((void *)v6 + 8);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    *((void *)v6 + 10) = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v74, (uint64_t)v6 + 64, v9);
    if (!(_BYTE)v76)
    {
      LOBYTE(v68) = 16;
      int v69 = 1;
LABEL_41:
      unsigned __int8 v70 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v73, (uint64_t)&v74, (uint64_t *)v11);
    if (*((_WORD *)v73 + 25) != 2870)
    {
      unint64_t v68 = v73;
      int v69 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v73);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v71, v16, 0xE73u, (uint64_t)&v74, v9);
    LOBYTE(v68) = 0;
    int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, (uint64_t)&v74);
    unsigned __int8 v70 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v75])(&v73, &v74);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v71);
    if (!v70)
    {
      LOBYTE(v61) = 0;
      char v64 = 0;
      goto LABEL_55;
    }
    if (v69 == 1)
    {
      LOBYTE(v61) = (_BYTE)v68;
      int v34 = 1;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_54;
    }
    if (v69) {
      goto LABEL_108;
    }
    LOWORD(v73) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>((uint64_t *)v68, &v73);
    if (!BYTE1(v73))
    {
      LOBYTE(v61) = 13;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_52;
    }
    unint64_t v20 = v70;
    if (v70) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v19 = 0;
  }
  if (v69) {
    goto LABEL_108;
  }
  unint64_t v33 = v68;
  unint64_t v68 = 0;
  unint64_t v74 = v33;
  LOBYTE(v75) = (_BYTE)v73;
  int v76 = 0;
  LOBYTE(v61) = 0;
  int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTexture>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTexture>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
  char v64 = 1;
  if (v76 != -1) {
    ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsTextureEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v72, &v74);
  }
LABEL_52:
  if (v70)
  {
    int v34 = v69;
    if (v69 != -1) {
LABEL_54:
    }
      ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v34])(&v74, &v68);
  }
LABEL_55:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
  if (v64)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTexture>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTexture>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v61);
    if (v64)
    {
      if (v63 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsTextureEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v63])(&v74, &v61);
      }
    }
    return result;
  }
  unint64_t v20 = v67;
  if (!v67) {
    goto LABEL_104;
  }
  unint64_t v35 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v35 - v65;
  if (v35 < v65)
  {
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v66)
    {
      *(_WORD *)(v65 + v36) = 2870;
      unint64_t v37 = v36 + 2;
    }
  }
  unint64_t v38 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *((void *)v6 + 8);
  if (v38 + 16 >= v39) {
    goto LABEL_109;
  }
  while (1)
  {
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v40 = v38 + v37;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *((void *)v6 + 10) = v40;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v40);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, v15);
    char v6 = v73;
    unint64_t v74 = 0;
    IPC::Connection::createSyncMessageEncoder(3699, a3, (uint64_t *)&v74, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v74, (uint64_t *)&v68, 0, (uint64_t)&v61, v9);
    if (v62)
    {
      if (v62 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v61;
        int v41 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_76;
      }
      goto LABEL_108;
    }
    LOWORD(v71) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v61, &v71);
    if (!BYTE1(v71)) {
      break;
    }
    int v41 = v62;
    if (!v62)
    {
      unint64_t v43 = v61;
      unint64_t v61 = 0;
      char v44 = (char)v71;
      *(void *)a4 = v43;
      *(unsigned char *)(a4 + 8) = v44;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_76;
    }
LABEL_108:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
    unint64_t v38 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v41 = v62;
  if (v62 == -1) {
    goto LABEL_77;
  }
LABEL_76:
  ((void (*)(IPC::Decoder ***, uint64_t **))off_1EE9E9D68[v41])(&v71, &v61);
LABEL_77:
  unint64_t v45 = v68;
  unint64_t v68 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v42);
    WTF::fastFree(v46, v47);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTexture>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTexture>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsTextureEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA238[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsTextureEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsTextureEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::LineWidth,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 1014;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *(_DWORD *)a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 1014;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v28, *a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::LinkProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 1015;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 1015;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PixelStorei,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v58, v7);
    if (!v60) {
      return 15;
    }
    unint64_t v46 = v58;
    unint64_t v45 = v59;
    unint64_t v47 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v48 = v47 - v58;
    if (v47 >= v58)
    {
      unint64_t v49 = v48 + 2;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v49 <= v59)
      {
        *(_WORD *)(v58 + v48) = 2871;
        goto LABEL_59;
      }
      unint64_t v45 = 0;
    }
    unint64_t v49 = 0;
LABEL_59:
    unint64_t v51 = (void *)((v46 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v51 >= v46 + v49)
    {
      unint64_t v49 = (unint64_t)v51 - v46 + 8;
      if ((unint64_t)v51 - v46 > 0xFFFFFFFFFFFFFFF7 || v49 > v45) {
        return 17;
      }
      *unint64_t v51 = a3;
    }
    if (v45)
    {
      unint64_t v53 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v54 = *(void *)(a1 + 64);
      if (v53 + 16 >= v54) {
        unint64_t v53 = 0;
      }
      if (v49 <= 0x10) {
        unint64_t v49 = 16;
      }
      unint64_t v55 = v53 + v49;
      if (v54 <= v55) {
        unint64_t v55 = 0;
      }
      *(void *)(a1 + 80) = v55;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v55) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v58, v7);
  if (!v60) {
    return 15;
  }
  unint64_t v9 = v58;
  unint64_t v10 = v59;
  unint64_t v11 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v58;
  if (v11 >= v58)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v59)
    {
      *(_WORD *)(v58 + v12) = 1023;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v20 >= v9 + v13)
  {
    unint64_t v13 = (unint64_t)v20 - v9 + 4;
    if ((unint64_t)v20 - v9 > 0xFFFFFFFFFFFFFFFBLL || v13 > v10) {
      goto LABEL_33;
    }
    *unint64_t v20 = a2[1];
  }
  if (v10)
  {
    uint64_t v22 = *(void *)(a1 + 72);
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = *(void *)(a1 + 64);
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v25 = v23 + v13;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    *(void *)(a1 + 80) = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v22 + 16) + 128), v25) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v26 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v26;
  }
LABEL_33:
  if (!v60)
  {
    __break(1u);
    goto LABEL_79;
  }
  unint64_t v27 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = v27 - v58;
  if (v27 < v58)
  {
    unint64_t v29 = 0;
  }
  else
  {
    unint64_t v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v59)
    {
      *(_WORD *)(v58 + v28) = 2870;
      unint64_t v29 = v28 + 2;
    }
  }
  unint64_t v30 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = *(void *)(a1 + 64);
  if (v30 + 16 >= v31) {
    unint64_t v30 = 0;
  }
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v32 = v30 + v29;
  if (v31 <= v32) {
    unint64_t v32 = 0;
  }
  *(void *)(a1 + 80) = v32;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v32);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(a1 + 8));
  unint64_t v33 = v57;
  unint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v34 = 1023;
  *((void *)v34 + 1) = a3;
  *((void *)v34 + 66) = (char *)v34 + 16;
  *((void *)v34 + 67) = 512;
  *((void *)v34 + 68) = 0;
  *((void *)v34 + 70) = 0;
  *((void *)v34 + 69) = 0;
  IPC::Encoder::encodeHeader(v34);
  unint64_t v61 = v34;
  int v35 = *a2;
  unint64_t v36 = (_DWORD *)IPC::Encoder::grow(v34, 4uLL, 4);
  if (v37 <= 3)
  {
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x199081574);
  }
  *unint64_t v36 = v35;
  int v38 = a2[1];
  unint64_t v39 = (_DWORD *)IPC::Encoder::grow(v34, 4uLL, 4);
  if (v40 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199081594);
  }
  _DWORD *v39 = v38;
  uint64_t v26 = IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v61, 1, 0);
  unint64_t v42 = v61;
  unint64_t v61 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v43, v44);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v57);
  return v26;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PolygonOffset,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1025;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)&v47, (_DWORD *)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v26 = 1025;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v26, *(float *)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v26, *(float *)(a2 + 4));
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::RenderbufferStorage,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v74, v7);
    if (!v76) {
      return 15;
    }
    unint64_t v61 = v74;
    unint64_t v60 = v75;
    unint64_t v62 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v63 = v62 - v74;
    if (v62 >= v74)
    {
      unint64_t v64 = v63 + 2;
      if (v63 <= 0xFFFFFFFFFFFFFFFDLL && v64 <= v75)
      {
        *(_WORD *)(v74 + v63) = 2871;
        goto LABEL_70;
      }
      unint64_t v60 = 0;
    }
    unint64_t v64 = 0;
LABEL_70:
    unint64_t v66 = (void *)((v61 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v66 >= v61 + v64)
    {
      unint64_t v64 = (unint64_t)v66 - v61 + 8;
      if ((unint64_t)v66 - v61 > 0xFFFFFFFFFFFFFFF7 || v64 > v60) {
        return 17;
      }
      void *v66 = a3;
    }
    if (v60)
    {
      unint64_t v68 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v69 = *(void *)(a1 + 64);
      if (v68 + 16 >= v69) {
        unint64_t v68 = 0;
      }
      if (v64 <= 0x10) {
        unint64_t v64 = 16;
      }
      unint64_t v70 = v68 + v64;
      if (v69 <= v70) {
        unint64_t v70 = 0;
      }
      *(void *)(a1 + 80) = v70;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v70) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v74, v7);
  if (!v76) {
    return 15;
  }
  unint64_t v9 = v74;
  unint64_t v10 = v75;
  unint64_t v11 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v74;
  if (v11 >= v74)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v75)
    {
      *(_WORD *)(v74 + v12) = 1031;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v72 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v72 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v72 = v10;
  }
  unint64_t v29 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v29 >= v9 + v13)
  {
    unint64_t v30 = (char *)v29 - v9;
    if ((unint64_t)v29 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_42;
    }
    unint64_t v13 = (unint64_t)(v30 + 4);
    if ((unint64_t)(v30 + 4) > v72) {
      goto LABEL_42;
    }
    *unint64_t v29 = a2[3];
  }
  if (v72)
  {
    uint64_t v31 = *(void *)(a1 + 72);
    unint64_t v32 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v33 = *(void *)(a1 + 64);
    if (v32 + 16 >= v33) {
      unint64_t v32 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v34 = v32 + v13;
    if (v33 <= v34) {
      unint64_t v34 = 0;
    }
    *(void *)(a1 + 80) = v34;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v31 + 16) + 128), v34) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v35 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v35;
  }
LABEL_42:
  if (!v76)
  {
    __break(1u);
    goto LABEL_91;
  }
  unint64_t v36 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - v74;
  if (v36 < v74)
  {
    unint64_t v38 = 0;
  }
  else
  {
    unint64_t v38 = 0;
    if (v37 <= 0xFFFFFFFFFFFFFFFDLL && v37 + 2 <= v75)
    {
      *(_WORD *)(v74 + v37) = 2870;
      unint64_t v38 = v37 + 2;
    }
  }
  unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(a1 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v38 <= 0x10) {
    unint64_t v38 = 16;
  }
  unint64_t v41 = v39 + v38;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(a1 + 80) = v41;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)(a1 + 8));
  unint64_t v42 = v73;
  unint64_t v43 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v43 = 1031;
  *((void *)v43 + 1) = a3;
  *((void *)v43 + 66) = (char *)v43 + 16;
  *((void *)v43 + 67) = 512;
  *((void *)v43 + 68) = 0;
  *((void *)v43 + 70) = 0;
  *((void *)v43 + 69) = 0;
  IPC::Encoder::encodeHeader(v43);
  char v77 = v43;
  int v44 = *a2;
  unint64_t v45 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v46 <= 3)
  {
LABEL_91:
    __break(0xC471u);
    JUMPOUT(0x199081E04);
  }
  *unint64_t v45 = v44;
  int v47 = a2[1];
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v49 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199081E24);
  }
  *unint64_t v48 = v47;
  int v50 = a2[2];
  unint64_t v51 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199081E44);
  }
  *unint64_t v51 = v50;
  int v53 = a2[3];
  unint64_t v54 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199081E64);
  }
  _DWORD *v54 = v53;
  uint64_t v35 = IPC::Connection::sendMessageImpl((uint64_t)v42, (uint64_t *)&v77, 1, 0);
  unint64_t v57 = v77;
  char v77 = 0;
  if (v57)
  {
    IPC::Encoder::~Encoder(v57, v56);
    WTF::fastFree(v58, v59);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
  return v35;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SampleCoverage,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v51, v7);
    if (!v53) {
      return 15;
    }
    unint64_t v24 = v51;
    unint64_t v23 = v52;
    unint64_t v25 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v26 = v25 - v51;
    if (v25 >= v51)
    {
      unint64_t v27 = v26 + 2;
      if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v27 <= v52)
      {
        *(_WORD *)(v51 + v26) = 2871;
        goto LABEL_38;
      }
      unint64_t v23 = 0;
    }
    unint64_t v27 = 0;
LABEL_38:
    unint64_t v29 = (void *)((v24 + v27 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v29 >= v24 + v27)
    {
      unint64_t v27 = (unint64_t)v29 - v24 + 8;
      if ((unint64_t)v29 - v24 > 0xFFFFFFFFFFFFFFF7 || v27 > v23) {
        return 17;
      }
      *unint64_t v29 = a3;
    }
    if (v23)
    {
      unint64_t v31 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *(void *)(a1 + 64);
      if (v31 + 16 >= v32) {
        unint64_t v31 = 0;
      }
      if (v27 <= 0x10) {
        unint64_t v27 = 16;
      }
      unint64_t v33 = v31 + v27;
      if (v32 <= v33) {
        unint64_t v33 = 0;
      }
      *(void *)(a1 + 80) = v33;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v33) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v51, v7);
  if (!v53) {
    return 15;
  }
  unint64_t v9 = v51;
  unint64_t v10 = v52;
  unint64_t v11 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v51;
  if (v11 >= v51)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v52)
    {
      *(_WORD *)(v51 + v12) = 1036;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v9 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v9 + 4;
    if ((unint64_t)v15 - v9 > 0xFFFFFFFFFFFFFFFBLL || v13 > v10) {
      goto LABEL_54;
    }
    _DWORD *v15 = *(_DWORD *)a2;
  }
  if (v13 < v10)
  {
    *(unsigned char *)(v9 + v13) = *(unsigned char *)(a2 + 4);
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0xF) {
      unint64_t v13 = 15;
    }
    unint64_t v20 = v13 + v18;
    if (v19 > v20 + 1) {
      unint64_t v21 = v20 + 1;
    }
    else {
      unint64_t v21 = 0;
    }
    *(void *)(a1 + 80) = v21;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v21) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v22 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v22;
  }
LABEL_54:
  if (!v53)
  {
    __break(1u);
    goto LABEL_75;
  }
  unint64_t v35 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v35 - v51;
  if (v35 < v51)
  {
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v52)
    {
      *(_WORD *)(v51 + v36) = 2870;
      unint64_t v37 = v36 + 2;
    }
  }
  unint64_t v38 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *(void *)(a1 + 64);
  if (v38 + 16 >= v39) {
    unint64_t v38 = 0;
  }
  if (v37 <= 0x10) {
    unint64_t v37 = 16;
  }
  unint64_t v40 = v38 + v37;
  if (v39 <= v40) {
    unint64_t v40 = 0;
  }
  *(void *)(a1 + 80) = v40;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v40);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(a1 + 8));
  unint64_t v41 = v50;
  unint64_t v42 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v42 = 1036;
  *((void *)v42 + 1) = a3;
  *((void *)v42 + 66) = (char *)v42 + 16;
  *((void *)v42 + 67) = 512;
  *((void *)v42 + 68) = 0;
  *((void *)v42 + 70) = 0;
  *((void *)v42 + 69) = 0;
  IPC::Encoder::encodeHeader(v42);
  unint64_t v54 = v42;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v42, *(float *)a2);
  char v43 = *(unsigned char *)(a2 + 4);
  int v44 = (unsigned char *)IPC::Encoder::grow(v42, 1uLL, 1);
  if (!v45)
  {
LABEL_75:
    __break(0xC471u);
    JUMPOUT(0x199082264);
  }
  unsigned char *v44 = v43;
  uint64_t v22 = IPC::Connection::sendMessageImpl((uint64_t)v41, (uint64_t *)&v54, 1, 0);
  int v47 = v54;
  unint64_t v54 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
  return v22;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Scissor,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1039;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1039;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ShaderSource,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1043;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1043;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilFunc,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v67, v7);
    if (!v69) {
      return 15;
    }
    unint64_t v55 = v67;
    unint64_t v54 = v68;
    unint64_t v56 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v57 = v56 - v67;
    if (v56 >= v67)
    {
      unint64_t v58 = v57 + 2;
      if (v57 <= 0xFFFFFFFFFFFFFFFDLL && v58 <= v68)
      {
        *(_WORD *)(v67 + v57) = 2871;
        goto LABEL_64;
      }
      unint64_t v54 = 0;
    }
    unint64_t v58 = 0;
LABEL_64:
    unint64_t v60 = (void *)((v55 + v58 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v60 >= v55 + v58)
    {
      unint64_t v58 = (unint64_t)v60 - v55 + 8;
      if ((unint64_t)v60 - v55 > 0xFFFFFFFFFFFFFFF7 || v58 > v54) {
        return 17;
      }
      void *v60 = a3;
    }
    if (v54)
    {
      unint64_t v62 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v63 = *(void *)(a1 + 64);
      if (v62 + 16 >= v63) {
        unint64_t v62 = 0;
      }
      if (v58 <= 0x10) {
        unint64_t v58 = 16;
      }
      unint64_t v64 = v62 + v58;
      if (v63 <= v64) {
        unint64_t v64 = 0;
      }
      *(void *)(a1 + 80) = v64;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v64) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v67, v7);
  if (!v69) {
    return 15;
  }
  unint64_t v9 = v67;
  unint64_t v10 = v68;
  unint64_t v11 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v67;
  if (v11 >= v67)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v68)
    {
      *(_WORD *)(v67 + v12) = 1045;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v25 >= v9 + v13)
  {
    unint64_t v26 = (char *)v25 - v9;
    if ((unint64_t)v25 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_37;
    }
    unint64_t v13 = (unint64_t)(v26 + 4);
    if ((unint64_t)(v26 + 4) > v10) {
      goto LABEL_37;
    }
    _DWORD *v25 = a2[2];
  }
  if (v10)
  {
    uint64_t v27 = *(void *)(a1 + 72);
    unint64_t v28 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *(void *)(a1 + 64);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    uint64_t v30 = 16;
    if (v13 > 0x10) {
      uint64_t v30 = v13;
    }
    unint64_t v31 = v28 + v30;
    if (v29 <= v31) {
      unint64_t v31 = 0;
    }
    *(void *)(a1 + 80) = v31;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v27 + 16) + 128), v31) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v32 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v32;
  }
LABEL_37:
  if (!v69)
  {
    __break(1u);
    goto LABEL_85;
  }
  unint64_t v33 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - v67;
  if (v33 < v67)
  {
    unint64_t v35 = 0;
  }
  else
  {
    unint64_t v35 = 0;
    if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v68)
    {
      *(_WORD *)(v67 + v34) = 2870;
      unint64_t v35 = v34 + 2;
    }
  }
  unint64_t v36 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = *(void *)(a1 + 64);
  if (v36 + 16 >= v37) {
    unint64_t v36 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v38 = v36 + v35;
  if (v37 <= v38) {
    unint64_t v38 = 0;
  }
  *(void *)(a1 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v38);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v66, (uint64_t **)(a1 + 8));
  unint64_t v39 = v66;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1045;
  *((void *)v40 + 1) = a3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v70 = v40;
  int v41 = *a2;
  unint64_t v42 = (_DWORD *)IPC::Encoder::grow(v40, 4uLL, 4);
  if (v43 <= 3)
  {
LABEL_85:
    __break(0xC471u);
    JUMPOUT(0x199082DD0);
  }
  *unint64_t v42 = v41;
  int v44 = a2[1];
  unint64_t v45 = (_DWORD *)IPC::Encoder::grow(v40, 4uLL, 4);
  if (v46 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199082DF0);
  }
  *unint64_t v45 = v44;
  int v47 = a2[2];
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v40, 4uLL, 4);
  if (v49 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199082E10);
  }
  *unint64_t v48 = v47;
  uint64_t v32 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v70, 1, 0);
  unint64_t v51 = v70;
  unint64_t v70 = 0;
  if (v51)
  {
    IPC::Encoder::~Encoder(v51, v50);
    WTF::fastFree(v52, v53);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  return v32;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilFuncSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v74, v7);
    if (!v76) {
      return 15;
    }
    unint64_t v61 = v74;
    unint64_t v60 = v75;
    unint64_t v62 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v63 = v62 - v74;
    if (v62 >= v74)
    {
      unint64_t v64 = v63 + 2;
      if (v63 <= 0xFFFFFFFFFFFFFFFDLL && v64 <= v75)
      {
        *(_WORD *)(v74 + v63) = 2871;
        goto LABEL_70;
      }
      unint64_t v60 = 0;
    }
    unint64_t v64 = 0;
LABEL_70:
    unint64_t v66 = (void *)((v61 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v66 >= v61 + v64)
    {
      unint64_t v64 = (unint64_t)v66 - v61 + 8;
      if ((unint64_t)v66 - v61 > 0xFFFFFFFFFFFFFFF7 || v64 > v60) {
        return 17;
      }
      void *v66 = a3;
    }
    if (v60)
    {
      unint64_t v68 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v69 = *(void *)(a1 + 64);
      if (v68 + 16 >= v69) {
        unint64_t v68 = 0;
      }
      if (v64 <= 0x10) {
        unint64_t v64 = 16;
      }
      unint64_t v70 = v68 + v64;
      if (v69 <= v70) {
        unint64_t v70 = 0;
      }
      *(void *)(a1 + 80) = v70;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v70) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v74, v7);
  if (!v76) {
    return 15;
  }
  unint64_t v9 = v74;
  unint64_t v10 = v75;
  unint64_t v11 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v74;
  if (v11 >= v74)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v75)
    {
      *(_WORD *)(v74 + v12) = 1046;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v72 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v72 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v72 = v10;
  }
  unint64_t v29 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v29 >= v9 + v13)
  {
    uint64_t v30 = (char *)v29 - v9;
    if ((unint64_t)v29 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_42;
    }
    unint64_t v13 = (unint64_t)(v30 + 4);
    if ((unint64_t)(v30 + 4) > v72) {
      goto LABEL_42;
    }
    *unint64_t v29 = a2[3];
  }
  if (v72)
  {
    uint64_t v31 = *(void *)(a1 + 72);
    unint64_t v32 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v33 = *(void *)(a1 + 64);
    if (v32 + 16 >= v33) {
      unint64_t v32 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v34 = v32 + v13;
    if (v33 <= v34) {
      unint64_t v34 = 0;
    }
    *(void *)(a1 + 80) = v34;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v31 + 16) + 128), v34) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v35 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v35;
  }
LABEL_42:
  if (!v76)
  {
    __break(1u);
    goto LABEL_91;
  }
  unint64_t v36 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - v74;
  if (v36 < v74)
  {
    unint64_t v38 = 0;
  }
  else
  {
    unint64_t v38 = 0;
    if (v37 <= 0xFFFFFFFFFFFFFFFDLL && v37 + 2 <= v75)
    {
      *(_WORD *)(v74 + v37) = 2870;
      unint64_t v38 = v37 + 2;
    }
  }
  unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(a1 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v38 <= 0x10) {
    unint64_t v38 = 16;
  }
  unint64_t v41 = v39 + v38;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(a1 + 80) = v41;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)(a1 + 8));
  unint64_t v42 = v73;
  unint64_t v43 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v43 = 1046;
  *((void *)v43 + 1) = a3;
  *((void *)v43 + 66) = (char *)v43 + 16;
  *((void *)v43 + 67) = 512;
  *((void *)v43 + 68) = 0;
  *((void *)v43 + 70) = 0;
  *((void *)v43 + 69) = 0;
  IPC::Encoder::encodeHeader(v43);
  char v77 = v43;
  int v44 = *a2;
  unint64_t v45 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v46 <= 3)
  {
LABEL_91:
    __break(0xC471u);
    JUMPOUT(0x1990832F8);
  }
  *unint64_t v45 = v44;
  int v47 = a2[1];
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v49 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199083318);
  }
  *unint64_t v48 = v47;
  int v50 = a2[2];
  unint64_t v51 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199083338);
  }
  *unint64_t v51 = v50;
  int v53 = a2[3];
  unint64_t v54 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199083358);
  }
  _DWORD *v54 = v53;
  uint64_t v35 = IPC::Connection::sendMessageImpl((uint64_t)v42, (uint64_t *)&v77, 1, 0);
  unint64_t v57 = v77;
  char v77 = 0;
  if (v57)
  {
    IPC::Encoder::~Encoder(v57, v56);
    WTF::fastFree(v58, v59);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
  return v35;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilMask,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 1047;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 1047;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  uint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilMaskSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1048;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1048;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilOp,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1049;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1049;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilOpSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1050;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1050;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexParameterf,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1055;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,float>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,float>,0ul,1ul,2ul>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1055;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,float>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,float>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t *IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,float>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,float>,0ul,1ul,2ul>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    unint64_t v13 = v11 - v2;
    unint64_t v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      uint64_t v2 = *result;
      unint64_t v3 = v14;
    }
  }
  unint64_t v16 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v16 >= v2 + v3)
  {
    unint64_t v17 = (unint64_t)v16 - v2 + 4;
    if ((unint64_t)v16 - v2 > 0xFFFFFFFFFFFFFFFBLL || v17 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *unint64_t v16 = a2[2];
      result[2] = v17;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,float>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,float>,0ul,1ul,2ul>(IPC::Encoder *a1, float *a2)
{
  float v4 = *a2;
  unint64_t v5 = (float *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3 || (float *v5 = v4, v7 = *((_DWORD *)a2 + 1), v8 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4), v9 <= 3))
  {
    __break(0xC471u);
    JUMPOUT(0x199084688);
  }
  *unint64_t v8 = v7;
  float v10 = a2[2];

  return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v10);
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1056;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1056;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v55, v7);
    if (!v57) {
      return 15;
    }
    unint64_t v43 = v55;
    unint64_t v42 = v56;
    unint64_t v44 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v45 = v44 - v55;
    if (v44 >= v55)
    {
      unint64_t v46 = v45 + 2;
      if (v45 <= 0xFFFFFFFFFFFFFFFDLL && v46 <= v56)
      {
        *(_WORD *)(v55 + v45) = 2871;
        goto LABEL_58;
      }
      unint64_t v42 = 0;
    }
    unint64_t v46 = 0;
LABEL_58:
    unint64_t v48 = (void *)((v43 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v48 >= v43 + v46)
    {
      unint64_t v46 = (unint64_t)v48 - v43 + 8;
      if ((unint64_t)v48 - v43 > 0xFFFFFFFFFFFFFFF7 || v46 > v42) {
        return 17;
      }
      *unint64_t v48 = a3;
    }
    if (v42)
    {
      unint64_t v50 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v51 = *(void *)(a1 + 64);
      if (v50 + 16 >= v51) {
        unint64_t v50 = 0;
      }
      if (v46 <= 0x10) {
        unint64_t v46 = 16;
      }
      unint64_t v52 = v50 + v46;
      if (v51 <= v52) {
        unint64_t v52 = 0;
      }
      *(void *)(a1 + 80) = v52;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v52) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v55, v7);
  if (!v57) {
    return 15;
  }
  unint64_t v9 = v55;
  unint64_t v10 = v56;
  unint64_t v11 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v55;
  if (v11 >= v55)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v56)
    {
      *(_WORD *)(v55 + v12) = 1064;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v20 >= v9 + v13)
  {
    unint64_t v13 = (unint64_t)v20 - v9 + 4;
    if ((unint64_t)v20 - v9 > 0xFFFFFFFFFFFFFFFBLL || v13 > v10) {
      goto LABEL_33;
    }
    *unint64_t v20 = *((_DWORD *)a2 + 1);
  }
  if (v10)
  {
    uint64_t v22 = *(void *)(a1 + 72);
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = *(void *)(a1 + 64);
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v25 = v23 + v13;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    *(void *)(a1 + 80) = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v22 + 16) + 128), v25) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v26 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v26;
  }
LABEL_33:
  if (!v57)
  {
    __break(1u);
    goto LABEL_78;
  }
  unint64_t v27 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = v27 - v55;
  if (v27 < v55)
  {
    unint64_t v29 = 0;
  }
  else
  {
    unint64_t v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v56)
    {
      *(_WORD *)(v55 + v28) = 2870;
      unint64_t v29 = v28 + 2;
    }
  }
  unint64_t v30 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = *(void *)(a1 + 64);
  if (v30 + 16 >= v31) {
    unint64_t v30 = 0;
  }
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v32 = v30 + v29;
  if (v31 <= v32) {
    unint64_t v32 = 0;
  }
  *(void *)(a1 + 80) = v32;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v32);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
  unint64_t v33 = v54;
  unint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v34 = 1064;
  *((void *)v34 + 1) = a3;
  *((void *)v34 + 66) = (char *)v34 + 16;
  *((void *)v34 + 67) = 512;
  *((void *)v34 + 68) = 0;
  *((void *)v34 + 70) = 0;
  *((void *)v34 + 69) = 0;
  IPC::Encoder::encodeHeader(v34);
  unint64_t v58 = v34;
  int v35 = *(_DWORD *)a2;
  unint64_t v36 = (_DWORD *)IPC::Encoder::grow(v34, 4uLL, 4);
  if (v37 <= 3)
  {
LABEL_78:
    __break(0xC471u);
    JUMPOUT(0x199084E14);
  }
  *unint64_t v36 = v35;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v34, a2[1]);
  uint64_t v26 = IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v58, 1, 0);
  unint64_t v39 = v58;
  unint64_t v58 = 0;
  if (v39)
  {
    IPC::Encoder::~Encoder(v39, v38);
    WTF::fastFree(v40, v41);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v54);
  return v26;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1065;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v26 = 1065;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

void *IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = *a1 + v2;
  unint64_t v4 = (v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v9 = v4 >= v3;
  unint64_t v5 = v4 - v3;
  if (v9)
  {
    unint64_t v6 = v5 + v2;
    unint64_t v7 = v6 + 4;
    unint64_t v8 = a1[1];
    if (v6 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      BOOL v9 = v7 >= v8;
      BOOL v10 = v7 == v8;
    }
    else
    {
      BOOL v9 = 1;
      BOOL v10 = 0;
    }
    if (!v10 && v9)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v6) = *(_DWORD *)a2;
      a1[2] = v7;
    }
  }
  return IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, **(const void ***)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
}

unint64_t IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(IPC::Encoder *a1, int *a2)
{
  int v4 = *a2;
  unint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    _DWORD *v5 = v4;
    uint64_t v7 = *((void *)a2 + 1);
    unint64_t v8 = *(const void **)v7;
    uint64_t v9 = *(void *)(v7 + 8);
    return IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v8, v9);
  }
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1066;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v26 = 1066;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1067;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v26 = 1067;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,std::span<int const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<int const,18446744073709551615ul> const&>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

unint64_t IPC::ArgumentCoder<std::tuple<int,std::span<int const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<int const,18446744073709551615ul> const&>,0ul,1ul>(IPC::Encoder *a1, int *a2)
{
  int v4 = *a2;
  unint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    _DWORD *v5 = v4;
    uint64_t v7 = *((void *)a2 + 1);
    double v8 = *(const void **)v7;
    uint64_t v9 = *(void *)(v7 + 8);
    return IPC::ArgumentCoder<std::span<int const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v8, v9);
  }
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v61, v7);
    if (!v63) {
      return 15;
    }
    unint64_t v49 = v61;
    unint64_t v48 = v62;
    unint64_t v50 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - v61;
    if (v50 >= v61)
    {
      unint64_t v52 = v51 + 2;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v62)
      {
        *(_WORD *)(v61 + v51) = 2871;
        goto LABEL_62;
      }
      unint64_t v48 = 0;
    }
    unint64_t v52 = 0;
LABEL_62:
    unint64_t v54 = (void *)((v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v54 >= v49 + v52)
    {
      unint64_t v52 = (unint64_t)v54 - v49 + 8;
      if ((unint64_t)v54 - v49 > 0xFFFFFFFFFFFFFFF7 || v52 > v48) {
        return 17;
      }
      void *v54 = a3;
    }
    if (v48)
    {
      unint64_t v56 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v57 = *(void *)(a1 + 64);
      if (v56 + 16 >= v57) {
        unint64_t v56 = 0;
      }
      if (v52 <= 0x10) {
        unint64_t v52 = 16;
      }
      unint64_t v58 = v56 + v52;
      if (v57 <= v58) {
        unint64_t v58 = 0;
      }
      *(void *)(a1 + 80) = v58;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v58) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v61, v7);
  if (!v63) {
    return 15;
  }
  unint64_t v9 = v61;
  unint64_t v10 = v62;
  unint64_t v11 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v61;
  if (v11 >= v61)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v62)
    {
      *(_WORD *)(v61 + v12) = 1070;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v25 >= v9 + v13)
  {
    uint64_t v26 = (char *)v25 - v9;
    if ((unint64_t)v25 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_37;
    }
    unint64_t v13 = (unint64_t)(v26 + 4);
    if ((unint64_t)(v26 + 4) > v10) {
      goto LABEL_37;
    }
    _DWORD *v25 = *((_DWORD *)a2 + 2);
  }
  if (v10)
  {
    uint64_t v27 = *(void *)(a1 + 72);
    unint64_t v28 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *(void *)(a1 + 64);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    uint64_t v30 = 16;
    if (v13 > 0x10) {
      uint64_t v30 = v13;
    }
    unint64_t v31 = v28 + v30;
    if (v29 <= v31) {
      unint64_t v31 = 0;
    }
    *(void *)(a1 + 80) = v31;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v27 + 16) + 128), v31) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v32 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v32;
  }
LABEL_37:
  if (!v63)
  {
    __break(1u);
    goto LABEL_83;
  }
  unint64_t v33 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - v61;
  if (v33 < v61)
  {
    unint64_t v35 = 0;
  }
  else
  {
    unint64_t v35 = 0;
    if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v62)
    {
      *(_WORD *)(v61 + v34) = 2870;
      unint64_t v35 = v34 + 2;
    }
  }
  unint64_t v36 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = *(void *)(a1 + 64);
  if (v36 + 16 >= v37) {
    unint64_t v36 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v38 = v36 + v35;
  if (v37 <= v38) {
    unint64_t v38 = 0;
  }
  *(void *)(a1 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v38);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v60, (uint64_t **)(a1 + 8));
  unint64_t v39 = v60;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1070;
  *((void *)v40 + 1) = a3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v64 = v40;
  int v41 = *(_DWORD *)a2;
  unint64_t v42 = (_DWORD *)IPC::Encoder::grow(v40, 4uLL, 4);
  if (v43 <= 3)
  {
LABEL_83:
    __break(0xC471u);
    JUMPOUT(0x199085E44);
  }
  *unint64_t v42 = v41;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v40, a2[1]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v40, a2[2]);
  uint64_t v32 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v64, 1, 0);
  unint64_t v45 = v64;
  unint64_t v64 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v44);
    WTF::fastFree(v46, v47);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v60);
  return v32;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    uint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1071;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v26 = 1071;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v67, v7);
    if (!v69) {
      return 15;
    }
    unint64_t v55 = v67;
    unint64_t v54 = v68;
    unint64_t v56 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v57 = v56 - v67;
    if (v56 >= v67)
    {
      unint64_t v58 = v57 + 2;
      if (v57 <= 0xFFFFFFFFFFFFFFFDLL && v58 <= v68)
      {
        *(_WORD *)(v67 + v57) = 2871;
        goto LABEL_64;
      }
      unint64_t v54 = 0;
    }
    unint64_t v58 = 0;
LABEL_64:
    unint64_t v60 = (void *)((v55 + v58 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v60 >= v55 + v58)
    {
      unint64_t v58 = (unint64_t)v60 - v55 + 8;
      if ((unint64_t)v60 - v55 > 0xFFFFFFFFFFFFFFF7 || v58 > v54) {
        return 17;
      }
      void *v60 = a3;
    }
    if (v54)
    {
      unint64_t v62 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v63 = *(void *)(a1 + 64);
      if (v62 + 16 >= v63) {
        unint64_t v62 = 0;
      }
      if (v58 <= 0x10) {
        unint64_t v58 = 16;
      }
      unint64_t v64 = v62 + v58;
      if (v63 <= v64) {
        unint64_t v64 = 0;
      }
      *(void *)(a1 + 80) = v64;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v64) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v67, v7);
  if (!v69) {
    return 15;
  }
  unint64_t v9 = v67;
  unint64_t v10 = v68;
  unint64_t v11 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v67;
  if (v11 >= v67)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v68)
    {
      *(_WORD *)(v67 + v12) = 1072;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v25 >= v9 + v13)
  {
    uint64_t v26 = (char *)v25 - v9;
    if ((unint64_t)v25 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_37;
    }
    unint64_t v13 = (unint64_t)(v26 + 4);
    if ((unint64_t)(v26 + 4) > v10) {
      goto LABEL_37;
    }
    _DWORD *v25 = a2[2];
  }
  if (v10)
  {
    uint64_t v27 = *(void *)(a1 + 72);
    unint64_t v28 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *(void *)(a1 + 64);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    uint64_t v30 = 16;
    if (v13 > 0x10) {
      uint64_t v30 = v13;
    }
    unint64_t v31 = v28 + v30;
    if (v29 <= v31) {
      unint64_t v31 = 0;
    }
    *(void *)(a1 + 80) = v31;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v27 + 16) + 128), v31) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v32 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v32;
  }
LABEL_37:
  if (!v69)
  {
    __break(1u);
    goto LABEL_85;
  }
  unint64_t v33 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - v67;
  if (v33 < v67)
  {
    unint64_t v35 = 0;
  }
  else
  {
    unint64_t v35 = 0;
    if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v68)
    {
      *(_WORD *)(v67 + v34) = 2870;
      unint64_t v35 = v34 + 2;
    }
  }
  unint64_t v36 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = *(void *)(a1 + 64);
  if (v36 + 16 >= v37) {
    unint64_t v36 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v38 = v36 + v35;
  if (v37 <= v38) {
    unint64_t v38 = 0;
  }
  *(void *)(a1 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v38);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v66, (uint64_t **)(a1 + 8));
  unint64_t v39 = v66;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1072;
  *((void *)v40 + 1) = a3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v70 = v40;
  int v41 = *a2;
  unint64_t v42 = (_DWORD *)IPC::Encoder::grow(v40, 4uLL, 4);
  if (v43 <= 3)
  {
LABEL_85:
    __break(0xC471u);
    JUMPOUT(0x199086648);
  }
  *unint64_t v42 = v41;
  int v44 = a2[1];
  unint64_t v45 = (_DWORD *)IPC::Encoder::grow(v40, 4uLL, 4);
  if (v46 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199086668);
  }
  *unint64_t v45 = v44;
  int v47 = a2[2];
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v40, 4uLL, 4);
  if (v49 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199086688);
  }
  *unint64_t v48 = v47;
  uint64_t v32 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v70, 1, 0);
  unint64_t v51 = v70;
  unint64_t v70 = 0;
  if (v51)
  {
    IPC::Encoder::~Encoder(v51, v50);
    WTF::fastFree(v52, v53);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  return v32;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    uint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1073;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v26 = 1073;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,std::span<int const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<int const,18446744073709551615ul> const&>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v65, v7);
    if (!v67) {
      return 15;
    }
    unint64_t v52 = v65;
    unint64_t v51 = v66;
    unint64_t v53 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v54 = v53 - v65;
    if (v53 >= v65)
    {
      unint64_t v55 = v54 + 2;
      if (v54 <= 0xFFFFFFFFFFFFFFFDLL && v55 <= v66)
      {
        *(_WORD *)(v65 + v54) = 2871;
        goto LABEL_67;
      }
      unint64_t v51 = 0;
    }
    unint64_t v55 = 0;
LABEL_67:
    unint64_t v57 = (void *)((v52 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v57 >= v52 + v55)
    {
      unint64_t v55 = (unint64_t)v57 - v52 + 8;
      if ((unint64_t)v57 - v52 > 0xFFFFFFFFFFFFFFF7 || v55 > v51) {
        return 17;
      }
      *unint64_t v57 = a3;
    }
    if (v51)
    {
      unint64_t v59 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v60 = *(void *)(a1 + 64);
      if (v59 + 16 >= v60) {
        unint64_t v59 = 0;
      }
      if (v55 <= 0x10) {
        unint64_t v55 = 16;
      }
      unint64_t v61 = v59 + v55;
      if (v60 <= v61) {
        unint64_t v61 = 0;
      }
      *(void *)(a1 + 80) = v61;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v61) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v65, v7);
  if (!v67) {
    return 15;
  }
  unint64_t v9 = v65;
  unint64_t v10 = v66;
  unint64_t v11 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v65;
  if (v11 >= v65)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v66)
    {
      *(_WORD *)(v65 + v12) = 1076;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v63 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(float *)(v9 + v28) = a2[2];
      unint64_t v63 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v63 = v10;
  }
  unint64_t v29 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v29 >= v9 + v13)
  {
    uint64_t v30 = (char *)v29 - v9;
    if ((unint64_t)v29 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_42;
    }
    unint64_t v13 = (unint64_t)(v30 + 4);
    if ((unint64_t)(v30 + 4) > v63) {
      goto LABEL_42;
    }
    *unint64_t v29 = *((_DWORD *)a2 + 3);
  }
  if (v63)
  {
    uint64_t v31 = *(void *)(a1 + 72);
    unint64_t v32 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v33 = *(void *)(a1 + 64);
    if (v32 + 16 >= v33) {
      unint64_t v32 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v34 = v32 + v13;
    if (v33 <= v34) {
      unint64_t v34 = 0;
    }
    *(void *)(a1 + 80) = v34;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v31 + 16) + 128), v34) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v35 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v35;
  }
LABEL_42:
  if (!v67)
  {
    __break(1u);
    goto LABEL_88;
  }
  unint64_t v36 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - v65;
  if (v36 < v65)
  {
    unint64_t v38 = 0;
  }
  else
  {
    unint64_t v38 = 0;
    if (v37 <= 0xFFFFFFFFFFFFFFFDLL && v37 + 2 <= v66)
    {
      *(_WORD *)(v65 + v37) = 2870;
      unint64_t v38 = v37 + 2;
    }
  }
  unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(a1 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v38 <= 0x10) {
    unint64_t v38 = 16;
  }
  unint64_t v41 = v39 + v38;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(a1 + 80) = v41;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v64, (uint64_t **)(a1 + 8));
  unint64_t v42 = v64;
  unint64_t v43 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v43 = 1076;
  *((void *)v43 + 1) = a3;
  *((void *)v43 + 66) = (char *)v43 + 16;
  *((void *)v43 + 67) = 512;
  *((void *)v43 + 68) = 0;
  *((void *)v43 + 70) = 0;
  *((void *)v43 + 69) = 0;
  IPC::Encoder::encodeHeader(v43);
  unint64_t v68 = v43;
  int v44 = *(_DWORD *)a2;
  unint64_t v45 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v46 <= 3)
  {
LABEL_88:
    __break(0xC471u);
    JUMPOUT(0x199086EB0);
  }
  *unint64_t v45 = v44;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v43, a2[1]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v43, a2[2]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v43, a2[3]);
  uint64_t v35 = IPC::Connection::sendMessageImpl((uint64_t)v42, (uint64_t *)&v68, 1, 0);
  unint64_t v48 = v68;
  unint64_t v68 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v64);
  return v35;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1077;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1077;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1078;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1078;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1079;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1079;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,std::span<int const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<int const,18446744073709551615ul> const&>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v69, v7);
    if (!v71) {
      return 15;
    }
    unint64_t v55 = v69;
    unint64_t v54 = v70;
    unint64_t v56 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v57 = v56 - v69;
    if (v56 >= v69)
    {
      unint64_t v58 = v57 + 2;
      if (v57 <= 0xFFFFFFFFFFFFFFFDLL && v58 <= v70)
      {
        *(_WORD *)(v69 + v57) = 2871;
        goto LABEL_73;
      }
      unint64_t v54 = 0;
    }
    unint64_t v58 = 0;
LABEL_73:
    unint64_t v60 = (void *)((v55 + v58 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v60 >= v55 + v58)
    {
      unint64_t v58 = (unint64_t)v60 - v55 + 8;
      if ((unint64_t)v60 - v55 > 0xFFFFFFFFFFFFFFF7 || v58 > v54) {
        return 17;
      }
      void *v60 = a3;
    }
    if (v54)
    {
      unint64_t v62 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v63 = *(void *)(a1 + 64);
      if (v62 + 16 >= v63) {
        unint64_t v62 = 0;
      }
      if (v58 <= 0x10) {
        unint64_t v58 = 16;
      }
      unint64_t v64 = v62 + v58;
      if (v63 <= v64) {
        unint64_t v64 = 0;
      }
      *(void *)(a1 + 80) = v64;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v64) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v69, v7);
  if (!v71) {
    return 15;
  }
  unint64_t v9 = v69;
  unint64_t v10 = v70;
  unint64_t v11 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v69;
  if (v11 >= v69)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v70)
    {
      *(_WORD *)(v69 + v12) = 1082;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v66 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(float *)(v9 + v28) = a2[2];
      unint64_t v66 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v66 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v67 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v66)
    {
      *(float *)(v9 + v31) = a2[3];
      unint64_t v67 = v66;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v67 = v66;
  }
  unint64_t v32 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v32 >= v9 + v13)
  {
    unint64_t v33 = (char *)v32 - v9;
    if ((unint64_t)v32 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_48;
    }
    unint64_t v13 = (unint64_t)(v33 + 4);
    if ((unint64_t)(v33 + 4) > v67) {
      goto LABEL_48;
    }
    *unint64_t v32 = *((_DWORD *)a2 + 4);
  }
  if (v67)
  {
    unint64_t v34 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = *(void *)(a1 + 64);
    if (v34 + 16 >= v35) {
      unint64_t v34 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v36 = v34 + v13;
    if (v35 <= v36) {
      unint64_t v37 = 0;
    }
    else {
      unint64_t v37 = v36;
    }
    *(void *)(a1 + 80) = v37;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v37) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v38 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v38;
  }
LABEL_48:
  if (!v71)
  {
    __break(1u);
    goto LABEL_94;
  }
  unint64_t v39 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - v69;
  if (v39 < v69)
  {
    unint64_t v41 = 0;
  }
  else
  {
    unint64_t v41 = 0;
    if (v40 <= 0xFFFFFFFFFFFFFFFDLL && v40 + 2 <= v70)
    {
      *(_WORD *)(v69 + v40) = 2870;
      unint64_t v41 = v40 + 2;
    }
  }
  unint64_t v42 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *(void *)(a1 + 64);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v44 = v42 + v41;
  if (v43 <= v44) {
    unint64_t v44 = 0;
  }
  *(void *)(a1 + 80) = v44;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v44);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v68, (uint64_t **)(a1 + 8));
  unint64_t v45 = v68;
  unsigned __int8 v46 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v46 = 1082;
  *((void *)v46 + 1) = a3;
  *((void *)v46 + 66) = (char *)v46 + 16;
  *((void *)v46 + 67) = 512;
  *((void *)v46 + 68) = 0;
  *((void *)v46 + 70) = 0;
  *((void *)v46 + 69) = 0;
  IPC::Encoder::encodeHeader(v46);
  unint64_t v72 = v46;
  int v47 = *(_DWORD *)a2;
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v49 <= 3)
  {
LABEL_94:
    __break(0xC471u);
    JUMPOUT(0x199087E28);
  }
  *unint64_t v48 = v47;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v46, a2[1]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v46, a2[2]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v46, a2[3]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v46, a2[4]);
  uint64_t v38 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v72, 1, 0);
  unint64_t v51 = v72;
  unint64_t v72 = 0;
  if (v51)
  {
    IPC::Encoder::~Encoder(v51, v50);
    WTF::fastFree(v52, v53);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v68);
  return v38;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1083;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1083;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
    if (!v83) {
      return 15;
    }
    unint64_t v67 = v81;
    unint64_t v66 = v82;
    unint64_t v68 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v69 = v68 - v81;
    if (v68 >= v81)
    {
      unint64_t v70 = v69 + 2;
      if (v69 <= 0xFFFFFFFFFFFFFFFDLL && v70 <= v82)
      {
        *(_WORD *)(v81 + v69) = 2871;
        goto LABEL_77;
      }
      unint64_t v66 = 0;
    }
    unint64_t v70 = 0;
LABEL_77:
    unint64_t v72 = (void *)((v67 + v70 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v72 >= v67 + v70)
    {
      unint64_t v70 = (unint64_t)v72 - v67 + 8;
      if ((unint64_t)v72 - v67 > 0xFFFFFFFFFFFFFFF7 || v70 > v66) {
        return 17;
      }
      void *v72 = a3;
    }
    if (v66)
    {
      unint64_t v74 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v75 = *(void *)(a1 + 64);
      if (v74 + 16 >= v75) {
        unint64_t v74 = 0;
      }
      if (v70 <= 0x10) {
        unint64_t v70 = 16;
      }
      unint64_t v76 = v74 + v70;
      if (v75 <= v76) {
        unint64_t v76 = 0;
      }
      *(void *)(a1 + 80) = v76;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v76) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
  if (!v83) {
    return 15;
  }
  unint64_t v9 = v81;
  unint64_t v10 = v82;
  unint64_t v11 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v81;
  if (v11 >= v81)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v82)
    {
      *(_WORD *)(v81 + v12) = 1084;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v78 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v78 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v78 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v79 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v78)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v79 = v78;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v79 = v78;
  }
  unint64_t v32 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v32 >= v9 + v13)
  {
    unint64_t v33 = (char *)v32 - v9;
    if ((unint64_t)v32 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_48;
    }
    unint64_t v13 = (unint64_t)(v33 + 4);
    if ((unint64_t)(v33 + 4) > v79) {
      goto LABEL_48;
    }
    *unint64_t v32 = a2[4];
  }
  if (v79)
  {
    unint64_t v34 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = *(void *)(a1 + 64);
    if (v34 + 16 >= v35) {
      unint64_t v34 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v36 = v34 + v13;
    if (v35 <= v36) {
      unint64_t v37 = 0;
    }
    else {
      unint64_t v37 = v36;
    }
    *(void *)(a1 + 80) = v37;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v37) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v38 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v38;
  }
LABEL_48:
  if (!v83)
  {
    __break(1u);
    goto LABEL_98;
  }
  unint64_t v39 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - v81;
  if (v39 < v81)
  {
    unint64_t v41 = 0;
  }
  else
  {
    unint64_t v41 = 0;
    if (v40 <= 0xFFFFFFFFFFFFFFFDLL && v40 + 2 <= v82)
    {
      *(_WORD *)(v81 + v40) = 2870;
      unint64_t v41 = v40 + 2;
    }
  }
  unint64_t v42 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *(void *)(a1 + 64);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v44 = v42 + v41;
  if (v43 <= v44) {
    unint64_t v44 = 0;
  }
  *(void *)(a1 + 80) = v44;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v44);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v80, (uint64_t **)(a1 + 8));
  unint64_t v45 = v80;
  unsigned __int8 v46 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v46 = 1084;
  *((void *)v46 + 1) = a3;
  *((void *)v46 + 66) = (char *)v46 + 16;
  *((void *)v46 + 67) = 512;
  *((void *)v46 + 68) = 0;
  *((void *)v46 + 70) = 0;
  *((void *)v46 + 69) = 0;
  IPC::Encoder::encodeHeader(v46);
  v84 = v46;
  int v47 = *a2;
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v49 <= 3)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x199088708);
  }
  *unint64_t v48 = v47;
  int v50 = a2[1];
  unint64_t v51 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199088728);
  }
  *unint64_t v51 = v50;
  int v53 = a2[2];
  unint64_t v54 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199088748);
  }
  _DWORD *v54 = v53;
  int v56 = a2[3];
  unint64_t v57 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v58 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199088768);
  }
  *unint64_t v57 = v56;
  int v59 = a2[4];
  unint64_t v60 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v61 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199088788);
  }
  _DWORD *v60 = v59;
  uint64_t v38 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v84, 1, 0);
  unint64_t v63 = v84;
  v84 = 0;
  if (v63)
  {
    IPC::Encoder::~Encoder(v63, v62);
    WTF::fastFree(v64, v65);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80);
  return v38;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1085;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1085;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,std::span<int const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<int const,18446744073709551615ul> const&>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1089;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1089;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

void *IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = *a1 + v2;
  unint64_t v4 = (v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v9 = v4 >= v3;
  unint64_t v5 = v4 - v3;
  if (v9)
  {
    unint64_t v6 = v5 + v2;
    unint64_t v7 = v5 + v2 + 4;
    unint64_t v8 = a1[1];
    if (v6 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      BOOL v9 = v7 >= v8;
      BOOL v10 = v7 == v8;
    }
    else
    {
      BOOL v9 = 1;
      BOOL v10 = 0;
    }
    if (!v10 && v9)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v6) = *(_DWORD *)a2;
      a1[2] = v7;
      unint64_t v2 = v7;
    }
  }
  if (v2 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v2) = *(unsigned char *)(a2 + 4);
    a1[2] = v2 + 1;
  }
  return IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, **(const void ***)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
}

unint64_t IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, int *a2)
{
  int v4 = *a2;
  unint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3 || (_DWORD *v5 = v4, v7 = *((unsigned char *)a2 + 4), v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1), !v9))
  {
    __break(0xC471u);
    JUMPOUT(0x199088FDCLL);
  }
  *unint64_t v8 = v7;
  uint64_t v10 = *((void *)a2 + 1);
  unint64_t v11 = *(const void **)v10;
  uint64_t v12 = *(void *)(v10 + 8);

  return IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v11, v12);
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1092;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1092;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1095;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1095;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UseProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 1098;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 1098;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ValidateProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 1099;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 1099;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib1f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v55, v7);
    if (!v57) {
      return 15;
    }
    unint64_t v43 = v55;
    unint64_t v42 = v56;
    unint64_t v44 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v45 = v44 - v55;
    if (v44 >= v55)
    {
      unint64_t v46 = v45 + 2;
      if (v45 <= 0xFFFFFFFFFFFFFFFDLL && v46 <= v56)
      {
        *(_WORD *)(v55 + v45) = 2871;
        goto LABEL_58;
      }
      unint64_t v42 = 0;
    }
    unint64_t v46 = 0;
LABEL_58:
    unsigned __int8 v48 = (void *)((v43 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v48 >= v43 + v46)
    {
      unint64_t v46 = (unint64_t)v48 - v43 + 8;
      if ((unint64_t)v48 - v43 > 0xFFFFFFFFFFFFFFF7 || v46 > v42) {
        return 17;
      }
      *unsigned __int8 v48 = a3;
    }
    if (v42)
    {
      unint64_t v50 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v51 = *(void *)(a1 + 64);
      if (v50 + 16 >= v51) {
        unint64_t v50 = 0;
      }
      if (v46 <= 0x10) {
        unint64_t v46 = 16;
      }
      unint64_t v52 = v50 + v46;
      if (v51 <= v52) {
        unint64_t v52 = 0;
      }
      *(void *)(a1 + 80) = v52;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v52) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v55, v7);
  if (!v57) {
    return 15;
  }
  unint64_t v9 = v55;
  unint64_t v10 = v56;
  unint64_t v11 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v55;
  if (v11 >= v55)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v56)
    {
      *(_WORD *)(v55 + v12) = 1100;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v20 >= v9 + v13)
  {
    unint64_t v13 = (unint64_t)v20 - v9 + 4;
    if ((unint64_t)v20 - v9 > 0xFFFFFFFFFFFFFFFBLL || v13 > v10) {
      goto LABEL_33;
    }
    *unint64_t v20 = *((_DWORD *)a2 + 1);
  }
  if (v10)
  {
    uint64_t v22 = *(void *)(a1 + 72);
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = *(void *)(a1 + 64);
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v25 = v23 + v13;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    *(void *)(a1 + 80) = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v22 + 16) + 128), v25) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v26 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v26;
  }
LABEL_33:
  if (!v57)
  {
    __break(1u);
    goto LABEL_78;
  }
  unint64_t v27 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = v27 - v55;
  if (v27 < v55)
  {
    unint64_t v29 = 0;
  }
  else
  {
    unint64_t v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v56)
    {
      *(_WORD *)(v55 + v28) = 2870;
      unint64_t v29 = v28 + 2;
    }
  }
  unint64_t v30 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = *(void *)(a1 + 64);
  if (v30 + 16 >= v31) {
    unint64_t v30 = 0;
  }
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v32 = v30 + v29;
  if (v31 <= v32) {
    unint64_t v32 = 0;
  }
  *(void *)(a1 + 80) = v32;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v32);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
  unint64_t v33 = v54;
  unint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v34 = 1100;
  *((void *)v34 + 1) = a3;
  *((void *)v34 + 66) = (char *)v34 + 16;
  *((void *)v34 + 67) = 512;
  *((void *)v34 + 68) = 0;
  *((void *)v34 + 70) = 0;
  *((void *)v34 + 69) = 0;
  IPC::Encoder::encodeHeader(v34);
  unint64_t v58 = v34;
  int v35 = *(_DWORD *)a2;
  unint64_t v36 = (_DWORD *)IPC::Encoder::grow(v34, 4uLL, 4);
  if (v37 <= 3)
  {
LABEL_78:
    __break(0xC471u);
    JUMPOUT(0x19908A214);
  }
  *unint64_t v36 = v35;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v34, a2[1]);
  uint64_t v26 = IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v58, 1, 0);
  unint64_t v39 = v58;
  unint64_t v58 = 0;
  if (v39)
  {
    IPC::Encoder::~Encoder(v39, v38);
    WTF::fastFree(v40, v41);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v54);
  return v26;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib1fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v58, v7);
    if (!v60) {
      return 15;
    }
    unint64_t v46 = v58;
    unint64_t v45 = v59;
    unint64_t v47 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v48 = v47 - v58;
    if (v47 >= v58)
    {
      unint64_t v49 = v48 + 2;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v49 <= v59)
      {
        *(_WORD *)(v58 + v48) = 2871;
        goto LABEL_59;
      }
      unint64_t v45 = 0;
    }
    unint64_t v49 = 0;
LABEL_59:
    unint64_t v51 = (void *)((v46 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v51 >= v46 + v49)
    {
      unint64_t v49 = (unint64_t)v51 - v46 + 8;
      if ((unint64_t)v51 - v46 > 0xFFFFFFFFFFFFFFF7 || v49 > v45) {
        return 17;
      }
      *unint64_t v51 = a3;
    }
    if (v45)
    {
      unint64_t v53 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v54 = *(void *)(a1 + 64);
      if (v53 + 16 >= v54) {
        unint64_t v53 = 0;
      }
      if (v49 <= 0x10) {
        unint64_t v49 = 16;
      }
      unint64_t v55 = v53 + v49;
      if (v54 <= v55) {
        unint64_t v55 = 0;
      }
      *(void *)(a1 + 80) = v55;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v55) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v58, v7);
  if (!v60) {
    return 15;
  }
  unint64_t v9 = v58;
  unint64_t v10 = v59;
  unint64_t v11 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v58;
  if (v11 >= v58)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v59)
    {
      *(_WORD *)(v58 + v12) = 1101;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v20 >= v9 + v13)
  {
    unint64_t v13 = (unint64_t)v20 - v9 + 4;
    if ((unint64_t)v20 - v9 > 0xFFFFFFFFFFFFFFFBLL || v13 > v10) {
      goto LABEL_33;
    }
    *unint64_t v20 = ***((_DWORD ***)a2 + 1);
  }
  if (v10)
  {
    uint64_t v22 = *(void *)(a1 + 72);
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = *(void *)(a1 + 64);
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v25 = v23 + v13;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    *(void *)(a1 + 80) = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v22 + 16) + 128), v25) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v26 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v26;
  }
LABEL_33:
  if (!v60)
  {
    __break(1u);
    goto LABEL_79;
  }
  unint64_t v27 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = v27 - v58;
  if (v27 < v58)
  {
    unint64_t v29 = 0;
  }
  else
  {
    unint64_t v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v59)
    {
      *(_WORD *)(v58 + v28) = 2870;
      unint64_t v29 = v28 + 2;
    }
  }
  unint64_t v30 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = *(void *)(a1 + 64);
  if (v30 + 16 >= v31) {
    unint64_t v30 = 0;
  }
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v32 = v30 + v29;
  if (v31 <= v32) {
    unint64_t v32 = 0;
  }
  *(void *)(a1 + 80) = v32;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v32);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(a1 + 8));
  unint64_t v33 = v57;
  unint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v34 = 1101;
  *((void *)v34 + 1) = a3;
  *((void *)v34 + 66) = (char *)v34 + 16;
  *((void *)v34 + 67) = 512;
  *((void *)v34 + 68) = 0;
  *((void *)v34 + 70) = 0;
  *((void *)v34 + 69) = 0;
  IPC::Encoder::encodeHeader(v34);
  unint64_t v61 = v34;
  int v35 = *a2;
  unint64_t v36 = (_DWORD *)IPC::Encoder::grow(v34, 4uLL, 4);
  if (v37 <= 3)
  {
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x19908A64CLL);
  }
  *unint64_t v36 = v35;
  uint64_t v38 = (_DWORD *)**((void **)a2 + 1);
  unint64_t v39 = (_DWORD *)IPC::Encoder::grow(v34, 4uLL, 4);
  if (v40 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908A66CLL);
  }
  _DWORD *v39 = *v38;
  uint64_t v26 = IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v61, 1, 0);
  unint64_t v42 = v61;
  unint64_t v61 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v43, v44);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v57);
  return v26;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib2f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v61, v7);
    if (!v63) {
      return 15;
    }
    unint64_t v49 = v61;
    unint64_t v48 = v62;
    unint64_t v50 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - v61;
    if (v50 >= v61)
    {
      unint64_t v52 = v51 + 2;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v62)
      {
        *(_WORD *)(v61 + v51) = 2871;
        goto LABEL_62;
      }
      unint64_t v48 = 0;
    }
    unint64_t v52 = 0;
LABEL_62:
    unint64_t v54 = (void *)((v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v54 >= v49 + v52)
    {
      unint64_t v52 = (unint64_t)v54 - v49 + 8;
      if ((unint64_t)v54 - v49 > 0xFFFFFFFFFFFFFFF7 || v52 > v48) {
        return 17;
      }
      void *v54 = a3;
    }
    if (v48)
    {
      unint64_t v56 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v57 = *(void *)(a1 + 64);
      if (v56 + 16 >= v57) {
        unint64_t v56 = 0;
      }
      if (v52 <= 0x10) {
        unint64_t v52 = 16;
      }
      unint64_t v58 = v56 + v52;
      if (v57 <= v58) {
        unint64_t v58 = 0;
      }
      *(void *)(a1 + 80) = v58;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v58) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v61, v7);
  if (!v63) {
    return 15;
  }
  unint64_t v9 = v61;
  unint64_t v10 = v62;
  unint64_t v11 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v61;
  if (v11 >= v61)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v62)
    {
      *(_WORD *)(v61 + v12) = 1102;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v25 >= v9 + v13)
  {
    uint64_t v26 = (char *)v25 - v9;
    if ((unint64_t)v25 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_37;
    }
    unint64_t v13 = (unint64_t)(v26 + 4);
    if ((unint64_t)(v26 + 4) > v10) {
      goto LABEL_37;
    }
    _DWORD *v25 = *((_DWORD *)a2 + 2);
  }
  if (v10)
  {
    uint64_t v27 = *(void *)(a1 + 72);
    unint64_t v28 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *(void *)(a1 + 64);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    uint64_t v30 = 16;
    if (v13 > 0x10) {
      uint64_t v30 = v13;
    }
    unint64_t v31 = v28 + v30;
    if (v29 <= v31) {
      unint64_t v31 = 0;
    }
    *(void *)(a1 + 80) = v31;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v27 + 16) + 128), v31) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v32 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v32;
  }
LABEL_37:
  if (!v63)
  {
    __break(1u);
    goto LABEL_83;
  }
  unint64_t v33 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - v61;
  if (v33 < v61)
  {
    unint64_t v35 = 0;
  }
  else
  {
    unint64_t v35 = 0;
    if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v62)
    {
      *(_WORD *)(v61 + v34) = 2870;
      unint64_t v35 = v34 + 2;
    }
  }
  unint64_t v36 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = *(void *)(a1 + 64);
  if (v36 + 16 >= v37) {
    unint64_t v36 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v38 = v36 + v35;
  if (v37 <= v38) {
    unint64_t v38 = 0;
  }
  *(void *)(a1 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v38);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v60, (uint64_t **)(a1 + 8));
  unint64_t v39 = v60;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1102;
  *((void *)v40 + 1) = a3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v64 = v40;
  int v41 = *(_DWORD *)a2;
  unint64_t v42 = (_DWORD *)IPC::Encoder::grow(v40, 4uLL, 4);
  if (v43 <= 3)
  {
LABEL_83:
    __break(0xC471u);
    JUMPOUT(0x19908AACCLL);
  }
  *unint64_t v42 = v41;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v40, a2[1]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v40, a2[2]);
  uint64_t v32 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v64, 1, 0);
  unint64_t v45 = v64;
  unint64_t v64 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v44);
    WTF::fastFree(v46, v47);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v60);
  return v32;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v58, v7);
    if (!v60) {
      return 15;
    }
    unint64_t v46 = v58;
    unint64_t v45 = v59;
    unint64_t v47 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v48 = v47 - v58;
    if (v47 >= v58)
    {
      unint64_t v49 = v48 + 2;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v49 <= v59)
      {
        *(_WORD *)(v58 + v48) = 2871;
        goto LABEL_59;
      }
      unint64_t v45 = 0;
    }
    unint64_t v49 = 0;
LABEL_59:
    unint64_t v51 = (void *)((v46 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v51 >= v46 + v49)
    {
      unint64_t v49 = (unint64_t)v51 - v46 + 8;
      if ((unint64_t)v51 - v46 > 0xFFFFFFFFFFFFFFF7 || v49 > v45) {
        return 17;
      }
      *unint64_t v51 = a3;
    }
    if (v45)
    {
      unint64_t v53 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v54 = *(void *)(a1 + 64);
      if (v53 + 16 >= v54) {
        unint64_t v53 = 0;
      }
      if (v49 <= 0x10) {
        unint64_t v49 = 16;
      }
      unint64_t v55 = v53 + v49;
      if (v54 <= v55) {
        unint64_t v55 = 0;
      }
      *(void *)(a1 + 80) = v55;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v55) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v58, v7);
  if (!v60) {
    return 15;
  }
  unint64_t v9 = v58;
  unint64_t v10 = v59;
  unint64_t v11 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v58;
  if (v11 >= v58)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v59)
    {
      *(_WORD *)(v58 + v12) = 1103;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (void *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v20 >= v9 + v13)
  {
    unint64_t v13 = (unint64_t)v20 - v9 + 8;
    if ((unint64_t)v20 - v9 > 0xFFFFFFFFFFFFFFF7 || v13 > v10) {
      goto LABEL_33;
    }
    *unint64_t v20 = ***((void ***)a2 + 1);
  }
  if (v10)
  {
    uint64_t v22 = *(void *)(a1 + 72);
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = *(void *)(a1 + 64);
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v25 = v23 + v13;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    *(void *)(a1 + 80) = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v22 + 16) + 128), v25) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v26 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v26;
  }
LABEL_33:
  if (!v60)
  {
    __break(1u);
    goto LABEL_79;
  }
  unint64_t v27 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = v27 - v58;
  if (v27 < v58)
  {
    unint64_t v29 = 0;
  }
  else
  {
    unint64_t v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v59)
    {
      *(_WORD *)(v58 + v28) = 2870;
      unint64_t v29 = v28 + 2;
    }
  }
  unint64_t v30 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = *(void *)(a1 + 64);
  if (v30 + 16 >= v31) {
    unint64_t v30 = 0;
  }
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v32 = v30 + v29;
  if (v31 <= v32) {
    unint64_t v32 = 0;
  }
  *(void *)(a1 + 80) = v32;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v32);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(a1 + 8));
  unint64_t v33 = v57;
  unint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v34 = 1103;
  *((void *)v34 + 1) = a3;
  *((void *)v34 + 66) = (char *)v34 + 16;
  *((void *)v34 + 67) = 512;
  *((void *)v34 + 68) = 0;
  *((void *)v34 + 70) = 0;
  *((void *)v34 + 69) = 0;
  IPC::Encoder::encodeHeader(v34);
  unint64_t v61 = v34;
  int v35 = *a2;
  unint64_t v36 = (_DWORD *)IPC::Encoder::grow(v34, 4uLL, 4);
  if (v37 <= 3)
  {
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x19908AF04);
  }
  *unint64_t v36 = v35;
  unint64_t v38 = (void *)**((void **)a2 + 1);
  unint64_t v39 = (void *)IPC::Encoder::grow(v34, 4uLL, 8);
  if (v40 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x19908AF24);
  }
  void *v39 = *v38;
  uint64_t v26 = IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v61, 1, 0);
  unint64_t v42 = v61;
  unint64_t v61 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v43, v44);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v57);
  return v26;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib3f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v65, v7);
    if (!v67) {
      return 15;
    }
    unint64_t v52 = v65;
    unint64_t v51 = v66;
    unint64_t v53 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v54 = v53 - v65;
    if (v53 >= v65)
    {
      unint64_t v55 = v54 + 2;
      if (v54 <= 0xFFFFFFFFFFFFFFFDLL && v55 <= v66)
      {
        *(_WORD *)(v65 + v54) = 2871;
        goto LABEL_67;
      }
      unint64_t v51 = 0;
    }
    unint64_t v55 = 0;
LABEL_67:
    unint64_t v57 = (void *)((v52 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v57 >= v52 + v55)
    {
      unint64_t v55 = (unint64_t)v57 - v52 + 8;
      if ((unint64_t)v57 - v52 > 0xFFFFFFFFFFFFFFF7 || v55 > v51) {
        return 17;
      }
      *unint64_t v57 = a3;
    }
    if (v51)
    {
      unint64_t v59 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v60 = *(void *)(a1 + 64);
      if (v59 + 16 >= v60) {
        unint64_t v59 = 0;
      }
      if (v55 <= 0x10) {
        unint64_t v55 = 16;
      }
      unint64_t v61 = v59 + v55;
      if (v60 <= v61) {
        unint64_t v61 = 0;
      }
      *(void *)(a1 + 80) = v61;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v61) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v65, v7);
  if (!v67) {
    return 15;
  }
  unint64_t v9 = v65;
  unint64_t v10 = v66;
  unint64_t v11 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v65;
  if (v11 >= v65)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v66)
    {
      *(_WORD *)(v65 + v12) = 1104;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v63 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(float *)(v9 + v28) = a2[2];
      unint64_t v63 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v63 = v10;
  }
  unint64_t v29 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v29 >= v9 + v13)
  {
    unint64_t v30 = (char *)v29 - v9;
    if ((unint64_t)v29 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_42;
    }
    unint64_t v13 = (unint64_t)(v30 + 4);
    if ((unint64_t)(v30 + 4) > v63) {
      goto LABEL_42;
    }
    *unint64_t v29 = *((_DWORD *)a2 + 3);
  }
  if (v63)
  {
    uint64_t v31 = *(void *)(a1 + 72);
    unint64_t v32 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v33 = *(void *)(a1 + 64);
    if (v32 + 16 >= v33) {
      unint64_t v32 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v34 = v32 + v13;
    if (v33 <= v34) {
      unint64_t v34 = 0;
    }
    *(void *)(a1 + 80) = v34;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v31 + 16) + 128), v34) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v35 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v35;
  }
LABEL_42:
  if (!v67)
  {
    __break(1u);
    goto LABEL_88;
  }
  unint64_t v36 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - v65;
  if (v36 < v65)
  {
    unint64_t v38 = 0;
  }
  else
  {
    unint64_t v38 = 0;
    if (v37 <= 0xFFFFFFFFFFFFFFFDLL && v37 + 2 <= v66)
    {
      *(_WORD *)(v65 + v37) = 2870;
      unint64_t v38 = v37 + 2;
    }
  }
  unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(a1 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v38 <= 0x10) {
    unint64_t v38 = 16;
  }
  unint64_t v41 = v39 + v38;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(a1 + 80) = v41;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v64, (uint64_t **)(a1 + 8));
  unint64_t v42 = v64;
  unint64_t v43 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v43 = 1104;
  *((void *)v43 + 1) = a3;
  *((void *)v43 + 66) = (char *)v43 + 16;
  *((void *)v43 + 67) = 512;
  *((void *)v43 + 68) = 0;
  *((void *)v43 + 70) = 0;
  *((void *)v43 + 69) = 0;
  IPC::Encoder::encodeHeader(v43);
  unint64_t v68 = v43;
  int v44 = *(_DWORD *)a2;
  unint64_t v45 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v46 <= 3)
  {
LABEL_88:
    __break(0xC471u);
    JUMPOUT(0x19908B3D0);
  }
  *unint64_t v45 = v44;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v43, a2[1]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v43, a2[2]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v43, a2[3]);
  uint64_t v35 = IPC::Connection::sendMessageImpl((uint64_t)v42, (uint64_t *)&v68, 1, 0);
  unint64_t v48 = v68;
  unint64_t v68 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v64);
  return v35;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v63, v7);
    if (!v65) {
      return 15;
    }
    unint64_t v51 = v63;
    unint64_t v50 = v64;
    unint64_t v52 = (v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v53 = v52 - v63;
    if (v52 >= v63)
    {
      unint64_t v54 = v53 + 2;
      if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v54 <= v64)
      {
        *(_WORD *)(v63 + v53) = 2871;
        goto LABEL_59;
      }
      unint64_t v50 = 0;
    }
    unint64_t v54 = 0;
LABEL_59:
    unint64_t v56 = (void *)((v51 + v54 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v56 >= v51 + v54)
    {
      unint64_t v54 = (unint64_t)v56 - v51 + 8;
      if ((unint64_t)v56 - v51 > 0xFFFFFFFFFFFFFFF7 || v54 > v50) {
        return 17;
      }
      *unint64_t v56 = a3;
    }
    if (v50)
    {
      unint64_t v58 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v59 = *(void *)(a1 + 64);
      if (v58 + 16 >= v59) {
        unint64_t v58 = 0;
      }
      if (v54 <= 0x10) {
        unint64_t v54 = 16;
      }
      unint64_t v60 = v58 + v54;
      if (v59 <= v60) {
        unint64_t v60 = 0;
      }
      *(void *)(a1 + 80) = v60;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v60) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v63, v7);
  if (!v65) {
    return 15;
  }
  unint64_t v10 = v63;
  unint64_t v9 = v64;
  unint64_t v11 = (v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v63;
  if (v11 >= v63)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v64)
    {
      *(_WORD *)(v63 + v12) = 1105;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v10 + v13);
  if (v15 >= v10 + v13)
  {
    unint64_t v17 = v15 - v10;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v9)
    {
      unint64_t v9 = 0;
    }
    else
    {
      *(_DWORD *)(v10 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v20 >= v10 + v13)
  {
    unint64_t v21 = v20 - v10;
    unint64_t v13 = v20 - v10 + 12;
    if (v20 - v10 > 0xFFFFFFFFFFFFFFF3 || v13 > v9) {
      goto LABEL_33;
    }
    unint64_t v23 = (uint64_t *)**((void **)a2 + 1);
    unint64_t v24 = v10 + v21;
    uint64_t v25 = *v23;
    *(_DWORD *)(v24 + 8) = *((_DWORD *)v23 + 2);
    *(void *)unint64_t v24 = v25;
  }
  if (v9)
  {
    uint64_t v26 = *(void *)(a1 + 72);
    unint64_t v27 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v28 = *(void *)(a1 + 64);
    if (v27 + 16 >= v28) {
      unint64_t v27 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v29 = v27 + v13;
    if (v28 <= v29) {
      unint64_t v29 = 0;
    }
    *(void *)(a1 + 80) = v29;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v26 + 16) + 128), v29) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v30 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v30;
  }
LABEL_33:
  if (!v65)
  {
    __break(1u);
    goto LABEL_79;
  }
  unint64_t v31 = (v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v63;
  if (v31 < v63)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v64)
    {
      *(_WORD *)(v63 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = *(void *)(a1 + 64);
  if (v34 + 16 >= v35) {
    unint64_t v34 = 0;
  }
  if (v33 <= 0x10) {
    unint64_t v33 = 16;
  }
  unint64_t v36 = v34 + v33;
  if (v35 <= v36) {
    unint64_t v36 = 0;
  }
  *(void *)(a1 + 80) = v36;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v36);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v62, (uint64_t **)(a1 + 8));
  unint64_t v37 = v62;
  unint64_t v38 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v38 = 1105;
  *((void *)v38 + 1) = a3;
  *((void *)v38 + 66) = (char *)v38 + 16;
  *((void *)v38 + 67) = 512;
  *((void *)v38 + 68) = 0;
  *((void *)v38 + 70) = 0;
  *((void *)v38 + 69) = 0;
  IPC::Encoder::encodeHeader(v38);
  unint64_t v66 = v38;
  int v39 = *a2;
  unint64_t v40 = (_DWORD *)IPC::Encoder::grow(v38, 4uLL, 4);
  if (v41 <= 3)
  {
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x19908B824);
  }
  _DWORD *v40 = v39;
  unint64_t v42 = (uint64_t *)**((void **)a2 + 1);
  unint64_t v43 = IPC::Encoder::grow(v38, 4uLL, 12);
  if (v44 <= 0xB)
  {
    __break(0xC471u);
    JUMPOUT(0x19908B844);
  }
  uint64_t v45 = *v42;
  *(_DWORD *)(v43 + 8) = *((_DWORD *)v42 + 2);
  *(void *)unint64_t v43 = v45;
  uint64_t v30 = IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)&v66, 1, 0);
  unint64_t v47 = v66;
  unint64_t v66 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v48, v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v62);
  return v30;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib4f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v69, v7);
    if (!v71) {
      return 15;
    }
    unint64_t v55 = v69;
    unint64_t v54 = v70;
    unint64_t v56 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v57 = v56 - v69;
    if (v56 >= v69)
    {
      unint64_t v58 = v57 + 2;
      if (v57 <= 0xFFFFFFFFFFFFFFFDLL && v58 <= v70)
      {
        *(_WORD *)(v69 + v57) = 2871;
        goto LABEL_73;
      }
      unint64_t v54 = 0;
    }
    unint64_t v58 = 0;
LABEL_73:
    unint64_t v60 = (void *)((v55 + v58 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v60 >= v55 + v58)
    {
      unint64_t v58 = (unint64_t)v60 - v55 + 8;
      if ((unint64_t)v60 - v55 > 0xFFFFFFFFFFFFFFF7 || v58 > v54) {
        return 17;
      }
      void *v60 = a3;
    }
    if (v54)
    {
      unint64_t v62 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v63 = *(void *)(a1 + 64);
      if (v62 + 16 >= v63) {
        unint64_t v62 = 0;
      }
      if (v58 <= 0x10) {
        unint64_t v58 = 16;
      }
      unint64_t v64 = v62 + v58;
      if (v63 <= v64) {
        unint64_t v64 = 0;
      }
      *(void *)(a1 + 80) = v64;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v64) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v69, v7);
  if (!v71) {
    return 15;
  }
  unint64_t v9 = v69;
  unint64_t v10 = v70;
  unint64_t v11 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v69;
  if (v11 >= v69)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v70)
    {
      *(_WORD *)(v69 + v12) = 1106;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v66 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(float *)(v9 + v28) = a2[2];
      unint64_t v66 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v66 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v67 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v66)
    {
      *(float *)(v9 + v31) = a2[3];
      unint64_t v67 = v66;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v67 = v66;
  }
  unint64_t v32 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v32 >= v9 + v13)
  {
    unint64_t v33 = (char *)v32 - v9;
    if ((unint64_t)v32 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_48;
    }
    unint64_t v13 = (unint64_t)(v33 + 4);
    if ((unint64_t)(v33 + 4) > v67) {
      goto LABEL_48;
    }
    *unint64_t v32 = *((_DWORD *)a2 + 4);
  }
  if (v67)
  {
    unint64_t v34 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = *(void *)(a1 + 64);
    if (v34 + 16 >= v35) {
      unint64_t v34 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v36 = v34 + v13;
    if (v35 <= v36) {
      unint64_t v37 = 0;
    }
    else {
      unint64_t v37 = v36;
    }
    *(void *)(a1 + 80) = v37;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v37) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v38 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v38;
  }
LABEL_48:
  if (!v71)
  {
    __break(1u);
    goto LABEL_94;
  }
  unint64_t v39 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - v69;
  if (v39 < v69)
  {
    unint64_t v41 = 0;
  }
  else
  {
    unint64_t v41 = 0;
    if (v40 <= 0xFFFFFFFFFFFFFFFDLL && v40 + 2 <= v70)
    {
      *(_WORD *)(v69 + v40) = 2870;
      unint64_t v41 = v40 + 2;
    }
  }
  unint64_t v42 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *(void *)(a1 + 64);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v44 = v42 + v41;
  if (v43 <= v44) {
    unint64_t v44 = 0;
  }
  *(void *)(a1 + 80) = v44;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v44);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v68, (uint64_t **)(a1 + 8));
  uint64_t v45 = v68;
  unint64_t v46 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v46 = 1106;
  *((void *)v46 + 1) = a3;
  *((void *)v46 + 66) = (char *)v46 + 16;
  *((void *)v46 + 67) = 512;
  *((void *)v46 + 68) = 0;
  *((void *)v46 + 70) = 0;
  *((void *)v46 + 69) = 0;
  IPC::Encoder::encodeHeader(v46);
  unint64_t v72 = v46;
  int v47 = *(_DWORD *)a2;
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v49 <= 3)
  {
LABEL_94:
    __break(0xC471u);
    JUMPOUT(0x19908BD40);
  }
  *unint64_t v48 = v47;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v46, a2[1]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v46, a2[2]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v46, a2[3]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v46, a2[4]);
  uint64_t v38 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v72, 1, 0);
  unint64_t v51 = v72;
  unint64_t v72 = 0;
  if (v51)
  {
    IPC::Encoder::~Encoder(v51, v50);
    WTF::fastFree(v52, v53);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v68);
  return v38;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v58, v7);
    if (!v60) {
      return 15;
    }
    unint64_t v46 = v58;
    unint64_t v45 = v59;
    unint64_t v47 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v48 = v47 - v58;
    if (v47 >= v58)
    {
      unint64_t v49 = v48 + 2;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v49 <= v59)
      {
        *(_WORD *)(v58 + v48) = 2871;
        goto LABEL_59;
      }
      unint64_t v45 = 0;
    }
    unint64_t v49 = 0;
LABEL_59:
    unint64_t v51 = (void *)((v46 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v51 >= v46 + v49)
    {
      unint64_t v49 = (unint64_t)v51 - v46 + 8;
      if ((unint64_t)v51 - v46 > 0xFFFFFFFFFFFFFFF7 || v49 > v45) {
        return 17;
      }
      *unint64_t v51 = a3;
    }
    if (v45)
    {
      unint64_t v53 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v54 = *(void *)(a1 + 64);
      if (v53 + 16 >= v54) {
        unint64_t v53 = 0;
      }
      if (v49 <= 0x10) {
        unint64_t v49 = 16;
      }
      unint64_t v55 = v53 + v49;
      if (v54 <= v55) {
        unint64_t v55 = 0;
      }
      *(void *)(a1 + 80) = v55;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v55) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v58, v7);
  if (!v60) {
    return 15;
  }
  unint64_t v9 = v58;
  unint64_t v10 = v59;
  unint64_t v11 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v58;
  if (v11 >= v58)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v59)
    {
      *(_WORD *)(v58 + v12) = 1107;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (_OWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v20 >= v9 + v13)
  {
    unint64_t v13 = (unint64_t)v20 - v9 + 16;
    if ((unint64_t)v20 - v9 > 0xFFFFFFFFFFFFFFEFLL || v13 > v10) {
      goto LABEL_33;
    }
    *unint64_t v20 = *(_OWORD *)**((void **)a2 + 1);
  }
  if (v10)
  {
    uint64_t v22 = *(void *)(a1 + 72);
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = *(void *)(a1 + 64);
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v25 = v23 + v13;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    *(void *)(a1 + 80) = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v22 + 16) + 128), v25) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v26 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v26;
  }
LABEL_33:
  if (!v60)
  {
    __break(1u);
    goto LABEL_79;
  }
  unint64_t v27 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = v27 - v58;
  if (v27 < v58)
  {
    unint64_t v29 = 0;
  }
  else
  {
    unint64_t v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v59)
    {
      *(_WORD *)(v58 + v28) = 2870;
      unint64_t v29 = v28 + 2;
    }
  }
  unint64_t v30 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = *(void *)(a1 + 64);
  if (v30 + 16 >= v31) {
    unint64_t v30 = 0;
  }
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v32 = v30 + v29;
  if (v31 <= v32) {
    unint64_t v32 = 0;
  }
  *(void *)(a1 + 80) = v32;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v32);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(a1 + 8));
  unint64_t v33 = v57;
  unint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v34 = 1107;
  *((void *)v34 + 1) = a3;
  *((void *)v34 + 66) = (char *)v34 + 16;
  *((void *)v34 + 67) = 512;
  *((void *)v34 + 68) = 0;
  *((void *)v34 + 70) = 0;
  *((void *)v34 + 69) = 0;
  IPC::Encoder::encodeHeader(v34);
  unint64_t v61 = v34;
  int v35 = *a2;
  unint64_t v36 = (_DWORD *)IPC::Encoder::grow(v34, 4uLL, 4);
  if (v37 <= 3)
  {
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x19908C190);
  }
  *unint64_t v36 = v35;
  uint64_t v38 = (_OWORD *)**((void **)a2 + 1);
  unint64_t v39 = (_OWORD *)IPC::Encoder::grow(v34, 4uLL, 16);
  if (v40 <= 0xF)
  {
    __break(0xC471u);
    JUMPOUT(0x19908C1B0);
  }
  _OWORD *v39 = *v38;
  uint64_t v26 = IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v61, 1, 0);
  unint64_t v42 = v61;
  unint64_t v61 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v43, v44);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v57);
  return v26;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribPointer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v84, v7);
    if (!v86) {
      return 15;
    }
    unint64_t v70 = v84;
    unint64_t v69 = v85;
    unint64_t v71 = (v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v72 = v71 - v84;
    if (v71 >= v84)
    {
      unint64_t v73 = v72 + 2;
      if (v72 <= 0xFFFFFFFFFFFFFFFDLL && v73 <= v85)
      {
        *(_WORD *)(v84 + v72) = 2871;
        goto LABEL_80;
      }
      unint64_t v69 = 0;
    }
    unint64_t v73 = 0;
LABEL_80:
    unint64_t v75 = (void *)((v70 + v73 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v75 >= v70 + v73)
    {
      unint64_t v73 = (unint64_t)v75 - v70 + 8;
      if ((unint64_t)v75 - v70 > 0xFFFFFFFFFFFFFFF7 || v73 > v69) {
        return 17;
      }
      void *v75 = a3;
    }
    if (v69)
    {
      unint64_t v77 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v78 = *(void *)(a1 + 64);
      if (v77 + 16 >= v78) {
        unint64_t v77 = 0;
      }
      if (v73 <= 0x10) {
        unint64_t v73 = 16;
      }
      unint64_t v79 = v77 + v73;
      if (v78 <= v79) {
        unint64_t v79 = 0;
      }
      *(void *)(a1 + 80) = v79;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v79) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v84, v7);
  if (!v86) {
    return 15;
  }
  unint64_t v9 = v84;
  unint64_t v10 = v85;
  unint64_t v11 = (v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v84;
  if (v11 >= v84)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v85)
    {
      *(_WORD *)(v84 + v12) = 1114;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v82 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v82 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v82 = v10;
  }
  if (v13 >= v82) {
    unint64_t v82 = 0;
  }
  else {
    *(unsigned char *)(v9 + v13++) = *((unsigned char *)a2 + 12);
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v81 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v82)
    {
      *(_DWORD *)(v9 + v31) = a2[4];
      unint64_t v81 = v82;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v81 = v82;
  }
  unint64_t v32 = (void *)((v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v32 >= v9 + v13)
  {
    unint64_t v33 = (char *)v32 - v9;
    if ((unint64_t)v32 - v9 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_50;
    }
    unint64_t v13 = (unint64_t)(v33 + 8);
    if ((unint64_t)(v33 + 8) > v81) {
      goto LABEL_50;
    }
    *unint64_t v32 = *((void *)a2 + 3);
  }
  if (v81)
  {
    unint64_t v34 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = *(void *)(a1 + 64);
    if (v34 + 16 >= v35) {
      unint64_t v34 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v36 = v34 + v13;
    if (v35 <= v36) {
      unint64_t v37 = 0;
    }
    else {
      unint64_t v37 = v36;
    }
    *(void *)(a1 + 80) = v37;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v37) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v38 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v38;
  }
LABEL_50:
  if (!v86)
  {
    __break(1u);
    goto LABEL_102;
  }
  unint64_t v39 = (v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - v84;
  if (v39 < v84)
  {
    unint64_t v41 = 0;
  }
  else
  {
    unint64_t v41 = 0;
    if (v40 <= 0xFFFFFFFFFFFFFFFDLL && v40 + 2 <= v85)
    {
      *(_WORD *)(v84 + v40) = 2870;
      unint64_t v41 = v40 + 2;
    }
  }
  unint64_t v42 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *(void *)(a1 + 64);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v44 = v42 + v41;
  if (v43 <= v44) {
    unint64_t v44 = 0;
  }
  *(void *)(a1 + 80) = v44;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v44);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v83, (uint64_t **)(a1 + 8));
  unint64_t v45 = v83;
  unint64_t v46 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v46 = 1114;
  *((void *)v46 + 1) = a3;
  *((void *)v46 + 66) = (char *)v46 + 16;
  *((void *)v46 + 67) = 512;
  *((void *)v46 + 68) = 0;
  *((void *)v46 + 70) = 0;
  *((void *)v46 + 69) = 0;
  IPC::Encoder::encodeHeader(v46);
  unint64_t v87 = v46;
  int v47 = *a2;
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v49 <= 3)
  {
LABEL_102:
    __break(0xC471u);
    JUMPOUT(0x19908C734);
  }
  *unint64_t v48 = v47;
  int v50 = a2[1];
  unint64_t v51 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908C754);
  }
  *unint64_t v51 = v50;
  int v53 = a2[2];
  unint64_t v54 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908C774);
  }
  _DWORD *v54 = v53;
  char v56 = *((unsigned char *)a2 + 12);
  unint64_t v57 = (unsigned char *)IPC::Encoder::grow(v46, 1uLL, 1);
  if (!v58)
  {
    __break(0xC471u);
    JUMPOUT(0x19908C794);
  }
  *unint64_t v57 = v56;
  int v59 = a2[4];
  char v60 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v61 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908C7B4);
  }
  _DWORD *v60 = v59;
  uint64_t v62 = *((void *)a2 + 3);
  unint64_t v63 = (void *)IPC::Encoder::grow(v46, 8uLL, 8);
  if (v64 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x19908C7D4);
  }
  *unint64_t v63 = v62;
  uint64_t v38 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v87, 1, 0);
  unint64_t v66 = v87;
  unint64_t v87 = 0;
  if (v66)
  {
    IPC::Encoder::~Encoder(v66, v65);
    WTF::fastFree(v67, v68);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v83);
  return v38;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Viewport,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1115;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1115;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BufferData0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v67, v7);
    if (!v69) {
      return 15;
    }
    unint64_t v55 = v67;
    unint64_t v54 = v68;
    unint64_t v56 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v57 = v56 - v67;
    if (v56 >= v67)
    {
      unint64_t v58 = v57 + 2;
      if (v57 <= 0xFFFFFFFFFFFFFFFDLL && v58 <= v68)
      {
        *(_WORD *)(v67 + v57) = 2871;
        goto LABEL_64;
      }
      unint64_t v54 = 0;
    }
    unint64_t v58 = 0;
LABEL_64:
    char v60 = (void *)((v55 + v58 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v60 >= v55 + v58)
    {
      unint64_t v58 = (unint64_t)v60 - v55 + 8;
      if ((unint64_t)v60 - v55 > 0xFFFFFFFFFFFFFFF7 || v58 > v54) {
        return 17;
      }
      void *v60 = a3;
    }
    if (v54)
    {
      unint64_t v62 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v63 = *(void *)(a1 + 64);
      if (v62 + 16 >= v63) {
        unint64_t v62 = 0;
      }
      if (v58 <= 0x10) {
        unint64_t v58 = 16;
      }
      unint64_t v64 = v62 + v58;
      if (v63 <= v64) {
        unint64_t v64 = 0;
      }
      *(void *)(a1 + 80) = v64;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v64) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v67, v7);
  if (!v69) {
    return 15;
  }
  unint64_t v9 = v67;
  unint64_t v10 = v68;
  unint64_t v11 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v67;
  if (v11 >= v67)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v68)
    {
      *(_WORD *)(v67 + v12) = 929;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 8;
    if (v22 > 0xFFFFFFFFFFFFFFF7 || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(void *)(v9 + v22) = *((void *)a2 + 1);
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v25 >= v9 + v13)
  {
    BOOL v26 = (char *)v25 - v9;
    if ((unint64_t)v25 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_37;
    }
    unint64_t v13 = (unint64_t)(v26 + 4);
    if ((unint64_t)(v26 + 4) > v10) {
      goto LABEL_37;
    }
    _DWORD *v25 = a2[4];
  }
  if (v10)
  {
    uint64_t v27 = *(void *)(a1 + 72);
    unint64_t v28 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *(void *)(a1 + 64);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    uint64_t v30 = 16;
    if (v13 > 0x10) {
      uint64_t v30 = v13;
    }
    unint64_t v31 = v28 + v30;
    if (v29 <= v31) {
      unint64_t v31 = 0;
    }
    *(void *)(a1 + 80) = v31;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v27 + 16) + 128), v31) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v32 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v32;
  }
LABEL_37:
  if (!v69)
  {
    __break(1u);
    goto LABEL_85;
  }
  unint64_t v33 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - v67;
  if (v33 < v67)
  {
    unint64_t v35 = 0;
  }
  else
  {
    unint64_t v35 = 0;
    if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v68)
    {
      *(_WORD *)(v67 + v34) = 2870;
      unint64_t v35 = v34 + 2;
    }
  }
  unint64_t v36 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = *(void *)(a1 + 64);
  if (v36 + 16 >= v37) {
    unint64_t v36 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v38 = v36 + v35;
  if (v37 <= v38) {
    unint64_t v38 = 0;
  }
  *(void *)(a1 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v38);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v66, (uint64_t **)(a1 + 8));
  unint64_t v39 = v66;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 929;
  *((void *)v40 + 1) = a3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unint64_t v70 = v40;
  int v41 = *a2;
  unint64_t v42 = (_DWORD *)IPC::Encoder::grow(v40, 4uLL, 4);
  if (v43 <= 3)
  {
LABEL_85:
    __break(0xC471u);
    JUMPOUT(0x19908CFF0);
  }
  *unint64_t v42 = v41;
  uint64_t v44 = *((void *)a2 + 1);
  unint64_t v45 = (void *)IPC::Encoder::grow(v40, 8uLL, 8);
  if (v46 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x19908D010);
  }
  *unint64_t v45 = v44;
  int v47 = a2[4];
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v40, 4uLL, 4);
  if (v49 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908D030);
  }
  *unint64_t v48 = v47;
  uint64_t v32 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v70, 1, 0);
  unint64_t v51 = v70;
  unint64_t v70 = 0;
  if (v51)
  {
    IPC::Encoder::~Encoder(v51, v50);
    WTF::fastFree(v52, v53);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  return v32;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BufferData1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, const void ***a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v60, v7);
    if (!(_BYTE)v62) {
      return 15;
    }
    unint64_t v45 = v60;
    unint64_t v44 = v61;
    unint64_t v46 = ((unint64_t)v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = v46 - (void)v60;
    if (v46 >= (unint64_t)v60)
    {
      unint64_t v48 = v47 + 2;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v48 <= v61)
      {
        *(_WORD *)((char *)v60 + v47) = 2871;
        goto LABEL_59;
      }
      unint64_t v44 = 0;
    }
    unint64_t v48 = 0;
LABEL_59:
    int v50 = (char *)(((unint64_t)v45 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v50 >= (char *)v45 + v48)
    {
      unint64_t v48 = v50 - (char *)v45 + 8;
      if ((unint64_t)(v50 - (char *)v45) > 0xFFFFFFFFFFFFFFF7 || v48 > v44) {
        return 17;
      }
      *(void *)int v50 = a3;
    }
    if (v44)
    {
      unint64_t v52 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = *(void *)(a1 + 64);
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v48 <= 0x10) {
        unint64_t v48 = 16;
      }
      unint64_t v54 = v52 + v48;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      *(void *)(a1 + 80) = v54;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v54) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v57, v7);
  if (!v59) {
    return 15;
  }
  unint64_t v9 = v57;
  unint64_t v10 = v58;
  char v60 = v57;
  unint64_t v61 = v58;
  uint64_t v62 = 0;
  unint64_t v11 = ((unint64_t)v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v57;
  if (v11 < (unint64_t)v57)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v58)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v61 = 0;
    }
    else
    {
      *(_WORD *)((char *)v57 + v12) = 930;
      uint64_t v62 = v12 + 2;
    }
  }
  unint64_t v15 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v15 >= (char *)v9 + v13)
  {
    if ((unint64_t)(v15 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || v15 - (char *)v9 + 4 > v10)
    {
      unint64_t v61 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v15 = *(_DWORD *)a2;
      uint64_t v62 = v15 - (char *)v9 + 4;
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v60, *a2[1], (size_t)a2[1][1]);
  unint64_t v17 = v62;
  unint64_t v18 = (char *)(((unint64_t)v60 + v62 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v18 >= (char *)v60 + v62)
  {
    int64_t v19 = v18 - (char *)v60;
    unint64_t v17 = v18 - (char *)v60 + 4;
    if ((unint64_t)(v18 - (char *)v60) > 0xFFFFFFFFFFFFFFFBLL || v17 > v61) {
      goto LABEL_36;
    }
    *(_DWORD *)unint64_t v18 = *((_DWORD *)a2 + 4);
    uint64_t v62 = v19 + 4;
  }
  if (v61)
  {
    uint64_t v21 = *(void *)(a1 + 72);
    unint64_t v22 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = *(void *)(a1 + 64);
    if (v22 + 16 >= v23) {
      unint64_t v22 = 0;
    }
    if (v17 <= 0x10) {
      unint64_t v17 = 16;
    }
    unint64_t v24 = v22 + v17;
    if (v23 <= v24) {
      unint64_t v24 = 0;
    }
    *(void *)(a1 + 80) = v24;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v21 + 16) + 128), v24) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
LABEL_36:
  if (!v59)
  {
    __break(1u);
    goto LABEL_78;
  }
  unint64_t v26 = ((unint64_t)v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = v26 - (void)v57;
  if (v26 < (unint64_t)v57)
  {
    unint64_t v28 = 0;
  }
  else
  {
    unint64_t v28 = 0;
    if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= v58)
    {
      *(_WORD *)((char *)v57 + v27) = 2870;
      unint64_t v28 = v27 + 2;
    }
  }
  unint64_t v29 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v30 = *(void *)(a1 + 64);
  if (v29 + 16 >= v30) {
    unint64_t v29 = 0;
  }
  if (v28 <= 0x10) {
    unint64_t v28 = 16;
  }
  unint64_t v31 = v29 + v28;
  if (v30 <= v31) {
    unint64_t v31 = 0;
  }
  *(void *)(a1 + 80) = v31;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v31);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v56, (uint64_t **)(a1 + 8));
  uint64_t v32 = v56;
  unint64_t v33 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v33 = 930;
  *((void *)v33 + 1) = a3;
  *((void *)v33 + 66) = (char *)v33 + 16;
  *((void *)v33 + 67) = 512;
  *((void *)v33 + 68) = 0;
  *((void *)v33 + 70) = 0;
  *((void *)v33 + 69) = 0;
  IPC::Encoder::encodeHeader(v33);
  char v60 = v33;
  int v34 = *(_DWORD *)a2;
  unint64_t v35 = (_DWORD *)IPC::Encoder::grow(v33, 4uLL, 4);
  if (v36 <= 3)
  {
LABEL_78:
    __break(0xC471u);
    JUMPOUT(0x19908D494);
  }
  *unint64_t v35 = v34;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v33, *a2[1], (size_t)a2[1][1]);
  int v37 = *((_DWORD *)a2 + 4);
  unint64_t v38 = (_DWORD *)IPC::Encoder::grow(v33, 4uLL, 4);
  if (v39 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908D4B4);
  }
  *unint64_t v38 = v37;
  uint64_t v25 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v60, 1, 0);
  int v41 = v60;
  char v60 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v56);
  return v25;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BufferSubData,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v62, v7);
    if (!(_BYTE)v64) {
      return 15;
    }
    unint64_t v47 = v62;
    unint64_t v46 = v63;
    unint64_t v48 = ((unint64_t)v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v49 = v48 - (void)v62;
    if (v48 >= (unint64_t)v62)
    {
      unint64_t v50 = v49 + 2;
      if (v49 <= 0xFFFFFFFFFFFFFFFDLL && v50 <= v63)
      {
        *(_WORD *)((char *)v62 + v49) = 2871;
        goto LABEL_59;
      }
      unint64_t v46 = 0;
    }
    unint64_t v50 = 0;
LABEL_59:
    unint64_t v52 = (char *)(((unint64_t)v47 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v52 >= (char *)v47 + v50)
    {
      unint64_t v50 = v52 - (char *)v47 + 8;
      if ((unint64_t)(v52 - (char *)v47) > 0xFFFFFFFFFFFFFFF7 || v50 > v46) {
        return 17;
      }
      *(void *)unint64_t v52 = a3;
    }
    if (v46)
    {
      unint64_t v54 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v55 = *(void *)(a1 + 64);
      if (v54 + 16 >= v55) {
        unint64_t v54 = 0;
      }
      if (v50 <= 0x10) {
        unint64_t v50 = 16;
      }
      unint64_t v56 = v54 + v50;
      if (v55 <= v56) {
        unint64_t v56 = 0;
      }
      *(void *)(a1 + 80) = v56;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v56) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v59, v7);
  if (!v61) {
    return 15;
  }
  unint64_t v9 = v59;
  unint64_t v10 = v60;
  uint64_t v62 = v59;
  unint64_t v63 = v60;
  unint64_t v64 = 0;
  unint64_t v11 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v59;
  if (v11 < (unint64_t)v59)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v60)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v63 = 0;
    }
    else
    {
      *(_WORD *)((char *)v59 + v12) = 931;
      unint64_t v64 = v12 + 2;
    }
  }
  unint64_t v15 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - ((void)v9 + v13);
  if (v15 >= (unint64_t)v9 + v13)
  {
    unint64_t v17 = v15 - (void)v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v63 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v17) = *a2;
      unint64_t v64 = v18;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (char *)(((unint64_t)v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v20 >= (char *)v9 + v13)
  {
    if ((unint64_t)(v20 - (char *)v9) > 0xFFFFFFFFFFFFFFF7 || v20 - (char *)v9 + 8 > v10)
    {
      unint64_t v63 = 0;
    }
    else
    {
      *(void *)unint64_t v20 = *((void *)a2 + 1);
      unint64_t v64 = v20 - (char *)v9 + 8;
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v62, **((const void ***)a2 + 2), *(void *)(*((void *)a2 + 2) + 8));
  if (v63)
  {
    uint64_t v22 = v64;
    uint64_t v23 = *(void *)(a1 + 72);
    unint64_t v24 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v25 = *(void *)(a1 + 64);
    if (v24 + 16 >= v25) {
      unint64_t v24 = 0;
    }
    if (v64 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v26 = v24 + v22;
    if (v25 <= v26) {
      unint64_t v26 = 0;
    }
    *(void *)(a1 + 80) = v26;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v23 + 16) + 128), v26) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  if (!v61)
  {
    __break(1u);
    goto LABEL_79;
  }
  unint64_t v28 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v29 = v28 - (void)v59;
  if (v28 < (unint64_t)v59)
  {
    unint64_t v30 = 0;
  }
  else
  {
    unint64_t v30 = 0;
    if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v29 + 2 <= v60)
    {
      *(_WORD *)((char *)v59 + v29) = 2870;
      unint64_t v30 = v29 + 2;
    }
  }
  unint64_t v31 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = *(void *)(a1 + 64);
  if (v31 + 16 >= v32) {
    unint64_t v31 = 0;
  }
  if (v30 <= 0x10) {
    unint64_t v30 = 16;
  }
  unint64_t v33 = v31 + v30;
  if (v32 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(a1 + 80) = v33;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v33);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(a1 + 8));
  int v34 = v58;
  unint64_t v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v35 = 931;
  *((void *)v35 + 1) = a3;
  *((void *)v35 + 66) = (char *)v35 + 16;
  *((void *)v35 + 67) = 512;
  *((void *)v35 + 68) = 0;
  *((void *)v35 + 70) = 0;
  *((void *)v35 + 69) = 0;
  IPC::Encoder::encodeHeader(v35);
  uint64_t v62 = v35;
  int v36 = *a2;
  int v37 = (_DWORD *)IPC::Encoder::grow(v35, 4uLL, 4);
  if (v38 <= 3)
  {
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x19908D928);
  }
  *int v37 = v36;
  uint64_t v39 = *((void *)a2 + 1);
  unint64_t v40 = (void *)IPC::Encoder::grow(v35, 8uLL, 8);
  if (v41 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x19908D948);
  }
  void *v40 = v39;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v35, **((const void ***)a2 + 2), *(void *)(*((void *)a2 + 2) + 8));
  uint64_t v27 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v62, 1, 0);
  unint64_t v43 = v62;
  uint64_t v62 = 0;
  if (v43)
  {
    IPC::Encoder::~Encoder(v43, v42);
    WTF::fastFree(v44, v45);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v58);
  return v27;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ReadPixelsBufferObject,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v82, v7);
    if (!(_BYTE)v84) {
      return 15;
    }
    unint64_t v67 = v82;
    unint64_t v66 = v83;
    unint64_t v68 = ((unint64_t)v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v69 = v68 - (void)v82;
    if (v68 >= (unint64_t)v82)
    {
      unint64_t v70 = v69 + 2;
      if (v69 <= 0xFFFFFFFFFFFFFFFDLL && v70 <= v83)
      {
        *(_WORD *)((char *)v82 + v69) = 2871;
        goto LABEL_76;
      }
      unint64_t v66 = 0;
    }
    unint64_t v70 = 0;
LABEL_76:
    unint64_t v72 = (char *)(((unint64_t)v67 + v70 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v72 >= (char *)v67 + v70)
    {
      unint64_t v70 = v72 - (char *)v67 + 8;
      if ((unint64_t)(v72 - (char *)v67) > 0xFFFFFFFFFFFFFFF7 || v70 > v66) {
        return 17;
      }
      *(void *)unint64_t v72 = a3;
    }
    if (v66)
    {
      unint64_t v74 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v75 = *(void *)(a1 + 64);
      if (v74 + 16 >= v75) {
        unint64_t v74 = 0;
      }
      if (v70 <= 0x10) {
        unint64_t v70 = 16;
      }
      unint64_t v76 = v74 + v70;
      if (v75 <= v76) {
        unint64_t v76 = 0;
      }
      *(void *)(a1 + 80) = v76;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v76) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v79, v7);
  if (!v81) {
    return 15;
  }
  unint64_t v82 = v79;
  unint64_t v83 = v80;
  unint64_t v84 = 0;
  unint64_t v9 = ((unint64_t)v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v79;
  unint64_t v11 = v9 - (void)v79;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v80)
    {
      unint64_t v83 = 0;
    }
    else
    {
      *(_WORD *)((char *)v79 + v11) = 1030;
      unint64_t v84 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode((uint64_t *)&v82, *a2);
  unint64_t v14 = v83;
  unint64_t v13 = v84;
  unint64_t v15 = v82;
  unint64_t v16 = ((unint64_t)v82 + v84 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = v16 - ((void)v82 + v84);
  if (v16 >= (unint64_t)v82 + v84)
  {
    unint64_t v18 = v16 - (void)v82;
    unint64_t v19 = v17 + v84 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > v83)
    {
      unint64_t v14 = 0;
      unint64_t v83 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v82 + v18) = *((_DWORD *)a2 + 2);
      unint64_t v84 = v19;
      unint64_t v15 = v82;
      unint64_t v14 = v83;
      unint64_t v13 = v19;
    }
  }
  unint64_t v21 = ((unint64_t)v15 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = v21 - ((void)v15 + v13);
  if (v21 >= (unint64_t)v15 + v13)
  {
    unint64_t v23 = v21 - (void)v15;
    unint64_t v24 = v22 + v13 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > v14)
    {
      unint64_t v14 = 0;
      unint64_t v83 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v15 + v23) = *((_DWORD *)a2 + 3);
      unint64_t v84 = v24;
      unint64_t v15 = v82;
      unint64_t v14 = v83;
      unint64_t v13 = v24;
    }
  }
  unint64_t v26 = ((unint64_t)v15 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = v26 - ((void)v15 + v13);
  if (v26 >= (unint64_t)v15 + v13)
  {
    unint64_t v28 = v26 - (void)v15;
    if (v27 + v13 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > v14)
    {
      unint64_t v14 = 0;
      unint64_t v83 = 0;
    }
    else
    {
      *(void *)((char *)v15 + v28) = a2[2];
      unint64_t v84 = v28 + 8;
      unint64_t v15 = v82;
      unint64_t v14 = v83;
      unint64_t v13 = v28 + 8;
    }
  }
  unint64_t v29 = ((unint64_t)v15 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v30 = v29 - ((void)v15 + v13);
  if (v29 >= (unint64_t)v15 + v13)
  {
    unint64_t v31 = v29 - (void)v15;
    if (v30 + v13 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > v14)
    {
      unint64_t v14 = 0;
      unint64_t v83 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v15 + v31) = *((_DWORD *)a2 + 6);
      unint64_t v84 = v31 + 4;
      unint64_t v15 = v82;
      unint64_t v14 = v83;
      unint64_t v13 = v31 + 4;
    }
  }
  unint64_t v32 = (char *)(((unint64_t)v15 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v32 >= (char *)v15 + v13)
  {
    int64_t v33 = v32 - (char *)v15;
    if ((unint64_t)(v32 - (char *)v15) > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_50;
    }
    unint64_t v13 = v33 + 4;
    if (v33 + 4 > v14) {
      goto LABEL_50;
    }
    *(_DWORD *)unint64_t v32 = *((_DWORD *)a2 + 7);
    unint64_t v84 = v33 + 4;
    unint64_t v14 = v83;
  }
  if (v14)
  {
    unint64_t v34 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = *(void *)(a1 + 64);
    if (v34 + 16 >= v35) {
      unint64_t v34 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v36 = v34 + v13;
    if (v35 <= v36) {
      unint64_t v37 = 0;
    }
    else {
      unint64_t v37 = v36;
    }
    *(void *)(a1 + 80) = v37;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v37) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
LABEL_50:
  if (!v81)
  {
    __break(1u);
    goto LABEL_98;
  }
  unint64_t v39 = ((unint64_t)v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - (void)v79;
  if (v39 < (unint64_t)v79)
  {
    unint64_t v41 = 0;
  }
  else
  {
    unint64_t v41 = 0;
    if (v40 <= 0xFFFFFFFFFFFFFFFDLL && v40 + 2 <= v80)
    {
      *(_WORD *)((char *)v79 + v40) = 2870;
      unint64_t v41 = v40 + 2;
    }
  }
  unint64_t v42 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *(void *)(a1 + 64);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v44 = v42 + v41;
  if (v43 <= v44) {
    unint64_t v44 = 0;
  }
  *(void *)(a1 + 80) = v44;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v44);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)(a1 + 8));
  unint64_t v45 = v78;
  unint64_t v46 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v46 = 1030;
  *((void *)v46 + 1) = a3;
  *((void *)v46 + 66) = (char *)v46 + 16;
  *((void *)v46 + 67) = 512;
  *((void *)v46 + 68) = 0;
  *((void *)v46 + 70) = 0;
  *((void *)v46 + 69) = 0;
  IPC::Encoder::encodeHeader(v46);
  unint64_t v82 = v46;
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v46, *a2);
  int v47 = *((_DWORD *)a2 + 2);
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v49 <= 3)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x19908DEF4);
  }
  *unint64_t v48 = v47;
  int v50 = *((_DWORD *)a2 + 3);
  unint64_t v51 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908DF14);
  }
  *unint64_t v51 = v50;
  unint64_t v53 = a2[2];
  unint64_t v54 = (void *)IPC::Encoder::grow(v46, 8uLL, 8);
  if (v55 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x19908DF34);
  }
  void *v54 = v53;
  int v56 = *((_DWORD *)a2 + 6);
  unint64_t v57 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v58 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908DF54);
  }
  *unint64_t v57 = v56;
  int v59 = *((_DWORD *)a2 + 7);
  unint64_t v60 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v61 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908DF74);
  }
  _DWORD *v60 = v59;
  uint64_t v38 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v82, 1, 0);
  unint64_t v63 = v82;
  unint64_t v82 = 0;
  if (v63)
  {
    IPC::Encoder::~Encoder(v63, v62);
    WTF::fastFree(v64, v65);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v78);
  return v38;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexImage2D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, const void ***a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v94, v7);
    if (!(_BYTE)v96) {
      return 15;
    }
    unint64_t v79 = v94;
    unint64_t v78 = v95;
    unint64_t v80 = ((unint64_t)v94 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v81 = v80 - (void)v94;
    if (v80 >= (unint64_t)v94)
    {
      unint64_t v82 = v81 + 2;
      if (v81 <= 0xFFFFFFFFFFFFFFFDLL && v82 <= v95)
      {
        *(_WORD *)((char *)v94 + v81) = 2871;
        goto LABEL_89;
      }
      unint64_t v78 = 0;
    }
    unint64_t v82 = 0;
LABEL_89:
    unint64_t v84 = (char *)(((unint64_t)v79 + v82 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v84 >= (char *)v79 + v82)
    {
      unint64_t v82 = v84 - (char *)v79 + 8;
      if ((unint64_t)(v84 - (char *)v79) > 0xFFFFFFFFFFFFFFF7 || v82 > v78) {
        return 17;
      }
      *(void *)unint64_t v84 = a3;
    }
    if (v78)
    {
      unint64_t v86 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v87 = *(void *)(a1 + 64);
      if (v86 + 16 >= v87) {
        unint64_t v86 = 0;
      }
      if (v82 <= 0x10) {
        unint64_t v82 = 16;
      }
      unint64_t v88 = v86 + v82;
      if (v87 <= v88) {
        unint64_t v88 = 0;
      }
      *(void *)(a1 + 80) = v88;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v88) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v91, v7);
  if (!v93) {
    return 15;
  }
  unint64_t v9 = v91;
  unint64_t v10 = v92;
  unint64_t v94 = v91;
  unint64_t v95 = v92;
  unint64_t v96 = 0;
  unint64_t v11 = ((unint64_t)v91 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v91;
  if (v11 < (unint64_t)v91)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v92)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_WORD *)((char *)v91 + v12) = 1051;
      unint64_t v96 = v12 + 2;
    }
  }
  unint64_t v15 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - ((void)v9 + v13);
  if (v15 >= (unint64_t)v9 + v13)
  {
    unint64_t v17 = v15 - (void)v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v17) = *(_DWORD *)a2;
      unint64_t v96 = v18;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - ((void)v9 + v13);
  if (v20 >= (unint64_t)v9 + v13)
  {
    unint64_t v22 = v20 - (void)v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v22) = *((_DWORD *)a2 + 1);
      unint64_t v96 = v23;
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v25 >= (char *)v9 + v13)
  {
    unint64_t v26 = (char *)(v25 - (char *)v9);
    if ((unint64_t)(v25 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v26 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v25 = *((_DWORD *)a2 + 2);
      unint64_t v96 = (unint64_t)(v26 + 4);
      unint64_t v13 = (unint64_t)(v26 + 4);
    }
  }
  unint64_t v27 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v27 >= (char *)v9 + v13)
  {
    unint64_t v28 = (char *)(v27 - (char *)v9);
    if ((unint64_t)(v27 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v28 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v27 = *((_DWORD *)a2 + 3);
      unint64_t v96 = (unint64_t)(v28 + 4);
      unint64_t v13 = (unint64_t)(v28 + 4);
    }
  }
  unint64_t v29 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v29 >= (char *)v9 + v13)
  {
    unint64_t v30 = (char *)(v29 - (char *)v9);
    if ((unint64_t)(v29 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v30 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v29 = *((_DWORD *)a2 + 4);
      unint64_t v96 = (unint64_t)(v30 + 4);
      unint64_t v13 = (unint64_t)(v30 + 4);
    }
  }
  unint64_t v31 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v31 >= (char *)v9 + v13)
  {
    unint64_t v32 = (char *)(v31 - (char *)v9);
    if ((unint64_t)(v31 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v32 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v31 = *((_DWORD *)a2 + 5);
      unint64_t v96 = (unint64_t)(v32 + 4);
      unint64_t v13 = (unint64_t)(v32 + 4);
    }
  }
  int64_t v33 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v33 >= (char *)v9 + v13)
  {
    unint64_t v34 = (char *)(v33 - (char *)v9);
    if ((unint64_t)(v33 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)int64_t v33 = *((_DWORD *)a2 + 6);
      unint64_t v96 = (unint64_t)(v34 + 4);
      unint64_t v13 = (unint64_t)(v34 + 4);
    }
  }
  unint64_t v35 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v35 >= (char *)v9 + v13)
  {
    unint64_t v36 = (char *)(v35 - (char *)v9);
    if ((unint64_t)(v35 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v36 + 4) > v10)
    {
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v35 = *((_DWORD *)a2 + 7);
      unint64_t v96 = (unint64_t)(v36 + 4);
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v94, *a2[4], (size_t)a2[4][1]);
  if (v95)
  {
    uint64_t v37 = v96;
    unint64_t v38 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v39 = *(void *)(a1 + 64);
    if (v38 + 16 >= v39) {
      unint64_t v38 = 0;
    }
    if (v96 <= 0x10) {
      uint64_t v37 = 16;
    }
    unint64_t v40 = v38 + v37;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *(void *)(a1 + 80) = v40;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v40) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  if (!v93)
  {
    __break(1u);
    goto LABEL_115;
  }
  unint64_t v42 = ((unint64_t)v91 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = v42 - (void)v91;
  if (v42 < (unint64_t)v91)
  {
    unint64_t v44 = 0;
  }
  else
  {
    unint64_t v44 = 0;
    if (v43 <= 0xFFFFFFFFFFFFFFFDLL && v43 + 2 <= v92)
    {
      *(_WORD *)((char *)v91 + v43) = 2870;
      unint64_t v44 = v43 + 2;
    }
  }
  unint64_t v45 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v46 = *(void *)(a1 + 64);
  if (v45 + 16 >= v46) {
    unint64_t v45 = 0;
  }
  if (v44 <= 0x10) {
    unint64_t v44 = 16;
  }
  unint64_t v47 = v45 + v44;
  if (v46 <= v47) {
    unint64_t v47 = 0;
  }
  *(void *)(a1 + 80) = v47;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v47);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v90, (uint64_t **)(a1 + 8));
  unint64_t v48 = v90;
  unint64_t v49 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v49 = 1051;
  *((void *)v49 + 1) = a3;
  *((void *)v49 + 66) = (char *)v49 + 16;
  *((void *)v49 + 67) = 512;
  *((void *)v49 + 68) = 0;
  *((void *)v49 + 70) = 0;
  *((void *)v49 + 69) = 0;
  IPC::Encoder::encodeHeader(v49);
  unint64_t v94 = v49;
  int v50 = *(_DWORD *)a2;
  unint64_t v51 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v52 <= 3)
  {
LABEL_115:
    __break(0xC471u);
    JUMPOUT(0x19908E65CLL);
  }
  *unint64_t v51 = v50;
  int v53 = *((_DWORD *)a2 + 1);
  unint64_t v54 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908E67CLL);
  }
  _DWORD *v54 = v53;
  int v56 = *((_DWORD *)a2 + 2);
  unint64_t v57 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v58 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908E69CLL);
  }
  *unint64_t v57 = v56;
  int v59 = *((_DWORD *)a2 + 3);
  unint64_t v60 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v61 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908E6BCLL);
  }
  _DWORD *v60 = v59;
  int v62 = *((_DWORD *)a2 + 4);
  unint64_t v63 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v64 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908E6DCLL);
  }
  *unint64_t v63 = v62;
  int v65 = *((_DWORD *)a2 + 5);
  unint64_t v66 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v67 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908E6FCLL);
  }
  _DWORD *v66 = v65;
  int v68 = *((_DWORD *)a2 + 6);
  unint64_t v69 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v70 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908E71CLL);
  }
  *unint64_t v69 = v68;
  int v71 = *((_DWORD *)a2 + 7);
  unint64_t v72 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v73 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908E73CLL);
  }
  _DWORD *v72 = v71;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v49, *a2[4], (size_t)a2[4][1]);
  uint64_t v41 = IPC::Connection::sendMessageImpl((uint64_t)v48, (uint64_t *)&v94, 1, 0);
  unint64_t v75 = v94;
  unint64_t v94 = 0;
  if (v75)
  {
    IPC::Encoder::~Encoder(v75, v74);
    WTF::fastFree(v76, v77);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v90);
  return v41;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexImage2D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v109, v7);
    if (!v111) {
      return 15;
    }
    unint64_t v91 = v109;
    unint64_t v90 = v110;
    unint64_t v92 = (v109 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v93 = v92 - v109;
    if (v92 >= v109)
    {
      unint64_t v94 = v93 + 2;
      if (v93 <= 0xFFFFFFFFFFFFFFFDLL && v94 <= v110)
      {
        *(_WORD *)(v109 + v93) = 2871;
        goto LABEL_101;
      }
      unint64_t v90 = 0;
    }
    unint64_t v94 = 0;
LABEL_101:
    unint64_t v96 = (void *)((v91 + v94 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v96 >= v91 + v94)
    {
      unint64_t v94 = (unint64_t)v96 - v91 + 8;
      if ((unint64_t)v96 - v91 > 0xFFFFFFFFFFFFFFF7 || v94 > v90) {
        return 17;
      }
      *unint64_t v96 = a3;
    }
    if (v90)
    {
      unint64_t v98 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v99 = *(void *)(a1 + 64);
      if (v98 + 16 >= v99) {
        unint64_t v98 = 0;
      }
      if (v94 <= 0x10) {
        unint64_t v94 = 16;
      }
      unint64_t v100 = v98 + v94;
      if (v99 <= v100) {
        unint64_t v100 = 0;
      }
      *(void *)(a1 + 80) = v100;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v100) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v109, v7);
  if (!v111) {
    return 15;
  }
  unint64_t v9 = v109;
  unint64_t v10 = v110;
  unint64_t v11 = (v109 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v109;
  if (v11 >= v109)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v110)
    {
      *(_WORD *)(v109 + v12) = 1052;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v105 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v105 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v105 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v102 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v105)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v102 = v105;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v102 = v105;
  }
  unint64_t v32 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v32 >= v9 + v13;
  unint64_t v33 = v32 - (v9 + v13);
  if (v26)
  {
    unint64_t v103 = 0;
    unint64_t v34 = v33 + v13;
    if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= v102)
    {
      *(_DWORD *)(v9 + v34) = a2[4];
      unint64_t v103 = v102;
      unint64_t v13 = v34 + 4;
    }
  }
  else
  {
    unint64_t v103 = v102;
  }
  unint64_t v35 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v35 >= v9 + v13;
  unint64_t v36 = v35 - (v9 + v13);
  if (v26)
  {
    unint64_t v104 = 0;
    unint64_t v37 = v36 + v13;
    if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= v103)
    {
      *(_DWORD *)(v9 + v37) = a2[5];
      unint64_t v104 = v103;
      unint64_t v13 = v37 + 4;
    }
  }
  else
  {
    unint64_t v104 = v103;
  }
  unint64_t v38 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v38 >= v9 + v13;
  unint64_t v39 = v38 - (v9 + v13);
  if (v26)
  {
    unint64_t v106 = 0;
    unint64_t v40 = v39 + v13;
    if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= v104)
    {
      *(_DWORD *)(v9 + v40) = a2[6];
      unint64_t v106 = v104;
      unint64_t v13 = v40 + 4;
    }
  }
  else
  {
    unint64_t v106 = v104;
  }
  unint64_t v41 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v41 >= v9 + v13;
  unint64_t v42 = v41 - (v9 + v13);
  if (v26)
  {
    unint64_t v107 = 0;
    unint64_t v43 = v42 + v13;
    if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= v106)
    {
      *(_DWORD *)(v9 + v43) = a2[7];
      unint64_t v107 = v106;
      unint64_t v13 = v43 + 4;
    }
  }
  else
  {
    unint64_t v107 = v106;
  }
  unint64_t v44 = (void *)((v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v44 >= v9 + v13)
  {
    unint64_t v45 = (char *)v44 - v9;
    if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_68;
    }
    unint64_t v13 = (unint64_t)(v45 + 8);
    if ((unint64_t)(v45 + 8) > v107) {
      goto LABEL_68;
    }
    void *v44 = *((void *)a2 + 4);
  }
  if (v107)
  {
    unint64_t v46 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = *(void *)(a1 + 64);
    if (v46 + 16 >= v47) {
      unint64_t v46 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v48 = v46 + v13;
    if (v47 <= v48) {
      unint64_t v49 = 0;
    }
    else {
      unint64_t v49 = v48;
    }
    *(void *)(a1 + 80) = v49;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v49) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v50 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v50;
  }
LABEL_68:
  if (!v111)
  {
    __break(1u);
    goto LABEL_122;
  }
  unint64_t v51 = (v109 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v52 = v51 - v109;
  if (v51 < v109)
  {
    unint64_t v53 = 0;
  }
  else
  {
    unint64_t v53 = 0;
    if (v52 <= 0xFFFFFFFFFFFFFFFDLL && v52 + 2 <= v110)
    {
      *(_WORD *)(v109 + v52) = 2870;
      unint64_t v53 = v52 + 2;
    }
  }
  unint64_t v54 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v55 = *(void *)(a1 + 64);
  if (v54 + 16 >= v55) {
    unint64_t v54 = 0;
  }
  if (v53 <= 0x10) {
    unint64_t v53 = 16;
  }
  unint64_t v56 = v54 + v53;
  if (v55 <= v56) {
    unint64_t v56 = 0;
  }
  *(void *)(a1 + 80) = v56;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v56);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v108, (uint64_t **)(a1 + 8));
  unint64_t v57 = v108;
  unint64_t v58 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v58 = 1052;
  *((void *)v58 + 1) = a3;
  *((void *)v58 + 66) = (char *)v58 + 16;
  *((void *)v58 + 67) = 512;
  *((void *)v58 + 68) = 0;
  *((void *)v58 + 70) = 0;
  *((void *)v58 + 69) = 0;
  IPC::Encoder::encodeHeader(v58);
  v112 = v58;
  int v59 = *a2;
  unint64_t v60 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v61 <= 3)
  {
LABEL_122:
    __break(0xC471u);
    JUMPOUT(0x19908EE18);
  }
  _DWORD *v60 = v59;
  int v62 = a2[1];
  unint64_t v63 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v64 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908EE38);
  }
  *unint64_t v63 = v62;
  int v65 = a2[2];
  unint64_t v66 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v67 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908EE58);
  }
  _DWORD *v66 = v65;
  int v68 = a2[3];
  unint64_t v69 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v70 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908EE78);
  }
  *unint64_t v69 = v68;
  int v71 = a2[4];
  unint64_t v72 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v73 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908EE98);
  }
  _DWORD *v72 = v71;
  int v74 = a2[5];
  unint64_t v75 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v76 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908EEB8);
  }
  _DWORD *v75 = v74;
  int v77 = a2[6];
  unint64_t v78 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v79 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908EED8);
  }
  _DWORD *v78 = v77;
  int v80 = a2[7];
  unint64_t v81 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v82 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908EEF8);
  }
  _DWORD *v81 = v80;
  uint64_t v83 = *((void *)a2 + 4);
  unint64_t v84 = (void *)IPC::Encoder::grow(v58, 8uLL, 8);
  if (v85 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x19908EF18);
  }
  void *v84 = v83;
  uint64_t v50 = IPC::Connection::sendMessageImpl((uint64_t)v57, (uint64_t *)&v112, 1, 0);
  unint64_t v87 = v112;
  v112 = 0;
  if (v87)
  {
    IPC::Encoder::~Encoder(v87, v86);
    WTF::fastFree(v88, v89);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v108);
  return v50;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexSubImage2D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, const void ***a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v94, v7);
    if (!(_BYTE)v96) {
      return 15;
    }
    unint64_t v79 = v94;
    unint64_t v78 = v95;
    unint64_t v80 = ((unint64_t)v94 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v81 = v80 - (void)v94;
    if (v80 >= (unint64_t)v94)
    {
      unint64_t v82 = v81 + 2;
      if (v81 <= 0xFFFFFFFFFFFFFFFDLL && v82 <= v95)
      {
        *(_WORD *)((char *)v94 + v81) = 2871;
        goto LABEL_89;
      }
      unint64_t v78 = 0;
    }
    unint64_t v82 = 0;
LABEL_89:
    unint64_t v84 = (char *)(((unint64_t)v79 + v82 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v84 >= (char *)v79 + v82)
    {
      unint64_t v82 = v84 - (char *)v79 + 8;
      if ((unint64_t)(v84 - (char *)v79) > 0xFFFFFFFFFFFFFFF7 || v82 > v78) {
        return 17;
      }
      *(void *)unint64_t v84 = a3;
    }
    if (v78)
    {
      unint64_t v86 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v87 = *(void *)(a1 + 64);
      if (v86 + 16 >= v87) {
        unint64_t v86 = 0;
      }
      if (v82 <= 0x10) {
        unint64_t v82 = 16;
      }
      unint64_t v88 = v86 + v82;
      if (v87 <= v88) {
        unint64_t v88 = 0;
      }
      *(void *)(a1 + 80) = v88;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v88) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v91, v7);
  if (!v93) {
    return 15;
  }
  unint64_t v9 = v91;
  unint64_t v10 = v92;
  unint64_t v94 = v91;
  unint64_t v95 = v92;
  unint64_t v96 = 0;
  unint64_t v11 = ((unint64_t)v91 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v91;
  if (v11 < (unint64_t)v91)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v92)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_WORD *)((char *)v91 + v12) = 1059;
      unint64_t v96 = v12 + 2;
    }
  }
  unint64_t v15 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - ((void)v9 + v13);
  if (v15 >= (unint64_t)v9 + v13)
  {
    unint64_t v17 = v15 - (void)v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v17) = *(_DWORD *)a2;
      unint64_t v96 = v18;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - ((void)v9 + v13);
  if (v20 >= (unint64_t)v9 + v13)
  {
    unint64_t v22 = v20 - (void)v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v22) = *((_DWORD *)a2 + 1);
      unint64_t v96 = v23;
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v25 >= (char *)v9 + v13)
  {
    BOOL v26 = (char *)(v25 - (char *)v9);
    if ((unint64_t)(v25 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v26 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v25 = *((_DWORD *)a2 + 2);
      unint64_t v96 = (unint64_t)(v26 + 4);
      unint64_t v13 = (unint64_t)(v26 + 4);
    }
  }
  unint64_t v27 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v27 >= (char *)v9 + v13)
  {
    unint64_t v28 = (char *)(v27 - (char *)v9);
    if ((unint64_t)(v27 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v28 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v27 = *((_DWORD *)a2 + 3);
      unint64_t v96 = (unint64_t)(v28 + 4);
      unint64_t v13 = (unint64_t)(v28 + 4);
    }
  }
  unint64_t v29 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v29 >= (char *)v9 + v13)
  {
    unint64_t v30 = (char *)(v29 - (char *)v9);
    if ((unint64_t)(v29 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v30 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v29 = *((_DWORD *)a2 + 4);
      unint64_t v96 = (unint64_t)(v30 + 4);
      unint64_t v13 = (unint64_t)(v30 + 4);
    }
  }
  unint64_t v31 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v31 >= (char *)v9 + v13)
  {
    unint64_t v32 = (char *)(v31 - (char *)v9);
    if ((unint64_t)(v31 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v32 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v31 = *((_DWORD *)a2 + 5);
      unint64_t v96 = (unint64_t)(v32 + 4);
      unint64_t v13 = (unint64_t)(v32 + 4);
    }
  }
  unint64_t v33 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v33 >= (char *)v9 + v13)
  {
    unint64_t v34 = (char *)(v33 - (char *)v9);
    if ((unint64_t)(v33 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v33 = *((_DWORD *)a2 + 6);
      unint64_t v96 = (unint64_t)(v34 + 4);
      unint64_t v13 = (unint64_t)(v34 + 4);
    }
  }
  unint64_t v35 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v35 >= (char *)v9 + v13)
  {
    unint64_t v36 = (char *)(v35 - (char *)v9);
    if ((unint64_t)(v35 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v36 + 4) > v10)
    {
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v35 = *((_DWORD *)a2 + 7);
      unint64_t v96 = (unint64_t)(v36 + 4);
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v94, *a2[4], (size_t)a2[4][1]);
  if (v95)
  {
    uint64_t v37 = v96;
    unint64_t v38 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v39 = *(void *)(a1 + 64);
    if (v38 + 16 >= v39) {
      unint64_t v38 = 0;
    }
    if (v96 <= 0x10) {
      uint64_t v37 = 16;
    }
    unint64_t v40 = v38 + v37;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *(void *)(a1 + 80) = v40;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v40) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  if (!v93)
  {
    __break(1u);
    goto LABEL_115;
  }
  unint64_t v42 = ((unint64_t)v91 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = v42 - (void)v91;
  if (v42 < (unint64_t)v91)
  {
    unint64_t v44 = 0;
  }
  else
  {
    unint64_t v44 = 0;
    if (v43 <= 0xFFFFFFFFFFFFFFFDLL && v43 + 2 <= v92)
    {
      *(_WORD *)((char *)v91 + v43) = 2870;
      unint64_t v44 = v43 + 2;
    }
  }
  unint64_t v45 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v46 = *(void *)(a1 + 64);
  if (v45 + 16 >= v46) {
    unint64_t v45 = 0;
  }
  if (v44 <= 0x10) {
    unint64_t v44 = 16;
  }
  unint64_t v47 = v45 + v44;
  if (v46 <= v47) {
    unint64_t v47 = 0;
  }
  *(void *)(a1 + 80) = v47;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v47);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v90, (uint64_t **)(a1 + 8));
  unint64_t v48 = v90;
  unint64_t v49 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v49 = 1059;
  *((void *)v49 + 1) = a3;
  *((void *)v49 + 66) = (char *)v49 + 16;
  *((void *)v49 + 67) = 512;
  *((void *)v49 + 68) = 0;
  *((void *)v49 + 70) = 0;
  *((void *)v49 + 69) = 0;
  IPC::Encoder::encodeHeader(v49);
  unint64_t v94 = v49;
  int v50 = *(_DWORD *)a2;
  unint64_t v51 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v52 <= 3)
  {
LABEL_115:
    __break(0xC471u);
    JUMPOUT(0x19908F630);
  }
  *unint64_t v51 = v50;
  int v53 = *((_DWORD *)a2 + 1);
  unint64_t v54 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908F650);
  }
  _DWORD *v54 = v53;
  int v56 = *((_DWORD *)a2 + 2);
  unint64_t v57 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v58 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908F670);
  }
  *unint64_t v57 = v56;
  int v59 = *((_DWORD *)a2 + 3);
  unint64_t v60 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v61 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908F690);
  }
  _DWORD *v60 = v59;
  int v62 = *((_DWORD *)a2 + 4);
  unint64_t v63 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v64 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908F6B0);
  }
  *unint64_t v63 = v62;
  int v65 = *((_DWORD *)a2 + 5);
  unint64_t v66 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v67 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908F6D0);
  }
  _DWORD *v66 = v65;
  int v68 = *((_DWORD *)a2 + 6);
  unint64_t v69 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v70 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908F6F0);
  }
  *unint64_t v69 = v68;
  int v71 = *((_DWORD *)a2 + 7);
  unint64_t v72 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v73 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908F710);
  }
  _DWORD *v72 = v71;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v49, *a2[4], (size_t)a2[4][1]);
  uint64_t v41 = IPC::Connection::sendMessageImpl((uint64_t)v48, (uint64_t *)&v94, 1, 0);
  unint64_t v75 = v94;
  unint64_t v94 = 0;
  if (v75)
  {
    IPC::Encoder::~Encoder(v75, v74);
    WTF::fastFree(v76, v77);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v90);
  return v41;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexSubImage2D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v109, v7);
    if (!v111) {
      return 15;
    }
    unint64_t v91 = v109;
    unint64_t v90 = v110;
    unint64_t v92 = (v109 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v93 = v92 - v109;
    if (v92 >= v109)
    {
      unint64_t v94 = v93 + 2;
      if (v93 <= 0xFFFFFFFFFFFFFFFDLL && v94 <= v110)
      {
        *(_WORD *)(v109 + v93) = 2871;
        goto LABEL_101;
      }
      unint64_t v90 = 0;
    }
    unint64_t v94 = 0;
LABEL_101:
    unint64_t v96 = (void *)((v91 + v94 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v96 >= v91 + v94)
    {
      unint64_t v94 = (unint64_t)v96 - v91 + 8;
      if ((unint64_t)v96 - v91 > 0xFFFFFFFFFFFFFFF7 || v94 > v90) {
        return 17;
      }
      *unint64_t v96 = a3;
    }
    if (v90)
    {
      unint64_t v98 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v99 = *(void *)(a1 + 64);
      if (v98 + 16 >= v99) {
        unint64_t v98 = 0;
      }
      if (v94 <= 0x10) {
        unint64_t v94 = 16;
      }
      unint64_t v100 = v98 + v94;
      if (v99 <= v100) {
        unint64_t v100 = 0;
      }
      *(void *)(a1 + 80) = v100;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v100) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v109, v7);
  if (!v111) {
    return 15;
  }
  unint64_t v9 = v109;
  unint64_t v10 = v110;
  unint64_t v11 = (v109 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v109;
  if (v11 >= v109)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v110)
    {
      *(_WORD *)(v109 + v12) = 1060;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v102 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v102 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v102 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v103 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v102)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v103 = v102;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v103 = v102;
  }
  unint64_t v32 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v32 >= v9 + v13;
  unint64_t v33 = v32 - (v9 + v13);
  if (v26)
  {
    unint64_t v104 = 0;
    unint64_t v34 = v33 + v13;
    if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= v103)
    {
      *(_DWORD *)(v9 + v34) = a2[4];
      unint64_t v104 = v103;
      unint64_t v13 = v34 + 4;
    }
  }
  else
  {
    unint64_t v104 = v103;
  }
  unint64_t v35 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v35 >= v9 + v13;
  unint64_t v36 = v35 - (v9 + v13);
  if (v26)
  {
    unint64_t v105 = 0;
    unint64_t v37 = v36 + v13;
    if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= v104)
    {
      *(_DWORD *)(v9 + v37) = a2[5];
      unint64_t v105 = v104;
      unint64_t v13 = v37 + 4;
    }
  }
  else
  {
    unint64_t v105 = v104;
  }
  unint64_t v38 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v38 >= v9 + v13;
  unint64_t v39 = v38 - (v9 + v13);
  if (v26)
  {
    unint64_t v106 = 0;
    unint64_t v40 = v39 + v13;
    if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= v105)
    {
      *(_DWORD *)(v9 + v40) = a2[6];
      unint64_t v106 = v105;
      unint64_t v13 = v40 + 4;
    }
  }
  else
  {
    unint64_t v106 = v105;
  }
  unint64_t v41 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v41 >= v9 + v13;
  unint64_t v42 = v41 - (v9 + v13);
  if (v26)
  {
    unint64_t v107 = 0;
    unint64_t v43 = v42 + v13;
    if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= v106)
    {
      *(_DWORD *)(v9 + v43) = a2[7];
      unint64_t v107 = v106;
      unint64_t v13 = v43 + 4;
    }
  }
  else
  {
    unint64_t v107 = v106;
  }
  unint64_t v44 = (void *)((v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v44 >= v9 + v13)
  {
    unint64_t v45 = (char *)v44 - v9;
    if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_68;
    }
    unint64_t v13 = (unint64_t)(v45 + 8);
    if ((unint64_t)(v45 + 8) > v107) {
      goto LABEL_68;
    }
    void *v44 = *((void *)a2 + 4);
  }
  if (v107)
  {
    unint64_t v46 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = *(void *)(a1 + 64);
    if (v46 + 16 >= v47) {
      unint64_t v46 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v48 = v46 + v13;
    if (v47 <= v48) {
      unint64_t v49 = 0;
    }
    else {
      unint64_t v49 = v48;
    }
    *(void *)(a1 + 80) = v49;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v49) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v50 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v50;
  }
LABEL_68:
  if (!v111)
  {
    __break(1u);
    goto LABEL_122;
  }
  unint64_t v51 = (v109 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v52 = v51 - v109;
  if (v51 < v109)
  {
    unint64_t v53 = 0;
  }
  else
  {
    unint64_t v53 = 0;
    if (v52 <= 0xFFFFFFFFFFFFFFFDLL && v52 + 2 <= v110)
    {
      *(_WORD *)(v109 + v52) = 2870;
      unint64_t v53 = v52 + 2;
    }
  }
  unint64_t v54 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v55 = *(void *)(a1 + 64);
  if (v54 + 16 >= v55) {
    unint64_t v54 = 0;
  }
  if (v53 <= 0x10) {
    unint64_t v53 = 16;
  }
  unint64_t v56 = v54 + v53;
  if (v55 <= v56) {
    unint64_t v56 = 0;
  }
  *(void *)(a1 + 80) = v56;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v56);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v108, (uint64_t **)(a1 + 8));
  unint64_t v57 = v108;
  unint64_t v58 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v58 = 1060;
  *((void *)v58 + 1) = a3;
  *((void *)v58 + 66) = (char *)v58 + 16;
  *((void *)v58 + 67) = 512;
  *((void *)v58 + 68) = 0;
  *((void *)v58 + 70) = 0;
  *((void *)v58 + 69) = 0;
  IPC::Encoder::encodeHeader(v58);
  v112 = v58;
  int v59 = *a2;
  unint64_t v60 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v61 <= 3)
  {
LABEL_122:
    __break(0xC471u);
    JUMPOUT(0x19908FDECLL);
  }
  _DWORD *v60 = v59;
  int v62 = a2[1];
  unint64_t v63 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v64 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908FE0CLL);
  }
  *unint64_t v63 = v62;
  int v65 = a2[2];
  unint64_t v66 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v67 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908FE2CLL);
  }
  _DWORD *v66 = v65;
  int v68 = a2[3];
  unint64_t v69 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v70 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908FE4CLL);
  }
  *unint64_t v69 = v68;
  int v71 = a2[4];
  unint64_t v72 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v73 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908FE6CLL);
  }
  _DWORD *v72 = v71;
  int v74 = a2[5];
  unint64_t v75 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v76 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908FE8CLL);
  }
  _DWORD *v75 = v74;
  int v77 = a2[6];
  unint64_t v78 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v79 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908FEACLL);
  }
  _DWORD *v78 = v77;
  int v80 = a2[7];
  unint64_t v81 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v82 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19908FECCLL);
  }
  _DWORD *v81 = v80;
  uint64_t v83 = *((void *)a2 + 4);
  unint64_t v84 = (void *)IPC::Encoder::grow(v58, 8uLL, 8);
  if (v85 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x19908FEECLL);
  }
  void *v84 = v83;
  uint64_t v50 = IPC::Connection::sendMessageImpl((uint64_t)v57, (uint64_t *)&v112, 1, 0);
  unint64_t v87 = v112;
  v112 = 0;
  if (v87)
  {
    IPC::Encoder::~Encoder(v87, v86);
    WTF::fastFree(v88, v89);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v108);
  return v50;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexImage2D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, const void ***a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v89, v7);
    if (!(_BYTE)v91) {
      return 15;
    }
    int v74 = v89;
    unint64_t v73 = v90;
    unint64_t v75 = ((unint64_t)v89 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v76 = v75 - (void)v89;
    if (v75 >= (unint64_t)v89)
    {
      unint64_t v77 = v76 + 2;
      if (v76 <= 0xFFFFFFFFFFFFFFFDLL && v77 <= v90)
      {
        *(_WORD *)((char *)v89 + v76) = 2871;
        goto LABEL_84;
      }
      unint64_t v73 = 0;
    }
    unint64_t v77 = 0;
LABEL_84:
    unint64_t v79 = (char *)(((unint64_t)v74 + v77 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v79 >= (char *)v74 + v77)
    {
      unint64_t v77 = v79 - (char *)v74 + 8;
      if ((unint64_t)(v79 - (char *)v74) > 0xFFFFFFFFFFFFFFF7 || v77 > v73) {
        return 17;
      }
      *(void *)unint64_t v79 = a3;
    }
    if (v73)
    {
      unint64_t v81 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v82 = *(void *)(a1 + 64);
      if (v81 + 16 >= v82) {
        unint64_t v81 = 0;
      }
      if (v77 <= 0x10) {
        unint64_t v77 = 16;
      }
      unint64_t v83 = v81 + v77;
      if (v82 <= v83) {
        unint64_t v83 = 0;
      }
      *(void *)(a1 + 80) = v83;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v83) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v86, v7);
  if (!v88) {
    return 15;
  }
  unint64_t v9 = v86;
  unint64_t v10 = v87;
  unint64_t v89 = v86;
  unint64_t v90 = v87;
  unint64_t v91 = 0;
  unint64_t v11 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v86;
  if (v11 < (unint64_t)v86)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v87)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v90 = 0;
    }
    else
    {
      *(_WORD *)((char *)v86 + v12) = 944;
      unint64_t v91 = v12 + 2;
    }
  }
  unint64_t v15 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - ((void)v9 + v13);
  if (v15 >= (unint64_t)v9 + v13)
  {
    unint64_t v17 = v15 - (void)v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v90 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v17) = *(_DWORD *)a2;
      unint64_t v91 = v18;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - ((void)v9 + v13);
  if (v20 >= (unint64_t)v9 + v13)
  {
    unint64_t v22 = v20 - (void)v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v90 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v22) = *((_DWORD *)a2 + 1);
      unint64_t v91 = v23;
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v25 >= (char *)v9 + v13)
  {
    BOOL v26 = (char *)(v25 - (char *)v9);
    if ((unint64_t)(v25 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v26 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v90 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v25 = *((_DWORD *)a2 + 2);
      unint64_t v91 = (unint64_t)(v26 + 4);
      unint64_t v13 = (unint64_t)(v26 + 4);
    }
  }
  unint64_t v27 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v27 >= (char *)v9 + v13)
  {
    unint64_t v28 = (char *)(v27 - (char *)v9);
    if ((unint64_t)(v27 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v28 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v90 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v27 = *((_DWORD *)a2 + 3);
      unint64_t v91 = (unint64_t)(v28 + 4);
      unint64_t v13 = (unint64_t)(v28 + 4);
    }
  }
  unint64_t v29 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v29 >= (char *)v9 + v13)
  {
    unint64_t v30 = (char *)(v29 - (char *)v9);
    if ((unint64_t)(v29 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v30 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v90 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v29 = *((_DWORD *)a2 + 4);
      unint64_t v91 = (unint64_t)(v30 + 4);
      unint64_t v13 = (unint64_t)(v30 + 4);
    }
  }
  unint64_t v31 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v31 >= (char *)v9 + v13)
  {
    unint64_t v32 = (char *)(v31 - (char *)v9);
    if ((unint64_t)(v31 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v32 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v90 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v31 = *((_DWORD *)a2 + 5);
      unint64_t v91 = (unint64_t)(v32 + 4);
      unint64_t v13 = (unint64_t)(v32 + 4);
    }
  }
  unint64_t v33 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v33 >= (char *)v9 + v13)
  {
    unint64_t v34 = (char *)(v33 - (char *)v9);
    if ((unint64_t)(v33 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > v10)
    {
      unint64_t v90 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v33 = *((_DWORD *)a2 + 6);
      unint64_t v91 = (unint64_t)(v34 + 4);
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v89, *a2[4], (size_t)a2[4][1]);
  if (v90)
  {
    uint64_t v35 = v91;
    unint64_t v36 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v37 = *(void *)(a1 + 64);
    if (v36 + 16 >= v37) {
      unint64_t v36 = 0;
    }
    if (v91 <= 0x10) {
      uint64_t v35 = 16;
    }
    unint64_t v38 = v36 + v35;
    if (v37 <= v38) {
      unint64_t v38 = 0;
    }
    *(void *)(a1 + 80) = v38;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v38) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  if (!v88)
  {
    __break(1u);
    goto LABEL_109;
  }
  unint64_t v40 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v41 = v40 - (void)v86;
  if (v40 < (unint64_t)v86)
  {
    unint64_t v42 = 0;
  }
  else
  {
    unint64_t v42 = 0;
    if (v41 <= 0xFFFFFFFFFFFFFFFDLL && v41 + 2 <= v87)
    {
      *(_WORD *)((char *)v86 + v41) = 2870;
      unint64_t v42 = v41 + 2;
    }
  }
  unint64_t v43 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v44 = *(void *)(a1 + 64);
  if (v43 + 16 >= v44) {
    unint64_t v43 = 0;
  }
  if (v42 <= 0x10) {
    unint64_t v42 = 16;
  }
  unint64_t v45 = v43 + v42;
  if (v44 <= v45) {
    unint64_t v45 = 0;
  }
  *(void *)(a1 + 80) = v45;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v45);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v85, (uint64_t **)(a1 + 8));
  unint64_t v46 = v85;
  unint64_t v47 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v47 = 944;
  *((void *)v47 + 1) = a3;
  *((void *)v47 + 66) = (char *)v47 + 16;
  *((void *)v47 + 67) = 512;
  *((void *)v47 + 68) = 0;
  *((void *)v47 + 70) = 0;
  *((void *)v47 + 69) = 0;
  IPC::Encoder::encodeHeader(v47);
  unint64_t v89 = v47;
  int v48 = *(_DWORD *)a2;
  unint64_t v49 = (_DWORD *)IPC::Encoder::grow(v47, 4uLL, 4);
  if (v50 <= 3)
  {
LABEL_109:
    __break(0xC471u);
    JUMPOUT(0x19909059CLL);
  }
  *unint64_t v49 = v48;
  int v51 = *((_DWORD *)a2 + 1);
  unint64_t v52 = (_DWORD *)IPC::Encoder::grow(v47, 4uLL, 4);
  if (v53 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990905BCLL);
  }
  *unint64_t v52 = v51;
  int v54 = *((_DWORD *)a2 + 2);
  unint64_t v55 = (_DWORD *)IPC::Encoder::grow(v47, 4uLL, 4);
  if (v56 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990905DCLL);
  }
  *unint64_t v55 = v54;
  int v57 = *((_DWORD *)a2 + 3);
  unint64_t v58 = (_DWORD *)IPC::Encoder::grow(v47, 4uLL, 4);
  if (v59 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990905FCLL);
  }
  *unint64_t v58 = v57;
  int v60 = *((_DWORD *)a2 + 4);
  unint64_t v61 = (_DWORD *)IPC::Encoder::grow(v47, 4uLL, 4);
  if (v62 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909061CLL);
  }
  _DWORD *v61 = v60;
  int v63 = *((_DWORD *)a2 + 5);
  unint64_t v64 = (_DWORD *)IPC::Encoder::grow(v47, 4uLL, 4);
  if (v65 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909063CLL);
  }
  *unint64_t v64 = v63;
  int v66 = *((_DWORD *)a2 + 6);
  unint64_t v67 = (_DWORD *)IPC::Encoder::grow(v47, 4uLL, 4);
  if (v68 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909065CLL);
  }
  _DWORD *v67 = v66;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v47, *a2[4], (size_t)a2[4][1]);
  uint64_t v39 = IPC::Connection::sendMessageImpl((uint64_t)v46, (uint64_t *)&v89, 1, 0);
  unint64_t v70 = v89;
  unint64_t v89 = 0;
  if (v70)
  {
    IPC::Encoder::~Encoder(v70, v69);
    WTF::fastFree(v71, v72);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v85);
  return v39;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexImage2D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v102, v7);
    if (!v104) {
      return 15;
    }
    unint64_t v86 = v102;
    unint64_t v85 = v103;
    unint64_t v87 = (v102 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v88 = v87 - v102;
    if (v87 >= v102)
    {
      unint64_t v89 = v88 + 2;
      if (v88 <= 0xFFFFFFFFFFFFFFFDLL && v89 <= v103)
      {
        *(_WORD *)(v102 + v88) = 2871;
        goto LABEL_94;
      }
      unint64_t v85 = 0;
    }
    unint64_t v89 = 0;
LABEL_94:
    unint64_t v91 = (void *)((v86 + v89 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v91 >= v86 + v89)
    {
      unint64_t v89 = (unint64_t)v91 - v86 + 8;
      if ((unint64_t)v91 - v86 > 0xFFFFFFFFFFFFFFF7 || v89 > v85) {
        return 17;
      }
      void *v91 = a3;
    }
    if (v85)
    {
      unint64_t v93 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v94 = *(void *)(a1 + 64);
      if (v93 + 16 >= v94) {
        unint64_t v93 = 0;
      }
      if (v89 <= 0x10) {
        unint64_t v89 = 16;
      }
      unint64_t v95 = v93 + v89;
      if (v94 <= v95) {
        unint64_t v95 = 0;
      }
      *(void *)(a1 + 80) = v95;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v95) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v102, v7);
  if (!v104) {
    return 15;
  }
  unint64_t v9 = v102;
  unint64_t v10 = v103;
  unint64_t v11 = (v102 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v102;
  if (v11 >= v102)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v103)
    {
      *(_WORD *)(v102 + v12) = 945;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v100 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v100 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v100 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v97 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v100)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v97 = v100;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v97 = v100;
  }
  unint64_t v32 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v32 >= v9 + v13;
  unint64_t v33 = v32 - (v9 + v13);
  if (v26)
  {
    unint64_t v98 = 0;
    unint64_t v34 = v33 + v13;
    if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= v97)
    {
      *(_DWORD *)(v9 + v34) = a2[4];
      unint64_t v98 = v97;
      unint64_t v13 = v34 + 4;
    }
  }
  else
  {
    unint64_t v98 = v97;
  }
  unint64_t v35 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v36 = v35 - (v9 + v13);
  if (v35 < v9 + v13)
  {
    unint64_t v37 = v98;
  }
  else
  {
    unint64_t v37 = 0;
    unint64_t v38 = v36 + v13;
    if (v38 <= 0xFFFFFFFFFFFFFFFBLL && v38 + 4 <= v98)
    {
      *(_DWORD *)(v9 + v38) = a2[5];
      unint64_t v37 = v98;
      unint64_t v13 = v38 + 4;
    }
  }
  unint64_t v39 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v39 >= v9 + v13;
  unint64_t v40 = v39 - (v9 + v13);
  if (v26)
  {
    unint64_t v99 = 0;
    unint64_t v41 = v40 + v13;
    if (v41 <= 0xFFFFFFFFFFFFFFFBLL && v41 + 4 <= v37)
    {
      *(_DWORD *)(v9 + v41) = a2[6];
      unint64_t v99 = v37;
      unint64_t v13 = v41 + 4;
    }
  }
  else
  {
    unint64_t v99 = v37;
  }
  unint64_t v42 = (void *)((v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v42 >= v9 + v13)
  {
    unint64_t v43 = (char *)v42 - v9;
    if ((unint64_t)v42 - v9 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_62;
    }
    unint64_t v13 = (unint64_t)(v43 + 8);
    if ((unint64_t)(v43 + 8) > v99) {
      goto LABEL_62;
    }
    *unint64_t v42 = *((void *)a2 + 4);
  }
  if (v99)
  {
    unint64_t v44 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v45 = *(void *)(a1 + 64);
    if (v44 + 16 >= v45) {
      unint64_t v44 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v46 = v44 + v13;
    if (v45 <= v46) {
      unint64_t v47 = 0;
    }
    else {
      unint64_t v47 = v46;
    }
    *(void *)(a1 + 80) = v47;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v47) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v48 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v48;
  }
LABEL_62:
  if (!v104)
  {
    __break(1u);
    goto LABEL_115;
  }
  unint64_t v49 = (v102 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v50 = v49 - v102;
  if (v49 < v102)
  {
    unint64_t v51 = 0;
  }
  else
  {
    unint64_t v51 = 0;
    if (v50 <= 0xFFFFFFFFFFFFFFFDLL && v50 + 2 <= v103)
    {
      *(_WORD *)(v102 + v50) = 2870;
      unint64_t v51 = v50 + 2;
    }
  }
  unint64_t v52 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v53 = *(void *)(a1 + 64);
  if (v52 + 16 >= v53) {
    unint64_t v52 = 0;
  }
  if (v51 <= 0x10) {
    unint64_t v51 = 16;
  }
  unint64_t v54 = v52 + v51;
  if (v53 <= v54) {
    unint64_t v54 = 0;
  }
  *(void *)(a1 + 80) = v54;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v54);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v101, (uint64_t **)(a1 + 8));
  unint64_t v55 = v101;
  unint64_t v56 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v56 = 945;
  *((void *)v56 + 1) = a3;
  *((void *)v56 + 66) = (char *)v56 + 16;
  *((void *)v56 + 67) = 512;
  *((void *)v56 + 68) = 0;
  *((void *)v56 + 70) = 0;
  *((void *)v56 + 69) = 0;
  IPC::Encoder::encodeHeader(v56);
  unint64_t v105 = v56;
  int v57 = *a2;
  unint64_t v58 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v59 <= 3)
  {
LABEL_115:
    __break(0xC471u);
    JUMPOUT(0x199090CD8);
  }
  *unint64_t v58 = v57;
  int v60 = a2[1];
  unint64_t v61 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v62 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199090CF8);
  }
  _DWORD *v61 = v60;
  int v63 = a2[2];
  unint64_t v64 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v65 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199090D18);
  }
  *unint64_t v64 = v63;
  int v66 = a2[3];
  unint64_t v67 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v68 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199090D38);
  }
  _DWORD *v67 = v66;
  int v69 = a2[4];
  unint64_t v70 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v71 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199090D58);
  }
  *unint64_t v70 = v69;
  int v72 = a2[5];
  unint64_t v73 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v74 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199090D78);
  }
  *unint64_t v73 = v72;
  int v75 = a2[6];
  unint64_t v76 = (_DWORD *)IPC::Encoder::grow(v56, 4uLL, 4);
  if (v77 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199090D98);
  }
  *unint64_t v76 = v75;
  uint64_t v78 = *((void *)a2 + 4);
  unint64_t v79 = (void *)IPC::Encoder::grow(v56, 8uLL, 8);
  if (v80 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x199090DB8);
  }
  *unint64_t v79 = v78;
  uint64_t v48 = IPC::Connection::sendMessageImpl((uint64_t)v55, (uint64_t *)&v105, 1, 0);
  unint64_t v82 = v105;
  unint64_t v105 = 0;
  if (v82)
  {
    IPC::Encoder::~Encoder(v82, v81);
    WTF::fastFree(v83, v84);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v101);
  return v48;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage2D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, const void ***a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v94, v7);
    if (!(_BYTE)v96) {
      return 15;
    }
    unint64_t v79 = v94;
    unint64_t v78 = v95;
    unint64_t v80 = ((unint64_t)v94 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v81 = v80 - (void)v94;
    if (v80 >= (unint64_t)v94)
    {
      unint64_t v82 = v81 + 2;
      if (v81 <= 0xFFFFFFFFFFFFFFFDLL && v82 <= v95)
      {
        *(_WORD *)((char *)v94 + v81) = 2871;
        goto LABEL_89;
      }
      unint64_t v78 = 0;
    }
    unint64_t v82 = 0;
LABEL_89:
    unint64_t v84 = (char *)(((unint64_t)v79 + v82 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v84 >= (char *)v79 + v82)
    {
      unint64_t v82 = v84 - (char *)v79 + 8;
      if ((unint64_t)(v84 - (char *)v79) > 0xFFFFFFFFFFFFFFF7 || v82 > v78) {
        return 17;
      }
      *(void *)unint64_t v84 = a3;
    }
    if (v78)
    {
      unint64_t v86 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v87 = *(void *)(a1 + 64);
      if (v86 + 16 >= v87) {
        unint64_t v86 = 0;
      }
      if (v82 <= 0x10) {
        unint64_t v82 = 16;
      }
      unint64_t v88 = v86 + v82;
      if (v87 <= v88) {
        unint64_t v88 = 0;
      }
      *(void *)(a1 + 80) = v88;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v88) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v91, v7);
  if (!v93) {
    return 15;
  }
  unint64_t v9 = v91;
  unint64_t v10 = v92;
  unint64_t v94 = v91;
  unint64_t v95 = v92;
  unint64_t v96 = 0;
  unint64_t v11 = ((unint64_t)v91 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v91;
  if (v11 < (unint64_t)v91)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v92)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_WORD *)((char *)v91 + v12) = 948;
      unint64_t v96 = v12 + 2;
    }
  }
  unint64_t v15 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - ((void)v9 + v13);
  if (v15 >= (unint64_t)v9 + v13)
  {
    unint64_t v17 = v15 - (void)v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v17) = *(_DWORD *)a2;
      unint64_t v96 = v18;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - ((void)v9 + v13);
  if (v20 >= (unint64_t)v9 + v13)
  {
    unint64_t v22 = v20 - (void)v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v22) = *((_DWORD *)a2 + 1);
      unint64_t v96 = v23;
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v25 >= (char *)v9 + v13)
  {
    BOOL v26 = (char *)(v25 - (char *)v9);
    if ((unint64_t)(v25 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v26 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v25 = *((_DWORD *)a2 + 2);
      unint64_t v96 = (unint64_t)(v26 + 4);
      unint64_t v13 = (unint64_t)(v26 + 4);
    }
  }
  unint64_t v27 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v27 >= (char *)v9 + v13)
  {
    unint64_t v28 = (char *)(v27 - (char *)v9);
    if ((unint64_t)(v27 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v28 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v27 = *((_DWORD *)a2 + 3);
      unint64_t v96 = (unint64_t)(v28 + 4);
      unint64_t v13 = (unint64_t)(v28 + 4);
    }
  }
  unint64_t v29 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v29 >= (char *)v9 + v13)
  {
    unint64_t v30 = (char *)(v29 - (char *)v9);
    if ((unint64_t)(v29 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v30 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v29 = *((_DWORD *)a2 + 4);
      unint64_t v96 = (unint64_t)(v30 + 4);
      unint64_t v13 = (unint64_t)(v30 + 4);
    }
  }
  unint64_t v31 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v31 >= (char *)v9 + v13)
  {
    unint64_t v32 = (char *)(v31 - (char *)v9);
    if ((unint64_t)(v31 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v32 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v31 = *((_DWORD *)a2 + 5);
      unint64_t v96 = (unint64_t)(v32 + 4);
      unint64_t v13 = (unint64_t)(v32 + 4);
    }
  }
  unint64_t v33 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v33 >= (char *)v9 + v13)
  {
    unint64_t v34 = (char *)(v33 - (char *)v9);
    if ((unint64_t)(v33 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v33 = *((_DWORD *)a2 + 6);
      unint64_t v96 = (unint64_t)(v34 + 4);
      unint64_t v13 = (unint64_t)(v34 + 4);
    }
  }
  unint64_t v35 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v35 >= (char *)v9 + v13)
  {
    unint64_t v36 = (char *)(v35 - (char *)v9);
    if ((unint64_t)(v35 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v36 + 4) > v10)
    {
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v35 = *((_DWORD *)a2 + 7);
      unint64_t v96 = (unint64_t)(v36 + 4);
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v94, *a2[4], (size_t)a2[4][1]);
  if (v95)
  {
    uint64_t v37 = v96;
    unint64_t v38 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v39 = *(void *)(a1 + 64);
    if (v38 + 16 >= v39) {
      unint64_t v38 = 0;
    }
    if (v96 <= 0x10) {
      uint64_t v37 = 16;
    }
    unint64_t v40 = v38 + v37;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *(void *)(a1 + 80) = v40;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v40) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  if (!v93)
  {
    __break(1u);
    goto LABEL_115;
  }
  unint64_t v42 = ((unint64_t)v91 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = v42 - (void)v91;
  if (v42 < (unint64_t)v91)
  {
    unint64_t v44 = 0;
  }
  else
  {
    unint64_t v44 = 0;
    if (v43 <= 0xFFFFFFFFFFFFFFFDLL && v43 + 2 <= v92)
    {
      *(_WORD *)((char *)v91 + v43) = 2870;
      unint64_t v44 = v43 + 2;
    }
  }
  unint64_t v45 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v46 = *(void *)(a1 + 64);
  if (v45 + 16 >= v46) {
    unint64_t v45 = 0;
  }
  if (v44 <= 0x10) {
    unint64_t v44 = 16;
  }
  unint64_t v47 = v45 + v44;
  if (v46 <= v47) {
    unint64_t v47 = 0;
  }
  *(void *)(a1 + 80) = v47;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v47);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v90, (uint64_t **)(a1 + 8));
  uint64_t v48 = v90;
  unint64_t v49 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v49 = 948;
  *((void *)v49 + 1) = a3;
  *((void *)v49 + 66) = (char *)v49 + 16;
  *((void *)v49 + 67) = 512;
  *((void *)v49 + 68) = 0;
  *((void *)v49 + 70) = 0;
  *((void *)v49 + 69) = 0;
  IPC::Encoder::encodeHeader(v49);
  unint64_t v94 = v49;
  int v50 = *(_DWORD *)a2;
  unint64_t v51 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v52 <= 3)
  {
LABEL_115:
    __break(0xC471u);
    JUMPOUT(0x1990914C8);
  }
  *unint64_t v51 = v50;
  int v53 = *((_DWORD *)a2 + 1);
  unint64_t v54 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990914E8);
  }
  _DWORD *v54 = v53;
  int v56 = *((_DWORD *)a2 + 2);
  int v57 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v58 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199091508);
  }
  *int v57 = v56;
  int v59 = *((_DWORD *)a2 + 3);
  int v60 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v61 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199091528);
  }
  _DWORD *v60 = v59;
  int v62 = *((_DWORD *)a2 + 4);
  int v63 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v64 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199091548);
  }
  *int v63 = v62;
  int v65 = *((_DWORD *)a2 + 5);
  int v66 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v67 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199091568);
  }
  _DWORD *v66 = v65;
  int v68 = *((_DWORD *)a2 + 6);
  int v69 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v70 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199091588);
  }
  *int v69 = v68;
  int v71 = *((_DWORD *)a2 + 7);
  int v72 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v73 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990915A8);
  }
  _DWORD *v72 = v71;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v49, *a2[4], (size_t)a2[4][1]);
  uint64_t v41 = IPC::Connection::sendMessageImpl((uint64_t)v48, (uint64_t *)&v94, 1, 0);
  int v75 = v94;
  unint64_t v94 = 0;
  if (v75)
  {
    IPC::Encoder::~Encoder(v75, v74);
    WTF::fastFree(v76, v77);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v90);
  return v41;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage2D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v109, v7);
    if (!v111) {
      return 15;
    }
    unint64_t v91 = v109;
    unint64_t v90 = v110;
    unint64_t v92 = (v109 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v93 = v92 - v109;
    if (v92 >= v109)
    {
      unint64_t v94 = v93 + 2;
      if (v93 <= 0xFFFFFFFFFFFFFFFDLL && v94 <= v110)
      {
        *(_WORD *)(v109 + v93) = 2871;
        goto LABEL_101;
      }
      unint64_t v90 = 0;
    }
    unint64_t v94 = 0;
LABEL_101:
    unint64_t v96 = (void *)((v91 + v94 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v96 >= v91 + v94)
    {
      unint64_t v94 = (unint64_t)v96 - v91 + 8;
      if ((unint64_t)v96 - v91 > 0xFFFFFFFFFFFFFFF7 || v94 > v90) {
        return 17;
      }
      *unint64_t v96 = a3;
    }
    if (v90)
    {
      unint64_t v98 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v99 = *(void *)(a1 + 64);
      if (v98 + 16 >= v99) {
        unint64_t v98 = 0;
      }
      if (v94 <= 0x10) {
        unint64_t v94 = 16;
      }
      unint64_t v100 = v98 + v94;
      if (v99 <= v100) {
        unint64_t v100 = 0;
      }
      *(void *)(a1 + 80) = v100;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v100) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v109, v7);
  if (!v111) {
    return 15;
  }
  unint64_t v9 = v109;
  unint64_t v10 = v110;
  unint64_t v11 = (v109 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v109;
  if (v11 >= v109)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v110)
    {
      *(_WORD *)(v109 + v12) = 949;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v102 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v102 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v102 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v103 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v102)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v103 = v102;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v103 = v102;
  }
  unint64_t v32 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v32 >= v9 + v13;
  unint64_t v33 = v32 - (v9 + v13);
  if (v26)
  {
    unint64_t v104 = 0;
    unint64_t v34 = v33 + v13;
    if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= v103)
    {
      *(_DWORD *)(v9 + v34) = a2[4];
      unint64_t v104 = v103;
      unint64_t v13 = v34 + 4;
    }
  }
  else
  {
    unint64_t v104 = v103;
  }
  unint64_t v35 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v35 >= v9 + v13;
  unint64_t v36 = v35 - (v9 + v13);
  if (v26)
  {
    unint64_t v105 = 0;
    unint64_t v37 = v36 + v13;
    if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= v104)
    {
      *(_DWORD *)(v9 + v37) = a2[5];
      unint64_t v105 = v104;
      unint64_t v13 = v37 + 4;
    }
  }
  else
  {
    unint64_t v105 = v104;
  }
  unint64_t v38 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v38 >= v9 + v13;
  unint64_t v39 = v38 - (v9 + v13);
  if (v26)
  {
    unint64_t v107 = 0;
    unint64_t v40 = v39 + v13;
    if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= v105)
    {
      *(_DWORD *)(v9 + v40) = a2[6];
      unint64_t v107 = v105;
      unint64_t v13 = v40 + 4;
    }
  }
  else
  {
    unint64_t v107 = v105;
  }
  unint64_t v41 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v41 >= v9 + v13;
  unint64_t v42 = v41 - (v9 + v13);
  if (v26)
  {
    unint64_t v106 = 0;
    unint64_t v43 = v42 + v13;
    if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= v107)
    {
      *(_DWORD *)(v9 + v43) = a2[7];
      unint64_t v106 = v107;
      unint64_t v13 = v43 + 4;
    }
  }
  else
  {
    unint64_t v106 = v107;
  }
  unint64_t v44 = (void *)((v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v44 >= v9 + v13)
  {
    unint64_t v45 = (char *)v44 - v9;
    if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_68;
    }
    unint64_t v13 = (unint64_t)(v45 + 8);
    if ((unint64_t)(v45 + 8) > v106) {
      goto LABEL_68;
    }
    void *v44 = *((void *)a2 + 4);
  }
  if (v106)
  {
    unint64_t v46 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = *(void *)(a1 + 64);
    if (v46 + 16 >= v47) {
      unint64_t v46 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v48 = v46 + v13;
    if (v47 <= v48) {
      unint64_t v49 = 0;
    }
    else {
      unint64_t v49 = v48;
    }
    *(void *)(a1 + 80) = v49;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v49) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v50 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v50;
  }
LABEL_68:
  if (!v111)
  {
    __break(1u);
    goto LABEL_122;
  }
  unint64_t v51 = (v109 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v52 = v51 - v109;
  if (v51 < v109)
  {
    unint64_t v53 = 0;
  }
  else
  {
    unint64_t v53 = 0;
    if (v52 <= 0xFFFFFFFFFFFFFFFDLL && v52 + 2 <= v110)
    {
      *(_WORD *)(v109 + v52) = 2870;
      unint64_t v53 = v52 + 2;
    }
  }
  unint64_t v54 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v55 = *(void *)(a1 + 64);
  if (v54 + 16 >= v55) {
    unint64_t v54 = 0;
  }
  if (v53 <= 0x10) {
    unint64_t v53 = 16;
  }
  unint64_t v56 = v54 + v53;
  if (v55 <= v56) {
    unint64_t v56 = 0;
  }
  *(void *)(a1 + 80) = v56;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v56);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v108, (uint64_t **)(a1 + 8));
  int v57 = v108;
  unint64_t v58 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v58 = 949;
  *((void *)v58 + 1) = a3;
  *((void *)v58 + 66) = (char *)v58 + 16;
  *((void *)v58 + 67) = 512;
  *((void *)v58 + 68) = 0;
  *((void *)v58 + 70) = 0;
  *((void *)v58 + 69) = 0;
  IPC::Encoder::encodeHeader(v58);
  v112 = v58;
  int v59 = *a2;
  int v60 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v61 <= 3)
  {
LABEL_122:
    __break(0xC471u);
    JUMPOUT(0x199091C84);
  }
  _DWORD *v60 = v59;
  int v62 = a2[1];
  int v63 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v64 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199091CA4);
  }
  *int v63 = v62;
  int v65 = a2[2];
  int v66 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v67 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199091CC4);
  }
  _DWORD *v66 = v65;
  int v68 = a2[3];
  int v69 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v70 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199091CE4);
  }
  *int v69 = v68;
  int v71 = a2[4];
  int v72 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v73 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199091D04);
  }
  _DWORD *v72 = v71;
  int v74 = a2[5];
  int v75 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v76 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199091D24);
  }
  _DWORD *v75 = v74;
  int v77 = a2[6];
  unint64_t v78 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v79 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199091D44);
  }
  _DWORD *v78 = v77;
  int v80 = a2[7];
  unint64_t v81 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v82 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199091D64);
  }
  _DWORD *v81 = v80;
  uint64_t v83 = *((void *)a2 + 4);
  unint64_t v84 = (void *)IPC::Encoder::grow(v58, 8uLL, 8);
  if (v85 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x199091D84);
  }
  void *v84 = v83;
  uint64_t v50 = IPC::Connection::sendMessageImpl((uint64_t)v57, (uint64_t *)&v112, 1, 0);
  unint64_t v87 = v112;
  v112 = 0;
  if (v87)
  {
    IPC::Encoder::~Encoder(v87, v86);
    WTF::fastFree(v88, v89);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v108);
  return v50;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawArraysInstanced,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v74, v7);
    if (!v76) {
      return 15;
    }
    unint64_t v61 = v74;
    unint64_t v60 = v75;
    unint64_t v62 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v63 = v62 - v74;
    if (v62 >= v74)
    {
      unint64_t v64 = v63 + 2;
      if (v63 <= 0xFFFFFFFFFFFFFFFDLL && v64 <= v75)
      {
        *(_WORD *)(v74 + v63) = 2871;
        goto LABEL_70;
      }
      unint64_t v60 = 0;
    }
    unint64_t v64 = 0;
LABEL_70:
    int v66 = (void *)((v61 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v66 >= v61 + v64)
    {
      unint64_t v64 = (unint64_t)v66 - v61 + 8;
      if ((unint64_t)v66 - v61 > 0xFFFFFFFFFFFFFFF7 || v64 > v60) {
        return 17;
      }
      void *v66 = a3;
    }
    if (v60)
    {
      unint64_t v68 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v69 = *(void *)(a1 + 64);
      if (v68 + 16 >= v69) {
        unint64_t v68 = 0;
      }
      if (v64 <= 0x10) {
        unint64_t v64 = 16;
      }
      unint64_t v70 = v68 + v64;
      if (v69 <= v70) {
        unint64_t v70 = 0;
      }
      *(void *)(a1 + 80) = v70;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v70) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v74, v7);
  if (!v76) {
    return 15;
  }
  unint64_t v9 = v74;
  unint64_t v10 = v75;
  unint64_t v11 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v74;
  if (v11 >= v74)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v75)
    {
      *(_WORD *)(v74 + v12) = 989;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v72 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v72 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v72 = v10;
  }
  unint64_t v29 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v29 >= v9 + v13)
  {
    unint64_t v30 = (char *)v29 - v9;
    if ((unint64_t)v29 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_42;
    }
    unint64_t v13 = (unint64_t)(v30 + 4);
    if ((unint64_t)(v30 + 4) > v72) {
      goto LABEL_42;
    }
    *unint64_t v29 = a2[3];
  }
  if (v72)
  {
    uint64_t v31 = *(void *)(a1 + 72);
    unint64_t v32 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v33 = *(void *)(a1 + 64);
    if (v32 + 16 >= v33) {
      unint64_t v32 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v34 = v32 + v13;
    if (v33 <= v34) {
      unint64_t v34 = 0;
    }
    *(void *)(a1 + 80) = v34;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v31 + 16) + 128), v34) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v35 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v35;
  }
LABEL_42:
  if (!v76)
  {
    __break(1u);
    goto LABEL_91;
  }
  unint64_t v36 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - v74;
  if (v36 < v74)
  {
    unint64_t v38 = 0;
  }
  else
  {
    unint64_t v38 = 0;
    if (v37 <= 0xFFFFFFFFFFFFFFFDLL && v37 + 2 <= v75)
    {
      *(_WORD *)(v74 + v37) = 2870;
      unint64_t v38 = v37 + 2;
    }
  }
  unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(a1 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v38 <= 0x10) {
    unint64_t v38 = 16;
  }
  unint64_t v41 = v39 + v38;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(a1 + 80) = v41;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)(a1 + 8));
  unint64_t v42 = v73;
  unint64_t v43 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v43 = 989;
  *((void *)v43 + 1) = a3;
  *((void *)v43 + 66) = (char *)v43 + 16;
  *((void *)v43 + 67) = 512;
  *((void *)v43 + 68) = 0;
  *((void *)v43 + 70) = 0;
  *((void *)v43 + 69) = 0;
  IPC::Encoder::encodeHeader(v43);
  int v77 = v43;
  int v44 = *a2;
  unint64_t v45 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v46 <= 3)
  {
LABEL_91:
    __break(0xC471u);
    JUMPOUT(0x1990922A4);
  }
  *unint64_t v45 = v44;
  int v47 = a2[1];
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v49 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990922C4);
  }
  *unint64_t v48 = v47;
  int v50 = a2[2];
  unint64_t v51 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990922E4);
  }
  *unint64_t v51 = v50;
  int v53 = a2[3];
  unint64_t v54 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199092304);
  }
  _DWORD *v54 = v53;
  uint64_t v35 = IPC::Connection::sendMessageImpl((uint64_t)v42, (uint64_t *)&v77, 1, 0);
  int v57 = v77;
  int v77 = 0;
  if (v57)
  {
    IPC::Encoder::~Encoder(v57, v56);
    WTF::fastFree(v58, v59);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
  return v35;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawElementsInstanced,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
    if (!v83) {
      return 15;
    }
    unint64_t v67 = v81;
    unint64_t v66 = v82;
    unint64_t v68 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v69 = v68 - v81;
    if (v68 >= v81)
    {
      unint64_t v70 = v69 + 2;
      if (v69 <= 0xFFFFFFFFFFFFFFFDLL && v70 <= v82)
      {
        *(_WORD *)(v81 + v69) = 2871;
        goto LABEL_77;
      }
      unint64_t v66 = 0;
    }
    unint64_t v70 = 0;
LABEL_77:
    unint64_t v72 = (void *)((v67 + v70 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v72 >= v67 + v70)
    {
      unint64_t v70 = (unint64_t)v72 - v67 + 8;
      if ((unint64_t)v72 - v67 > 0xFFFFFFFFFFFFFFF7 || v70 > v66) {
        return 17;
      }
      void *v72 = a3;
    }
    if (v66)
    {
      unint64_t v74 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v75 = *(void *)(a1 + 64);
      if (v74 + 16 >= v75) {
        unint64_t v74 = 0;
      }
      if (v70 <= 0x10) {
        unint64_t v70 = 16;
      }
      unint64_t v76 = v74 + v70;
      if (v75 <= v76) {
        unint64_t v76 = 0;
      }
      *(void *)(a1 + 80) = v76;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v76) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
  if (!v83) {
    return 15;
  }
  unint64_t v9 = v81;
  unint64_t v10 = v82;
  unint64_t v11 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v81;
  if (v11 >= v81)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v82)
    {
      *(_WORD *)(v81 + v12) = 994;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v79 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v79 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v79 = v10;
  }
  unint64_t v29 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v78 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= v79)
    {
      *(void *)(v9 + v31) = *((void *)a2 + 2);
      unint64_t v78 = v79;
      unint64_t v13 = v31 + 8;
    }
  }
  else
  {
    unint64_t v78 = v79;
  }
  unint64_t v32 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v32 >= v9 + v13)
  {
    unint64_t v33 = (char *)v32 - v9;
    if ((unint64_t)v32 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_48;
    }
    unint64_t v13 = (unint64_t)(v33 + 4);
    if ((unint64_t)(v33 + 4) > v78) {
      goto LABEL_48;
    }
    *unint64_t v32 = a2[6];
  }
  if (v78)
  {
    unint64_t v34 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = *(void *)(a1 + 64);
    if (v34 + 16 >= v35) {
      unint64_t v34 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v36 = v34 + v13;
    if (v35 <= v36) {
      unint64_t v37 = 0;
    }
    else {
      unint64_t v37 = v36;
    }
    *(void *)(a1 + 80) = v37;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v37) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v38 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v38;
  }
LABEL_48:
  if (!v83)
  {
    __break(1u);
    goto LABEL_98;
  }
  unint64_t v39 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - v81;
  if (v39 < v81)
  {
    unint64_t v41 = 0;
  }
  else
  {
    unint64_t v41 = 0;
    if (v40 <= 0xFFFFFFFFFFFFFFFDLL && v40 + 2 <= v82)
    {
      *(_WORD *)(v81 + v40) = 2870;
      unint64_t v41 = v40 + 2;
    }
  }
  unint64_t v42 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *(void *)(a1 + 64);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v44 = v42 + v41;
  if (v43 <= v44) {
    unint64_t v44 = 0;
  }
  *(void *)(a1 + 80) = v44;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v44);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v80, (uint64_t **)(a1 + 8));
  unint64_t v45 = v80;
  unint64_t v46 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v46 = 994;
  *((void *)v46 + 1) = a3;
  *((void *)v46 + 66) = (char *)v46 + 16;
  *((void *)v46 + 67) = 512;
  *((void *)v46 + 68) = 0;
  *((void *)v46 + 70) = 0;
  *((void *)v46 + 69) = 0;
  IPC::Encoder::encodeHeader(v46);
  unint64_t v84 = v46;
  int v47 = *a2;
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v49 <= 3)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x199092858);
  }
  *unint64_t v48 = v47;
  int v50 = a2[1];
  unint64_t v51 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199092878);
  }
  *unint64_t v51 = v50;
  int v53 = a2[2];
  unint64_t v54 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199092898);
  }
  _DWORD *v54 = v53;
  uint64_t v56 = *((void *)a2 + 2);
  int v57 = (void *)IPC::Encoder::grow(v46, 8uLL, 8);
  if (v58 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1990928B8);
  }
  *int v57 = v56;
  int v59 = a2[6];
  unint64_t v60 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v61 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990928D8);
  }
  _DWORD *v60 = v59;
  uint64_t v38 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v84, 1, 0);
  unint64_t v63 = v84;
  unint64_t v84 = 0;
  if (v63)
  {
    IPC::Encoder::~Encoder(v63, v62);
    WTF::fastFree(v64, v65);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80);
  return v38;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribDivisor,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1108;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1108;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateVertexArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 966;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 966;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteVertexArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 980;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 980;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsVertexArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v61, v9);
    if (!(_BYTE)v63) {
      goto LABEL_101;
    }
    unint64_t v49 = v61;
    unint64_t v48 = v62;
    unint64_t v50 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - (void)v61;
    if (v50 >= (unint64_t)v61)
    {
      unint64_t v52 = v51 + 2;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v62)
      {
        *(_WORD *)((char *)v61 + v51) = 2871;
        goto LABEL_87;
      }
      unint64_t v48 = 0;
    }
    unint64_t v52 = 0;
LABEL_87:
    unint64_t v54 = (char *)(((unint64_t)v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v54 >= (char *)v49 + v52)
    {
      unint64_t v52 = v54 - (char *)v49 + 8;
      if ((unint64_t)(v54 - (char *)v49) > 0xFFFFFFFFFFFFFFF7 || v52 > v48) {
        goto LABEL_112;
      }
      *(void *)unint64_t v54 = a3;
    }
    if (v48)
    {
      uint64_t v56 = *((void *)v6 + 9);
      unint64_t v57 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v58 = *((void *)v6 + 8);
      if (v57 + 16 >= v58) {
        unint64_t v57 = 0;
      }
      if (v52 <= 0x10) {
        unint64_t v52 = 16;
      }
      unint64_t v59 = v57 + v52;
      if (v58 <= v59) {
        unint64_t v59 = 0;
      }
      *((void *)v6 + 10) = v59;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v56 + 16) + 128), v59) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_112:
    char v60 = 17;
    goto LABEL_102;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v65, v9);
  if (!v67)
  {
LABEL_101:
    char v60 = 15;
LABEL_102:
    *(unsigned char *)a4 = v60;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v65;
  unint64_t v14 = v66;
  uint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v71, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    int v76 = 1;
    LOBYTE(v61) = 0;
    int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsVertexArray>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsVertexArray>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
    char v64 = 1;
    if (v76 != -1) {
      ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v68, &v74);
    }
    goto LABEL_55;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3701;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_105;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    unint64_t v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v68) = 0;
        unsigned __int8 v70 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *((void *)v6 + 8);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    *((void *)v6 + 10) = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v74, (uint64_t)v6 + 64, v9);
    if (!(_BYTE)v76)
    {
      LOBYTE(v68) = 16;
      int v69 = 1;
LABEL_41:
      unsigned __int8 v70 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v73, (uint64_t)&v74, (uint64_t *)v11);
    if (*((_WORD *)v73 + 25) != 2870)
    {
      unint64_t v68 = v73;
      int v69 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v73);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v71, v16, 0xE75u, (uint64_t)&v74, v9);
    LOBYTE(v68) = 0;
    int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, (uint64_t)&v74);
    unsigned __int8 v70 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v75])(&v73, &v74);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v71);
    if (!v70)
    {
      LOBYTE(v61) = 0;
      char v64 = 0;
      goto LABEL_55;
    }
    if (v69 == 1)
    {
      LOBYTE(v61) = (_BYTE)v68;
      int v34 = 1;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_54;
    }
    if (v69) {
      goto LABEL_108;
    }
    LOWORD(v73) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>((uint64_t *)v68, &v73);
    if (!BYTE1(v73))
    {
      LOBYTE(v61) = 13;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_52;
    }
    unint64_t v20 = v70;
    if (v70) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v19 = 0;
  }
  if (v69) {
    goto LABEL_108;
  }
  unint64_t v33 = v68;
  unint64_t v68 = 0;
  unint64_t v74 = v33;
  LOBYTE(v75) = (_BYTE)v73;
  int v76 = 0;
  LOBYTE(v61) = 0;
  int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsVertexArray>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsVertexArray>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
  char v64 = 1;
  if (v76 != -1) {
    ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v72, &v74);
  }
LABEL_52:
  if (v70)
  {
    int v34 = v69;
    if (v69 != -1) {
LABEL_54:
    }
      ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v34])(&v74, &v68);
  }
LABEL_55:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
  if (v64)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsVertexArray>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsVertexArray>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v61);
    if (v64)
    {
      if (v63 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v63])(&v74, &v61);
      }
    }
    return result;
  }
  unint64_t v20 = v67;
  if (!v67) {
    goto LABEL_104;
  }
  unint64_t v35 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v35 - v65;
  if (v35 < v65)
  {
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v66)
    {
      *(_WORD *)(v65 + v36) = 2870;
      unint64_t v37 = v36 + 2;
    }
  }
  unint64_t v38 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *((void *)v6 + 8);
  if (v38 + 16 >= v39) {
    goto LABEL_109;
  }
  while (1)
  {
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v40 = v38 + v37;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *((void *)v6 + 10) = v40;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v40);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, v15);
    double v6 = v73;
    unint64_t v74 = 0;
    IPC::Connection::createSyncMessageEncoder(3701, a3, (uint64_t *)&v74, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v74, (uint64_t *)&v68, 0, (uint64_t)&v61, v9);
    if (v62)
    {
      if (v62 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v61;
        int v41 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_76;
      }
      goto LABEL_108;
    }
    LOWORD(v71) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v61, &v71);
    if (!BYTE1(v71)) {
      break;
    }
    int v41 = v62;
    if (!v62)
    {
      unint64_t v43 = v61;
      unint64_t v61 = 0;
      char v44 = (char)v71;
      *(void *)a4 = v43;
      *(unsigned char *)(a4 + 8) = v44;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_76;
    }
LABEL_108:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
    unint64_t v38 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v41 = v62;
  if (v62 == -1) {
    goto LABEL_77;
  }
LABEL_76:
  ((void (*)(IPC::Decoder ***, uint64_t **))off_1EE9E9D68[v41])(&v71, &v61);
LABEL_77:
  unint64_t v45 = v68;
  unint64_t v68 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v42);
    WTF::fastFree(v46, v47);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsVertexArray>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsVertexArray>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA248[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindVertexArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 918;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 918;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CopyBufferSubData,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
    if (!v83) {
      return 15;
    }
    unint64_t v67 = v81;
    unint64_t v66 = v82;
    unint64_t v68 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v69 = v68 - v81;
    if (v68 >= v81)
    {
      unint64_t v70 = v69 + 2;
      if (v69 <= 0xFFFFFFFFFFFFFFFDLL && v70 <= v82)
      {
        *(_WORD *)(v81 + v69) = 2871;
        goto LABEL_77;
      }
      unint64_t v66 = 0;
    }
    unint64_t v70 = 0;
LABEL_77:
    char v72 = (void *)((v67 + v70 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v72 >= v67 + v70)
    {
      unint64_t v70 = (unint64_t)v72 - v67 + 8;
      if ((unint64_t)v72 - v67 > 0xFFFFFFFFFFFFFFF7 || v70 > v66) {
        return 17;
      }
      void *v72 = a3;
    }
    if (v66)
    {
      unint64_t v74 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v75 = *(void *)(a1 + 64);
      if (v74 + 16 >= v75) {
        unint64_t v74 = 0;
      }
      if (v70 <= 0x10) {
        unint64_t v70 = 16;
      }
      unint64_t v76 = v74 + v70;
      if (v75 <= v76) {
        unint64_t v76 = 0;
      }
      *(void *)(a1 + 80) = v76;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v76) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
  if (!v83) {
    return 15;
  }
  unint64_t v9 = v81;
  unint64_t v10 = v82;
  unint64_t v11 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v81;
  if (v11 >= v81)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v82)
    {
      *(_WORD *)(v81 + v12) = 952;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v78 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= v10)
    {
      *(void *)(v9 + v28) = *((void *)a2 + 1);
      unint64_t v78 = v10;
      unint64_t v13 = v28 + 8;
    }
  }
  else
  {
    unint64_t v78 = v10;
  }
  unint64_t v29 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v79 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= v78)
    {
      *(void *)(v9 + v31) = *((void *)a2 + 2);
      unint64_t v79 = v78;
      unint64_t v13 = v31 + 8;
    }
  }
  else
  {
    unint64_t v79 = v78;
  }
  unint64_t v32 = (void *)((v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v32 >= v9 + v13)
  {
    unint64_t v33 = (char *)v32 - v9;
    if ((unint64_t)v32 - v9 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_48;
    }
    unint64_t v13 = (unint64_t)(v33 + 8);
    if ((unint64_t)(v33 + 8) > v79) {
      goto LABEL_48;
    }
    *unint64_t v32 = *((void *)a2 + 3);
  }
  if (v79)
  {
    unint64_t v34 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = *(void *)(a1 + 64);
    if (v34 + 16 >= v35) {
      unint64_t v34 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v36 = v34 + v13;
    if (v35 <= v36) {
      unint64_t v37 = 0;
    }
    else {
      unint64_t v37 = v36;
    }
    *(void *)(a1 + 80) = v37;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v37) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v38 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v38;
  }
LABEL_48:
  if (!v83)
  {
    __break(1u);
    goto LABEL_98;
  }
  unint64_t v39 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - v81;
  if (v39 < v81)
  {
    unint64_t v41 = 0;
  }
  else
  {
    unint64_t v41 = 0;
    if (v40 <= 0xFFFFFFFFFFFFFFFDLL && v40 + 2 <= v82)
    {
      *(_WORD *)(v81 + v40) = 2870;
      unint64_t v41 = v40 + 2;
    }
  }
  unint64_t v42 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *(void *)(a1 + 64);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v44 = v42 + v41;
  if (v43 <= v44) {
    unint64_t v44 = 0;
  }
  *(void *)(a1 + 80) = v44;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v44);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v80, (uint64_t **)(a1 + 8));
  unint64_t v45 = v80;
  unint64_t v46 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v46 = 952;
  *((void *)v46 + 1) = a3;
  *((void *)v46 + 66) = (char *)v46 + 16;
  *((void *)v46 + 67) = 512;
  *((void *)v46 + 68) = 0;
  *((void *)v46 + 70) = 0;
  *((void *)v46 + 69) = 0;
  IPC::Encoder::encodeHeader(v46);
  unint64_t v84 = v46;
  int v47 = *a2;
  unsigned __int8 v48 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v49 <= 3)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x199094474);
  }
  *unsigned __int8 v48 = v47;
  int v50 = a2[1];
  unint64_t v51 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199094494);
  }
  *unint64_t v51 = v50;
  uint64_t v53 = *((void *)a2 + 1);
  unint64_t v54 = (void *)IPC::Encoder::grow(v46, 8uLL, 8);
  if (v55 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1990944B4);
  }
  void *v54 = v53;
  uint64_t v56 = *((void *)a2 + 2);
  unint64_t v57 = (void *)IPC::Encoder::grow(v46, 8uLL, 8);
  if (v58 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1990944D4);
  }
  *unint64_t v57 = v56;
  uint64_t v59 = *((void *)a2 + 3);
  char v60 = (void *)IPC::Encoder::grow(v46, 8uLL, 8);
  if (v61 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1990944F4);
  }
  void *v60 = v59;
  uint64_t v38 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v84, 1, 0);
  int v63 = v84;
  unint64_t v84 = 0;
  if (v63)
  {
    IPC::Encoder::~Encoder(v63, v62);
    WTF::fastFree(v64, v65);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80);
  return v38;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlitFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v116, v7);
    if (!v118) {
      return 15;
    }
    unint64_t v98 = v116;
    unint64_t v97 = v117;
    unint64_t v99 = (v116 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v100 = v99 - v116;
    if (v99 >= v116)
    {
      unint64_t v101 = v100 + 2;
      if (v100 <= 0xFFFFFFFFFFFFFFFDLL && v101 <= v117)
      {
        *(_WORD *)(v116 + v100) = 2871;
        goto LABEL_106;
      }
      unint64_t v97 = 0;
    }
    unint64_t v101 = 0;
LABEL_106:
    unint64_t v103 = (void *)((v98 + v101 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v103 >= v98 + v101)
    {
      unint64_t v101 = (unint64_t)v103 - v98 + 8;
      if ((unint64_t)v103 - v98 > 0xFFFFFFFFFFFFFFF7 || v101 > v97) {
        return 17;
      }
      *unint64_t v103 = a3;
    }
    if (v97)
    {
      unint64_t v105 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v106 = *(void *)(a1 + 64);
      if (v105 + 16 >= v106) {
        unint64_t v105 = 0;
      }
      if (v101 <= 0x10) {
        unint64_t v101 = 16;
      }
      unint64_t v107 = v105 + v101;
      if (v106 <= v107) {
        unint64_t v107 = 0;
      }
      *(void *)(a1 + 80) = v107;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v107) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v116, v7);
  if (!v118) {
    return 15;
  }
  unint64_t v9 = v116;
  unint64_t v10 = v117;
  unint64_t v11 = (v116 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v116;
  if (v11 >= v116)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v117)
    {
      *(_WORD *)(v116 + v12) = 928;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v109 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v109 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v109 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v110 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v109)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v110 = v109;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v110 = v109;
  }
  unint64_t v32 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v32 >= v9 + v13;
  unint64_t v33 = v32 - (v9 + v13);
  if (v26)
  {
    unint64_t v111 = 0;
    unint64_t v34 = v33 + v13;
    if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= v110)
    {
      *(_DWORD *)(v9 + v34) = a2[4];
      unint64_t v111 = v110;
      unint64_t v13 = v34 + 4;
    }
  }
  else
  {
    unint64_t v111 = v110;
  }
  unint64_t v35 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v35 >= v9 + v13;
  unint64_t v36 = v35 - (v9 + v13);
  if (v26)
  {
    unint64_t v112 = 0;
    unint64_t v37 = v36 + v13;
    if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= v111)
    {
      *(_DWORD *)(v9 + v37) = a2[5];
      unint64_t v112 = v111;
      unint64_t v13 = v37 + 4;
    }
  }
  else
  {
    unint64_t v112 = v111;
  }
  unint64_t v38 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v38 >= v9 + v13;
  unint64_t v39 = v38 - (v9 + v13);
  if (v26)
  {
    unint64_t v113 = 0;
    unint64_t v40 = v39 + v13;
    if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= v112)
    {
      *(_DWORD *)(v9 + v40) = a2[6];
      unint64_t v113 = v112;
      unint64_t v13 = v40 + 4;
    }
  }
  else
  {
    unint64_t v113 = v112;
  }
  unint64_t v41 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v42 = v41 - (v9 + v13);
  if (v41 < v9 + v13)
  {
    unint64_t v43 = v113;
  }
  else
  {
    unint64_t v43 = 0;
    unint64_t v44 = v42 + v13;
    if (v44 <= 0xFFFFFFFFFFFFFFFBLL && v44 + 4 <= v113)
    {
      *(_DWORD *)(v9 + v44) = a2[7];
      unint64_t v43 = v113;
      unint64_t v13 = v44 + 4;
    }
  }
  unint64_t v45 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v45 >= v9 + v13;
  unint64_t v46 = v45 - (v9 + v13);
  if (v26)
  {
    unint64_t v114 = 0;
    unint64_t v47 = v46 + v13;
    if (v47 <= 0xFFFFFFFFFFFFFFFBLL && v47 + 4 <= v43)
    {
      *(_DWORD *)(v9 + v47) = a2[8];
      unint64_t v114 = v43;
      unint64_t v13 = v47 + 4;
    }
  }
  else
  {
    unint64_t v114 = v43;
  }
  unsigned __int8 v48 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v48 >= v9 + v13)
  {
    unint64_t v49 = (char *)v48 - v9;
    if ((unint64_t)v48 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_72;
    }
    unint64_t v13 = (unint64_t)(v49 + 4);
    if ((unint64_t)(v49 + 4) > v114) {
      goto LABEL_72;
    }
    *unsigned __int8 v48 = a2[9];
  }
  if (v114)
  {
    unint64_t v50 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = *(void *)(a1 + 64);
    if (v50 + 16 >= v51) {
      unint64_t v50 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v52 = v50 + v13;
    if (v51 <= v52) {
      unint64_t v53 = 0;
    }
    else {
      unint64_t v53 = v52;
    }
    *(void *)(a1 + 80) = v53;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v53) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v54 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v54;
  }
LABEL_72:
  if (!v118)
  {
    __break(1u);
    goto LABEL_127;
  }
  unint64_t v55 = (v116 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v56 = v55 - v116;
  if (v55 < v116)
  {
    unint64_t v57 = 0;
  }
  else
  {
    unint64_t v57 = 0;
    if (v56 <= 0xFFFFFFFFFFFFFFFDLL && v56 + 2 <= v117)
    {
      *(_WORD *)(v116 + v56) = 2870;
      unint64_t v57 = v56 + 2;
    }
  }
  unint64_t v58 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v59 = *(void *)(a1 + 64);
  if (v58 + 16 >= v59) {
    unint64_t v58 = 0;
  }
  if (v57 <= 0x10) {
    unint64_t v57 = 16;
  }
  unint64_t v60 = v58 + v57;
  if (v59 <= v60) {
    unint64_t v60 = 0;
  }
  *(void *)(a1 + 80) = v60;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v60);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v115, (uint64_t **)(a1 + 8));
  unint64_t v61 = v115;
  unint64_t v62 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v62 = 928;
  *((void *)v62 + 1) = a3;
  *((void *)v62 + 66) = (char *)v62 + 16;
  *((void *)v62 + 67) = 512;
  *((void *)v62 + 68) = 0;
  *((void *)v62 + 70) = 0;
  *((void *)v62 + 69) = 0;
  IPC::Encoder::encodeHeader(v62);
  v119 = v62;
  int v63 = *a2;
  char v64 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v65 <= 3)
  {
LABEL_127:
    __break(0xC471u);
    JUMPOUT(0x199094C38);
  }
  *char v64 = v63;
  int v66 = a2[1];
  unint64_t v67 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v68 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199094C58);
  }
  _DWORD *v67 = v66;
  int v69 = a2[2];
  unint64_t v70 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v71 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199094C78);
  }
  *unint64_t v70 = v69;
  int v72 = a2[3];
  unint64_t v73 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v74 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199094C98);
  }
  *unint64_t v73 = v72;
  int v75 = a2[4];
  unint64_t v76 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v77 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199094CB8);
  }
  *unint64_t v76 = v75;
  int v78 = a2[5];
  unint64_t v79 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v80 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199094CD8);
  }
  *unint64_t v79 = v78;
  int v81 = a2[6];
  unint64_t v82 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v83 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199094CF8);
  }
  _DWORD *v82 = v81;
  int v84 = a2[7];
  unint64_t v85 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v86 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199094D18);
  }
  *unint64_t v85 = v84;
  int v87 = a2[8];
  unint64_t v88 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v89 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199094D38);
  }
  *unint64_t v88 = v87;
  int v90 = a2[9];
  unint64_t v91 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v92 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199094D58);
  }
  _DWORD *v91 = v90;
  uint64_t v54 = IPC::Connection::sendMessageImpl((uint64_t)v61, (uint64_t *)&v119, 1, 0);
  unint64_t v94 = v119;
  v119 = 0;
  if (v94)
  {
    IPC::Encoder::~Encoder(v94, v93);
    WTF::fastFree(v95, v96);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v115);
  return v54;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::FramebufferTextureLayer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
    if (!v83) {
      return 15;
    }
    unint64_t v67 = v81;
    unint64_t v66 = v82;
    unint64_t v68 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v69 = v68 - v81;
    if (v68 >= v81)
    {
      unint64_t v70 = v69 + 2;
      if (v69 <= 0xFFFFFFFFFFFFFFFDLL && v70 <= v82)
      {
        *(_WORD *)(v81 + v69) = 2871;
        goto LABEL_77;
      }
      unint64_t v66 = 0;
    }
    unint64_t v70 = 0;
LABEL_77:
    int v72 = (void *)((v67 + v70 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v72 >= v67 + v70)
    {
      unint64_t v70 = (unint64_t)v72 - v67 + 8;
      if ((unint64_t)v72 - v67 > 0xFFFFFFFFFFFFFFF7 || v70 > v66) {
        return 17;
      }
      void *v72 = a3;
    }
    if (v66)
    {
      unint64_t v74 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v75 = *(void *)(a1 + 64);
      if (v74 + 16 >= v75) {
        unint64_t v74 = 0;
      }
      if (v70 <= 0x10) {
        unint64_t v70 = 16;
      }
      unint64_t v76 = v74 + v70;
      if (v75 <= v76) {
        unint64_t v76 = 0;
      }
      *(void *)(a1 + 80) = v76;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v76) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
  if (!v83) {
    return 15;
  }
  unint64_t v9 = v81;
  unint64_t v10 = v82;
  unint64_t v11 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v81;
  if (v11 >= v81)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v82)
    {
      *(_WORD *)(v81 + v12) = 1008;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v79 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v79 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v79 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v78 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v79)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v78 = v79;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v78 = v79;
  }
  unint64_t v32 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v32 >= v9 + v13)
  {
    unint64_t v33 = (char *)v32 - v9;
    if ((unint64_t)v32 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_48;
    }
    unint64_t v13 = (unint64_t)(v33 + 4);
    if ((unint64_t)(v33 + 4) > v78) {
      goto LABEL_48;
    }
    *unint64_t v32 = a2[4];
  }
  if (v78)
  {
    unint64_t v34 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = *(void *)(a1 + 64);
    if (v34 + 16 >= v35) {
      unint64_t v34 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v36 = v34 + v13;
    if (v35 <= v36) {
      unint64_t v37 = 0;
    }
    else {
      unint64_t v37 = v36;
    }
    *(void *)(a1 + 80) = v37;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v37) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v38 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v38;
  }
LABEL_48:
  if (!v83)
  {
    __break(1u);
    goto LABEL_98;
  }
  unint64_t v39 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - v81;
  if (v39 < v81)
  {
    unint64_t v41 = 0;
  }
  else
  {
    unint64_t v41 = 0;
    if (v40 <= 0xFFFFFFFFFFFFFFFDLL && v40 + 2 <= v82)
    {
      *(_WORD *)(v81 + v40) = 2870;
      unint64_t v41 = v40 + 2;
    }
  }
  unint64_t v42 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *(void *)(a1 + 64);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v44 = v42 + v41;
  if (v43 <= v44) {
    unint64_t v44 = 0;
  }
  *(void *)(a1 + 80) = v44;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v44);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v80, (uint64_t **)(a1 + 8));
  unint64_t v45 = v80;
  unint64_t v46 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v46 = 1008;
  *((void *)v46 + 1) = a3;
  *((void *)v46 + 66) = (char *)v46 + 16;
  *((void *)v46 + 67) = 512;
  *((void *)v46 + 68) = 0;
  *((void *)v46 + 70) = 0;
  *((void *)v46 + 69) = 0;
  IPC::Encoder::encodeHeader(v46);
  int v84 = v46;
  int v47 = *a2;
  unsigned __int8 v48 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v49 <= 3)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x1990952E4);
  }
  *unsigned __int8 v48 = v47;
  int v50 = a2[1];
  unint64_t v51 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199095304);
  }
  *unint64_t v51 = v50;
  int v53 = a2[2];
  uint64_t v54 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199095324);
  }
  _DWORD *v54 = v53;
  int v56 = a2[3];
  unint64_t v57 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v58 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199095344);
  }
  *unint64_t v57 = v56;
  int v59 = a2[4];
  unint64_t v60 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v61 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199095364);
  }
  _DWORD *v60 = v59;
  uint64_t v38 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v84, 1, 0);
  int v63 = v84;
  int v84 = 0;
  if (v63)
  {
    IPC::Encoder::~Encoder(v63, v62);
    WTF::fastFree(v64, v65);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80);
  return v38;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::InvalidateFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, const void ***a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v54, v7);
    if (!(_BYTE)v56) {
      return 15;
    }
    unint64_t v39 = v54;
    unint64_t v38 = v55;
    unint64_t v40 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v41 = v40 - (void)v54;
    if (v40 >= (unint64_t)v54)
    {
      unint64_t v42 = v41 + 2;
      if (v41 <= 0xFFFFFFFFFFFFFFFDLL && v42 <= v55)
      {
        *(_WORD *)((char *)v54 + v41) = 2871;
        goto LABEL_52;
      }
      unint64_t v38 = 0;
    }
    unint64_t v42 = 0;
LABEL_52:
    unint64_t v44 = (char *)(((unint64_t)v39 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v44 >= (char *)v39 + v42)
    {
      unint64_t v42 = v44 - (char *)v39 + 8;
      if ((unint64_t)(v44 - (char *)v39) > 0xFFFFFFFFFFFFFFF7 || v42 > v38) {
        return 17;
      }
      *(void *)unint64_t v44 = a3;
    }
    if (v38)
    {
      unint64_t v46 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v47 = *(void *)(a1 + 64);
      if (v46 + 16 >= v47) {
        unint64_t v46 = 0;
      }
      if (v42 <= 0x10) {
        unint64_t v42 = 16;
      }
      unint64_t v48 = v46 + v42;
      if (v47 <= v48) {
        unint64_t v48 = 0;
      }
      *(void *)(a1 + 80) = v48;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v48) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v51, v7);
  if (!v53) {
    return 15;
  }
  unint64_t v9 = v51;
  unint64_t v10 = v52;
  uint64_t v54 = v51;
  unint64_t v55 = v52;
  unint64_t v56 = 0;
  unint64_t v11 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v51;
  if (v11 < (unint64_t)v51)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v52)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v55 = 0;
    }
    else
    {
      *(_WORD *)((char *)v51 + v12) = 1012;
      unint64_t v56 = v12 + 2;
    }
  }
  unint64_t v15 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v15 >= (char *)v9 + v13)
  {
    if ((unint64_t)(v15 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || v15 - (char *)v9 + 4 > v10)
    {
      unint64_t v55 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v15 = *(_DWORD *)a2;
      unint64_t v56 = v15 - (char *)v9 + 4;
    }
  }
  IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v54, *a2[1], (uint64_t)a2[1][1]);
  if (v55)
  {
    uint64_t v17 = v56;
    uint64_t v18 = *(void *)(a1 + 72);
    unint64_t v19 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v20 = *(void *)(a1 + 64);
    if (v19 + 16 >= v20) {
      unint64_t v19 = 0;
    }
    if (v56 <= 0x10) {
      uint64_t v17 = 16;
    }
    unint64_t v21 = v19 + v17;
    if (v20 <= v21) {
      unint64_t v21 = 0;
    }
    *(void *)(a1 + 80) = v21;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v18 + 16) + 128), v21) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  if (!v53)
  {
    __break(1u);
    goto LABEL_71;
  }
  unint64_t v23 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v24 = v23 - (void)v51;
  if (v23 < (unint64_t)v51)
  {
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v25 = 0;
    if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v52)
    {
      *(_WORD *)((char *)v51 + v24) = 2870;
      unint64_t v25 = v24 + 2;
    }
  }
  unint64_t v26 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = *(void *)(a1 + 64);
  if (v26 + 16 >= v27) {
    unint64_t v26 = 0;
  }
  if (v25 <= 0x10) {
    unint64_t v25 = 16;
  }
  unint64_t v28 = v26 + v25;
  if (v27 <= v28) {
    unint64_t v28 = 0;
  }
  *(void *)(a1 + 80) = v28;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v28);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(a1 + 8));
  unint64_t v29 = v50;
  unint64_t v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v30 = 1012;
  *((void *)v30 + 1) = a3;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  uint64_t v54 = v30;
  int v31 = *(_DWORD *)a2;
  unint64_t v32 = (_DWORD *)IPC::Encoder::grow(v30, 4uLL, 4);
  if (v33 <= 3)
  {
LABEL_71:
    __break(0xC471u);
    JUMPOUT(0x199095784);
  }
  *unint64_t v32 = v31;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v30, *a2[1], (uint64_t)a2[1][1]);
  uint64_t v22 = IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
  unint64_t v35 = v54;
  uint64_t v54 = 0;
  if (v35)
  {
    IPC::Encoder::~Encoder(v35, v34);
    WTF::fastFree(v36, v37);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v50);
  return v22;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::InvalidateSubFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, const void ***a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v80, v7);
    if (!(_BYTE)v82) {
      return 15;
    }
    unint64_t v65 = v80;
    unint64_t v64 = v81;
    unint64_t v66 = ((unint64_t)v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v67 = v66 - (void)v80;
    if (v66 >= (unint64_t)v80)
    {
      unint64_t v68 = v67 + 2;
      if (v67 <= 0xFFFFFFFFFFFFFFFDLL && v68 <= v81)
      {
        *(_WORD *)((char *)v80 + v67) = 2871;
        goto LABEL_74;
      }
      unint64_t v64 = 0;
    }
    unint64_t v68 = 0;
LABEL_74:
    unint64_t v70 = (char *)(((unint64_t)v65 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v70 >= (char *)v65 + v68)
    {
      unint64_t v68 = v70 - (char *)v65 + 8;
      if ((unint64_t)(v70 - (char *)v65) > 0xFFFFFFFFFFFFFFF7 || v68 > v64) {
        return 17;
      }
      *(void *)unint64_t v70 = a3;
    }
    if (v64)
    {
      unint64_t v72 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v73 = *(void *)(a1 + 64);
      if (v72 + 16 >= v73) {
        unint64_t v72 = 0;
      }
      if (v68 <= 0x10) {
        unint64_t v68 = 16;
      }
      unint64_t v74 = v72 + v68;
      if (v73 <= v74) {
        unint64_t v74 = 0;
      }
      *(void *)(a1 + 80) = v74;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v74) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v77, v7);
  if (!v79) {
    return 15;
  }
  unint64_t v9 = v77;
  unint64_t v10 = v78;
  unint64_t v80 = v77;
  unint64_t v81 = v78;
  uint64_t v82 = 0;
  unint64_t v11 = ((unint64_t)v77 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v77;
  if (v11 < (unint64_t)v77)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v78)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v81 = 0;
    }
    else
    {
      *(_WORD *)((char *)v77 + v12) = 1013;
      uint64_t v82 = v12 + 2;
    }
  }
  unint64_t v15 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v15 >= (char *)v9 + v13)
  {
    if ((unint64_t)(v15 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || v15 - (char *)v9 + 4 > v10)
    {
      unint64_t v81 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v15 = *(_DWORD *)a2;
      uint64_t v82 = v15 - (char *)v9 + 4;
    }
  }
  IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v80, *a2[1], (uint64_t)a2[1][1]);
  unint64_t v18 = v81;
  unint64_t v17 = v82;
  unint64_t v19 = v80;
  unint64_t v20 = ((unint64_t)v80 + v82 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - ((void)v80 + v82);
  if (v20 >= (unint64_t)v80 + v82)
  {
    unint64_t v22 = v20 - (void)v80;
    unint64_t v23 = v21 + v82 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v81)
    {
      unint64_t v18 = 0;
      unint64_t v81 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v80 + v22) = *((_DWORD *)a2 + 4);
      uint64_t v82 = v23;
      unint64_t v19 = v80;
      unint64_t v18 = v81;
      unint64_t v17 = v23;
    }
  }
  unint64_t v25 = ((unint64_t)v19 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v26 = v25 - ((void)v19 + v17);
  if (v25 >= (unint64_t)v19 + v17)
  {
    unint64_t v27 = v25 - (void)v19;
    if (v26 + v17 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > v18)
    {
      unint64_t v18 = 0;
      unint64_t v81 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v19 + v27) = *((_DWORD *)a2 + 5);
      uint64_t v82 = v27 + 4;
      unint64_t v19 = v80;
      unint64_t v18 = v81;
      unint64_t v17 = v27 + 4;
    }
  }
  unint64_t v28 = ((unint64_t)v19 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v29 = v28 - ((void)v19 + v17);
  if (v28 >= (unint64_t)v19 + v17)
  {
    unint64_t v30 = v28 - (void)v19;
    if (v29 + v17 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > v18)
    {
      unint64_t v18 = 0;
      unint64_t v81 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v19 + v30) = *((_DWORD *)a2 + 6);
      uint64_t v82 = v30 + 4;
      unint64_t v19 = v80;
      unint64_t v18 = v81;
      unint64_t v17 = v30 + 4;
    }
  }
  int v31 = (char *)(((unint64_t)v19 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v31 >= (char *)v19 + v17)
  {
    int64_t v32 = v31 - (char *)v19;
    if ((unint64_t)(v31 - (char *)v19) > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_48;
    }
    unint64_t v17 = v32 + 4;
    if (v32 + 4 > v18) {
      goto LABEL_48;
    }
    *(_DWORD *)int v31 = *((_DWORD *)a2 + 7);
    uint64_t v82 = v32 + 4;
    unint64_t v18 = v81;
  }
  if (v18)
  {
    unint64_t v33 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = *(void *)(a1 + 64);
    if (v33 + 16 >= v34) {
      unint64_t v33 = 0;
    }
    if (v17 <= 0x10) {
      unint64_t v17 = 16;
    }
    unint64_t v35 = v33 + v17;
    if (v34 <= v35) {
      unint64_t v35 = 0;
    }
    *(void *)(a1 + 80) = v35;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v35) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
LABEL_48:
  if (!v79)
  {
    __break(1u);
    goto LABEL_96;
  }
  unint64_t v37 = ((unint64_t)v77 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v38 = v37 - (void)v77;
  if (v37 < (unint64_t)v77)
  {
    unint64_t v39 = 0;
  }
  else
  {
    unint64_t v39 = 0;
    if (v38 <= 0xFFFFFFFFFFFFFFFDLL && v38 + 2 <= v78)
    {
      *(_WORD *)((char *)v77 + v38) = 2870;
      unint64_t v39 = v38 + 2;
    }
  }
  unint64_t v40 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v41 = *(void *)(a1 + 64);
  if (v40 + 16 >= v41) {
    unint64_t v40 = 0;
  }
  if (v39 <= 0x10) {
    unint64_t v39 = 16;
  }
  unint64_t v42 = v40 + v39;
  if (v41 <= v42) {
    unint64_t v42 = 0;
  }
  *(void *)(a1 + 80) = v42;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v42);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v76, (uint64_t **)(a1 + 8));
  unint64_t v43 = v76;
  unint64_t v44 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v44 = 1013;
  *((void *)v44 + 1) = a3;
  *((void *)v44 + 66) = (char *)v44 + 16;
  *((void *)v44 + 67) = 512;
  *((void *)v44 + 68) = 0;
  *((void *)v44 + 70) = 0;
  *((void *)v44 + 69) = 0;
  IPC::Encoder::encodeHeader(v44);
  unint64_t v80 = v44;
  int v45 = *(_DWORD *)a2;
  unint64_t v46 = (_DWORD *)IPC::Encoder::grow(v44, 4uLL, 4);
  if (v47 <= 3)
  {
LABEL_96:
    __break(0xC471u);
    JUMPOUT(0x199095D34);
  }
  _DWORD *v46 = v45;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v44, *a2[1], (uint64_t)a2[1][1]);
  int v48 = *((_DWORD *)a2 + 4);
  unint64_t v49 = (_DWORD *)IPC::Encoder::grow(v44, 4uLL, 4);
  if (v50 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199095D54);
  }
  *unint64_t v49 = v48;
  int v51 = *((_DWORD *)a2 + 5);
  unint64_t v52 = (_DWORD *)IPC::Encoder::grow(v44, 4uLL, 4);
  if (v53 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199095D74);
  }
  *unint64_t v52 = v51;
  int v54 = *((_DWORD *)a2 + 6);
  unint64_t v55 = (_DWORD *)IPC::Encoder::grow(v44, 4uLL, 4);
  if (v56 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199095D94);
  }
  *unint64_t v55 = v54;
  int v57 = *((_DWORD *)a2 + 7);
  unint64_t v58 = (_DWORD *)IPC::Encoder::grow(v44, 4uLL, 4);
  if (v59 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199095DB4);
  }
  *unint64_t v58 = v57;
  uint64_t v36 = IPC::Connection::sendMessageImpl((uint64_t)v43, (uint64_t *)&v80, 1, 0);
  unint64_t v61 = v80;
  unint64_t v80 = 0;
  if (v61)
  {
    IPC::Encoder::~Encoder(v61, v60);
    WTF::fastFree(v62, v63);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v76);
  return v36;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ReadBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 1029;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 1029;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::RenderbufferStorageMultisample,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    int64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1032;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1032;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t *IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    unint64_t v13 = v11 - v2;
    unint64_t v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      uint64_t v2 = *result;
      unint64_t v3 = v14;
    }
  }
  unint64_t v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    unint64_t v18 = v16 - v2;
    unint64_t v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = a2[2];
      result[2] = v19;
      uint64_t v2 = *result;
      unint64_t v3 = v19;
    }
  }
  unint64_t v21 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = v21 - (v2 + v3);
  if (v21 >= v2 + v3)
  {
    unint64_t v23 = v21 - v2;
    unint64_t v24 = v22 + v3 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v23) = a2[3];
      result[2] = v24;
      uint64_t v2 = *result;
      unint64_t v3 = v24;
    }
  }
  unint64_t v26 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v26 >= v2 + v3)
  {
    unint64_t v27 = (unint64_t)v26 - v2 + 4;
    if ((unint64_t)v26 - v2 > 0xFFFFFFFFFFFFFFFBLL || v27 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      _DWORD *v26 = a2[4];
      result[2] = v27;
    }
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, int *a2)
{
  int v4 = *a2;
  unint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3) {
    goto LABEL_11;
  }
  _DWORD *v5 = v4;
  int v7 = a2[1];
  unint64_t v8 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v9 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199096770);
  }
  *unint64_t v8 = v7;
  int v10 = a2[2];
  unint64_t v11 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v12 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199096790);
  }
  *unint64_t v11 = v10;
  int v13 = a2[3];
  unint64_t v14 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v15 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990967B0);
  }
  *unint64_t v14 = v13;
  int v16 = a2[4];
  unint64_t result = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v18 <= 3)
  {
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x199096750);
  }
  _DWORD *result = v16;
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexStorage2D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    int64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1057;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1057;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexStorage3D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v88, v7);
    if (!v90) {
      return 15;
    }
    unint64_t v74 = v88;
    unint64_t v73 = v89;
    unint64_t v75 = (v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v76 = v75 - v88;
    if (v75 >= v88)
    {
      unint64_t v77 = v76 + 2;
      if (v76 <= 0xFFFFFFFFFFFFFFFDLL && v77 <= v89)
      {
        *(_WORD *)(v88 + v76) = 2871;
        goto LABEL_82;
      }
      unint64_t v73 = 0;
    }
    unint64_t v77 = 0;
LABEL_82:
    char v79 = (void *)((v74 + v77 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v79 >= v74 + v77)
    {
      unint64_t v77 = (unint64_t)v79 - v74 + 8;
      if ((unint64_t)v79 - v74 > 0xFFFFFFFFFFFFFFF7 || v77 > v73) {
        return 17;
      }
      *char v79 = a3;
    }
    if (v73)
    {
      unint64_t v81 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v82 = *(void *)(a1 + 64);
      if (v81 + 16 >= v82) {
        unint64_t v81 = 0;
      }
      if (v77 <= 0x10) {
        unint64_t v77 = 16;
      }
      unint64_t v83 = v81 + v77;
      if (v82 <= v83) {
        unint64_t v83 = 0;
      }
      *(void *)(a1 + 80) = v83;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v83) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v88, v7);
  if (!v90) {
    return 15;
  }
  unint64_t v9 = v88;
  unint64_t v10 = v89;
  unint64_t v11 = (v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v88;
  if (v11 >= v88)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v89)
    {
      *(_WORD *)(v88 + v12) = 1058;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v86 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v86 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v86 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v30 = v29 - (v9 + v13);
  if (v29 < v9 + v13)
  {
    unint64_t v31 = v86;
  }
  else
  {
    unint64_t v31 = 0;
    unint64_t v32 = v30 + v13;
    if (v32 <= 0xFFFFFFFFFFFFFFFBLL && v32 + 4 <= v86)
    {
      *(_DWORD *)(v9 + v32) = a2[3];
      unint64_t v31 = v86;
      unint64_t v13 = v32 + 4;
    }
  }
  unint64_t v33 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v33 >= v9 + v13;
  unint64_t v34 = v33 - (v9 + v13);
  if (v26)
  {
    unint64_t v85 = 0;
    unint64_t v35 = v34 + v13;
    if (v35 <= 0xFFFFFFFFFFFFFFFBLL && v35 + 4 <= v31)
    {
      *(_DWORD *)(v9 + v35) = a2[4];
      unint64_t v85 = v31;
      unint64_t v13 = v35 + 4;
    }
  }
  else
  {
    unint64_t v85 = v31;
  }
  unint64_t v36 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v36 >= v9 + v13)
  {
    unint64_t v37 = (char *)v36 - v9;
    if ((unint64_t)v36 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_52;
    }
    unint64_t v13 = (unint64_t)(v37 + 4);
    if ((unint64_t)(v37 + 4) > v85) {
      goto LABEL_52;
    }
    *unint64_t v36 = a2[5];
  }
  if (v85)
  {
    unint64_t v38 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v39 = *(void *)(a1 + 64);
    if (v38 + 16 >= v39) {
      unint64_t v38 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v40 = v38 + v13;
    if (v39 <= v40) {
      unint64_t v41 = 0;
    }
    else {
      unint64_t v41 = v40;
    }
    *(void *)(a1 + 80) = v41;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v42 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v42;
  }
LABEL_52:
  if (!v90)
  {
    __break(1u);
    goto LABEL_103;
  }
  unint64_t v43 = (v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v44 = v43 - v88;
  if (v43 < v88)
  {
    unint64_t v45 = 0;
  }
  else
  {
    unint64_t v45 = 0;
    if (v44 <= 0xFFFFFFFFFFFFFFFDLL && v44 + 2 <= v89)
    {
      *(_WORD *)(v88 + v44) = 2870;
      unint64_t v45 = v44 + 2;
    }
  }
  unint64_t v46 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v47 = *(void *)(a1 + 64);
  if (v46 + 16 >= v47) {
    unint64_t v46 = 0;
  }
  if (v45 <= 0x10) {
    unint64_t v45 = 16;
  }
  unint64_t v48 = v46 + v45;
  if (v47 <= v48) {
    unint64_t v48 = 0;
  }
  *(void *)(a1 + 80) = v48;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v48);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v87, (uint64_t **)(a1 + 8));
  unint64_t v49 = v87;
  unint64_t v50 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v50 = 1058;
  *((void *)v50 + 1) = a3;
  *((void *)v50 + 66) = (char *)v50 + 16;
  *((void *)v50 + 67) = 512;
  *((void *)v50 + 68) = 0;
  *((void *)v50 + 70) = 0;
  *((void *)v50 + 69) = 0;
  IPC::Encoder::encodeHeader(v50);
  unint64_t v91 = v50;
  int v51 = *a2;
  unint64_t v52 = (_DWORD *)IPC::Encoder::grow(v50, 4uLL, 4);
  if (v53 <= 3)
  {
LABEL_103:
    __break(0xC471u);
    JUMPOUT(0x1990970D4);
  }
  *unint64_t v52 = v51;
  int v54 = a2[1];
  unint64_t v55 = (_DWORD *)IPC::Encoder::grow(v50, 4uLL, 4);
  if (v56 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990970F4);
  }
  *unint64_t v55 = v54;
  int v57 = a2[2];
  unint64_t v58 = (_DWORD *)IPC::Encoder::grow(v50, 4uLL, 4);
  if (v59 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199097114);
  }
  *unint64_t v58 = v57;
  int v60 = a2[3];
  unint64_t v61 = (_DWORD *)IPC::Encoder::grow(v50, 4uLL, 4);
  if (v62 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199097134);
  }
  _DWORD *v61 = v60;
  int v63 = a2[4];
  unint64_t v64 = (_DWORD *)IPC::Encoder::grow(v50, 4uLL, 4);
  if (v65 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199097154);
  }
  *unint64_t v64 = v63;
  int v66 = a2[5];
  unint64_t v67 = (_DWORD *)IPC::Encoder::grow(v50, 4uLL, 4);
  if (v68 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199097174);
  }
  _DWORD *v67 = v66;
  uint64_t v42 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v91, 1, 0);
  unint64_t v70 = v91;
  unint64_t v91 = 0;
  if (v70)
  {
    IPC::Encoder::~Encoder(v70, v69);
    WTF::fastFree(v71, v72);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v87);
  return v42;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexImage3D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, const void ***a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v99, v7);
    if (!(_BYTE)v101) {
      return 15;
    }
    int v84 = v99;
    unint64_t v83 = v100;
    unint64_t v85 = ((unint64_t)v99 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v86 = v85 - (void)v99;
    if (v85 >= (unint64_t)v99)
    {
      unint64_t v87 = v86 + 2;
      if (v86 <= 0xFFFFFFFFFFFFFFFDLL && v87 <= v100)
      {
        *(_WORD *)((char *)v99 + v86) = 2871;
        goto LABEL_94;
      }
      unint64_t v83 = 0;
    }
    unint64_t v87 = 0;
LABEL_94:
    unint64_t v89 = (char *)(((unint64_t)v84 + v87 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v89 >= (char *)v84 + v87)
    {
      unint64_t v87 = v89 - (char *)v84 + 8;
      if ((unint64_t)(v89 - (char *)v84) > 0xFFFFFFFFFFFFFFF7 || v87 > v83) {
        return 17;
      }
      *(void *)unint64_t v89 = a3;
    }
    if (v83)
    {
      unint64_t v91 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v92 = *(void *)(a1 + 64);
      if (v91 + 16 >= v92) {
        unint64_t v91 = 0;
      }
      if (v87 <= 0x10) {
        unint64_t v87 = 16;
      }
      unint64_t v93 = v91 + v87;
      if (v92 <= v93) {
        unint64_t v93 = 0;
      }
      *(void *)(a1 + 80) = v93;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v93) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v96, v7);
  if (!v98) {
    return 15;
  }
  unint64_t v9 = v96;
  unint64_t v10 = v97;
  unint64_t v99 = v96;
  unint64_t v100 = v97;
  unint64_t v101 = 0;
  unint64_t v11 = ((unint64_t)v96 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v96;
  if (v11 < (unint64_t)v96)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v97)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v100 = 0;
    }
    else
    {
      *(_WORD *)((char *)v96 + v12) = 1053;
      unint64_t v101 = v12 + 2;
    }
  }
  unint64_t v15 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - ((void)v9 + v13);
  if (v15 >= (unint64_t)v9 + v13)
  {
    unint64_t v17 = v15 - (void)v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v100 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v17) = *(_DWORD *)a2;
      unint64_t v101 = v18;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - ((void)v9 + v13);
  if (v20 >= (unint64_t)v9 + v13)
  {
    unint64_t v22 = v20 - (void)v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v100 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v22) = *((_DWORD *)a2 + 1);
      unint64_t v101 = v23;
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v25 >= (char *)v9 + v13)
  {
    BOOL v26 = (char *)(v25 - (char *)v9);
    if ((unint64_t)(v25 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v26 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v100 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v25 = *((_DWORD *)a2 + 2);
      unint64_t v101 = (unint64_t)(v26 + 4);
      unint64_t v13 = (unint64_t)(v26 + 4);
    }
  }
  unint64_t v27 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v27 >= (char *)v9 + v13)
  {
    unint64_t v28 = (char *)(v27 - (char *)v9);
    if ((unint64_t)(v27 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v28 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v100 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v27 = *((_DWORD *)a2 + 3);
      unint64_t v101 = (unint64_t)(v28 + 4);
      unint64_t v13 = (unint64_t)(v28 + 4);
    }
  }
  unint64_t v29 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v29 >= (char *)v9 + v13)
  {
    unint64_t v30 = (char *)(v29 - (char *)v9);
    if ((unint64_t)(v29 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v30 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v100 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v29 = *((_DWORD *)a2 + 4);
      unint64_t v101 = (unint64_t)(v30 + 4);
      unint64_t v13 = (unint64_t)(v30 + 4);
    }
  }
  unint64_t v31 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v31 >= (char *)v9 + v13)
  {
    unint64_t v32 = (char *)(v31 - (char *)v9);
    if ((unint64_t)(v31 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v32 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v100 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v31 = *((_DWORD *)a2 + 5);
      unint64_t v101 = (unint64_t)(v32 + 4);
      unint64_t v13 = (unint64_t)(v32 + 4);
    }
  }
  unint64_t v33 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v33 >= (char *)v9 + v13)
  {
    unint64_t v34 = (char *)(v33 - (char *)v9);
    if ((unint64_t)(v33 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v100 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v33 = *((_DWORD *)a2 + 6);
      unint64_t v101 = (unint64_t)(v34 + 4);
      unint64_t v13 = (unint64_t)(v34 + 4);
    }
  }
  unint64_t v35 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v35 >= (char *)v9 + v13)
  {
    unint64_t v36 = (char *)(v35 - (char *)v9);
    if ((unint64_t)(v35 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v36 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v100 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v35 = *((_DWORD *)a2 + 7);
      unint64_t v101 = (unint64_t)(v36 + 4);
      unint64_t v13 = (unint64_t)(v36 + 4);
    }
  }
  unint64_t v37 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v37 >= (char *)v9 + v13)
  {
    unint64_t v38 = (char *)(v37 - (char *)v9);
    if ((unint64_t)(v37 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v38 + 4) > v10)
    {
      unint64_t v100 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v37 = *((_DWORD *)a2 + 8);
      unint64_t v101 = (unint64_t)(v38 + 4);
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v99, *a2[5], (size_t)a2[5][1]);
  if (v100)
  {
    uint64_t v39 = v101;
    unint64_t v40 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v41 = *(void *)(a1 + 64);
    if (v40 + 16 >= v41) {
      unint64_t v40 = 0;
    }
    if (v101 <= 0x10) {
      uint64_t v39 = 16;
    }
    unint64_t v42 = v40 + v39;
    if (v41 <= v42) {
      unint64_t v42 = 0;
    }
    *(void *)(a1 + 80) = v42;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v42) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  if (!v98)
  {
    __break(1u);
    goto LABEL_121;
  }
  unint64_t v44 = ((unint64_t)v96 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v45 = v44 - (void)v96;
  if (v44 < (unint64_t)v96)
  {
    unint64_t v46 = 0;
  }
  else
  {
    unint64_t v46 = 0;
    if (v45 <= 0xFFFFFFFFFFFFFFFDLL && v45 + 2 <= v97)
    {
      *(_WORD *)((char *)v96 + v45) = 2870;
      unint64_t v46 = v45 + 2;
    }
  }
  unint64_t v47 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v48 = *(void *)(a1 + 64);
  if (v47 + 16 >= v48) {
    unint64_t v47 = 0;
  }
  if (v46 <= 0x10) {
    unint64_t v46 = 16;
  }
  unint64_t v49 = v47 + v46;
  if (v48 <= v49) {
    unint64_t v49 = 0;
  }
  *(void *)(a1 + 80) = v49;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v49);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v95, (uint64_t **)(a1 + 8));
  unint64_t v50 = v95;
  int v51 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v51 = 1053;
  *((void *)v51 + 1) = a3;
  *((void *)v51 + 66) = (char *)v51 + 16;
  *((void *)v51 + 67) = 512;
  *((void *)v51 + 68) = 0;
  *((void *)v51 + 70) = 0;
  *((void *)v51 + 69) = 0;
  IPC::Encoder::encodeHeader(v51);
  unint64_t v99 = v51;
  int v52 = *(_DWORD *)a2;
  unint64_t v53 = (_DWORD *)IPC::Encoder::grow(v51, 4uLL, 4);
  if (v54 <= 3)
  {
LABEL_121:
    __break(0xC471u);
    JUMPOUT(0x1990978DCLL);
  }
  _DWORD *v53 = v52;
  int v55 = *((_DWORD *)a2 + 1);
  unint64_t v56 = (_DWORD *)IPC::Encoder::grow(v51, 4uLL, 4);
  if (v57 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990978FCLL);
  }
  *unint64_t v56 = v55;
  int v58 = *((_DWORD *)a2 + 2);
  unint64_t v59 = (_DWORD *)IPC::Encoder::grow(v51, 4uLL, 4);
  if (v60 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909791CLL);
  }
  _DWORD *v59 = v58;
  int v61 = *((_DWORD *)a2 + 3);
  unint64_t v62 = (_DWORD *)IPC::Encoder::grow(v51, 4uLL, 4);
  if (v63 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909793CLL);
  }
  _DWORD *v62 = v61;
  int v64 = *((_DWORD *)a2 + 4);
  unint64_t v65 = (_DWORD *)IPC::Encoder::grow(v51, 4uLL, 4);
  if (v66 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909795CLL);
  }
  *unint64_t v65 = v64;
  int v67 = *((_DWORD *)a2 + 5);
  unint64_t v68 = (_DWORD *)IPC::Encoder::grow(v51, 4uLL, 4);
  if (v69 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909797CLL);
  }
  *unint64_t v68 = v67;
  int v70 = *((_DWORD *)a2 + 6);
  unint64_t v71 = (_DWORD *)IPC::Encoder::grow(v51, 4uLL, 4);
  if (v72 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909799CLL);
  }
  *unint64_t v71 = v70;
  int v73 = *((_DWORD *)a2 + 7);
  unint64_t v74 = (_DWORD *)IPC::Encoder::grow(v51, 4uLL, 4);
  if (v75 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990979BCLL);
  }
  _DWORD *v74 = v73;
  int v76 = *((_DWORD *)a2 + 8);
  unint64_t v77 = (_DWORD *)IPC::Encoder::grow(v51, 4uLL, 4);
  if (v78 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990979DCLL);
  }
  *unint64_t v77 = v76;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v51, *a2[5], (size_t)a2[5][1]);
  uint64_t v43 = IPC::Connection::sendMessageImpl((uint64_t)v50, (uint64_t *)&v99, 1, 0);
  unint64_t v80 = v99;
  unint64_t v99 = 0;
  if (v80)
  {
    IPC::Encoder::~Encoder(v80, v79);
    WTF::fastFree(v81, v82);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v95);
  return v43;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexImage3D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v116, v7);
    if (!v118) {
      return 15;
    }
    unint64_t v98 = v116;
    unint64_t v97 = v117;
    unint64_t v99 = (v116 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v100 = v99 - v116;
    if (v99 >= v116)
    {
      unint64_t v101 = v100 + 2;
      if (v100 <= 0xFFFFFFFFFFFFFFFDLL && v101 <= v117)
      {
        *(_WORD *)(v116 + v100) = 2871;
        goto LABEL_106;
      }
      unint64_t v97 = 0;
    }
    unint64_t v101 = 0;
LABEL_106:
    unint64_t v103 = (void *)((v98 + v101 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v103 >= v98 + v101)
    {
      unint64_t v101 = (unint64_t)v103 - v98 + 8;
      if ((unint64_t)v103 - v98 > 0xFFFFFFFFFFFFFFF7 || v101 > v97) {
        return 17;
      }
      *unint64_t v103 = a3;
    }
    if (v97)
    {
      unint64_t v105 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v106 = *(void *)(a1 + 64);
      if (v105 + 16 >= v106) {
        unint64_t v105 = 0;
      }
      if (v101 <= 0x10) {
        unint64_t v101 = 16;
      }
      unint64_t v107 = v105 + v101;
      if (v106 <= v107) {
        unint64_t v107 = 0;
      }
      *(void *)(a1 + 80) = v107;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v107) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v116, v7);
  if (!v118) {
    return 15;
  }
  unint64_t v9 = v116;
  unint64_t v10 = v117;
  unint64_t v11 = (v116 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v116;
  if (v11 >= v116)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v117)
    {
      *(_WORD *)(v116 + v12) = 1054;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v109 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v109 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v109 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v110 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v109)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v110 = v109;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v110 = v109;
  }
  unint64_t v32 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v32 >= v9 + v13;
  unint64_t v33 = v32 - (v9 + v13);
  if (v26)
  {
    unint64_t v111 = 0;
    unint64_t v34 = v33 + v13;
    if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= v110)
    {
      *(_DWORD *)(v9 + v34) = a2[4];
      unint64_t v111 = v110;
      unint64_t v13 = v34 + 4;
    }
  }
  else
  {
    unint64_t v111 = v110;
  }
  unint64_t v35 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v35 >= v9 + v13;
  unint64_t v36 = v35 - (v9 + v13);
  if (v26)
  {
    unint64_t v112 = 0;
    unint64_t v37 = v36 + v13;
    if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= v111)
    {
      *(_DWORD *)(v9 + v37) = a2[5];
      unint64_t v112 = v111;
      unint64_t v13 = v37 + 4;
    }
  }
  else
  {
    unint64_t v112 = v111;
  }
  unint64_t v38 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v38 >= v9 + v13;
  unint64_t v39 = v38 - (v9 + v13);
  if (v26)
  {
    unint64_t v113 = 0;
    unint64_t v40 = v39 + v13;
    if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= v112)
    {
      *(_DWORD *)(v9 + v40) = a2[6];
      unint64_t v113 = v112;
      unint64_t v13 = v40 + 4;
    }
  }
  else
  {
    unint64_t v113 = v112;
  }
  unint64_t v41 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v42 = v41 - (v9 + v13);
  if (v41 < v9 + v13)
  {
    unint64_t v43 = v113;
  }
  else
  {
    unint64_t v43 = 0;
    unint64_t v44 = v42 + v13;
    if (v44 <= 0xFFFFFFFFFFFFFFFBLL && v44 + 4 <= v113)
    {
      *(_DWORD *)(v9 + v44) = a2[7];
      unint64_t v43 = v113;
      unint64_t v13 = v44 + 4;
    }
  }
  unint64_t v45 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v45 >= v9 + v13;
  unint64_t v46 = v45 - (v9 + v13);
  if (v26)
  {
    unint64_t v114 = 0;
    unint64_t v47 = v46 + v13;
    if (v47 <= 0xFFFFFFFFFFFFFFFBLL && v47 + 4 <= v43)
    {
      *(_DWORD *)(v9 + v47) = a2[8];
      unint64_t v114 = v43;
      unint64_t v13 = v47 + 4;
    }
  }
  else
  {
    unint64_t v114 = v43;
  }
  unint64_t v48 = (void *)((v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v48 >= v9 + v13)
  {
    unint64_t v49 = (char *)v48 - v9;
    if ((unint64_t)v48 - v9 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_72;
    }
    unint64_t v13 = (unint64_t)(v49 + 8);
    if ((unint64_t)(v49 + 8) > v114) {
      goto LABEL_72;
    }
    *unint64_t v48 = *((void *)a2 + 5);
  }
  if (v114)
  {
    unint64_t v50 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = *(void *)(a1 + 64);
    if (v50 + 16 >= v51) {
      unint64_t v50 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v52 = v50 + v13;
    if (v51 <= v52) {
      unint64_t v53 = 0;
    }
    else {
      unint64_t v53 = v52;
    }
    *(void *)(a1 + 80) = v53;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v53) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v54 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v54;
  }
LABEL_72:
  if (!v118)
  {
    __break(1u);
    goto LABEL_127;
  }
  unint64_t v55 = (v116 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v56 = v55 - v116;
  if (v55 < v116)
  {
    unint64_t v57 = 0;
  }
  else
  {
    unint64_t v57 = 0;
    if (v56 <= 0xFFFFFFFFFFFFFFFDLL && v56 + 2 <= v117)
    {
      *(_WORD *)(v116 + v56) = 2870;
      unint64_t v57 = v56 + 2;
    }
  }
  unint64_t v58 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v59 = *(void *)(a1 + 64);
  if (v58 + 16 >= v59) {
    unint64_t v58 = 0;
  }
  if (v57 <= 0x10) {
    unint64_t v57 = 16;
  }
  unint64_t v60 = v58 + v57;
  if (v59 <= v60) {
    unint64_t v60 = 0;
  }
  *(void *)(a1 + 80) = v60;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v60);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v115, (uint64_t **)(a1 + 8));
  int v61 = v115;
  unint64_t v62 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v62 = 1054;
  *((void *)v62 + 1) = a3;
  *((void *)v62 + 66) = (char *)v62 + 16;
  *((void *)v62 + 67) = 512;
  *((void *)v62 + 68) = 0;
  *((void *)v62 + 70) = 0;
  *((void *)v62 + 69) = 0;
  IPC::Encoder::encodeHeader(v62);
  v119 = v62;
  int v63 = *a2;
  int v64 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v65 <= 3)
  {
LABEL_127:
    __break(0xC471u);
    JUMPOUT(0x199098118);
  }
  *int v64 = v63;
  int v66 = a2[1];
  int v67 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v68 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199098138);
  }
  _DWORD *v67 = v66;
  int v69 = a2[2];
  int v70 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v71 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199098158);
  }
  *int v70 = v69;
  int v72 = a2[3];
  int v73 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v74 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199098178);
  }
  *int v73 = v72;
  int v75 = a2[4];
  int v76 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v77 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199098198);
  }
  *int v76 = v75;
  int v78 = a2[5];
  char v79 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v80 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990981B8);
  }
  *char v79 = v78;
  int v81 = a2[6];
  unint64_t v82 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v83 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990981D8);
  }
  _DWORD *v82 = v81;
  int v84 = a2[7];
  unint64_t v85 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v86 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990981F8);
  }
  *unint64_t v85 = v84;
  int v87 = a2[8];
  unint64_t v88 = (_DWORD *)IPC::Encoder::grow(v62, 4uLL, 4);
  if (v89 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199098218);
  }
  *unint64_t v88 = v87;
  uint64_t v90 = *((void *)a2 + 5);
  unint64_t v91 = (void *)IPC::Encoder::grow(v62, 8uLL, 8);
  if (v92 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x199098238);
  }
  void *v91 = v90;
  uint64_t v54 = IPC::Connection::sendMessageImpl((uint64_t)v61, (uint64_t *)&v119, 1, 0);
  unint64_t v94 = v119;
  v119 = 0;
  if (v94)
  {
    IPC::Encoder::~Encoder(v94, v93);
    WTF::fastFree(v95, v96);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v115);
  return v54;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexSubImage3D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, const void ***a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v104, v7);
    if (!(_BYTE)v106) {
      return 15;
    }
    unint64_t v89 = v104;
    unint64_t v88 = v105;
    unint64_t v90 = ((unint64_t)v104 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v91 = v90 - (void)v104;
    if (v90 >= (unint64_t)v104)
    {
      unint64_t v92 = v91 + 2;
      if (v91 <= 0xFFFFFFFFFFFFFFFDLL && v92 <= v105)
      {
        *(_WORD *)((char *)v104 + v91) = 2871;
        goto LABEL_99;
      }
      unint64_t v88 = 0;
    }
    unint64_t v92 = 0;
LABEL_99:
    unint64_t v94 = (char *)(((unint64_t)v89 + v92 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v94 >= (char *)v89 + v92)
    {
      unint64_t v92 = v94 - (char *)v89 + 8;
      if ((unint64_t)(v94 - (char *)v89) > 0xFFFFFFFFFFFFFFF7 || v92 > v88) {
        return 17;
      }
      *(void *)unint64_t v94 = a3;
    }
    if (v88)
    {
      unint64_t v96 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v97 = *(void *)(a1 + 64);
      if (v96 + 16 >= v97) {
        unint64_t v96 = 0;
      }
      if (v92 <= 0x10) {
        unint64_t v92 = 16;
      }
      unint64_t v98 = v96 + v92;
      if (v97 <= v98) {
        unint64_t v98 = 0;
      }
      *(void *)(a1 + 80) = v98;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v98) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v101, v7);
  if (!v103) {
    return 15;
  }
  unint64_t v9 = v101;
  unint64_t v10 = v102;
  unint64_t v104 = v101;
  unint64_t v105 = v102;
  unint64_t v106 = 0;
  unint64_t v11 = ((unint64_t)v101 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v101;
  if (v11 < (unint64_t)v101)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v102)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_WORD *)((char *)v101 + v12) = 1061;
      unint64_t v106 = v12 + 2;
    }
  }
  unint64_t v15 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - ((void)v9 + v13);
  if (v15 >= (unint64_t)v9 + v13)
  {
    unint64_t v17 = v15 - (void)v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v17) = *(_DWORD *)a2;
      unint64_t v106 = v18;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - ((void)v9 + v13);
  if (v20 >= (unint64_t)v9 + v13)
  {
    unint64_t v22 = v20 - (void)v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v22) = *((_DWORD *)a2 + 1);
      unint64_t v106 = v23;
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v25 >= (char *)v9 + v13)
  {
    BOOL v26 = (char *)(v25 - (char *)v9);
    if ((unint64_t)(v25 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v26 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v25 = *((_DWORD *)a2 + 2);
      unint64_t v106 = (unint64_t)(v26 + 4);
      unint64_t v13 = (unint64_t)(v26 + 4);
    }
  }
  unint64_t v27 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v27 >= (char *)v9 + v13)
  {
    unint64_t v28 = (char *)(v27 - (char *)v9);
    if ((unint64_t)(v27 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v28 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v27 = *((_DWORD *)a2 + 3);
      unint64_t v106 = (unint64_t)(v28 + 4);
      unint64_t v13 = (unint64_t)(v28 + 4);
    }
  }
  unint64_t v29 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v29 >= (char *)v9 + v13)
  {
    unint64_t v30 = (char *)(v29 - (char *)v9);
    if ((unint64_t)(v29 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v30 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v29 = *((_DWORD *)a2 + 4);
      unint64_t v106 = (unint64_t)(v30 + 4);
      unint64_t v13 = (unint64_t)(v30 + 4);
    }
  }
  unint64_t v31 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v31 >= (char *)v9 + v13)
  {
    unint64_t v32 = (char *)(v31 - (char *)v9);
    if ((unint64_t)(v31 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v32 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v31 = *((_DWORD *)a2 + 5);
      unint64_t v106 = (unint64_t)(v32 + 4);
      unint64_t v13 = (unint64_t)(v32 + 4);
    }
  }
  unint64_t v33 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v33 >= (char *)v9 + v13)
  {
    unint64_t v34 = (char *)(v33 - (char *)v9);
    if ((unint64_t)(v33 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v33 = *((_DWORD *)a2 + 6);
      unint64_t v106 = (unint64_t)(v34 + 4);
      unint64_t v13 = (unint64_t)(v34 + 4);
    }
  }
  unint64_t v35 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v35 >= (char *)v9 + v13)
  {
    unint64_t v36 = (char *)(v35 - (char *)v9);
    if ((unint64_t)(v35 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v36 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v35 = *((_DWORD *)a2 + 7);
      unint64_t v106 = (unint64_t)(v36 + 4);
      unint64_t v13 = (unint64_t)(v36 + 4);
    }
  }
  unint64_t v37 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v37 >= (char *)v9 + v13)
  {
    unint64_t v38 = (char *)(v37 - (char *)v9);
    if ((unint64_t)(v37 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v38 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v37 = *((_DWORD *)a2 + 8);
      unint64_t v106 = (unint64_t)(v38 + 4);
      unint64_t v13 = (unint64_t)(v38 + 4);
    }
  }
  unint64_t v39 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v39 >= (char *)v9 + v13)
  {
    unint64_t v40 = (char *)(v39 - (char *)v9);
    if ((unint64_t)(v39 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v40 + 4) > v10)
    {
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v39 = *((_DWORD *)a2 + 9);
      unint64_t v106 = (unint64_t)(v40 + 4);
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v104, *a2[5], (size_t)a2[5][1]);
  if (v105)
  {
    uint64_t v41 = v106;
    unint64_t v42 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v43 = *(void *)(a1 + 64);
    if (v42 + 16 >= v43) {
      unint64_t v42 = 0;
    }
    if (v106 <= 0x10) {
      uint64_t v41 = 16;
    }
    unint64_t v44 = v42 + v41;
    if (v43 <= v44) {
      unint64_t v44 = 0;
    }
    *(void *)(a1 + 80) = v44;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v44) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  if (!v103)
  {
    __break(1u);
    goto LABEL_127;
  }
  unint64_t v46 = ((unint64_t)v101 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v47 = v46 - (void)v101;
  if (v46 < (unint64_t)v101)
  {
    unint64_t v48 = 0;
  }
  else
  {
    unint64_t v48 = 0;
    if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v102)
    {
      *(_WORD *)((char *)v101 + v47) = 2870;
      unint64_t v48 = v47 + 2;
    }
  }
  unint64_t v49 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v50 = *(void *)(a1 + 64);
  if (v49 + 16 >= v50) {
    unint64_t v49 = 0;
  }
  if (v48 <= 0x10) {
    unint64_t v48 = 16;
  }
  unint64_t v51 = v49 + v48;
  if (v50 <= v51) {
    unint64_t v51 = 0;
  }
  *(void *)(a1 + 80) = v51;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v51);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v100, (uint64_t **)(a1 + 8));
  unint64_t v52 = v100;
  unint64_t v53 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v53 = 1061;
  *((void *)v53 + 1) = a3;
  *((void *)v53 + 66) = (char *)v53 + 16;
  *((void *)v53 + 67) = 512;
  *((void *)v53 + 68) = 0;
  *((void *)v53 + 70) = 0;
  *((void *)v53 + 69) = 0;
  IPC::Encoder::encodeHeader(v53);
  unint64_t v104 = v53;
  int v54 = *(_DWORD *)a2;
  unint64_t v55 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v56 <= 3)
  {
LABEL_127:
    __break(0xC471u);
    JUMPOUT(0x199098A28);
  }
  *unint64_t v55 = v54;
  int v57 = *((_DWORD *)a2 + 1);
  unint64_t v58 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v59 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199098A48);
  }
  *unint64_t v58 = v57;
  int v60 = *((_DWORD *)a2 + 2);
  int v61 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v62 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199098A68);
  }
  _DWORD *v61 = v60;
  int v63 = *((_DWORD *)a2 + 3);
  int v64 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v65 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199098A88);
  }
  *int v64 = v63;
  int v66 = *((_DWORD *)a2 + 4);
  int v67 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v68 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199098AA8);
  }
  _DWORD *v67 = v66;
  int v69 = *((_DWORD *)a2 + 5);
  int v70 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v71 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199098AC8);
  }
  *int v70 = v69;
  int v72 = *((_DWORD *)a2 + 6);
  int v73 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v74 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199098AE8);
  }
  *int v73 = v72;
  int v75 = *((_DWORD *)a2 + 7);
  int v76 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v77 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199098B08);
  }
  *int v76 = v75;
  int v78 = *((_DWORD *)a2 + 8);
  char v79 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v80 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199098B28);
  }
  *char v79 = v78;
  int v81 = *((_DWORD *)a2 + 9);
  unint64_t v82 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v83 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199098B48);
  }
  _DWORD *v82 = v81;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v53, *a2[5], (size_t)a2[5][1]);
  uint64_t v45 = IPC::Connection::sendMessageImpl((uint64_t)v52, (uint64_t *)&v104, 1, 0);
  unint64_t v85 = v104;
  unint64_t v104 = 0;
  if (v85)
  {
    IPC::Encoder::~Encoder(v85, v84);
    WTF::fastFree(v86, v87);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v100);
  return v45;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexSubImage3D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v123, v7);
    if (!v125) {
      return 15;
    }
    unint64_t v103 = v123;
    unint64_t v102 = v124;
    unint64_t v104 = (v123 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v105 = v104 - v123;
    if (v104 >= v123)
    {
      unint64_t v106 = v105 + 2;
      if (v105 <= 0xFFFFFFFFFFFFFFFDLL && v106 <= v124)
      {
        *(_WORD *)(v123 + v105) = 2871;
        goto LABEL_113;
      }
      unint64_t v102 = 0;
    }
    unint64_t v106 = 0;
LABEL_113:
    v108 = (void *)((v103 + v106 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v108 >= v103 + v106)
    {
      unint64_t v106 = (unint64_t)v108 - v103 + 8;
      if ((unint64_t)v108 - v103 > 0xFFFFFFFFFFFFFFF7 || v106 > v102) {
        return 17;
      }
      void *v108 = a3;
    }
    if (v102)
    {
      unint64_t v110 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v111 = *(void *)(a1 + 64);
      if (v110 + 16 >= v111) {
        unint64_t v110 = 0;
      }
      if (v106 <= 0x10) {
        unint64_t v106 = 16;
      }
      unint64_t v112 = v110 + v106;
      if (v111 <= v112) {
        unint64_t v112 = 0;
      }
      *(void *)(a1 + 80) = v112;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v112) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v123, v7);
  if (!v125) {
    return 15;
  }
  unint64_t v9 = v123;
  unint64_t v10 = v124;
  unint64_t v11 = (v123 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v123;
  if (v11 >= v123)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v124)
    {
      *(_WORD *)(v123 + v12) = 1062;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v114 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v114 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v114 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v115 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v114)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v115 = v114;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v115 = v114;
  }
  unint64_t v32 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v32 >= v9 + v13;
  unint64_t v33 = v32 - (v9 + v13);
  if (v26)
  {
    unint64_t v116 = 0;
    unint64_t v34 = v33 + v13;
    if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= v115)
    {
      *(_DWORD *)(v9 + v34) = a2[4];
      unint64_t v116 = v115;
      unint64_t v13 = v34 + 4;
    }
  }
  else
  {
    unint64_t v116 = v115;
  }
  unint64_t v35 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v35 >= v9 + v13;
  unint64_t v36 = v35 - (v9 + v13);
  if (v26)
  {
    unint64_t v117 = 0;
    unint64_t v37 = v36 + v13;
    if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= v116)
    {
      *(_DWORD *)(v9 + v37) = a2[5];
      unint64_t v117 = v116;
      unint64_t v13 = v37 + 4;
    }
  }
  else
  {
    unint64_t v117 = v116;
  }
  unint64_t v38 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v38 >= v9 + v13;
  unint64_t v39 = v38 - (v9 + v13);
  if (v26)
  {
    unint64_t v118 = 0;
    unint64_t v40 = v39 + v13;
    if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= v117)
    {
      *(_DWORD *)(v9 + v40) = a2[6];
      unint64_t v118 = v117;
      unint64_t v13 = v40 + 4;
    }
  }
  else
  {
    unint64_t v118 = v117;
  }
  unint64_t v41 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v41 >= v9 + v13;
  unint64_t v42 = v41 - (v9 + v13);
  if (v26)
  {
    unint64_t v119 = 0;
    unint64_t v43 = v42 + v13;
    if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= v118)
    {
      *(_DWORD *)(v9 + v43) = a2[7];
      unint64_t v119 = v118;
      unint64_t v13 = v43 + 4;
    }
  }
  else
  {
    unint64_t v119 = v118;
  }
  unint64_t v44 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v44 >= v9 + v13;
  unint64_t v45 = v44 - (v9 + v13);
  if (v26)
  {
    unint64_t v120 = 0;
    unint64_t v46 = v45 + v13;
    if (v46 <= 0xFFFFFFFFFFFFFFFBLL && v46 + 4 <= v119)
    {
      *(_DWORD *)(v9 + v46) = a2[8];
      unint64_t v120 = v119;
      unint64_t v13 = v46 + 4;
    }
  }
  else
  {
    unint64_t v120 = v119;
  }
  unint64_t v47 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v47 >= v9 + v13;
  unint64_t v48 = v47 - (v9 + v13);
  if (v26)
  {
    unint64_t v121 = 0;
    unint64_t v49 = v48 + v13;
    if (v49 <= 0xFFFFFFFFFFFFFFFBLL && v49 + 4 <= v120)
    {
      *(_DWORD *)(v9 + v49) = a2[9];
      unint64_t v121 = v120;
      unint64_t v13 = v49 + 4;
    }
  }
  else
  {
    unint64_t v121 = v120;
  }
  unint64_t v50 = (void *)((v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v50 >= v9 + v13)
  {
    unint64_t v51 = (char *)v50 - v9;
    if ((unint64_t)v50 - v9 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_78;
    }
    unint64_t v13 = (unint64_t)(v51 + 8);
    if ((unint64_t)(v51 + 8) > v121) {
      goto LABEL_78;
    }
    *unint64_t v50 = *((void *)a2 + 5);
  }
  if (v121)
  {
    unint64_t v52 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v53 = *(void *)(a1 + 64);
    if (v52 + 16 >= v53) {
      unint64_t v52 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v54 = v52 + v13;
    if (v53 <= v54) {
      unint64_t v55 = 0;
    }
    else {
      unint64_t v55 = v54;
    }
    *(void *)(a1 + 80) = v55;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v55) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v56 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v56;
  }
LABEL_78:
  if (!v125)
  {
    __break(1u);
    goto LABEL_134;
  }
  unint64_t v57 = (v123 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v58 = v57 - v123;
  if (v57 < v123)
  {
    unint64_t v59 = 0;
  }
  else
  {
    unint64_t v59 = 0;
    if (v58 <= 0xFFFFFFFFFFFFFFFDLL && v58 + 2 <= v124)
    {
      *(_WORD *)(v123 + v58) = 2870;
      unint64_t v59 = v58 + 2;
    }
  }
  unint64_t v60 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v61 = *(void *)(a1 + 64);
  if (v60 + 16 >= v61) {
    unint64_t v60 = 0;
  }
  if (v59 <= 0x10) {
    unint64_t v59 = 16;
  }
  unint64_t v62 = v60 + v59;
  if (v61 <= v62) {
    unint64_t v62 = 0;
  }
  *(void *)(a1 + 80) = v62;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v62);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v122, (uint64_t **)(a1 + 8));
  int v63 = v122;
  int v64 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v64 = 1062;
  *((void *)v64 + 1) = a3;
  *((void *)v64 + 66) = (char *)v64 + 16;
  *((void *)v64 + 67) = 512;
  *((void *)v64 + 68) = 0;
  *((void *)v64 + 70) = 0;
  *((void *)v64 + 69) = 0;
  IPC::Encoder::encodeHeader(v64);
  v126 = v64;
  int v65 = *a2;
  int v66 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v67 <= 3)
  {
LABEL_134:
    __break(0xC471u);
    JUMPOUT(0x1990992E4);
  }
  _DWORD *v66 = v65;
  int v68 = a2[1];
  int v69 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v70 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199099304);
  }
  *int v69 = v68;
  int v71 = a2[2];
  int v72 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v73 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199099324);
  }
  _DWORD *v72 = v71;
  int v74 = a2[3];
  int v75 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v76 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199099344);
  }
  _DWORD *v75 = v74;
  int v77 = a2[4];
  int v78 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v79 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199099364);
  }
  _DWORD *v78 = v77;
  int v80 = a2[5];
  int v81 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v82 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199099384);
  }
  _DWORD *v81 = v80;
  int v83 = a2[6];
  int v84 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v85 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990993A4);
  }
  _DWORD *v84 = v83;
  int v86 = a2[7];
  int v87 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v88 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990993C4);
  }
  *int v87 = v86;
  int v89 = a2[8];
  unint64_t v90 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v91 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990993E4);
  }
  _DWORD *v90 = v89;
  int v92 = a2[9];
  unint64_t v93 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v94 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199099404);
  }
  *unint64_t v93 = v92;
  uint64_t v95 = *((void *)a2 + 5);
  unint64_t v96 = (void *)IPC::Encoder::grow(v64, 8uLL, 8);
  if (v97 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x199099424);
  }
  *unint64_t v96 = v95;
  uint64_t v56 = IPC::Connection::sendMessageImpl((uint64_t)v63, (uint64_t *)&v126, 1, 0);
  unint64_t v99 = v126;
  v126 = 0;
  if (v99)
  {
    IPC::Encoder::~Encoder(v99, v98);
    WTF::fastFree(v100, v101);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v122);
  return v56;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CopyTexSubImage3D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v109, v7);
    if (!v111) {
      return 15;
    }
    unint64_t v91 = v109;
    unint64_t v90 = v110;
    unint64_t v92 = (v109 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v93 = v92 - v109;
    if (v92 >= v109)
    {
      unint64_t v94 = v93 + 2;
      if (v93 <= 0xFFFFFFFFFFFFFFFDLL && v94 <= v110)
      {
        *(_WORD *)(v109 + v93) = 2871;
        goto LABEL_101;
      }
      unint64_t v90 = 0;
    }
    unint64_t v94 = 0;
LABEL_101:
    unint64_t v96 = (void *)((v91 + v94 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v96 >= v91 + v94)
    {
      unint64_t v94 = (unint64_t)v96 - v91 + 8;
      if ((unint64_t)v96 - v91 > 0xFFFFFFFFFFFFFFF7 || v94 > v90) {
        return 17;
      }
      *unint64_t v96 = a3;
    }
    if (v90)
    {
      unint64_t v98 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v99 = *(void *)(a1 + 64);
      if (v98 + 16 >= v99) {
        unint64_t v98 = 0;
      }
      if (v94 <= 0x10) {
        unint64_t v94 = 16;
      }
      unint64_t v100 = v98 + v94;
      if (v99 <= v100) {
        unint64_t v100 = 0;
      }
      *(void *)(a1 + 80) = v100;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v100) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v109, v7);
  if (!v111) {
    return 15;
  }
  unint64_t v9 = v109;
  unint64_t v10 = v110;
  unint64_t v11 = (v109 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v109;
  if (v11 >= v109)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v110)
    {
      *(_WORD *)(v109 + v12) = 955;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v102 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v102 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v102 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v103 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v102)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v103 = v102;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v103 = v102;
  }
  unint64_t v32 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v32 >= v9 + v13;
  unint64_t v33 = v32 - (v9 + v13);
  if (v26)
  {
    unint64_t v104 = 0;
    unint64_t v34 = v33 + v13;
    if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= v103)
    {
      *(_DWORD *)(v9 + v34) = a2[4];
      unint64_t v104 = v103;
      unint64_t v13 = v34 + 4;
    }
  }
  else
  {
    unint64_t v104 = v103;
  }
  unint64_t v35 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v35 >= v9 + v13;
  unint64_t v36 = v35 - (v9 + v13);
  if (v26)
  {
    unint64_t v105 = 0;
    unint64_t v37 = v36 + v13;
    if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= v104)
    {
      *(_DWORD *)(v9 + v37) = a2[5];
      unint64_t v105 = v104;
      unint64_t v13 = v37 + 4;
    }
  }
  else
  {
    unint64_t v105 = v104;
  }
  unint64_t v38 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v38 >= v9 + v13;
  unint64_t v39 = v38 - (v9 + v13);
  if (v26)
  {
    unint64_t v106 = 0;
    unint64_t v40 = v39 + v13;
    if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= v105)
    {
      *(_DWORD *)(v9 + v40) = a2[6];
      unint64_t v106 = v105;
      unint64_t v13 = v40 + 4;
    }
  }
  else
  {
    unint64_t v106 = v105;
  }
  unint64_t v41 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v41 >= v9 + v13;
  unint64_t v42 = v41 - (v9 + v13);
  if (v26)
  {
    unint64_t v107 = 0;
    unint64_t v43 = v42 + v13;
    if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= v106)
    {
      *(_DWORD *)(v9 + v43) = a2[7];
      unint64_t v107 = v106;
      unint64_t v13 = v43 + 4;
    }
  }
  else
  {
    unint64_t v107 = v106;
  }
  unint64_t v44 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v44 >= v9 + v13)
  {
    unint64_t v45 = (char *)v44 - v9;
    if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_68;
    }
    unint64_t v13 = (unint64_t)(v45 + 4);
    if ((unint64_t)(v45 + 4) > v107) {
      goto LABEL_68;
    }
    _DWORD *v44 = a2[8];
  }
  if (v107)
  {
    unint64_t v46 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = *(void *)(a1 + 64);
    if (v46 + 16 >= v47) {
      unint64_t v46 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v48 = v46 + v13;
    if (v47 <= v48) {
      unint64_t v49 = 0;
    }
    else {
      unint64_t v49 = v48;
    }
    *(void *)(a1 + 80) = v49;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v49) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v50 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v50;
  }
LABEL_68:
  if (!v111)
  {
    __break(1u);
    goto LABEL_122;
  }
  unint64_t v51 = (v109 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v52 = v51 - v109;
  if (v51 < v109)
  {
    unint64_t v53 = 0;
  }
  else
  {
    unint64_t v53 = 0;
    if (v52 <= 0xFFFFFFFFFFFFFFFDLL && v52 + 2 <= v110)
    {
      *(_WORD *)(v109 + v52) = 2870;
      unint64_t v53 = v52 + 2;
    }
  }
  unint64_t v54 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v55 = *(void *)(a1 + 64);
  if (v54 + 16 >= v55) {
    unint64_t v54 = 0;
  }
  if (v53 <= 0x10) {
    unint64_t v53 = 16;
  }
  unint64_t v56 = v54 + v53;
  if (v55 <= v56) {
    unint64_t v56 = 0;
  }
  *(void *)(a1 + 80) = v56;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v56);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v108, (uint64_t **)(a1 + 8));
  unint64_t v57 = v108;
  unint64_t v58 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v58 = 955;
  *((void *)v58 + 1) = a3;
  *((void *)v58 + 66) = (char *)v58 + 16;
  *((void *)v58 + 67) = 512;
  *((void *)v58 + 68) = 0;
  *((void *)v58 + 70) = 0;
  *((void *)v58 + 69) = 0;
  IPC::Encoder::encodeHeader(v58);
  unint64_t v112 = v58;
  int v59 = *a2;
  unint64_t v60 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v61 <= 3)
  {
LABEL_122:
    __break(0xC471u);
    JUMPOUT(0x199099B38);
  }
  _DWORD *v60 = v59;
  int v62 = a2[1];
  int v63 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v64 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199099B58);
  }
  *int v63 = v62;
  int v65 = a2[2];
  int v66 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v67 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199099B78);
  }
  _DWORD *v66 = v65;
  int v68 = a2[3];
  int v69 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v70 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199099B98);
  }
  *int v69 = v68;
  int v71 = a2[4];
  int v72 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v73 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199099BB8);
  }
  _DWORD *v72 = v71;
  int v74 = a2[5];
  int v75 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v76 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199099BD8);
  }
  _DWORD *v75 = v74;
  int v77 = a2[6];
  int v78 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v79 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199099BF8);
  }
  _DWORD *v78 = v77;
  int v80 = a2[7];
  int v81 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v82 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199099C18);
  }
  _DWORD *v81 = v80;
  int v83 = a2[8];
  int v84 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v85 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199099C38);
  }
  _DWORD *v84 = v83;
  uint64_t v50 = IPC::Connection::sendMessageImpl((uint64_t)v57, (uint64_t *)&v112, 1, 0);
  int v87 = v112;
  unint64_t v112 = 0;
  if (v87)
  {
    IPC::Encoder::~Encoder(v87, v86);
    WTF::fastFree(v88, v89);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v108);
  return v50;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexImage3D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, const void ***a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v94, v7);
    if (!(_BYTE)v96) {
      return 15;
    }
    unint64_t v79 = v94;
    unint64_t v78 = v95;
    unint64_t v80 = ((unint64_t)v94 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v81 = v80 - (void)v94;
    if (v80 >= (unint64_t)v94)
    {
      unint64_t v82 = v81 + 2;
      if (v81 <= 0xFFFFFFFFFFFFFFFDLL && v82 <= v95)
      {
        *(_WORD *)((char *)v94 + v81) = 2871;
        goto LABEL_89;
      }
      unint64_t v78 = 0;
    }
    unint64_t v82 = 0;
LABEL_89:
    int v84 = (char *)(((unint64_t)v79 + v82 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v84 >= (char *)v79 + v82)
    {
      unint64_t v82 = v84 - (char *)v79 + 8;
      if ((unint64_t)(v84 - (char *)v79) > 0xFFFFFFFFFFFFFFF7 || v82 > v78) {
        return 17;
      }
      *(void *)int v84 = a3;
    }
    if (v78)
    {
      unint64_t v86 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v87 = *(void *)(a1 + 64);
      if (v86 + 16 >= v87) {
        unint64_t v86 = 0;
      }
      if (v82 <= 0x10) {
        unint64_t v82 = 16;
      }
      unint64_t v88 = v86 + v82;
      if (v87 <= v88) {
        unint64_t v88 = 0;
      }
      *(void *)(a1 + 80) = v88;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v88) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v91, v7);
  if (!v93) {
    return 15;
  }
  unint64_t v9 = v91;
  unint64_t v10 = v92;
  unint64_t v94 = v91;
  unint64_t v95 = v92;
  unint64_t v96 = 0;
  unint64_t v11 = ((unint64_t)v91 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v91;
  if (v11 < (unint64_t)v91)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v92)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_WORD *)((char *)v91 + v12) = 946;
      unint64_t v96 = v12 + 2;
    }
  }
  unint64_t v15 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - ((void)v9 + v13);
  if (v15 >= (unint64_t)v9 + v13)
  {
    unint64_t v17 = v15 - (void)v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v17) = *(_DWORD *)a2;
      unint64_t v96 = v18;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - ((void)v9 + v13);
  if (v20 >= (unint64_t)v9 + v13)
  {
    unint64_t v22 = v20 - (void)v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v22) = *((_DWORD *)a2 + 1);
      unint64_t v96 = v23;
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v25 >= (char *)v9 + v13)
  {
    BOOL v26 = (char *)(v25 - (char *)v9);
    if ((unint64_t)(v25 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v26 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v25 = *((_DWORD *)a2 + 2);
      unint64_t v96 = (unint64_t)(v26 + 4);
      unint64_t v13 = (unint64_t)(v26 + 4);
    }
  }
  unint64_t v27 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v27 >= (char *)v9 + v13)
  {
    unint64_t v28 = (char *)(v27 - (char *)v9);
    if ((unint64_t)(v27 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v28 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v27 = *((_DWORD *)a2 + 3);
      unint64_t v96 = (unint64_t)(v28 + 4);
      unint64_t v13 = (unint64_t)(v28 + 4);
    }
  }
  unint64_t v29 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v29 >= (char *)v9 + v13)
  {
    unint64_t v30 = (char *)(v29 - (char *)v9);
    if ((unint64_t)(v29 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v30 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v29 = *((_DWORD *)a2 + 4);
      unint64_t v96 = (unint64_t)(v30 + 4);
      unint64_t v13 = (unint64_t)(v30 + 4);
    }
  }
  unint64_t v31 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v31 >= (char *)v9 + v13)
  {
    unint64_t v32 = (char *)(v31 - (char *)v9);
    if ((unint64_t)(v31 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v32 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v31 = *((_DWORD *)a2 + 5);
      unint64_t v96 = (unint64_t)(v32 + 4);
      unint64_t v13 = (unint64_t)(v32 + 4);
    }
  }
  unint64_t v33 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v33 >= (char *)v9 + v13)
  {
    unint64_t v34 = (char *)(v33 - (char *)v9);
    if ((unint64_t)(v33 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v33 = *((_DWORD *)a2 + 6);
      unint64_t v96 = (unint64_t)(v34 + 4);
      unint64_t v13 = (unint64_t)(v34 + 4);
    }
  }
  unint64_t v35 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v35 >= (char *)v9 + v13)
  {
    unint64_t v36 = (char *)(v35 - (char *)v9);
    if ((unint64_t)(v35 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v36 + 4) > v10)
    {
      unint64_t v95 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v35 = *((_DWORD *)a2 + 7);
      unint64_t v96 = (unint64_t)(v36 + 4);
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v94, *a2[4], (size_t)a2[4][1]);
  if (v95)
  {
    uint64_t v37 = v96;
    unint64_t v38 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v39 = *(void *)(a1 + 64);
    if (v38 + 16 >= v39) {
      unint64_t v38 = 0;
    }
    if (v96 <= 0x10) {
      uint64_t v37 = 16;
    }
    unint64_t v40 = v38 + v37;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *(void *)(a1 + 80) = v40;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v40) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  if (!v93)
  {
    __break(1u);
    goto LABEL_115;
  }
  unint64_t v42 = ((unint64_t)v91 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = v42 - (void)v91;
  if (v42 < (unint64_t)v91)
  {
    unint64_t v44 = 0;
  }
  else
  {
    unint64_t v44 = 0;
    if (v43 <= 0xFFFFFFFFFFFFFFFDLL && v43 + 2 <= v92)
    {
      *(_WORD *)((char *)v91 + v43) = 2870;
      unint64_t v44 = v43 + 2;
    }
  }
  unint64_t v45 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v46 = *(void *)(a1 + 64);
  if (v45 + 16 >= v46) {
    unint64_t v45 = 0;
  }
  if (v44 <= 0x10) {
    unint64_t v44 = 16;
  }
  unint64_t v47 = v45 + v44;
  if (v46 <= v47) {
    unint64_t v47 = 0;
  }
  *(void *)(a1 + 80) = v47;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v47);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v90, (uint64_t **)(a1 + 8));
  unint64_t v48 = v90;
  unint64_t v49 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v49 = 946;
  *((void *)v49 + 1) = a3;
  *((void *)v49 + 66) = (char *)v49 + 16;
  *((void *)v49 + 67) = 512;
  *((void *)v49 + 68) = 0;
  *((void *)v49 + 70) = 0;
  *((void *)v49 + 69) = 0;
  IPC::Encoder::encodeHeader(v49);
  unint64_t v94 = v49;
  int v50 = *(_DWORD *)a2;
  unint64_t v51 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v52 <= 3)
  {
LABEL_115:
    __break(0xC471u);
    JUMPOUT(0x19909A350);
  }
  *unint64_t v51 = v50;
  int v53 = *((_DWORD *)a2 + 1);
  unint64_t v54 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909A370);
  }
  _DWORD *v54 = v53;
  int v56 = *((_DWORD *)a2 + 2);
  unint64_t v57 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v58 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909A390);
  }
  *unint64_t v57 = v56;
  int v59 = *((_DWORD *)a2 + 3);
  unint64_t v60 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v61 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909A3B0);
  }
  _DWORD *v60 = v59;
  int v62 = *((_DWORD *)a2 + 4);
  int v63 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v64 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909A3D0);
  }
  *int v63 = v62;
  int v65 = *((_DWORD *)a2 + 5);
  int v66 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v67 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909A3F0);
  }
  _DWORD *v66 = v65;
  int v68 = *((_DWORD *)a2 + 6);
  int v69 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v70 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909A410);
  }
  *int v69 = v68;
  int v71 = *((_DWORD *)a2 + 7);
  int v72 = (_DWORD *)IPC::Encoder::grow(v49, 4uLL, 4);
  if (v73 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909A430);
  }
  _DWORD *v72 = v71;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v49, *a2[4], (size_t)a2[4][1]);
  uint64_t v41 = IPC::Connection::sendMessageImpl((uint64_t)v48, (uint64_t *)&v94, 1, 0);
  int v75 = v94;
  unint64_t v94 = 0;
  if (v75)
  {
    IPC::Encoder::~Encoder(v75, v74);
    WTF::fastFree(v76, v77);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v90);
  return v41;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexImage3D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v109, v7);
    if (!v111) {
      return 15;
    }
    unint64_t v91 = v109;
    unint64_t v90 = v110;
    unint64_t v92 = (v109 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v93 = v92 - v109;
    if (v92 >= v109)
    {
      unint64_t v94 = v93 + 2;
      if (v93 <= 0xFFFFFFFFFFFFFFFDLL && v94 <= v110)
      {
        *(_WORD *)(v109 + v93) = 2871;
        goto LABEL_101;
      }
      unint64_t v90 = 0;
    }
    unint64_t v94 = 0;
LABEL_101:
    unint64_t v96 = (void *)((v91 + v94 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v96 >= v91 + v94)
    {
      unint64_t v94 = (unint64_t)v96 - v91 + 8;
      if ((unint64_t)v96 - v91 > 0xFFFFFFFFFFFFFFF7 || v94 > v90) {
        return 17;
      }
      *unint64_t v96 = a3;
    }
    if (v90)
    {
      unint64_t v98 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v99 = *(void *)(a1 + 64);
      if (v98 + 16 >= v99) {
        unint64_t v98 = 0;
      }
      if (v94 <= 0x10) {
        unint64_t v94 = 16;
      }
      unint64_t v100 = v98 + v94;
      if (v99 <= v100) {
        unint64_t v100 = 0;
      }
      *(void *)(a1 + 80) = v100;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v100) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v109, v7);
  if (!v111) {
    return 15;
  }
  unint64_t v9 = v109;
  unint64_t v10 = v110;
  unint64_t v11 = (v109 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v109;
  if (v11 >= v109)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v110)
    {
      *(_WORD *)(v109 + v12) = 947;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v107 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v107 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v107 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v102 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v107)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v102 = v107;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v102 = v107;
  }
  unint64_t v32 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v32 >= v9 + v13;
  unint64_t v33 = v32 - (v9 + v13);
  if (v26)
  {
    unint64_t v103 = 0;
    unint64_t v34 = v33 + v13;
    if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= v102)
    {
      *(_DWORD *)(v9 + v34) = a2[4];
      unint64_t v103 = v102;
      unint64_t v13 = v34 + 4;
    }
  }
  else
  {
    unint64_t v103 = v102;
  }
  unint64_t v35 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v35 >= v9 + v13;
  unint64_t v36 = v35 - (v9 + v13);
  if (v26)
  {
    unint64_t v104 = 0;
    unint64_t v37 = v36 + v13;
    if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= v103)
    {
      *(_DWORD *)(v9 + v37) = a2[5];
      unint64_t v104 = v103;
      unint64_t v13 = v37 + 4;
    }
  }
  else
  {
    unint64_t v104 = v103;
  }
  unint64_t v38 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v38 >= v9 + v13;
  unint64_t v39 = v38 - (v9 + v13);
  if (v26)
  {
    unint64_t v105 = 0;
    unint64_t v40 = v39 + v13;
    if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= v104)
    {
      *(_DWORD *)(v9 + v40) = a2[6];
      unint64_t v105 = v104;
      unint64_t v13 = v40 + 4;
    }
  }
  else
  {
    unint64_t v105 = v104;
  }
  unint64_t v41 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v41 >= v9 + v13;
  unint64_t v42 = v41 - (v9 + v13);
  if (v26)
  {
    unint64_t v106 = 0;
    unint64_t v43 = v42 + v13;
    if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= v105)
    {
      *(_DWORD *)(v9 + v43) = a2[7];
      unint64_t v106 = v105;
      unint64_t v13 = v43 + 4;
    }
  }
  else
  {
    unint64_t v106 = v105;
  }
  unint64_t v44 = (void *)((v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v44 >= v9 + v13)
  {
    unint64_t v45 = (char *)v44 - v9;
    if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_68;
    }
    unint64_t v13 = (unint64_t)(v45 + 8);
    if ((unint64_t)(v45 + 8) > v106) {
      goto LABEL_68;
    }
    void *v44 = *((void *)a2 + 4);
  }
  if (v106)
  {
    unint64_t v46 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = *(void *)(a1 + 64);
    if (v46 + 16 >= v47) {
      unint64_t v46 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v48 = v46 + v13;
    if (v47 <= v48) {
      unint64_t v49 = 0;
    }
    else {
      unint64_t v49 = v48;
    }
    *(void *)(a1 + 80) = v49;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v49) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v50 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v50;
  }
LABEL_68:
  if (!v111)
  {
    __break(1u);
    goto LABEL_122;
  }
  unint64_t v51 = (v109 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v52 = v51 - v109;
  if (v51 < v109)
  {
    unint64_t v53 = 0;
  }
  else
  {
    unint64_t v53 = 0;
    if (v52 <= 0xFFFFFFFFFFFFFFFDLL && v52 + 2 <= v110)
    {
      *(_WORD *)(v109 + v52) = 2870;
      unint64_t v53 = v52 + 2;
    }
  }
  unint64_t v54 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v55 = *(void *)(a1 + 64);
  if (v54 + 16 >= v55) {
    unint64_t v54 = 0;
  }
  if (v53 <= 0x10) {
    unint64_t v53 = 16;
  }
  unint64_t v56 = v54 + v53;
  if (v55 <= v56) {
    unint64_t v56 = 0;
  }
  *(void *)(a1 + 80) = v56;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v56);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v108, (uint64_t **)(a1 + 8));
  unint64_t v57 = v108;
  unint64_t v58 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v58 = 947;
  *((void *)v58 + 1) = a3;
  *((void *)v58 + 66) = (char *)v58 + 16;
  *((void *)v58 + 67) = 512;
  *((void *)v58 + 68) = 0;
  *((void *)v58 + 70) = 0;
  *((void *)v58 + 69) = 0;
  IPC::Encoder::encodeHeader(v58);
  unint64_t v112 = v58;
  int v59 = *a2;
  unint64_t v60 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v61 <= 3)
  {
LABEL_122:
    __break(0xC471u);
    JUMPOUT(0x19909AB0CLL);
  }
  _DWORD *v60 = v59;
  int v62 = a2[1];
  int v63 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v64 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909AB2CLL);
  }
  *int v63 = v62;
  int v65 = a2[2];
  int v66 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v67 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909AB4CLL);
  }
  _DWORD *v66 = v65;
  int v68 = a2[3];
  int v69 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v70 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909AB6CLL);
  }
  *int v69 = v68;
  int v71 = a2[4];
  int v72 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v73 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909AB8CLL);
  }
  _DWORD *v72 = v71;
  int v74 = a2[5];
  int v75 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v76 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909ABACLL);
  }
  _DWORD *v75 = v74;
  int v77 = a2[6];
  unint64_t v78 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v79 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909ABCCLL);
  }
  _DWORD *v78 = v77;
  int v80 = a2[7];
  unint64_t v81 = (_DWORD *)IPC::Encoder::grow(v58, 4uLL, 4);
  if (v82 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909ABECLL);
  }
  _DWORD *v81 = v80;
  uint64_t v83 = *((void *)a2 + 4);
  int v84 = (void *)IPC::Encoder::grow(v58, 8uLL, 8);
  if (v85 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x19909AC0CLL);
  }
  void *v84 = v83;
  uint64_t v50 = IPC::Connection::sendMessageImpl((uint64_t)v57, (uint64_t *)&v112, 1, 0);
  unint64_t v87 = v112;
  unint64_t v112 = 0;
  if (v87)
  {
    IPC::Encoder::~Encoder(v87, v86);
    WTF::fastFree(v88, v89);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v108);
  return v50;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage3D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, const void ***a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v104, v7);
    if (!(_BYTE)v106) {
      return 15;
    }
    int v89 = v104;
    unint64_t v88 = v105;
    unint64_t v90 = ((unint64_t)v104 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v91 = v90 - (void)v104;
    if (v90 >= (unint64_t)v104)
    {
      unint64_t v92 = v91 + 2;
      if (v91 <= 0xFFFFFFFFFFFFFFFDLL && v92 <= v105)
      {
        *(_WORD *)((char *)v104 + v91) = 2871;
        goto LABEL_99;
      }
      unint64_t v88 = 0;
    }
    unint64_t v92 = 0;
LABEL_99:
    unint64_t v94 = (char *)(((unint64_t)v89 + v92 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v94 >= (char *)v89 + v92)
    {
      unint64_t v92 = v94 - (char *)v89 + 8;
      if ((unint64_t)(v94 - (char *)v89) > 0xFFFFFFFFFFFFFFF7 || v92 > v88) {
        return 17;
      }
      *(void *)unint64_t v94 = a3;
    }
    if (v88)
    {
      unint64_t v96 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v97 = *(void *)(a1 + 64);
      if (v96 + 16 >= v97) {
        unint64_t v96 = 0;
      }
      if (v92 <= 0x10) {
        unint64_t v92 = 16;
      }
      unint64_t v98 = v96 + v92;
      if (v97 <= v98) {
        unint64_t v98 = 0;
      }
      *(void *)(a1 + 80) = v98;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v98) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v101, v7);
  if (!v103) {
    return 15;
  }
  unint64_t v9 = v101;
  unint64_t v10 = v102;
  unint64_t v104 = v101;
  unint64_t v105 = v102;
  unint64_t v106 = 0;
  unint64_t v11 = ((unint64_t)v101 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v101;
  if (v11 < (unint64_t)v101)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v102)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_WORD *)((char *)v101 + v12) = 950;
      unint64_t v106 = v12 + 2;
    }
  }
  unint64_t v15 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - ((void)v9 + v13);
  if (v15 >= (unint64_t)v9 + v13)
  {
    unint64_t v17 = v15 - (void)v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v17) = *(_DWORD *)a2;
      unint64_t v106 = v18;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - ((void)v9 + v13);
  if (v20 >= (unint64_t)v9 + v13)
  {
    unint64_t v22 = v20 - (void)v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v22) = *((_DWORD *)a2 + 1);
      unint64_t v106 = v23;
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v25 >= (char *)v9 + v13)
  {
    BOOL v26 = (char *)(v25 - (char *)v9);
    if ((unint64_t)(v25 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v26 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v25 = *((_DWORD *)a2 + 2);
      unint64_t v106 = (unint64_t)(v26 + 4);
      unint64_t v13 = (unint64_t)(v26 + 4);
    }
  }
  unint64_t v27 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v27 >= (char *)v9 + v13)
  {
    unint64_t v28 = (char *)(v27 - (char *)v9);
    if ((unint64_t)(v27 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v28 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v27 = *((_DWORD *)a2 + 3);
      unint64_t v106 = (unint64_t)(v28 + 4);
      unint64_t v13 = (unint64_t)(v28 + 4);
    }
  }
  unint64_t v29 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v29 >= (char *)v9 + v13)
  {
    unint64_t v30 = (char *)(v29 - (char *)v9);
    if ((unint64_t)(v29 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v30 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v29 = *((_DWORD *)a2 + 4);
      unint64_t v106 = (unint64_t)(v30 + 4);
      unint64_t v13 = (unint64_t)(v30 + 4);
    }
  }
  unint64_t v31 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v31 >= (char *)v9 + v13)
  {
    unint64_t v32 = (char *)(v31 - (char *)v9);
    if ((unint64_t)(v31 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v32 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v31 = *((_DWORD *)a2 + 5);
      unint64_t v106 = (unint64_t)(v32 + 4);
      unint64_t v13 = (unint64_t)(v32 + 4);
    }
  }
  unint64_t v33 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v33 >= (char *)v9 + v13)
  {
    unint64_t v34 = (char *)(v33 - (char *)v9);
    if ((unint64_t)(v33 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v33 = *((_DWORD *)a2 + 6);
      unint64_t v106 = (unint64_t)(v34 + 4);
      unint64_t v13 = (unint64_t)(v34 + 4);
    }
  }
  unint64_t v35 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v35 >= (char *)v9 + v13)
  {
    unint64_t v36 = (char *)(v35 - (char *)v9);
    if ((unint64_t)(v35 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v36 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v35 = *((_DWORD *)a2 + 7);
      unint64_t v106 = (unint64_t)(v36 + 4);
      unint64_t v13 = (unint64_t)(v36 + 4);
    }
  }
  unint64_t v37 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v37 >= (char *)v9 + v13)
  {
    unint64_t v38 = (char *)(v37 - (char *)v9);
    if ((unint64_t)(v37 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v38 + 4) > v10)
    {
      unint64_t v10 = 0;
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v37 = *((_DWORD *)a2 + 8);
      unint64_t v106 = (unint64_t)(v38 + 4);
      unint64_t v13 = (unint64_t)(v38 + 4);
    }
  }
  unint64_t v39 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v39 >= (char *)v9 + v13)
  {
    unint64_t v40 = (char *)(v39 - (char *)v9);
    if ((unint64_t)(v39 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v40 + 4) > v10)
    {
      unint64_t v105 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v39 = *((_DWORD *)a2 + 9);
      unint64_t v106 = (unint64_t)(v40 + 4);
    }
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v104, *a2[5], (size_t)a2[5][1]);
  if (v105)
  {
    uint64_t v41 = v106;
    unint64_t v42 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v43 = *(void *)(a1 + 64);
    if (v42 + 16 >= v43) {
      unint64_t v42 = 0;
    }
    if (v106 <= 0x10) {
      uint64_t v41 = 16;
    }
    unint64_t v44 = v42 + v41;
    if (v43 <= v44) {
      unint64_t v44 = 0;
    }
    *(void *)(a1 + 80) = v44;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v44) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  if (!v103)
  {
    __break(1u);
    goto LABEL_127;
  }
  unint64_t v46 = ((unint64_t)v101 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v47 = v46 - (void)v101;
  if (v46 < (unint64_t)v101)
  {
    unint64_t v48 = 0;
  }
  else
  {
    unint64_t v48 = 0;
    if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v102)
    {
      *(_WORD *)((char *)v101 + v47) = 2870;
      unint64_t v48 = v47 + 2;
    }
  }
  unint64_t v49 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v50 = *(void *)(a1 + 64);
  if (v49 + 16 >= v50) {
    unint64_t v49 = 0;
  }
  if (v48 <= 0x10) {
    unint64_t v48 = 16;
  }
  unint64_t v51 = v49 + v48;
  if (v50 <= v51) {
    unint64_t v51 = 0;
  }
  *(void *)(a1 + 80) = v51;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v51);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v100, (uint64_t **)(a1 + 8));
  unint64_t v52 = v100;
  unint64_t v53 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v53 = 950;
  *((void *)v53 + 1) = a3;
  *((void *)v53 + 66) = (char *)v53 + 16;
  *((void *)v53 + 67) = 512;
  *((void *)v53 + 68) = 0;
  *((void *)v53 + 70) = 0;
  *((void *)v53 + 69) = 0;
  IPC::Encoder::encodeHeader(v53);
  unint64_t v104 = v53;
  int v54 = *(_DWORD *)a2;
  unint64_t v55 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v56 <= 3)
  {
LABEL_127:
    __break(0xC471u);
    JUMPOUT(0x19909B3F4);
  }
  *unint64_t v55 = v54;
  int v57 = *((_DWORD *)a2 + 1);
  unint64_t v58 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v59 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909B414);
  }
  *unint64_t v58 = v57;
  int v60 = *((_DWORD *)a2 + 2);
  unint64_t v61 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v62 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909B434);
  }
  _DWORD *v61 = v60;
  int v63 = *((_DWORD *)a2 + 3);
  unint64_t v64 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v65 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909B454);
  }
  *unint64_t v64 = v63;
  int v66 = *((_DWORD *)a2 + 4);
  unint64_t v67 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v68 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909B474);
  }
  _DWORD *v67 = v66;
  int v69 = *((_DWORD *)a2 + 5);
  unint64_t v70 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v71 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909B494);
  }
  *unint64_t v70 = v69;
  int v72 = *((_DWORD *)a2 + 6);
  unint64_t v73 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v74 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909B4B4);
  }
  *unint64_t v73 = v72;
  int v75 = *((_DWORD *)a2 + 7);
  unint64_t v76 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v77 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909B4D4);
  }
  *unint64_t v76 = v75;
  int v78 = *((_DWORD *)a2 + 8);
  unint64_t v79 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v80 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909B4F4);
  }
  *unint64_t v79 = v78;
  int v81 = *((_DWORD *)a2 + 9);
  unint64_t v82 = (_DWORD *)IPC::Encoder::grow(v53, 4uLL, 4);
  if (v83 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909B514);
  }
  _DWORD *v82 = v81;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v53, *a2[5], (size_t)a2[5][1]);
  uint64_t v45 = IPC::Connection::sendMessageImpl((uint64_t)v52, (uint64_t *)&v104, 1, 0);
  unint64_t v85 = v104;
  unint64_t v104 = 0;
  if (v85)
  {
    IPC::Encoder::~Encoder(v85, v84);
    WTF::fastFree(v86, v87);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v100);
  return v45;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage3D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v123, v7);
    if (!v125) {
      return 15;
    }
    unint64_t v103 = v123;
    unint64_t v102 = v124;
    unint64_t v104 = (v123 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v105 = v104 - v123;
    if (v104 >= v123)
    {
      unint64_t v106 = v105 + 2;
      if (v105 <= 0xFFFFFFFFFFFFFFFDLL && v106 <= v124)
      {
        *(_WORD *)(v123 + v105) = 2871;
        goto LABEL_113;
      }
      unint64_t v102 = 0;
    }
    unint64_t v106 = 0;
LABEL_113:
    v108 = (void *)((v103 + v106 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v108 >= v103 + v106)
    {
      unint64_t v106 = (unint64_t)v108 - v103 + 8;
      if ((unint64_t)v108 - v103 > 0xFFFFFFFFFFFFFFF7 || v106 > v102) {
        return 17;
      }
      void *v108 = a3;
    }
    if (v102)
    {
      unint64_t v110 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v111 = *(void *)(a1 + 64);
      if (v110 + 16 >= v111) {
        unint64_t v110 = 0;
      }
      if (v106 <= 0x10) {
        unint64_t v106 = 16;
      }
      unint64_t v112 = v110 + v106;
      if (v111 <= v112) {
        unint64_t v112 = 0;
      }
      *(void *)(a1 + 80) = v112;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v112) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v123, v7);
  if (!v125) {
    return 15;
  }
  unint64_t v9 = v123;
  unint64_t v10 = v124;
  unint64_t v11 = (v123 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v123;
  if (v11 >= v123)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v124)
    {
      *(_WORD *)(v123 + v12) = 951;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v114 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v114 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v114 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v115 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v114)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v115 = v114;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v115 = v114;
  }
  unint64_t v32 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v32 >= v9 + v13;
  unint64_t v33 = v32 - (v9 + v13);
  if (v26)
  {
    unint64_t v116 = 0;
    unint64_t v34 = v33 + v13;
    if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= v115)
    {
      *(_DWORD *)(v9 + v34) = a2[4];
      unint64_t v116 = v115;
      unint64_t v13 = v34 + 4;
    }
  }
  else
  {
    unint64_t v116 = v115;
  }
  unint64_t v35 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v35 >= v9 + v13;
  unint64_t v36 = v35 - (v9 + v13);
  if (v26)
  {
    unint64_t v117 = 0;
    unint64_t v37 = v36 + v13;
    if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= v116)
    {
      *(_DWORD *)(v9 + v37) = a2[5];
      unint64_t v117 = v116;
      unint64_t v13 = v37 + 4;
    }
  }
  else
  {
    unint64_t v117 = v116;
  }
  unint64_t v38 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v38 >= v9 + v13;
  unint64_t v39 = v38 - (v9 + v13);
  if (v26)
  {
    unint64_t v118 = 0;
    unint64_t v40 = v39 + v13;
    if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= v117)
    {
      *(_DWORD *)(v9 + v40) = a2[6];
      unint64_t v118 = v117;
      unint64_t v13 = v40 + 4;
    }
  }
  else
  {
    unint64_t v118 = v117;
  }
  unint64_t v41 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v41 >= v9 + v13;
  unint64_t v42 = v41 - (v9 + v13);
  if (v26)
  {
    unint64_t v119 = 0;
    unint64_t v43 = v42 + v13;
    if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= v118)
    {
      *(_DWORD *)(v9 + v43) = a2[7];
      unint64_t v119 = v118;
      unint64_t v13 = v43 + 4;
    }
  }
  else
  {
    unint64_t v119 = v118;
  }
  unint64_t v44 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v44 >= v9 + v13;
  unint64_t v45 = v44 - (v9 + v13);
  if (v26)
  {
    unint64_t v121 = 0;
    unint64_t v46 = v45 + v13;
    if (v46 <= 0xFFFFFFFFFFFFFFFBLL && v46 + 4 <= v119)
    {
      *(_DWORD *)(v9 + v46) = a2[8];
      unint64_t v121 = v119;
      unint64_t v13 = v46 + 4;
    }
  }
  else
  {
    unint64_t v121 = v119;
  }
  unint64_t v47 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v47 >= v9 + v13;
  unint64_t v48 = v47 - (v9 + v13);
  if (v26)
  {
    unint64_t v120 = 0;
    unint64_t v49 = v48 + v13;
    if (v49 <= 0xFFFFFFFFFFFFFFFBLL && v49 + 4 <= v121)
    {
      *(_DWORD *)(v9 + v49) = a2[9];
      unint64_t v120 = v121;
      unint64_t v13 = v49 + 4;
    }
  }
  else
  {
    unint64_t v120 = v121;
  }
  unint64_t v50 = (void *)((v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v50 >= v9 + v13)
  {
    unint64_t v51 = (char *)v50 - v9;
    if ((unint64_t)v50 - v9 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_78;
    }
    unint64_t v13 = (unint64_t)(v51 + 8);
    if ((unint64_t)(v51 + 8) > v120) {
      goto LABEL_78;
    }
    *unint64_t v50 = *((void *)a2 + 5);
  }
  if (v120)
  {
    unint64_t v52 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v53 = *(void *)(a1 + 64);
    if (v52 + 16 >= v53) {
      unint64_t v52 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v54 = v52 + v13;
    if (v53 <= v54) {
      unint64_t v55 = 0;
    }
    else {
      unint64_t v55 = v54;
    }
    *(void *)(a1 + 80) = v55;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v55) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v56 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v56;
  }
LABEL_78:
  if (!v125)
  {
    __break(1u);
    goto LABEL_134;
  }
  unint64_t v57 = (v123 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v58 = v57 - v123;
  if (v57 < v123)
  {
    unint64_t v59 = 0;
  }
  else
  {
    unint64_t v59 = 0;
    if (v58 <= 0xFFFFFFFFFFFFFFFDLL && v58 + 2 <= v124)
    {
      *(_WORD *)(v123 + v58) = 2870;
      unint64_t v59 = v58 + 2;
    }
  }
  unint64_t v60 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v61 = *(void *)(a1 + 64);
  if (v60 + 16 >= v61) {
    unint64_t v60 = 0;
  }
  if (v59 <= 0x10) {
    unint64_t v59 = 16;
  }
  unint64_t v62 = v60 + v59;
  if (v61 <= v62) {
    unint64_t v62 = 0;
  }
  *(void *)(a1 + 80) = v62;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v62);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v122, (uint64_t **)(a1 + 8));
  int v63 = v122;
  unint64_t v64 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v64 = 951;
  *((void *)v64 + 1) = a3;
  *((void *)v64 + 66) = (char *)v64 + 16;
  *((void *)v64 + 67) = 512;
  *((void *)v64 + 68) = 0;
  *((void *)v64 + 70) = 0;
  *((void *)v64 + 69) = 0;
  IPC::Encoder::encodeHeader(v64);
  v126 = v64;
  int v65 = *a2;
  int v66 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v67 <= 3)
  {
LABEL_134:
    __break(0xC471u);
    JUMPOUT(0x19909BCB0);
  }
  _DWORD *v66 = v65;
  int v68 = a2[1];
  int v69 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v70 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909BCD0);
  }
  *int v69 = v68;
  int v71 = a2[2];
  int v72 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v73 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909BCF0);
  }
  _DWORD *v72 = v71;
  int v74 = a2[3];
  int v75 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v76 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909BD10);
  }
  _DWORD *v75 = v74;
  int v77 = a2[4];
  int v78 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v79 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909BD30);
  }
  _DWORD *v78 = v77;
  int v80 = a2[5];
  int v81 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v82 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909BD50);
  }
  _DWORD *v81 = v80;
  int v83 = a2[6];
  int v84 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v85 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909BD70);
  }
  _DWORD *v84 = v83;
  int v86 = a2[7];
  unint64_t v87 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v88 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909BD90);
  }
  *unint64_t v87 = v86;
  int v89 = a2[8];
  unint64_t v90 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v91 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909BDB0);
  }
  _DWORD *v90 = v89;
  int v92 = a2[9];
  unint64_t v93 = (_DWORD *)IPC::Encoder::grow(v64, 4uLL, 4);
  if (v94 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909BDD0);
  }
  *unint64_t v93 = v92;
  uint64_t v95 = *((void *)a2 + 5);
  unint64_t v96 = (void *)IPC::Encoder::grow(v64, 8uLL, 8);
  if (v97 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x19909BDF0);
  }
  *unint64_t v96 = v95;
  uint64_t v56 = IPC::Connection::sendMessageImpl((uint64_t)v63, (uint64_t *)&v126, 1, 0);
  unint64_t v99 = v126;
  v126 = 0;
  if (v99)
  {
    IPC::Encoder::~Encoder(v99, v98);
    WTF::fastFree(v100, v101);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v122);
  return v56;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetFragDataLocation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v56, v9);
    if (!(_BYTE)v58) {
      goto LABEL_101;
    }
    unint64_t v44 = v56;
    unint64_t v43 = v57;
    unint64_t v45 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v56;
    if (v45 >= (unint64_t)v56)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v57)
      {
        *(_WORD *)((char *)v56 + v46) = 2871;
        goto LABEL_87;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_87:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
        goto LABEL_111;
      }
      *(void *)unint64_t v49 = a3;
    }
    if (v43)
    {
      uint64_t v51 = v6[9];
      unint64_t v52 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v6[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v6[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v55 = 17;
    goto LABEL_102;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v60, v9);
  if (!v62)
  {
LABEL_101:
    char v55 = 15;
LABEL_102:
    *(unsigned char *)a4 = v55;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v60;
  unint64_t v14 = v61;
  unint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v66, v16))
  {
    LOBYTE(v71) = 11;
    uint64_t v11 = 1;
    LODWORD(v73) = 1;
    LOBYTE(v56) = 0;
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFragDataLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFragDataLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
    char v59 = 1;
    if (v73 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
    }
    goto LABEL_53;
  }
  uint64_t v71 = v13;
  unint64_t v72 = v14;
  unint64_t v73 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3654;
    unint64_t v73 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v72 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v73 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(&v71, a2);
    if (!v72)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v73;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v73 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v68, (uint64_t)(v6 + 8), v9);
    if (!v70)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_37:
      char v65 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v68, (uint64_t *)v11);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      int v63 = (uint64_t *)v67;
      int v64 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v66, v16, 0xE46u, (uint64_t)&v68, v9);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v68);
    char v65 = 1;
    if (v69 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v67, &v68);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v66);
    if (!v65)
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
      goto LABEL_50;
    }
    if (v64 == 1)
    {
      char v30 = (char)v63;
LABEL_49:
      LOBYTE(v56) = v30;
      int v58 = 1;
      char v59 = 1;
      goto LABEL_50;
    }
    if (v64) {
      goto LABEL_107;
    }
    uint64_t v28 = IPC::Decoder::decode<std::tuple<float>>(v63);
    if ((v28 & 0xFF00000000) == 0)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v65) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v72 = 0;
  }
  if (v64) {
    goto LABEL_107;
  }
  unint64_t v29 = v63;
  int v63 = 0;
  uint64_t v71 = (uint64_t)v29;
  LODWORD(v72) = v28;
  LODWORD(v73) = 0;
  LOBYTE(v56) = 0;
  int v58 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFragDataLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFragDataLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
  char v59 = 1;
  if (v73 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
  }
LABEL_50:
  if (v65 && v64 != -1) {
    ((void (*)(uint64_t *, uint64_t **))off_1EE9E9D68[v64])(&v71, &v63);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v59)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFragDataLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFragDataLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v56);
    if (v59)
    {
      if (v58 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v58])(&v71, &v56);
      }
    }
    return result;
  }
  if (!v62) {
    goto LABEL_104;
  }
  unint64_t v31 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v60;
  if (v31 < v60)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v61)
    {
      *(_WORD *)(v60 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, v15);
    double v6 = v63;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3654, a3, &v71, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(v68, (int *)a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v71, (uint64_t *)&v68, 0, (uint64_t)&v56, v9);
    a2 = v57;
    if (v57)
    {
      if (v57 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v56;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    uint64_t v37 = IPC::Decoder::decode<std::tuple<float>>(v56);
    if ((v37 & 0xFF00000000) == 0) {
      break;
    }
    if (!v57)
    {
      unint64_t v39 = v56;
      uint64_t v56 = 0;
      *(void *)a4 = v39;
      *(_DWORD *)(a4 + 8) = v37;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[a2])(&v67, &v56);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v57;
  if (v57 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v40 = v68;
  int v68 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFragDataLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFragDataLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA258[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v58, v7);
    if (!v60) {
      return 15;
    }
    unint64_t v46 = v58;
    unint64_t v45 = v59;
    unint64_t v47 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v48 = v47 - v58;
    if (v47 >= v58)
    {
      unint64_t v49 = v48 + 2;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v49 <= v59)
      {
        *(_WORD *)(v58 + v48) = 2871;
        goto LABEL_59;
      }
      unint64_t v45 = 0;
    }
    unint64_t v49 = 0;
LABEL_59:
    uint64_t v51 = (void *)((v46 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v51 >= v46 + v49)
    {
      unint64_t v49 = (unint64_t)v51 - v46 + 8;
      if ((unint64_t)v51 - v46 > 0xFFFFFFFFFFFFFFF7 || v49 > v45) {
        return 17;
      }
      *uint64_t v51 = a3;
    }
    if (v45)
    {
      unint64_t v53 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v54 = *(void *)(a1 + 64);
      if (v53 + 16 >= v54) {
        unint64_t v53 = 0;
      }
      if (v49 <= 0x10) {
        unint64_t v49 = 16;
      }
      unint64_t v55 = v53 + v49;
      if (v54 <= v55) {
        unint64_t v55 = 0;
      }
      *(void *)(a1 + 80) = v55;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v55) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v58, v7);
  if (!v60) {
    return 15;
  }
  unint64_t v9 = v58;
  unint64_t v10 = v59;
  unint64_t v11 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v58;
  if (v11 >= v58)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v59)
    {
      *(_WORD *)(v58 + v12) = 1068;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v20 >= v9 + v13)
  {
    unint64_t v13 = (unint64_t)v20 - v9 + 4;
    if ((unint64_t)v20 - v9 > 0xFFFFFFFFFFFFFFFBLL || v13 > v10) {
      goto LABEL_33;
    }
    *unint64_t v20 = a2[1];
  }
  if (v10)
  {
    uint64_t v22 = *(void *)(a1 + 72);
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = *(void *)(a1 + 64);
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v25 = v23 + v13;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    *(void *)(a1 + 80) = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v22 + 16) + 128), v25) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v26 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v26;
  }
LABEL_33:
  if (!v60)
  {
    __break(1u);
    goto LABEL_79;
  }
  unint64_t v27 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = v27 - v58;
  if (v27 < v58)
  {
    unint64_t v29 = 0;
  }
  else
  {
    unint64_t v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v59)
    {
      *(_WORD *)(v58 + v28) = 2870;
      unint64_t v29 = v28 + 2;
    }
  }
  unint64_t v30 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = *(void *)(a1 + 64);
  if (v30 + 16 >= v31) {
    unint64_t v30 = 0;
  }
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v32 = v30 + v29;
  if (v31 <= v32) {
    unint64_t v32 = 0;
  }
  *(void *)(a1 + 80) = v32;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v32);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(a1 + 8));
  unint64_t v33 = v57;
  unint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v34 = 1068;
  *((void *)v34 + 1) = a3;
  *((void *)v34 + 66) = (char *)v34 + 16;
  *((void *)v34 + 67) = 512;
  *((void *)v34 + 68) = 0;
  *((void *)v34 + 70) = 0;
  *((void *)v34 + 69) = 0;
  IPC::Encoder::encodeHeader(v34);
  unint64_t v61 = v34;
  int v35 = *a2;
  unint64_t v36 = (_DWORD *)IPC::Encoder::grow(v34, 4uLL, 4);
  if (v37 <= 3)
  {
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x19909CA04);
  }
  *unint64_t v36 = v35;
  int v38 = a2[1];
  unint64_t v39 = (_DWORD *)IPC::Encoder::grow(v34, 4uLL, 4);
  if (v40 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909CA24);
  }
  _DWORD *v39 = v38;
  uint64_t v26 = IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v61, 1, 0);
  unint64_t v42 = v61;
  unint64_t v61 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v43, v44);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v57);
  return v26;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v67, v7);
    if (!v69) {
      return 15;
    }
    unint64_t v55 = v67;
    unint64_t v54 = v68;
    unint64_t v56 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v57 = v56 - v67;
    if (v56 >= v67)
    {
      unint64_t v58 = v57 + 2;
      if (v57 <= 0xFFFFFFFFFFFFFFFDLL && v58 <= v68)
      {
        *(_WORD *)(v67 + v57) = 2871;
        goto LABEL_64;
      }
      unint64_t v54 = 0;
    }
    unint64_t v58 = 0;
LABEL_64:
    char v60 = (void *)((v55 + v58 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v60 >= v55 + v58)
    {
      unint64_t v58 = (unint64_t)v60 - v55 + 8;
      if ((unint64_t)v60 - v55 > 0xFFFFFFFFFFFFFFF7 || v58 > v54) {
        return 17;
      }
      void *v60 = a3;
    }
    if (v54)
    {
      unint64_t v62 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v63 = *(void *)(a1 + 64);
      if (v62 + 16 >= v63) {
        unint64_t v62 = 0;
      }
      if (v58 <= 0x10) {
        unint64_t v58 = 16;
      }
      unint64_t v64 = v62 + v58;
      if (v63 <= v64) {
        unint64_t v64 = 0;
      }
      *(void *)(a1 + 80) = v64;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v64) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v67, v7);
  if (!v69) {
    return 15;
  }
  unint64_t v9 = v67;
  unint64_t v10 = v68;
  unint64_t v11 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v67;
  if (v11 >= v67)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v68)
    {
      *(_WORD *)(v67 + v12) = 1074;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v25 >= v9 + v13)
  {
    uint64_t v26 = (char *)v25 - v9;
    if ((unint64_t)v25 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_37;
    }
    unint64_t v13 = (unint64_t)(v26 + 4);
    if ((unint64_t)(v26 + 4) > v10) {
      goto LABEL_37;
    }
    _DWORD *v25 = a2[2];
  }
  if (v10)
  {
    uint64_t v27 = *(void *)(a1 + 72);
    unint64_t v28 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *(void *)(a1 + 64);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    uint64_t v30 = 16;
    if (v13 > 0x10) {
      uint64_t v30 = v13;
    }
    unint64_t v31 = v28 + v30;
    if (v29 <= v31) {
      unint64_t v31 = 0;
    }
    *(void *)(a1 + 80) = v31;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v27 + 16) + 128), v31) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v32 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v32;
  }
LABEL_37:
  if (!v69)
  {
    __break(1u);
    goto LABEL_85;
  }
  unint64_t v33 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - v67;
  if (v33 < v67)
  {
    unint64_t v35 = 0;
  }
  else
  {
    unint64_t v35 = 0;
    if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v68)
    {
      *(_WORD *)(v67 + v34) = 2870;
      unint64_t v35 = v34 + 2;
    }
  }
  unint64_t v36 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = *(void *)(a1 + 64);
  if (v36 + 16 >= v37) {
    unint64_t v36 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v38 = v36 + v35;
  if (v37 <= v38) {
    unint64_t v38 = 0;
  }
  *(void *)(a1 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v38);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v66, (uint64_t **)(a1 + 8));
  unint64_t v39 = v66;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1074;
  *((void *)v40 + 1) = a3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  char v70 = v40;
  int v41 = *a2;
  unint64_t v42 = (_DWORD *)IPC::Encoder::grow(v40, 4uLL, 4);
  if (v43 <= 3)
  {
LABEL_85:
    __break(0xC471u);
    JUMPOUT(0x19909CEACLL);
  }
  *unint64_t v42 = v41;
  int v44 = a2[1];
  unint64_t v45 = (_DWORD *)IPC::Encoder::grow(v40, 4uLL, 4);
  if (v46 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909CECCLL);
  }
  *unint64_t v45 = v44;
  int v47 = a2[2];
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v40, 4uLL, 4);
  if (v49 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909CEECLL);
  }
  *unint64_t v48 = v47;
  uint64_t v32 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v70, 1, 0);
  uint64_t v51 = v70;
  char v70 = 0;
  if (v51)
  {
    IPC::Encoder::~Encoder(v51, v50);
    WTF::fastFree(v52, v53);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  return v32;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v74, v7);
    if (!v76) {
      return 15;
    }
    unint64_t v61 = v74;
    unint64_t v60 = v75;
    unint64_t v62 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v63 = v62 - v74;
    if (v62 >= v74)
    {
      unint64_t v64 = v63 + 2;
      if (v63 <= 0xFFFFFFFFFFFFFFFDLL && v64 <= v75)
      {
        *(_WORD *)(v74 + v63) = 2871;
        goto LABEL_70;
      }
      unint64_t v60 = 0;
    }
    unint64_t v64 = 0;
LABEL_70:
    int v66 = (void *)((v61 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v66 >= v61 + v64)
    {
      unint64_t v64 = (unint64_t)v66 - v61 + 8;
      if ((unint64_t)v66 - v61 > 0xFFFFFFFFFFFFFFF7 || v64 > v60) {
        return 17;
      }
      void *v66 = a3;
    }
    if (v60)
    {
      unint64_t v68 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v69 = *(void *)(a1 + 64);
      if (v68 + 16 >= v69) {
        unint64_t v68 = 0;
      }
      if (v64 <= 0x10) {
        unint64_t v64 = 16;
      }
      unint64_t v70 = v68 + v64;
      if (v69 <= v70) {
        unint64_t v70 = 0;
      }
      *(void *)(a1 + 80) = v70;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v70) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v74, v7);
  if (!v76) {
    return 15;
  }
  unint64_t v9 = v74;
  unint64_t v10 = v75;
  unint64_t v11 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v74;
  if (v11 >= v74)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v75)
    {
      *(_WORD *)(v74 + v12) = 1080;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v72 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v72 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v72 = v10;
  }
  unint64_t v29 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v29 >= v9 + v13)
  {
    uint64_t v30 = (char *)v29 - v9;
    if ((unint64_t)v29 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_42;
    }
    unint64_t v13 = (unint64_t)(v30 + 4);
    if ((unint64_t)(v30 + 4) > v72) {
      goto LABEL_42;
    }
    *unint64_t v29 = a2[3];
  }
  if (v72)
  {
    uint64_t v31 = *(void *)(a1 + 72);
    unint64_t v32 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v33 = *(void *)(a1 + 64);
    if (v32 + 16 >= v33) {
      unint64_t v32 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v34 = v32 + v13;
    if (v33 <= v34) {
      unint64_t v34 = 0;
    }
    *(void *)(a1 + 80) = v34;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v31 + 16) + 128), v34) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v35 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v35;
  }
LABEL_42:
  if (!v76)
  {
    __break(1u);
    goto LABEL_91;
  }
  unint64_t v36 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - v74;
  if (v36 < v74)
  {
    unint64_t v38 = 0;
  }
  else
  {
    unint64_t v38 = 0;
    if (v37 <= 0xFFFFFFFFFFFFFFFDLL && v37 + 2 <= v75)
    {
      *(_WORD *)(v74 + v37) = 2870;
      unint64_t v38 = v37 + 2;
    }
  }
  unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(a1 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v38 <= 0x10) {
    unint64_t v38 = 16;
  }
  unint64_t v41 = v39 + v38;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(a1 + 80) = v41;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)(a1 + 8));
  unint64_t v42 = v73;
  unint64_t v43 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v43 = 1080;
  *((void *)v43 + 1) = a3;
  *((void *)v43 + 66) = (char *)v43 + 16;
  *((void *)v43 + 67) = 512;
  *((void *)v43 + 68) = 0;
  *((void *)v43 + 70) = 0;
  *((void *)v43 + 69) = 0;
  IPC::Encoder::encodeHeader(v43);
  int v77 = v43;
  int v44 = *a2;
  unint64_t v45 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v46 <= 3)
  {
LABEL_91:
    __break(0xC471u);
    JUMPOUT(0x19909D3D4);
  }
  *unint64_t v45 = v44;
  int v47 = a2[1];
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v49 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909D3F4);
  }
  *unint64_t v48 = v47;
  int v50 = a2[2];
  uint64_t v51 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909D414);
  }
  *uint64_t v51 = v50;
  int v53 = a2[3];
  unint64_t v54 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909D434);
  }
  _DWORD *v54 = v53;
  uint64_t v35 = IPC::Connection::sendMessageImpl((uint64_t)v42, (uint64_t *)&v77, 1, 0);
  unint64_t v57 = v77;
  int v77 = 0;
  if (v57)
  {
    IPC::Encoder::~Encoder(v57, v56);
    WTF::fastFree(v58, v59);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
  return v35;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
    if (!v83) {
      return 15;
    }
    unint64_t v67 = v81;
    unint64_t v66 = v82;
    unint64_t v68 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v69 = v68 - v81;
    if (v68 >= v81)
    {
      unint64_t v70 = v69 + 2;
      if (v69 <= 0xFFFFFFFFFFFFFFFDLL && v70 <= v82)
      {
        *(_WORD *)(v81 + v69) = 2871;
        goto LABEL_77;
      }
      unint64_t v66 = 0;
    }
    unint64_t v70 = 0;
LABEL_77:
    unint64_t v72 = (void *)((v67 + v70 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v72 >= v67 + v70)
    {
      unint64_t v70 = (unint64_t)v72 - v67 + 8;
      if ((unint64_t)v72 - v67 > 0xFFFFFFFFFFFFFFF7 || v70 > v66) {
        return 17;
      }
      void *v72 = a3;
    }
    if (v66)
    {
      unint64_t v74 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v75 = *(void *)(a1 + 64);
      if (v74 + 16 >= v75) {
        unint64_t v74 = 0;
      }
      if (v70 <= 0x10) {
        unint64_t v70 = 16;
      }
      unint64_t v76 = v74 + v70;
      if (v75 <= v76) {
        unint64_t v76 = 0;
      }
      *(void *)(a1 + 80) = v76;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v76) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
  if (!v83) {
    return 15;
  }
  unint64_t v9 = v81;
  unint64_t v10 = v82;
  unint64_t v11 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v81;
  if (v11 >= v81)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v82)
    {
      *(_WORD *)(v81 + v12) = 1086;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v78 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v78 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v78 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v79 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v78)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v79 = v78;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v79 = v78;
  }
  unint64_t v32 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v32 >= v9 + v13)
  {
    unint64_t v33 = (char *)v32 - v9;
    if ((unint64_t)v32 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_48;
    }
    unint64_t v13 = (unint64_t)(v33 + 4);
    if ((unint64_t)(v33 + 4) > v79) {
      goto LABEL_48;
    }
    *unint64_t v32 = a2[4];
  }
  if (v79)
  {
    unint64_t v34 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = *(void *)(a1 + 64);
    if (v34 + 16 >= v35) {
      unint64_t v34 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v36 = v34 + v13;
    if (v35 <= v36) {
      unint64_t v37 = 0;
    }
    else {
      unint64_t v37 = v36;
    }
    *(void *)(a1 + 80) = v37;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v37) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v38 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v38;
  }
LABEL_48:
  if (!v83)
  {
    __break(1u);
    goto LABEL_98;
  }
  unint64_t v39 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - v81;
  if (v39 < v81)
  {
    unint64_t v41 = 0;
  }
  else
  {
    unint64_t v41 = 0;
    if (v40 <= 0xFFFFFFFFFFFFFFFDLL && v40 + 2 <= v82)
    {
      *(_WORD *)(v81 + v40) = 2870;
      unint64_t v41 = v40 + 2;
    }
  }
  unint64_t v42 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *(void *)(a1 + 64);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v44 = v42 + v41;
  if (v43 <= v44) {
    unint64_t v44 = 0;
  }
  *(void *)(a1 + 80) = v44;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v44);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v80, (uint64_t **)(a1 + 8));
  unint64_t v45 = v80;
  unint64_t v46 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v46 = 1086;
  *((void *)v46 + 1) = a3;
  *((void *)v46 + 66) = (char *)v46 + 16;
  *((void *)v46 + 67) = 512;
  *((void *)v46 + 68) = 0;
  *((void *)v46 + 70) = 0;
  *((void *)v46 + 69) = 0;
  IPC::Encoder::encodeHeader(v46);
  int v84 = v46;
  int v47 = *a2;
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v49 <= 3)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x19909D988);
  }
  *unint64_t v48 = v47;
  int v50 = a2[1];
  uint64_t v51 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909D9A8);
  }
  *uint64_t v51 = v50;
  int v53 = a2[2];
  unint64_t v54 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909D9C8);
  }
  _DWORD *v54 = v53;
  int v56 = a2[3];
  unint64_t v57 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v58 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909D9E8);
  }
  *unint64_t v57 = v56;
  int v59 = a2[4];
  unint64_t v60 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v61 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19909DA08);
  }
  _DWORD *v60 = v59;
  uint64_t v38 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v84, 1, 0);
  unint64_t v63 = v84;
  int v84 = 0;
  if (v63)
  {
    IPC::Encoder::~Encoder(v63, v62);
    WTF::fastFree(v64, v65);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80);
  return v38;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1069;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,0ul,1ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1069;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

void *IPC::ArgumentCoder<std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,0ul,1ul>(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = *a1 + v2;
  unint64_t v4 = (v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v9 = v4 >= v3;
  unint64_t v5 = v4 - v3;
  if (v9)
  {
    unint64_t v6 = v5 + v2;
    unint64_t v7 = v6 + 4;
    unint64_t v8 = a1[1];
    if (v6 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      BOOL v9 = v7 >= v8;
      BOOL v10 = v7 == v8;
    }
    else
    {
      BOOL v9 = 1;
      BOOL v10 = 0;
    }
    if (!v10 && v9)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v6) = *(_DWORD *)a2;
      a1[2] = v7;
    }
  }
  return IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, **(const void ***)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1075;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,0ul,1ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1075;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1081;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,0ul,1ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1081;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1087;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,std::span<unsigned int const,18446744073709551615ul> const&>,0ul,1ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1087;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,std::span<float const,18446744073709551615ul> const&>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix2x3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1090;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1090;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix3x2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1093;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1093;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix2x4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1091;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1091;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix4x2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1096;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1096;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix3x4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1094;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1094;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix4x3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1097;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(&v47, (uint64_t)a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 1097;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<int,BOOL,std::span<float const,18446744073709551615ul> const&>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribI4i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
    if (!v83) {
      return 15;
    }
    unint64_t v67 = v81;
    unint64_t v66 = v82;
    unint64_t v68 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v69 = v68 - v81;
    if (v68 >= v81)
    {
      unint64_t v70 = v69 + 2;
      if (v69 <= 0xFFFFFFFFFFFFFFFDLL && v70 <= v82)
      {
        *(_WORD *)(v81 + v69) = 2871;
        goto LABEL_77;
      }
      unint64_t v66 = 0;
    }
    unint64_t v70 = 0;
LABEL_77:
    unint64_t v72 = (void *)((v67 + v70 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v72 >= v67 + v70)
    {
      unint64_t v70 = (unint64_t)v72 - v67 + 8;
      if ((unint64_t)v72 - v67 > 0xFFFFFFFFFFFFFFF7 || v70 > v66) {
        return 17;
      }
      void *v72 = a3;
    }
    if (v66)
    {
      unint64_t v74 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v75 = *(void *)(a1 + 64);
      if (v74 + 16 >= v75) {
        unint64_t v74 = 0;
      }
      if (v70 <= 0x10) {
        unint64_t v70 = 16;
      }
      unint64_t v76 = v74 + v70;
      if (v75 <= v76) {
        unint64_t v76 = 0;
      }
      *(void *)(a1 + 80) = v76;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v76) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
  if (!v83) {
    return 15;
  }
  unint64_t v9 = v81;
  unint64_t v10 = v82;
  unint64_t v11 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v81;
  if (v11 >= v81)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v82)
    {
      *(_WORD *)(v81 + v12) = 1109;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v78 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v78 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v78 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v79 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v78)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v79 = v78;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v79 = v78;
  }
  unint64_t v32 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v32 >= v9 + v13)
  {
    unint64_t v33 = (char *)v32 - v9;
    if ((unint64_t)v32 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_48;
    }
    unint64_t v13 = (unint64_t)(v33 + 4);
    if ((unint64_t)(v33 + 4) > v79) {
      goto LABEL_48;
    }
    *unint64_t v32 = a2[4];
  }
  if (v79)
  {
    unint64_t v34 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = *(void *)(a1 + 64);
    if (v34 + 16 >= v35) {
      unint64_t v34 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v36 = v34 + v13;
    if (v35 <= v36) {
      unint64_t v37 = 0;
    }
    else {
      unint64_t v37 = v36;
    }
    *(void *)(a1 + 80) = v37;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v37) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v38 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v38;
  }
LABEL_48:
  if (!v83)
  {
    __break(1u);
    goto LABEL_98;
  }
  unint64_t v39 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - v81;
  if (v39 < v81)
  {
    unint64_t v41 = 0;
  }
  else
  {
    unint64_t v41 = 0;
    if (v40 <= 0xFFFFFFFFFFFFFFFDLL && v40 + 2 <= v82)
    {
      *(_WORD *)(v81 + v40) = 2870;
      unint64_t v41 = v40 + 2;
    }
  }
  unint64_t v42 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *(void *)(a1 + 64);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v44 = v42 + v41;
  if (v43 <= v44) {
    unint64_t v44 = 0;
  }
  *(void *)(a1 + 80) = v44;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v44);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v80, (uint64_t **)(a1 + 8));
  unint64_t v45 = v80;
  unsigned __int8 v46 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v46 = 1109;
  *((void *)v46 + 1) = a3;
  *((void *)v46 + 66) = (char *)v46 + 16;
  *((void *)v46 + 67) = 512;
  *((void *)v46 + 68) = 0;
  *((void *)v46 + 70) = 0;
  *((void *)v46 + 69) = 0;
  IPC::Encoder::encodeHeader(v46);
  int v84 = v46;
  int v47 = *a2;
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v49 <= 3)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x1990A0298);
  }
  *unint64_t v48 = v47;
  int v50 = a2[1];
  uint64_t v51 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A02B8);
  }
  *uint64_t v51 = v50;
  int v53 = a2[2];
  unint64_t v54 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A02D8);
  }
  _DWORD *v54 = v53;
  int v56 = a2[3];
  unint64_t v57 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v58 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A02F8);
  }
  *unint64_t v57 = v56;
  int v59 = a2[4];
  unint64_t v60 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v61 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A0318);
  }
  _DWORD *v60 = v59;
  uint64_t v38 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v84, 1, 0);
  unint64_t v63 = v84;
  int v84 = 0;
  if (v63)
  {
    IPC::Encoder::~Encoder(v63, v62);
    WTF::fastFree(v64, v65);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80);
  return v38;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribI4iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v55, v7);
    if (!v57) {
      return 15;
    }
    unint64_t v43 = v55;
    unint64_t v42 = v56;
    unint64_t v44 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v45 = v44 - v55;
    if (v44 >= v55)
    {
      unint64_t v46 = v45 + 2;
      if (v45 <= 0xFFFFFFFFFFFFFFFDLL && v46 <= v56)
      {
        *(_WORD *)(v55 + v45) = 2871;
        goto LABEL_58;
      }
      unint64_t v42 = 0;
    }
    unint64_t v46 = 0;
LABEL_58:
    unint64_t v48 = (void *)((v43 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v48 >= v43 + v46)
    {
      unint64_t v46 = (unint64_t)v48 - v43 + 8;
      if ((unint64_t)v48 - v43 > 0xFFFFFFFFFFFFFFF7 || v46 > v42) {
        return 17;
      }
      *unint64_t v48 = a3;
    }
    if (v42)
    {
      unint64_t v50 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v51 = *(void *)(a1 + 64);
      if (v50 + 16 >= v51) {
        unint64_t v50 = 0;
      }
      if (v46 <= 0x10) {
        unint64_t v46 = 16;
      }
      unint64_t v52 = v50 + v46;
      if (v51 <= v52) {
        unint64_t v52 = 0;
      }
      *(void *)(a1 + 80) = v52;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v52) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v55, v7);
  if (!v57) {
    return 15;
  }
  unint64_t v9 = v55;
  unint64_t v10 = v56;
  unint64_t v11 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v55;
  if (v11 >= v55)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v56)
    {
      *(_WORD *)(v55 + v12) = 1110;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (_OWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v20 >= v9 + v13)
  {
    unint64_t v13 = (unint64_t)v20 - v9 + 16;
    if ((unint64_t)v20 - v9 > 0xFFFFFFFFFFFFFFEFLL || v13 > v10) {
      goto LABEL_33;
    }
    *unint64_t v20 = *(_OWORD *)**((void **)a2 + 1);
  }
  if (v10)
  {
    uint64_t v22 = *(void *)(a1 + 72);
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = *(void *)(a1 + 64);
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v25 = v23 + v13;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    *(void *)(a1 + 80) = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v22 + 16) + 128), v25) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v26 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v26;
  }
LABEL_33:
  if (!v57)
  {
    __break(1u);
    goto LABEL_78;
  }
  unint64_t v27 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = v27 - v55;
  if (v27 < v55)
  {
    unint64_t v29 = 0;
  }
  else
  {
    unint64_t v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v56)
    {
      *(_WORD *)(v55 + v28) = 2870;
      unint64_t v29 = v28 + 2;
    }
  }
  unint64_t v30 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = *(void *)(a1 + 64);
  if (v30 + 16 >= v31) {
    unint64_t v30 = 0;
  }
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v32 = v30 + v29;
  if (v31 <= v32) {
    unint64_t v32 = 0;
  }
  *(void *)(a1 + 80) = v32;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v32);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
  unint64_t v33 = v54;
  unint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v34 = 1110;
  *((void *)v34 + 1) = a3;
  *((void *)v34 + 66) = (char *)v34 + 16;
  *((void *)v34 + 67) = 512;
  *((void *)v34 + 68) = 0;
  *((void *)v34 + 70) = 0;
  *((void *)v34 + 69) = 0;
  IPC::Encoder::encodeHeader(v34);
  unint64_t v58 = v34;
  int v35 = *a2;
  unint64_t v36 = (_DWORD *)IPC::Encoder::grow(v34, 4uLL, 4);
  if (v37 <= 3)
  {
LABEL_78:
    __break(0xC471u);
    JUMPOUT(0x1990A0750);
  }
  *unint64_t v36 = v35;
  IPC::ArgumentCoder<std::span<int const,4ul>,void>::encode<IPC::Encoder>(v34, **((_OWORD ***)a2 + 1));
  uint64_t v26 = IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v58, 1, 0);
  unint64_t v39 = v58;
  unint64_t v58 = 0;
  if (v39)
  {
    IPC::Encoder::~Encoder(v39, v38);
    WTF::fastFree(v40, v41);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v54);
  return v26;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribI4ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  int v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1111;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v26 = 1111;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  int v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned int,int,int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned int,int,int>,0ul,1ul,2ul,3ul,4ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  int v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t *IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul,4ul>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    unint64_t v13 = v11 - v2;
    unint64_t v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      uint64_t v2 = *result;
      unint64_t v3 = v14;
    }
  }
  unint64_t v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    unint64_t v18 = v16 - v2;
    unint64_t v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = a2[2];
      result[2] = v19;
      uint64_t v2 = *result;
      unint64_t v3 = v19;
    }
  }
  unint64_t v21 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = v21 - (v2 + v3);
  if (v21 >= v2 + v3)
  {
    unint64_t v23 = v21 - v2;
    unint64_t v24 = v22 + v3 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v23) = a2[3];
      result[2] = v24;
      uint64_t v2 = *result;
      unint64_t v3 = v24;
    }
  }
  uint64_t v26 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v26 >= v2 + v3)
  {
    unint64_t v27 = (unint64_t)v26 - v2 + 4;
    if ((unint64_t)v26 - v2 > 0xFFFFFFFFFFFFFFFBLL || v27 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      _DWORD *v26 = a2[4];
      result[2] = v27;
    }
  }
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribI4uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v58, v7);
    if (!v60) {
      return 15;
    }
    unint64_t v46 = v58;
    unint64_t v45 = v59;
    unint64_t v47 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v48 = v47 - v58;
    if (v47 >= v58)
    {
      unint64_t v49 = v48 + 2;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v49 <= v59)
      {
        *(_WORD *)(v58 + v48) = 2871;
        goto LABEL_59;
      }
      unint64_t v45 = 0;
    }
    unint64_t v49 = 0;
LABEL_59:
    unint64_t v51 = (void *)((v46 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v51 >= v46 + v49)
    {
      unint64_t v49 = (unint64_t)v51 - v46 + 8;
      if ((unint64_t)v51 - v46 > 0xFFFFFFFFFFFFFFF7 || v49 > v45) {
        return 17;
      }
      *unint64_t v51 = a3;
    }
    if (v45)
    {
      unint64_t v53 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v54 = *(void *)(a1 + 64);
      if (v53 + 16 >= v54) {
        unint64_t v53 = 0;
      }
      if (v49 <= 0x10) {
        unint64_t v49 = 16;
      }
      unint64_t v55 = v53 + v49;
      if (v54 <= v55) {
        unint64_t v55 = 0;
      }
      *(void *)(a1 + 80) = v55;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v55) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v58, v7);
  if (!v60) {
    return 15;
  }
  unint64_t v9 = v58;
  unint64_t v10 = v59;
  unint64_t v11 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v58;
  if (v11 >= v58)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v59)
    {
      *(_WORD *)(v58 + v12) = 1112;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (_OWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v20 >= v9 + v13)
  {
    unint64_t v13 = (unint64_t)v20 - v9 + 16;
    if ((unint64_t)v20 - v9 > 0xFFFFFFFFFFFFFFEFLL || v13 > v10) {
      goto LABEL_33;
    }
    *unint64_t v20 = *(_OWORD *)**((void **)a2 + 1);
  }
  if (v10)
  {
    uint64_t v22 = *(void *)(a1 + 72);
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = *(void *)(a1 + 64);
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v25 = v23 + v13;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    *(void *)(a1 + 80) = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v22 + 16) + 128), v25) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v26 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v26;
  }
LABEL_33:
  if (!v60)
  {
    __break(1u);
    goto LABEL_79;
  }
  unint64_t v27 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = v27 - v58;
  if (v27 < v58)
  {
    unint64_t v29 = 0;
  }
  else
  {
    unint64_t v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v59)
    {
      *(_WORD *)(v58 + v28) = 2870;
      unint64_t v29 = v28 + 2;
    }
  }
  unint64_t v30 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = *(void *)(a1 + 64);
  if (v30 + 16 >= v31) {
    unint64_t v30 = 0;
  }
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v32 = v30 + v29;
  if (v31 <= v32) {
    unint64_t v32 = 0;
  }
  *(void *)(a1 + 80) = v32;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v32);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(a1 + 8));
  unint64_t v33 = v57;
  unint64_t v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v34 = 1112;
  *((void *)v34 + 1) = a3;
  *((void *)v34 + 66) = (char *)v34 + 16;
  *((void *)v34 + 67) = 512;
  *((void *)v34 + 68) = 0;
  *((void *)v34 + 70) = 0;
  *((void *)v34 + 69) = 0;
  IPC::Encoder::encodeHeader(v34);
  unint64_t v61 = v34;
  int v35 = *a2;
  unint64_t v36 = (_DWORD *)IPC::Encoder::grow(v34, 4uLL, 4);
  if (v37 <= 3)
  {
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x1990A1070);
  }
  *unint64_t v36 = v35;
  uint64_t v38 = (_OWORD *)**((void **)a2 + 1);
  unint64_t v39 = (_OWORD *)IPC::Encoder::grow(v34, 4uLL, 16);
  if (v40 <= 0xF)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A1090);
  }
  _OWORD *v39 = *v38;
  uint64_t v26 = IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v61, 1, 0);
  unint64_t v42 = v61;
  unint64_t v61 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v41);
    WTF::fastFree(v43, v44);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v57);
  return v26;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribIPointer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
    if (!v83) {
      return 15;
    }
    unint64_t v67 = v81;
    unint64_t v66 = v82;
    unint64_t v68 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v69 = v68 - v81;
    if (v68 >= v81)
    {
      unint64_t v70 = v69 + 2;
      if (v69 <= 0xFFFFFFFFFFFFFFFDLL && v70 <= v82)
      {
        *(_WORD *)(v81 + v69) = 2871;
        goto LABEL_77;
      }
      unint64_t v66 = 0;
    }
    unint64_t v70 = 0;
LABEL_77:
    unint64_t v72 = (void *)((v67 + v70 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v72 >= v67 + v70)
    {
      unint64_t v70 = (unint64_t)v72 - v67 + 8;
      if ((unint64_t)v72 - v67 > 0xFFFFFFFFFFFFFFF7 || v70 > v66) {
        return 17;
      }
      void *v72 = a3;
    }
    if (v66)
    {
      unint64_t v74 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v75 = *(void *)(a1 + 64);
      if (v74 + 16 >= v75) {
        unint64_t v74 = 0;
      }
      if (v70 <= 0x10) {
        unint64_t v70 = 16;
      }
      unint64_t v76 = v74 + v70;
      if (v75 <= v76) {
        unint64_t v76 = 0;
      }
      *(void *)(a1 + 80) = v76;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v76) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
  if (!v83) {
    return 15;
  }
  unint64_t v9 = v81;
  unint64_t v10 = v82;
  unint64_t v11 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v81;
  if (v11 >= v81)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v82)
    {
      *(_WORD *)(v81 + v12) = 1113;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v79 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v79 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v79 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v78 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v79)
    {
      *(_DWORD *)(v9 + v31) = a2[3];
      unint64_t v78 = v79;
      unint64_t v13 = v31 + 4;
    }
  }
  else
  {
    unint64_t v78 = v79;
  }
  unint64_t v32 = (void *)((v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v32 >= v9 + v13)
  {
    unint64_t v33 = (char *)v32 - v9;
    if ((unint64_t)v32 - v9 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_48;
    }
    unint64_t v13 = (unint64_t)(v33 + 8);
    if ((unint64_t)(v33 + 8) > v78) {
      goto LABEL_48;
    }
    *unint64_t v32 = *((void *)a2 + 2);
  }
  if (v78)
  {
    unint64_t v34 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = *(void *)(a1 + 64);
    if (v34 + 16 >= v35) {
      unint64_t v34 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v36 = v34 + v13;
    if (v35 <= v36) {
      unint64_t v37 = 0;
    }
    else {
      unint64_t v37 = v36;
    }
    *(void *)(a1 + 80) = v37;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v37) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v38 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v38;
  }
LABEL_48:
  if (!v83)
  {
    __break(1u);
    goto LABEL_98;
  }
  unint64_t v39 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - v81;
  if (v39 < v81)
  {
    unint64_t v41 = 0;
  }
  else
  {
    unint64_t v41 = 0;
    if (v40 <= 0xFFFFFFFFFFFFFFFDLL && v40 + 2 <= v82)
    {
      *(_WORD *)(v81 + v40) = 2870;
      unint64_t v41 = v40 + 2;
    }
  }
  unint64_t v42 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *(void *)(a1 + 64);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v44 = v42 + v41;
  if (v43 <= v44) {
    unint64_t v44 = 0;
  }
  *(void *)(a1 + 80) = v44;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v44);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v80, (uint64_t **)(a1 + 8));
  unint64_t v45 = v80;
  unint64_t v46 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v46 = 1113;
  *((void *)v46 + 1) = a3;
  *((void *)v46 + 66) = (char *)v46 + 16;
  *((void *)v46 + 67) = 512;
  *((void *)v46 + 68) = 0;
  *((void *)v46 + 70) = 0;
  *((void *)v46 + 69) = 0;
  IPC::Encoder::encodeHeader(v46);
  int v84 = v46;
  int v47 = *a2;
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v49 <= 3)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x1990A15DCLL);
  }
  *unint64_t v48 = v47;
  int v50 = a2[1];
  unint64_t v51 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A15FCLL);
  }
  *unint64_t v51 = v50;
  int v53 = a2[2];
  unint64_t v54 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A161CLL);
  }
  _DWORD *v54 = v53;
  int v56 = a2[3];
  char v57 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v58 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A163CLL);
  }
  *char v57 = v56;
  uint64_t v59 = *((void *)a2 + 2);
  char v60 = (void *)IPC::Encoder::grow(v46, 8uLL, 8);
  if (v61 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A165CLL);
  }
  void *v60 = v59;
  uint64_t v38 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v84, 1, 0);
  unint64_t v63 = v84;
  int v84 = 0;
  if (v63)
  {
    IPC::Encoder::~Encoder(v63, v62);
    WTF::fastFree(v64, v65);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80);
  return v38;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawRangeElements,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v88, v7);
    if (!v90) {
      return 15;
    }
    unint64_t v74 = v88;
    unint64_t v73 = v89;
    unint64_t v75 = (v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v76 = v75 - v88;
    if (v75 >= v88)
    {
      unint64_t v77 = v76 + 2;
      if (v76 <= 0xFFFFFFFFFFFFFFFDLL && v77 <= v89)
      {
        *(_WORD *)(v88 + v76) = 2871;
        goto LABEL_82;
      }
      unint64_t v73 = 0;
    }
    unint64_t v77 = 0;
LABEL_82:
    unint64_t v79 = (void *)((v74 + v77 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v79 >= v74 + v77)
    {
      unint64_t v77 = (unint64_t)v79 - v74 + 8;
      if ((unint64_t)v79 - v74 > 0xFFFFFFFFFFFFFFF7 || v77 > v73) {
        return 17;
      }
      *unint64_t v79 = a3;
    }
    if (v73)
    {
      unint64_t v81 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v82 = *(void *)(a1 + 64);
      if (v81 + 16 >= v82) {
        unint64_t v81 = 0;
      }
      if (v77 <= 0x10) {
        unint64_t v77 = 16;
      }
      unint64_t v83 = v81 + v77;
      if (v82 <= v83) {
        unint64_t v83 = 0;
      }
      *(void *)(a1 + 80) = v83;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v83) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v88, v7);
  if (!v90) {
    return 15;
  }
  unint64_t v9 = v88;
  unint64_t v10 = v89;
  unint64_t v11 = (v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v88;
  if (v11 >= v88)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v89)
    {
      *(_WORD *)(v88 + v12) = 996;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v85 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v85 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v85 = v10;
  }
  unint64_t v29 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v30 = v29 - (v9 + v13);
  if (v29 < v9 + v13)
  {
    unint64_t v31 = v85;
  }
  else
  {
    unint64_t v31 = 0;
    unint64_t v32 = v30 + v13;
    if (v32 <= 0xFFFFFFFFFFFFFFFBLL && v32 + 4 <= v85)
    {
      *(_DWORD *)(v9 + v32) = a2[3];
      unint64_t v31 = v85;
      unint64_t v13 = v32 + 4;
    }
  }
  unint64_t v33 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v33 >= v9 + v13;
  unint64_t v34 = v33 - (v9 + v13);
  if (v26)
  {
    unint64_t v86 = 0;
    unint64_t v35 = v34 + v13;
    if (v35 <= 0xFFFFFFFFFFFFFFFBLL && v35 + 4 <= v31)
    {
      *(_DWORD *)(v9 + v35) = a2[4];
      unint64_t v86 = v31;
      unint64_t v13 = v35 + 4;
    }
  }
  else
  {
    unint64_t v86 = v31;
  }
  unint64_t v36 = (void *)((v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v36 >= v9 + v13)
  {
    unint64_t v37 = (char *)v36 - v9;
    if ((unint64_t)v36 - v9 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_52;
    }
    unint64_t v13 = (unint64_t)(v37 + 8);
    if ((unint64_t)(v37 + 8) > v86) {
      goto LABEL_52;
    }
    *unint64_t v36 = *((void *)a2 + 3);
  }
  if (v86)
  {
    unint64_t v38 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v39 = *(void *)(a1 + 64);
    if (v38 + 16 >= v39) {
      unint64_t v38 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v40 = v38 + v13;
    if (v39 <= v40) {
      unint64_t v41 = 0;
    }
    else {
      unint64_t v41 = v40;
    }
    *(void *)(a1 + 80) = v41;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v42 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v42;
  }
LABEL_52:
  if (!v90)
  {
    __break(1u);
    goto LABEL_103;
  }
  unint64_t v43 = (v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v44 = v43 - v88;
  if (v43 < v88)
  {
    unint64_t v45 = 0;
  }
  else
  {
    unint64_t v45 = 0;
    if (v44 <= 0xFFFFFFFFFFFFFFFDLL && v44 + 2 <= v89)
    {
      *(_WORD *)(v88 + v44) = 2870;
      unint64_t v45 = v44 + 2;
    }
  }
  unint64_t v46 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v47 = *(void *)(a1 + 64);
  if (v46 + 16 >= v47) {
    unint64_t v46 = 0;
  }
  if (v45 <= 0x10) {
    unint64_t v45 = 16;
  }
  unint64_t v48 = v46 + v45;
  if (v47 <= v48) {
    unint64_t v48 = 0;
  }
  *(void *)(a1 + 80) = v48;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v48);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v87, (uint64_t **)(a1 + 8));
  unint64_t v49 = v87;
  int v50 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v50 = 996;
  *((void *)v50 + 1) = a3;
  *((void *)v50 + 66) = (char *)v50 + 16;
  *((void *)v50 + 67) = 512;
  *((void *)v50 + 68) = 0;
  *((void *)v50 + 70) = 0;
  *((void *)v50 + 69) = 0;
  IPC::Encoder::encodeHeader(v50);
  unint64_t v91 = v50;
  int v51 = *a2;
  unint64_t v52 = (_DWORD *)IPC::Encoder::grow(v50, 4uLL, 4);
  if (v53 <= 3)
  {
LABEL_103:
    __break(0xC471u);
    JUMPOUT(0x1990A1C20);
  }
  *unint64_t v52 = v51;
  int v54 = a2[1];
  unint64_t v55 = (_DWORD *)IPC::Encoder::grow(v50, 4uLL, 4);
  if (v56 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A1C40);
  }
  *unint64_t v55 = v54;
  int v57 = a2[2];
  unint64_t v58 = (_DWORD *)IPC::Encoder::grow(v50, 4uLL, 4);
  if (v59 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A1C60);
  }
  *unint64_t v58 = v57;
  int v60 = a2[3];
  unint64_t v61 = (_DWORD *)IPC::Encoder::grow(v50, 4uLL, 4);
  if (v62 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A1C80);
  }
  _DWORD *v61 = v60;
  int v63 = a2[4];
  unint64_t v64 = (_DWORD *)IPC::Encoder::grow(v50, 4uLL, 4);
  if (v65 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A1CA0);
  }
  *unint64_t v64 = v63;
  uint64_t v66 = *((void *)a2 + 3);
  unint64_t v67 = (void *)IPC::Encoder::grow(v50, 8uLL, 8);
  if (v68 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A1CC0);
  }
  void *v67 = v66;
  uint64_t v42 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v91, 1, 0);
  unint64_t v70 = v91;
  unint64_t v91 = 0;
  if (v70)
  {
    IPC::Encoder::~Encoder(v70, v69);
    WTF::fastFree(v71, v72);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v87);
  return v42;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawBuffers,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, const void ***a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 991;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v47, **a2, (uint64_t)(*a2)[1]);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  BOOL v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v26 = 991;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v26, **a2, (uint64_t)(*a2)[1]);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearBufferiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, const void ***a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v62, v7);
    if (!(_BYTE)v64) {
      return 15;
    }
    unint64_t v47 = v62;
    unint64_t v46 = v63;
    unint64_t v48 = ((unint64_t)v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v49 = v48 - (void)v62;
    if (v48 >= (unint64_t)v62)
    {
      unint64_t v50 = v49 + 2;
      if (v49 <= 0xFFFFFFFFFFFFFFFDLL && v50 <= v63)
      {
        *(_WORD *)((char *)v62 + v49) = 2871;
        goto LABEL_59;
      }
      unint64_t v46 = 0;
    }
    unint64_t v50 = 0;
LABEL_59:
    unint64_t v52 = (char *)(((unint64_t)v47 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v52 >= (char *)v47 + v50)
    {
      unint64_t v50 = v52 - (char *)v47 + 8;
      if ((unint64_t)(v52 - (char *)v47) > 0xFFFFFFFFFFFFFFF7 || v50 > v46) {
        return 17;
      }
      *(void *)unint64_t v52 = a3;
    }
    if (v46)
    {
      unint64_t v54 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v55 = *(void *)(a1 + 64);
      if (v54 + 16 >= v55) {
        unint64_t v54 = 0;
      }
      if (v50 <= 0x10) {
        unint64_t v50 = 16;
      }
      unint64_t v56 = v54 + v50;
      if (v55 <= v56) {
        unint64_t v56 = 0;
      }
      *(void *)(a1 + 80) = v56;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v56) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v59, v7);
  if (!v61) {
    return 15;
  }
  unint64_t v9 = v59;
  unint64_t v10 = v60;
  unint64_t v62 = v59;
  unint64_t v63 = v60;
  unint64_t v64 = 0;
  unint64_t v11 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v59;
  if (v11 < (unint64_t)v59)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v60)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v63 = 0;
    }
    else
    {
      *(_WORD *)((char *)v59 + v12) = 935;
      unint64_t v64 = v12 + 2;
    }
  }
  unint64_t v15 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - ((void)v9 + v13);
  if (v15 >= (unint64_t)v9 + v13)
  {
    unint64_t v17 = v15 - (void)v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v63 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v17) = *(_DWORD *)a2;
      unint64_t v64 = v18;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v20 >= (char *)v9 + v13)
  {
    if ((unint64_t)(v20 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || v20 - (char *)v9 + 4 > v10)
    {
      unint64_t v63 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v20 = *((_DWORD *)a2 + 1);
      unint64_t v64 = v20 - (char *)v9 + 4;
    }
  }
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v62, *a2[1], (uint64_t)a2[1][1]);
  if (v63)
  {
    uint64_t v22 = v64;
    uint64_t v23 = *(void *)(a1 + 72);
    unint64_t v24 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v25 = *(void *)(a1 + 64);
    if (v24 + 16 >= v25) {
      unint64_t v24 = 0;
    }
    if (v64 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v26 = v24 + v22;
    if (v25 <= v26) {
      unint64_t v26 = 0;
    }
    *(void *)(a1 + 80) = v26;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v23 + 16) + 128), v26) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  if (!v61)
  {
    __break(1u);
    goto LABEL_79;
  }
  unint64_t v28 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v29 = v28 - (void)v59;
  if (v28 < (unint64_t)v59)
  {
    unint64_t v30 = 0;
  }
  else
  {
    unint64_t v30 = 0;
    if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v29 + 2 <= v60)
    {
      *(_WORD *)((char *)v59 + v29) = 2870;
      unint64_t v30 = v29 + 2;
    }
  }
  unint64_t v31 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = *(void *)(a1 + 64);
  if (v31 + 16 >= v32) {
    unint64_t v31 = 0;
  }
  if (v30 <= 0x10) {
    unint64_t v30 = 16;
  }
  unint64_t v33 = v31 + v30;
  if (v32 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(a1 + 80) = v33;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v33);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(a1 + 8));
  unint64_t v34 = v58;
  unint64_t v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v35 = 935;
  *((void *)v35 + 1) = a3;
  *((void *)v35 + 66) = (char *)v35 + 16;
  *((void *)v35 + 67) = 512;
  *((void *)v35 + 68) = 0;
  *((void *)v35 + 70) = 0;
  *((void *)v35 + 69) = 0;
  IPC::Encoder::encodeHeader(v35);
  unint64_t v62 = v35;
  int v36 = *(_DWORD *)a2;
  unint64_t v37 = (_DWORD *)IPC::Encoder::grow(v35, 4uLL, 4);
  if (v38 <= 3)
  {
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x1990A24D0);
  }
  *unint64_t v37 = v36;
  int v39 = *((_DWORD *)a2 + 1);
  unint64_t v40 = (_DWORD *)IPC::Encoder::grow(v35, 4uLL, 4);
  if (v41 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A24F0);
  }
  _DWORD *v40 = v39;
  IPC::ArgumentCoder<std::span<int const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v35, *a2[1], (uint64_t)a2[1][1]);
  uint64_t v27 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v62, 1, 0);
  unint64_t v43 = v62;
  unint64_t v62 = 0;
  if (v43)
  {
    IPC::Encoder::~Encoder(v43, v42);
    WTF::fastFree(v44, v45);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v58);
  return v27;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearBufferuiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, const void ***a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v62, v7);
    if (!(_BYTE)v64) {
      return 15;
    }
    unint64_t v47 = v62;
    unint64_t v46 = v63;
    unint64_t v48 = ((unint64_t)v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v49 = v48 - (void)v62;
    if (v48 >= (unint64_t)v62)
    {
      unint64_t v50 = v49 + 2;
      if (v49 <= 0xFFFFFFFFFFFFFFFDLL && v50 <= v63)
      {
        *(_WORD *)((char *)v62 + v49) = 2871;
        goto LABEL_59;
      }
      unint64_t v46 = 0;
    }
    unint64_t v50 = 0;
LABEL_59:
    unint64_t v52 = (char *)(((unint64_t)v47 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v52 >= (char *)v47 + v50)
    {
      unint64_t v50 = v52 - (char *)v47 + 8;
      if ((unint64_t)(v52 - (char *)v47) > 0xFFFFFFFFFFFFFFF7 || v50 > v46) {
        return 17;
      }
      *(void *)unint64_t v52 = a3;
    }
    if (v46)
    {
      unint64_t v54 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v55 = *(void *)(a1 + 64);
      if (v54 + 16 >= v55) {
        unint64_t v54 = 0;
      }
      if (v50 <= 0x10) {
        unint64_t v50 = 16;
      }
      unint64_t v56 = v54 + v50;
      if (v55 <= v56) {
        unint64_t v56 = 0;
      }
      *(void *)(a1 + 80) = v56;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v56) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v59, v7);
  if (!v61) {
    return 15;
  }
  unint64_t v9 = v59;
  unint64_t v10 = v60;
  unint64_t v62 = v59;
  unint64_t v63 = v60;
  unint64_t v64 = 0;
  unint64_t v11 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v59;
  if (v11 < (unint64_t)v59)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v60)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v63 = 0;
    }
    else
    {
      *(_WORD *)((char *)v59 + v12) = 936;
      unint64_t v64 = v12 + 2;
    }
  }
  unint64_t v15 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - ((void)v9 + v13);
  if (v15 >= (unint64_t)v9 + v13)
  {
    unint64_t v17 = v15 - (void)v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v63 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v17) = *(_DWORD *)a2;
      unint64_t v64 = v18;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v20 >= (char *)v9 + v13)
  {
    if ((unint64_t)(v20 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || v20 - (char *)v9 + 4 > v10)
    {
      unint64_t v63 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v20 = *((_DWORD *)a2 + 1);
      unint64_t v64 = v20 - (char *)v9 + 4;
    }
  }
  IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v62, *a2[1], (uint64_t)a2[1][1]);
  if (v63)
  {
    uint64_t v22 = v64;
    uint64_t v23 = *(void *)(a1 + 72);
    unint64_t v24 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v25 = *(void *)(a1 + 64);
    if (v24 + 16 >= v25) {
      unint64_t v24 = 0;
    }
    if (v64 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v26 = v24 + v22;
    if (v25 <= v26) {
      unint64_t v26 = 0;
    }
    *(void *)(a1 + 80) = v26;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v23 + 16) + 128), v26) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  if (!v61)
  {
    __break(1u);
    goto LABEL_79;
  }
  unint64_t v28 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v29 = v28 - (void)v59;
  if (v28 < (unint64_t)v59)
  {
    unint64_t v30 = 0;
  }
  else
  {
    unint64_t v30 = 0;
    if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v29 + 2 <= v60)
    {
      *(_WORD *)((char *)v59 + v29) = 2870;
      unint64_t v30 = v29 + 2;
    }
  }
  unint64_t v31 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = *(void *)(a1 + 64);
  if (v31 + 16 >= v32) {
    unint64_t v31 = 0;
  }
  if (v30 <= 0x10) {
    unint64_t v30 = 16;
  }
  unint64_t v33 = v31 + v30;
  if (v32 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(a1 + 80) = v33;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v33);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(a1 + 8));
  unint64_t v34 = v58;
  unint64_t v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v35 = 936;
  *((void *)v35 + 1) = a3;
  *((void *)v35 + 66) = (char *)v35 + 16;
  *((void *)v35 + 67) = 512;
  *((void *)v35 + 68) = 0;
  *((void *)v35 + 70) = 0;
  *((void *)v35 + 69) = 0;
  IPC::Encoder::encodeHeader(v35);
  unint64_t v62 = v35;
  int v36 = *(_DWORD *)a2;
  unint64_t v37 = (_DWORD *)IPC::Encoder::grow(v35, 4uLL, 4);
  if (v38 <= 3)
  {
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x1990A2964);
  }
  *unint64_t v37 = v36;
  int v39 = *((_DWORD *)a2 + 1);
  unint64_t v40 = (_DWORD *)IPC::Encoder::grow(v35, 4uLL, 4);
  if (v41 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A2984);
  }
  _DWORD *v40 = v39;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v35, *a2[1], (uint64_t)a2[1][1]);
  uint64_t v27 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v62, 1, 0);
  unint64_t v43 = v62;
  unint64_t v62 = 0;
  if (v43)
  {
    IPC::Encoder::~Encoder(v43, v42);
    WTF::fastFree(v44, v45);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v58);
  return v27;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearBufferfv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, const void ***a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v62, v7);
    if (!(_BYTE)v64) {
      return 15;
    }
    unint64_t v47 = v62;
    unint64_t v46 = v63;
    unint64_t v48 = ((unint64_t)v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v49 = v48 - (void)v62;
    if (v48 >= (unint64_t)v62)
    {
      unint64_t v50 = v49 + 2;
      if (v49 <= 0xFFFFFFFFFFFFFFFDLL && v50 <= v63)
      {
        *(_WORD *)((char *)v62 + v49) = 2871;
        goto LABEL_59;
      }
      unint64_t v46 = 0;
    }
    unint64_t v50 = 0;
LABEL_59:
    unint64_t v52 = (char *)(((unint64_t)v47 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v52 >= (char *)v47 + v50)
    {
      unint64_t v50 = v52 - (char *)v47 + 8;
      if ((unint64_t)(v52 - (char *)v47) > 0xFFFFFFFFFFFFFFF7 || v50 > v46) {
        return 17;
      }
      *(void *)unint64_t v52 = a3;
    }
    if (v46)
    {
      unint64_t v54 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v55 = *(void *)(a1 + 64);
      if (v54 + 16 >= v55) {
        unint64_t v54 = 0;
      }
      if (v50 <= 0x10) {
        unint64_t v50 = 16;
      }
      unint64_t v56 = v54 + v50;
      if (v55 <= v56) {
        unint64_t v56 = 0;
      }
      *(void *)(a1 + 80) = v56;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v56) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v59, v7);
  if (!v61) {
    return 15;
  }
  unint64_t v9 = v59;
  unint64_t v10 = v60;
  unint64_t v62 = v59;
  unint64_t v63 = v60;
  unint64_t v64 = 0;
  unint64_t v11 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v59;
  if (v11 < (unint64_t)v59)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v60)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v63 = 0;
    }
    else
    {
      *(_WORD *)((char *)v59 + v12) = 934;
      unint64_t v64 = v12 + 2;
    }
  }
  unint64_t v15 = ((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - ((void)v9 + v13);
  if (v15 >= (unint64_t)v9 + v13)
  {
    unint64_t v17 = v15 - (void)v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
      unint64_t v63 = 0;
    }
    else
    {
      *(_DWORD *)((char *)v9 + v17) = *(_DWORD *)a2;
      unint64_t v64 = v18;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v20 >= (char *)v9 + v13)
  {
    if ((unint64_t)(v20 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || v20 - (char *)v9 + 4 > v10)
    {
      unint64_t v63 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v20 = *((_DWORD *)a2 + 1);
      unint64_t v64 = v20 - (char *)v9 + 4;
    }
  }
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v62, *a2[1], (uint64_t)a2[1][1]);
  if (v63)
  {
    uint64_t v22 = v64;
    uint64_t v23 = *(void *)(a1 + 72);
    unint64_t v24 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v25 = *(void *)(a1 + 64);
    if (v24 + 16 >= v25) {
      unint64_t v24 = 0;
    }
    if (v64 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v26 = v24 + v22;
    if (v25 <= v26) {
      unint64_t v26 = 0;
    }
    *(void *)(a1 + 80) = v26;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v23 + 16) + 128), v26) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  if (!v61)
  {
    __break(1u);
    goto LABEL_79;
  }
  unint64_t v28 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v29 = v28 - (void)v59;
  if (v28 < (unint64_t)v59)
  {
    unint64_t v30 = 0;
  }
  else
  {
    unint64_t v30 = 0;
    if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v29 + 2 <= v60)
    {
      *(_WORD *)((char *)v59 + v29) = 2870;
      unint64_t v30 = v29 + 2;
    }
  }
  unint64_t v31 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = *(void *)(a1 + 64);
  if (v31 + 16 >= v32) {
    unint64_t v31 = 0;
  }
  if (v30 <= 0x10) {
    unint64_t v30 = 16;
  }
  unint64_t v33 = v31 + v30;
  if (v32 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(a1 + 80) = v33;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v33);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(a1 + 8));
  unint64_t v34 = v58;
  unint64_t v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v35 = 934;
  *((void *)v35 + 1) = a3;
  *((void *)v35 + 66) = (char *)v35 + 16;
  *((void *)v35 + 67) = 512;
  *((void *)v35 + 68) = 0;
  *((void *)v35 + 70) = 0;
  *((void *)v35 + 69) = 0;
  IPC::Encoder::encodeHeader(v35);
  unint64_t v62 = v35;
  int v36 = *(_DWORD *)a2;
  unint64_t v37 = (_DWORD *)IPC::Encoder::grow(v35, 4uLL, 4);
  if (v38 <= 3)
  {
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x1990A2DF8);
  }
  *unint64_t v37 = v36;
  int v39 = *((_DWORD *)a2 + 1);
  unint64_t v40 = (_DWORD *)IPC::Encoder::grow(v35, 4uLL, 4);
  if (v41 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A2E18);
  }
  _DWORD *v40 = v39;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v35, *a2[1], (uint64_t)a2[1][1]);
  uint64_t v27 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v62, 1, 0);
  unint64_t v43 = v62;
  unint64_t v62 = 0;
  if (v43)
  {
    IPC::Encoder::~Encoder(v43, v42);
    WTF::fastFree(v44, v45);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v58);
  return v27;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearBufferfi,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v71, v7);
    if (!v73) {
      return 15;
    }
    unint64_t v58 = v71;
    unint64_t v57 = v72;
    unint64_t v59 = (v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v60 = v59 - v71;
    if (v59 >= v71)
    {
      unint64_t v61 = v60 + 2;
      if (v60 <= 0xFFFFFFFFFFFFFFFDLL && v61 <= v72)
      {
        *(_WORD *)(v71 + v60) = 2871;
        goto LABEL_69;
      }
      unint64_t v57 = 0;
    }
    unint64_t v61 = 0;
LABEL_69:
    unint64_t v63 = (void *)((v58 + v61 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v63 >= v58 + v61)
    {
      unint64_t v61 = (unint64_t)v63 - v58 + 8;
      if ((unint64_t)v63 - v58 > 0xFFFFFFFFFFFFFFF7 || v61 > v57) {
        return 17;
      }
      *unint64_t v63 = a3;
    }
    if (v57)
    {
      unint64_t v65 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v66 = *(void *)(a1 + 64);
      if (v65 + 16 >= v66) {
        unint64_t v65 = 0;
      }
      if (v61 <= 0x10) {
        unint64_t v61 = 16;
      }
      unint64_t v67 = v65 + v61;
      if (v66 <= v67) {
        unint64_t v67 = 0;
      }
      *(void *)(a1 + 80) = v67;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v67) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v71, v7);
  if (!v73) {
    return 15;
  }
  unint64_t v9 = v71;
  unint64_t v10 = v72;
  unint64_t v11 = (v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v71;
  if (v11 >= v71)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v72)
    {
      *(_WORD *)(v71 + v12) = 933;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(float *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v69 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(float *)(v9 + v28) = a2[2];
      unint64_t v69 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v69 = v10;
  }
  unint64_t v29 = (_DWORD *)((v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v29 >= v9 + v13)
  {
    unint64_t v30 = (char *)v29 - v9;
    if ((unint64_t)v29 - v9 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_42;
    }
    unint64_t v13 = (unint64_t)(v30 + 4);
    if ((unint64_t)(v30 + 4) > v69) {
      goto LABEL_42;
    }
    *unint64_t v29 = *((_DWORD *)a2 + 3);
  }
  if (v69)
  {
    uint64_t v31 = *(void *)(a1 + 72);
    unint64_t v32 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v33 = *(void *)(a1 + 64);
    if (v32 + 16 >= v33) {
      unint64_t v32 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v34 = v32 + v13;
    if (v33 <= v34) {
      unint64_t v34 = 0;
    }
    *(void *)(a1 + 80) = v34;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v31 + 16) + 128), v34) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v35 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v35;
  }
LABEL_42:
  if (!v73)
  {
    __break(1u);
    goto LABEL_90;
  }
  unint64_t v36 = (v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - v71;
  if (v36 < v71)
  {
    unint64_t v38 = 0;
  }
  else
  {
    unint64_t v38 = 0;
    if (v37 <= 0xFFFFFFFFFFFFFFFDLL && v37 + 2 <= v72)
    {
      *(_WORD *)(v71 + v37) = 2870;
      unint64_t v38 = v37 + 2;
    }
  }
  unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *(void *)(a1 + 64);
  if (v39 + 16 >= v40) {
    unint64_t v39 = 0;
  }
  if (v38 <= 0x10) {
    unint64_t v38 = 16;
  }
  unint64_t v41 = v39 + v38;
  if (v40 <= v41) {
    unint64_t v41 = 0;
  }
  *(void *)(a1 + 80) = v41;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v70, (uint64_t **)(a1 + 8));
  uint64_t v42 = v70;
  unint64_t v43 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v43 = 933;
  *((void *)v43 + 1) = a3;
  *((void *)v43 + 66) = (char *)v43 + 16;
  *((void *)v43 + 67) = 512;
  *((void *)v43 + 68) = 0;
  *((void *)v43 + 70) = 0;
  *((void *)v43 + 69) = 0;
  IPC::Encoder::encodeHeader(v43);
  unint64_t v74 = v43;
  int v44 = *(_DWORD *)a2;
  unint64_t v45 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v46 <= 3)
  {
LABEL_90:
    __break(0xC471u);
    JUMPOUT(0x1990A32F4);
  }
  *unint64_t v45 = v44;
  int v47 = *((_DWORD *)a2 + 1);
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v49 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A3314);
  }
  *unint64_t v48 = v47;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v43, a2[2]);
  int v50 = *((_DWORD *)a2 + 3);
  int v51 = (_DWORD *)IPC::Encoder::grow(v43, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990A3334);
  }
  *int v51 = v50;
  uint64_t v35 = IPC::Connection::sendMessageImpl((uint64_t)v42, (uint64_t *)&v74, 1, 0);
  unint64_t v54 = v74;
  unint64_t v74 = 0;
  if (v54)
  {
    IPC::Encoder::~Encoder(v54, v53);
    WTF::fastFree(v55, v56);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v70);
  return v35;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 959;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 959;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 972;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 972;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v61, v9);
    if (!(_BYTE)v63) {
      goto LABEL_101;
    }
    unint64_t v49 = v61;
    unint64_t v48 = v62;
    unint64_t v50 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - (void)v61;
    if (v50 >= (unint64_t)v61)
    {
      unint64_t v52 = v51 + 2;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v62)
      {
        *(_WORD *)((char *)v61 + v51) = 2871;
        goto LABEL_87;
      }
      unint64_t v48 = 0;
    }
    unint64_t v52 = 0;
LABEL_87:
    unint64_t v54 = (char *)(((unint64_t)v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v54 >= (char *)v49 + v52)
    {
      unint64_t v52 = v54 - (char *)v49 + 8;
      if ((unint64_t)(v54 - (char *)v49) > 0xFFFFFFFFFFFFFFF7 || v52 > v48) {
        goto LABEL_112;
      }
      *(void *)unint64_t v54 = a3;
    }
    if (v48)
    {
      uint64_t v56 = *((void *)v6 + 9);
      unint64_t v57 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v58 = *((void *)v6 + 8);
      if (v57 + 16 >= v58) {
        unint64_t v57 = 0;
      }
      if (v52 <= 0x10) {
        unint64_t v52 = 16;
      }
      unint64_t v59 = v57 + v52;
      if (v58 <= v59) {
        unint64_t v59 = 0;
      }
      *((void *)v6 + 10) = v59;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v56 + 16) + 128), v59) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_112:
    char v60 = 17;
    goto LABEL_102;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v65, v9);
  if (!v67)
  {
LABEL_101:
    char v60 = 15;
LABEL_102:
    *(unsigned char *)a4 = v60;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v65;
  unint64_t v14 = v66;
  unint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v71, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    int v76 = 1;
    LOBYTE(v61) = 0;
    int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQuery>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQuery>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
    char v64 = 1;
    if (v76 != -1) {
      ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL7IsQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v68, &v74);
    }
    goto LABEL_55;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3693;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_105;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    unint64_t v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v68) = 0;
        unsigned __int8 v70 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *((void *)v6 + 8);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    *((void *)v6 + 10) = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v74, (uint64_t)v6 + 64, v9);
    if (!(_BYTE)v76)
    {
      LOBYTE(v68) = 16;
      int v69 = 1;
LABEL_41:
      unsigned __int8 v70 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v73, (uint64_t)&v74, (uint64_t *)v11);
    if (*((_WORD *)v73 + 25) != 2870)
    {
      unint64_t v68 = v73;
      int v69 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v73);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v71, v16, 0xE6Du, (uint64_t)&v74, v9);
    LOBYTE(v68) = 0;
    int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, (uint64_t)&v74);
    unsigned __int8 v70 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v75])(&v73, &v74);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v71);
    if (!v70)
    {
      LOBYTE(v61) = 0;
      char v64 = 0;
      goto LABEL_55;
    }
    if (v69 == 1)
    {
      LOBYTE(v61) = (_BYTE)v68;
      int v34 = 1;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_54;
    }
    if (v69) {
      goto LABEL_108;
    }
    LOWORD(v73) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>((uint64_t *)v68, &v73);
    if (!BYTE1(v73))
    {
      LOBYTE(v61) = 13;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_52;
    }
    unint64_t v20 = v70;
    if (v70) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v19 = 0;
  }
  if (v69) {
    goto LABEL_108;
  }
  unint64_t v33 = v68;
  unint64_t v68 = 0;
  unint64_t v74 = v33;
  LOBYTE(v75) = (_BYTE)v73;
  int v76 = 0;
  LOBYTE(v61) = 0;
  int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQuery>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQuery>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
  char v64 = 1;
  if (v76 != -1) {
    ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL7IsQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v72, &v74);
  }
LABEL_52:
  if (v70)
  {
    int v34 = v69;
    if (v69 != -1) {
LABEL_54:
    }
      ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v34])(&v74, &v68);
  }
LABEL_55:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
  if (v64)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQuery>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQuery>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v61);
    if (v64)
    {
      if (v63 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL7IsQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v63])(&v74, &v61);
      }
    }
    return result;
  }
  unint64_t v20 = v67;
  if (!v67) {
    goto LABEL_104;
  }
  unint64_t v35 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v35 - v65;
  if (v35 < v65)
  {
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v66)
    {
      *(_WORD *)(v65 + v36) = 2870;
      unint64_t v37 = v36 + 2;
    }
  }
  unint64_t v38 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *((void *)v6 + 8);
  if (v38 + 16 >= v39) {
    goto LABEL_109;
  }
  while (1)
  {
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v40 = v38 + v37;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *((void *)v6 + 10) = v40;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v40);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, v15);
    double v6 = v73;
    unint64_t v74 = 0;
    IPC::Connection::createSyncMessageEncoder(3693, a3, (uint64_t *)&v74, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v74, (uint64_t *)&v68, 0, (uint64_t)&v61, v9);
    if (v62)
    {
      if (v62 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v61;
        int v41 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_76;
      }
      goto LABEL_108;
    }
    LOWORD(v71) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v61, &v71);
    if (!BYTE1(v71)) {
      break;
    }
    int v41 = v62;
    if (!v62)
    {
      unint64_t v43 = v61;
      unint64_t v61 = 0;
      char v44 = (char)v71;
      *(void *)a4 = v43;
      *(unsigned char *)(a4 + 8) = v44;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_76;
    }
LABEL_108:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
    unint64_t v38 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v41 = v62;
  if (v62 == -1) {
    goto LABEL_77;
  }
LABEL_76:
  ((void (*)(IPC::Decoder ***, uint64_t **))off_1EE9E9D68[v41])(&v71, &v61);
LABEL_77:
  unint64_t v45 = v68;
  unint64_t v68 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v42);
    WTF::fastFree(v46, v47);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQuery>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQuery>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL7IsQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA268[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL7IsQueryEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL7IsQueryEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BeginQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 906;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 906;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EndQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 1000;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 1000;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v56, v9);
    if (!(_BYTE)v58) {
      goto LABEL_101;
    }
    char v44 = v56;
    unint64_t v43 = v57;
    unint64_t v45 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v56;
    if (v45 >= (unint64_t)v56)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v57)
      {
        *(_WORD *)((char *)v56 + v46) = 2871;
        goto LABEL_87;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_87:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
        goto LABEL_111;
      }
      *(void *)unint64_t v49 = a3;
    }
    if (v43)
    {
      uint64_t v51 = v6[9];
      unint64_t v52 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v6[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v6[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v55 = 17;
    goto LABEL_102;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v60, v9);
  if (!v62)
  {
LABEL_101:
    char v55 = 15;
LABEL_102:
    *(unsigned char *)a4 = v55;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v60;
  unint64_t v14 = v61;
  uint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v66, v16))
  {
    LOBYTE(v71) = 11;
    uint64_t v11 = 1;
    LODWORD(v73) = 1;
    LOBYTE(v56) = 0;
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQuery>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQuery>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
    char v59 = 1;
    if (v73 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
    }
    goto LABEL_53;
  }
  uint64_t v71 = v13;
  unint64_t v72 = v14;
  unint64_t v73 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3664;
    unint64_t v73 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v72 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v73 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v71, a2);
    if (!v72)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v73;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v73 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v68, (uint64_t)(v6 + 8), v9);
    if (!v70)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_37:
      char v65 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v68, (uint64_t *)v11);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      int v63 = (uint64_t *)v67;
      int v64 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v66, v16, 0xE50u, (uint64_t)&v68, v9);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v68);
    char v65 = 1;
    if (v69 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v67, &v68);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v66);
    if (!v65)
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
      goto LABEL_50;
    }
    if (v64 == 1)
    {
      char v30 = (char)v63;
LABEL_49:
      LOBYTE(v56) = v30;
      int v58 = 1;
      char v59 = 1;
      goto LABEL_50;
    }
    if (v64) {
      goto LABEL_107;
    }
    uint64_t v28 = IPC::Decoder::decode<std::tuple<float>>(v63);
    if ((v28 & 0xFF00000000) == 0)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v65) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v72 = 0;
  }
  if (v64) {
    goto LABEL_107;
  }
  unint64_t v29 = v63;
  int v63 = 0;
  uint64_t v71 = (uint64_t)v29;
  LODWORD(v72) = v28;
  LODWORD(v73) = 0;
  LOBYTE(v56) = 0;
  int v58 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQuery>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQuery>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
  char v59 = 1;
  if (v73 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
  }
LABEL_50:
  if (v65 && v64 != -1) {
    ((void (*)(uint64_t *, uint64_t **))off_1EE9E9D68[v64])(&v71, &v63);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v59)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQuery>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQuery>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v56);
    if (v59)
    {
      if (v58 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v58])(&v71, &v56);
      }
    }
    return result;
  }
  if (!v62) {
    goto LABEL_104;
  }
  unint64_t v31 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v60;
  if (v31 < v60)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v61)
    {
      *(_WORD *)(v60 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, v15);
    double v6 = v63;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3664, a3, &v71, &v68);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v71, (uint64_t *)&v68, 0, (uint64_t)&v56, v9);
    a2 = (int *)v57;
    if (v57)
    {
      if (v57 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v56;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    uint64_t v37 = IPC::Decoder::decode<std::tuple<float>>(v56);
    if ((v37 & 0xFF00000000) == 0) {
      break;
    }
    if (!v57)
    {
      unint64_t v39 = v56;
      uint64_t v56 = 0;
      *(void *)a4 = v39;
      *(_DWORD *)(a4 + 8) = v37;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[a2])(&v67, &v56);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v57;
  if (v57 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v40 = v68;
  unint64_t v68 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQuery>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQuery>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA278[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetQueryEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetQueryEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v56, v9);
    if (!(_BYTE)v58) {
      goto LABEL_101;
    }
    char v44 = v56;
    unint64_t v43 = v57;
    unint64_t v45 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v56;
    if (v45 >= (unint64_t)v56)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v57)
      {
        *(_WORD *)((char *)v56 + v46) = 2871;
        goto LABEL_87;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_87:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
        goto LABEL_111;
      }
      *(void *)unint64_t v49 = a3;
    }
    if (v43)
    {
      uint64_t v51 = v6[9];
      unint64_t v52 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v6[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v6[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v55 = 17;
    goto LABEL_102;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v60, v9);
  if (!v62)
  {
LABEL_101:
    char v55 = 15;
LABEL_102:
    *(unsigned char *)a4 = v55;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v60;
  unint64_t v14 = v61;
  uint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v66, v16))
  {
    LOBYTE(v71) = 11;
    uint64_t v11 = 1;
    LODWORD(v73) = 1;
    LOBYTE(v56) = 0;
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
    char v59 = 1;
    if (v73 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
    }
    goto LABEL_53;
  }
  uint64_t v71 = v13;
  unint64_t v72 = v14;
  unint64_t v73 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3666;
    unint64_t v73 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v72 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v73 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v71, a2);
    if (!v72)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v73;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v73 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v68, (uint64_t)(v6 + 8), v9);
    if (!v70)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_37:
      char v65 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v68, (uint64_t *)v11);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      int v63 = (uint64_t *)v67;
      int v64 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v66, v16, 0xE52u, (uint64_t)&v68, v9);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v68);
    char v65 = 1;
    if (v69 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v67, &v68);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v66);
    if (!v65)
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
      goto LABEL_50;
    }
    if (v64 == 1)
    {
      char v30 = (char)v63;
LABEL_49:
      LOBYTE(v56) = v30;
      int v58 = 1;
      char v59 = 1;
      goto LABEL_50;
    }
    if (v64) {
      goto LABEL_107;
    }
    uint64_t v28 = IPC::Decoder::decode<std::tuple<float>>(v63);
    if ((v28 & 0xFF00000000) == 0)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v65) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v72 = 0;
  }
  if (v64) {
    goto LABEL_107;
  }
  unint64_t v29 = v63;
  int v63 = 0;
  uint64_t v71 = (uint64_t)v29;
  LODWORD(v72) = v28;
  LODWORD(v73) = 0;
  LOBYTE(v56) = 0;
  int v58 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
  char v59 = 1;
  if (v73 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
  }
LABEL_50:
  if (v65 && v64 != -1) {
    ((void (*)(uint64_t *, uint64_t **))off_1EE9E9D68[v64])(&v71, &v63);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v59)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v56);
    if (v59)
    {
      if (v58 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v58])(&v71, &v56);
      }
    }
    return result;
  }
  if (!v62) {
    goto LABEL_104;
  }
  unint64_t v31 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v60;
  if (v31 < v60)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v61)
    {
      *(_WORD *)(v60 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, v15);
    char v6 = v63;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3666, a3, &v71, &v68);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v71, (uint64_t *)&v68, 0, (uint64_t)&v56, v9);
    a2 = (int *)v57;
    if (v57)
    {
      if (v57 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v56;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    uint64_t v37 = IPC::Decoder::decode<std::tuple<float>>(v56);
    if ((v37 & 0xFF00000000) == 0) {
      break;
    }
    if (!v57)
    {
      unint64_t v39 = v56;
      uint64_t v56 = 0;
      *(void *)a4 = v39;
      *(_DWORD *)(a4 + 8) = v37;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[a2])(&v67, &v56);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v57;
  if (v57 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v40 = v68;
  unint64_t v68 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetQueryObjectui>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA288[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateSampler,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 962;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  uint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v28 = 962;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  char v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteSampler,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 975;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  uint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v28 = 975;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  char v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsSampler,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v61, v9);
    if (!(_BYTE)v63) {
      goto LABEL_101;
    }
    unint64_t v49 = v61;
    unint64_t v48 = v62;
    unint64_t v50 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - (void)v61;
    if (v50 >= (unint64_t)v61)
    {
      unint64_t v52 = v51 + 2;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v62)
      {
        *(_WORD *)((char *)v61 + v51) = 2871;
        goto LABEL_87;
      }
      unint64_t v48 = 0;
    }
    unint64_t v52 = 0;
LABEL_87:
    unint64_t v54 = (char *)(((unint64_t)v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v54 >= (char *)v49 + v52)
    {
      unint64_t v52 = v54 - (char *)v49 + 8;
      if ((unint64_t)(v54 - (char *)v49) > 0xFFFFFFFFFFFFFFF7 || v52 > v48) {
        goto LABEL_112;
      }
      *(void *)unint64_t v54 = a3;
    }
    if (v48)
    {
      uint64_t v56 = *((void *)v6 + 9);
      unint64_t v57 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v58 = *((void *)v6 + 8);
      if (v57 + 16 >= v58) {
        unint64_t v57 = 0;
      }
      if (v52 <= 0x10) {
        unint64_t v52 = 16;
      }
      unint64_t v59 = v57 + v52;
      if (v58 <= v59) {
        unint64_t v59 = 0;
      }
      *((void *)v6 + 10) = v59;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v56 + 16) + 128), v59) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_112:
    char v60 = 17;
    goto LABEL_102;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v65, v9);
  if (!v67)
  {
LABEL_101:
    char v60 = 15;
LABEL_102:
    *(unsigned char *)a4 = v60;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v65;
  unint64_t v14 = v66;
  uint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v71, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    int v76 = 1;
    LOBYTE(v61) = 0;
    int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSampler>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSampler>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
    char v64 = 1;
    if (v76 != -1) {
      ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsSamplerEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v68, &v74);
    }
    goto LABEL_55;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3696;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_105;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    unint64_t v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v68) = 0;
        unsigned __int8 v70 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *((void *)v6 + 8);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    *((void *)v6 + 10) = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v74, (uint64_t)v6 + 64, v9);
    if (!(_BYTE)v76)
    {
      LOBYTE(v68) = 16;
      int v69 = 1;
LABEL_41:
      unsigned __int8 v70 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v73, (uint64_t)&v74, (uint64_t *)v11);
    if (*((_WORD *)v73 + 25) != 2870)
    {
      unint64_t v68 = v73;
      int v69 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v73);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v71, v16, 0xE70u, (uint64_t)&v74, v9);
    LOBYTE(v68) = 0;
    int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, (uint64_t)&v74);
    unsigned __int8 v70 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v75])(&v73, &v74);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v71);
    if (!v70)
    {
      LOBYTE(v61) = 0;
      char v64 = 0;
      goto LABEL_55;
    }
    if (v69 == 1)
    {
      LOBYTE(v61) = (_BYTE)v68;
      int v34 = 1;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_54;
    }
    if (v69) {
      goto LABEL_108;
    }
    LOWORD(v73) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>((uint64_t *)v68, &v73);
    if (!BYTE1(v73))
    {
      LOBYTE(v61) = 13;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_52;
    }
    unint64_t v20 = v70;
    if (v70) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v19 = 0;
  }
  if (v69) {
    goto LABEL_108;
  }
  unint64_t v33 = v68;
  unint64_t v68 = 0;
  unint64_t v74 = v33;
  LOBYTE(v75) = (_BYTE)v73;
  int v76 = 0;
  LOBYTE(v61) = 0;
  int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSampler>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSampler>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
  char v64 = 1;
  if (v76 != -1) {
    ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsSamplerEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v72, &v74);
  }
LABEL_52:
  if (v70)
  {
    int v34 = v69;
    if (v69 != -1) {
LABEL_54:
    }
      ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v34])(&v74, &v68);
  }
LABEL_55:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
  if (v64)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSampler>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSampler>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v61);
    if (v64)
    {
      if (v63 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsSamplerEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v63])(&v74, &v61);
      }
    }
    return result;
  }
  unint64_t v20 = v67;
  if (!v67) {
    goto LABEL_104;
  }
  unint64_t v35 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v35 - v65;
  if (v35 < v65)
  {
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v66)
    {
      *(_WORD *)(v65 + v36) = 2870;
      unint64_t v37 = v36 + 2;
    }
  }
  unint64_t v38 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *((void *)v6 + 8);
  if (v38 + 16 >= v39) {
    goto LABEL_109;
  }
  while (1)
  {
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v40 = v38 + v37;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *((void *)v6 + 10) = v40;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v40);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, v15);
    double v6 = v73;
    unint64_t v74 = 0;
    IPC::Connection::createSyncMessageEncoder(3696, a3, (uint64_t *)&v74, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v74, (uint64_t *)&v68, 0, (uint64_t)&v61, v9);
    if (v62)
    {
      if (v62 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v61;
        int v41 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_76;
      }
      goto LABEL_108;
    }
    LOWORD(v71) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v61, &v71);
    if (!BYTE1(v71)) {
      break;
    }
    int v41 = v62;
    if (!v62)
    {
      unint64_t v43 = v61;
      unint64_t v61 = 0;
      char v44 = (char)v71;
      *(void *)a4 = v43;
      *(unsigned char *)(a4 + 8) = v44;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_76;
    }
LABEL_108:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
    unint64_t v38 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v41 = v62;
  if (v62 == -1) {
    goto LABEL_77;
  }
LABEL_76:
  ((void (*)(IPC::Decoder ***, uint64_t **))off_1EE9E9D68[v41])(&v71, &v61);
LABEL_77:
  unint64_t v45 = v68;
  unint64_t v68 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v42);
    WTF::fastFree(v46, v47);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSampler>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSampler>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsSamplerEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA298[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsSamplerEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsSamplerEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindSampler,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 915;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 915;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SamplerParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1038;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1038;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SamplerParameterf,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1037;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,float>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,float>,0ul,1ul,2ul>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1037;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,float>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,float>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetSamplerParameterf,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v56, v9);
    if (!(_BYTE)v58) {
      goto LABEL_101;
    }
    char v44 = v56;
    unint64_t v43 = v57;
    unint64_t v45 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v56;
    if (v45 >= (unint64_t)v56)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v57)
      {
        *(_WORD *)((char *)v56 + v46) = 2871;
        goto LABEL_87;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_87:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
        goto LABEL_111;
      }
      *(void *)unint64_t v49 = a3;
    }
    if (v43)
    {
      uint64_t v51 = v6[9];
      unint64_t v52 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v6[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v6[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v55 = 17;
    goto LABEL_102;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v60, v9);
  if (!v62)
  {
LABEL_101:
    char v55 = 15;
LABEL_102:
    *(unsigned char *)a4 = v55;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v60;
  unint64_t v14 = v61;
  uint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v66, v16))
  {
    LOBYTE(v71) = 11;
    uint64_t v11 = 1;
    LODWORD(v73) = 1;
    LOBYTE(v56) = 0;
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
    char v59 = 1;
    if (v73 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
    }
    goto LABEL_53;
  }
  uint64_t v71 = v13;
  unint64_t v72 = v14;
  unint64_t v73 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3670;
    unint64_t v73 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v72 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v73 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v71, a2);
    if (!v72)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v73;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v73 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v68, (uint64_t)(v6 + 8), v9);
    if (!v70)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_37:
      char v65 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v68, (uint64_t *)v11);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      int v63 = (uint64_t *)v67;
      int v64 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v66, v16, 0xE56u, (uint64_t)&v68, v9);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v68);
    char v65 = 1;
    if (v69 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v67, &v68);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v66);
    if (!v65)
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
      goto LABEL_50;
    }
    if (v64 == 1)
    {
      char v30 = (char)v63;
LABEL_49:
      LOBYTE(v56) = v30;
      int v58 = 1;
      char v59 = 1;
      goto LABEL_50;
    }
    if (v64) {
      goto LABEL_107;
    }
    uint64_t v28 = IPC::Decoder::decode<std::tuple<float>>(v63);
    if ((v28 & 0xFF00000000) == 0)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v65) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v72 = 0;
  }
  if (v64) {
    goto LABEL_107;
  }
  unint64_t v29 = v63;
  int v63 = 0;
  uint64_t v71 = (uint64_t)v29;
  LODWORD(v72) = v28;
  LODWORD(v73) = 0;
  LOBYTE(v56) = 0;
  int v58 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
  char v59 = 1;
  if (v73 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
  }
LABEL_50:
  if (v65 && v64 != -1) {
    ((void (*)(uint64_t *, uint64_t **))off_1EE9E9D68[v64])(&v71, &v63);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v59)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v56);
    if (v59)
    {
      if (v58 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v58])(&v71, &v56);
      }
    }
    return result;
  }
  if (!v62) {
    goto LABEL_104;
  }
  unint64_t v31 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v60;
  if (v31 < v60)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v61)
    {
      *(_WORD *)(v60 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, v15);
    double v6 = v63;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3670, a3, &v71, &v68);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v71, (uint64_t *)&v68, 0, (uint64_t)&v56, v9);
    a2 = (int *)v57;
    if (v57)
    {
      if (v57 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v56;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    uint64_t v37 = IPC::Decoder::decode<std::tuple<float>>(v56);
    if ((v37 & 0xFF00000000) == 0) {
      break;
    }
    if (!v57)
    {
      unint64_t v39 = v56;
      uint64_t v56 = 0;
      *(void *)a4 = v39;
      *(_DWORD *)(a4 + 8) = v37;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[a2])(&v67, &v56);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v57;
  if (v57 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v40 = v68;
  unint64_t v68 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA2A8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetSamplerParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v56, v9);
    if (!(_BYTE)v58) {
      goto LABEL_101;
    }
    char v44 = v56;
    unint64_t v43 = v57;
    unint64_t v45 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v56;
    if (v45 >= (unint64_t)v56)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v57)
      {
        *(_WORD *)((char *)v56 + v46) = 2871;
        goto LABEL_87;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_87:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
        goto LABEL_111;
      }
      *(void *)unint64_t v49 = a3;
    }
    if (v43)
    {
      uint64_t v51 = v6[9];
      unint64_t v52 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v6[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v6[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v55 = 17;
    goto LABEL_102;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v60, v9);
  if (!v62)
  {
LABEL_101:
    char v55 = 15;
LABEL_102:
    *(unsigned char *)a4 = v55;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v60;
  unint64_t v14 = v61;
  uint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v66, v16))
  {
    LOBYTE(v71) = 11;
    uint64_t v11 = 1;
    LODWORD(v73) = 1;
    LOBYTE(v56) = 0;
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
    char v59 = 1;
    if (v73 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
    }
    goto LABEL_53;
  }
  uint64_t v71 = v13;
  unint64_t v72 = v14;
  unint64_t v73 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3671;
    unint64_t v73 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v72 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v73 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v71, a2);
    if (!v72)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v73;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v73 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v68, (uint64_t)(v6 + 8), v9);
    if (!v70)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_37:
      char v65 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v68, (uint64_t *)v11);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      int v63 = (uint64_t *)v67;
      int v64 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v66, v16, 0xE57u, (uint64_t)&v68, v9);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v68);
    char v65 = 1;
    if (v69 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v67, &v68);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v66);
    if (!v65)
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
      goto LABEL_50;
    }
    if (v64 == 1)
    {
      char v30 = (char)v63;
LABEL_49:
      LOBYTE(v56) = v30;
      int v58 = 1;
      char v59 = 1;
      goto LABEL_50;
    }
    if (v64) {
      goto LABEL_107;
    }
    uint64_t v28 = IPC::Decoder::decode<std::tuple<float>>(v63);
    if ((v28 & 0xFF00000000) == 0)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v65) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v72 = 0;
  }
  if (v64) {
    goto LABEL_107;
  }
  unint64_t v29 = v63;
  int v63 = 0;
  uint64_t v71 = (uint64_t)v29;
  LODWORD(v72) = v28;
  LODWORD(v73) = 0;
  LOBYTE(v56) = 0;
  int v58 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
  char v59 = 1;
  if (v73 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
  }
LABEL_50:
  if (v65 && v64 != -1) {
    ((void (*)(uint64_t *, uint64_t **))off_1EE9E9D68[v64])(&v71, &v63);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v59)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v56);
    if (v59)
    {
      if (v58 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v58])(&v71, &v56);
      }
    }
    return result;
  }
  if (!v62) {
    goto LABEL_104;
  }
  unint64_t v31 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v60;
  if (v31 < v60)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v61)
    {
      *(_WORD *)(v60 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, v15);
    char v6 = v63;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3671, a3, &v71, &v68);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v71, (uint64_t *)&v68, 0, (uint64_t)&v56, v9);
    a2 = (int *)v57;
    if (v57)
    {
      if (v57 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v56;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    uint64_t v37 = IPC::Decoder::decode<std::tuple<float>>(v56);
    if ((v37 & 0xFF00000000) == 0) {
      break;
    }
    if (!v57)
    {
      unint64_t v39 = v56;
      uint64_t v56 = 0;
      *(void *)a4 = v39;
      *(_DWORD *)(a4 + 8) = v37;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[a2])(&v67, &v56);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v57;
  if (v57 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v40 = v68;
  unint64_t v68 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA2B8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::FenceSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v57, v9);
    if (!(_BYTE)v59) {
      goto LABEL_101;
    }
    unint64_t v45 = v57;
    unint64_t v44 = v58;
    unint64_t v46 = ((unint64_t)v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = v46 - (void)v57;
    if (v46 >= (unint64_t)v57)
    {
      unint64_t v48 = v47 + 2;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v48 <= v58)
      {
        *(_WORD *)((char *)v57 + v47) = 2871;
        goto LABEL_87;
      }
      unint64_t v44 = 0;
    }
    unint64_t v48 = 0;
LABEL_87:
    unint64_t v50 = (char *)(((unint64_t)v45 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v50 >= (char *)v45 + v48)
    {
      unint64_t v48 = v50 - (char *)v45 + 8;
      if ((unint64_t)(v50 - (char *)v45) > 0xFFFFFFFFFFFFFFF7 || v48 > v44) {
        goto LABEL_111;
      }
      *(void *)unint64_t v50 = a3;
    }
    if (v44)
    {
      uint64_t v52 = v6[9];
      unint64_t v53 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v54 = v6[8];
      if (v53 + 16 >= v54) {
        unint64_t v53 = 0;
      }
      if (v48 <= 0x10) {
        unint64_t v48 = 16;
      }
      unint64_t v55 = v53 + v48;
      if (v54 <= v55) {
        unint64_t v55 = 0;
      }
      v6[10] = v55;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v52 + 16) + 128), v55) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v56 = 17;
    goto LABEL_102;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v61, v9);
  if (!v63)
  {
LABEL_101:
    char v56 = 15;
LABEL_102:
    *(unsigned char *)a4 = v56;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v61;
  unint64_t v14 = v62;
  uint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v67, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v67, v16))
  {
    LOBYTE(v72) = 11;
    uint64_t v11 = 1;
    LODWORD(v74) = 1;
    LOBYTE(v57) = 0;
    int v59 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::FenceSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::FenceSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v57, (uint64_t)&v72);
    char v60 = 1;
    if (v74 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9FenceSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v74])(&v69, &v72);
    }
    goto LABEL_53;
  }
  uint64_t v72 = v13;
  unint64_t v73 = v14;
  unint64_t v74 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3641;
    unint64_t v74 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v73 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v74 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v72, a2);
    if (!v73)
    {
      LOBYTE(v64) = 0;
      char v66 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v74;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v74 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v69, (uint64_t)(v6 + 8), v9);
    if (!v71)
    {
      LOBYTE(v64) = 16;
      int v65 = 1;
LABEL_37:
      char v66 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v68, (uint64_t)&v69, (uint64_t *)v11);
    if (*((_WORD *)v68 + 25) != 2870)
    {
      int v64 = v68;
      int v65 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v68);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v67, v16, 0xE39u, (uint64_t)&v69, v9);
    LOBYTE(v64) = 0;
    int v65 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)&v69);
    char v66 = 1;
    if (v70 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v70])(&v68, &v69);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v67);
    if (!v66)
    {
      LOBYTE(v57) = 0;
      char v60 = 0;
      goto LABEL_50;
    }
    if (v65 == 1)
    {
      char v31 = (char)v64;
LABEL_49:
      LOBYTE(v57) = v31;
      int v59 = 1;
      char v60 = 1;
      goto LABEL_50;
    }
    if (v65) {
      goto LABEL_107;
    }
    unint64_t v28 = IPC::Decoder::decode<std::tuple<unsigned long long>>(v64);
    if (!v29)
    {
      char v31 = 13;
      goto LABEL_49;
    }
    if (v66) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v73 = 0;
  }
  if (v65) {
    goto LABEL_107;
  }
  char v30 = v64;
  int v64 = 0;
  uint64_t v72 = (uint64_t)v30;
  unint64_t v73 = v28;
  LODWORD(v74) = 0;
  LOBYTE(v57) = 0;
  int v59 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::FenceSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::FenceSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v57, (uint64_t)&v72);
  char v60 = 1;
  if (v74 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9FenceSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v74])(&v69, &v72);
  }
LABEL_50:
  if (v66 && v65 != -1) {
    ((void (*)(uint64_t *, IPC::Decoder **))off_1EE9E9D68[v65])(&v72, &v64);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v67);
  if (v60)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::FenceSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::FenceSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v57);
    if (v60)
    {
      if (v59 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9FenceSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v59])(&v72, &v57);
      }
    }
    return result;
  }
  if (!v63) {
    goto LABEL_104;
  }
  unint64_t v32 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v33 = v32 - v61;
  if (v32 < v61)
  {
    unint64_t v34 = 0;
  }
  else
  {
    unint64_t v34 = 0;
    if (v33 <= 0xFFFFFFFFFFFFFFFDLL && v33 + 2 <= v62)
    {
      *(_WORD *)(v61 + v33) = 2870;
      unint64_t v34 = v33 + 2;
    }
  }
  unint64_t v35 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v6[8];
  if (v35 + 16 >= v36) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v34 <= 0x10) {
      unint64_t v34 = 16;
    }
    unint64_t v37 = v35 + v34;
    if (v36 <= v37) {
      unint64_t v37 = 0;
    }
    v6[10] = v37;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v37);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v64, v15);
    char v6 = (uint64_t *)v64;
    uint64_t v72 = 0;
    IPC::Connection::createSyncMessageEncoder(3641, a3, &v72, &v69);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v69, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v72, (uint64_t *)&v69, 0, (uint64_t)&v57, v9);
    a2 = (int *)v58;
    if (v58)
    {
      if (v58 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v57;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    unint64_t v38 = IPC::Decoder::decode<std::tuple<unsigned long long>>(v57);
    if (!(_BYTE)v39) {
      break;
    }
    if (!v58)
    {
      unint64_t v40 = v57;
      unint64_t v57 = 0;
      *(void *)a4 = v40;
      *(void *)(a4 + 8) = v38;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9D68[a2])(&v68, &v57);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v35 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v58;
  if (v58 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v41 = v69;
  int v69 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v39);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v64);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::FenceSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::FenceSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9FenceSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA2C8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9FenceSyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  a2[1] = a3[1];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9FenceSyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v61, v9);
    if (!(_BYTE)v63) {
      goto LABEL_101;
    }
    unint64_t v49 = v61;
    unint64_t v48 = v62;
    unint64_t v50 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - (void)v61;
    if (v50 >= (unint64_t)v61)
    {
      unint64_t v52 = v51 + 2;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v62)
      {
        *(_WORD *)((char *)v61 + v51) = 2871;
        goto LABEL_87;
      }
      unint64_t v48 = 0;
    }
    unint64_t v52 = 0;
LABEL_87:
    unint64_t v54 = (char *)(((unint64_t)v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v54 >= (char *)v49 + v52)
    {
      unint64_t v52 = v54 - (char *)v49 + 8;
      if ((unint64_t)(v54 - (char *)v49) > 0xFFFFFFFFFFFFFFF7 || v52 > v48) {
        goto LABEL_112;
      }
      *(void *)unint64_t v54 = a3;
    }
    if (v48)
    {
      uint64_t v56 = *((void *)v6 + 9);
      unint64_t v57 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v58 = *((void *)v6 + 8);
      if (v57 + 16 >= v58) {
        unint64_t v57 = 0;
      }
      if (v52 <= 0x10) {
        unint64_t v52 = 16;
      }
      unint64_t v59 = v57 + v52;
      if (v58 <= v59) {
        unint64_t v59 = 0;
      }
      *((void *)v6 + 10) = v59;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v56 + 16) + 128), v59) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_112:
    char v60 = 17;
    goto LABEL_102;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v65, v9);
  if (!v67)
  {
LABEL_101:
    char v60 = 15;
LABEL_102:
    *(unsigned char *)a4 = v60;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v65;
  unint64_t v14 = v66;
  uint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v71, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    int v76 = 1;
    LOBYTE(v61) = 0;
    int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
    char v64 = 1;
    if (v76 != -1) {
      ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL6IsSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v68, &v74);
    }
    goto LABEL_55;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3698;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_105;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    unint64_t v26 = (void *)((v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFF7
        || (unint64_t v20 = (unint64_t)(v27 + 8), (unint64_t)(v27 + 8) > v19))
      {
LABEL_38:
        LOBYTE(v68) = 0;
        unsigned __int8 v70 = 0;
        goto LABEL_42;
      }
      void *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *((void *)v6 + 8);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    *((void *)v6 + 10) = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v74, (uint64_t)v6 + 64, v9);
    if (!(_BYTE)v76)
    {
      LOBYTE(v68) = 16;
      int v69 = 1;
LABEL_41:
      unsigned __int8 v70 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v73, (uint64_t)&v74, (uint64_t *)v11);
    if (*((_WORD *)v73 + 25) != 2870)
    {
      unint64_t v68 = v73;
      int v69 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v73);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v71, v16, 0xE72u, (uint64_t)&v74, v9);
    LOBYTE(v68) = 0;
    int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, (uint64_t)&v74);
    unsigned __int8 v70 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v75])(&v73, &v74);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v71);
    if (!v70)
    {
      LOBYTE(v61) = 0;
      char v64 = 0;
      goto LABEL_55;
    }
    if (v69 == 1)
    {
      LOBYTE(v61) = (_BYTE)v68;
      int v34 = 1;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_54;
    }
    if (v69) {
      goto LABEL_108;
    }
    LOWORD(v73) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>((uint64_t *)v68, &v73);
    if (!BYTE1(v73))
    {
      LOBYTE(v61) = 13;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_52;
    }
    unint64_t v20 = v70;
    if (v70) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v19 = 0;
  }
  if (v69) {
    goto LABEL_108;
  }
  unint64_t v33 = v68;
  unint64_t v68 = 0;
  unint64_t v74 = v33;
  LOBYTE(v75) = (_BYTE)v73;
  int v76 = 0;
  LOBYTE(v61) = 0;
  int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
  char v64 = 1;
  if (v76 != -1) {
    ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL6IsSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v72, &v74);
  }
LABEL_52:
  if (v70)
  {
    int v34 = v69;
    if (v69 != -1) {
LABEL_54:
    }
      ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v34])(&v74, &v68);
  }
LABEL_55:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
  if (v64)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v61);
    if (v64)
    {
      if (v63 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL6IsSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v63])(&v74, &v61);
      }
    }
    return result;
  }
  unint64_t v20 = v67;
  if (!v67) {
    goto LABEL_104;
  }
  unint64_t v35 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v35 - v65;
  if (v35 < v65)
  {
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v66)
    {
      *(_WORD *)(v65 + v36) = 2870;
      unint64_t v37 = v36 + 2;
    }
  }
  unint64_t v38 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *((void *)v6 + 8);
  if (v38 + 16 >= v39) {
    goto LABEL_109;
  }
  while (1)
  {
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v40 = v38 + v37;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *((void *)v6 + 10) = v40;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v40);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, v15);
    char v6 = v73;
    unint64_t v74 = 0;
    IPC::Connection::createSyncMessageEncoder(3698, a3, (uint64_t *)&v74, &v68);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v74, (uint64_t *)&v68, 0, (uint64_t)&v61, v9);
    if (v62)
    {
      if (v62 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v61;
        int v41 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_76;
      }
      goto LABEL_108;
    }
    LOWORD(v71) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v61, &v71);
    if (!BYTE1(v71)) {
      break;
    }
    int v41 = v62;
    if (!v62)
    {
      unint64_t v43 = v61;
      unint64_t v61 = 0;
      char v44 = (char)v71;
      *(void *)a4 = v43;
      *(unsigned char *)(a4 + 8) = v44;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_76;
    }
LABEL_108:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
    unint64_t v38 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v41 = v62;
  if (v62 == -1) {
    goto LABEL_77;
  }
LABEL_76:
  ((void (*)(IPC::Decoder ***, uint64_t **))off_1EE9E9D68[v41])(&v71, &v61);
LABEL_77:
  unint64_t v45 = v68;
  unint64_t v68 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v42);
    WTF::fastFree(v46, v47);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL6IsSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA2D8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL6IsSyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL6IsSyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 977;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (void *)((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 8;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFF7 || v13 > v9) {
      goto LABEL_27;
    }
    void *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 977;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::ClientWaitSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, uint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  if (*((IPC::Encoder **)v6 + 7) != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v77, v9);
    if (!(_BYTE)v79) {
      goto LABEL_118;
    }
    int v63 = v77;
    unint64_t v62 = v78;
    unint64_t v64 = ((unint64_t)v77 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v65 = v64 - (void)v77;
    if (v64 >= (unint64_t)v77)
    {
      unint64_t v66 = v65 + 2;
      if (v65 <= 0xFFFFFFFFFFFFFFFDLL && v66 <= v78)
      {
        *(_WORD *)((char *)v77 + v65) = 2871;
        goto LABEL_104;
      }
      unint64_t v62 = 0;
    }
    unint64_t v66 = 0;
LABEL_104:
    unint64_t v68 = (char *)(((unint64_t)v63 + v66 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v68 >= (char *)v63 + v66)
    {
      unint64_t v66 = v68 - (char *)v63 + 8;
      if ((unint64_t)(v68 - (char *)v63) > 0xFFFFFFFFFFFFFFF7 || v66 > v62) {
        goto LABEL_131;
      }
      *(void *)unint64_t v68 = a3;
    }
    if (v62)
    {
      uint64_t v70 = *((void *)v6 + 9);
      unint64_t v71 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v72 = *((void *)v6 + 8);
      if (v71 + 16 >= v72) {
        unint64_t v71 = 0;
      }
      if (v66 <= 0x10) {
        unint64_t v66 = 16;
      }
      unint64_t v73 = v71 + v66;
      if (v72 <= v73) {
        unint64_t v73 = 0;
      }
      *((void *)v6 + 10) = v73;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v70 + 16) + 128), v73) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_131:
    char v74 = 17;
    goto LABEL_119;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v81, v9);
  if (!v83)
  {
LABEL_118:
    char v74 = 15;
LABEL_119:
    *(unsigned char *)a4 = v74;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v12 = v81;
  unint64_t v13 = v82;
  unint64_t v14 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v87, (uint64_t **)v6 + 1);
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (IPC::Connection::pushPendingSyncRequestID((uint64_t)v87, v15))
  {
    unint64_t v16 = (v12 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = v16 - v12;
    if (v16 < v12)
    {
      unint64_t v19 = 0;
      unint64_t v18 = v13;
    }
    else
    {
      unint64_t v18 = 0;
      if (v17 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v19 = 0;
      }
      else
      {
        unint64_t v19 = 0;
        if (v17 + 2 <= v13)
        {
          *(_WORD *)(v12 + v17) = 3638;
          unint64_t v18 = v13;
          unint64_t v19 = v17 + 2;
        }
      }
    }
    unint64_t v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = v20 - (v12 + v19);
    if (v20 >= v12 + v19)
    {
      unint64_t v22 = v20 - v12;
      unint64_t v23 = v21 + v19 + 8;
      if (v22 > 0xFFFFFFFFFFFFFFF7 || v23 > v18)
      {
        unint64_t v18 = 0;
      }
      else
      {
        *(void *)(v12 + v22) = v15;
        unint64_t v19 = v23;
      }
    }
    unint64_t v25 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    BOOL v26 = v25 >= v12 + v19;
    unint64_t v27 = v25 - (v12 + v19);
    if (v26)
    {
      unint64_t v75 = 0;
      unint64_t v28 = v27 + v19;
      if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= v18)
      {
        *(void *)(v12 + v28) = *(void *)a2;
        unint64_t v75 = v18;
        unint64_t v19 = v28 + 8;
      }
    }
    else
    {
      unint64_t v75 = v18;
    }
    unint64_t v29 = (v12 + v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    BOOL v26 = v29 >= v12 + v19;
    unint64_t v30 = v29 - (v12 + v19);
    if (v26)
    {
      unint64_t v76 = 0;
      unint64_t v31 = v30 + v19;
      if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= v75)
      {
        *(_DWORD *)(v12 + v31) = *(_DWORD *)(a2 + 8);
        unint64_t v76 = v75;
        unint64_t v19 = v31 + 4;
      }
    }
    else
    {
      unint64_t v76 = v75;
    }
    unint64_t v32 = (void *)((v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v32 >= v12 + v19)
    {
      unint64_t v33 = (char *)v32 - v12;
      if ((unint64_t)v32 - v12 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_48;
      }
      unint64_t v19 = (unint64_t)(v33 + 8);
      if ((unint64_t)(v33 + 8) > v76) {
        goto LABEL_48;
      }
      *unint64_t v32 = *(void *)(a2 + 16);
    }
    if (v76)
    {
      unint64_t v34 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v35 = *((void *)v6 + 8);
      if (v34 + 16 >= v35) {
        unint64_t v34 = 0;
      }
      if (v19 <= 0x10) {
        unint64_t v19 = 16;
      }
      unint64_t v36 = v34 + v19;
      if (v35 <= v36) {
        unint64_t v36 = 0;
      }
      *((void *)v6 + 10) = v36;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v36) == 0x80000000
        || *((_DWORD *)v6 + 29))
      {
        if (*((unsigned char *)v6 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
        }
        *((_DWORD *)v6 + 29) = 0;
      }
      IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v89, (uint64_t)v6 + 64, v9);
      if ((_BYTE)v91)
      {
        WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v88, (uint64_t)&v89, (uint64_t *)v6 + 7);
        if (*((_WORD *)v88 + 25) == 2870)
        {
          IPC::Decoder::~Decoder(v88);
          WTF::fastFree(v37, v38);
          IPC::Connection::waitForSyncReply((uint64_t)v87, v15, 0xE36u, (uint64_t)&v89, v9);
          LOBYTE(v84) = 0;
          int v85 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v84, (uint64_t)&v89);
          char v86 = 1;
          if (v90 != -1) {
            ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v90])(&v88, &v89);
          }
LABEL_52:
          IPC::Connection::popPendingSyncRequestID(v87);
          if (v86)
          {
            if (v85 == 1)
            {
              char v41 = (char)v84;
            }
            else
            {
              if (v85) {
                goto LABEL_127;
              }
              uint64_t v39 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v84);
              if ((v39 & 0xFF00000000) != 0)
              {
                if (!v86) {
                  goto LABEL_121;
                }
                if (v85) {
                  goto LABEL_127;
                }
                unint64_t v40 = v84;
                int v84 = 0;
                unint64_t v89 = v40;
                int v90 = v39;
                int v91 = 0;
                LOBYTE(v77) = 0;
                int v79 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ClientWaitSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ClientWaitSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v77, (uint64_t)&v89);
                char v80 = 1;
                if (v91 != -1) {
                  ((void (*)(IPC::Decoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v91])(&v88, &v89);
                }
                goto LABEL_64;
              }
              char v41 = 13;
            }
            LOBYTE(v77) = v41;
            int v79 = 1;
            char v80 = 1;
          }
          else
          {
            LOBYTE(v77) = 0;
            char v80 = 0;
          }
LABEL_64:
          if (v86 && v85 != -1) {
            ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v85])(&v89, &v84);
          }
          goto LABEL_67;
        }
        int v84 = v88;
        int v85 = 0;
      }
      else
      {
        LOBYTE(v84) = 16;
        int v85 = 1;
      }
      char v86 = 1;
      goto LABEL_52;
    }
LABEL_48:
    LOBYTE(v84) = 0;
    char v86 = 0;
    goto LABEL_52;
  }
  LOBYTE(v89) = 11;
  int v91 = 1;
  LOBYTE(v77) = 0;
  int v79 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ClientWaitSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ClientWaitSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v77, (uint64_t)&v89);
  char v80 = 1;
  if (v91 != -1) {
    ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v91])(&v84, &v89);
  }
LABEL_67:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v87);
  if (v80)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ClientWaitSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ClientWaitSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v77);
    if (v80)
    {
      if (v79 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v79])(&v89, &v77);
      }
    }
    return result;
  }
  if (!v83)
  {
LABEL_121:
    __break(1u);
LABEL_122:
    __break(0xC471u);
    JUMPOUT(0x1990A9CA8);
  }
  unint64_t v42 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = v42 - v81;
  if (v42 < v81)
  {
    unint64_t v44 = 0;
  }
  else
  {
    unint64_t v44 = 0;
    if (v43 <= 0xFFFFFFFFFFFFFFFDLL && v43 + 2 <= v82)
    {
      *(_WORD *)(v81 + v43) = 2870;
      unint64_t v44 = v43 + 2;
    }
  }
  unint64_t v45 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v46 = *((void *)v6 + 8);
  if (v45 + 16 >= v46) {
    goto LABEL_128;
  }
  while (1)
  {
    if (v44 <= 0x10) {
      unint64_t v44 = 16;
    }
    unint64_t v47 = v45 + v44;
    if (v46 <= v47) {
      unint64_t v47 = 0;
    }
    *((void *)v6 + 10) = v47;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v47);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v88, v14);
    double v6 = v88;
    unint64_t v89 = 0;
    IPC::Connection::createSyncMessageEncoder(3638, (uint64_t)a3, (uint64_t *)&v89, &v84);
    a3 = v84;
    uint64_t v48 = *(void *)a2;
    unint64_t v49 = (void *)IPC::Encoder::grow(v84, 8uLL, 8);
    if (v50 <= 7) {
      goto LABEL_122;
    }
    *unint64_t v49 = v48;
    unint64_t v14 = (uint64_t **)*(unsigned int *)(a2 + 8);
    unint64_t v51 = (_DWORD *)IPC::Encoder::grow(a3, 4uLL, 4);
    if (v52 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1990A9CC8);
    }
    *unint64_t v51 = v14;
    uint64_t v53 = *(void *)(a2 + 16);
    unint64_t v54 = (void *)IPC::Encoder::grow(a3, 8uLL, 8);
    if (v55 <= 7)
    {
      __break(0xC471u);
      JUMPOUT(0x1990A9CE8);
    }
    void *v54 = v53;
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v89, (uint64_t *)&v84, 0, (uint64_t)&v77, v9);
    a2 = v78;
    if (v78)
    {
      if (v78 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v77;
        goto LABEL_90;
      }
      goto LABEL_127;
    }
    uint64_t v56 = IPC::Decoder::decode<std::tuple<float>>(v77);
    if ((v56 & 0xFF00000000) == 0) {
      break;
    }
    if (!v78)
    {
      unint64_t v58 = v77;
      unint64_t v77 = 0;
      *(void *)a4 = v58;
      *(_DWORD *)(a4 + 8) = v56;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder ***, uint64_t **))off_1EE9E9D68[a2])(&v87, &v77);
      goto LABEL_92;
    }
LABEL_127:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_128:
    unint64_t v45 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v78;
  if (v78 != -1) {
    goto LABEL_91;
  }
LABEL_92:
  unint64_t v59 = v84;
  int v84 = 0;
  if (v59)
  {
    IPC::Encoder::~Encoder(v59, v57);
    WTF::fastFree(v60, v61);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v88);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ClientWaitSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ClientWaitSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA2E8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::WaitSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v64, v7);
    if (!v66) {
      return 15;
    }
    unint64_t v52 = v64;
    unint64_t v51 = v65;
    unint64_t v53 = (v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v54 = v53 - v64;
    if (v53 >= v64)
    {
      unint64_t v55 = v54 + 2;
      if (v54 <= 0xFFFFFFFFFFFFFFFDLL && v55 <= v65)
      {
        *(_WORD *)(v64 + v54) = 2871;
        goto LABEL_63;
      }
      unint64_t v51 = 0;
    }
    unint64_t v55 = 0;
LABEL_63:
    unint64_t v57 = (void *)((v52 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v57 >= v52 + v55)
    {
      unint64_t v55 = (unint64_t)v57 - v52 + 8;
      if ((unint64_t)v57 - v52 > 0xFFFFFFFFFFFFFFF7 || v55 > v51) {
        return 17;
      }
      *unint64_t v57 = a3;
    }
    if (v51)
    {
      unint64_t v59 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v60 = *(void *)(a1 + 64);
      if (v59 + 16 >= v60) {
        unint64_t v59 = 0;
      }
      if (v55 <= 0x10) {
        unint64_t v55 = 16;
      }
      unint64_t v61 = v59 + v55;
      if (v60 <= v61) {
        unint64_t v61 = 0;
      }
      *(void *)(a1 + 80) = v61;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v61) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v64, v7);
  if (!v66) {
    return 15;
  }
  unint64_t v9 = v64;
  unint64_t v10 = v65;
  unint64_t v11 = (v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v64;
  if (v11 >= v64)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v65)
    {
      *(_WORD *)(v64 + v12) = 1116;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 8;
    if (v17 > 0xFFFFFFFFFFFFFFF7 || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(void *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = *((_DWORD *)a2 + 2);
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (void *)((v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v9 + v13)
  {
    BOOL v26 = (char *)v25 - v9;
    if ((unint64_t)v25 - v9 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_37;
    }
    unint64_t v13 = (unint64_t)(v26 + 8);
    if ((unint64_t)(v26 + 8) > v10) {
      goto LABEL_37;
    }
    void *v25 = a2[2];
  }
  if (v10)
  {
    uint64_t v27 = *(void *)(a1 + 72);
    unint64_t v28 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *(void *)(a1 + 64);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    uint64_t v30 = 16;
    if (v13 > 0x10) {
      uint64_t v30 = v13;
    }
    unint64_t v31 = v28 + v30;
    if (v29 <= v31) {
      unint64_t v31 = 0;
    }
    *(void *)(a1 + 80) = v31;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v27 + 16) + 128), v31) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v32 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v32;
  }
LABEL_37:
  if (!v66)
  {
    __break(1u);
    goto LABEL_84;
  }
  unint64_t v33 = (v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - v64;
  if (v33 < v64)
  {
    unint64_t v35 = 0;
  }
  else
  {
    unint64_t v35 = 0;
    if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v65)
    {
      *(_WORD *)(v64 + v34) = 2870;
      unint64_t v35 = v34 + 2;
    }
  }
  unint64_t v36 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = *(void *)(a1 + 64);
  if (v36 + 16 >= v37) {
    unint64_t v36 = 0;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v38 = v36 + v35;
  if (v37 <= v38) {
    unint64_t v38 = 0;
  }
  *(void *)(a1 + 80) = v38;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v38);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, (uint64_t **)(a1 + 8));
  uint64_t v39 = v63;
  unint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v40 = 1116;
  *((void *)v40 + 1) = a3;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  unsigned __int8 v67 = v40;
  uint64_t v41 = *a2;
  unint64_t v42 = (void *)IPC::Encoder::grow(v40, 8uLL, 8);
  if (v43 <= 7)
  {
LABEL_84:
    __break(0xC471u);
    JUMPOUT(0x1990AA244);
  }
  *unint64_t v42 = v41;
  int v44 = *((_DWORD *)a2 + 2);
  unint64_t v45 = (_DWORD *)IPC::Encoder::grow(v40, 4uLL, 4);
  if (v46 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990AA264);
  }
  *unint64_t v45 = v44;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v40, a2[2]);
  uint64_t v32 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v67, 1, 0);
  uint64_t v48 = v67;
  unsigned __int8 v67 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
  return v32;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetSynci,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, uint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  if (*((IPC::Encoder **)v6 + 7) != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v70, v9);
    if (!(_BYTE)v72) {
      goto LABEL_112;
    }
    unint64_t v57 = v70;
    unint64_t v56 = v71;
    unint64_t v58 = ((unint64_t)v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v59 = v58 - (void)v70;
    if (v58 >= (unint64_t)v70)
    {
      unint64_t v60 = v59 + 2;
      if (v59 <= 0xFFFFFFFFFFFFFFFDLL && v60 <= v71)
      {
        *(_WORD *)((char *)v70 + v59) = 2871;
        goto LABEL_98;
      }
      unint64_t v56 = 0;
    }
    unint64_t v60 = 0;
LABEL_98:
    unint64_t v62 = (char *)(((unint64_t)v57 + v60 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v62 >= (char *)v57 + v60)
    {
      unint64_t v60 = v62 - (char *)v57 + 8;
      if ((unint64_t)(v62 - (char *)v57) > 0xFFFFFFFFFFFFFFF7 || v60 > v56) {
        goto LABEL_124;
      }
      *(void *)unint64_t v62 = a3;
    }
    if (v56)
    {
      uint64_t v64 = *((void *)v6 + 9);
      unint64_t v65 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v66 = *((void *)v6 + 8);
      if (v65 + 16 >= v66) {
        unint64_t v65 = 0;
      }
      if (v60 <= 0x10) {
        unint64_t v60 = 16;
      }
      unint64_t v67 = v65 + v60;
      if (v66 <= v67) {
        unint64_t v67 = 0;
      }
      *((void *)v6 + 10) = v67;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v64 + 16) + 128), v67) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_124:
    char v68 = 17;
    goto LABEL_113;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v74, v9);
  if (!v76)
  {
LABEL_112:
    char v68 = 15;
LABEL_113:
    *(unsigned char *)a4 = v68;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v12 = v74;
  unint64_t v13 = v75;
  unint64_t v14 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v80, (uint64_t **)v6 + 1);
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (IPC::Connection::pushPendingSyncRequestID((uint64_t)v80, v15))
  {
    unint64_t v16 = (v12 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = v16 - v12;
    if (v16 < v12)
    {
      unint64_t v19 = 0;
      unint64_t v18 = v13;
    }
    else
    {
      unint64_t v18 = 0;
      if (v17 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v19 = 0;
      }
      else
      {
        unint64_t v19 = 0;
        if (v17 + 2 <= v13)
        {
          *(_WORD *)(v12 + v17) = 3677;
          unint64_t v18 = v13;
          unint64_t v19 = v17 + 2;
        }
      }
    }
    unint64_t v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = v20 - (v12 + v19);
    if (v20 >= v12 + v19)
    {
      unint64_t v22 = v20 - v12;
      unint64_t v23 = v21 + v19 + 8;
      if (v22 > 0xFFFFFFFFFFFFFFF7 || v23 > v18)
      {
        unint64_t v18 = 0;
      }
      else
      {
        *(void *)(v12 + v22) = v15;
        unint64_t v19 = v23;
      }
    }
    unint64_t v25 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    BOOL v26 = v25 >= v12 + v19;
    unint64_t v27 = v25 - (v12 + v19);
    if (v26)
    {
      unint64_t v69 = 0;
      unint64_t v28 = v27 + v19;
      if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= v18)
      {
        *(void *)(v12 + v28) = *(void *)a2;
        unint64_t v69 = v18;
        unint64_t v19 = v28 + 8;
      }
    }
    else
    {
      unint64_t v69 = v18;
    }
    unint64_t v29 = (_DWORD *)((v12 + v19 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v29 >= v12 + v19)
    {
      uint64_t v30 = (char *)v29 - v12;
      if ((unint64_t)v29 - v12 > 0xFFFFFFFFFFFFFFFBLL) {
        goto LABEL_43;
      }
      unint64_t v19 = (unint64_t)(v30 + 4);
      if ((unint64_t)(v30 + 4) > v69) {
        goto LABEL_43;
      }
      *unint64_t v29 = *(_DWORD *)(a2 + 8);
    }
    if (v69)
    {
      unint64_t v31 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v32 = *((void *)v6 + 8);
      if (v31 + 16 >= v32) {
        unint64_t v31 = 0;
      }
      if (v19 <= 0x10) {
        unint64_t v19 = 16;
      }
      unint64_t v33 = v31 + v19;
      if (v32 <= v33) {
        unint64_t v33 = 0;
      }
      *((void *)v6 + 10) = v33;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v33) == 0x80000000
        || *((_DWORD *)v6 + 29))
      {
        if (*((unsigned char *)v6 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
        }
        *((_DWORD *)v6 + 29) = 0;
      }
      IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v82, (uint64_t)v6 + 64, v9);
      if ((_BYTE)v84)
      {
        WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v81, (uint64_t)&v82, (uint64_t *)v6 + 7);
        if (*((_WORD *)v81 + 25) == 2870)
        {
          IPC::Decoder::~Decoder(v81);
          WTF::fastFree(v34, v35);
          IPC::Connection::waitForSyncReply((uint64_t)v80, v15, 0xE5Du, (uint64_t)&v82, v9);
          LOBYTE(v77) = 0;
          int v78 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v77, (uint64_t)&v82);
          char v79 = 1;
          if (v83 != -1) {
            ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v83])(&v81, &v82);
          }
LABEL_47:
          IPC::Connection::popPendingSyncRequestID(v80);
          if (v79)
          {
            if (v78 == 1)
            {
              char v38 = (char)v77;
            }
            else
            {
              if (v78) {
                goto LABEL_120;
              }
              uint64_t v36 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v77);
              if ((v36 & 0xFF00000000) != 0)
              {
                if (!v79) {
                  goto LABEL_115;
                }
                if (v78) {
                  goto LABEL_120;
                }
                unint64_t v37 = v77;
                unint64_t v77 = 0;
                unint64_t v82 = v37;
                int v83 = v36;
                int v84 = 0;
                LOBYTE(v70) = 0;
                int v72 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSynci>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSynci>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v70, (uint64_t)&v82);
                char v73 = 1;
                if (v84 != -1) {
                  ((void (*)(IPC::Decoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetSynciEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v84])(&v81, &v82);
                }
                goto LABEL_59;
              }
              char v38 = 13;
            }
            LOBYTE(v70) = v38;
            int v72 = 1;
            char v73 = 1;
          }
          else
          {
            LOBYTE(v70) = 0;
            char v73 = 0;
          }
LABEL_59:
          if (v79 && v78 != -1) {
            ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v78])(&v82, &v77);
          }
          goto LABEL_62;
        }
        unint64_t v77 = v81;
        int v78 = 0;
      }
      else
      {
        LOBYTE(v77) = 16;
        int v78 = 1;
      }
      char v79 = 1;
      goto LABEL_47;
    }
LABEL_43:
    LOBYTE(v77) = 0;
    char v79 = 0;
    goto LABEL_47;
  }
  LOBYTE(v82) = 11;
  int v84 = 1;
  LOBYTE(v70) = 0;
  int v72 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSynci>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSynci>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v70, (uint64_t)&v82);
  char v73 = 1;
  if (v84 != -1) {
    ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetSynciEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v84])(&v77, &v82);
  }
LABEL_62:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80);
  if (v73)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSynci>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSynci>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v70);
    if (v73)
    {
      if (v72 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetSynciEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v72])(&v82, &v70);
      }
    }
    return result;
  }
  if (!v76)
  {
LABEL_115:
    __break(1u);
LABEL_116:
    __break(0xC471u);
    JUMPOUT(0x1990AA9E8);
  }
  unint64_t v39 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - v74;
  if (v39 < v74)
  {
    unint64_t v41 = 0;
  }
  else
  {
    unint64_t v41 = 0;
    if (v40 <= 0xFFFFFFFFFFFFFFFDLL && v40 + 2 <= v75)
    {
      *(_WORD *)(v74 + v40) = 2870;
      unint64_t v41 = v40 + 2;
    }
  }
  unint64_t v42 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *((void *)v6 + 8);
  if (v42 + 16 >= v43) {
    goto LABEL_121;
  }
  while (1)
  {
    if (v41 <= 0x10) {
      unint64_t v41 = 16;
    }
    unint64_t v44 = v42 + v41;
    if (v43 <= v44) {
      unint64_t v44 = 0;
    }
    *((void *)v6 + 10) = v44;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v44);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v81, v14);
    double v6 = v81;
    unint64_t v82 = 0;
    IPC::Connection::createSyncMessageEncoder(3677, (uint64_t)a3, (uint64_t *)&v82, &v77);
    a3 = v77;
    unint64_t v14 = *(uint64_t ***)a2;
    unint64_t v45 = (void *)IPC::Encoder::grow(v77, 8uLL, 8);
    if (v46 <= 7) {
      goto LABEL_116;
    }
    *unint64_t v45 = v14;
    int v47 = *(_DWORD *)(a2 + 8);
    uint64_t v48 = (_DWORD *)IPC::Encoder::grow(a3, 4uLL, 4);
    if (v49 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1990AAA08);
    }
    *uint64_t v48 = v47;
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v82, (uint64_t *)&v77, 0, (uint64_t)&v70, v9);
    a2 = v71;
    if (v71)
    {
      if (v71 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v70;
        goto LABEL_84;
      }
      goto LABEL_120;
    }
    uint64_t v50 = IPC::Decoder::decode<std::tuple<float>>(v70);
    if ((v50 & 0xFF00000000) == 0) {
      break;
    }
    if (!v71)
    {
      unint64_t v52 = v70;
      uint64_t v70 = 0;
      *(void *)a4 = v52;
      *(_DWORD *)(a4 + 8) = v50;
LABEL_84:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_85:
      ((void (*)(IPC::Decoder ***, uint64_t **))off_1EE9E9D68[a2])(&v80, &v70);
      goto LABEL_86;
    }
LABEL_120:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_121:
    unint64_t v42 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v71;
  if (v71 != -1) {
    goto LABEL_85;
  }
LABEL_86:
  unint64_t v53 = v77;
  unint64_t v77 = 0;
  if (v53)
  {
    IPC::Encoder::~Encoder(v53, v51);
    WTF::fastFree(v54, v55);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v81);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSynci>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetSynci>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetSynciEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA2F8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetSynciEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetSynciEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 965;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 965;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  uint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 979;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 979;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  uint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v61, v9);
    if (!(_BYTE)v63) {
      goto LABEL_101;
    }
    unint64_t v49 = v61;
    unint64_t v48 = v62;
    unint64_t v50 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - (void)v61;
    if (v50 >= (unint64_t)v61)
    {
      unint64_t v52 = v51 + 2;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v62)
      {
        *(_WORD *)((char *)v61 + v51) = 2871;
        goto LABEL_87;
      }
      unint64_t v48 = 0;
    }
    unint64_t v52 = 0;
LABEL_87:
    unint64_t v54 = (char *)(((unint64_t)v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v54 >= (char *)v49 + v52)
    {
      unint64_t v52 = v54 - (char *)v49 + 8;
      if ((unint64_t)(v54 - (char *)v49) > 0xFFFFFFFFFFFFFFF7 || v52 > v48) {
        goto LABEL_112;
      }
      *(void *)unint64_t v54 = a3;
    }
    if (v48)
    {
      uint64_t v56 = *((void *)v6 + 9);
      unint64_t v57 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v58 = *((void *)v6 + 8);
      if (v57 + 16 >= v58) {
        unint64_t v57 = 0;
      }
      if (v52 <= 0x10) {
        unint64_t v52 = 16;
      }
      unint64_t v59 = v57 + v52;
      if (v58 <= v59) {
        unint64_t v59 = 0;
      }
      *((void *)v6 + 10) = v59;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v56 + 16) + 128), v59) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_112:
    char v60 = 17;
    goto LABEL_102;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v65, v9);
  if (!v67)
  {
LABEL_101:
    char v60 = 15;
LABEL_102:
    *(unsigned char *)a4 = v60;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v65;
  unint64_t v14 = v66;
  uint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v71, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    int v76 = 1;
    LOBYTE(v61) = 0;
    int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTransformFeedback>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTransformFeedback>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
    char v64 = 1;
    if (v76 != -1) {
      ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v68, &v74);
    }
    goto LABEL_55;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3700;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_105;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    unint64_t v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v68) = 0;
        unsigned __int8 v70 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *((void *)v6 + 8);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    *((void *)v6 + 10) = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v74, (uint64_t)v6 + 64, v9);
    if (!(_BYTE)v76)
    {
      LOBYTE(v68) = 16;
      int v69 = 1;
LABEL_41:
      unsigned __int8 v70 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v73, (uint64_t)&v74, (uint64_t *)v11);
    if (*((_WORD *)v73 + 25) != 2870)
    {
      char v68 = v73;
      int v69 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v73);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v71, v16, 0xE74u, (uint64_t)&v74, v9);
    LOBYTE(v68) = 0;
    int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, (uint64_t)&v74);
    unsigned __int8 v70 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v75])(&v73, &v74);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v71);
    if (!v70)
    {
      LOBYTE(v61) = 0;
      char v64 = 0;
      goto LABEL_55;
    }
    if (v69 == 1)
    {
      LOBYTE(v61) = (_BYTE)v68;
      int v34 = 1;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_54;
    }
    if (v69) {
      goto LABEL_108;
    }
    LOWORD(v73) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>((uint64_t *)v68, &v73);
    if (!BYTE1(v73))
    {
      LOBYTE(v61) = 13;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_52;
    }
    unint64_t v20 = v70;
    if (v70) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v19 = 0;
  }
  if (v69) {
    goto LABEL_108;
  }
  unint64_t v33 = v68;
  char v68 = 0;
  unint64_t v74 = v33;
  LOBYTE(v75) = (_BYTE)v73;
  int v76 = 0;
  LOBYTE(v61) = 0;
  int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTransformFeedback>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTransformFeedback>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
  char v64 = 1;
  if (v76 != -1) {
    ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v72, &v74);
  }
LABEL_52:
  if (v70)
  {
    int v34 = v69;
    if (v69 != -1) {
LABEL_54:
    }
      ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v34])(&v74, &v68);
  }
LABEL_55:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
  if (v64)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTransformFeedback>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTransformFeedback>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v61);
    if (v64)
    {
      if (v63 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v63])(&v74, &v61);
      }
    }
    return result;
  }
  unint64_t v20 = v67;
  if (!v67) {
    goto LABEL_104;
  }
  unint64_t v35 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v35 - v65;
  if (v35 < v65)
  {
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v66)
    {
      *(_WORD *)(v65 + v36) = 2870;
      unint64_t v37 = v36 + 2;
    }
  }
  unint64_t v38 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *((void *)v6 + 8);
  if (v38 + 16 >= v39) {
    goto LABEL_109;
  }
  while (1)
  {
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v40 = v38 + v37;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *((void *)v6 + 10) = v40;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v40);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, v15);
    double v6 = v73;
    unint64_t v74 = 0;
    IPC::Connection::createSyncMessageEncoder(3700, a3, (uint64_t *)&v74, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v74, (uint64_t *)&v68, 0, (uint64_t)&v61, v9);
    if (v62)
    {
      if (v62 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v61;
        int v41 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_76;
      }
      goto LABEL_108;
    }
    LOWORD(v71) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v61, &v71);
    if (!BYTE1(v71)) {
      break;
    }
    int v41 = v62;
    if (!v62)
    {
      unint64_t v43 = v61;
      unint64_t v61 = 0;
      char v44 = (char)v71;
      *(void *)a4 = v43;
      *(unsigned char *)(a4 + 8) = v44;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_76;
    }
LABEL_108:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
    unint64_t v38 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v41 = v62;
  if (v62 == -1) {
    goto LABEL_77;
  }
LABEL_76:
  ((void (*)(IPC::Decoder ***, uint64_t **))off_1EE9E9D68[v41])(&v71, &v61);
LABEL_77:
  unint64_t v45 = v68;
  char v68 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v42);
    WTF::fastFree(v46, v47);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTransformFeedback>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsTransformFeedback>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA308[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 917;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 917;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BeginTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 908;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 908;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EndTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = *(double *)(a1 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v42, v6);
    if (!v44) {
      return 15;
    }
    unint64_t v19 = v42;
    unint64_t v18 = v43;
    unint64_t v20 = (v42 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - v42;
    if (v20 >= v42)
    {
      unint64_t v22 = v21 + 2;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v22 <= v43)
      {
        *(_WORD *)(v42 + v21) = 2871;
        goto LABEL_30;
      }
      unint64_t v18 = 0;
    }
    unint64_t v22 = 0;
LABEL_30:
    unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v24 >= v19 + v22)
    {
      unint64_t v22 = (unint64_t)v24 - v19 + 8;
      if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
        return 17;
      }
      void *v24 = a3;
    }
    if (v18)
    {
      unint64_t v26 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v27 = *(void *)(a1 + 64);
      if (v26 + 16 >= v27) {
        unint64_t v26 = 0;
      }
      if (v22 <= 0x10) {
        unint64_t v22 = 16;
      }
      unint64_t v28 = v26 + v22;
      if (v27 <= v28) {
        unint64_t v28 = 0;
      }
      *(void *)(a1 + 80) = v28;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v28) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v42, v6);
  if (!v44) {
    return 15;
  }
  unint64_t v8 = v43;
  unint64_t v9 = (v42 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v10 = v9 - v42;
  if (v9 < v42)
  {
    unint64_t v11 = 0;
    if (v43) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v43)
    {
LABEL_50:
      unint64_t v30 = (v42 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v31 = v30 - v42;
      if (v30 < v42)
      {
        unint64_t v29 = 0;
      }
      else
      {
        unint64_t v29 = 0;
        if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= v43)
        {
          *(_WORD *)(v42 + v31) = 2870;
          unint64_t v29 = v31 + 2;
        }
      }
      unint64_t v32 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v8 = *(void *)(a1 + 64);
      if (v32 + 16 < v8) {
        goto LABEL_55;
      }
      goto LABEL_64;
    }
    *(_WORD *)(v42 + v10) = 1002;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(a1 + 72);
      unint64_t v14 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(a1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(a1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) != 0x80000000
        && !*(_DWORD *)(a1 + 116))
      {
        return 0;
      }
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      uint64_t v17 = 0;
      *(_DWORD *)(a1 + 116) = 0;
      return v17;
    }
  }
  unint64_t v29 = v44;
  if (v44) {
    goto LABEL_50;
  }
  __break(1u);
LABEL_64:
  unint64_t v32 = 0;
LABEL_55:
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v33 = v32 + v29;
  if (v8 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(a1 + 80) = v33;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v33);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v41, (uint64_t **)(a1 + 8));
  unint64_t v34 = v41;
  unint64_t v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v35 = 1002;
  *((void *)v35 + 1) = a3;
  *((void *)v35 + 66) = (char *)v35 + 16;
  *((void *)v35 + 67) = 512;
  *((void *)v35 + 68) = 0;
  *((void *)v35 + 70) = 0;
  *((void *)v35 + 69) = 0;
  IPC::Encoder::encodeHeader(v35);
  unint64_t v45 = v35;
  uint64_t v17 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v45, 1, 0);
  unint64_t v37 = v45;
  unint64_t v45 = 0;
  if (v37)
  {
    IPC::Encoder::~Encoder(v37, v36);
    WTF::fastFree(v39, v40);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v41);
  return v17;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TransformFeedbackVaryings,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v60, v7);
    if (!(_BYTE)v62) {
      return 15;
    }
    unint64_t v45 = v60;
    unint64_t v44 = v61;
    unint64_t v46 = ((unint64_t)v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = v46 - (void)v60;
    if (v46 >= (unint64_t)v60)
    {
      unint64_t v48 = v47 + 2;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v48 <= v61)
      {
        *(_WORD *)((char *)v60 + v47) = 2871;
        goto LABEL_59;
      }
      unint64_t v44 = 0;
    }
    unint64_t v48 = 0;
LABEL_59:
    unint64_t v50 = (char *)(((unint64_t)v45 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v50 >= (char *)v45 + v48)
    {
      unint64_t v48 = v50 - (char *)v45 + 8;
      if ((unint64_t)(v50 - (char *)v45) > 0xFFFFFFFFFFFFFFF7 || v48 > v44) {
        return 17;
      }
      *(void *)unint64_t v50 = a3;
    }
    if (v44)
    {
      unint64_t v52 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = *(void *)(a1 + 64);
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v48 <= 0x10) {
        unint64_t v48 = 16;
      }
      unint64_t v54 = v52 + v48;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      *(void *)(a1 + 80) = v54;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v54) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v57, v7);
  if (!v59) {
    return 15;
  }
  unint64_t v9 = v57;
  unint64_t v10 = v58;
  char v60 = v57;
  unint64_t v61 = v58;
  uint64_t v62 = 0;
  unint64_t v11 = ((unint64_t)v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - (void)v57;
  if (v11 < (unint64_t)v57)
  {
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v13 = v12 + 2;
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v58)
    {
      unint64_t v10 = 0;
      unint64_t v13 = 0;
      unint64_t v61 = 0;
    }
    else
    {
      *(_WORD *)((char *)v57 + v12) = 1063;
      uint64_t v62 = v12 + 2;
    }
  }
  unint64_t v15 = (char *)(((unint64_t)v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v15 >= (char *)v9 + v13)
  {
    if ((unint64_t)(v15 - (char *)v9) > 0xFFFFFFFFFFFFFFFBLL || v15 - (char *)v9 + 4 > v10)
    {
      unint64_t v61 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v15 = *a2;
      uint64_t v62 = v15 - (char *)v9 + 4;
    }
  }
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v60, *((void *)a2 + 1));
  unint64_t v17 = v62;
  unint64_t v18 = (char *)(((unint64_t)v60 + v62 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v18 >= (char *)v60 + v62)
  {
    int64_t v19 = v18 - (char *)v60;
    unint64_t v17 = v18 - (char *)v60 + 4;
    if ((unint64_t)(v18 - (char *)v60) > 0xFFFFFFFFFFFFFFFBLL || v17 > v61) {
      goto LABEL_36;
    }
    *(_DWORD *)unint64_t v18 = a2[4];
    uint64_t v62 = v19 + 4;
  }
  if (v61)
  {
    uint64_t v21 = *(void *)(a1 + 72);
    unint64_t v22 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = *(void *)(a1 + 64);
    if (v22 + 16 >= v23) {
      unint64_t v22 = 0;
    }
    if (v17 <= 0x10) {
      unint64_t v17 = 16;
    }
    unint64_t v24 = v22 + v17;
    if (v23 <= v24) {
      unint64_t v24 = 0;
    }
    *(void *)(a1 + 80) = v24;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v21 + 16) + 128), v24) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
LABEL_36:
  if (!v59)
  {
    __break(1u);
    goto LABEL_78;
  }
  unint64_t v26 = ((unint64_t)v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = v26 - (void)v57;
  if (v26 < (unint64_t)v57)
  {
    unint64_t v28 = 0;
  }
  else
  {
    unint64_t v28 = 0;
    if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= v58)
    {
      *(_WORD *)((char *)v57 + v27) = 2870;
      unint64_t v28 = v27 + 2;
    }
  }
  unint64_t v29 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v30 = *(void *)(a1 + 64);
  if (v29 + 16 >= v30) {
    unint64_t v29 = 0;
  }
  if (v28 <= 0x10) {
    unint64_t v28 = 16;
  }
  unint64_t v31 = v29 + v28;
  if (v30 <= v31) {
    unint64_t v31 = 0;
  }
  *(void *)(a1 + 80) = v31;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v31);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v56, (uint64_t **)(a1 + 8));
  unint64_t v32 = v56;
  unint64_t v33 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v33 = 1063;
  *((void *)v33 + 1) = a3;
  *((void *)v33 + 66) = (char *)v33 + 16;
  *((void *)v33 + 67) = 512;
  *((void *)v33 + 68) = 0;
  *((void *)v33 + 70) = 0;
  *((void *)v33 + 69) = 0;
  IPC::Encoder::encodeHeader(v33);
  char v60 = v33;
  int v34 = *a2;
  unint64_t v35 = (_DWORD *)IPC::Encoder::grow(v33, 4uLL, 4);
  if (v36 <= 3)
  {
LABEL_78:
    __break(0xC471u);
    JUMPOUT(0x1990AC8D0);
  }
  *unint64_t v35 = v34;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v33, *((void *)a2 + 1));
  int v37 = a2[4];
  unint64_t v38 = (_DWORD *)IPC::Encoder::grow(v33, 4uLL, 4);
  if (v39 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990AC8F0);
  }
  *unint64_t v38 = v37;
  uint64_t v25 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v60, 1, 0);
  unint64_t v41 = v60;
  char v60 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v56);
  return v25;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v57, v9);
    if (!v59) {
      goto LABEL_97;
    }
    unint64_t v45 = v57;
    unint64_t v44 = v58;
    unint64_t v46 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v47 = v46 - v57;
    if (v46 >= v57)
    {
      unint64_t v48 = v47 + 2;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v48 <= v58)
      {
        *(_WORD *)(v57 + v47) = 2871;
        goto LABEL_83;
      }
      unint64_t v44 = 0;
    }
    unint64_t v48 = 0;
LABEL_83:
    unint64_t v50 = (void *)((v45 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v50 >= v45 + v48)
    {
      unint64_t v48 = (unint64_t)v50 - v45 + 8;
      if ((unint64_t)v50 - v45 > 0xFFFFFFFFFFFFFFF7 || v48 > v44) {
        goto LABEL_108;
      }
      *unint64_t v50 = a3;
    }
    if (v44)
    {
      uint64_t v52 = *((void *)v6 + 9);
      unint64_t v53 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v54 = *((void *)v6 + 8);
      if (v53 + 16 >= v54) {
        unint64_t v53 = 0;
      }
      if (v48 <= 0x10) {
        unint64_t v48 = 16;
      }
      unint64_t v55 = v53 + v48;
      if (v54 <= v55) {
        unint64_t v55 = 0;
      }
      *((void *)v6 + 10) = v55;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v52 + 16) + 128), v55) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_108:
    char v56 = 17;
    goto LABEL_98;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v62, v9);
  if (!v64)
  {
LABEL_97:
    char v56 = 15;
LABEL_98:
    *(unsigned char *)a4 = v56;
    *(_DWORD *)(a4 + 24) = 1;
    return result;
  }
  unint64_t v13 = v62;
  unint64_t v14 = v63;
  unint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v72, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v72, v16))
  {
    LOBYTE(v68) = 11;
    uint64_t v11 = 1;
    int v71 = 1;
    LOBYTE(v57) = 0;
    int v60 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v57, (uint64_t)&v68);
    char v61 = 1;
    if (v71 != -1) {
      ((void (*)(uint64_t *, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v71])(&v74, &v68);
    }
    goto LABEL_51;
  }
  char v68 = v13;
  uint64_t v69 = v14;
  unint64_t v70 = 0;
  unint64_t v17 = ((unint64_t)v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - (void)v13;
  if (v17 < (unint64_t)v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_101;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_101;
    }
    *(_WORD *)((char *)v13 + v18) = 3680;
    unint64_t v70 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (char *)(((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v20 >= (char *)v13 + v19)
    {
      if ((unint64_t)(v20 - (char *)v13) > 0xFFFFFFFFFFFFFFF7 || v20 - (char *)v13 + 8 > v14)
      {
        uint64_t v69 = 0;
      }
      else
      {
        *(void *)unint64_t v20 = v16;
        unint64_t v70 = v20 - (char *)v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v68, a2);
    if (!v69)
    {
      LOBYTE(v65) = 0;
      char v67 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v70;
    unint64_t v23 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = *((void *)v6 + 8);
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v70 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    *((void *)v6 + 10) = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v74, (uint64_t)v6 + 64, v9);
    if (!v76)
    {
      LOBYTE(v65) = 16;
      int v66 = 1;
LABEL_37:
      char v67 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v73, (uint64_t)&v74, (uint64_t *)v11);
    if (*((_WORD *)v73 + 25) != 2870)
    {
      unint64_t v65 = v73;
      int v66 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v73);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v72, v16, 0xE60u, (uint64_t)&v74, v9);
    LOBYTE(v65) = 0;
    int v66 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v65, (uint64_t)&v74);
    char v67 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Decoder **, uint64_t *))off_1EE9E9D68[v75])(&v73, &v74);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v72);
    if (!v67)
    {
      LOBYTE(v57) = 0;
      char v61 = 0;
      goto LABEL_51;
    }
    if (v66 == 1)
    {
      LOBYTE(v57) = (_BYTE)v65;
      int v29 = 1;
      int v60 = 1;
      char v61 = 1;
      goto LABEL_50;
    }
    if (v66) {
      goto LABEL_104;
    }
    LOBYTE(v74) = 0;
    char v76 = 0;
    IPC::Decoder::operator>><std::tuple<WebCore::GraphicsContextGLActiveInfo>>(v65, (uint64_t)&v74);
    if (!v76)
    {
      LOBYTE(v57) = 13;
      int v60 = 1;
      char v61 = 1;
      goto LABEL_48;
    }
    if (v67) {
      break;
    }
LABEL_100:
    __break(1u);
LABEL_101:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    uint64_t v69 = 0;
  }
  if (v66) {
    goto LABEL_104;
  }
  unint64_t v28 = v65;
  unint64_t v65 = 0;
  char v68 = v28;
  uint64_t v69 = v74;
  unint64_t v70 = v75;
  int v71 = 0;
  LOBYTE(v57) = 0;
  int v60 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v57, (uint64_t)&v68);
  char v61 = 1;
  if (v71 != -1) {
    ((void (*)(IPC::Decoder **, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v71])(&v73, &v68);
  }
LABEL_48:
  if (v67)
  {
    int v29 = v66;
    if (v66 != -1) {
LABEL_50:
    }
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v29])(&v68, &v65);
  }
LABEL_51:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v72);
  if (v61)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 24) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v57);
    if (v61)
    {
      if (v60 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Decoder **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v60])(&v68, &v57);
      }
    }
    return result;
  }
  if (!v64) {
    goto LABEL_100;
  }
  unint64_t v30 = ((unint64_t)v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v31 = v30 - (void)v62;
  if (v30 < (unint64_t)v62)
  {
    unint64_t v32 = 0;
  }
  else
  {
    unint64_t v32 = 0;
    if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= v63)
    {
      *(_WORD *)((char *)v62 + v31) = 2870;
      unint64_t v32 = v31 + 2;
    }
  }
  unint64_t v33 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = *((void *)v6 + 8);
  if (v33 + 16 >= v34) {
    goto LABEL_105;
  }
  while (1)
  {
    if (v32 <= 0x10) {
      unint64_t v32 = 16;
    }
    unint64_t v35 = v33 + v32;
    if (v34 <= v35) {
      unint64_t v35 = 0;
    }
    *((void *)v6 + 10) = v35;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v35);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, v15);
    double v6 = v73;
    uint64_t v74 = 0;
    IPC::Connection::createSyncMessageEncoder(3680, a3, &v74, &v65);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v65, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v74, (uint64_t *)&v65, 0, (uint64_t)&v68, v9);
    if (v69)
    {
      if (v69 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v68;
        int v36 = 1;
        *(_DWORD *)(a4 + 24) = 1;
        goto LABEL_72;
      }
      goto LABEL_104;
    }
    LOBYTE(v57) = 0;
    char v59 = 0;
    IPC::Decoder::operator>><std::tuple<WebCore::GraphicsContextGLActiveInfo>>(v68, (uint64_t)&v57);
    if (!v59) {
      break;
    }
    int v36 = v69;
    if (!v69)
    {
      unint64_t v38 = v68;
      char v68 = 0;
      unint64_t v39 = v57;
      unint64_t v40 = v58;
      *(void *)a4 = v38;
      *(void *)(a4 + 8) = v39;
      *(void *)(a4 + 16) = v40;
      *(_DWORD *)(a4 + 24) = 0;
      goto LABEL_72;
    }
LABEL_104:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_105:
    unint64_t v33 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 24) = 1;
  int v36 = v69;
  if (v69 == -1) {
    goto LABEL_73;
  }
LABEL_72:
  ((void (*)(unint64_t *, IPC::Decoder **))off_1EE9E9D68[v36])(&v57, &v68);
LABEL_73:
  unint64_t v41 = v65;
  unint64_t v65 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v37);
    WTF::fastFree(v42, v43);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
}

IPC::Decoder *IPC::Decoder::operator>><std::tuple<WebCore::GraphicsContextGLActiveInfo>>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<WebCore::GraphicsContextGLActiveInfo>((uint64_t)v14, a1);
  int v6 = v15;
  if (v15)
  {
    double v7 = (WTF::StringImpl *)v14[0];
    uint64_t v2 = v14[1];
    int v8 = 1;
  }
  else
  {
    double v5 = *(WTF::StringImpl **)a1;
    uint64_t v9 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v10 = *((void *)a1 + 3);
    if (v10 && v9) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v10 + 16))(v10, v5);
    }
    int v8 = 0;
    double v7 = 0;
  }
  if (*(unsigned __int8 *)(a2 + 16) == v8)
  {
    if (*(unsigned char *)(a2 + 16))
    {
      uint64_t v11 = *(WTF::StringImpl **)a2;
      *(void *)a2 = v7;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v5);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      *(void *)(a2 + 8) = v2;
      return a1;
    }
  }
  else
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      *(void *)a2 = v7;
      *(void *)(a2 + 8) = v2;
      *(unsigned char *)(a2 + 16) = 1;
      return a1;
    }
    unint64_t v12 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v5);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    *(unsigned char *)(a2 + 16) = 0;
  }
  if (v6 && v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA318[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
  a2[2] = a3[2];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PauseTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = *(double *)(a1 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v42, v6);
    if (!v44) {
      return 15;
    }
    unint64_t v19 = v42;
    unint64_t v18 = v43;
    unint64_t v20 = (v42 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - v42;
    if (v20 >= v42)
    {
      unint64_t v22 = v21 + 2;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v22 <= v43)
      {
        *(_WORD *)(v42 + v21) = 2871;
        goto LABEL_30;
      }
      unint64_t v18 = 0;
    }
    unint64_t v22 = 0;
LABEL_30:
    unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v24 >= v19 + v22)
    {
      unint64_t v22 = (unint64_t)v24 - v19 + 8;
      if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
        return 17;
      }
      void *v24 = a3;
    }
    if (v18)
    {
      unint64_t v26 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v27 = *(void *)(a1 + 64);
      if (v26 + 16 >= v27) {
        unint64_t v26 = 0;
      }
      if (v22 <= 0x10) {
        unint64_t v22 = 16;
      }
      unint64_t v28 = v26 + v22;
      if (v27 <= v28) {
        unint64_t v28 = 0;
      }
      *(void *)(a1 + 80) = v28;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v28) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v42, v6);
  if (!v44) {
    return 15;
  }
  unint64_t v8 = v43;
  unint64_t v9 = (v42 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v10 = v9 - v42;
  if (v9 < v42)
  {
    unint64_t v11 = 0;
    if (v43) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v43)
    {
LABEL_50:
      unint64_t v30 = (v42 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v31 = v30 - v42;
      if (v30 < v42)
      {
        unint64_t v29 = 0;
      }
      else
      {
        unint64_t v29 = 0;
        if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= v43)
        {
          *(_WORD *)(v42 + v31) = 2870;
          unint64_t v29 = v31 + 2;
        }
      }
      unint64_t v32 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v8 = *(void *)(a1 + 64);
      if (v32 + 16 < v8) {
        goto LABEL_55;
      }
      goto LABEL_64;
    }
    *(_WORD *)(v42 + v10) = 1022;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(a1 + 72);
      unint64_t v14 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(a1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(a1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) != 0x80000000
        && !*(_DWORD *)(a1 + 116))
      {
        return 0;
      }
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      uint64_t v17 = 0;
      *(_DWORD *)(a1 + 116) = 0;
      return v17;
    }
  }
  unint64_t v29 = v44;
  if (v44) {
    goto LABEL_50;
  }
  __break(1u);
LABEL_64:
  unint64_t v32 = 0;
LABEL_55:
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v33 = v32 + v29;
  if (v8 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(a1 + 80) = v33;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v33);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v41, (uint64_t **)(a1 + 8));
  unint64_t v34 = v41;
  unint64_t v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v35 = 1022;
  *((void *)v35 + 1) = a3;
  *((void *)v35 + 66) = (char *)v35 + 16;
  *((void *)v35 + 67) = 512;
  *((void *)v35 + 68) = 0;
  *((void *)v35 + 70) = 0;
  *((void *)v35 + 69) = 0;
  IPC::Encoder::encodeHeader(v35);
  unint64_t v45 = v35;
  uint64_t v17 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v45, 1, 0);
  int v37 = v45;
  unint64_t v45 = 0;
  if (v37)
  {
    IPC::Encoder::~Encoder(v37, v36);
    WTF::fastFree(v39, v40);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v41);
  return v17;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ResumeTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = *(double *)(a1 + 120);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v6 = v5 + v7;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v42, v6);
    if (!v44) {
      return 15;
    }
    unint64_t v19 = v42;
    unint64_t v18 = v43;
    unint64_t v20 = (v42 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v21 = v20 - v42;
    if (v20 >= v42)
    {
      unint64_t v22 = v21 + 2;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v22 <= v43)
      {
        *(_WORD *)(v42 + v21) = 2871;
        goto LABEL_30;
      }
      unint64_t v18 = 0;
    }
    unint64_t v22 = 0;
LABEL_30:
    unint64_t v24 = (void *)((v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v24 >= v19 + v22)
    {
      unint64_t v22 = (unint64_t)v24 - v19 + 8;
      if ((unint64_t)v24 - v19 > 0xFFFFFFFFFFFFFFF7 || v22 > v18) {
        return 17;
      }
      void *v24 = a3;
    }
    if (v18)
    {
      unint64_t v26 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v27 = *(void *)(a1 + 64);
      if (v26 + 16 >= v27) {
        unint64_t v26 = 0;
      }
      if (v22 <= 0x10) {
        unint64_t v22 = 16;
      }
      unint64_t v28 = v26 + v22;
      if (v27 <= v28) {
        unint64_t v28 = 0;
      }
      *(void *)(a1 + 80) = v28;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v28) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v42, v6);
  if (!v44) {
    return 15;
  }
  unint64_t v8 = v43;
  unint64_t v9 = (v42 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v10 = v9 - v42;
  if (v9 < v42)
  {
    unint64_t v11 = 0;
    if (v43) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v43)
    {
LABEL_50:
      unint64_t v30 = (v42 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v31 = v30 - v42;
      if (v30 < v42)
      {
        unint64_t v29 = 0;
      }
      else
      {
        unint64_t v29 = 0;
        if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= v43)
        {
          *(_WORD *)(v42 + v31) = 2870;
          unint64_t v29 = v31 + 2;
        }
      }
      unint64_t v32 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v8 = *(void *)(a1 + 64);
      if (v32 + 16 < v8) {
        goto LABEL_55;
      }
      goto LABEL_64;
    }
    *(_WORD *)(v42 + v10) = 1035;
    if (v8)
    {
LABEL_11:
      uint64_t v13 = *(void *)(a1 + 72);
      unint64_t v14 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v15 = *(void *)(a1 + 64);
      if (v14 + 16 >= v15) {
        unint64_t v14 = 0;
      }
      if (v11 <= 0x10) {
        unint64_t v11 = 16;
      }
      unint64_t v16 = v14 + v11;
      if (v15 <= v16) {
        unint64_t v16 = 0;
      }
      *(void *)(a1 + 80) = v16;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v13 + 16) + 128), v16) != 0x80000000
        && !*(_DWORD *)(a1 + 116))
      {
        return 0;
      }
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      uint64_t v17 = 0;
      *(_DWORD *)(a1 + 116) = 0;
      return v17;
    }
  }
  unint64_t v29 = v44;
  if (v44) {
    goto LABEL_50;
  }
  __break(1u);
LABEL_64:
  unint64_t v32 = 0;
LABEL_55:
  if (v29 <= 0x10) {
    unint64_t v29 = 16;
  }
  unint64_t v33 = v32 + v29;
  if (v8 <= v33) {
    unint64_t v33 = 0;
  }
  *(void *)(a1 + 80) = v33;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v33);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v41, (uint64_t **)(a1 + 8));
  unint64_t v34 = v41;
  unint64_t v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v35 = 1035;
  *((void *)v35 + 1) = a3;
  *((void *)v35 + 66) = (char *)v35 + 16;
  *((void *)v35 + 67) = 512;
  *((void *)v35 + 68) = 0;
  *((void *)v35 + 70) = 0;
  *((void *)v35 + 69) = 0;
  IPC::Encoder::encodeHeader(v35);
  unint64_t v45 = v35;
  uint64_t v17 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v45, 1, 0);
  int v37 = v45;
  unint64_t v45 = 0;
  if (v37)
  {
    IPC::Encoder::~Encoder(v37, v36);
    WTF::fastFree(v39, v40);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v41);
  return v17;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindBufferBase,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    unint64_t v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    int v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)int v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 911;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 911;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindBufferRange,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
    if (!v83) {
      return 15;
    }
    unint64_t v67 = v81;
    unint64_t v66 = v82;
    unint64_t v68 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v69 = v68 - v81;
    if (v68 >= v81)
    {
      unint64_t v70 = v69 + 2;
      if (v69 <= 0xFFFFFFFFFFFFFFFDLL && v70 <= v82)
      {
        *(_WORD *)(v81 + v69) = 2871;
        goto LABEL_77;
      }
      unint64_t v66 = 0;
    }
    unint64_t v70 = 0;
LABEL_77:
    char v72 = (void *)((v67 + v70 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v72 >= v67 + v70)
    {
      unint64_t v70 = (unint64_t)v72 - v67 + 8;
      if ((unint64_t)v72 - v67 > 0xFFFFFFFFFFFFFFF7 || v70 > v66) {
        return 17;
      }
      void *v72 = a3;
    }
    if (v66)
    {
      unint64_t v74 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v75 = *(void *)(a1 + 64);
      if (v74 + 16 >= v75) {
        unint64_t v74 = 0;
      }
      if (v70 <= 0x10) {
        unint64_t v70 = 16;
      }
      unint64_t v76 = v74 + v70;
      if (v75 <= v76) {
        unint64_t v76 = 0;
      }
      *(void *)(a1 + 80) = v76;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v76) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v81, v7);
  if (!v83) {
    return 15;
  }
  unint64_t v9 = v81;
  unint64_t v10 = v82;
  unint64_t v11 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v81;
  if (v11 >= v81)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v82)
    {
      *(_WORD *)(v81 + v12) = 912;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  unint64_t v15 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v9 + v13);
  if (v15 >= v9 + v13)
  {
    unint64_t v17 = v15 - v9;
    unint64_t v18 = v16 + v13 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v17) = *a2;
      unint64_t v13 = v18;
    }
  }
  unint64_t v20 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = v20 - (v9 + v13);
  if (v20 >= v9 + v13)
  {
    unint64_t v22 = v20 - v9;
    unint64_t v23 = v21 + v13 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > v10)
    {
      unint64_t v10 = 0;
    }
    else
    {
      *(_DWORD *)(v9 + v22) = a2[1];
      unint64_t v13 = v23;
    }
  }
  unint64_t v25 = (v9 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v26 = v25 >= v9 + v13;
  unint64_t v27 = v25 - (v9 + v13);
  if (v26)
  {
    unint64_t v79 = 0;
    unint64_t v28 = v27 + v13;
    if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= v10)
    {
      *(_DWORD *)(v9 + v28) = a2[2];
      unint64_t v79 = v10;
      unint64_t v13 = v28 + 4;
    }
  }
  else
  {
    unint64_t v79 = v10;
  }
  unint64_t v29 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v26 = v29 >= v9 + v13;
  unint64_t v30 = v29 - (v9 + v13);
  if (v26)
  {
    unint64_t v78 = 0;
    unint64_t v31 = v30 + v13;
    if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= v79)
    {
      *(void *)(v9 + v31) = *((void *)a2 + 2);
      unint64_t v78 = v79;
      unint64_t v13 = v31 + 8;
    }
  }
  else
  {
    unint64_t v78 = v79;
  }
  unint64_t v32 = (void *)((v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v32 >= v9 + v13)
  {
    unint64_t v33 = (char *)v32 - v9;
    if ((unint64_t)v32 - v9 > 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_48;
    }
    unint64_t v13 = (unint64_t)(v33 + 8);
    if ((unint64_t)(v33 + 8) > v78) {
      goto LABEL_48;
    }
    *unint64_t v32 = *((void *)a2 + 3);
  }
  if (v78)
  {
    unint64_t v34 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = *(void *)(a1 + 64);
    if (v34 + 16 >= v35) {
      unint64_t v34 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v36 = v34 + v13;
    if (v35 <= v36) {
      unint64_t v37 = 0;
    }
    else {
      unint64_t v37 = v36;
    }
    *(void *)(a1 + 80) = v37;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v37) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v38 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v38;
  }
LABEL_48:
  if (!v83)
  {
    __break(1u);
    goto LABEL_98;
  }
  unint64_t v39 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = v39 - v81;
  if (v39 < v81)
  {
    unint64_t v41 = 0;
  }
  else
  {
    unint64_t v41 = 0;
    if (v40 <= 0xFFFFFFFFFFFFFFFDLL && v40 + 2 <= v82)
    {
      *(_WORD *)(v81 + v40) = 2870;
      unint64_t v41 = v40 + 2;
    }
  }
  unint64_t v42 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v43 = *(void *)(a1 + 64);
  if (v42 + 16 >= v43) {
    unint64_t v42 = 0;
  }
  if (v41 <= 0x10) {
    unint64_t v41 = 16;
  }
  unint64_t v44 = v42 + v41;
  if (v43 <= v44) {
    unint64_t v44 = 0;
  }
  *(void *)(a1 + 80) = v44;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v44);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v80, (uint64_t **)(a1 + 8));
  unint64_t v45 = v80;
  unsigned __int8 v46 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v46 = 912;
  *((void *)v46 + 1) = a3;
  *((void *)v46 + 66) = (char *)v46 + 16;
  *((void *)v46 + 67) = 512;
  *((void *)v46 + 68) = 0;
  *((void *)v46 + 70) = 0;
  *((void *)v46 + 69) = 0;
  IPC::Encoder::encodeHeader(v46);
  int v84 = v46;
  int v47 = *a2;
  unint64_t v48 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v49 <= 3)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x1990AE190);
  }
  *unint64_t v48 = v47;
  int v50 = a2[1];
  unint64_t v51 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v52 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990AE1B0);
  }
  *unint64_t v51 = v50;
  int v53 = a2[2];
  unint64_t v54 = (_DWORD *)IPC::Encoder::grow(v46, 4uLL, 4);
  if (v55 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990AE1D0);
  }
  _DWORD *v54 = v53;
  uint64_t v56 = *((void *)a2 + 2);
  unint64_t v57 = (void *)IPC::Encoder::grow(v46, 8uLL, 8);
  if (v58 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1990AE1F0);
  }
  *unint64_t v57 = v56;
  uint64_t v59 = *((void *)a2 + 3);
  int v60 = (void *)IPC::Encoder::grow(v46, 8uLL, 8);
  if (v61 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1990AE210);
  }
  void *v60 = v59;
  uint64_t v38 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v84, 1, 0);
  unint64_t v63 = v84;
  int v84 = 0;
  if (v63)
  {
    IPC::Encoder::~Encoder(v63, v62);
    WTF::fastFree(v64, v65);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80);
  return v38;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetUniformIndices,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, unsigned int *a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  if (*((IPC::Encoder **)v6 + 7) != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v62, v9);
    if (!v64) {
      goto LABEL_102;
    }
    unint64_t v50 = v62;
    unint64_t v49 = v63;
    unint64_t v51 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v52 = v51 - v62;
    if (v51 >= v62)
    {
      unint64_t v53 = v52 + 2;
      if (v52 <= 0xFFFFFFFFFFFFFFFDLL && v53 <= v63)
      {
        *(_WORD *)(v62 + v52) = 2871;
        goto LABEL_88;
      }
      unint64_t v49 = 0;
    }
    unint64_t v53 = 0;
LABEL_88:
    unint64_t v55 = (void *)((v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v55 >= v50 + v53)
    {
      unint64_t v53 = (unint64_t)v55 - v50 + 8;
      if ((unint64_t)v55 - v50 > 0xFFFFFFFFFFFFFFF7 || v53 > v49) {
        goto LABEL_116;
      }
      *unint64_t v55 = a3;
    }
    if (v49)
    {
      uint64_t v57 = *((void *)v6 + 9);
      unint64_t v58 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v59 = *((void *)v6 + 8);
      if (v58 + 16 >= v59) {
        unint64_t v58 = 0;
      }
      if (v53 <= 0x10) {
        unint64_t v53 = 16;
      }
      unint64_t v60 = v58 + v53;
      if (v59 <= v60) {
        unint64_t v60 = 0;
      }
      *((void *)v6 + 10) = v60;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v57 + 16) + 128), v60) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_116:
    char v61 = 17;
    goto LABEL_103;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v67, v9);
  if (!v69)
  {
LABEL_102:
    char v61 = 15;
LABEL_103:
    *(unsigned char *)a4 = v61;
    *(_DWORD *)(a4 + 24) = 1;
    return result;
  }
  unint64_t v12 = v67;
  unint64_t v13 = v68;
  uint64_t v14 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v77, (uint64_t **)v6 + 1);
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v77, v15))
  {
    LOBYTE(v73) = 11;
    int v76 = 1;
    LOBYTE(v62) = 0;
    int v65 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformIndices>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformIndices>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v62, (uint64_t)&v73);
    char v66 = 1;
    if (v76 != -1) {
      ((void (*)(uint64_t *, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v79, &v73);
    }
    goto LABEL_55;
  }
  char v73 = v12;
  uint64_t v74 = v13;
  unint64_t v75 = 0;
  unint64_t v16 = ((unint64_t)v12 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = v16 - (void)v12;
  if (v16 < (unint64_t)v12)
  {
    unint64_t v18 = 0;
  }
  else if (v17 > 0xFFFFFFFFFFFFFFFDLL || (unint64_t v18 = v17 + 2, v17 + 2 > v13))
  {
    unint64_t v13 = 0;
    unint64_t v18 = 0;
    uint64_t v74 = 0;
  }
  else
  {
    *(_WORD *)((char *)v12 + v17) = 3683;
    unint64_t v75 = v17 + 2;
  }
  unint64_t v19 = ((unint64_t)v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = v19 - ((void)v12 + v18);
  if (v19 >= (unint64_t)v12 + v18)
  {
    unint64_t v21 = v19 - (void)v12;
    unint64_t v22 = v20 + v18 + 8;
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v13)
    {
      unint64_t v13 = 0;
      uint64_t v74 = 0;
    }
    else
    {
      *(void *)((char *)v12 + v21) = v15;
      unint64_t v75 = v22;
      unint64_t v18 = v22;
    }
  }
  unint64_t v24 = (char *)(((unint64_t)v12 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v24 >= (char *)v12 + v18)
  {
    int64_t v25 = v24 - (char *)v12;
    if ((unint64_t)(v24 - (char *)v12) > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > v13)
    {
      uint64_t v74 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v24 = *a2;
      unint64_t v75 = v25 + 4;
    }
  }
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v73, *((void *)a2 + 1));
  if (!v74)
  {
    LOBYTE(v70) = 0;
    char v72 = 0;
    goto LABEL_42;
  }
  uint64_t v26 = v75;
  unint64_t v27 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v28 = *((void *)v6 + 8);
  if (v27 + 16 >= v28) {
    unint64_t v27 = 0;
  }
  if (v75 <= 0x10) {
    uint64_t v26 = 16;
  }
  unint64_t v29 = v27 + v26;
  if (v28 <= v29) {
    unint64_t v29 = 0;
  }
  *((void *)v6 + 10) = v29;
  if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v29) == 0x80000000
    || *((_DWORD *)v6 + 29))
  {
    if (*((unsigned char *)v6 + 104)) {
      MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
    }
    *((_DWORD *)v6 + 29) = 0;
  }
  IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v79, (uint64_t)v6 + 64, v9);
  if (!v81)
  {
    LOBYTE(v70) = 16;
    int v71 = 1;
LABEL_41:
    char v72 = 1;
    goto LABEL_42;
  }
  WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v78, (uint64_t)&v79, (uint64_t *)v6 + 7);
  if (*((_WORD *)v78 + 25) != 2870)
  {
    unint64_t v70 = v78;
    int v71 = 0;
    goto LABEL_41;
  }
  IPC::Decoder::~Decoder(v78);
  WTF::fastFree(v30, v31);
  IPC::Connection::waitForSyncReply((uint64_t)v77, v15, 0xE63u, (uint64_t)&v79, v9);
  LOBYTE(v70) = 0;
  int v71 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v70, (uint64_t)&v79);
  char v72 = 1;
  if (v80 != -1) {
    ((void (*)(IPC::Decoder **, uint64_t *))off_1EE9E9D68[v80])(&v78, &v79);
  }
LABEL_42:
  IPC::Connection::popPendingSyncRequestID(v77);
  if (v72)
  {
    if (v71 == 1)
    {
      LOBYTE(v62) = (_BYTE)v70;
      int v33 = 1;
      int v65 = 1;
      char v66 = 1;
    }
    else
    {
      if (v71) {
        goto LABEL_112;
      }
      LOBYTE(v79) = 0;
      char v81 = 0;
      IPC::Decoder::operator>><std::tuple<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v70, (uint64_t)&v79);
      if (v81)
      {
        if (!v72) {
          goto LABEL_106;
        }
        if (v71) {
          goto LABEL_112;
        }
        unint64_t v32 = v70;
        unint64_t v70 = 0;
        char v73 = v32;
        uint64_t v74 = v79;
        unint64_t v75 = v80;
        int v76 = 0;
        LOBYTE(v62) = 0;
        int v65 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformIndices>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformIndices>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v62, (uint64_t)&v73);
        char v66 = 1;
        if (v76 != -1) {
          ((void (*)(IPC::Decoder **, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v78, &v73);
        }
      }
      else
      {
        LOBYTE(v62) = 13;
        int v65 = 1;
        char v66 = 1;
      }
      if (!v72) {
        goto LABEL_55;
      }
      int v33 = v71;
      if (v71 == -1) {
        goto LABEL_55;
      }
    }
    ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v33])(&v73, &v70);
  }
  else
  {
    LOBYTE(v62) = 0;
    char v66 = 0;
  }
LABEL_55:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v77);
  if (v66)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 24) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformIndices>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformIndices>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v62);
    if (v66)
    {
      if (v65 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Decoder **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v65])(&v73, &v62);
      }
    }
    return result;
  }
  if (!v69)
  {
LABEL_106:
    __break(1u);
LABEL_107:
    __break(0xC471u);
    JUMPOUT(0x1990AE9A4);
  }
  unint64_t v34 = ((unint64_t)v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v34 - (void)v67;
  if (v34 < (unint64_t)v67)
  {
    unint64_t v36 = 0;
  }
  else
  {
    unint64_t v36 = 0;
    if (v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v68)
    {
      *(_WORD *)((char *)v67 + v35) = 2870;
      unint64_t v36 = v35 + 2;
    }
  }
  unint64_t v37 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v38 = *((void *)v6 + 8);
  if (v37 + 16 >= v38) {
    goto LABEL_113;
  }
  while (1)
  {
    if (v36 <= 0x10) {
      unint64_t v36 = 16;
    }
    unint64_t v39 = v37 + v36;
    if (v38 <= v39) {
      unint64_t v39 = 0;
    }
    *((void *)v6 + 10) = v39;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v39);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v78, v14);
    double v6 = v78;
    uint64_t v79 = 0;
    IPC::Connection::createSyncMessageEncoder(3683, (uint64_t)a3, &v79, &v70);
    a3 = v70;
    uint64_t v14 = (uint64_t **)*a2;
    unint64_t v40 = (_DWORD *)IPC::Encoder::grow(v70, 4uLL, 4);
    if (v41 <= 3) {
      goto LABEL_107;
    }
    _DWORD *v40 = v14;
    IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a3, *((void *)a2 + 1));
    IPC::Connection::sendSyncMessage((uint64_t)v6, v79, (uint64_t *)&v70, 0, (uint64_t)&v73, v9);
    if (v74)
    {
      if (v74 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v73;
        int v42 = 1;
        *(_DWORD *)(a4 + 24) = 1;
        goto LABEL_77;
      }
      goto LABEL_112;
    }
    LOBYTE(v62) = 0;
    char v64 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v73, (uint64_t)&v62);
    if (!v64) {
      break;
    }
    int v42 = v74;
    if (!v74)
    {
      unint64_t v44 = v73;
      char v73 = 0;
      unint64_t v45 = v62;
      *(void *)a4 = v44;
      *(void *)(a4 + 8) = v45;
      *(void *)(a4 + 16) = v63;
      *(_DWORD *)(a4 + 24) = 0;
      goto LABEL_77;
    }
LABEL_112:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_113:
    unint64_t v37 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 24) = 1;
  int v42 = v74;
  if (v74 == -1) {
    goto LABEL_78;
  }
LABEL_77:
  ((void (*)(unint64_t *, IPC::Decoder **))off_1EE9E9D68[v42])(&v62, &v73);
LABEL_78:
  unsigned __int8 v46 = v70;
  unint64_t v70 = 0;
  if (v46)
  {
    IPC::Encoder::~Encoder(v46, v43);
    WTF::fastFree(v47, v48);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v78);
}

IPC::Decoder *IPC::Decoder::operator>><std::tuple<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)&v13);
  if (*(unsigned __int8 *)(a2 + 16) == v15)
  {
    if (!*(unsigned char *)(a2 + 16)) {
      return a1;
    }
    double v5 = *(WTF **)a2;
    if (*(void *)a2)
    {
      *(void *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      WTF::fastFree(v5, v4);
    }
    double v6 = v13;
    unint64_t v13 = 0;
    *(void *)a2 = v6;
    uint64_t v7 = v14;
    HIDWORD(v14) = 0;
    *(void *)(a2 + 8) = v7;
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    double v8 = *(WTF **)a2;
    if (*(void *)a2)
    {
      *(void *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      WTF::fastFree(v8, v4);
    }
    *(unsigned char *)(a2 + 16) = 0;
  }
  else
  {
    double v9 = v13;
    unint64_t v13 = 0;
    *(void *)a2 = v9;
    uint64_t v10 = v14;
    HIDWORD(v14) = 0;
    *(void *)(a2 + 8) = v10;
    *(unsigned char *)(a2 + 16) = 1;
  }
  if (v15)
  {
    unint64_t v11 = v13;
    if (v13)
    {
      unint64_t v13 = 0;
      LODWORD(v14) = 0;
      WTF::fastFree(v11, v4);
    }
  }
  return a1;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v5);
  char v4 = v6;
  if (v6)
  {
    *(void *)a2 = v5[0];
    *(void *)(a2 + 8) = v5[1];
    char v4 = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 16) = v4;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformIndices>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformIndices>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA328[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  *(void *)(a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 4);
  *((_DWORD *)a3 + 4) = 0;
  *(_DWORD *)(a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 5);
  *((_DWORD *)a3 + 5) = 0;
  *(_DWORD *)(a2 + 20) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniforms,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, const void ***a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  if (*((IPC::Encoder **)v6 + 7) != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v66, v9);
    if (!v68) {
      goto LABEL_107;
    }
    unint64_t v54 = v66;
    unint64_t v53 = v67;
    unint64_t v55 = (v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v56 = v55 - v66;
    if (v55 >= v66)
    {
      unint64_t v57 = v56 + 2;
      if (v56 <= 0xFFFFFFFFFFFFFFFDLL && v57 <= v67)
      {
        *(_WORD *)(v66 + v56) = 2871;
        goto LABEL_93;
      }
      unint64_t v53 = 0;
    }
    unint64_t v57 = 0;
LABEL_93:
    unint64_t v59 = (void *)((v54 + v57 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v59 >= v54 + v57)
    {
      unint64_t v57 = (unint64_t)v59 - v54 + 8;
      if ((unint64_t)v59 - v54 > 0xFFFFFFFFFFFFFFF7 || v57 > v53) {
        goto LABEL_121;
      }
      void *v59 = a3;
    }
    if (v53)
    {
      uint64_t v61 = *((void *)v6 + 9);
      unint64_t v62 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v63 = *((void *)v6 + 8);
      if (v62 + 16 >= v63) {
        unint64_t v62 = 0;
      }
      if (v57 <= 0x10) {
        unint64_t v57 = 16;
      }
      unint64_t v64 = v62 + v57;
      if (v63 <= v64) {
        unint64_t v64 = 0;
      }
      *((void *)v6 + 10) = v64;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v61 + 16) + 128), v64) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_121:
    char v65 = 17;
    goto LABEL_108;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v71, v9);
  if (!v73)
  {
LABEL_107:
    char v65 = 15;
LABEL_108:
    *(unsigned char *)a4 = v65;
    *(_DWORD *)(a4 + 24) = 1;
    return result;
  }
  unint64_t v12 = v71;
  unint64_t v13 = v72;
  uint64_t v14 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v81, (uint64_t **)v6 + 1);
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v81, v15))
  {
    LOBYTE(v77) = 11;
    int v80 = 1;
    LOBYTE(v66) = 0;
    int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniforms>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniforms>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v66, (uint64_t)&v77);
    char v70 = 1;
    if (v80 != -1) {
      ((void (*)(unint64_t *, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v80])(&v83, &v77);
    }
    goto LABEL_59;
  }
  unint64_t v77 = (char *)v12;
  unint64_t v78 = v13;
  unint64_t v79 = 0;
  unint64_t v16 = ((unint64_t)v12 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = v16 - (void)v12;
  if (v16 < (unint64_t)v12)
  {
    unint64_t v18 = 0;
  }
  else if (v17 > 0xFFFFFFFFFFFFFFFDLL || (unint64_t v18 = v17 + 2, v17 + 2 > v13))
  {
    unint64_t v13 = 0;
    unint64_t v18 = 0;
    unint64_t v78 = 0;
  }
  else
  {
    *(_WORD *)((char *)v12 + v17) = 3646;
    unint64_t v79 = v17 + 2;
  }
  unint64_t v19 = ((unint64_t)v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = v19 - ((void)v12 + v18);
  if (v19 >= (unint64_t)v12 + v18)
  {
    unint64_t v21 = v19 - (void)v12;
    unint64_t v22 = v20 + v18 + 8;
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v13)
    {
      unint64_t v13 = 0;
      unint64_t v78 = 0;
    }
    else
    {
      *(uint64_t *)((char *)v12 + v21) = v15;
      unint64_t v79 = v22;
      unint64_t v18 = v22;
    }
  }
  unint64_t v24 = (char *)(((unint64_t)v12 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (v24 >= (char *)v12 + v18)
  {
    int64_t v25 = v24 - (char *)v12;
    if ((unint64_t)(v24 - (char *)v12) > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > v13)
    {
      unint64_t v78 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v24 = *(_DWORD *)a2;
      unint64_t v79 = v25 + 4;
    }
  }
  IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v77, *a2[1], *((unsigned int *)a2[1] + 3));
  unint64_t v26 = v79;
  unint64_t v27 = (char *)((unint64_t)&v77[v79 + 3] & 0xFFFFFFFFFFFFFFFCLL);
  if (v27 >= &v77[v79])
  {
    int64_t v28 = v27 - v77;
    if ((unint64_t)(v27 - v77) > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_42;
    }
    unint64_t v26 = v28 + 4;
    if (v28 + 4 > v78) {
      goto LABEL_42;
    }
    *(_DWORD *)unint64_t v27 = *((_DWORD *)a2 + 4);
    unint64_t v79 = v28 + 4;
  }
  if (!v78)
  {
LABEL_42:
    LOBYTE(v74) = 0;
    char v76 = 0;
    goto LABEL_46;
  }
  unint64_t v29 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v30 = *((void *)v6 + 8);
  if (v29 + 16 >= v30) {
    unint64_t v29 = 0;
  }
  if (v26 <= 0x10) {
    unint64_t v26 = 16;
  }
  unint64_t v31 = v29 + v26;
  if (v30 <= v31) {
    unint64_t v31 = 0;
  }
  *((void *)v6 + 10) = v31;
  if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v31) == 0x80000000
    || *((_DWORD *)v6 + 29))
  {
    if (*((unsigned char *)v6 + 104)) {
      MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
    }
    *((_DWORD *)v6 + 29) = 0;
  }
  IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v83, (uint64_t)v6 + 64, v9);
  if (!v85)
  {
    LOBYTE(v74) = 16;
    int v75 = 1;
LABEL_45:
    char v76 = 1;
    goto LABEL_46;
  }
  WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v82, (uint64_t)&v83, (uint64_t *)v6 + 7);
  if (*((_WORD *)v82 + 25) != 2870)
  {
    uint64_t v74 = v82;
    int v75 = 0;
    goto LABEL_45;
  }
  IPC::Decoder::~Decoder(v82);
  WTF::fastFree(v32, v33);
  IPC::Connection::waitForSyncReply((uint64_t)v81, v15, 0xE3Eu, (uint64_t)&v83, v9);
  LOBYTE(v74) = 0;
  int v75 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v74, (uint64_t)&v83);
  char v76 = 1;
  if (v84 != -1) {
    ((void (*)(IPC::Decoder **, unint64_t *))off_1EE9E9D68[v84])(&v82, &v83);
  }
LABEL_46:
  IPC::Connection::popPendingSyncRequestID(v81);
  if (v76)
  {
    if (v75 == 1)
    {
      LOBYTE(v66) = (_BYTE)v74;
      int v35 = 1;
      int v69 = 1;
      char v70 = 1;
    }
    else
    {
      if (v75) {
        goto LABEL_117;
      }
      LOBYTE(v83) = 0;
      char v85 = 0;
      IPC::Decoder::operator>><std::tuple<WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)v74, (uint64_t)&v83);
      if (v85)
      {
        if (!v76) {
          goto LABEL_110;
        }
        if (v75) {
          goto LABEL_117;
        }
        unint64_t v34 = (uint64_t *)v74;
        uint64_t v74 = 0;
        unint64_t v77 = (char *)v34;
        unint64_t v78 = v83;
        unint64_t v79 = v84;
        int v80 = 0;
        LOBYTE(v66) = 0;
        int v69 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniforms>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniforms>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v66, (uint64_t)&v77);
        char v70 = 1;
        if (v80 != -1) {
          ((void (*)(IPC::Decoder **, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v80])(&v82, &v77);
        }
      }
      else
      {
        LOBYTE(v66) = 13;
        int v69 = 1;
        char v70 = 1;
      }
      if (!v76) {
        goto LABEL_59;
      }
      int v35 = v75;
      if (v75 == -1) {
        goto LABEL_59;
      }
    }
    ((void (*)(char **, IPC::Encoder **))off_1EE9E9D68[v35])(&v77, &v74);
  }
  else
  {
    LOBYTE(v66) = 0;
    char v70 = 0;
  }
LABEL_59:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v81);
  if (v70)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 24) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniforms>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniforms>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v66);
    if (v70)
    {
      if (v69 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(char **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v69])(&v77, &v66);
      }
    }
    return result;
  }
  if (!v73)
  {
LABEL_110:
    __break(1u);
LABEL_111:
    __break(0xC471u);
    JUMPOUT(0x1990AF424);
  }
  unint64_t v36 = ((unint64_t)v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = v36 - (void)v71;
  if (v36 < (unint64_t)v71)
  {
    unint64_t v38 = 0;
  }
  else
  {
    unint64_t v38 = 0;
    if (v37 <= 0xFFFFFFFFFFFFFFFDLL && v37 + 2 <= v72)
    {
      *(_WORD *)((char *)v71 + v37) = 2870;
      unint64_t v38 = v37 + 2;
    }
  }
  unint64_t v39 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v40 = *((void *)v6 + 8);
  if (v39 + 16 >= v40) {
    goto LABEL_118;
  }
  while (1)
  {
    if (v38 <= 0x10) {
      unint64_t v38 = 16;
    }
    unint64_t v41 = v39 + v38;
    if (v40 <= v41) {
      unint64_t v41 = 0;
    }
    *((void *)v6 + 10) = v41;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v41);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v82, v14);
    char v6 = v82;
    unint64_t v83 = 0;
    IPC::Connection::createSyncMessageEncoder(3646, (uint64_t)a3, (uint64_t *)&v83, &v74);
    a3 = v74;
    uint64_t v14 = (uint64_t **)*(unsigned int *)a2;
    int v42 = (_DWORD *)IPC::Encoder::grow(v74, 4uLL, 4);
    if (v43 <= 3) {
      goto LABEL_111;
    }
    *int v42 = v14;
    IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a3, *a2[1], *((unsigned int *)a2[1] + 3));
    a2 = (const void ***)*((unsigned int *)a2 + 4);
    unint64_t v44 = (_DWORD *)IPC::Encoder::grow(a3, 4uLL, 4);
    if (v45 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1990AF444);
    }
    _DWORD *v44 = a2;
    IPC::Connection::sendSyncMessage((uint64_t)v6, v83, (uint64_t *)&v74, 0, (uint64_t)&v77, v9);
    if (v78)
    {
      if (v78 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v77;
        int v46 = 1;
        *(_DWORD *)(a4 + 24) = 1;
        goto LABEL_82;
      }
      goto LABEL_117;
    }
    LOBYTE(v66) = 0;
    char v68 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)v77, (uint64_t)&v66);
    if (!v68) {
      break;
    }
    int v46 = v78;
    if (!v78)
    {
      unint64_t v48 = (uint64_t *)v77;
      unint64_t v77 = 0;
      unint64_t v49 = v66;
      *(void *)a4 = v48;
      *(void *)(a4 + 8) = v49;
      *(void *)(a4 + 16) = v67;
      *(_DWORD *)(a4 + 24) = 0;
      goto LABEL_82;
    }
LABEL_117:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_118:
    unint64_t v39 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 24) = 1;
  int v46 = v78;
  if (v78 == -1) {
    goto LABEL_83;
  }
LABEL_82:
  ((void (*)(unint64_t *, char **))off_1EE9E9D68[v46])(&v66, &v77);
LABEL_83:
  unint64_t v50 = v74;
  uint64_t v74 = 0;
  if (v50)
  {
    IPC::Encoder::~Encoder(v50, v47);
    WTF::fastFree(v51, v52);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v82);
}

uint64_t *IPC::Decoder::operator>><std::tuple<WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::span<int const,18446744073709551615ul>>(a1, (uint64_t)v20);
  int v6 = v21;
  if (v21)
  {
    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v17, v20[0], (unint64_t)v20[1]);
    double v8 = v17;
    int v9 = 1;
    int v3 = v18;
    int v2 = v19;
  }
  else
  {
    char v7 = (void *)*a1;
    uint64_t v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11 && v10)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v11 + 16))(v11, v7);
      double v8 = 0;
      int v9 = 0;
      char v7 = (void *)*a1;
      uint64_t v15 = a1[1];
      uint64_t v16 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v16 && v15)
      {
        (*(void (**)(uint64_t, void *))(*(void *)v16 + 16))(v16, v7);
        int v9 = 0;
        double v8 = 0;
      }
    }
    else
    {
      int v9 = 0;
      double v8 = 0;
      *a1 = 0;
      a1[1] = 0;
    }
  }
  if (*(unsigned __int8 *)(a2 + 16) == v9)
  {
    if (*(unsigned char *)(a2 + 16))
    {
      unint64_t v12 = *(WTF **)a2;
      if (*(void *)a2)
      {
        *(void *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
        WTF::fastFree(v12, v7);
      }
      *(void *)a2 = v8;
      *(_DWORD *)(a2 + 8) = v3;
      *(_DWORD *)(a2 + 12) = v2;
      return a1;
    }
  }
  else
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      *(void *)a2 = v8;
      *(_DWORD *)(a2 + 8) = v3;
      *(_DWORD *)(a2 + 12) = v2;
      *(unsigned char *)(a2 + 16) = 1;
      return a1;
    }
    unint64_t v13 = *(WTF **)a2;
    if (*(void *)a2)
    {
      *(void *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      WTF::fastFree(v13, v7);
    }
    *(unsigned char *)(a2 + 16) = 0;
  }
  if (v6 && v8) {
    WTF::fastFree(v8, v7);
  }
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniforms>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniforms>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA338[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  *(void *)(a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 4);
  *((_DWORD *)a3 + 4) = 0;
  *(_DWORD *)(a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 5);
  *((_DWORD *)a3 + 5) = 0;
  *(_DWORD *)(a2 + 20) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v56, v9);
    if (!(_BYTE)v58) {
      goto LABEL_101;
    }
    unint64_t v44 = v56;
    unint64_t v43 = v57;
    unint64_t v45 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v46 = v45 - (void)v56;
    if (v45 >= (unint64_t)v56)
    {
      unint64_t v47 = v46 + 2;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v57)
      {
        *(_WORD *)((char *)v56 + v46) = 2871;
        goto LABEL_87;
      }
      unint64_t v43 = 0;
    }
    unint64_t v47 = 0;
LABEL_87:
    unint64_t v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v49 >= (char *)v44 + v47)
    {
      unint64_t v47 = v49 - (char *)v44 + 8;
      if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43) {
        goto LABEL_111;
      }
      *(void *)unint64_t v49 = a3;
    }
    if (v43)
    {
      uint64_t v51 = v6[9];
      unint64_t v52 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v53 = v6[8];
      if (v52 + 16 >= v53) {
        unint64_t v52 = 0;
      }
      if (v47 <= 0x10) {
        unint64_t v47 = 16;
      }
      unint64_t v54 = v52 + v47;
      if (v53 <= v54) {
        unint64_t v54 = 0;
      }
      v6[10] = v54;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v51 + 16) + 128), v54) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_111:
    char v55 = 17;
    goto LABEL_102;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v60, v9);
  if (!v62)
  {
LABEL_101:
    char v55 = 15;
LABEL_102:
    *(unsigned char *)a4 = v55;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v60;
  unint64_t v14 = v61;
  uint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v66, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v66, v16))
  {
    LOBYTE(v71) = 11;
    uint64_t v11 = 1;
    LODWORD(v73) = 1;
    LOBYTE(v56) = 0;
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
    char v59 = 1;
    if (v73 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
    }
    goto LABEL_53;
  }
  uint64_t v71 = v13;
  unint64_t v72 = v14;
  unint64_t v73 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_105;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_105;
    }
    *(_WORD *)(v13 + v18) = 3682;
    unint64_t v73 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v72 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v73 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(&v71, a2);
    if (!v72)
    {
      LOBYTE(v63) = 0;
      char v65 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v73;
    unint64_t v23 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v6[8];
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v73 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    v6[10] = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v68, (uint64_t)(v6 + 8), v9);
    if (!v70)
    {
      LOBYTE(v63) = 16;
      int v64 = 1;
LABEL_37:
      char v65 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v67, (uint64_t)&v68, (uint64_t *)v11);
    if (*((_WORD *)v67 + 25) != 2870)
    {
      unint64_t v63 = (uint64_t *)v67;
      int v64 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v67);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v66, v16, 0xE62u, (uint64_t)&v68, v9);
    LOBYTE(v63) = 0;
    int v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v63, (uint64_t)&v68);
    char v65 = 1;
    if (v69 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v69])(&v67, &v68);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v66);
    if (!v65)
    {
      LOBYTE(v56) = 0;
      char v59 = 0;
      goto LABEL_50;
    }
    if (v64 == 1)
    {
      char v30 = (char)v63;
LABEL_49:
      LOBYTE(v56) = v30;
      int v58 = 1;
      char v59 = 1;
      goto LABEL_50;
    }
    if (v64) {
      goto LABEL_107;
    }
    uint64_t v28 = IPC::Decoder::decode<std::tuple<float>>(v63);
    if ((v28 & 0xFF00000000) == 0)
    {
      char v30 = 13;
      goto LABEL_49;
    }
    if (v65) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v72 = 0;
  }
  if (v64) {
    goto LABEL_107;
  }
  unint64_t v29 = v63;
  unint64_t v63 = 0;
  uint64_t v71 = (uint64_t)v29;
  LODWORD(v72) = v28;
  LODWORD(v73) = 0;
  LOBYTE(v56) = 0;
  int v58 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v56, (uint64_t)&v71);
  char v59 = 1;
  if (v73 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v73])(&v68, &v71);
  }
LABEL_50:
  if (v65 && v64 != -1) {
    ((void (*)(uint64_t *, uint64_t **))off_1EE9E9D68[v64])(&v71, &v63);
  }
LABEL_53:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v66);
  if (v59)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v56);
    if (v59)
    {
      if (v58 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v58])(&v71, &v56);
      }
    }
    return result;
  }
  if (!v62) {
    goto LABEL_104;
  }
  unint64_t v31 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v32 = v31 - v60;
  if (v31 < v60)
  {
    unint64_t v33 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v61)
    {
      *(_WORD *)(v60 + v32) = 2870;
      unint64_t v33 = v32 + 2;
    }
  }
  unint64_t v34 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v35 = v6[8];
  if (v34 + 16 >= v35) {
    goto LABEL_108;
  }
  while (1)
  {
    if (v33 <= 0x10) {
      unint64_t v33 = 16;
    }
    unint64_t v36 = v34 + v33;
    if (v35 <= v36) {
      unint64_t v36 = 0;
    }
    v6[10] = v36;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v36);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, v15);
    char v6 = v63;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3682, a3, &v71, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(v68, (int *)a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, v71, (uint64_t *)&v68, 0, (uint64_t)&v56, v9);
    a2 = v57;
    if (v57)
    {
      if (v57 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v56;
        goto LABEL_73;
      }
      goto LABEL_107;
    }
    uint64_t v37 = IPC::Decoder::decode<std::tuple<float>>(v56);
    if ((v37 & 0xFF00000000) == 0) {
      break;
    }
    if (!v57)
    {
      unint64_t v39 = v56;
      unint64_t v56 = 0;
      *(void *)a4 = v39;
      *(_DWORD *)(a4 + 8) = v37;
LABEL_73:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_74:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9E9D68[a2])(&v67, &v56);
      goto LABEL_75;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
    unint64_t v34 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v57;
  if (v57 != -1) {
    goto LABEL_74;
  }
LABEL_75:
  unint64_t v40 = v68;
  char v68 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v63);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA348[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v59, v9);
    if (!(_BYTE)v61) {
      goto LABEL_101;
    }
    unint64_t v47 = v59;
    unint64_t v46 = v60;
    unint64_t v48 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v49 = v48 - (void)v59;
    if (v48 >= (unint64_t)v59)
    {
      unint64_t v50 = v49 + 2;
      if (v49 <= 0xFFFFFFFFFFFFFFFDLL && v50 <= v60)
      {
        *(_WORD *)((char *)v59 + v49) = 2871;
        goto LABEL_87;
      }
      unint64_t v46 = 0;
    }
    unint64_t v50 = 0;
LABEL_87:
    unint64_t v52 = (char *)(((unint64_t)v47 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v52 >= (char *)v47 + v50)
    {
      unint64_t v50 = v52 - (char *)v47 + 8;
      if ((unint64_t)(v52 - (char *)v47) > 0xFFFFFFFFFFFFFFF7 || v50 > v46) {
        goto LABEL_113;
      }
      *(void *)unint64_t v52 = a3;
    }
    if (v46)
    {
      uint64_t v54 = *((void *)v6 + 9);
      unint64_t v55 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v56 = *((void *)v6 + 8);
      if (v55 + 16 >= v56) {
        unint64_t v55 = 0;
      }
      if (v50 <= 0x10) {
        unint64_t v50 = 16;
      }
      unint64_t v57 = v55 + v50;
      if (v56 <= v57) {
        unint64_t v57 = 0;
      }
      *((void *)v6 + 10) = v57;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v54 + 16) + 128), v57) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_113:
    char v58 = 17;
    goto LABEL_102;
  }
LABEL_4:
  unint64_t result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v63, v9);
  if (!v65)
  {
LABEL_101:
    char v58 = 15;
LABEL_102:
    *(unsigned char *)a4 = v58;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v63;
  unint64_t v14 = v64;
  uint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v69, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v69, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    LODWORD(v76) = 1;
    LOBYTE(v59) = 0;
    int v61 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v59, (uint64_t)&v74);
    char v62 = 1;
    if (v76 != -1) {
      ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v71, &v74);
    }
    goto LABEL_55;
  }
  uint64_t v74 = v13;
  unint64_t v75 = v14;
  unint64_t v76 = 0;
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_106;
    }
    unint64_t v19 = v18 + 2;
    if (v18 + 2 > v14) {
      goto LABEL_106;
    }
    *(_WORD *)(v13 + v18) = 3644;
    unint64_t v76 = v18 + 2;
  }
  while (1)
  {
    unint64_t v20 = (void *)((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v13 + v19)
    {
      if ((unint64_t)v20 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v13 + 8 > v14)
      {
        unint64_t v75 = 0;
      }
      else
      {
        *unint64_t v20 = v16;
        unint64_t v76 = (unint64_t)v20 - v13 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v74, a2);
    if (!v75)
    {
      LOBYTE(v66) = 0;
      char v68 = 0;
      goto LABEL_38;
    }
    uint64_t v22 = v76;
    unint64_t v23 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = *((void *)v6 + 8);
    if (v23 + 16 >= v24) {
      unint64_t v23 = 0;
    }
    if (v76 <= 0x10) {
      uint64_t v22 = 16;
    }
    unint64_t v25 = v23 + v22;
    if (v24 <= v25) {
      unint64_t v25 = 0;
    }
    *((void *)v6 + 10) = v25;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v25) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v71, (uint64_t)v6 + 64, v9);
    if (!v73)
    {
      LOBYTE(v66) = 16;
      int v67 = 1;
LABEL_37:
      char v68 = 1;
      goto LABEL_38;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v70, (uint64_t)&v71, (uint64_t *)v11);
    if (*((_WORD *)v70 + 25) != 2870)
    {
      unint64_t v66 = v70;
      int v67 = 0;
      goto LABEL_37;
    }
    IPC::Decoder::~Decoder(v70);
    WTF::fastFree(v26, v27);
    IPC::Connection::waitForSyncReply((uint64_t)v69, v16, 0xE3Cu, (uint64_t)&v71, v9);
    LOBYTE(v66) = 0;
    int v67 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v66, (uint64_t)&v71);
    char v68 = 1;
    if (v72 != -1) {
      ((void (*)(IPC::Decoder **, WTF::StringImpl **))off_1EE9E9D68[v72])(&v70, &v71);
    }
LABEL_38:
    IPC::Connection::popPendingSyncRequestID(v69);
    if (!v68)
    {
      LOBYTE(v59) = 0;
      char v62 = 0;
      goto LABEL_55;
    }
    if (v67 == 1)
    {
      LOBYTE(v59) = (_BYTE)v66;
      int v32 = 1;
      int v61 = 1;
      char v62 = 1;
      goto LABEL_54;
    }
    if (v67) {
      goto LABEL_109;
    }
    LOBYTE(v71) = 0;
    LOBYTE(v72) = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v66, (uint64_t *)&v71);
    if (!(_BYTE)v72)
    {
      LOBYTE(v59) = 13;
      int v61 = 1;
      char v62 = 1;
      goto LABEL_52;
    }
    if (v68) {
      break;
    }
LABEL_105:
    __break(1u);
LABEL_106:
    unint64_t v14 = 0;
    unint64_t v19 = 0;
    unint64_t v75 = 0;
  }
  if (v67) {
    goto LABEL_109;
  }
  uint64_t v28 = v66;
  unint64_t v66 = 0;
  unint64_t v29 = v71;
  uint64_t v71 = 0;
  uint64_t v74 = (uint64_t)v28;
  unint64_t v75 = (unint64_t)v29;
  LODWORD(v76) = 0;
  LOBYTE(v59) = 0;
  int v61 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v59, (uint64_t)&v74);
  char v62 = 1;
  if (v76 != -1) {
    ((void (*)(IPC::Decoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v70, &v74);
  }
  if ((_BYTE)v72)
  {
    unint64_t v31 = v71;
    uint64_t v71 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v30);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
LABEL_52:
  if (v68)
  {
    int v32 = v67;
    if (v67 != -1) {
LABEL_54:
    }
      ((void (*)(uint64_t *, IPC::Encoder **))off_1EE9E9D68[v32])(&v74, &v66);
  }
LABEL_55:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v69);
  if (v62)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    unint64_t result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v59);
    if (v62)
    {
      if (v61 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(uint64_t *, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v61])(&v74, &v59);
      }
    }
    return result;
  }
  if (!v65) {
    goto LABEL_105;
  }
  unint64_t v33 = (v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v34 = v33 - v63;
  if (v33 < v63)
  {
    unint64_t v35 = 0;
  }
  else
  {
    unint64_t v35 = 0;
    if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v64)
    {
      *(_WORD *)(v63 + v34) = 2870;
      unint64_t v35 = v34 + 2;
    }
  }
  unint64_t v36 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v37 = *((void *)v6 + 8);
  if (v36 + 16 >= v37) {
    goto LABEL_110;
  }
  while (1)
  {
    if (v35 <= 0x10) {
      unint64_t v35 = 16;
    }
    unint64_t v38 = v36 + v35;
    if (v37 <= v38) {
      unint64_t v38 = 0;
    }
    *((void *)v6 + 10) = v38;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v38);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v70, v15);
    char v6 = v70;
    uint64_t v71 = 0;
    IPC::Connection::createSyncMessageEncoder(3644, a3, (uint64_t *)&v71, &v66);
    IPC::ArgumentCoder<std::tuple<int,int>,void>::encode<IPC::Encoder,std::tuple<int,int>,0ul,1ul>(v66, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v71, (uint64_t *)&v66, 0, (uint64_t)&v59, v9);
    if (v60)
    {
      if (v60 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v59;
        int v39 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_76;
      }
      goto LABEL_109;
    }
    LOBYTE(v74) = 0;
    LOBYTE(v75) = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v59, &v74);
    if (!(_BYTE)v75) {
      break;
    }
    int v39 = v60;
    if (!v60)
    {
      unint64_t v41 = v59;
      char v59 = 0;
      uint64_t v42 = v74;
      *(void *)a4 = v41;
      *(void *)(a4 + 8) = v42;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_76;
    }
LABEL_109:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_110:
    unint64_t v36 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v39 = v60;
  if (v60 == -1) {
    goto LABEL_77;
  }
LABEL_76:
  ((void (*)(uint64_t *, IPC::Decoder **))off_1EE9E9D68[v39])(&v74, &v59);
LABEL_77:
  unint64_t v43 = v66;
  unint64_t v66 = 0;
  if (v43)
  {
    IPC::Encoder::~Encoder(v43, v40);
    WTF::fastFree(v44, v45);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v70);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA358[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformBlockBinding,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    int v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)unint64_t v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  unint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 1088;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((uint64_t *)&v47, a2);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 1088;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unint64_t v47 = v26;
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul>(v26, a2);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  uint64_t v28 = v47;
  unint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t *IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,0ul,1ul,2ul,3ul>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *(_DWORD *)a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    unint64_t v13 = v11 - v2;
    unint64_t v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = *(_DWORD *)(a2 + 4);
      result[2] = v14;
      uint64_t v2 = *result;
      unint64_t v3 = v14;
    }
  }
  unint64_t v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    unint64_t v18 = v16 - v2;
    unint64_t v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = *(_DWORD *)(a2 + 8);
      result[2] = v19;
      uint64_t v2 = *result;
      unint64_t v3 = v19;
    }
  }
  unint64_t v21 = (void *)((v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v21 >= v2 + v3)
  {
    unint64_t v22 = (unint64_t)v21 - v2 + 8;
    if ((unint64_t)v21 - v2 > 0xFFFFFFFFFFFFFFF7 || v22 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *unint64_t v21 = *(void *)(a2 + 16);
      result[2] = v22;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E9CD8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA368[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL23GetActiveUniformBlockivEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  __n128 result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL23GetActiveUniformBlockivEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

unint64_t IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, int *a2)
{
  int v4 = *a2;
  uint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3) {
    goto LABEL_9;
  }
  _DWORD *v5 = v4;
  int v7 = a2[1];
  unint64_t v8 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v9 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1990B0CC4);
  }
  *unint64_t v8 = v7;
  int v10 = a2[2];
  unint64_t v11 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v12 <= 3)
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x1990B0CA4);
  }
  *unint64_t v11 = v10;
  uint64_t v13 = *((void *)a2 + 2);

  return IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, v13);
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = (uint64_t *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)(v6 + 7);
  if (v6[7] != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v64, v9);
    if (!(_BYTE)v66) {
      goto LABEL_105;
    }
    unint64_t v52 = v64;
    unint64_t v51 = v65;
    unint64_t v53 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v54 = v53 - (void)v64;
    if (v53 >= (unint64_t)v64)
    {
      unint64_t v55 = v54 + 2;
      if (v54 <= 0xFFFFFFFFFFFFFFFDLL && v55 <= v65)
      {
        *(_WORD *)((char *)v64 + v54) = 2871;
        goto LABEL_91;
      }
      unint64_t v51 = 0;
    }
    unint64_t v55 = 0;
LABEL_91:
    unint64_t v57 = (char *)(((unint64_t)v52 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v57 >= (char *)v52 + v55)
    {
      unint64_t v55 = v57 - (char *)v52 + 8;
      if ((unint64_t)(v57 - (char *)v52) > 0xFFFFFFFFFFFFFFF7 || v55 > v51) {
        goto LABEL_117;
      }
      *(void *)unint64_t v57 = a3;
    }
    if (v51)
    {
      uint64_t v59 = v6[9];
      unint64_t v60 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v61 = v6[8];
      if (v60 + 16 >= v61) {
        unint64_t v60 = 0;
      }
      if (v55 <= 0x10) {
        unint64_t v55 = 16;
      }
      unint64_t v62 = v60 + v55;
      if (v61 <= v62) {
        unint64_t v62 = 0;
      }
      v6[10] = v62;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v59 + 16) + 128), v62) == 0x80000000);
      v6[7] = a3;
      goto LABEL_4;
    }
LABEL_117:
    char v63 = 17;
    goto LABEL_106;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 8), &v68, v9);
  if (!v70)
  {
LABEL_105:
    char v63 = 15;
LABEL_106:
    *(unsigned char *)a4 = v63;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v68;
  unint64_t v14 = v69;
  uint64_t v15 = (uint64_t **)(v6 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v76, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v76, v16))
  {
    LOBYTE(v78) = 11;
    uint64_t v11 = 1;
    int v80 = 1;
    LOBYTE(v64) = 0;
    int v66 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)&v78);
    char v67 = 1;
    if (v80 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v80])(&v73, &v78);
    }
    goto LABEL_59;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3681;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_110;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    unint64_t v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v73) = 0;
        unsigned __int8 v75 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = v6[8];
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    v6[10] = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v78, (uint64_t)(v6 + 8), v9);
    if (!(_BYTE)v80)
    {
      LOBYTE(v73) = 16;
      int v74 = 1;
LABEL_41:
      unsigned __int8 v75 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v71, (uint64_t)&v78, (uint64_t *)v11);
    if (*((_WORD *)v71 + 25) != 2870)
    {
      char v73 = v71;
      int v74 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v71);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v76, v16, 0xE61u, (uint64_t)&v78, v9);
    LOBYTE(v73) = 0;
    int v74 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v73, (uint64_t)&v78);
    unsigned __int8 v75 = 1;
    if (v79 != -1) {
      ((void (*)(WTF::StringImpl **, IPC::Decoder **))off_1EE9E9D68[v79])(&v71, &v78);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v76);
    if (!v75)
    {
      LOBYTE(v64) = 0;
      char v67 = 0;
      goto LABEL_59;
    }
    if (v74 == 1)
    {
      LOBYTE(v64) = (_BYTE)v73;
      int v37 = 1;
      int v66 = 1;
      char v67 = 1;
      goto LABEL_58;
    }
    if (v74) {
      goto LABEL_113;
    }
    LOBYTE(v71) = 0;
    char v72 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v73, (uint64_t *)&v71);
    if (!v72)
    {
      LOBYTE(v64) = 13;
      int v66 = 1;
      char v67 = 1;
      goto LABEL_56;
    }
    unint64_t v20 = v75;
    if (v75) {
      break;
    }
LABEL_109:
    __break(1u);
LABEL_110:
    unint64_t v19 = 0;
  }
  if (v74) {
    goto LABEL_113;
  }
  unint64_t v33 = v73;
  char v73 = 0;
  unint64_t v34 = v71;
  uint64_t v71 = 0;
  unint64_t v78 = v33;
  unint64_t v79 = v34;
  int v80 = 0;
  LOBYTE(v64) = 0;
  int v66 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v64, (uint64_t)&v78);
  char v67 = 1;
  if (v80 != -1) {
    ((void (*)(char *, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v80])(&v77, &v78);
  }
  if (v72)
  {
    unint64_t v36 = v71;
    uint64_t v71 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v35);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
LABEL_56:
  if (v75)
  {
    int v37 = v74;
    if (v74 != -1) {
LABEL_58:
    }
      ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9D68[v37])(&v78, &v73);
  }
LABEL_59:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v76);
  if (v67)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v64);
    if (v67)
    {
      if (v66 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v66])(&v78, &v64);
      }
    }
    return result;
  }
  unint64_t v20 = v70;
  if (!v70) {
    goto LABEL_109;
  }
  unint64_t v38 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = v38 - v68;
  if (v38 < v68)
  {
    unint64_t v40 = 0;
  }
  else
  {
    unint64_t v40 = 0;
    if (v39 <= 0xFFFFFFFFFFFFFFFDLL && v39 + 2 <= v69)
    {
      *(_WORD *)(v68 + v39) = 2870;
      unint64_t v40 = v39 + 2;
    }
  }
  unint64_t v41 = (v6[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v42 = v6[8];
  if (v41 + 16 >= v42) {
    goto LABEL_114;
  }
  while (1)
  {
    if (v40 <= 0x10) {
      unint64_t v40 = 16;
    }
    unint64_t v43 = v41 + v40;
    if (v42 <= v43) {
      unint64_t v43 = 0;
    }
    v6[10] = v43;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v6[9] + 16) + 128), v43);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v76, v15);
    unint64_t v6 = (uint64_t *)v76;
    char v73 = 0;
    IPC::Connection::createSyncMessageEncoder(3681, a3, (uint64_t *)&v73, &v71);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v71, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v73, (uint64_t *)&v71, 0, (uint64_t)&v64, v9);
    if (v65)
    {
      if (v65 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v64;
        int v44 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_80;
      }
      goto LABEL_113;
    }
    LOBYTE(v78) = 0;
    LOBYTE(v79) = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v64, (uint64_t *)&v78);
    if (!(_BYTE)v79) {
      break;
    }
    int v44 = v65;
    if (!v65)
    {
      unsigned __int8 v46 = v64;
      unint64_t v64 = 0;
      uint64_t v47 = (uint64_t)v78;
      *(void *)a4 = v46;
      *(void *)(a4 + 8) = v47;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_80;
    }
LABEL_113:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_114:
    unint64_t v41 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v44 = v65;
  if (v65 == -1) {
    goto LABEL_81;
  }
LABEL_80:
  ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9E9D68[v44])(&v78, &v64);
LABEL_81:
  unint64_t v48 = v71;
  uint64_t v71 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v45);
    WTF::fastFree(v49, v50);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v76);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EA378[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawBuffersEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, const void ***a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v47, v7);
    if (!(_BYTE)v49) {
      return 15;
    }
    int v32 = v47;
    unint64_t v31 = v48;
    unint64_t v33 = ((unint64_t)v47 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v34 = v33 - (void)v47;
    if (v33 >= (unint64_t)v47)
    {
      unint64_t v35 = v34 + 2;
      if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v35 <= v48)
      {
        *(_WORD *)((char *)v47 + v34) = 2871;
        goto LABEL_45;
      }
      unint64_t v31 = 0;
    }
    unint64_t v35 = 0;
LABEL_45:
    int v37 = (char *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v37 >= (char *)v32 + v35)
    {
      unint64_t v35 = v37 - (char *)v32 + 8;
      if ((unint64_t)(v37 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v35 > v31) {
        return 17;
      }
      *(void *)int v37 = a3;
    }
    if (v31)
    {
      unint64_t v39 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v40 = *(void *)(a1 + 64);
      if (v39 + 16 >= v40) {
        unint64_t v39 = 0;
      }
      if (v35 <= 0x10) {
        unint64_t v35 = 16;
      }
      unint64_t v41 = v39 + v35;
      if (v40 <= v41) {
        unint64_t v41 = 0;
      }
      *(void *)(a1 + 80) = v41;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v41) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v44, v7);
  if (!v46) {
    return 15;
  }
  uint64_t v47 = v44;
  unint64_t v48 = v45;
  unint64_t v49 = 0;
  unint64_t v9 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v10 = v9 >= (unint64_t)v44;
  unint64_t v11 = v9 - (void)v44;
  if (v10)
  {
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v45)
    {
      unint64_t v48 = 0;
    }
    else
    {
      *(_WORD *)((char *)v44 + v11) = 992;
      unint64_t v49 = v11 + 2;
    }
  }
  IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v47, **a2, (uint64_t)(*a2)[1]);
  if (v48)
  {
    uint64_t v14 = v49;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v16 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v17 = *(void *)(a1 + 64);
    if (v16 + 16 >= v17) {
      unint64_t v16 = 0;
    }
    if (v49 <= 0x10) {
      uint64_t v14 = 16;
    }
    unint64_t v18 = v16 + v14;
    if (v17 <= v18) {
      unint64_t v18 = 0;
    }
    *(void *)(a1 + 80) = v18;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v15 + 16) + 128), v18) == 0x80000000
      || *(_DWORD *)(a1 + 116))
    {
      if (*(unsigned char *)(a1 + 104)) {
        MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
      }
      *(_DWORD *)(a1 + 116) = 0;
    }
    return 0;
  }
  unint64_t v20 = v46;
  if (v46)
  {
    unint64_t v21 = ((unint64_t)v44 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v22 = v21 - (void)v44;
    if (v21 < (unint64_t)v44)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v45)
      {
        *(_WORD *)((char *)v44 + v22) = 2870;
        unint64_t v20 = v22 + 2;
      }
    }
    unint64_t v23 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v13 = *(void *)(a1 + 64);
    if (v23 + 16 < v13) {
      goto LABEL_31;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v23 = 0;
LABEL_31:
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v24 = v23 + v20;
  if (v13 <= v24) {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 80) = v24;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v24);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, (uint64_t **)(a1 + 8));
  unint64_t v25 = v43;
  unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v26 = 992;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  uint64_t v47 = v26;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v26, **a2, (uint64_t)(*a2)[1]);
  uint64_t v19 = IPC::Connection::sendMessageImpl((uint64_t)v25, (uint64_t *)&v47, 1, 0);
  unint64_t v28 = v47;
  uint64_t v47 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v43);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 960;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 960;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, int *a2, uint64_t a3)
{
  double v6 = *(double *)(a1 + 120);
  double v7 = INFINITY;
  if (fabs(v6) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v7 = v6 + v8;
  }
  if (*(void *)(a1 + 56) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
    if (!v48) {
      return 15;
    }
    unint64_t v34 = v46;
    unint64_t v33 = v47;
    unint64_t v35 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v36 = v35 - v46;
    if (v35 >= v46)
    {
      unint64_t v37 = v36 + 2;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v37 <= v47)
      {
        *(_WORD *)(v46 + v36) = 2871;
        goto LABEL_50;
      }
      unint64_t v33 = 0;
    }
    unint64_t v37 = 0;
LABEL_50:
    unint64_t v39 = (void *)((v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v39 >= v34 + v37)
    {
      unint64_t v37 = (unint64_t)v39 - v34 + 8;
      if ((unint64_t)v39 - v34 > 0xFFFFFFFFFFFFFFF7 || v37 > v33) {
        return 17;
      }
      void *v39 = a3;
    }
    if (v33)
    {
      unint64_t v41 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *(void *)(a1 + 64);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v37 <= 0x10) {
        unint64_t v37 = 16;
      }
      unint64_t v43 = v41 + v37;
      if (v42 <= v43) {
        unint64_t v43 = 0;
      }
      *(void *)(a1 + 80) = v43;
      IPC::StreamClientConnection::wakeUpServerBatched(a1, atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v43) == 0x80000000);
      *(void *)(a1 + 56) = a3;
      goto LABEL_4;
    }
    return 17;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 64, &v46, v7);
  if (!v48) {
    return 15;
  }
  unint64_t v10 = v46;
  unint64_t v9 = v47;
  unint64_t v11 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v12 = v11 - v46;
  if (v11 >= v46)
  {
    unint64_t v13 = v12 + 2;
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v13 <= v47)
    {
      *(_WORD *)(v46 + v12) = 973;
      goto LABEL_11;
    }
    unint64_t v9 = 0;
  }
  unint64_t v13 = 0;
LABEL_11:
  uint64_t v15 = (_DWORD *)((v10 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v15 >= v10 + v13)
  {
    unint64_t v13 = (unint64_t)v15 - v10 + 4;
    if ((unint64_t)v15 - v10 > 0xFFFFFFFFFFFFFFFBLL || v13 > v9) {
      goto LABEL_27;
    }
    _DWORD *v15 = *a2;
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v18 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = *(void *)(a1 + 64);
    if (v18 + 16 >= v19) {
      unint64_t v18 = 0;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    unint64_t v20 = v18 + v13;
    if (v19 <= v20) {
      unint64_t v20 = 0;
    }
    *(void *)(a1 + 80) = v20;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v17 + 16) + 128), v20) != 0x80000000
      && !*(_DWORD *)(a1 + 116))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104)) {
      MEMORY[0x1997420B0](*(unsigned int *)(a1 + 92));
    }
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 116) = 0;
    return v21;
  }
LABEL_27:
  unint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (v46 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v23 - v46;
    if (v23 < v46)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 0;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v47)
      {
        *(_WORD *)(v46 + v24) = 2870;
        unint64_t v22 = v24 + 2;
      }
    }
    unint64_t v25 = (*(void *)(a1 + 80) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = *(void *)(a1 + 64);
    if (v25 + 16 < v9) {
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v25 = 0;
LABEL_33:
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v26 = v25 + v22;
  if (v9 <= v26) {
    unint64_t v26 = 0;
  }
  *(void *)(a1 + 80) = v26;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 16) + 128), v26);
  *(_DWORD *)(a1 + 116) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)(a1 + 8));
  unint64_t v27 = v45;
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 973;
  *((void *)v28 + 1) = a3;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  unint64_t v49 = v28;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v28, a2);
  uint64_t v21 = IPC::Connection::sendMessageImpl((uint64_t)v27, (uint64_t *)&v49, 1, 0);
  unint64_t v30 = v49;
  unint64_t v49 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
  return v21;
}

atomic_uchar *volatile **IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = (IPC::Decoder *)a1;
  double v8 = a1[15];
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v9 = v8 + v10;
  }
  uint64_t v11 = (uint64_t)v6 + 56;
  if (*((void *)v6 + 7) != a3)
  {
    __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v61, v9);
    if (!(_BYTE)v63) {
      goto LABEL_101;
    }
    unint64_t v49 = v61;
    unint64_t v48 = v62;
    unint64_t v50 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = v50 - (void)v61;
    if (v50 >= (unint64_t)v61)
    {
      unint64_t v52 = v51 + 2;
      if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v52 <= v62)
      {
        *(_WORD *)((char *)v61 + v51) = 2871;
        goto LABEL_87;
      }
      unint64_t v48 = 0;
    }
    unint64_t v52 = 0;
LABEL_87:
    unint64_t v54 = (char *)(((unint64_t)v49 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v54 >= (char *)v49 + v52)
    {
      unint64_t v52 = v54 - (char *)v49 + 8;
      if ((unint64_t)(v54 - (char *)v49) > 0xFFFFFFFFFFFFFFF7 || v52 > v48) {
        goto LABEL_112;
      }
      *(void *)unint64_t v54 = a3;
    }
    if (v48)
    {
      uint64_t v56 = *((void *)v6 + 9);
      unint64_t v57 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v58 = *((void *)v6 + 8);
      if (v57 + 16 >= v58) {
        unint64_t v57 = 0;
      }
      if (v52 <= 0x10) {
        unint64_t v52 = 16;
      }
      unint64_t v59 = v57 + v52;
      if (v58 <= v59) {
        unint64_t v59 = 0;
      }
      *((void *)v6 + 10) = v59;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, atomic_exchange((atomic_ullong *volatile)(*(void *)(v56 + 16) + 128), v59) == 0x80000000);
      *((void *)v6 + 7) = a3;
      goto LABEL_4;
    }
LABEL_112:
    char v60 = 17;
    goto LABEL_102;
  }
LABEL_4:
  __n128 result = (atomic_uchar *volatile **)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v65, v9);
  if (!v67)
  {
LABEL_101:
    char v60 = 15;
LABEL_102:
    *(unsigned char *)a4 = v60;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  unint64_t v13 = v65;
  unint64_t v14 = v66;
  uint64_t v15 = (uint64_t **)((char *)v6 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)v6 + 1);
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v71, v16))
  {
    LOBYTE(v74) = 11;
    uint64_t v11 = 1;
    int v76 = 1;
    LOBYTE(v61) = 0;
    int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQueryEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQueryEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
    char v64 = 1;
    if (v76 != -1) {
      ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v68, &v74);
    }
    goto LABEL_55;
  }
  unint64_t v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v18 = v17 - v13;
  if (v17 < v13)
  {
    unint64_t v20 = 0;
    unint64_t v19 = v14;
  }
  else
  {
    unint64_t v19 = 0;
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      if (v18 + 2 <= v14)
      {
        *(_WORD *)(v13 + v18) = 3694;
        unint64_t v19 = v14;
        unint64_t v20 = v18 + 2;
      }
    }
  }
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v21 - (v13 + v20);
  if (v21 >= v13 + v20)
  {
    unint64_t v23 = v21 - v13;
    unint64_t v24 = v22 + v20 + 8;
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v19) {
      goto LABEL_105;
    }
    *(void *)(v13 + v23) = v16;
    unint64_t v20 = v24;
  }
  while (1)
  {
    unint64_t v26 = (_DWORD *)((v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v13 + v20)
    {
      unint64_t v27 = (char *)v26 - v13;
      if ((unint64_t)v26 - v13 > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t v20 = (unint64_t)(v27 + 4), (unint64_t)(v27 + 4) > v19))
      {
LABEL_38:
        LOBYTE(v68) = 0;
        unsigned __int8 v70 = 0;
        goto LABEL_42;
      }
      _DWORD *v26 = *a2;
    }
    if (!v19) {
      goto LABEL_38;
    }
    unint64_t v28 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = *((void *)v6 + 8);
    if (v28 + 16 >= v29) {
      unint64_t v28 = 0;
    }
    if (v20 <= 0x10) {
      unint64_t v20 = 16;
    }
    unint64_t v30 = v28 + v20;
    if (v29 <= v30) {
      unint64_t v30 = 0;
    }
    *((void *)v6 + 10) = v30;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v30) == 0x80000000
      || *((_DWORD *)v6 + 29))
    {
      if (*((unsigned char *)v6 + 104)) {
        MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
      }
      *((_DWORD *)v6 + 29) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((WTF::ApproximateTime *)&v74, (uint64_t)v6 + 64, v9);
    if (!(_BYTE)v76)
    {
      LOBYTE(v68) = 16;
      int v69 = 1;
LABEL_41:
      unsigned __int8 v70 = 1;
      goto LABEL_42;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v73, (uint64_t)&v74, (uint64_t *)v11);
    if (*((_WORD *)v73 + 25) != 2870)
    {
      unint64_t v68 = v73;
      int v69 = 0;
      goto LABEL_41;
    }
    IPC::Decoder::~Decoder(v73);
    WTF::fastFree(v31, v32);
    IPC::Connection::waitForSyncReply((uint64_t)v71, v16, 0xE6Eu, (uint64_t)&v74, v9);
    LOBYTE(v68) = 0;
    int v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, (uint64_t)&v74);
    unsigned __int8 v70 = 1;
    if (v75 != -1) {
      ((void (*)(IPC::Decoder **, IPC::Encoder **))off_1EE9E9D68[v75])(&v73, &v74);
    }
LABEL_42:
    IPC::Connection::popPendingSyncRequestID(v71);
    if (!v70)
    {
      LOBYTE(v61) = 0;
      char v64 = 0;
      goto LABEL_55;
    }
    if (v69 == 1)
    {
      LOBYTE(v61) = (_BYTE)v68;
      int v34 = 1;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_54;
    }
    if (v69) {
      goto LABEL_108;
    }
    LOWORD(v73) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>((uint64_t *)v68, &v73);
    if (!BYTE1(v73))
    {
      LOBYTE(v61) = 13;
      int v63 = 1;
      char v64 = 1;
      goto LABEL_52;
    }
    unint64_t v20 = v70;
    if (v70) {
      break;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    unint64_t v19 = 0;
  }
  if (v69) {
    goto LABEL_108;
  }
  unint64_t v33 = v68;
  unint64_t v68 = 0;
  int v74 = v33;
  LOBYTE(v75) = (_BYTE)v73;
  int v76 = 0;
  LOBYTE(v61) = 0;
  int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQueryEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQueryEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)&v74);
  char v64 = 1;
  if (v76 != -1) {
    ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v76])(&v72, &v74);
  }
LABEL_52:
  if (v70)
  {
    int v34 = v69;
    if (v69 != -1) {
LABEL_54:
    }
      ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9E9D68[v34])(&v74, &v68);
  }
LABEL_55:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
  if (v64)
  {
    *(unsigned char *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    __n128 result = (atomic_uchar *volatile **)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQueryEXT>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsQueryEXT>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v61);
    if (v64)
    {
      if (v63 != -1) {
        return (atomic_uchar *volatile **)((uint64_t (*)(IPC::Encoder **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v63])(&v74, &v61);
      }
    }
    return result;
  }
  unint64_t v20 = v67;
  if (!v67) {
    goto LABEL_104;
  }
  unint64_t v35 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v35 - v65;
  if (v35 < v65)
  {
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v66)
    {
      *(_WORD *)(v65 + v36) = 2870;
      unint64_t v37 = v36 + 2;
    }
  }
  unint64_t v38 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v39 = *((void *)v6 + 8);
  if (v38 + 16 >= v39) {
    goto LABEL_109;
  }
  while (1)
  {
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v40 = v38 + v37;
    if (v39 <= v40) {
      unint64_t v40 = 0;
    }
    *((void *)v6 + 10) = v40;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v40);
    *((_DWORD *)v6 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, v15);
    double v6 = v73;
    int v74 = 0;
    IPC::Connection::createSyncMessageEncoder(3694, a3, (uint64_t *)&v74, &v68);
    IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v68, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v6, (uint64_t)v74, (uint64_t *)&v68, 0, (uint64_t)&v61, v9);
    if (v62)
    {
      if (v62 == 1)
      {
        *(unsigned char *)a4 = (_BYTE)v61;
        int v41 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_76;
      }
      goto LABEL_108;
    }
    LOWORD(v71) = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v61, &v71);
    if (!BYTE1(v71)) {
      break;
    }
    int v41 = v62;
    if (!v62)
    {
      unint64_t v43 = v61;
      unint64_t v61 = 0;
      char v44 = (char)v71;
      *(void *)a4 = v43;
      *(unsigned char *)(a4 + 8) = v44;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_76;
    }
LABEL_108:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
    unint64_t v38 = 0;
  }
  *(unsigned char *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  int v41 = v62;
  if (v62 == -1) {
    goto LABEL_77;
  }
LABEL_76:
  ((void (*)(IPC::Decoder ***, uint64_t **))off_1EE9E9D68[v41])(&v71, &v61);
LABEL_77:
  unint64_t v45 = v68;
  unint64_t v68 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v42);
    WTF::fastFree(v46, v47);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v73);
}