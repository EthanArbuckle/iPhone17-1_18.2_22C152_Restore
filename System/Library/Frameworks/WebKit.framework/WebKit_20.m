uint64_t WKPageSetPageUIClient::UIClient::showPage(uint64_t this, WebKit::WebPageProxy *a2)
{
  uint64_t (*v2)(uint64_t, void);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t, void))(this + 32);
  if (v2)
  {
    if (a2) {
      v3 = *((void *)a2 + 1);
    }
    else {
      v3 = 0;
    }
    return v2(v3, *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::fullscreenMayReturnToInline(uint64_t this, WebKit::WebPageProxy *a2)
{
  v2 = *(uint64_t (**)(uint64_t, void))(this + 528);
  if (v2)
  {
    if (a2) {
      uint64_t v3 = *((void *)a2 + 1);
    }
    else {
      uint64_t v3 = 0;
    }
    return v2(v3, *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::hasVideoInPictureInPictureDidChange(uint64_t this, WebKit::WebPageProxy *a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(this + 560);
  if (v3)
  {
    if (a2) {
      uint64_t v4 = *((void *)a2 + 1);
    }
    else {
      uint64_t v4 = 0;
    }
    return v3(v4, a3, *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::close(uint64_t this, WebKit::WebPageProxy *a2)
{
  v2 = *(uint64_t (**)(uint64_t, void))(this + 40);
  if (v2)
  {
    if (a2) {
      uint64_t v3 = *((void *)a2 + 1);
    }
    else {
      uint64_t v3 = 0;
    }
    return v2(v3, *(void *)(this + 16));
  }
  return this;
}

BOOL WKPageSetPageUIClient::UIClient::takeFocus(WKPageSetPageUIClient::UIClient *this, WebKit::WebPageProxy *a2, uint64_t a3)
{
  uint64_t v3 = (void (*)(uint64_t, uint64_t, void))*((void *)this + 6);
  if (v3)
  {
    if (a2) {
      uint64_t v4 = *((void *)a2 + 1);
    }
    else {
      uint64_t v4 = 0;
    }
    v3(v4, a3, *((void *)this + 2));
  }
  return v3 != 0;
}

uint64_t WKPageSetPageUIClient::UIClient::focus(uint64_t this, WebKit::WebPageProxy *a2)
{
  v2 = *(uint64_t (**)(uint64_t, void))(this + 56);
  if (v2)
  {
    if (a2) {
      uint64_t v3 = *((void *)a2 + 1);
    }
    else {
      uint64_t v3 = 0;
    }
    return v2(v3, *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::unfocus(uint64_t this, WebKit::WebPageProxy *a2)
{
  v2 = *(uint64_t (**)(uint64_t, void))(this + 64);
  if (v2)
  {
    if (a2) {
      uint64_t v3 = *((void *)a2 + 1);
    }
    else {
      uint64_t v3 = 0;
    }
    return v2(v3, *(void *)(this + 16));
  }
  return this;
}

void WKPageSetPageUIClient::UIClient::runJavaScriptAlert(void *a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a1[61])
  {
    v11 = (WebKit *)API::Object::newObject(0x18uLL, 98);
    *(void *)v11 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2(v11);
    *(void *)v11 = &unk_1EE9E1378;
    uint64_t v12 = *a6;
    *a6 = 0;
    *((void *)v11 + 2) = v12;
    API::SecurityOrigin::create(&v46);
    v13 = v46;
    v14 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))a1[61];
    uint64_t v15 = *(void *)(a2 + 8);
    v16 = *a3;
    if (*a3) {
      *(_DWORD *)v16 += 2;
    }
    v45 = v16;
    API::String::create(&v45, &v46);
    v18 = v45;
    v19 = v46;
    v45 = 0;
    v46 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v17);
        if (v19)
        {
LABEL_8:
          uint64_t v20 = *((void *)v19 + 1);
          if (a4) {
            goto LABEL_9;
          }
          goto LABEL_34;
        }
LABEL_33:
        uint64_t v20 = 0;
        if (a4)
        {
LABEL_9:
          uint64_t v21 = *(void *)(a4 + 8);
          if (v13)
          {
LABEL_10:
            uint64_t v22 = *((void *)v13 + 1);
LABEL_11:
            v14(v15, v20, v21, v22, *((void *)v11 + 1), a1[2]);
            if (v19) {
              CFRelease(*((CFTypeRef *)v19 + 1));
            }
            if (v13) {
              CFRelease(*((CFTypeRef *)v13 + 1));
            }
            v23 = (const void *)*((void *)v11 + 1);
            goto LABEL_30;
          }
LABEL_35:
          uint64_t v22 = 0;
          goto LABEL_11;
        }
LABEL_34:
        uint64_t v21 = 0;
        if (v13) {
          goto LABEL_10;
        }
        goto LABEL_35;
      }
      *(_DWORD *)v18 -= 2;
    }
    if (v19) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
  if (!a1[56])
  {
    v35 = (void (*)(uint64_t, uint64_t, uint64_t, void))a1[9];
    if (!v35)
    {
      v44 = *(void (**)(void))(*(void *)*a6 + 16);
      v44();
      return;
    }
    uint64_t v36 = *(void *)(a2 + 8);
    v37 = *a3;
    if (*a3) {
      *(_DWORD *)v37 += 2;
    }
    v45 = v37;
    API::String::create(&v45, &v46);
    v39 = v45;
    v40 = v46;
    v45 = 0;
    v46 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
      {
        WTF::StringImpl::destroy(v39, v38);
        if (v40)
        {
LABEL_43:
          uint64_t v41 = *((void *)v40 + 1);
          if (a4)
          {
LABEL_44:
            uint64_t v42 = *(void *)(a4 + 8);
LABEL_45:
            v35(v36, v41, v42, a1[2]);
            if (v40) {
              CFRelease(*((CFTypeRef *)v40 + 1));
            }
            (*(void (**)(void, uint64_t))(*(void *)*a6 + 16))(*a6, v43);
            return;
          }
LABEL_57:
          uint64_t v42 = 0;
          goto LABEL_45;
        }
LABEL_56:
        uint64_t v41 = 0;
        if (a4) {
          goto LABEL_44;
        }
        goto LABEL_57;
      }
      *(_DWORD *)v39 -= 2;
    }
    if (v40) {
      goto LABEL_43;
    }
    goto LABEL_56;
  }
  API::SecurityOrigin::create(&v46);
  v24 = v46;
  v25 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))a1[56];
  uint64_t v26 = *(void *)(a2 + 8);
  v27 = *a3;
  if (*a3) {
    *(_DWORD *)v27 += 2;
  }
  v45 = v27;
  API::String::create(&v45, &v46);
  v29 = v45;
  v30 = v46;
  v45 = 0;
  v46 = 0;
  if (!v29)
  {
LABEL_22:
    if (v30) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
  if (*(_DWORD *)v29 != 2)
  {
    *(_DWORD *)v29 -= 2;
    goto LABEL_22;
  }
  WTF::StringImpl::destroy(v29, v28);
  if (v30)
  {
LABEL_23:
    uint64_t v31 = *((void *)v30 + 1);
    if (a4) {
      goto LABEL_24;
    }
LABEL_50:
    uint64_t v32 = 0;
    if (v24) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_49:
  uint64_t v31 = 0;
  if (!a4) {
    goto LABEL_50;
  }
LABEL_24:
  uint64_t v32 = *(void *)(a4 + 8);
  if (v24)
  {
LABEL_25:
    uint64_t v33 = *((void *)v24 + 1);
    goto LABEL_26;
  }
LABEL_51:
  uint64_t v33 = 0;
LABEL_26:
  v25(v26, v31, v32, v33, a1[2]);
  if (v30) {
    CFRelease(*((CFTypeRef *)v30 + 1));
  }
  (*(void (**)(void, uint64_t))(*(void *)*a6 + 16))(*a6, v34);
  if (v24)
  {
    v23 = (const void *)*((void *)v24 + 1);
LABEL_30:
    CFRelease(v23);
  }
}

void WKPageSetPageUIClient::UIClient::runJavaScriptConfirm(void *a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a1[62])
  {
    v11 = (WebKit *)API::Object::newObject(0x18uLL, 99);
    *(void *)v11 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2(v11);
    *(void *)v11 = &unk_1EE9E13A0;
    uint64_t v12 = *a6;
    *a6 = 0;
    *((void *)v11 + 2) = v12;
    API::SecurityOrigin::create(&v46);
    v13 = v46;
    v14 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))a1[62];
    uint64_t v15 = *(void *)(a2 + 8);
    v16 = *a3;
    if (*a3) {
      *(_DWORD *)v16 += 2;
    }
    v45 = v16;
    API::String::create(&v45, &v46);
    v18 = v45;
    v19 = v46;
    v45 = 0;
    v46 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v17);
        if (v19)
        {
LABEL_8:
          uint64_t v20 = *((void *)v19 + 1);
          if (a4) {
            goto LABEL_9;
          }
          goto LABEL_34;
        }
LABEL_33:
        uint64_t v20 = 0;
        if (a4)
        {
LABEL_9:
          uint64_t v21 = *(void *)(a4 + 8);
          if (v13)
          {
LABEL_10:
            uint64_t v22 = *((void *)v13 + 1);
LABEL_11:
            v14(v15, v20, v21, v22, *((void *)v11 + 1), a1[2]);
            if (v19) {
              CFRelease(*((CFTypeRef *)v19 + 1));
            }
            if (v13) {
              CFRelease(*((CFTypeRef *)v13 + 1));
            }
            v23 = (const void *)*((void *)v11 + 1);
            goto LABEL_30;
          }
LABEL_35:
          uint64_t v22 = 0;
          goto LABEL_11;
        }
LABEL_34:
        uint64_t v21 = 0;
        if (v13) {
          goto LABEL_10;
        }
        goto LABEL_35;
      }
      *(_DWORD *)v18 -= 2;
    }
    if (v19) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
  if (!a1[57])
  {
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))a1[10];
    if (!v35)
    {
      v44 = *(void (**)(void))(*(void *)*a6 + 16);
      v44();
      return;
    }
    uint64_t v36 = *(void *)(a2 + 8);
    v37 = *a3;
    if (*a3) {
      *(_DWORD *)v37 += 2;
    }
    v45 = v37;
    API::String::create(&v45, &v46);
    v39 = v45;
    v40 = v46;
    v45 = 0;
    v46 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
      {
        WTF::StringImpl::destroy(v39, v38);
        if (v40)
        {
LABEL_43:
          uint64_t v41 = *((void *)v40 + 1);
          if (a4)
          {
LABEL_44:
            uint64_t v42 = *(void *)(a4 + 8);
LABEL_45:
            uint64_t v43 = v35(v36, v41, v42, a1[2]);
            if (v40) {
              CFRelease(*((CFTypeRef *)v40 + 1));
            }
            (*(void (**)(void, uint64_t))(*(void *)*a6 + 16))(*a6, v43);
            return;
          }
LABEL_57:
          uint64_t v42 = 0;
          goto LABEL_45;
        }
LABEL_56:
        uint64_t v41 = 0;
        if (a4) {
          goto LABEL_44;
        }
        goto LABEL_57;
      }
      *(_DWORD *)v39 -= 2;
    }
    if (v40) {
      goto LABEL_43;
    }
    goto LABEL_56;
  }
  API::SecurityOrigin::create(&v46);
  v24 = v46;
  v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))a1[57];
  uint64_t v26 = *(void *)(a2 + 8);
  v27 = *a3;
  if (*a3) {
    *(_DWORD *)v27 += 2;
  }
  v45 = v27;
  API::String::create(&v45, &v46);
  v29 = v45;
  v30 = v46;
  v45 = 0;
  v46 = 0;
  if (!v29)
  {
LABEL_22:
    if (v30) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
  if (*(_DWORD *)v29 != 2)
  {
    *(_DWORD *)v29 -= 2;
    goto LABEL_22;
  }
  WTF::StringImpl::destroy(v29, v28);
  if (v30)
  {
LABEL_23:
    uint64_t v31 = *((void *)v30 + 1);
    if (a4) {
      goto LABEL_24;
    }
LABEL_50:
    uint64_t v32 = 0;
    if (v24) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_49:
  uint64_t v31 = 0;
  if (!a4) {
    goto LABEL_50;
  }
LABEL_24:
  uint64_t v32 = *(void *)(a4 + 8);
  if (v24)
  {
LABEL_25:
    uint64_t v33 = *((void *)v24 + 1);
    goto LABEL_26;
  }
LABEL_51:
  uint64_t v33 = 0;
LABEL_26:
  uint64_t v34 = v25(v26, v31, v32, v33, a1[2]);
  if (v30) {
    CFRelease(*((CFTypeRef *)v30 + 1));
  }
  (*(void (**)(void, uint64_t))(*(void *)*a6 + 16))(*a6, v34);
  if (v24)
  {
    v23 = (const void *)*((void *)v24 + 1);
LABEL_30:
    CFRelease(v23);
  }
}

void WKPageSetPageUIClient::UIClient::runJavaScriptPrompt(void *a1, uint64_t a2, WTF::StringImpl **a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a1[63])
  {
    v13 = (WebKit *)API::Object::newObject(0x18uLL, 100);
    *(void *)v13 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2(v13);
    *(void *)v13 = &unk_1EE9E13C8;
    uint64_t v14 = *a7;
    *a7 = 0;
    *((void *)v13 + 2) = v14;
    API::SecurityOrigin::create(&v72);
    uint64_t v15 = v72;
    v16 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))a1[63];
    uint64_t v17 = *(void *)(a2 + 8);
    v18 = *a3;
    if (*a3) {
      *(_DWORD *)v18 += 2;
    }
    v71 = v18;
    API::String::create(&v71, &v72);
    uint64_t v20 = v71;
    uint64_t v21 = v72;
    v71 = 0;
    v72 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v19);
        if (v21) {
          goto LABEL_8;
        }
        goto LABEL_52;
      }
      *(_DWORD *)v20 -= 2;
    }
    if (v21)
    {
LABEL_8:
      uint64_t v22 = *((void *)v21 + 1);
      goto LABEL_9;
    }
LABEL_52:
    uint64_t v22 = 0;
LABEL_9:
    v23 = *a4;
    if (*a4) {
      *(_DWORD *)v23 += 2;
    }
    v71 = v23;
    API::String::create(&v71, &v72);
    v25 = v71;
    uint64_t v26 = v72;
    v71 = 0;
    v72 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v24);
        if (v26)
        {
LABEL_15:
          uint64_t v27 = *((void *)v26 + 1);
          if (a5) {
            goto LABEL_16;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v27 = 0;
        if (a5)
        {
LABEL_16:
          uint64_t v28 = *(void *)(a5 + 8);
          if (v15)
          {
LABEL_17:
            uint64_t v29 = *((void *)v15 + 1);
LABEL_18:
            v16(v17, v22, v27, v28, v29, *((void *)v13 + 1), a1[2]);
            if (v26) {
              CFRelease(*((CFTypeRef *)v26 + 1));
            }
            if (v21) {
              CFRelease(*((CFTypeRef *)v21 + 1));
            }
            if (v15) {
              CFRelease(*((CFTypeRef *)v15 + 1));
            }
            v30 = (const void *)*((void *)v13 + 1);
            goto LABEL_99;
          }
LABEL_56:
          uint64_t v29 = 0;
          goto LABEL_18;
        }
LABEL_55:
        uint64_t v28 = 0;
        if (v15) {
          goto LABEL_17;
        }
        goto LABEL_56;
      }
      *(_DWORD *)v25 -= 2;
    }
    if (v26) {
      goto LABEL_15;
    }
    goto LABEL_54;
  }
  if (!a1[58])
  {
    v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))a1[11];
    if (!v50)
    {
LABEL_86:
      v72 = 0;
      (*(void (**)(void, WTF::StringImpl **))(*(void *)*a7 + 16))(*a7, &v72);
      v70 = v72;
      v72 = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2) {
          WTF::StringImpl::destroy(v70, v69);
        }
        else {
          *(_DWORD *)v70 -= 2;
        }
      }
      return;
    }
    uint64_t v51 = *(void *)(a2 + 8);
    v52 = *a3;
    if (*a3) {
      *(_DWORD *)v52 += 2;
    }
    v71 = v52;
    API::String::create(&v71, &v72);
    v54 = v71;
    v55 = v72;
    v71 = 0;
    v72 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::destroy(v54, v53);
        if (v55) {
          goto LABEL_64;
        }
        goto LABEL_102;
      }
      *(_DWORD *)v54 -= 2;
    }
    if (v55)
    {
LABEL_64:
      uint64_t v56 = *((void *)v55 + 1);
      goto LABEL_65;
    }
LABEL_102:
    uint64_t v56 = 0;
LABEL_65:
    v57 = *a4;
    if (*a4) {
      *(_DWORD *)v57 += 2;
    }
    v71 = v57;
    API::String::create(&v71, &v72);
    v59 = v71;
    v60 = v72;
    v71 = 0;
    v72 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::destroy(v59, v58);
        if (v60)
        {
LABEL_71:
          uint64_t v61 = *((void *)v60 + 1);
          if (a5)
          {
LABEL_72:
            uint64_t v62 = *(void *)(a5 + 8);
            goto LABEL_73;
          }
LABEL_105:
          uint64_t v62 = 0;
LABEL_73:
          v63 = (void *)v50(v51, v56, v61, v62, a1[2]);
          if (v63)
          {
            uint64_t v64 = objc_msgSend(v63, "_apiObject", v71);
            if (!v60) {
              goto LABEL_76;
            }
          }
          else
          {
            uint64_t v64 = 0;
            if (!v60)
            {
LABEL_76:
              if (v55) {
                CFRelease(*((CFTypeRef *)v55 + 1));
              }
              if (v64)
              {
                WTF::String::isolatedCopy();
                (*(void (**)(void, WTF::StringImpl **))(*(void *)*a7 + 16))(*a7, &v72);
                v66 = v72;
                v72 = 0;
                if (v66)
                {
                  if (*(_DWORD *)v66 == 2) {
                    WTF::StringImpl::destroy(v66, v65);
                  }
                  else {
                    *(_DWORD *)v66 -= 2;
                  }
                }
                v30 = *(const void **)(v64 + 8);
                goto LABEL_99;
              }
              goto LABEL_86;
            }
          }
          CFRelease(*((CFTypeRef *)v60 + 1));
          goto LABEL_76;
        }
LABEL_104:
        uint64_t v61 = 0;
        if (a5) {
          goto LABEL_72;
        }
        goto LABEL_105;
      }
      *(_DWORD *)v59 -= 2;
    }
    if (v60) {
      goto LABEL_71;
    }
    goto LABEL_104;
  }
  API::SecurityOrigin::create(&v72);
  uint64_t v31 = v72;
  uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))a1[58];
  uint64_t v33 = *(void *)(a2 + 8);
  uint64_t v34 = *a3;
  if (*a3) {
    *(_DWORD *)v34 += 2;
  }
  v71 = v34;
  API::String::create(&v71, &v72);
  uint64_t v36 = v71;
  v37 = v72;
  v71 = 0;
  v72 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::destroy(v36, v35);
      if (v37) {
        goto LABEL_32;
      }
      goto LABEL_90;
    }
    *(_DWORD *)v36 -= 2;
  }
  if (v37)
  {
LABEL_32:
    uint64_t v38 = *((void *)v37 + 1);
    goto LABEL_33;
  }
LABEL_90:
  uint64_t v38 = 0;
LABEL_33:
  v39 = *a4;
  if (*a4) {
    *(_DWORD *)v39 += 2;
  }
  v71 = v39;
  API::String::create(&v71, &v72);
  uint64_t v41 = v71;
  uint64_t v42 = v72;
  v71 = 0;
  v72 = 0;
  if (!v41)
  {
LABEL_38:
    if (v42) {
      goto LABEL_39;
    }
    goto LABEL_92;
  }
  if (*(_DWORD *)v41 != 2)
  {
    *(_DWORD *)v41 -= 2;
    goto LABEL_38;
  }
  WTF::StringImpl::destroy(v41, v40);
  if (v42)
  {
LABEL_39:
    uint64_t v43 = *((void *)v42 + 1);
    if (a5) {
      goto LABEL_40;
    }
LABEL_93:
    uint64_t v44 = 0;
    if (v31) {
      goto LABEL_41;
    }
    goto LABEL_94;
  }
LABEL_92:
  uint64_t v43 = 0;
  if (!a5) {
    goto LABEL_93;
  }
LABEL_40:
  uint64_t v44 = *(void *)(a5 + 8);
  if (v31)
  {
LABEL_41:
    uint64_t v45 = *((void *)v31 + 1);
    goto LABEL_42;
  }
LABEL_94:
  uint64_t v45 = 0;
LABEL_42:
  v46 = (void *)v32(v33, v38, v43, v44, v45, a1[2]);
  if (!v46)
  {
    uint64_t v47 = 0;
    if (!v42) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  uint64_t v47 = objc_msgSend(v46, "_apiObject", v71);
  if (v42) {
LABEL_44:
  }
    CFRelease(*((CFTypeRef *)v42 + 1));
LABEL_45:
  if (v37) {
    CFRelease(*((CFTypeRef *)v37 + 1));
  }
  if (v47)
  {
    WTF::String::isolatedCopy();
    (*(void (**)(void, WTF::StringImpl **))(*(void *)*a7 + 16))(*a7, &v72);
    v49 = v72;
    v72 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2) {
        WTF::StringImpl::destroy(v49, v48);
      }
      else {
        *(_DWORD *)v49 -= 2;
      }
    }
    CFRelease(*(CFTypeRef *)(v47 + 8));
LABEL_97:
    if (!v31) {
      return;
    }
    goto LABEL_98;
  }
  v72 = 0;
  (*(void (**)(void, WTF::StringImpl **))(*(void *)*a7 + 16))(*a7, &v72);
  v68 = v72;
  v72 = 0;
  if (!v68) {
    goto LABEL_97;
  }
  if (*(_DWORD *)v68 != 2)
  {
    *(_DWORD *)v68 -= 2;
    if (!v31) {
      return;
    }
    goto LABEL_98;
  }
  WTF::StringImpl::destroy(v68, v67);
  if (v31)
  {
LABEL_98:
    v30 = (const void *)*((void *)v31 + 1);
LABEL_99:
    CFRelease(v30);
  }
}

void WKPageSetPageUIClient::UIClient::setStatusText(WKPageSetPageUIClient::UIClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3)
{
  uint64_t v3 = (void (*)(uint64_t, void, void))*((void *)this + 12);
  if (v3)
  {
    if (a2) {
      uint64_t v5 = *((void *)a2 + 1);
    }
    else {
      uint64_t v5 = 0;
    }
    v6 = *a3;
    if (*a3) {
      *(_DWORD *)v6 += 2;
    }
    v10 = v6;
    API::String::create(&v10, &v11);
    v8 = v10;
    v9 = v11;
    v10 = 0;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v7);
        if (v9) {
          goto LABEL_10;
        }
        goto LABEL_13;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (v9)
    {
LABEL_10:
      v3(v5, *((void *)v9 + 1), *((void *)this + 2));
      CFRelease(*((CFTypeRef *)v9 + 1));
      return;
    }
LABEL_13:
    v3(v5, 0, *((void *)this + 2));
  }
}

void WKPageSetPageUIClient::UIClient::mouseDidMoveOverElement(uint64_t a1, WebKit::WebPageProxy *a2, const WebKit::WebHitTestResultData *a3, char a4, uint64_t a5)
{
  if (*(void *)(a1 + 344))
  {
    int v10 = *(_DWORD *)(a1 + 8);
    if (v10 > 0) {
      goto LABEL_7;
    }
  }
  else
  {
    if (!*(void *)(a1 + 104)) {
      return;
    }
    int v10 = *(_DWORD *)(a1 + 8);
    if (v10 > 0) {
      return;
    }
  }
  if (v10)
  {
LABEL_7:
    v11 = (API::HitTestResult *)API::Object::newObject(0x2B0uLL, 67);
    API::HitTestResult::HitTestResult(v11, a3, a2);
    if (v11) {
      uint64_t v12 = *((void *)v11 + 1);
    }
    else {
      uint64_t v12 = 0;
    }
    if (a5) {
      uint64_t v13 = *(void *)(a5 + 8);
    }
    else {
      uint64_t v13 = 0;
    }
    (*(void (**)(void, uint64_t, void, uint64_t, void))(a1 + 344))(*((void *)a2 + 1), v12, a4 & 0x1F, v13, *(void *)(a1 + 16));
    if (v11)
    {
      uint64_t v14 = (const void *)*((void *)v11 + 1);
      CFRelease(v14);
    }
    return;
  }
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 104);
  uint64_t v16 = *((void *)a2 + 1);
  uint64_t v17 = a4 & 0x1F;
  if (a5) {
    uint64_t v18 = *(void *)(a5 + 8);
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void *)(a1 + 16);

  v15(v16, v17, v18, v19);
}

uint64_t WKPageSetPageUIClient::UIClient::didNotHandleKeyEvent(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, void, void))(result + 120);
  if (v3)
  {
    if (a2) {
      uint64_t v4 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v4 = 0;
    }
    return v3(v4, *(void *)(a3 + 88), *(void *)(result + 16));
  }
  return result;
}

uint64_t WKPageSetPageUIClient::UIClient::didNotHandleWheelEvent(uint64_t result, uint64_t a2)
{
  v2 = *(uint64_t (**)(uint64_t, void, void))(result + 128);
  if (v2)
  {
    if (a2) {
      uint64_t v3 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v3 = 0;
    }
    return v2(v3, 0, *(void *)(result + 16));
  }
  return result;
}

uint64_t WKPageSetPageUIClient::UIClient::toolbarsAreVisible(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(void, void))(a1 + 136);
  if (v4)
  {
    v4(*(void *)(a2 + 8), *(void *)(a1 + 16));
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)a3 + 16);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)a3 + 16);
  }

  return v5();
}

uint64_t WKPageSetPageUIClient::UIClient::setToolbarsAreVisible(uint64_t this, WebKit::WebPageProxy *a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t (**)(void, uint64_t, void))(this + 144);
  if (v3) {
    return v3(*((void *)a2 + 1), a3, *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::menuBarIsVisible(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(void, void))(a1 + 152);
  if (v4)
  {
    v4(*(void *)(a2 + 8), *(void *)(a1 + 16));
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)a3 + 16);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)a3 + 16);
  }

  return v5();
}

uint64_t WKPageSetPageUIClient::UIClient::setMenuBarIsVisible(uint64_t this, WebKit::WebPageProxy *a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t (**)(void, uint64_t, void))(this + 160);
  if (v3) {
    return v3(*((void *)a2 + 1), a3, *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::statusBarIsVisible(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(void, void))(a1 + 168);
  if (v4)
  {
    v4(*(void *)(a2 + 8), *(void *)(a1 + 16));
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)a3 + 16);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)a3 + 16);
  }

  return v5();
}

uint64_t WKPageSetPageUIClient::UIClient::setStatusBarIsVisible(uint64_t this, WebKit::WebPageProxy *a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t (**)(void, uint64_t, void))(this + 176);
  if (v3) {
    return v3(*((void *)a2 + 1), a3, *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::setIsResizable(uint64_t this, WebKit::WebPageProxy *a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t (**)(void, uint64_t, void))(this + 192);
  if (v3) {
    return v3(*((void *)a2 + 1), a3, *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::setWindowFrame(uint64_t this, WebKit::WebPageProxy *a2, const FloatRect *a3)
{
  uint64_t v3 = *(uint64_t (**)(void, void, double, double, double, double))(this + 208);
  if (v3) {
    return v3(*((void *)a2 + 1), *(void *)(this + 16), a3->m_location.m_x, a3->m_location.m_y, a3->m_size.m_width, a3->m_size.m_height);
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::windowFrame(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  v8 = *(double (**)(void, void))(a1 + 200);
  if (v8)
  {
    a4.n128_f64[0] = v8(*(void *)(a2 + 8), *(void *)(a1 + 16));
    a4.n128_f32[0] = a4.n128_f64[0];
    a5.n128_f32[0] = a5.n128_f64[0];
    a6.n128_f32[0] = a6.n128_f64[0];
    a7.n128_f32[0] = a7.n128_f64[0];
    v9 = *(uint64_t (**)(__n128, __n128, __n128, __n128))(**(void **)a3 + 16);
  }
  else
  {
    v9 = *(uint64_t (**)(__n128, __n128, __n128, __n128))(**(void **)a3 + 16);
    a4.n128_u64[0] = 0;
    a5.n128_u64[0] = 0;
    a6.n128_u64[0] = 0;
    a7.n128_u64[0] = 0;
  }

  return v9(a4, a5, a6, a7);
}

BOOL WKPageSetPageUIClient::UIClient::canRunBeforeUnloadConfirmPanel(WKPageSetPageUIClient::UIClient *this)
{
  return *((void *)this + 27) || *((void *)this + 65) != 0;
}

void WKPageSetPageUIClient::UIClient::runBeforeUnloadConfirmPanel(void *a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a1[65])
  {
    uint64_t v11 = API::Object::newObject(0x18uLL, 97);
    *(void *)uint64_t v11 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v11);
    *(void *)uint64_t v11 = &unk_1EE9E13F0;
    uint64_t v12 = *a6;
    *a6 = 0;
    *(void *)(v11 + 16) = v12;
    uint64_t v13 = (void (*)(uint64_t, uint64_t, uint64_t, void, void))a1[65];
    uint64_t v14 = *(void *)(a2 + 8);
    uint64_t v15 = *a3;
    if (*a3) {
      *(_DWORD *)v15 += 2;
    }
    uint64_t v31 = v15;
    API::String::create(&v31, &v32);
    uint64_t v17 = v31;
    uint64_t v18 = v32;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v16);
        if (v18)
        {
LABEL_8:
          uint64_t v19 = *((void *)v18 + 1);
          if (a4)
          {
LABEL_9:
            uint64_t v20 = *(void *)(a4 + 8);
LABEL_10:
            v13(v14, v19, v20, *(void *)(v11 + 8), a1[2]);
            if (v18) {
              CFRelease(*((CFTypeRef *)v18 + 1));
            }
            CFRelease(*(CFTypeRef *)(v11 + 8));
            return;
          }
LABEL_28:
          uint64_t v20 = 0;
          goto LABEL_10;
        }
LABEL_27:
        uint64_t v19 = 0;
        if (a4) {
          goto LABEL_9;
        }
        goto LABEL_28;
      }
      *(_DWORD *)v17 -= 2;
    }
    if (v18) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))a1[27];
  if (v21)
  {
    uint64_t v22 = *(void *)(a2 + 8);
    v23 = *a3;
    if (*a3) {
      *(_DWORD *)v23 += 2;
    }
    uint64_t v31 = v23;
    API::String::create(&v31, &v32);
    v25 = v31;
    uint64_t v26 = v32;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v24);
        if (v26)
        {
LABEL_20:
          uint64_t v27 = *((void *)v26 + 1);
          if (a4)
          {
LABEL_21:
            uint64_t v28 = *(void *)(a4 + 8);
LABEL_22:
            uint64_t v29 = v21(v22, v27, v28, a1[2]);
            if (v26) {
              CFRelease(*((CFTypeRef *)v26 + 1));
            }
            (*(void (**)(void, uint64_t))(*(void *)*a6 + 16))(*a6, v29);
            return;
          }
LABEL_34:
          uint64_t v28 = 0;
          goto LABEL_22;
        }
LABEL_33:
        uint64_t v27 = 0;
        if (a4) {
          goto LABEL_21;
        }
        goto LABEL_34;
      }
      *(_DWORD *)v25 -= 2;
    }
    if (v26) {
      goto LABEL_20;
    }
    goto LABEL_33;
  }
  v30 = *(void (**)(void))(*(void *)*a6 + 16);

  v30();
}

uint64_t WKPageSetPageUIClient::UIClient::pageDidScroll(uint64_t this, WebKit::WebPageProxy *a2)
{
  v2 = *(uint64_t (**)(uint64_t, void))(this + 232);
  if (v2)
  {
    if (a2) {
      uint64_t v3 = *((void *)a2 + 1);
    }
    else {
      uint64_t v3 = 0;
    }
    return v2(v3, *(void *)(this + 16));
  }
  return this;
}

void WKPageSetPageUIClient::UIClient::exceededDatabaseQuota(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5, WTF::StringImpl **a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 240);
  if (v12)
  {
    if (a2)
    {
      uint64_t v29 = *(void *)(a2 + 8);
      if (a3)
      {
LABEL_4:
        uint64_t v28 = *(void *)(a3 + 8);
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v29 = 0;
      if (a3) {
        goto LABEL_4;
      }
    }
    uint64_t v28 = 0;
LABEL_5:
    if (a4) {
      uint64_t v15 = *(void *)(a4 + 8);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *a5;
    if (*a5) {
      *(_DWORD *)v16 += 2;
    }
    uint64_t v31 = v16;
    API::String::create(&v31, &v32);
    uint64_t v18 = v31;
    uint64_t v19 = v32;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v17);
        if (v19) {
          goto LABEL_13;
        }
        goto LABEL_30;
      }
      *(_DWORD *)v18 -= 2;
    }
    if (v19)
    {
LABEL_13:
      uint64_t v20 = *((void *)v19 + 1);
      goto LABEL_14;
    }
LABEL_30:
    uint64_t v20 = 0;
LABEL_14:
    uint64_t v21 = *a6;
    if (*a6) {
      *(_DWORD *)v21 += 2;
    }
    uint64_t v31 = v21;
    API::String::create(&v31, &v32);
    v23 = v31;
    v24 = v32;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::destroy(v23, v22);
        if (v24) {
          goto LABEL_20;
        }
        goto LABEL_32;
      }
      *(_DWORD *)v23 -= 2;
    }
    if (v24)
    {
LABEL_20:
      uint64_t v25 = *((void *)v24 + 1);
LABEL_21:
      uint64_t v26 = v12(v29, v28, v15, v20, v25, a7, a8, a9, a10, *(void *)(a1 + 16));
      (*(void (**)(void, uint64_t))(*(void *)*a11 + 16))(*a11, v26);
      if (v24) {
        CFRelease(*((CFTypeRef *)v24 + 1));
      }
      if (v19) {
        CFRelease(*((CFTypeRef *)v19 + 1));
      }
      return;
    }
LABEL_32:
    uint64_t v25 = 0;
    goto LABEL_21;
  }
  uint64_t v27 = *(void (**)(void))(*(void *)*a11 + 16);

  v27();
}

BOOL WKPageSetPageUIClient::UIClient::lockScreenOrientation(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(a1 + 632);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (a3 >= 4) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = a3;
    }
    v3(v4, v5);
  }
  return v3 != 0;
}

uint64_t WKPageSetPageUIClient::UIClient::unlockScreenOrientation(uint64_t this, WebKit::WebPageProxy *a2)
{
  v2 = *(uint64_t (**)(void))(this + 640);
  if (v2) {
    return v2(*((void *)a2 + 1));
  }
  return this;
}

BOOL WKPageSetPageUIClient::UIClient::runOpenPanel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 248);
  if (v6)
  {
    if (a3) {
      uint64_t v8 = *(void *)(a3 + 8);
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void *)(a2 + 8);
    if (a5)
    {
      uint64_t v10 = *(void *)(a5 + 8);
      if (a6)
      {
LABEL_6:
        uint64_t v11 = *(void *)(a6 + 8);
LABEL_7:
        v6(v9, v8, v10, v11, *(void *)(a1 + 16));
        return v6 != 0;
      }
    }
    else
    {
      uint64_t v10 = 0;
      if (a6) {
        goto LABEL_6;
      }
    }
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  return v6 != 0;
}

void WKPageSetPageUIClient::UIClient::decidePolicyForGeolocationPermissionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (*(void *)(a1 + 256))
  {
    API::SecurityOrigin::create(&v16);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(a1 + 256);
    uint64_t v10 = *(void *)(a2 + 8);
    uint64_t v11 = *(void *)(a3 + 8);
    if (v16) {
      uint64_t v12 = *(void *)(v16 + 8);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *a5;
    *a5 = 0;
    uint64_t v14 = API::Object::newObject(0x18uLL, 65);
    *(void *)uint64_t v14 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v14);
    *(void *)uint64_t v14 = &unk_1EE9E1418;
    *(void *)(v14 + 16) = v13;
    v9(v10, v11, v12, *(void *)(v14 + 8), *(void *)(a1 + 16));
    CFRelease(*(CFTypeRef *)(v14 + 8));
    uint64_t v15 = v16;
    uint64_t v16 = 0;
    if (v15) {
      CFRelease(*(CFTypeRef *)(v15 + 8));
    }
  }
}

WebKit::UserMediaPermissionRequestManagerProxy *WKPageSetPageUIClient::UIClient::decidePolicyForUserMediaPermissionRequest(WKPageSetPageUIClient::UIClient *this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, API::SecurityOrigin *a4, API::SecurityOrigin *a5, WebKit::UserMediaPermissionRequestProxy *a6)
{
  v6 = (uint64_t (*)(void, void, void, void, void, void))*((void *)this + 54);
  if (v6) {
    return (WebKit::UserMediaPermissionRequestManagerProxy *)v6(*((void *)a2 + 1), *((void *)a3 + 1), *((void *)a4 + 1), *((void *)a5 + 1), *((void *)a6 + 1), *((void *)this + 2));
  }
  else {
    return WebKit::UserMediaPermissionRequestProxy::deny(a6, 1);
  }
}

uint64_t WKPageSetPageUIClient::UIClient::checkUserMediaPermissionForOrigin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6 = *(uint64_t (**)(void, void, void, void, void, void))(a1 + 512);
  if (v6) {
    return v6(*(void *)(a2 + 8), *(void *)(a3 + 8), *(void *)(a4 + 8), *(void *)(a5 + 8), *(void *)(a6 + 8), *(void *)(a1 + 16));
  }
  else {
    return WebKit::UserMediaPermissionCheckProxy::complete(a6);
  }
}

void WKPageSetPageUIClient::UIClient::decidePolicyForNotificationPermissionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 352);
  if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = *(void *)(a3 + 8);
    uint64_t v9 = (WebKit *)API::Object::newObject(0x18uLL, 82);
    *(void *)uint64_t v9 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2(v9);
    *(void *)uint64_t v9 = &unk_1EE9E1440;
    uint64_t v10 = *a4;
    *a4 = 0;
    *((void *)v9 + 2) = v10;
    v5(v7, v8, *((void *)v9 + 1), *(void *)(a1 + 16));
    uint64_t v11 = (const void *)*((void *)v9 + 1);
    CFRelease(v11);
  }
  else
  {
    uint64_t v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
    uint64_t v13 = *(void (**)(uint64_t))(*(void *)v12 + 8);
    v13(v12);
  }
}

void WKPageSetPageUIClient::UIClient::requestStorageAccessConfirm(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, WTF::StringImpl **a5, uint64_t a6, uint64_t *a7)
{
  if (*(void *)(a1 + 584))
  {
    uint64_t v13 = API::Object::newObject(0x18uLL, 93);
    *(void *)uint64_t v13 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v13);
    *(void *)uint64_t v13 = &unk_1EE9E1468;
    uint64_t v14 = *a7;
    *a7 = 0;
    *(void *)(v13 + 16) = v14;
    if (a3) {
      uint64_t v15 = *(void *)(a3 + 8);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void, void))(a1 + 584);
    uint64_t v17 = *(void *)(a2 + 8);
    uint64_t v18 = *a4;
    if (*a4) {
      *(_DWORD *)v18 += 2;
    }
    uint64_t v29 = v18;
    API::String::create(&v29, &v30);
    uint64_t v20 = v29;
    uint64_t v21 = v30;
    uint64_t v29 = 0;
    v30 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v19);
        if (v21) {
          goto LABEL_10;
        }
        goto LABEL_24;
      }
      *(_DWORD *)v20 -= 2;
    }
    if (v21)
    {
LABEL_10:
      uint64_t v22 = *((void *)v21 + 1);
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v22 = 0;
LABEL_11:
    v23 = *a5;
    if (*a5) {
      *(_DWORD *)v23 += 2;
    }
    uint64_t v29 = v23;
    API::String::create(&v29, &v30);
    uint64_t v25 = v29;
    uint64_t v26 = v30;
    uint64_t v29 = 0;
    v30 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v24);
        if (v26)
        {
LABEL_17:
          v16(v17, v15, v22, *((void *)v26 + 1), *(void *)(v13 + 8), *(void *)(a1 + 16));
          CFRelease(*((CFTypeRef *)v26 + 1));
          if (!v21)
          {
LABEL_19:
            CFRelease(*(CFTypeRef *)(v13 + 8));
            return;
          }
LABEL_18:
          CFRelease(*((CFTypeRef *)v21 + 1));
          goto LABEL_19;
        }
LABEL_26:
        v16(v17, v15, v22, 0, *(void *)(v13 + 8), *(void *)(a1 + 16));
        if (!v21) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
      *(_DWORD *)v25 -= 2;
    }
    if (v26) {
      goto LABEL_17;
    }
    goto LABEL_26;
  }
  uint64_t v27 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, 1);
  uint64_t v28 = *(void (**)(uint64_t))(*(void *)v27 + 8);

  v28(v27);
}

double WKPageSetPageUIClient::UIClient::headerHeight(WKPageSetPageUIClient::UIClient *this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3)
{
  uint64_t v3 = (void (*)(void, void, void))*((void *)this + 33);
  if (!v3) {
    return 0.0;
  }
  v3(*((void *)a2 + 1), *((void *)a3 + 1), *((void *)this + 2));
  return result;
}

double WKPageSetPageUIClient::UIClient::footerHeight(WKPageSetPageUIClient::UIClient *this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3)
{
  uint64_t v3 = (void (*)(void, void, void))*((void *)this + 34);
  if (!v3) {
    return 0.0;
  }
  v3(*((void *)a2 + 1), *((void *)a3 + 1), *((void *)this + 2));
  return result;
}

uint64_t WKPageSetPageUIClient::UIClient::drawHeader(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4 = *(uint64_t (**)(void, void, void, double, double, double, double))(result + 280);
  if (v4) {
    return v4(*(void *)(a2 + 8), *(void *)(a3 + 8), *(void *)(result + 16), *a4, a4[1], a4[2], a4[3]);
  }
  return result;
}

uint64_t WKPageSetPageUIClient::UIClient::drawFooter(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4 = *(uint64_t (**)(void, void, void, double, double, double, double))(result + 288);
  if (v4) {
    return v4(*(void *)(a2 + 8), *(void *)(a3 + 8), *(void *)(result + 16), *a4, a4[1], a4[2], a4[3]);
  }
  return result;
}

uint64_t WKPageSetPageUIClient::UIClient::printFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  v6 = *(void (**)(void, void, void))(a1 + 296);
  if (v6) {
    v6(*(void *)(a2 + 8), *(void *)(a3 + 8), *(void *)(a1 + 16));
  }
  uint64_t v7 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v8(v7);
}

BOOL WKPageSetPageUIClient::UIClient::canRunModal(WKPageSetPageUIClient::UIClient *this)
{
  return *((void *)this + 38) != 0;
}

uint64_t WKPageSetPageUIClient::UIClient::runModal(uint64_t this, WebKit::WebPageProxy *a2)
{
  v2 = *(uint64_t (**)(void, void))(this + 304);
  if (v2) {
    return v2(*((void *)a2 + 1), *(void *)(this + 16));
  }
  return this;
}

void WKPageSetPageUIClient::UIClient::saveDataToFileInDownloadsFolder(WKPageSetPageUIClient::UIClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3, WTF::StringImpl **a4, WTF::StringImpl **a5, API::Data *a6)
{
  v6 = (void (*)(uint64_t, uint64_t, uint64_t, void, void, void))*((void *)this + 40);
  if (v6)
  {
    if (a2) {
      uint64_t v11 = *((void *)a2 + 1);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *a3;
    if (*a3) {
      *(_DWORD *)v12 += 2;
    }
    uint64_t v26 = v12;
    API::String::create(&v26, &v27);
    uint64_t v14 = v26;
    uint64_t v15 = v27;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v13);
        if (v15) {
          goto LABEL_10;
        }
        goto LABEL_22;
      }
      *(_DWORD *)v14 -= 2;
    }
    if (v15)
    {
LABEL_10:
      uint64_t v16 = *((void *)v15 + 1);
      goto LABEL_11;
    }
LABEL_22:
    uint64_t v16 = 0;
LABEL_11:
    uint64_t v17 = *a4;
    if (*a4) {
      *(_DWORD *)v17 += 2;
    }
    uint64_t v26 = v17;
    API::String::create(&v26, &v27);
    uint64_t v19 = v26;
    uint64_t v20 = v27;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v18);
        if (v20) {
          goto LABEL_17;
        }
        goto LABEL_24;
      }
      *(_DWORD *)v19 -= 2;
    }
    if (v20)
    {
LABEL_17:
      uint64_t v21 = *((void *)v20 + 1);
      goto LABEL_18;
    }
LABEL_24:
    uint64_t v21 = 0;
LABEL_18:
    uint64_t v22 = *a5;
    if (*a5)
    {
      *(_DWORD *)v22 += 2;
      uint64_t v23 = API::Object::newObject(0x20uLL, 24);
      *(void *)uint64_t v23 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2((WebKit *)v23);
      *(void *)uint64_t v23 = &unk_1EE9B53A8;
      int v25 = *(_DWORD *)v22;
      *(_DWORD *)v22 += 2;
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      if (v25) {
        *(_DWORD *)uint64_t v22 = v25;
      }
      else {
        WTF::StringImpl::destroy(v22, v24);
      }
      v6(v11, v16, v21, *(void *)(v23 + 8), *((void *)a6 + 1), *((void *)this + 2));
      CFRelease(*(CFTypeRef *)(v23 + 8));
      if (!v20) {
        goto LABEL_28;
      }
    }
    else
    {
      v6(v11, v16, v21, 0, *((void *)a6 + 1), *((void *)this + 2));
      if (!v20)
      {
LABEL_28:
        if (v15) {
          CFRelease(*((CFTypeRef *)v15 + 1));
        }
        return;
      }
    }
    CFRelease(*((CFTypeRef *)v20 + 1));
    goto LABEL_28;
  }
}

uint64_t WKPageSetPageUIClient::UIClient::pinnedStateDidChange(uint64_t this, WebKit::WebPageProxy *a2)
{
  v2 = *(uint64_t (**)(void, void))(this + 392);
  if (v2) {
    return v2(*((void *)a2 + 1), *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::isPlayingMediaDidChange(uint64_t this, WebKit::WebPageProxy *a2)
{
  v2 = *(uint64_t (**)(void, void))(this + 424);
  if (v2) {
    return v2(*((void *)a2 + 1), *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::handleAutoplayEvent(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *(uint64_t (**)(void, uint64_t, void, void))(result + 552);
  if (v4)
  {
    if (a3 >= 4)
    {
      double result = 2140;
      __break(0xC471u);
    }
    else
    {
      return v4(*(void *)(a2 + 8), a3, a4 & 7, *(void *)(result + 16));
    }
  }
  return result;
}

void WKPageSetPageUIClient::UIClient::shouldAllowDeviceOrientationAndMotionAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (*(void *)(a1 + 592))
  {
    WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(void *)(a2 + 32) + 1000), &v21);
    WebCore::SecurityOrigin::createFromString((uint64_t *)&v22, (WebCore::SecurityOrigin *)&v21, v9);
    API::SecurityOrigin::create(&v23);
    uint64_t v11 = v22;
    uint64_t v22 = 0;
    if (v11) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v11, v10);
    }
    uint64_t v12 = v21;
    uint64_t v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    CFRetain(*(CFTypeRef *)(a2 + 8));
    uint64_t v22 = (WTF *)a2;
    uint64_t v15 = API::Object::newObject(0x140uLL, 60);
    API::FrameInfo::FrameInfo(v15, a4, (uint64_t *)&v22);
    if (v22) {
      CFRelease(*((CFTypeRef *)v22 + 1));
    }
    if (v23)
    {
      uint64_t v16 = *(void *)(v23 + 8);
      if (v15)
      {
LABEL_15:
        uint64_t v17 = *(void *)(v15 + 8);
LABEL_16:
        uint64_t v18 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(a1 + 592))(*(void *)(a2 + 8), v16, v17, *(void *)(a1 + 16));
        uint64_t v19 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v18);
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
        if (v15) {
          CFRelease(*(CFTypeRef *)(v15 + 8));
        }
        uint64_t v20 = v23;
        uint64_t v23 = 0;
        if (v20) {
          CFRelease(*(CFTypeRef *)(v20 + 8));
        }
        return;
      }
    }
    else
    {
      uint64_t v16 = 0;
      if (v15) {
        goto LABEL_15;
      }
    }
    uint64_t v17 = 0;
    goto LABEL_16;
  }
  uint64_t v13 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v13 + 16))(v13, 0);
  uint64_t v14 = *(void (**)(uint64_t))(*(void *)v13 + 8);

  v14(v13);
}

uint64_t WKPageSetPageUIClient::UIClient::didClickAutoFillButton(uint64_t this, WebKit::WebPageProxy *a2, API::Object *a3)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(this + 440);
  if (v3)
  {
    uint64_t v4 = *((void *)a2 + 1);
    if (a3) {
      uint64_t v5 = *((void *)a3 + 1);
    }
    else {
      uint64_t v5 = 0;
    }
    return v3(v4, v5, *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::didResignInputElementStrongPasswordAppearance(uint64_t this, WebKit::WebPageProxy *a2, API::Object *a3)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(this + 576);
  if (v3)
  {
    uint64_t v4 = *((void *)a2 + 1);
    if (a3) {
      uint64_t v5 = *((void *)a3 + 1);
    }
    else {
      uint64_t v5 = 0;
    }
    return v3(v4, v5, *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::runWebAuthenticationPanel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  if (*(void *)(a1 + 600))
  {
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)8);
    void *v8 = &unk_1EE9E1490;
    uint64_t v9 = *(void *)(a3 + 32);
    *(void *)(a3 + 32) = v8;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v10 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, 1);
  }
  else
  {
    uint64_t v10 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v10 + 16))(v10, 0);
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);

  return v11(v10);
}

void WKPageSetPageUIClient::UIClient::decidePolicyForMediaKeySystemPermissionRequest(uint64_t a1, uint64_t a2, uint64_t a3, API::String *this, uint64_t *a5)
{
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 616);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = *(void *)(a3 + 8);
    API::String::create(&v15);
    if (v15) {
      uint64_t v9 = *((void *)v15 + 1);
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = API::Object::newObject(0x18uLL, 130);
    *(void *)uint64_t v10 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v10);
    *(void *)uint64_t v10 = &unk_1EE9E14E0;
    uint64_t v11 = *a5;
    *a5 = 0;
    *(void *)(v10 + 16) = v11;
    v6(v7, v8, v9, *(void *)(v10 + 8));
    CFRelease(*(CFTypeRef *)(v10 + 8));
    uint64_t v12 = v15;
    uint64_t v15 = 0;
    if (v12) {
      CFRelease(*((CFTypeRef *)v12 + 1));
    }
  }
  else
  {
    uint64_t v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void, uint64_t, API::String *))(*(void *)v13 + 16))(v13, 0, a3, this);
    uint64_t v14 = *(void (**)(uint64_t))(*(void *)v13 + 8);
    v14(v13);
  }
}

void WKPageSetPageUIClient::UIClient::queryPermission(uint64_t a1, API::String *this, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void))(a1 + 624);
  if (v5)
  {
    API::String::create(&v14);
    if (v14) {
      uint64_t v7 = *((void *)v14 + 1);
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void *)(a3 + 8);
    uint64_t v9 = API::Object::newObject(0x18uLL, 131);
    *(void *)uint64_t v9 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v9);
    *(void *)uint64_t v9 = &unk_1EE9E1508;
    uint64_t v10 = *a4;
    *a4 = 0;
    *(void *)(v9 + 16) = v10;
    v5(v7, v8, *(void *)(v9 + 8));
    CFRelease(*(CFTypeRef *)(v9 + 8));
    uint64_t v11 = v14;
    uint64_t v14 = 0;
    if (v11) {
      CFRelease(*((CFTypeRef *)v11 + 1));
    }
  }
  else
  {
    uint64_t v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
    uint64_t v13 = *(void (**)(uint64_t))(*(void *)v12 + 8);
    v13(v12);
  }
}

void WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a3 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a3);
  }
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v14 = v11 & v9;
    uint64_t v15 = (uint64_t *)(v8 + 16 * v14);
    uint64_t v16 = (WTF *)*v15;
    if (*v15 != -1) {
      break;
    }
    uint64_t v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *uint64_t v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v15 = v12;
    }
    WTF::String::operator=(v15, (uint64_t *)a3);
    uint64_t v17 = *a4;
    *a4 = 0;
    uint64_t v18 = v15[1];
    v15[1] = v17;
    if (v18) {
      CFRelease(*(CFTypeRef *)(v18 + 8));
    }
    uint64_t v19 = *a2;
    if (*a2) {
      int v20 = *(_DWORD *)(v19 - 12) + 1;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(v19 - 12) = v20;
    uint64_t v21 = *a2;
    if (*a2) {
      int v22 = *(_DWORD *)(v21 - 12);
    }
    else {
      int v22 = 0;
    }
    uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
    unint64_t v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 <= 2 * v23)
      {
LABEL_24:
        uint64_t v15 = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, (uint64_t)v15);
        uint64_t v21 = *a2;
        if (*a2) {
          unint64_t v24 = *(unsigned int *)(v21 - 4);
        }
        else {
          unint64_t v24 = 0;
        }
      }
    }
    else if (3 * v24 <= 4 * v23)
    {
      goto LABEL_24;
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v21 + 16 * v24;
    *(unsigned char *)(a1 + 16) = 1;
    return;
  }
  if (!WTF::equal(v16, *a3, (const WTF::StringImpl *)a3)) {
    goto LABEL_13;
  }
  uint64_t v25 = *a2;
  if (*a2) {
    uint64_t v26 = *(unsigned int *)(v25 - 4);
  }
  else {
    uint64_t v26 = 0;
  }
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = v25 + 16 * v26;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v27 = v8 + 16 * v14;
  uint64_t v28 = *a4;
  *a4 = 0;
  uint64_t v29 = *(void *)(v27 + 8);
  *(void *)(v27 + 8) = v28;
  if (v29)
  {
    v30 = *(const void **)(v29 + 8);
    CFRelease(v30);
  }
}

void WebKit::RunJavaScriptAlertResultListener::~RunJavaScriptAlertResultListener(WebKit::RunJavaScriptAlertResultListener *this)
{
  *(void *)this = &unk_1EE9E1378;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE9E1378;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)98>::type()
{
  return 98;
}

void WebKit::RunJavaScriptConfirmResultListener::~RunJavaScriptConfirmResultListener(WebKit::RunJavaScriptConfirmResultListener *this)
{
  *(void *)this = &unk_1EE9E13A0;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE9E13A0;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)99>::type()
{
  return 99;
}

void WebKit::RunJavaScriptPromptResultListener::~RunJavaScriptPromptResultListener(WebKit::RunJavaScriptPromptResultListener *this)
{
  *(void *)this = &unk_1EE9E13C8;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE9E13C8;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)100>::type()
{
  return 100;
}

void WebKit::RunBeforeUnloadConfirmPanelResultListener::~RunBeforeUnloadConfirmPanelResultListener(WebKit::RunBeforeUnloadConfirmPanelResultListener *this)
{
  *(void *)this = &unk_1EE9E13F0;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE9E13F0;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)97>::type()
{
  return 97;
}

void WebKit::GeolocationPermissionRequest::~GeolocationPermissionRequest(WebKit::GeolocationPermissionRequest *this)
{
  *(void *)this = &unk_1EE9E1418;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE9E1418;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)65>::type()
{
  return 65;
}

void WebKit::NotificationPermissionRequest::~NotificationPermissionRequest(WebKit::NotificationPermissionRequest *this)
{
  WebKit::NotificationPermissionRequest::~NotificationPermissionRequest(this);

  JUMPOUT(0x199740C10);
}

{
  uint64_t v2;

  *(void *)this = &unk_1EE9E1440;
  WebKit::NotificationPermissionRequest::didReceiveDecision((uint64_t)this);
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

uint64_t API::ObjectImpl<(API::Object::Type)82>::type()
{
  return 82;
}

void WebKit::RequestStorageAccessConfirmResultListener::~RequestStorageAccessConfirmResultListener(WebKit::RequestStorageAccessConfirmResultListener *this)
{
  *(void *)this = &unk_1EE9E1468;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE9E1468;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)93>::type()
{
  return 93;
}

void WKPageSetPageUIClient::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::PanelClient::selectAssertionResponse(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
  if (*((_DWORD *)a2 + 3))
  {
    uint64_t v4 = **a2;
    uint64_t v5 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v4);
    v6 = *(void (**)(uint64_t))(*(void *)v5 + 8);
    v6(v5);
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WKPageSetPageUIClient::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::PanelClient::decidePolicyForLocalAuthenticator(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 0);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void WebKit::MediaKeySystemPermissionCallback::~MediaKeySystemPermissionCallback(WebKit::MediaKeySystemPermissionCallback *this)
{
  *(void *)this = &unk_1EE9E14E0;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE9E14E0;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)130>::type()
{
  return 130;
}

void WebKit::QueryPermissionResultCallback::~QueryPermissionResultCallback(WebKit::QueryPermissionResultCallback *this)
{
  WebKit::QueryPermissionResultCallback::~QueryPermissionResultCallback(this);

  JUMPOUT(0x199740C10);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1EE9E1508;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 0);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v3 = *((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
}

uint64_t API::ObjectImpl<(API::Object::Type)131>::type()
{
  return 131;
}

void StateClient::~StateClient(unsigned int **this, void *a2)
{
}

{
  void *v3;
  uint64_t vars8;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);

  WTF::fastFree((WTF *)this, v3);
}

uint64_t StateClient::willChangeIsLoading(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 32);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::didChangeIsLoading(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 40);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::willChangeTitle(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 48);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::didChangeTitle(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 56);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::willChangeActiveURL(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 64);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::didChangeActiveURL(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 72);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::willChangeHasOnlySecureContent(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 80);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::didChangeHasOnlySecureContent(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 88);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::willChangeEstimatedProgress(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 96);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::didChangeEstimatedProgress(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 104);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::willChangeCanGoBack(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 112);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::didChangeCanGoBack(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 120);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::willChangeCanGoForward(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 128);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::didChangeCanGoForward(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 136);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::willChangeNetworkRequestsInProgress(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 144);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::didChangeNetworkRequestsInProgress(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 152);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::willChangeCertificateInfo(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 160);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::didChangeCertificateInfo(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 168);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::willChangeWebProcessIsResponsive(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 176);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::didChangeWebProcessIsResponsive(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 184);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

uint64_t StateClient::didSwapWebProcesses(uint64_t this)
{
  v1 = *(uint64_t (**)(void))(this + 192);
  if (v1) {
    return v1(*(void *)(this + 24));
  }
  return this;
}

void WTF::Detail::CallableWrapper<toStringCallback(void *,void (*)(OpaqueWKString const*,OpaqueWKError const*,void *))::$_0,void,WTF::String const&>::call(uint64_t a1, API::String *this)
{
  uint64_t v3 = *(void (**)(uint64_t, void, void))(a1 + 16);
  API::String::create(&v6);
  if (v6) {
    uint64_t v4 = *((void *)v6 + 1);
  }
  else {
    uint64_t v4 = 0;
  }
  v3(v4, 0, *(void *)(a1 + 8));
  uint64_t v5 = v6;
  v6 = 0;
  if (v5) {
    CFRelease(*((CFTypeRef *)v5 + 1));
  }
}

uint64_t WTF::Detail::CallableWrapper<WKPageCopySessionState::$_0,BOOL,WebKit::WebBackForwardListItem &>::call(void *a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t, void, void))a1[3];
  if (!v2) {
    return 1;
  }
  uint64_t v5 = a1[1];
  uint64_t SessionBackForwardListItemValueType = WKPageGetSessionBackForwardListItemValueType();
  uint64_t result = v2(v5, SessionBackForwardListItemValueType, *(void *)(a2 + 8), a1[2]);
  if (!result) {
    return result;
  }
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void, void))a1[3];
  uint64_t v9 = a1[1];
  uint64_t SessionHistoryURLValueType = WKPageGetSessionHistoryURLValueType();
  unsigned int v11 = *(WTF::StringImpl **)(a2 + 64);
  if (!v11) {
    return (v8(v9, SessionHistoryURLValueType, 0, a1[2]) & 1) != 0;
  }
  *(_DWORD *)v11 += 2;
  uint64_t v12 = API::Object::newObject(0x20uLL, 24);
  *(void *)uint64_t v12 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v12);
  *(void *)uint64_t v12 = &unk_1EE9B53A8;
  int v14 = *(_DWORD *)v11;
  *(_DWORD *)v11 += 2;
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = 0;
  if (v14) {
    *(_DWORD *)unsigned int v11 = v14;
  }
  else {
    WTF::StringImpl::destroy(v11, v13);
  }
  int v15 = v8(v9, SessionHistoryURLValueType, *(void *)(v12 + 8), a1[2]);
  CFRelease(*(CFTypeRef *)(v12 + 8));
  return v15 != 0;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didStartProvisionalNavigation(uint64_t this, WebKit::WebPageProxy *a2, const ResourceRequest *a3, Navigation *a4, API::Object *a5)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(this + 48);
  if (v5)
  {
    uint64_t v6 = *((void *)a2 + 1);
    if (a4)
    {
      uint64_t v7 = *((void *)a4 + 1);
      if (a5)
      {
LABEL_4:
        uint64_t v8 = *((void *)a5 + 1);
        return v5(v6, v7, v8, *(void *)(this + 16));
      }
    }
    else
    {
      uint64_t v7 = 0;
      if (a5) {
        goto LABEL_4;
      }
    }
    uint64_t v8 = 0;
    return v5(v6, v7, v8, *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didReceiveServerRedirectForProvisionalNavigation(uint64_t this, WebKit::WebPageProxy *a2, Navigation *a3, API::Object *a4)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(this + 56);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 1);
    if (a3)
    {
      uint64_t v6 = *((void *)a3 + 1);
      if (a4)
      {
LABEL_4:
        uint64_t v7 = *((void *)a4 + 1);
        return v4(v5, v6, v7, *(void *)(this + 16));
      }
    }
    else
    {
      uint64_t v6 = 0;
      if (a4) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = 0;
    return v4(v5, v6, v7, *(void *)(this + 16));
  }
  return this;
}

void WKPageSetPageNavigationClient::NavigationClient::didFailProvisionalNavigationWithError(void *a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, const WebCore::ResourceError *a6, uint64_t a7)
{
  if (*a3)
  {
    unsigned int v11 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))a1[8];
    if (!v11) {
      return;
    }
    if (a4) {
      uint64_t v12 = *(void *)(a4 + 8);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void *)(a2 + 8);
    int v14 = (API::Error *)API::Object::newObject(0x60uLL, 10);
    if (API::Error::Error(v14, a6))
    {
      uint64_t v15 = *((void *)v14 + 1);
      if (a7)
      {
LABEL_7:
        uint64_t v16 = *(void *)(a7 + 8);
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v15 = 0;
      if (a7) {
        goto LABEL_7;
      }
    }
    uint64_t v16 = 0;
LABEL_8:
    v11(v13, v12, v15, v16, a1[2]);
    if (v14)
    {
      uint64_t v17 = (const void *)*((void *)v14 + 1);
      CFRelease(v17);
    }
    return;
  }
  uint64_t v18 = (void (*)(uint64_t, uint64_t, uint64_t, CFTypeRef, uint64_t, void))a1[12];
  if (!v18) {
    return;
  }
  uint64_t v20 = *(void *)(a2 + 8);
  if (a4) {
    uint64_t v21 = *(void *)(a4 + 8);
  }
  else {
    uint64_t v21 = 0;
  }
  CFRetain(*(CFTypeRef *)(a2 + 8));
  uint64_t v27 = a2;
  uint64_t v22 = API::Object::newObject(0x140uLL, 60);
  if (API::FrameInfo::FrameInfo(v22, (uint64_t)a3, &v27)) {
    uint64_t v23 = *(void *)(v22 + 8);
  }
  else {
    uint64_t v23 = 0;
  }
  unint64_t v24 = (CFTypeRef *)API::Object::newObject(0x60uLL, 10);
  if (!API::Error::Error((API::Error *)v24, a6))
  {
    CFTypeRef v25 = 0;
    if (a7) {
      goto LABEL_19;
    }
LABEL_33:
    uint64_t v26 = 0;
    goto LABEL_20;
  }
  CFTypeRef v25 = v24[1];
  if (!a7) {
    goto LABEL_33;
  }
LABEL_19:
  uint64_t v26 = *(void *)(a7 + 8);
LABEL_20:
  v18(v20, v21, v23, v25, v26, a1[2]);
  if (v24) {
    CFRelease(v24[1]);
  }
  if (v22) {
    CFRelease(*(CFTypeRef *)(v22 + 8));
  }
  if (v27) {
    CFRelease(*(CFTypeRef *)(v27 + 8));
  }
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didCommitNavigation(uint64_t this, WebKit::WebPageProxy *a2, Navigation *a3, API::Object *a4)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(this + 72);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 1);
    if (a3)
    {
      uint64_t v6 = *((void *)a3 + 1);
      if (a4)
      {
LABEL_4:
        uint64_t v7 = *((void *)a4 + 1);
        return v4(v5, v6, v7, *(void *)(this + 16));
      }
    }
    else
    {
      uint64_t v6 = 0;
      if (a4) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = 0;
    return v4(v5, v6, v7, *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didFinishDocumentLoad(uint64_t this, WebKit::WebPageProxy *a2, Navigation *a3, API::Object *a4)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(this + 104);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 1);
    if (a3)
    {
      uint64_t v6 = *((void *)a3 + 1);
      if (a4)
      {
LABEL_4:
        uint64_t v7 = *((void *)a4 + 1);
        return v4(v5, v6, v7, *(void *)(this + 16));
      }
    }
    else
    {
      uint64_t v6 = 0;
      if (a4) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = 0;
    return v4(v5, v6, v7, *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didFinishNavigation(uint64_t this, WebKit::WebPageProxy *a2, Navigation *a3, API::Object *a4)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(this + 80);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 1);
    if (a3)
    {
      uint64_t v6 = *((void *)a3 + 1);
      if (a4)
      {
LABEL_4:
        uint64_t v7 = *((void *)a4 + 1);
        return v4(v5, v6, v7, *(void *)(this + 16));
      }
    }
    else
    {
      uint64_t v6 = 0;
      if (a4) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = 0;
    return v4(v5, v6, v7, *(void *)(this + 16));
  }
  return this;
}

void WKPageSetPageNavigationClient::NavigationClient::didFailNavigationWithError(WKPageSetPageNavigationClient::NavigationClient *this, WebKit::WebPageProxy *a2, const FrameInfoData *a3, Navigation *a4, const WTF::URL *a5, const WebCore::ResourceError *a6, API::Object *a7)
{
  uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))*((void *)this + 11);
  if (!v7) {
    return;
  }
  if (a4) {
    uint64_t v11 = *((void *)a4 + 1);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *((void *)a2 + 1);
  uint64_t v13 = (API::Error *)API::Object::newObject(0x60uLL, 10);
  if (API::Error::Error(v13, a6))
  {
    uint64_t v14 = *((void *)v13 + 1);
    if (a7)
    {
LABEL_6:
      uint64_t v15 = *((void *)a7 + 1);
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v14 = 0;
    if (a7) {
      goto LABEL_6;
    }
  }
  uint64_t v15 = 0;
LABEL_7:
  v7(v12, v11, v14, v15, *((void *)this + 2));
  if (v13)
  {
    uint64_t v16 = (const void *)*((void *)v13 + 1);
    CFRelease(v16);
  }
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didSameDocumentNavigation(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(result + 112);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    if (a3) {
      uint64_t v7 = *(void *)(a3 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    if ((a4 - 1) < 3) {
      uint64_t v8 = (a4 - 1) + 1;
    }
    else {
      uint64_t v8 = 0;
    }
    if (a5) {
      uint64_t v9 = *(void *)(a5 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
    return v5(v6, v7, v8, v9, *(void *)(result + 16));
  }
  return result;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::renderingProgressDidChange(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(uint64_t (**)(void, void, void, void))(result + 120);
  if (v3) {
    return v3(*(void *)(a2 + 8), (a3 >> 3) & 8 | a3 & 0x137, 0, *(void *)(result + 16));
  }
  return result;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::navigationResponseDidBecomeDownload(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t (**)(void, void, void, void))(result + 224);
  if (v4) {
    return v4(*(void *)(a2 + 8), *(void *)(a3 + 8), *(void *)(a4 + 8), *(void *)(result + 16));
  }
  return result;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::navigationActionDidBecomeDownload(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t (**)(void, void, void, void))(result + 216);
  if (v4) {
    return v4(*(void *)(a2 + 8), *(void *)(a3 + 8), *(void *)(a4 + 8), *(void *)(result + 16));
  }
  return result;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::contextMenuDidCreateDownload(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t (**)(void, void, void))(result + 232);
  if (v3) {
    return v3(*(void *)(a2 + 8), *(void *)(a3 + 8), *(void *)(result + 16));
  }
  return result;
}

WTF::StringImpl *WKPageSetPageNavigationClient::NavigationClient::didReceiveAuthenticationChallenge(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (uint64_t (*)(uint64_t, void, void))a1[16];
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)(a3 + 2));
    uint64_t v9 = API::Object::newObject(0x30uLL, 14);
    if (WebKit::WebProtectionSpace::WebProtectionSpace(v9, v8))
    {
      char v10 = v6(v7, *(void *)(v9 + 8), a1[2]);
      CFRelease(*(CFTypeRef *)(v9 + 8));
      if ((v10 & 1) == 0) {
        goto LABEL_10;
      }
    }
    else if ((v6(v7, 0, a1[2]) & 1) == 0)
    {
      goto LABEL_10;
    }
  }
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))a1[17];
  if (v11)
  {
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v13 = a3[1];
    uint64_t v14 = a1[2];
    return (WTF::StringImpl *)v11(v12, v13, v14);
  }
LABEL_10:
  uint64_t v16 = a3[58];
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v20);
  CFTypeRef cf = 0;
  WebKit::AuthenticationDecisionListener::completeChallenge(v16);
  CFTypeRef v18 = cf;
  CFTypeRef cf = 0;
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = v21;
  uint64_t v21 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v17);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::processDidTerminate(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = (void (*)(uint64_t, uint64_t, void))a1[24];
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (a3 > 0xC) {
      uint64_t v5 = 3;
    }
    else {
      uint64_t v5 = dword_1994F7600[(char)a3];
    }
    v3(v4, v5, a1[2]);
    return 1;
  }
  uint64_t v6 = 0;
  if (a3 != 2)
  {
    uint64_t v7 = (void (*)(void, void))a1[18];
    if (v7)
    {
      v7(*(void *)(a2 + 8), a1[2]);
      return 1;
    }
  }
  return v6;
}

void WKPageSetPageNavigationClient::NavigationClient::legacyWebCryptoMasterKey(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (uint64_t (*)(void, void))a1[19];
  if (v4 && (a1 = (void *)v4(*(void *)(a2 + 8), a1[2])) != 0)
  {
    uint64_t v5 = [a1 _apiObject];
    uint64_t v6 = v5;
    unint64_t v7 = *(void *)(v5 + 24);
    if (v7)
    {
      if (HIDWORD(v7))
      {
        __break(0xC471u);
        return;
      }
      uint64_t v8 = *(void *)(v5 + 16);
      uint64_t v9 = (WTF *)WTF::fastMalloc(*(WTF **)(v5 + 24));
      for (uint64_t i = 0; i != v7; ++i)
        *((unsigned char *)v9 + i) = *(unsigned char *)(v8 + i);
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v17 = v9;
    int v18 = v7;
    int v19 = v7;
    char v20 = 1;
    uint64_t v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF **))(*(void *)v11 + 16))(v11, &v17);
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    if (v20)
    {
      uint64_t v15 = v17;
      if (v17)
      {
        uint64_t v17 = 0;
        int v18 = 0;
        WTF::fastFree(v15, v12);
      }
    }
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  else
  {
    WebCore::defaultWebCryptoMasterKey((uint64_t *)&v17, (WebCore *)a1);
    uint64_t v13 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF **))(*(void *)v13 + 16))(v13, &v17);
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    if (v20)
    {
      uint64_t v16 = v17;
      if (v17)
      {
        uint64_t v17 = 0;
        int v18 = 0;
        WTF::fastFree(v16, v14);
      }
    }
  }
}

void WKPageSetPageNavigationClient::NavigationClient::decidePolicyForNavigationAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(a1 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    if (*(void *)a3) {
      uint64_t v6 = *(void *)(*(void *)a3 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    if (*a4) {
      uint64_t v7 = *(void *)(*a4 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    v4(v5, v6, v7, 0, *(void *)(a1 + 16));
  }
  else
  {
    WebKit::WebFramePolicyListenerProxy::use(*a4, 0, 0);
  }
}

void WKPageSetPageNavigationClient::NavigationClient::decidePolicyForNavigationResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    if (*(void *)a3) {
      uint64_t v6 = *(void *)(*(void *)a3 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    if (*a4) {
      uint64_t v7 = *(void *)(*a4 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    v4(v5, v6, v7, 0, *(void *)(a1 + 16));
  }
  else
  {
    WebKit::WebFramePolicyListenerProxy::use(*a4, 0, 0);
  }
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::contentRuleListNotification(uint64_t result, void *a2, WTF::StringImpl **a3, uint64_t a4)
{
  if (*(void *)(result + 200))
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v4 = *(unsigned int *)(a4 + 52);
    if (!v4) {
      goto LABEL_42;
    }
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(a4 + 40);
    uint64_t v9 = v8 + 32 * v4;
    do
    {
      uint64_t v10 = *(unsigned int *)(v8 + 28);
      if (v10)
      {
        uint64_t v11 = *(void *)(v8 + 16);
        uint64_t v12 = 8 * v10;
        do
        {
          API::String::create(&v39);
          int v13 = HIDWORD(v43);
          if (HIDWORD(v43) == v43)
          {
            unint64_t v14 = HIDWORD(v43) + ((unint64_t)HIDWORD(v43) >> 2);
            if (v14 >= 0x10) {
              unint64_t v15 = v14 + 1;
            }
            else {
              unint64_t v15 = 16;
            }
            if (v15 <= (unint64_t)HIDWORD(v43) + 1) {
              unint64_t v16 = HIDWORD(v43) + 1;
            }
            else {
              unint64_t v16 = v15;
            }
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v42, v16);
            int v13 = HIDWORD(v43);
            uint64_t v17 = v39;
            v39 = 0;
            *(void *)(v42 + 8 * HIDWORD(v43)) = v17;
          }
          else
          {
            int v18 = v39;
            v39 = 0;
            *(void *)(v42 + 8 * HIDWORD(v43)) = v18;
          }
          HIDWORD(v43) = v13 + 1;
          int v19 = v39;
          v39 = 0;
          if (v19) {
            CFRelease(*((CFTypeRef *)v19 + 1));
          }
          API::String::create(&v39);
          int v20 = HIDWORD(v41);
          if (HIDWORD(v41) == v41)
          {
            unint64_t v21 = HIDWORD(v41) + ((unint64_t)HIDWORD(v41) >> 2);
            if (v21 >= 0x10) {
              unint64_t v22 = v21 + 1;
            }
            else {
              unint64_t v22 = 16;
            }
            if (v22 <= (unint64_t)HIDWORD(v41) + 1) {
              unint64_t v23 = HIDWORD(v41) + 1;
            }
            else {
              unint64_t v23 = v22;
            }
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v40, v23);
            int v20 = HIDWORD(v41);
            unint64_t v24 = v39;
            v39 = 0;
            *(void *)(v40 + 8 * HIDWORD(v41)) = v24;
          }
          else
          {
            CFTypeRef v25 = v39;
            v39 = 0;
            *(void *)(v40 + 8 * HIDWORD(v41)) = v25;
          }
          HIDWORD(v41) = v20 + 1;
          uint64_t v26 = v39;
          v39 = 0;
          if (v26) {
            CFRelease(*((CFTypeRef *)v26 + 1));
          }
          v11 += 8;
          v12 -= 8;
        }
        while (v12);
      }
      v8 += 32;
    }
    while (v8 != v9);
    if (!HIDWORD(v41)) {
      goto LABEL_42;
    }
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v7 + 200);
    uint64_t v28 = a2[1];
    uint64_t v29 = *a3;
    if (v29)
    {
      *(_DWORD *)v29 += 2;
      uint64_t v30 = API::Object::newObject(0x20uLL, 24);
      *(void *)uint64_t v30 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2((WebKit *)v30);
      *(void *)uint64_t v30 = &unk_1EE9B53A8;
      int v32 = *(_DWORD *)v29;
      *(_DWORD *)v29 += 2;
      *(void *)(v30 + 16) = v29;
      *(void *)(v30 + 24) = 0;
      if (v32) {
        *(_DWORD *)uint64_t v29 = v32;
      }
      else {
        WTF::StringImpl::destroy(v29, v31);
      }
      uint64_t v33 = *(void *)(v30 + 8);
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v33 = 0;
    }
    API::Array::create(&v42, (uint64_t *)&v39);
    uint64_t v34 = v39;
    if (v39) {
      uint64_t v35 = *((void *)v39 + 1);
    }
    else {
      uint64_t v35 = 0;
    }
    API::Array::create(&v40, &v38);
    uint64_t v36 = v38;
    if (v38)
    {
      v27(v28, v33, v35, *(void *)(v38 + 8), *(void *)(v7 + 16));
      CFRelease(*(CFTypeRef *)(v36 + 8));
      if (!v34) {
        goto LABEL_40;
      }
    }
    else
    {
      v27(v28, v33, v35, 0, *(void *)(v7 + 16));
      if (!v34)
      {
LABEL_40:
        if (!v29)
        {
LABEL_42:
          WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, a2);
          return WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v37);
        }
LABEL_41:
        CFRelease(*(CFTypeRef *)(v30 + 8));
        goto LABEL_42;
      }
    }
    CFRelease(*((CFTypeRef *)v34 + 1));
    if (!v29) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  return result;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didBeginNavigationGesture(uint64_t this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = *(uint64_t (**)(void, void))(this + 160);
  if (v2) {
    return v2(*((void *)a2 + 1), *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::willEndNavigationGesture(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, void))(result + 168);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    if (a3) {
      uint64_t v6 = *(void *)(a4 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    return v4(v5, v6, *(void *)(result + 16));
  }
  return result;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didEndNavigationGesture(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, void))(result + 176);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    if (a3) {
      uint64_t v6 = *(void *)(a4 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    return v4(v5, v6, *(void *)(result + 16));
  }
  return result;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didRemoveNavigationGestureSnapshot(uint64_t this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = *(uint64_t (**)(void, void))(this + 184);
  if (v2) {
    return v2(*((void *)a2 + 1), *(void *)(this + 16));
  }
  return this;
}

void WTF::Detail::CallableWrapper<WKPageEvaluateJavaScriptInMainFrame::$_0,void,std::experimental::fundamentals_v3::expected<WTF::RefPtr<API::SerializedScriptValue,WTF::RawPtrTraits<API::SerializedScriptValue>,WTF::DefaultRefDerefTraits<API::SerializedScriptValue>>,WebCore::ExceptionDetails> &&>::call(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void (**)(void, void, uint64_t))(a1 + 16);
  if (v2)
  {
    if (a2[8])
    {
      uint64_t v4 = *(void *)(a1 + 8);
      v2(0, 0, v4);
    }
    else
    {
      uint64_t v5 = *(void (**)(id, void, void))(a1 + 16);
      API::SerializedScriptValue::deserializeWK(*(API::SerializedScriptValue **)(*(void *)a2 + 16), (API *)&v6);
      v5(v6, 0, *(void *)(a1 + 8));
      if (v6) {
        CFRelease(*(CFTypeRef *)([v6 _apiObject] + 8));
      }
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WKPageGetSelectionAsWebArchiveData::$_0,void,API::Data *>::call(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  return (*(uint64_t (**)(uint64_t, void, void))(a1 + 16))(v2, 0, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageForceRepaint::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(a1 + 16))(0, *(void *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WKPageValidateCommand::$_0,void,BOOL,int>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9E1868;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKPageValidateCommand::$_0,void,BOOL,int>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9E1868;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WKPageValidateCommand::$_0,void,BOOL,int>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(a1 + 16);
  API::String::create(&v9);
  if (v9) {
    uint64_t v7 = *((void *)v9 + 1);
  }
  else {
    uint64_t v7 = 0;
  }
  v6(v7, a2, a3, 0, *(void *)(a1 + 8));
  uint64_t v8 = v9;
  uint64_t v9 = 0;
  if (v8) {
    CFRelease(*((CFTypeRef *)v8 + 1));
  }
}

uint64_t WTF::Detail::CallableWrapper<WKPageComputePagesForPrinting::$_0,void,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&>::call(uint64_t a1, unsigned int *a2, double a3)
{
  uint64_t v5 = a2[3];
  if (v5)
  {
    if (v5 >> 27) {
      goto LABEL_14;
    }
    uint64_t v7 = WTF::fastMalloc((WTF *)(32 * v5));
    uint64_t v8 = (WTF *)v7;
    uint64_t v9 = a2[3];
    if (v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = (void *)(*(void *)a2 + 8);
      uint64_t v12 = 32 * v9;
      while (32 * v5 != v10)
      {
        int v13 = (float64x2_t *)(v7 + v10);
        uint64_t v14 = *(v11 - 1);
        v15.i64[0] = (int)v14;
        v15.i64[1] = SHIDWORD(v14);
        float64x2_t v16 = vcvtq_f64_s64(v15);
        v15.i64[0] = (int)*v11;
        v15.i64[1] = (int)HIDWORD(*v11);
        float64x2_t *v13 = v16;
        v13[1] = vcvtq_f64_s64(v15);
        v11 += 2;
        v10 += 32;
        if (v12 == v10) {
          goto LABEL_9;
        }
      }
LABEL_14:
      __break(0xC471u);
      JUMPOUT(0x198F8399CLL);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
LABEL_9:
  uint64_t result = (*(uint64_t (**)(WTF *, uint64_t, void, void, double))(a1 + 16))(v8, v5, 0, *(void *)(a1 + 8), a3);
  if (v8)
  {
    return WTF::fastFree(v8, v18);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKPageDrawPagesToPDF::$_0,void,API::Data *>::call(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  return (*(uint64_t (**)(uint64_t, void, void))(a1 + 16))(v2, 0, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageCallAfterNextPresentationUpdate::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(a1 + 16))(0, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageGetApplicationManifest::$_0,void,std::optional<WebCore::ApplicationManifest> const&>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

void WTF::Detail::CallableWrapper<WKPageDumpPrivateClickMeasurement::$_0,void,WTF::String const&>::call(uint64_t a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *(void (**)(void, void))(a1 + 16);
  uint64_t v4 = *a2;
  if (*a2) {
    *(_DWORD *)v4 += 2;
  }
  uint64_t v8 = v4;
  API::String::create(&v8, &v9);
  id v6 = v8;
  uint64_t v7 = v9;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v5);
      if (v7) {
        goto LABEL_7;
      }
LABEL_10:
      v3(0, *(void *)(a1 + 8));
      return;
    }
    *(_DWORD *)v6 -= 2;
  }
  if (!v7) {
    goto LABEL_10;
  }
LABEL_7:
  v3(*((void *)v7 + 1), *(void *)(a1 + 8));
  CFRelease(*((CFTypeRef *)v7 + 1));
}

uint64_t WTF::Detail::CallableWrapper<WKPageClearPrivateClickMeasurement::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageSetPrivateClickMeasurementOverrideTimerForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageMarkAttributedPrivateClickMeasurementsAsExpiredForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageSetPrivateClickMeasurementEphemeralMeasurementForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageSimulatePrivateClickMeasurementSessionRestart::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageSetPrivateClickMeasurementTokenPublicKeyURLForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageSetPrivateClickMeasurementTokenSignatureURLForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageSetPrivateClickMeasurementAttributionReportURLsForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageMarkPrivateClickMeasurementsAsExpiredForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageSetPCMFraudPreventionValuesForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageSetPrivateClickMeasurementAppBundleIDForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageLoadedSubresourceDomains::$_0,void,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v3 = *((unsigned int *)a2 + 3);
  if (v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v3));
    LODWORD(v20) = v3;
    uint64_t v19 = v5;
    uint64_t v6 = *((unsigned int *)a2 + 3);
    if (v6)
    {
      uint64_t v7 = v5;
      uint64_t v8 = 0;
      uint64_t v9 = *a2;
      uint64_t v10 = 8 * v6;
      do
      {
        uint64_t v11 = v8;
        uint64_t v12 = *(WTF::StringImpl **)(v9 + 8 * v8);
        if (v12) {
          *(_DWORD *)v12 += 2;
        }
        unint64_t v21 = v12;
        API::String::create(&v21, &v22);
        uint64_t v14 = v21;
        int64x2_t v15 = v22;
        unint64_t v21 = 0;
        unint64_t v22 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v13);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
        uint64_t v8 = v11 + 1;
        *(void *)(v7 + 8 * v11) = v15;
        v10 -= 8;
      }
      while (v10);
      HIDWORD(v20) = v11 + 1;
    }
  }
  float64x2_t v16 = *(void (**)(void, void))(v2 + 16);
  API::Array::create(&v19, (uint64_t *)&v22);
  uint64_t v17 = v22;
  if (v22)
  {
    v16(*((void *)v22 + 1), *(void *)(v2 + 8));
    CFRelease(*((CFTypeRef *)v17 + 1));
  }
  else
  {
    v16(0, *(void *)(v2 + 8));
  }
  return WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v18);
}

uint64_t WTF::Detail::CallableWrapper<WKPageSetTopContentInsetForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageSetPageScaleFactorForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WKQueryPermissionResultCallbackGetTypeID()
{
  return 131;
}

uint64_t WKQueryPermissionResultCallbackCompleteWithDenied(void *a1)
{
  uint64_t v1 = [a1 _apiObject];
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 257);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t WKQueryPermissionResultCallbackCompleteWithGranted(void *a1)
{
  uint64_t v1 = [a1 _apiObject];
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 256);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t WKQueryPermissionResultCallbackCompleteWithPrompt(void *a1)
{
  uint64_t v1 = [a1 _apiObject];
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 258);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t WKResourceCacheManagerGetTypeID()
{
  return 0;
}

uint64_t WKSessionStateGetTypeID()
{
  return 19;
}

uint64_t WKSessionStateCreateFromData(void *a1)
{
  BYTE4(v20) = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  LOBYTE(v20) = 0;
  unint64_t v21 = 0;
  WTF::URL::invalidate((WTF::URL *)&v21);
  char v24 = 1;
  uint64_t v2 = [a1 _apiObject];
  uint64_t v4 = 0;
  if (WebKit::decodeLegacySessionState(*(void *)(v2 + 16), *(void *)(v2 + 24), (uint64_t)&v18))
  {
    v11[0] = v18;
    uint64_t v5 = v19;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    v11[1] = v5;
    long long v12 = v20;
    uint64_t v6 = v21;
    unint64_t v21 = 0;
    int v13 = v6;
    long long v14 = v22;
    long long v15 = v23;
    LODWORD(v22) = v22 & 0xFFFFFFFE;
    char v16 = v24;
    API::SessionState::create((API::SessionState *)v11, &v17);
    if (v17) {
      uint64_t v4 = *(void *)(v17 + 8);
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v8 = v13;
    int v13 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v7);
  }
  uint64_t v9 = v21;
  unint64_t v21 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v3);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v3);
  return v4;
}

uint64_t WKSessionStateCopyData(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  WebKit::encodeLegacySessionState((WebKit *)(a1 + 16), &v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKSpeechRecognitionPermissionCallbackGetTypeID()
{
  return 101;
}

uint64_t WKSpeechRecognitionPermissionCallbackComplete(void *a1, uint64_t a2)
{
  uint64_t v3 = [a1 _apiObject];
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t WKUserContentControllerGetTypeID()
{
  return 104;
}

WebKit::WebUserContentControllerProxy *WKUserContentControllerCreate()
{
  v0 = (WebKit::WebUserContentControllerProxy *)API::Object::newObject(0x70uLL, 104);
  uint64_t result = WebKit::WebUserContentControllerProxy::WebUserContentControllerProxy(v0);
  if (result) {
    return (WebKit::WebUserContentControllerProxy *)*((void *)result + 1);
  }
  return result;
}

uint64_t WKUserContentControllerCopyUserScripts(void *a1)
{
  API::Array::copy(*(API::Array **)([a1 _apiObject] + 56), &v2);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

void WKUserContentControllerAddUserScript(void *a1, void *a2)
{
  if (a1) {
    uint64_t v3 = [a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = [a2 _apiObject];

  WebKit::WebUserContentControllerProxy::addUserScript(v3, v4, 0);
}

void WKUserContentControllerRemoveAllUserScripts(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  WebKit::WebUserContentControllerProxy::removeAllUserScripts((WebKit::WebUserContentControllerProxy *)a1);
}

WTF::StringImpl *WKUserContentControllerAddUserContentFilter(void *a1, void *a2)
{
  uint64_t v2 = a2;
  if (a1)
  {
    uint64_t v3 = (WebKit::WebUserContentControllerProxy *)[a1 _apiObject];
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v3 = 0;
  if (a2) {
LABEL_3:
  }
    uint64_t v2 = (void *)[v2 _apiObject];
LABEL_4:
  v6[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v6);
  WebKit::WebUserContentControllerProxy::addContentRuleList(v3, (API::ContentRuleList *)v2, v6);
  uint64_t result = v6[0];
  v6[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WKUserContentControllerRemoveAllUserContentFilters(void *a1, WTF::StringImpl *a2)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v2 = vars8;
  }
  return WebKit::WebUserContentControllerProxy::removeAllContentRuleLists((WebKit::WebUserContentControllerProxy *)a1, a2);
}

uint64_t WKUserContentExtensionStoreGetTypeID()
{
  return 49;
}

uint64_t WKUserContentExtensionStoreCreate(void *a1)
{
  if (a1)
  {
    [a1 _apiObject];
    WTF::String::isolatedCopy();
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v1 = (API::ContentRuleListStore *)API::Object::newObject(0x30uLL, 49);
  uint64_t v2 = API::ContentRuleListStore::ContentRuleListStore(v1, (const WTF::String *)&v7);
  if (v2) {
    uint64_t v4 = *((void *)v2 + 1);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v4;
}

WTF::StringImpl *WKUserContentExtensionStoreCompile(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v9 = [a1 _apiObject];
    if (a2) {
      goto LABEL_3;
    }
LABEL_17:
    char v16 = 0;
    if (a3) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  uint64_t v9 = 0;
  if (!a2) {
    goto LABEL_17;
  }
LABEL_3:
  [a2 _apiObject];
  WTF::String::isolatedCopy();
  if (a3)
  {
LABEL_4:
    [a3 _apiObject];
    WTF::String::isolatedCopy();
    goto LABEL_5;
  }
LABEL_18:
  long long v15 = 0;
LABEL_5:
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v10 = &unk_1EE9E1BB0;
  v10[1] = a4;
  v10[2] = a5;
  long long v14 = v10;
  API::ContentRuleListStore::compileContentRuleList(v9, (const WTF::String *)&v16, (const WTF::String *)&v15, (uint64_t *)&v14);
  if (v14) {
    (*(void (**)(void *))(*v14 + 8))(v14);
  }
  long long v12 = v15;
  long long v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKUserContentExtensionStoreLookup(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v7 = [a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  long long v12 = 0;
LABEL_4:
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E1BD8;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v11 = v8;
  API::ContentRuleListStore::lookupContentRuleList(v7, (const WTF::String *)&v12, (const WTF::String *)&v11);
  if (v11) {
    (*(void (**)(void *))(*v11 + 8))(v11);
  }
  uint64_t result = v12;
  long long v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKUserContentExtensionStoreRemove(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v7 = [a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  long long v12 = 0;
LABEL_4:
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E1C00;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v11 = v8;
  API::ContentRuleListStore::removeContentRuleList(v7, (const WTF::String *)&v12, (const WTF::String *)&v11);
  if (v11) {
    (*(void (**)(void *))(*v11 + 8))(v11);
  }
  uint64_t result = v12;
  long long v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKUserMediaPermissionCheckGetTypeID()
{
  return 106;
}

uint64_t WKUserMediaPermissionCheckSetUserMediaAccessInfo(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }

  return WebKit::UserMediaPermissionCheckProxy::complete((uint64_t)a1);
}

void WTF::Detail::CallableWrapper<WKUserContentExtensionStoreCompile::$_0,void,WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code>::call(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 16);
  if (a3)
  {
    if (a3 >= 5)
    {
      __break(0xC471u);
      JUMPOUT(0x198F84700);
    }
    v4(0, a3, *(void *)(a1 + 8));
    if (v3)
    {
      uint64_t v5 = *(const void **)(v3 + 8);
      CFRelease(v5);
    }
  }
  else
  {
    if (v3) {
      uint64_t v6 = *(void *)(v3 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void *)(a1 + 8);
    v4(v6, 0, v7);
  }
}

void WTF::Detail::CallableWrapper<WKUserContentExtensionStoreLookup::$_0,void,WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code>::call(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 16);
  if (a3)
  {
    if (a3 >= 5)
    {
      __break(0xC471u);
      JUMPOUT(0x198F847CCLL);
    }
    v4(0, a3, *(void *)(a1 + 8));
    if (v3)
    {
      uint64_t v5 = *(const void **)(v3 + 8);
      CFRelease(v5);
    }
  }
  else
  {
    if (v3) {
      uint64_t v6 = *(void *)(v3 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void *)(a1 + 8);
    v4(v6, 0, v7);
  }
}

uint64_t WTF::Detail::CallableWrapper<WKUserContentExtensionStoreRemove::$_0,void,std::error_code>::call(uint64_t a1, unsigned int a2)
{
  if (a2 < 5) {
    return (*(uint64_t (**)(void))(a1 + 16))(0);
  }
  uint64_t result = 72;
  __break(0xC471u);
  return result;
}

uint64_t WKUserMediaPermissionRequestGetTypeID()
{
  return 107;
}

WTF::StringImpl *WKUserMediaPermissionRequestAllow(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::UserMediaPermissionRequestProxy *)[a1 _apiObject];
    if (a2) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v10 = 0;
    if (a3) {
      goto LABEL_4;
    }
    goto LABEL_16;
  }
  uint64_t v5 = 0;
  if (!a2) {
    goto LABEL_15;
  }
LABEL_3:
  [a2 _apiObject];
  WTF::String::isolatedCopy();
  if (a3)
  {
LABEL_4:
    [a3 _apiObject];
    WTF::String::isolatedCopy();
    goto LABEL_5;
  }
LABEL_16:
  uint64_t v9 = 0;
LABEL_5:
  WebKit::UserMediaPermissionRequestProxy::allow(v5, &v10, (const WTF::String *)&v9);
  uint64_t v7 = v9;
  uint64_t v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebKit::UserMediaPermissionRequestManagerProxy *WKUserMediaPermissionRequestDeny(void *a1, unsigned int a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  if (a2 >= 6) {
    int v3 = 6;
  }
  else {
    int v3 = a2;
  }

  return WebKit::UserMediaPermissionRequestProxy::deny(a1, v3);
}

char *WKUserMediaPermissionRequestVideoDeviceUIDs(void *a1)
{
  uint64_t v2 = (char *)WKMutableArrayCreate();
  if (a1) {
    uint64_t v3 = [a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  WebKit::UserMediaPermissionRequestProxy::videoDeviceUIDs(v3, (uint64_t)&v11);
  if (v12)
  {
    uint64_t v5 = v11;
    uint64_t v6 = 8 * v12;
    do
    {
      API::String::create(&v10);
      if (v10) {
        uint64_t v7 = (void *)*((void *)v10 + 1);
      }
      else {
        uint64_t v7 = 0;
      }
      WKArrayAppendItem(v2, v7);
      uint64_t v8 = v10;
      uint64_t v10 = 0;
      if (v8) {
        CFRelease(*((CFTypeRef *)v8 + 1));
      }
      uint64_t v5 = (API::String *)((char *)v5 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v4);
  return v2;
}

char *WKUserMediaPermissionRequestAudioDeviceUIDs(void *a1)
{
  uint64_t v2 = (char *)WKMutableArrayCreate();
  if (a1) {
    uint64_t v3 = [a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  WebKit::UserMediaPermissionRequestProxy::audioDeviceUIDs(v3, (uint64_t)&v11);
  if (v12)
  {
    uint64_t v5 = v11;
    uint64_t v6 = 8 * v12;
    do
    {
      API::String::create(&v10);
      if (v10) {
        uint64_t v7 = (void *)*((void *)v10 + 1);
      }
      else {
        uint64_t v7 = 0;
      }
      WKArrayAppendItem(v2, v7);
      uint64_t v8 = v10;
      uint64_t v10 = 0;
      if (v8) {
        CFRelease(*((CFTypeRef *)v8 + 1));
      }
      uint64_t v5 = (API::String *)((char *)v5 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v4);
  return v2;
}

BOOL WKUserMediaPermissionRequestRequiresCameraCapture(void *a1)
{
  uint64_t v1 = [a1 _apiObject];
  return *(unsigned __int8 *)(v1 + 112) - 1 >= 2 && *(_DWORD *)(v1 + 92) != 0;
}

BOOL WKUserMediaPermissionRequestRequiresDisplayCapture(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 112) - 1 < 2;
}

BOOL WKUserMediaPermissionRequestRequiresMicrophoneCapture(void *a1)
{
  return *(_DWORD *)([a1 _apiObject] + 108) != 0;
}

uint64_t WKWebsiteDataStoreConfigurationGetTypeID()
{
  return 125;
}

uint64_t WKWebsiteDataStoreConfigurationCreate()
{
  uint64_t v0 = API::Object::newObject(0x220uLL, 125);
  uint64_t result = WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration(v0, 1, 1);
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyApplicationCacheDirectory(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetApplicationCacheDirectory(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  uint64_t result = *(WTF::StringImpl **)(v3 + 72);
  *(void *)(v3 + 72) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyNetworkCacheDirectory(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetNetworkCacheDirectory(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  uint64_t result = *(WTF::StringImpl **)(v3 + 168);
  *(void *)(v3 + 168) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyIndexedDBDatabaseDirectory(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetIndexedDBDatabaseDirectory(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  uint64_t result = *(WTF::StringImpl **)(v3 + 128);
  *(void *)(v3 + 128) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyLocalStorageDirectory(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetLocalStorageDirectory(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  uint64_t result = *(WTF::StringImpl **)(v3 + 144);
  *(void *)(v3 + 144) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyWebSQLDatabaseDirectory(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetWebSQLDatabaseDirectory(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  uint64_t result = *(WTF::StringImpl **)(v3 + 200);
  *(void *)(v3 + 200) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyCacheStorageDirectory(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetCacheStorageDirectory(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  uint64_t result = *(WTF::StringImpl **)(v3 + 88);
  *(void *)(v3 + 88) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyGeneralStorageDirectory(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetGeneralStorageDirectory(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  uint64_t result = *(WTF::StringImpl **)(v3 + 112);
  *(void *)(v3 + 112) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyMediaKeysStorageDirectory(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetMediaKeysStorageDirectory(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  uint64_t result = *(WTF::StringImpl **)(v3 + 160);
  *(void *)(v3 + 160) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyResourceLoadStatisticsDirectory(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetResourceLoadStatisticsDirectory(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  uint64_t result = *(WTF::StringImpl **)(v3 + 176);
  *(void *)(v3 + 176) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyServiceWorkerRegistrationDirectory(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetServiceWorkerRegistrationDirectory(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  uint64_t result = *(WTF::StringImpl **)(v3 + 192);
  *(void *)(v3 + 192) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyCookieStorageFile(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetCookieStorageFile(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  uint64_t result = *(WTF::StringImpl **)(v3 + 96);
  *(void *)(v3 + 96) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationGetPerOriginStorageQuota(void *a1)
{
  return *(void *)([a1 _apiObject] + 216);
}

uint64_t WKWebsiteDataStoreConfigurationSetPerOriginStorageQuota(void *a1, uint64_t a2)
{
  uint64_t result = [a1 _apiObject];
  *(void *)(result + 216) = a2;
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationGetNetworkCacheSpeculativeValidationEnabled(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 288);
}

uint64_t WKWebsiteDataStoreConfigurationSetNetworkCacheSpeculativeValidationEnabled(void *a1, char a2)
{
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(result + 288) = a2;
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationGetTestingSessionEnabled(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 414);
}

uint64_t WKWebsiteDataStoreConfigurationSetTestingSessionEnabled(void *a1, char a2)
{
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(result + 414) = a2;
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationGetStaleWhileRevalidateEnabled(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 289);
}

uint64_t WKWebsiteDataStoreConfigurationSetStaleWhileRevalidateEnabled(void *a1, char a2)
{
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(result + 289) = a2;
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyPCMMachServiceName(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetPCMMachServiceName(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      uint64_t v4 = v6;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = 0;
LABEL_6:
  uint64_t result = *(WTF::StringImpl **)(v3 + 480);
  *(void *)(v3 + 480) = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

BOOL WKWebsiteDataStoreConfigurationHasOriginQuotaRatio(void *a1)
{
  return *(unsigned char *)([a1 _apiObject] + 232) != 0;
}

uint64_t WKWebsiteDataStoreConfigurationClearOriginQuotaRatio(void *a1)
{
  uint64_t result = [a1 _apiObject];
  *(void *)(result + 224) = 0;
  *(unsigned char *)(result + 232) = 0;
  return result;
}

BOOL WKWebsiteDataStoreConfigurationHasTotalQuotaRatio(void *a1)
{
  return *(unsigned char *)([a1 _apiObject] + 248) != 0;
}

uint64_t WKWebsiteDataStoreConfigurationClearTotalQuotaRatio(void *a1)
{
  uint64_t result = [a1 _apiObject];
  *(void *)(result + 240) = 0;
  *(unsigned char *)(result + 248) = 0;
  return result;
}

uint64_t WKWebsiteDataStoreGetTypeID()
{
  return 124;
}

const void *WKWebsiteDataStoreGetDefaultDataStore(WebKit::WebsiteDataStore *a1)
{
  WebKit::WebsiteDataStore::defaultDataStore(a1, &v3);
  if (!v3) {
    return 0;
  }
  uint64_t v1 = (const void *)*((void *)v3 + 1);
  CFRelease(v1);
  return v1;
}

uint64_t WKWebsiteDataStoreCreateNonPersistentDataStore()
{
  WebKit::WebsiteDataStore::createNonPersistent(&v1);
  if (v1) {
    return *((void *)v1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKWebsiteDataStoreCreateWithConfiguration(void *a1)
{
  uint64_t v2 = (PAL::SessionID *)[a1 _apiObject];
  if (*((unsigned char *)v2 + 16)) {
    uint64_t PersistentSessionID = PAL::SessionID::generatePersistentSessionID(v2);
  }
  else {
    uint64_t PersistentSessionID = PAL::SessionID::generateEphemeralSessionID(v2);
  }
  uint64_t v4 = PersistentSessionID;
  uint64_t v5 = [a1 _apiObject];
  CFRetain(*(CFTypeRef *)(v5 + 8));
  uint64_t v8 = v5;
  WebKit::WebsiteDataStore::create(&v8, v4, &v9);
  if (v9) {
    uint64_t v6 = *((void *)v9 + 1);
  }
  else {
    uint64_t v6 = 0;
  }
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  return v6;
}

unsigned int *WKWebsiteDataStoreTerminateNetworkProcess(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebsiteDataStore::terminateNetworkProcess((unsigned int *)a1);
}

uint64_t WKWebsiteDataStoreGetNetworkProcessIdentifier(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t v1 = *(void *)(WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1) + 136);
  if (v1) {
    return *(unsigned int *)(v1 + 108);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKWebsiteDataStoreRemoveITPDataForDomain(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  long long v23 = 0;
  LOBYTE(v25) = 0;
  char v27 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v30 = 0;
  int v24 = 4096;
  if (a2) {
    [a2 _apiObject];
  }
  WTF::String::isolatedCopy();
  WebCore::RegistrableDomain::uncheckedCreateFromHost((WebCore::RegistrableDomain *)&v22, v21);
  v24 |= 0x1000u;
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v30, v21, (uint64_t)&v31);
  uint64_t v8 = v21[0];
  v21[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v22;
  long long v22 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v23;
  long long v23 = 0;
  uint64_t v31 = v10;
  int v32 = v24;
  LOBYTE(v33) = 0;
  char v35 = 0;
  if (v27)
  {
    uint64_t v11 = v26;
    uint64_t v26 = 0;
    uint64_t v33 = v25;
    uint64_t v34 = v11;
    char v35 = 1;
  }
  long long v36 = v28;
  long long v12 = v29;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v37 = v12;
  int v13 = v30;
  uint64_t v30 = 0;
  uint64_t v38 = v13;
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v21, (uint64_t)&v31, 1uLL);
  if (v38) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v38, v14);
  }
  if (*((void *)&v37 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v37 + 1), v14);
  }
  if ((void)v37) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v37, v14);
  }
  if (*((void *)&v36 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v36 + 1), v14);
  }
  if ((void)v36) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v36, v14);
  }
  if (v35 && v34) {
    WTF::fastFree((WTF *)(v34 - 16), v14);
  }
  long long v15 = v31;
  uint64_t v31 = 0;
  if (!v15)
  {
LABEL_29:
    if (!a1) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
    goto LABEL_29;
  }
  WTF::StringImpl::destroy(v15, v14);
  if (a1) {
LABEL_30:
  }
    a1 = objc_msgSend(a1, "_apiObject", v21[0]);
LABEL_31:
  char v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(void *)char v16 = &unk_1EE9E1C38;
  *((void *)v16 + 1) = a3;
  *((void *)v16 + 2) = a4;
  uint64_t v31 = v16;
  WebKit::WebsiteDataStore::removeData((uint64_t)a1, 4096, (uint64_t *)v21, (uint64_t *)&v31);
  uint64_t v18 = v31;
  uint64_t v31 = 0;
  if (v18) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v18 + 8))(v18);
  }
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v17);
  if (v30) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v19);
  }
  if (*((void *)&v29 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v29 + 1), v19);
  }
  if ((void)v29) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v29, v19);
  }
  if (*((void *)&v28 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v28 + 1), v19);
  }
  if ((void)v28) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v28, v19);
  }
  if (v27 && v26) {
    WTF::fastFree((WTF *)(v26 - 16), v19);
  }
  uint64_t result = v23;
  long long v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreDoesStatisticsDomainIDExistInDatabase(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    uint64_t v7 = (uint64_t *)[a1 _apiObject];
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E1C60;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v10 = v8;
  WebKit::WebsiteDataStore::domainIDExistsInDatabase(v7, a2, (uint64_t *)&v10);
  uint64_t result = (uint64_t)v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

unsigned int *WKWebsiteDataStoreSetServiceWorkerFetchTimeoutForTesting(void *a1, double a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }

  return WebKit::WebsiteDataStore::setServiceWorkerTimeoutForTesting((WebKit::WebsiteDataStore *)a1, a2);
}

unsigned int *WKWebsiteDataStoreResetServiceWorkerFetchTimeoutForTesting(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebsiteDataStore::resetServiceWorkerTimeoutForTesting((WebKit::WebsiteDataStore *)a1);
}

uint64_t WKWebsiteDataStoreSetResourceLoadStatisticsEnabled(void *a1, int a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }

  return WebKit::WebsiteDataStore::setTrackingPreventionEnabled((uint64_t)a1, a2);
}

uint64_t WKWebsiteDataStoreIsStatisticsEphemeral(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E1C88;
  v6[1] = a2;
  v6[2] = a3;
  uint64_t v8 = v6;
  WebKit::WebsiteDataStore::isResourceLoadStatisticsEphemeral(v5, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

BOOL WKWebsiteDataStoreGetResourceLoadStatisticsEnabled(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  if (*(unsigned char *)(a1 + 265)) {
    return *(unsigned char *)(a1 + 265) == 2;
  }
  if (*(unsigned __int16 *)(*(void *)(a1 + 208) + 528) >= 0x100u) {
    return *(_WORD *)(*(void *)(a1 + 208) + 528) != 0;
  }

  return WebKit::doesAppHaveTrackingPreventionEnabled((WebKit *)a1);
}

void *WKWebsiteDataStoreSetResourceLoadStatisticsDebugMode(void *a1, char a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }

  return WebKit::WebsiteDataStore::setResourceLoadStatisticsDebugMode((WebKit::WebsiteDataStore *)a1, a2);
}

uint64_t WKWebsiteDataStoreSyncLocalStorage(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E1CB0;
  v6[1] = a2;
  v6[2] = a3;
  uint64_t v8 = v6;
  WebKit::WebsiteDataStore::syncLocalStorage(v5, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreGetHTTPCookieStore(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return *((void *)WebKit::WebsiteDataStore::cookieStore((WebKit::WebsiteDataStore *)a1) + 1);
}

uint64_t WKWebsiteDataStoreSetResourceLoadStatisticsDebugModeWithCompletionHandler(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    uint64_t v7 = [a1 _apiObject];
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E1CD8;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v10 = v8;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsDebugMode(v7, a2, (uint64_t *)&v10);
  uint64_t result = (uint64_t)v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetResourceLoadStatisticsPrevalentResourceForDebugMode(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v7 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v7 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v15, &v14, 0);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E1D00;
  v8[1] = a3;
  v8[2] = a4;
  int v13 = v8;
  WebKit::WebsiteDataStore::setPrevalentResourceForDebugMode(v7, (const WTF::URL *)v15, (uint64_t *)&v13);
  uint64_t v10 = (uint64_t)v13;
  int v13 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v14;
  long long v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsLastSeen(void *a1, void *a2, uint64_t a3, uint64_t a4, double a5)
{
  if (a1)
  {
    uint64_t v9 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v9 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v17, &v16, 0);
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v10 = &unk_1EE9E1D28;
  v10[1] = a3;
  v10[2] = a4;
  long long v15 = v10;
  WebKit::WebsiteDataStore::setLastSeen(v9, (const WTF::URL *)v17, (uint64_t *)&v15, a5);
  uint64_t v12 = (uint64_t)v15;
  long long v15 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  int v13 = v17[0];
  v17[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsMergeStatistic(void *a1, void *a2, void *a3, void *a4, char a5, char a6, char a7, char a8, double a9, double a10, unsigned int a11, uint64_t a12, uint64_t a13)
{
  if (a1)
  {
    long long v22 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    long long v22 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v38, &v37, 0);
  if (a3) {
    [a3 _apiObject];
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v36, &v35, 0);
  if (a4) {
    [a4 _apiObject];
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v34, &v33, 0);
  long long v23 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v23 = &unk_1EE9E1D50;
  v23[1] = a12;
  v23[2] = a13;
  int v32 = v23;
  WebKit::WebsiteDataStore::mergeStatisticForTesting(v22, (const WTF::URL *)v38, (const WTF::URL *)v36, (const WTF::URL *)v34, a5, a6, a7, a8, a9, a10, a11, (uint64_t *)&v32);
  uint64_t v25 = (uint64_t)v32;
  int v32 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = v34[0];
  v34[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v24);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  char v27 = v33;
  uint64_t v33 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v24);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  long long v28 = v36[0];
  v36[0] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v24);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  long long v29 = v35;
  char v35 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v24);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  uint64_t v30 = v38[0];
  v38[0] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v24);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  uint64_t result = v37;
  long long v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsExpiredStatistic(void *a1, void *a2, unsigned int a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    long long v15 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    long long v15 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v23, &v22, 0);
  char v16 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v16 = &unk_1EE9E1D78;
  v16[1] = a7;
  v16[2] = a8;
  unint64_t v21 = v16;
  WebKit::WebsiteDataStore::insertExpiredStatisticForTesting(v15, (const WTF::URL *)v23, a3, a4, a5, a6, (uint64_t *)&v21);
  uint64_t v18 = (uint64_t)v21;
  unint64_t v21 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = v23[0];
  v23[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v17);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t result = v22;
  long long v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsPrevalentResource(void *a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v9 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a3)
    {
LABEL_3:
      if (a2) {
        [a2 _apiObject];
      }
      WTF::String::isolatedCopy();
      MEMORY[0x19972E890](v18, &v17, 0);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v10 = &unk_1EE9E1DA0;
      v10[1] = a4;
      v10[2] = a5;
      char v16 = v10;
      WebKit::WebsiteDataStore::setPrevalentResource(v9, (const WTF::URL *)v18, (uint64_t *)&v16);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v9 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  if (a2) {
    [a2 _apiObject];
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v18, &v17, 0);
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v12 = &unk_1EE9E1DC8;
  v12[1] = a4;
  v12[2] = a5;
  char v16 = v12;
  WebKit::WebsiteDataStore::clearPrevalentResource(v9, (const WTF::URL *)v18, (uint64_t *)&v16);
LABEL_10:
  uint64_t v13 = (uint64_t)v16;
  char v16 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  long long v14 = v18[0];
  v18[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v11);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsVeryPrevalentResource(void *a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v9 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a3)
    {
LABEL_3:
      if (a2) {
        [a2 _apiObject];
      }
      WTF::String::isolatedCopy();
      MEMORY[0x19972E890](v18, &v17, 0);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v10 = &unk_1EE9E1DF0;
      v10[1] = a4;
      v10[2] = a5;
      char v16 = v10;
      WebKit::WebsiteDataStore::setVeryPrevalentResource(v9, (const WTF::URL *)v18, (uint64_t *)&v16);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v9 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  if (a2) {
    [a2 _apiObject];
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v18, &v17, 0);
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v12 = &unk_1EE9E1E18;
  v12[1] = a4;
  v12[2] = a5;
  char v16 = v12;
  WebKit::WebsiteDataStore::clearPrevalentResource(v9, (const WTF::URL *)v18, (uint64_t *)&v16);
LABEL_10:
  uint64_t v13 = (uint64_t)v16;
  char v16 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  long long v14 = v18[0];
  v18[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v11);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreDumpResourceLoadStatistics(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E1E40;
  v6[1] = a2;
  v6[2] = a3;
  uint64_t v9 = v6;
  WebKit::WebsiteDataStore::dumpResourceLoadStatistics(v5, (uint64_t *)&v9);
  uint64_t result = (uint64_t)v9;
  if (v9)
  {
    uint64_t v8 = *(uint64_t (**)(void))(*v9 + 8);
    return v8();
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreIsStatisticsPrevalentResource(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v7 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v7 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v15, &v14, 0);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E1E68;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v13 = v8;
  WebKit::WebsiteDataStore::isPrevalentResource(v7, (const WTF::URL *)v15, (uint64_t *)&v13);
  uint64_t v10 = (uint64_t)v13;
  uint64_t v13 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v14;
  long long v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreIsStatisticsVeryPrevalentResource(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v7 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v7 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v15, &v14, 0);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E1E90;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v13 = v8;
  WebKit::WebsiteDataStore::isVeryPrevalentResource(v7, (const WTF::URL *)v15, (uint64_t *)&v13);
  uint64_t v10 = (uint64_t)v13;
  uint64_t v13 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v14;
  long long v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreIsStatisticsRegisteredAsSubresourceUnder(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v9 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v9 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v21, &v20, 0);
  if (a3) {
    [a3 _apiObject];
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v19, &v18, 0);
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v10 = &unk_1EE9E1EB8;
  v10[1] = a4;
  v10[2] = a5;
  uint64_t v17 = v10;
  WebKit::WebsiteDataStore::isRegisteredAsSubresourceUnder(v9, (const WTF::URL *)v21, (const WTF::URL *)v19, (uint64_t *)&v17);
  uint64_t v12 = (uint64_t)v17;
  uint64_t v17 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v19[0];
  v19[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  long long v14 = v18;
  uint64_t v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v11);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  long long v15 = v21[0];
  v21[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v11);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t result = v20;
  long long v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreIsStatisticsRegisteredAsSubFrameUnder(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v9 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v9 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v21, &v20, 0);
  if (a3) {
    [a3 _apiObject];
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v19, &v18, 0);
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v10 = &unk_1EE9E1EE0;
  v10[1] = a4;
  v10[2] = a5;
  uint64_t v17 = v10;
  WebKit::WebsiteDataStore::isRegisteredAsSubFrameUnder(v9, (const WTF::URL *)v21, (const WTF::URL *)v19, (uint64_t *)&v17);
  uint64_t v12 = (uint64_t)v17;
  uint64_t v17 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v19[0];
  v19[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  long long v14 = v18;
  uint64_t v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v11);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  long long v15 = v21[0];
  v21[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v11);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t result = v20;
  long long v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreIsStatisticsRegisteredAsRedirectingTo(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v9 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v9 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v21, &v20, 0);
  if (a3) {
    [a3 _apiObject];
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v19, &v18, 0);
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v10 = &unk_1EE9E1F08;
  v10[1] = a4;
  v10[2] = a5;
  uint64_t v17 = v10;
  WebKit::WebsiteDataStore::isRegisteredAsRedirectingTo(v9, (const WTF::URL *)v21, (const WTF::URL *)v19, (uint64_t *)&v17);
  uint64_t v12 = (uint64_t)v17;
  uint64_t v17 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v19[0];
  v19[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  long long v14 = v18;
  uint64_t v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v11);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  long long v15 = v21[0];
  v21[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v11);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t result = v20;
  long long v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsHasHadUserInteraction(void *a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v9 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a3)
    {
LABEL_3:
      if (a2) {
        [a2 _apiObject];
      }
      WTF::String::isolatedCopy();
      MEMORY[0x19972E890](v18, &v17, 0);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v10 = &unk_1EE9E1F30;
      v10[1] = a4;
      v10[2] = a5;
      char v16 = v10;
      WebKit::WebsiteDataStore::logUserInteraction(v9, (const WTF::URL *)v18, (uint64_t *)&v16);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v9 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  if (a2) {
    [a2 _apiObject];
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v18, &v17, 0);
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v12 = &unk_1EE9E1F58;
  v12[1] = a4;
  v12[2] = a5;
  char v16 = v12;
  WebKit::WebsiteDataStore::clearUserInteraction(v9, (const WTF::URL *)v18, (uint64_t *)&v16);
LABEL_10:
  uint64_t v13 = (uint64_t)v16;
  char v16 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  long long v14 = v18[0];
  v18[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v11);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreIsStatisticsHasHadUserInteraction(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v7 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v7 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v15, &v14, 0);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E1F80;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v13 = v8;
  WebKit::WebsiteDataStore::hasHadUserInteraction(v7, (const WTF::URL *)v15, (uint64_t *)&v13);
  uint64_t v10 = (uint64_t)v13;
  uint64_t v13 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v14;
  long long v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreIsStatisticsOnlyInDatabaseOnce(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v9 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v9 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v21, &v20, 0);
  if (a3) {
    [a3 _apiObject];
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v19, &v18, 0);
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v10 = &unk_1EE9E1FA8;
  v10[1] = a4;
  v10[2] = a5;
  uint64_t v17 = v10;
  WebKit::WebsiteDataStore::isRelationshipOnlyInDatabaseOnce(v9, (const WTF::URL *)v21, (const WTF::URL *)v19, (uint64_t *)&v17);
  uint64_t v12 = (uint64_t)v17;
  uint64_t v17 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v19[0];
  v19[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  long long v14 = v18;
  uint64_t v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v11);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  long long v15 = v21[0];
  v21[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v11);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t result = v20;
  long long v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsGrandfathered(void *a1, void *a2, char a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v13, &v12, 0);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v6 = &unk_1EE9E1FD0;
  uint64_t v11 = v6;
  WebKit::WebsiteDataStore::setGrandfathered(v5, (const WTF::URL *)v13, a3, (uint64_t *)&v11);
  uint64_t v8 = (uint64_t)v11;
  uint64_t v11 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v13[0];
  v13[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreIsStatisticsGrandfathered(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v7 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v7 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v15, &v14, 0);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E1FF8;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v13 = v8;
  WebKit::WebsiteDataStore::isGrandfathered(v7, (const WTF::URL *)v15, (uint64_t *)&v13);
  uint64_t v10 = (uint64_t)v13;
  uint64_t v13 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v14;
  long long v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsSubframeUnderTopFrameOrigin(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v17, &v16, 0);
  if (a3) {
    [a3 _apiObject];
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v15, &v14, 0);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v6 = &unk_1EE9E2020;
  uint64_t v13 = v6;
  WebKit::WebsiteDataStore::setSubframeUnderTopFrameDomain(v5, (const WTF::URL *)v17, (const WTF::URL *)v15, (uint64_t *)&v13);
  uint64_t v8 = (uint64_t)v13;
  uint64_t v13 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v15[0];
  v15[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v14;
  long long v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v17[0];
  v17[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v7);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsSubresourceUnderTopFrameOrigin(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v17, &v16, 0);
  if (a3) {
    [a3 _apiObject];
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v15, &v14, 0);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v6 = &unk_1EE9E2048;
  uint64_t v13 = v6;
  WebKit::WebsiteDataStore::setSubresourceUnderTopFrameDomain(v5, (const WTF::URL *)v17, (const WTF::URL *)v15, (uint64_t *)&v13);
  uint64_t v8 = (uint64_t)v13;
  uint64_t v13 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v15[0];
  v15[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v14;
  long long v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v17[0];
  v17[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v7);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsSubresourceUniqueRedirectTo(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v17, &v16, 0);
  if (a3) {
    [a3 _apiObject];
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v15, &v14, 0);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v6 = &unk_1EE9E2070;
  uint64_t v13 = v6;
  WebKit::WebsiteDataStore::setSubresourceUniqueRedirectTo(v5, (const WTF::URL *)v17, (const WTF::URL *)v15, (uint64_t *)&v13);
  uint64_t v8 = (uint64_t)v13;
  uint64_t v13 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v15[0];
  v15[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v14;
  long long v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v17[0];
  v17[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v7);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsSubresourceUniqueRedirectFrom(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v17, &v16, 0);
  if (a3) {
    [a3 _apiObject];
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v15, &v14, 0);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v6 = &unk_1EE9E2098;
  uint64_t v13 = v6;
  WebKit::WebsiteDataStore::setSubresourceUniqueRedirectFrom(v5, (const WTF::URL *)v17, (const WTF::URL *)v15, (uint64_t *)&v13);
  uint64_t v8 = (uint64_t)v13;
  uint64_t v13 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v15[0];
  v15[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v14;
  long long v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v17[0];
  v17[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v7);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsTopFrameUniqueRedirectTo(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v17, &v16, 0);
  if (a3) {
    [a3 _apiObject];
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v15, &v14, 0);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v6 = &unk_1EE9E20C0;
  uint64_t v13 = v6;
  WebKit::WebsiteDataStore::setTopFrameUniqueRedirectTo(v5, (const WTF::URL *)v17, (const WTF::URL *)v15, (uint64_t *)&v13);
  uint64_t v8 = (uint64_t)v13;
  uint64_t v13 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v15[0];
  v15[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v14;
  long long v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v17[0];
  v17[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v7);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsTopFrameUniqueRedirectFrom(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v17, &v16, 0);
  if (a3) {
    [a3 _apiObject];
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v15, &v14, 0);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v6 = &unk_1EE9E20E8;
  uint64_t v13 = v6;
  WebKit::WebsiteDataStore::setTopFrameUniqueRedirectFrom(v5, (const WTF::URL *)v17, (const WTF::URL *)v15, (uint64_t *)&v13);
  uint64_t v8 = (uint64_t)v13;
  uint64_t v13 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v15[0];
  v15[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v14;
  long long v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v17[0];
  v17[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v7);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsCrossSiteLoadWithLinkDecoration(void *a1, void *a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    uint64_t v11 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v11 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v23, &v22, 0);
  if (a3) {
    [a3 _apiObject];
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v21, &v20, 0);
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v12 = &unk_1EE9E2110;
  v12[1] = a5;
  v12[2] = a6;
  uint64_t v19 = v12;
  WebKit::WebsiteDataStore::setCrossSiteLoadWithLinkDecorationForTesting(v11, (const WTF::URL *)v23, (const WTF::URL *)v21, a4, (uint64_t *)&v19);
  uint64_t v14 = (uint64_t)v19;
  uint64_t v19 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  long long v15 = v21[0];
  v21[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v13);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  char v16 = v20;
  long long v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v13);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = v23[0];
  v23[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v13);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t result = v22;
  long long v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreSetStatisticsTimeToLiveUserInteraction(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  if (a1) {
    uint64_t v7 = (uint64_t *)[a1 _apiObject];
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E2138;
  v8[1] = a2;
  v8[2] = a3;
  uint64_t v10 = v8;
  WebKit::WebsiteDataStore::setTimeToLiveUserInteraction(v7, (uint64_t *)&v10, a4);
  uint64_t result = (uint64_t)v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreStatisticsProcessStatisticsAndDataRecords(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = (uint64_t *)[a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E2160;
  v6[1] = a2;
  v6[2] = a3;
  uint64_t v8 = v6;
  WebKit::WebsiteDataStore::scheduleStatisticsAndDataRecordsProcessing(v5, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreStatisticsUpdateCookieBlocking(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = (uint64_t *)[a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E2188;
  v6[1] = a2;
  v6[2] = a3;
  uint64_t v8 = v6;
  WebKit::WebsiteDataStore::scheduleCookieBlockingUpdate(v5, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreSetResourceLoadStatisticsTimeAdvanceForTesting(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  if (a1) {
    uint64_t v7 = (uint64_t *)[a1 _apiObject];
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E21B0;
  v8[1] = a2;
  v8[2] = a3;
  uint64_t v10 = v8;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsTimeAdvanceForTesting(v7, (uint64_t *)&v10, a4);
  uint64_t result = (uint64_t)v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreSetStatisticsIsRunningTest(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    uint64_t v7 = (uint64_t *)[a1 _apiObject];
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E21D8;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v10 = v8;
  WebKit::WebsiteDataStore::setIsRunningResourceLoadStatisticsTest(v7, a2, (uint64_t *)&v10);
  uint64_t result = (uint64_t)v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreSetStatisticsShouldClassifyResourcesBeforeDataRecordsRemoval(void *a1, char a2)
{
  if (a1) {
    uint64_t v3 = (uint64_t *)[a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9E2200;
  uint64_t v6 = v4;
  WebKit::WebsiteDataStore::setShouldClassifyResourcesBeforeDataRecordsRemoval(v3, a2, (uint64_t *)&v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreSetStatisticsMinimumTimeBetweenDataRecordsRemoval(void *a1, double a2)
{
  if (a1) {
    uint64_t v3 = (uint64_t *)[a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9E2228;
  uint64_t v6 = v4;
  WebKit::WebsiteDataStore::setMinimumTimeBetweenDataRecordsRemoval(v3, (uint64_t *)&v6, a2);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreSetStatisticsGrandfatheringTime(void *a1, double a2)
{
  if (a1) {
    uint64_t v3 = (uint64_t *)[a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9E2250;
  uint64_t v6 = v4;
  WebKit::WebsiteDataStore::setGrandfatheringTime(v3, (uint64_t *)&v6, a2);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreSetStatisticsMaxStatisticsEntries(void *a1, unsigned int a2)
{
  if (a1) {
    uint64_t v3 = (uint64_t *)[a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9E2278;
  uint64_t v6 = v4;
  WebKit::WebsiteDataStore::setMaxStatisticsEntries(v3, a2, (uint64_t *)&v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreSetStatisticsPruneEntriesDownTo(void *a1, unsigned int a2)
{
  if (a1) {
    uint64_t v3 = (uint64_t *)[a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9E22A0;
  uint64_t v6 = v4;
  WebKit::WebsiteDataStore::setPruneEntriesDownTo(v3, a2, (uint64_t *)&v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreStatisticsClearInMemoryAndPersistentStore(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = (uint64_t *)[a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E22C8;
  v6[1] = a2;
  v6[2] = a3;
  uint64_t v8 = v6;
  WebKit::WebsiteDataStore::scheduleClearInMemoryAndPersistent(v5, 1, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreStatisticsClearInMemoryAndPersistentStoreModifiedSinceHours(void *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v7 = (uint64_t *)a1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  WTF::WallTime::now((WTF::WallTime *)a1);
  double v9 = v8 + (double)a2 * -3600.0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v10 = &unk_1EE9E22F0;
  v10[1] = a3;
  v10[2] = a4;
  uint64_t v12 = v10;
  WebKit::WebsiteDataStore::scheduleClearInMemoryAndPersistent(v7, 1, (uint64_t *)&v12, v9);
  uint64_t result = (uint64_t)v12;
  uint64_t v12 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreStatisticsClearThroughWebsiteDataRemoval(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = [a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E2318;
  v6[1] = a2;
  v6[2] = a3;
  double v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 4096, (uint64_t *)&v8, 0.0);
  uint64_t result = (uint64_t)v8;
  double v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreStatisticsDeleteCookiesForTesting(void *a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    double v9 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    double v9 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v17, &v16, 0);
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v10 = &unk_1EE9E2340;
  v10[1] = a4;
  v10[2] = a5;
  long long v15 = v10;
  WebKit::WebsiteDataStore::deleteCookiesForTesting(v9, (const WTF::URL *)v17, a3, (uint64_t *)&v15);
  uint64_t v12 = (uint64_t)v15;
  long long v15 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v17[0];
  v17[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreStatisticsHasLocalStorage(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v7 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v7 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v15, &v14, 0);
  double v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E2368;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v13 = v8;
  WebKit::WebsiteDataStore::hasLocalStorageForTesting(v7, (const WTF::URL *)v15, (uint64_t *)&v13);
  uint64_t v10 = (uint64_t)v13;
  uint64_t v13 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreSetStatisticsCacheMaxAgeCap(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  if (a1) {
    uint64_t v7 = (uint64_t *)[a1 _apiObject];
  }
  else {
    uint64_t v7 = 0;
  }
  double v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E2390;
  v8[1] = a2;
  v8[2] = a3;
  uint64_t v10 = v8;
  WebKit::WebsiteDataStore::setCacheMaxAgeCapForPrevalentResources(v7, (uint64_t *)&v10, a4);
  uint64_t result = (uint64_t)v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreStatisticsHasIsolatedSession(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v7 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v7 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v15, &v14, 0);
  double v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E23B8;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v13 = v8;
  WebKit::WebsiteDataStore::hasIsolatedSessionForTesting(v7, (const WTF::URL *)v15, (uint64_t *)&v13);
  uint64_t v10 = (uint64_t)v13;
  uint64_t v13 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreHasAppBoundSession(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = (uint64_t *)[a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E23E0;
  v6[1] = a2;
  v6[2] = a3;
  double v8 = v6;
  WebKit::WebsiteDataStore::hasAppBoundSession(v5, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  double v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreSetResourceLoadStatisticsShouldDowngradeReferrerForTesting(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    uint64_t v7 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
  }
  else {
    uint64_t v7 = 0;
  }
  double v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E2408;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v10 = v8;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsShouldDowngradeReferrerForTesting(v7, a2, (uint64_t *)&v10);
  uint64_t result = (uint64_t)v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreSetResourceLoadStatisticsShouldBlockThirdPartyCookiesForTesting(void *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a1) {
    uint64_t v9 = [a1 _apiObject];
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v10 = &unk_1EE9E2430;
  v10[1] = a4;
  v10[2] = a5;
  long long v15 = v10;
  if (a3) {
    int v11 = 3;
  }
  else {
    int v11 = 0;
  }
  if (a2) {
    int v12 = v11;
  }
  else {
    int v12 = 4;
  }
  WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode(v9, v12, (uint64_t *)&v15);
  uint64_t result = (uint64_t)v15;
  if (v15)
  {
    uint64_t v14 = *(uint64_t (**)(void))(*v15 + 8);
    return v14();
  }
  return result;
}

uint64_t WKWebsiteDataStoreSetResourceLoadStatisticsFirstPartyWebsiteDataRemovalModeForTesting(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    uint64_t v7 = (uint64_t *)[a1 _apiObject];
  }
  else {
    uint64_t v7 = 0;
  }
  double v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E2458;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v10 = v8;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsFirstPartyWebsiteDataRemovalModeForTesting(v7, a2, (uint64_t *)&v10);
  uint64_t result = (uint64_t)v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetResourceLoadStatisticsToSameSiteStrictCookiesForTesting(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v7 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v7 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v15, &v14, 0);
  double v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E2480;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v13 = v8;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsToSameSiteStrictCookiesForTesting(v7, (const WTF::URL *)v15, (uint64_t *)&v13);
  uint64_t v10 = (uint64_t)v13;
  uint64_t v13 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  int v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetResourceLoadStatisticsFirstPartyHostCNAMEDomainForTesting(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v9 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v9 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v21, &v20, 0);
  if (a3) {
    [a3 _apiObject];
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v19, &v18, 0);
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v10 = &unk_1EE9E24A8;
  v10[1] = a4;
  v10[2] = a5;
  uint64_t v17 = v10;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsFirstPartyHostCNAMEDomainForTesting(v9, (WTF::URL *)v21, (WTF::URL *)v19, (uint64_t *)&v17);
  uint64_t v12 = (uint64_t)v17;
  uint64_t v17 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v19[0];
  v19[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = v18;
  uint64_t v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v11);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  long long v15 = v21[0];
  v21[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v11);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t result = v20;
  long long v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetResourceLoadStatisticsThirdPartyCNAMEDomainForTesting(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v7 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v7 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19972E890](v15, &v14, 0);
  double v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E24D0;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v13 = v8;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsThirdPartyCNAMEDomainForTesting(v7, (WTF::URL *)v15, (uint64_t *)&v13);
  uint64_t v10 = (uint64_t)v13;
  uint64_t v13 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  int v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WKWebsiteDataStoreSetAppBoundDomainsForTesting(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v6 = [a1 _apiObject];
    CFRetain(*(CFTypeRef *)(v6 + 8));
    uint64_t v7 = *(unsigned int *)(v6 + 28);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  unsigned int v8 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(v7);
  if (v8 <= 8) {
    unsigned int v9 = 8;
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = WTF::fastZeroedMalloc((WTF *)(8 * v9 + 16));
  long long v23 = (WTF::StringImpl **)(v10 + 16);
  *(_DWORD *)(v10 + 8) = v9 - 1;
  *(_DWORD *)(v10 + 12) = v9;
  *(void *)uint64_t v10 = 0;
  if (v7)
  {
    for (unint64_t i = 0; i != v7; ++i)
    {
      uint64_t v12 = API::Array::at<API::URL>(v6, i);
      if (v12)
      {
        WTF::URL::URL((uint64_t)v21, (WTF::StringImpl **)(v12 + 16));
        WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v22, (const WTF::URL *)v21);
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v23, &v22, (uint64_t)&v20);
        uint64_t v14 = v22;
        long long v22 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v13);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
        long long v15 = v21[0];
        v21[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v13);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
      }
    }
  }
  char v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(void *)char v16 = &unk_1EE9E24F8;
  *((void *)v16 + 1) = a2;
  *((void *)v16 + 2) = a3;
  v21[0] = v16;
  WebKit::WebsiteDataStore::setAppBoundDomainsForTesting((uint64_t *)&v23, (uint64_t *)v21, v17);
  uint64_t v19 = v21[0];
  v21[0] = 0;
  if (v19) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v19 + 8))(v19);
  }
  if (!v23)
  {
    if (!a1) {
      return;
    }
    goto LABEL_22;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v23, v18);
  if (a1) {
LABEL_22:
  }
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

void WKWebsiteDataStoreSetManagedDomainsForTesting(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v6 = [a1 _apiObject];
    CFRetain(*(CFTypeRef *)(v6 + 8));
    uint64_t v7 = *(unsigned int *)(v6 + 28);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  unsigned int v8 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(v7);
  if (v8 <= 8) {
    unsigned int v9 = 8;
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = WTF::fastZeroedMalloc((WTF *)(8 * v9 + 16));
  long long v23 = (WTF::StringImpl **)(v10 + 16);
  *(_DWORD *)(v10 + 8) = v9 - 1;
  *(_DWORD *)(v10 + 12) = v9;
  *(void *)uint64_t v10 = 0;
  if (v7)
  {
    for (unint64_t i = 0; i != v7; ++i)
    {
      uint64_t v12 = API::Array::at<API::URL>(v6, i);
      if (v12)
      {
        WTF::URL::URL((uint64_t)v21, (WTF::StringImpl **)(v12 + 16));
        WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v22, (const WTF::URL *)v21);
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v23, &v22, (uint64_t)&v20);
        uint64_t v14 = v22;
        long long v22 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v13);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
        long long v15 = v21[0];
        v21[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v13);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
      }
    }
  }
  char v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(void *)char v16 = &unk_1EE9E2520;
  *((void *)v16 + 1) = a2;
  *((void *)v16 + 2) = a3;
  v21[0] = v16;
  WebKit::WebsiteDataStore::setManagedDomainsForTesting((uint64_t *)&v23, (uint64_t *)v21, v17);
  uint64_t v19 = v21[0];
  v21[0] = 0;
  if (v19) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v19 + 8))(v19);
  }
  if (!v23)
  {
    if (!a1) {
      return;
    }
    goto LABEL_22;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v23, v18);
  if (a1) {
LABEL_22:
  }
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

unsigned int *WKWebsiteDataStoreStatisticsResetToConsistentState(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E2548;
  v6[1] = a2;
  v6[2] = a3;
  uint64_t v7 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v7 = 1;
  *(void *)(v7 + 8) = v6;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  atomic_fetch_add((atomic_uint *volatile)v7, 1u);
  unsigned int v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v8 = &unk_1EE9E2570;
  v8[1] = v7;
  uint64_t v25 = v8;
  WebKit::WebsiteDataStore::clearResourceLoadStatisticsInWebProcesses((WebKit::WebsiteDataStore *)a1, (uint64_t *)&v25);
  if (v25) {
    (*(void (**)(void *))(*v25 + 8))(v25);
  }
  atomic_fetch_add((atomic_uint *volatile)v7, 1u);
  unsigned int v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9E2598;
  v9[1] = v7;
  uint64_t v25 = v9;
  WebKit::WebsiteDataStore::resetCacheMaxAgeCapForPrevalentResources((uint64_t *)a1, (uint64_t *)&v25);
  uint64_t v10 = (uint64_t)v25;
  uint64_t v25 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  atomic_fetch_add((atomic_uint *volatile)v7, 1u);
  int v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v11 = &unk_1EE9E25C0;
  v11[1] = v7;
  uint64_t v25 = v11;
  WebKit::WebsiteDataStore::resetCrossSiteLoadsWithLinkDecorationForTesting((uint64_t *)a1, (uint64_t *)&v25);
  uint64_t v12 = (uint64_t)v25;
  uint64_t v25 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  atomic_fetch_add((atomic_uint *volatile)v7, 1u);
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v13 = &unk_1EE9E25E8;
  v13[1] = v7;
  uint64_t v25 = v13;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsShouldDowngradeReferrerForTesting((WebKit::WebsiteDataStore *)a1, 1, (uint64_t *)&v25);
  uint64_t v14 = (uint64_t)v25;
  uint64_t v25 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  atomic_fetch_add((atomic_uint *volatile)v7, 1u);
  long long v15 = (void *)WTF::fastMalloc((WTF *)0x10);
  *long long v15 = &unk_1EE9E2610;
  v15[1] = v7;
  uint64_t v25 = v15;
  WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode((uint64_t)a1, 4, (uint64_t *)&v25);
  if (v25) {
    (*(void (**)(void *))(*v25 + 8))(v25);
  }
  atomic_fetch_add((atomic_uint *volatile)v7, 1u);
  char v16 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v16 = &unk_1EE9E2638;
  v16[1] = v7;
  uint64_t v25 = v16;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsShouldEnbleSameSiteStrictEnforcementForTesting((WebKit::WebsiteDataStore *)a1, 1, (uint64_t *)&v25);
  uint64_t v17 = (uint64_t)v25;
  uint64_t v25 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  atomic_fetch_add((atomic_uint *volatile)v7, 1u);
  uint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v18 = &unk_1EE9E2660;
  v18[1] = v7;
  uint64_t v25 = v18;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsFirstPartyWebsiteDataRemovalModeForTesting((uint64_t *)a1, 0, (uint64_t *)&v25);
  uint64_t v19 = (uint64_t)v25;
  uint64_t v25 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  atomic_fetch_add((atomic_uint *volatile)v7, 1u);
  uint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v20 = &unk_1EE9E2688;
  v20[1] = v7;
  uint64_t v25 = v20;
  WebKit::WebsiteDataStore::resetParametersToDefaultValues((uint64_t *)a1, (uint64_t *)&v25);
  uint64_t v21 = (uint64_t)v25;
  uint64_t v25 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  atomic_fetch_add((atomic_uint *volatile)v7, 1u);
  long long v22 = (void *)WTF::fastMalloc((WTF *)0x10);
  *long long v22 = &unk_1EE9E26B0;
  v22[1] = v7;
  uint64_t v25 = v22;
  WebKit::WebsiteDataStore::scheduleClearInMemoryAndPersistent((uint64_t *)a1, 0, (uint64_t *)&v25);
  uint64_t v23 = (uint64_t)v25;
  uint64_t v25 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v7);
}

uint64_t WKWebsiteDataStoreRemoveAllFetchCaches(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = [a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E26D8;
  v6[1] = a2;
  v6[2] = a3;
  unsigned int v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 0x8000, (uint64_t *)&v8, -INFINITY);
  uint64_t result = (uint64_t)v8;
  unsigned int v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreRemoveNetworkCache(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = [a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E2700;
  v6[1] = a2;
  v6[2] = a3;
  unsigned int v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 2, (uint64_t *)&v8, -INFINITY);
  uint64_t result = (uint64_t)v8;
  unsigned int v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreRemoveMemoryCaches(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = [a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E2728;
  v6[1] = a2;
  v6[2] = a3;
  unsigned int v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 4, (uint64_t *)&v8, -INFINITY);
  uint64_t result = (uint64_t)v8;
  unsigned int v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreRemoveFetchCacheForOrigin(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  LOBYTE(v21) = 0;
  char v23 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v26 = 0;
  if (a2) {
    uint64_t v7 = [a2 _apiObject];
  }
  else {
    uint64_t v7 = 0;
  }
  int v20 = 0x8000;
  WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)&v24, v7 + 16, (uint64_t)&v27);
  unsigned int v8 = v19;
  uint64_t v19 = 0;
  char v27 = v8;
  int v28 = 0x8000;
  LOBYTE(v29) = 0;
  char v31 = 0;
  long long v32 = v24;
  long long v9 = v25;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v33 = v9;
  uint64_t v10 = v26;
  uint64_t v26 = 0;
  uint64_t v34 = v10;
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v18, (uint64_t)&v27, 1uLL);
  if (v34) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v34, v11);
  }
  if (*((void *)&v33 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v33 + 1), v11);
  }
  if ((void)v33) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v33, v11);
  }
  if (*((void *)&v32 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v32 + 1), v11);
  }
  if ((void)v32) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v32, v11);
  }
  if (v31 && v30) {
    WTF::fastFree((WTF *)(v30 - 16), v11);
  }
  uint64_t v12 = v27;
  char v27 = 0;
  if (!v12)
  {
LABEL_19:
    if (!a1) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (*(_DWORD *)v12 != 2)
  {
    *(_DWORD *)v12 -= 2;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy(v12, v11);
  if (a1) {
LABEL_20:
  }
    a1 = (void *)[a1 _apiObject];
LABEL_21:
  uint64_t v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v13 = &unk_1EE9E2750;
  *((void *)v13 + 1) = a3;
  *((void *)v13 + 2) = a4;
  char v27 = v13;
  WebKit::WebsiteDataStore::removeData((uint64_t)a1, 0x8000, v18, (uint64_t *)&v27);
  long long v15 = v27;
  char v27 = 0;
  if (v15) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v15 + 8))(v15);
  }
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v14);
  if (v26) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v26, v16);
  }
  if (*((void *)&v25 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v25 + 1), v16);
  }
  if ((void)v25) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v25, v16);
  }
  if (*((void *)&v24 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v24 + 1), v16);
  }
  if ((void)v24) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v24, v16);
  }
  if (v23 && v22) {
    WTF::fastFree((WTF *)(v22 - 16), v16);
  }
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreRemoveAllIndexedDatabases(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = [a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E2778;
  v6[1] = a2;
  v6[2] = a3;
  unsigned int v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 128, (uint64_t *)&v8, -INFINITY);
  uint64_t result = (uint64_t)v8;
  unsigned int v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreRemoveLocalStorage(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = [a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E27A0;
  v6[1] = a2;
  v6[2] = a3;
  unsigned int v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 32, (uint64_t *)&v8, -INFINITY);
  uint64_t result = (uint64_t)v8;
  unsigned int v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreRemoveAllServiceWorkerRegistrations(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = [a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E27C8;
  v6[1] = a2;
  v6[2] = a3;
  unsigned int v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 0x4000, (uint64_t *)&v8, -INFINITY);
  uint64_t result = (uint64_t)v8;
  unsigned int v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreGetFetchCacheOrigins(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = (WTF::WorkQueue *)[a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E27F0;
  v6[1] = a2;
  v6[2] = a3;
  long long v9 = v6;
  WebKit::WebsiteDataStore::fetchData(v5, 0x8000, 0, (uint64_t *)&v9);
  uint64_t result = (uint64_t)v9;
  if (v9)
  {
    unsigned int v8 = *(uint64_t (**)(void))(*v9 + 8);
    return v8();
  }
  return result;
}

uint64_t WKWebsiteDataStoreGetFetchCacheSizeForOrigin(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    uint64_t v7 = (WTF::WorkQueue *)[a1 _apiObject];
  }
  else {
    uint64_t v7 = 0;
  }
  unsigned int v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v8 = &unk_1EE9E2818;
  v8[1] = a2;
  v8[2] = a3;
  v8[3] = a4;
  int v11 = v8;
  WebKit::WebsiteDataStore::fetchData(v7, 0x8000, 1, (uint64_t *)&v11);
  uint64_t result = (uint64_t)v11;
  if (v11)
  {
    uint64_t v10 = *(uint64_t (**)(void))(*v11 + 8);
    return v10();
  }
  return result;
}

uint64_t WKWebsiteDataStoreClearAllDeviceOrientationPermissions(void *a1)
{
  uint64_t result = [a1 _apiObject];
  uint64_t v3 = *(void *)(result + 368);
  if (v3)
  {
    *(void *)(result + 368) = 0;
    return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v3, v2);
  }
  return result;
}

uint64_t WKWebsiteDataStoreClearPrivateClickMeasurementsThroughWebsiteDataRemoval(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = [a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E2840;
  v6[1] = a2;
  v6[2] = a3;
  unsigned int v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 0x20000, (uint64_t *)&v8, 0.0);
  uint64_t result = (uint64_t)v8;
  unsigned int v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreSetCacheModelSynchronouslyForTesting(void *a1, int a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  if (a2 == 2) {
    char v3 = 2;
  }
  else {
    char v3 = a2 == 1;
  }

  return WebKit::WebsiteDataStore::setCacheModelSynchronouslyForTesting((uint64_t)a1, v3);
}

uint64_t WKWebsiteDataStoreResetQuota(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E2868;
  v6[1] = a2;
  v6[2] = a3;
  unsigned int v8 = v6;
  WebKit::WebsiteDataStore::resetQuota(v5, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  unsigned int v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreResetStoragePersistedState(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E2890;
  v6[1] = a2;
  v6[2] = a3;
  unsigned int v8 = v6;
  WebKit::WebsiteDataStore::resetStoragePersistedState(v5, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  unsigned int v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreClearStorage(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = [a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E28B8;
  v6[1] = a2;
  v6[2] = a3;
  unsigned int v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 581792, (uint64_t *)&v8, -INFINITY);
  uint64_t result = (uint64_t)v8;
  unsigned int v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreSetOriginQuotaRatioEnabled(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    uint64_t v7 = [a1 _apiObject];
  }
  else {
    uint64_t v7 = 0;
  }
  unsigned int v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E28E0;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v10 = v8;
  WebKit::WebsiteDataStore::setOriginQuotaRatioEnabledForTesting(v7, a2, (uint64_t *)&v10);
  uint64_t result = (uint64_t)v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreClearAppBoundSession(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = (uint64_t *)[a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E2908;
  v6[1] = a2;
  v6[2] = a3;
  unsigned int v8 = v6;
  WebKit::WebsiteDataStore::clearAppBoundSession(v5, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  unsigned int v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WebKit *WKWebsiteDataStoreReinitializeAppBoundDomains(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  atomic_store(0, WebKit::hasInitializedAppBoundDomains);

  return WebKit::WebsiteDataStore::initializeAppBoundDomains((WebKit *)a1, 1);
}

WTF::StringImpl *WKWebsiteDataStoreUpdateBundleIdentifierInNetworkProcess(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v7 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v7 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  unsigned int v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E2930;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v12 = v8;
  WebKit::WebsiteDataStore::updateBundleIdentifierInNetworkProcess(v7, (uint64_t *)&v13, (uint64_t *)&v12);
  uint64_t v10 = (uint64_t)v12;
  uint64_t v12 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreClearBundleIdentifierInNetworkProcess(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E2958;
  v6[1] = a2;
  v6[2] = a3;
  unsigned int v8 = v6;
  WebKit::WebsiteDataStore::clearBundleIdentifierInNetworkProcess(v5, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  unsigned int v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKWebsiteDataStoreGetAllStorageAccessEntries(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    uint64_t v7 = (WebKit::WebsiteDataStore *)[a1 _apiObject];
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)(*(void *)([a2 _apiObject] + 32) + 760);
  long long v9 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v9 = &unk_1EE9E2980;
  v9[1] = a3;
  v9[2] = a4;
  uint64_t v12 = v9;
  WebKit::WebsiteDataStore::getAllStorageAccessEntries(v7, v8, (uint64_t *)&v12);
  uint64_t result = (uint64_t)v12;
  if (v12)
  {
    int v11 = *(uint64_t (**)(void))(*v12 + 8);
    return v11();
  }
  return result;
}

uint64_t WKWebsitePoliciesGetTypeID()
{
  return 126;
}

API::WebsitePolicies *WKWebsitePoliciesCreate()
{
  uint64_t v0 = (API::WebsitePolicies *)API::Object::newObject(0xB0uLL, 126);
  uint64_t result = API::WebsitePolicies::WebsitePolicies(v0);
  if (result) {
    return (API::WebsitePolicies *)*((void *)result + 1);
  }
  return result;
}

WTF::StringImpl **WKWebsitePoliciesSetContentBlockersEnabled(void *a1, char a2)
{
  uint64_t v4 = [a1 _apiObject];
  *(unsigned char *)(v4 + 104) = a2;
  uint64_t result = *(WTF::StringImpl ***)(v4 + 112);
  *(void *)(v4 + 112) = 0;
  if (result)
  {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v3);
  }
  return result;
}

uint64_t WKWebsitePoliciesGetContentBlockersEnabled(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 104);
}

uint64_t WKWebsitePoliciesCopyCustomHeaderFields()
{
  return 0;
}

uint64_t WKWebsitePoliciesSetAllowedAutoplayQuirks(void *a1, char a2)
{
  char v2 = a2 & 0xF;
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(result + 98) = v2;
  return result;
}

uint64_t WKWebsitePoliciesGetAllowedAutoplayQuirks(void *a1)
{
  return *(unsigned char *)([a1 _apiObject] + 98) & 0xF;
}

uint64_t WKWebsitePoliciesGetAutoplayPolicy(void *a1)
{
  uint64_t v1 = [a1 _apiObject];
  if (*(unsigned __int8 *)(v1 + 120) - 1 < 3) {
    return (*(unsigned char *)(v1 + 120) - 1) + 1;
  }
  else {
    return 0;
  }
}

unsigned char *WKWebsitePoliciesSetAutoplayPolicy(unsigned char *result, unsigned int a2)
{
  if (a2 <= 3)
  {
    char v2 = a2;
    uint64_t result = (unsigned char *)[result _apiObject];
    result[120] = v2;
  }
  return result;
}

uint64_t WKWebsitePoliciesGetPopUpPolicy(void *a1)
{
  int v1 = *(unsigned __int8 *)([a1 _apiObject] + 121);
  if (v1 == 2) {
    return 2;
  }
  else {
    return v1 == 1;
  }
}

unsigned char *WKWebsitePoliciesSetPopUpPolicy(unsigned char *result, unsigned int a2)
{
  if (a2 <= 2)
  {
    char v2 = a2;
    uint64_t result = (unsigned char *)[result _apiObject];
    result[121] = v2;
  }
  return result;
}

uint64_t WKWebsitePoliciesGetDataStore(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 144);
  if (v1) {
    return *(void *)(v1 + 8);
  }
  else {
    return 0;
  }
}

void WKWebsitePoliciesSetDataStore(void *a1, CFTypeRef *a2)
{
  char v2 = a2;
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v3 = 0;
  if (a2)
  {
LABEL_3:
    char v2 = (CFTypeRef *)[(CFTypeRef *)v2 _apiObject];
    CFRetain(v2[1]);
  }
LABEL_4:
  uint64_t v4 = *(void *)(v3 + 144);
  *(void *)(v3 + 144) = v2;
  if (v4)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

uint64_t WKWindowFeaturesGetTypeID()
{
  return 127;
}

uint64_t WKContextMenuListenerGetTypeID()
{
  return 0;
}

uint64_t WKGetWebURLSchemeTaskInstanceCount()
{
  return 0;
}

uint64_t WKUserScriptGetTypeID()
{
  return 28;
}

uint64_t WKUserScriptCreate(void *a1, void *a2, void *a3, void *a4, int a5, uint64_t a6)
{
  uint64_t v10 = a1;
  if (a2)
  {
    a1 = (void *)[a2 _apiObject];
    int v11 = (WTF::StringImpl *)a1[2];
    if (v11) {
      *(_DWORD *)v11 += 2;
    }
  }
  else
  {
    int v11 = 0;
  }
  long long v36 = v11;
  if (a3)
  {
    a1 = (void *)[a3 _apiObject];
    a3 = a1;
  }
  if (a4)
  {
    a1 = (void *)[a4 _apiObject];
    a4 = a1;
  }
  if (!v11 || !*((_DWORD *)v11 + 1))
  {
    uint64_t v14 = WTF::aboutBlankURL((WTF *)a1);
    long long v15 = *(WTF::StringImpl **)v14;
    if (*(void *)v14) {
      *(_DWORD *)v15 += 2;
    }
    long long v33 = v15;
    long long v16 = *(_OWORD *)(v14 + 24);
    long long v34 = *(_OWORD *)(v14 + 8);
    long long v35 = v16;
LABEL_18:
    if (!v10) {
      goto LABEL_23;
    }
    goto LABEL_19;
  }
  v31[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v31);
  MEMORY[0x19972E8B0](&v33, v31, &v36, 0);
  uint64_t v13 = v31[0];
  v31[0] = 0;
  if (!v13) {
    goto LABEL_18;
  }
  if (*(_DWORD *)v13 == 2)
  {
    WTF::StringImpl::destroy(v13, v12);
    if (!v10) {
      goto LABEL_23;
    }
LABEL_19:
    [v10 _apiObject];
    WTF::String::isolatedCopy();
    if (!a3) {
      goto LABEL_24;
    }
    goto LABEL_20;
  }
  *(_DWORD *)v13 -= 2;
  if (v10) {
    goto LABEL_19;
  }
LABEL_23:
  uint64_t v30 = 0;
  if (!a3)
  {
LABEL_24:
    v29[0] = 0;
    v29[1] = 0;
    if (!a4) {
      goto LABEL_25;
    }
LABEL_21:
    API::Array::toStringVector((unsigned int *)a4, (uint64_t)v28);
    goto LABEL_26;
  }
LABEL_20:
  API::Array::toStringVector((unsigned int *)a3, (uint64_t)v29);
  if (a4) {
    goto LABEL_21;
  }
LABEL_25:
  v28[0] = 0;
  v28[1] = 0;
LABEL_26:
  uint64_t v17 = (API::ContentWorld *)MEMORY[0x19972F8D0](v31, &v30, &v33, v29, v28, a5 == 1, a6, 0);
  uint64_t v18 = API::ContentWorld::pageContentWorld(v17);
  API::UserScript::create((uint64_t *)v31, (uint64_t)v18, &v32);
  if (v32) {
    uint64_t v20 = *((void *)v32 + 1);
  }
  else {
    uint64_t v20 = 0;
  }
  long long v32 = 0;
  WebCore::UserScript::~UserScript((WebCore::UserScript *)v31, v19);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v21);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v22);
  long long v24 = v30;
  uint64_t v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  long long v25 = v33;
  long long v33 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v23);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  uint64_t v26 = v36;
  long long v36 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v23);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  return v20;
}

void API::UserScript::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, WebKit **a3@<X8>)
{
  uint64_t v6 = (WebKit *)API::Object::newObject(0x78uLL, 28);
  WebCore::UserScript::UserScript((uint64_t)v8, a1);
  API::UserScript::UserScript(v6, (uint64_t)v8, a2);
  *a3 = v6;
  WebCore::UserScript::~UserScript((WebCore::UserScript *)v8, v7);
}

uint64_t WKUserScriptCreateWithSource(void *a1, int a2, uint64_t a3)
{
  if (a1)
  {
    [a1 _apiObject];
    WTF::String::isolatedCopy();
  }
  else
  {
    uint64_t v18 = 0;
  }
  v17[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v17);
  v16[0] = 0;
  v16[1] = 0;
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v5 = (API::ContentWorld *)MEMORY[0x19972F8D0](v19, &v18, v17, v16, v15, a2 == 1, a3, 0);
  uint64_t v6 = API::ContentWorld::pageContentWorld(v5);
  API::UserScript::create(v19, (uint64_t)v6, &v20);
  if (v20) {
    uint64_t v8 = *((void *)v20 + 1);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v20 = 0;
  WebCore::UserScript::~UserScript((WebCore::UserScript *)v19, v7);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v9);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v10);
  uint64_t v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = v18;
  uint64_t v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  return v8;
}

uint64_t WKUserScriptCopySource(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKUserScriptGetInjectionTime(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 104);
}

uint64_t WKUserScriptGetMainFrameOnly(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 105);
}

uint64_t *WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = result;
  *uint64_t result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  if (a3 < 0x3333334)
  {
    uint64_t v5 = 5 * a3;
    int v6 = 80 * a3;
    uint64_t v7 = WTF::fastMalloc((WTF *)(80 * a3));
    *((_DWORD *)v3 + 2) = (v6 & 0xFFFFFFF0) / 0x50;
    *uint64_t v3 = v7;
    uint64_t v8 = (uint64_t *)(a2 + 16 * v5);
    unsigned int v9 = *((_DWORD *)v3 + 3);
    uint64_t v10 = (uint64_t *)(a2 + 72);
    do
    {
      uint64_t v12 = v10 - 9;
      int v11 = (_DWORD *)*(v10 - 9);
      uint64_t v13 = *v3;
      if (v11) {
        *v11 += 2;
      }
      unsigned int v14 = v9;
      uint64_t v15 = v13 + 80 * v9;
      int v16 = *((_DWORD *)v10 - 16);
      *(unsigned char *)(v15 + 16) = 0;
      *(void *)uint64_t v15 = v11;
      *(_DWORD *)(v15 + 8) = v16;
      *(unsigned char *)(v15 + 32) = 0;
      uint64_t v17 = (unsigned char *)(v15 + 32);
      if (*((unsigned char *)v10 - 40))
      {
        *(void *)(v15 + 16) = *(v10 - 7);
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::HashTable((uint64_t *)(v13 + 80 * v9 + 24), (_DWORD **)v10 - 6);
        unsigned char *v17 = 1;
      }
      uint64_t v18 = (uint64_t *)(v13 + 80 * v14);
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable(v18 + 5, v10 - 4);
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v18 + 6, (void **)v10 - 3);
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v18 + 7, (void **)v10 - 2);
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v18 + 8, (void **)v10 - 1);
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(v18 + 9, v10);
      unsigned int v9 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v9;
      v10 += 10;
    }
    while (v12 + 10 != v8);
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreRemoveITPDataForDomain::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreDoesStatisticsDomainIDExistInDatabase::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a2, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsEphemeral::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a2, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSyncLocalStorage::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 16);
  if (v1) {
    return v1(*(void *)(result + 8));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsDebugModeWithCompletionHandler::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsPrevalentResourceForDebugMode::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsLastSeen::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsMergeStatistic::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsExpiredStatistic::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsPrevalentResource::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsPrevalentResource::$_1,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsVeryPrevalentResource::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsVeryPrevalentResource::$_1,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

void WTF::Detail::CallableWrapper<WKWebsiteDataStoreDumpResourceLoadStatistics::$_0,void,WTF::String const&>::call(uint64_t a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *(void (**)(void, void))(a1 + 16);
  uint64_t v4 = *a2;
  if (*a2) {
    *(_DWORD *)v4 += 2;
  }
  uint64_t v8 = v4;
  API::String::create(&v8, &v9);
  int v6 = v8;
  uint64_t v7 = v9;
  uint64_t v8 = 0;
  unsigned int v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v5);
      if (v7) {
        goto LABEL_7;
      }
LABEL_10:
      v3(0, *(void *)(a1 + 8));
      return;
    }
    *(_DWORD *)v6 -= 2;
  }
  if (!v7) {
    goto LABEL_10;
  }
LABEL_7:
  v3(*((void *)v7 + 1), *(void *)(a1 + 8));
  CFRelease(*((CFTypeRef *)v7 + 1));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsPrevalentResource::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a2, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsVeryPrevalentResource::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a2, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsRegisteredAsSubresourceUnder::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a2, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsRegisteredAsSubFrameUnder::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a2, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsRegisteredAsRedirectingTo::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a2, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsHasHadUserInteraction::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsHasHadUserInteraction::$_1,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsHasHadUserInteraction::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a2, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsOnlyInDatabaseOnce::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a2, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsGrandfathered::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a2, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsCrossSiteLoadWithLinkDecoration::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsTimeToLiveUserInteraction::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsProcessStatisticsAndDataRecords::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsUpdateCookieBlocking::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsTimeAdvanceForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsIsRunningTest::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsClearInMemoryAndPersistentStore::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsClearInMemoryAndPersistentStoreModifiedSinceHours::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsClearThroughWebsiteDataRemoval::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsDeleteCookiesForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsHasLocalStorage::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a2, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsCacheMaxAgeCap::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsHasIsolatedSession::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a2, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreHasAppBoundSession::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a2, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsShouldDowngradeReferrerForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsShouldBlockThirdPartyCookiesForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsFirstPartyWebsiteDataRemovalModeForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsToSameSiteStrictCookiesForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsFirstPartyHostCNAMEDomainForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsThirdPartyCNAMEDomainForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetAppBoundDomainsForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetManagedDomainsForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_1,void>::~CallableWrapper(void *a1)
{
  char v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E2570;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E2570;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_2,void>::~CallableWrapper(void *a1)
{
  char v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E2598;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E2598;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_3,void>::~CallableWrapper(void *a1)
{
  char v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E25C0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_3,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E25C0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_4,void>::~CallableWrapper(void *a1)
{
  char v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E25E8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_4,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E25E8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_5,void>::~CallableWrapper(void *a1)
{
  char v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E2610;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_5,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E2610;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_6,void>::~CallableWrapper(void *a1)
{
  char v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E2638;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_6,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E2638;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_7,void>::~CallableWrapper(void *a1)
{
  char v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E2660;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_7,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E2660;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_8,void>::~CallableWrapper(void *a1)
{
  char v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E2688;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_8,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E2688;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_9,void>::~CallableWrapper(void *a1)
{
  char v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E26B0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_9,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E26B0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreRemoveAllFetchCaches::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreRemoveNetworkCache::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreRemoveMemoryCaches::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreRemoveFetchCacheForOrigin::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreRemoveAllIndexedDatabases::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 16);
  if (v1) {
    return v1(*(void *)(result + 8));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreRemoveLocalStorage::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 16);
  if (v1) {
    return v1(*(void *)(result + 8));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreRemoveAllServiceWorkerRegistrations::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreGetFetchCacheOrigins::$_0,void,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v27 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  unsigned int v4 = *((_DWORD *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  int v28 = v5;
  unsigned int v29 = v4;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v4)
  {
    uint64_t v6 = v3 + 80 * v4;
    do
    {
      uint64_t v7 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)(v3 + 40));
      uint64_t v8 = v7;
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)(v3 + 40);
      if (v11) {
        uint64_t v12 = (WebCore::SecurityOriginData *)(v11 + 32 * *(unsigned int *)(v11 - 4));
      }
      else {
        uint64_t v12 = 0;
      }
      if (v12 != v7)
      {
        do
        {
          WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v30, v8);
          API::SecurityOrigin::create(&v31);
          int v14 = HIDWORD(v33);
          if (HIDWORD(v33) == v33)
          {
            unint64_t v15 = HIDWORD(v33) + ((unint64_t)HIDWORD(v33) >> 2);
            if (v15 >= 0x10) {
              unint64_t v16 = v15 + 1;
            }
            else {
              unint64_t v16 = 16;
            }
            if (v16 <= (unint64_t)HIDWORD(v33) + 1) {
              unint64_t v17 = HIDWORD(v33) + 1;
            }
            else {
              unint64_t v17 = v16;
            }
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v32, v17);
            int v14 = HIDWORD(v33);
            uint64_t v18 = v31;
            uint64_t v31 = 0;
            *(void *)(v32 + 8 * HIDWORD(v33)) = v18;
          }
          else
          {
            uint64_t v19 = v31;
            uint64_t v31 = 0;
            *(void *)(v32 + 8 * HIDWORD(v33)) = v19;
          }
          HIDWORD(v33) = v14 + 1;
          uint64_t v20 = v31;
          uint64_t v31 = 0;
          if (v20) {
            CFRelease(*(CFTypeRef *)(v20 + 8));
          }
          uint64_t v21 = v30;
          uint64_t v30 = 0;
          if (v21) {
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v21, v13);
          }
          while (1)
          {
            uint64_t v8 = (WebCore::SecurityOriginData *)((char *)v8 + 32);
            if (v8 == v10) {
              break;
            }
            if (!WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v8)) {
              goto LABEL_23;
            }
          }
          uint64_t v8 = v10;
LABEL_23:
          ;
        }
        while (v8 != v12);
      }
      v3 += 80;
    }
    while (v3 != v6);
  }
  uint64_t v22 = *(void (**)(void, void))(a1 + 16);
  API::Array::create(&v32, &v31);
  uint64_t v23 = v31;
  if (v31)
  {
    v22(*(void *)(v31 + 8), *(void *)(a1 + 8));
    CFRelease(*(CFTypeRef *)(v23 + 8));
  }
  else
  {
    v22(0, *(void *)(a1 + 8));
  }
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v24);
  return WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v25);
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreGetFetchCacheSizeForOrigin::$_0,void,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v21 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  unsigned int v5 = *((_DWORD *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  int v22 = v4;
  unsigned int v23 = v5;
  uint64_t v6 = *(void **)(a1 + 8);
  if (v6) {
    [v6 _apiObject];
  }
  WTF::String::isolatedCopy();
  WebCore::SecurityOrigin::createFromString((uint64_t *)&v25, (WebCore::SecurityOrigin *)&v24, v7);
  v26[0] = 0;
  int v27 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v26, (uint64_t)v25 + 8);
  unsigned int v9 = v25;
  long long v25 = 0;
  if (v9) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v9, v8);
  }
  uint64_t v10 = v24;
  long long v24 = 0;
  if (!v10)
  {
LABEL_8:
    if (!v5) {
      goto LABEL_26;
    }
    goto LABEL_11;
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v10, v8);
  if (!v5)
  {
LABEL_26:
    (*(void (**)(void, void))(a1 + 24))(0, *(void *)(a1 + 16));
    goto LABEL_29;
  }
LABEL_11:
  uint64_t v11 = v3 + 80 * v5;
  while (1)
  {
    uint64_t v12 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)(v3 + 40));
    uint64_t v13 = v12;
    unint64_t v15 = v14;
    uint64_t v16 = *(void *)(v3 + 40);
    uint64_t v17 = v16 ? v16 + 32 * *(unsigned int *)(v16 - 4) : 0;
    if ((WebCore::SecurityOriginData *)v17 != v12) {
      break;
    }
LABEL_21:
    v3 += 80;
    if (v3 == v11) {
      goto LABEL_26;
    }
  }
  while (!WebCore::operator==())
  {
    while (1)
    {
      uint64_t v13 = (WebCore::SecurityOriginData *)((char *)v13 + 32);
      if (v13 == v15) {
        break;
      }
      if (!WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v13)) {
        goto LABEL_20;
      }
    }
    uint64_t v13 = v15;
LABEL_20:
    if (v13 == (WebCore::SecurityOriginData *)v17) {
      goto LABEL_21;
    }
  }
  if (*(unsigned char *)(v3 + 32)) {
    uint64_t v18 = *(void *)(v3 + 16);
  }
  else {
    uint64_t v18 = 0;
  }
  (*(void (**)(uint64_t, void))(a1 + 24))(v18, *(void *)(a1 + 16));
LABEL_29:
  if (v27 != -1) {
    ((void (*)(WTF **, unsigned char *))off_1EE9E1C18[v27])(&v25, v26);
  }
  return WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v19);
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreClearPrivateClickMeasurementsThroughWebsiteDataRemoval::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreResetQuota::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 16);
  if (v1) {
    return v1(*(void *)(result + 8));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreResetStoragePersistedState::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 16);
  if (v1) {
    return v1(*(void *)(result + 8));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreClearStorage::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 16);
  if (v1) {
    return v1(*(void *)(result + 8));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetOriginQuotaRatioEnabled::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 16);
  if (v1) {
    return v1(*(void *)(result + 8));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreClearAppBoundSession::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreUpdateBundleIdentifierInNetworkProcess::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreClearBundleIdentifierInNetworkProcess::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreGetAllStorageAccessEntries::$_0,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t a2)
{
  int v4 = (char *)WKMutableArrayCreate();
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(WTF::StringImpl ***)a2;
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t v8 = *v6;
      if (*v6) {
        *(_DWORD *)v8 += 2;
      }
      uint64_t v16 = v8;
      WTF::String::utf8();
      if (v15) {
        uint64_t v10 = (WTF *)((char *)v15 + 16);
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = (void *)WKStringCreateWithUTF8CString(v10, v9);
      WKArrayAppendItem(v4, v11);
      if (v11) {
        CFRelease(*(CFTypeRef *)([v11 _apiObject] + 8));
      }
      uint64_t v13 = v15;
      unint64_t v15 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1) {
          WTF::fastFree(v13, v12);
        }
        else {
          --*(_DWORD *)v13;
        }
      }
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v12);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return (*(uint64_t (**)(void, char *))(a1 + 16))(*(void *)(a1 + 8), v4);
}

uint64_t WKIconDatabaseTryGetCGImageForURL()
{
  return 0;
}

uint64_t WKIconDatabaseTryCopyCGImageArrayForURL()
{
  return 0;
}

uint64_t WKFrameGetServerTrust(void *a1)
{
  return *(void *)([a1 _apiObject] + 256);
}

WebKit *WebKit::AuthenticationChallengeProxy::AuthenticationChallengeProxy(WebKit *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(a1);
  *(void *)a1 = &unk_1EE9E29A8;
  WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((uint64_t)a1 + 16, a2);
  uint64_t v10 = *(void *)(a2 + 416);
  *(void *)(a2 + 416) = 0;
  *((void *)a1 + 54) = v10;
  uint64_t v11 = *(void *)(a2 + 424);
  *(void *)(a2 + 424) = 0;
  *((void *)a1 + 56) = 0;
  *((void *)a1 + 57) = 0;
  *((void *)a1 + 55) = v11;
  uint64_t v12 = *a4;
  *a4 = 0;
  uint64_t v13 = *a5;
  *a5 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x20);
  *int v14 = &unk_1EE9E2FB8;
  v14[1] = a3;
  v14[2] = v12;
  v14[3] = v13;
  unint64_t v15 = (WebKit *)API::Object::newObject(0x18uLL, 3);
  *(void *)unint64_t v15 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v15);
  *(void *)unint64_t v15 = &unk_1EE9E29D0;
  *((void *)v15 + 2) = v14;
  *((void *)a1 + 58) = v15;
  v17[0] = 0;
  v17[1] = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v17);
  return a1;
}

void WebKit::AuthenticationChallengeProxy::~AuthenticationChallengeProxy(WebKit::AuthenticationChallengeProxy *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9E29A8;
  uint64_t v3 = *((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 57);
  *((void *)this + 57) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = *((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t v6 = (const void *)*((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)*((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebKit::AuthenticationChallengeProxy *)((char *)this + 16), a2);
}

{
  uint64_t vars8;

  WebKit::AuthenticationChallengeProxy::~AuthenticationChallengeProxy(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::AuthenticationChallengeProxy::proposedCredential(WebKit::AuthenticationChallengeProxy *this)
{
  uint64_t result = *((void *)this + 56);
  if (!result)
  {
    uint64_t v3 = WebCore::AuthenticationChallengeBase::proposedCredential((WebKit::AuthenticationChallengeProxy *)((char *)this + 16));
    uint64_t v4 = API::Object::newObject(0x30uLL, 7);
    uint64_t result = WebKit::WebCredential::WebCredential(v4, v3);
    uint64_t v5 = *((void *)this + 56);
    *((void *)this + 56) = result;
    if (v5)
    {
      CFRelease(*(CFTypeRef *)(v5 + 8));
      return *((void *)this + 56);
    }
  }
  return result;
}

uint64_t WebKit::AuthenticationChallengeProxy::protectionSpace(WebKit::AuthenticationChallengeProxy *this)
{
  uint64_t result = *((void *)this + 57);
  if (!result)
  {
    uint64_t v3 = WebCore::AuthenticationChallengeBase::protectionSpace((WebKit::AuthenticationChallengeProxy *)((char *)this + 16));
    uint64_t v4 = API::Object::newObject(0x30uLL, 14);
    uint64_t result = WebKit::WebProtectionSpace::WebProtectionSpace(v4, v3);
    uint64_t v5 = *((void *)this + 57);
    *((void *)this + 57) = result;
    if (v5)
    {
      CFRelease(*(CFTypeRef *)(v5 + 8));
      return *((void *)this + 57);
    }
  }
  return result;
}

void WebKit::AuthenticationDecisionListener::~AuthenticationDecisionListener(WebKit::AuthenticationDecisionListener *this)
{
  *(void *)this = &unk_1EE9E29D0;
  if (*((void *)this + 2))
  {
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v8);
    CFTypeRef cf = 0;
    uint64_t v2 = *((void *)this + 2);
    *((void *)this + 2) = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v2 + 16))(v2, 2, &v8);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    CFTypeRef v4 = cf;
    CFTypeRef cf = 0;
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = v9;
    unsigned int v9 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = v8;
    uint64_t v8 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v3);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t v7 = *((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  uint64_t vars8;

  WebKit::AuthenticationDecisionListener::~AuthenticationDecisionListener(this);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::AuthenticationDecisionListener::completeChallenge(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    *(void *)(result + 16) = 0;
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
    return v2(v1);
  }
  return result;
}

uint64_t WebKit::WebCredential::WebCredential(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9E29F8;
  CFTypeRef v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(_DWORD **)(a2 + 8);
  if (v5) {
    *v5 += 2;
  }
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(const void **)(a2 + 24);
  *(void *)(a1 + 40) = v6;
  if (v6) {
    CFRetain(v6);
  }
  return a1;
}

void WebKit::WebCredential::~WebCredential(WebKit::WebCredential *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9E29F8;
  uint64_t v3 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
}

{
  uint64_t vars8;

  WebKit::WebCredential::~WebCredential(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::WebProtectionSpace::WebProtectionSpace(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9E2A20;
  CFTypeRef v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(_DWORD **)(a2 + 8);
  if (v5) {
    *v5 += 2;
  }
  *(void *)(a1 + 24) = v5;
  int v6 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 19);
  *(_DWORD *)(a1 + 32) = v6;
  uint64_t v7 = *(const void **)(a2 + 24);
  *(void *)(a1 + 40) = v7;
  if (v7) {
    CFRetain(v7);
  }
  return a1;
}

void WebKit::UIRemoteObjectRegistry::backgroundActivity(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  uint64_t v9 = *(void *)(v8 + 256) + 200;
  uint64_t v10 = WTF::fastMalloc((WTF *)0x28);
  *a4 = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v10, v9, a2, a3, 0, 0);
  if (v7)
  {
    uint64_t v11 = *(const void **)(v7 - 8);
    CFRelease(v11);
  }
}

void WebKit::UIRemoteObjectRegistry::~UIRemoteObjectRegistry(WebKit::UIRemoteObjectRegistry *this, void *a2)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    uint64_t v3 = this;
    WTF::fastFree((WTF *)v2, a2);
    this = v3;
  }

  WebKit::RemoteObjectRegistry::~RemoteObjectRegistry(this, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::UIRemoteObjectRegistry::~UIRemoteObjectRegistry(this, a2);

  WTF::fastFree(v2, v3);
}

IPC::Encoder *WebKit::UIRemoteObjectRegistry::sendInvocation(WebKit::UIRemoteObjectRegistry *this, const WebKit::RemoteObjectInvocation *a2)
{
  uint64_t v4 = *(void *)(*((void *)this + 4) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFRetain(*(CFTypeRef *)(v5 + 8));
  WebKit::WebPageProxy::launchInitialProcessIfNecessary((WebKit::WebProcessProxy **)v5);
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 - 8));
  }

  return WebKit::RemoteObjectRegistry::sendInvocation(this, a2);
}

uint64_t WebKit::UIRemoteObjectRegistry::messageSender(WebKit::UIRemoteObjectRegistry *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 4) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(void *)(v2 + 256);
}

uint64_t WebKit::UIRemoteObjectRegistry::messageDestinationID(WebKit::UIRemoteObjectRegistry *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 4) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v3 = *(void *)(*(void *)(v2 + 32) + 1928);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3;
}

void WebKit::UserMediaCaptureManagerProxy::~UserMediaCaptureManagerProxy(WebKit::UserMediaCaptureManagerProxy *this)
{
  *(void *)this = &unk_1EE9E2AA0;
  (*(void (**)(void, uint64_t))(**((void **)this + 3) + 24))(*((void *)this + 3), 150);
  uint64_t v3 = (void *)*((void *)this + 9);
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v3, v2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 16))(v4);
  }
  WebCore::OrientationNotifier::~OrientationNotifier((WebKit::UserMediaCaptureManagerProxy *)((char *)this + 32), v2);
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v7, v5);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::UserMediaCaptureManagerProxy::~UserMediaCaptureManagerProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *WTF::ThreadSafeWeakHashSet<WebCore::RealtimeMediaSource>::add<WebCore::RealtimeMediaSource,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 152))(a2);
  if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v4))
  {
    __break(0xC471u);
    JUMPOUT(0x198F8DA8CLL);
  }
  char v5 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 16), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 16);
  }
  uint64_t v6 = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 152))(a2);
  uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v6);
  if (!result) {
    goto LABEL_56;
  }
  uint64_t v9 = result;
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  unsigned int v11 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v11;
  uint64_t v12 = *(void *)a1;
  if (v11 > v10)
  {
    if (v12)
    {
      int v13 = *(_DWORD *)(v12 - 4);
      if (!v13) {
        goto LABEL_27;
      }
      int v14 = 0;
      unsigned int v15 = v13 - 1;
      do
      {
        uint64_t v16 = v15;
        uint64_t v17 = (void *)(v12 + 16 * v15);
        if ((unint64_t)(*v17 + 1) >= 2)
        {
          uint64_t v18 = v12 + 16 * v15;
          uint64_t v20 = *(atomic_uchar **)(v18 + 8);
          uint64_t v19 = (atomic_uchar **)(v18 + 8);
          if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v20))
          {
            void *v17 = -1;
            uint64_t v21 = *v19;
            WTF::StringImpl *v19 = 0;
            if (v21) {
              WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v21, v8);
            }
            ++v14;
          }
        }
        --v15;
      }
      while (v16);
      uint64_t v12 = *(void *)a1;
      if (v14)
      {
        *(_DWORD *)(v12 - 16) += v14;
        uint64_t v22 = *(void *)a1;
        if (*(void *)a1) {
          int v23 = *(_DWORD *)(v22 - 12);
        }
        else {
          int v23 = 0;
        }
        *(_DWORD *)(v22 - 12) = v23 - v14;
        uint64_t v12 = *(void *)a1;
      }
      if (v12)
      {
        unsigned int v24 = *(_DWORD *)(v12 - 4);
        if (v24 >= 9 && 6 * *(_DWORD *)(v12 - 12) < v24)
        {
          WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v12 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v12)
          {
            unsigned int v26 = 0;
            goto LABEL_31;
          }
LABEL_28:
          unsigned int v26 = *(_DWORD *)(v12 - 12);
          int v27 = 0x7FFFFFFF;
          if (v26 >= 0x7FFFFFFF) {
            goto LABEL_32;
          }
          goto LABEL_31;
        }
LABEL_27:
        *(_DWORD *)(a1 + 8) = 0;
        goto LABEL_28;
      }
    }
    uint64_t v12 = 0;
    unsigned int v26 = 0;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_31:
    int v27 = v26;
LABEL_32:
    *(_DWORD *)(a1 + 12) = 2 * v27;
  }
  if (v12
    || (WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::expand((uint64_t *)a1),
        (uint64_t v12 = *(void *)a1) != 0))
  {
    int v28 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    int v28 = 0;
  }
  unint64_t v29 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
  unint64_t v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
  unsigned int v32 = v28 & ((v31 >> 31) ^ v31);
  uint64_t v33 = (void *)(v12 + 16 * v32);
  uint64_t v34 = *v33;
  if (*v33)
  {
    long long v35 = 0;
    int v36 = 1;
    do
    {
      if (v34 == a2)
      {
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v9, v8);
        goto LABEL_56;
      }
      if (v34 == -1) {
        long long v35 = v33;
      }
      unsigned int v32 = (v32 + v36) & v28;
      uint64_t v33 = (void *)(v12 + 16 * v32);
      uint64_t v34 = *v33;
      ++v36;
    }
    while (*v33);
    if (v35)
    {
      void *v35 = 0;
      v35[1] = 0;
      --*(_DWORD *)(*(void *)a1 - 16);
      uint64_t v33 = v35;
    }
  }
  uint64_t result = (atomic_uchar *)v33[1];
  *uint64_t v33 = a2;
  v33[1] = v9;
  if (result) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v8);
  }
  uint64_t v37 = *(void *)a1;
  if (*(void *)a1) {
    int v38 = *(_DWORD *)(v37 - 12) + 1;
  }
  else {
    int v38 = 1;
  }
  *(_DWORD *)(v37 - 12) = v38;
  uint64_t v39 = *(void *)a1;
  if (*(void *)a1) {
    int v40 = *(_DWORD *)(v39 - 12);
  }
  else {
    int v40 = 0;
  }
  uint64_t v41 = (*(_DWORD *)(v39 - 16) + v40);
  unint64_t v42 = *(unsigned int *)(v39 - 4);
  if (v42 <= 0x400)
  {
    if (3 * v42 > 4 * v41) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v42 <= 2 * v41) {
LABEL_55:
  }
    uint64_t result = (atomic_uchar *)WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::expand((uint64_t *)a1);
LABEL_56:
  int v43 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 16), (unsigned __int8 *)&v43, 0, memory_order_release, memory_order_relaxed);
  if (v43 != 1)
  {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 16));
  }
  return result;
}

WTF::StringImpl *WebKit::UserMediaCaptureManagerProxy::createMediaSourceForCaptureDeviceWithConstraints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v177 = *MEMORY[0x1E4F143B8];
  uint64_t v162 = a2;
  int v14 = (WebCore::RealtimeMediaSourceCenter *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(unsigned __int8 *)(a3 + 8));
  if (v14)
  {
    int v15 = *(unsigned __int8 *)(a5 + 960);
    v151[0] = 0;
    v151[1] = 0;
    __int16 v152 = 0;
    int v16 = *(unsigned __int8 *)(a3 + 8);
    if ((v16 - 4) < 2)
    {
      int v38 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::singleton(v14);
      uint64_t v39 = WebCore::RealtimeMediaSourceCenter::displayCaptureFactory(v38);
      (*(void (**)(long long *__return_ptr))(*(void *)v39 + 16))(&v165);
      *(_OWORD *)v151 = v165;
      __int16 v152 = v166;
      int v40 = (WTF::StringImpl *)v165;
      if ((void)v165) {
        goto LABEL_109;
      }
      goto LABEL_141;
    }
    if (v16 != 3)
    {
      if (v16 != 1) {
        goto LABEL_141;
      }
      uint64_t v17 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::singleton(v14);
      uint64_t v18 = WebCore::RealtimeMediaSourceCenter::audioCaptureFactory(v17);
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(void *)v18 + 16))(v153);
      if (!v153[0])
      {
        int v59 = a6;
        int v40 = 0;
        v60 = v153[1];
        __int16 v61 = v154;
        v153[0] = 0;
        v153[1] = 0;
        goto LABEL_106;
      }
      uint64_t v20 = (uint64_t *)(a1 + 72);
      uint64_t v19 = *(void *)(a1 + 72);
      if (v19
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)(a1 + 72), 0), (uint64_t v19 = *v20) != 0))
      {
        int v21 = *(_DWORD *)(v19 - 8);
      }
      else
      {
        int v21 = 0;
      }
      unint64_t v22 = (~(a7 << 32) + a7) ^ ((unint64_t)(~(a7 << 32) + a7) >> 22);
      unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
      unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
      unsigned int v25 = v21 & ((v24 >> 31) ^ v24);
      unsigned int v26 = (uint64_t *)(v19 + 48 * v25);
      uint64_t v27 = *v26;
      if (*v26)
      {
        int v28 = 0;
        int v29 = 1;
        while (v27 != a7)
        {
          if (v27 == -1) {
            int v28 = v26;
          }
          unsigned int v25 = (v25 + v29) & v21;
          unsigned int v26 = (uint64_t *)(v19 + 48 * v25);
          uint64_t v27 = *v26;
          ++v29;
          if (!*v26)
          {
            if (v28)
            {
              *((_OWORD *)v28 + 1) = 0u;
              *((_OWORD *)v28 + 2) = 0u;
              *(_OWORD *)int v28 = 0u;
              --*(_DWORD *)(*v20 - 16);
              unsigned int v26 = v28;
            }
            goto LABEL_17;
          }
        }
LABEL_91:
        v94 = (atomic_uchar *)v26[1];
        if (v94)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v165, v94, v26[2]);
          v96 = (WebCore::RealtimeMediaSource *)v165;
          if ((void)v165)
          {
            if ((WTF::equal(*(WTF **)(v165 + 176), *(const WTF::StringImpl **)a3, v95) & 1) == 0
              && !*((unsigned char *)v96 + 294))
            {
              v97 = qword_1EB358820;
              if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_1985F2000, v97, OS_LOG_TYPE_ERROR, "Ending microphone source as new source is using a different device.", buf, 2u);
              }
              WebCore::RealtimeMediaSource::end(v96, 0);
            }
            (*(void (**)(WebCore::RealtimeMediaSource *))(*(void *)v96 + 144))(v96);
          }
        }
        int v40 = v153[0];
        v153[0] = 0;
        v98 = (atomic_uchar *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)v40 + 152))(v40);
        v100 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v98);
        v101 = (atomic_uchar *)v26[1];
        v26[1] = (uint64_t)v100;
        if (v101) {
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v101, v99);
        }
        v26[2] = (uint64_t)v40;
        v102 = v153[1];
        v153[1] = 0;
        int v59 = a6;
        if (v102)
        {
          if (*(_DWORD *)v102 != 2)
          {
            v60 = 0;
            __int16 v61 = 0;
            *(_DWORD *)v102 -= 2;
            goto LABEL_106;
          }
          WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v99);
        }
        v60 = 0;
        __int16 v61 = 0;
LABEL_106:
        v103 = v153[0];
        v153[0] = 0;
        if (v103) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v103 + 144))(v103);
        }
        v151[0] = v40;
        v151[1] = v60;
        __int16 v152 = v61;
        a6 = v59;
        if (v40) {
          goto LABEL_109;
        }
        goto LABEL_141;
      }
LABEL_17:
      *unsigned int v26 = a7;
      *(void *)&long long v167 = 0;
      long long v165 = 0u;
      long long v166 = 0u;
      WTF::GenericHashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>::assignToEmpty<WebKit::UserMediaCaptureManagerProxy::PageSources,WebKit::UserMediaCaptureManagerProxy::PageSources>((uint64_t)(v26 + 1), (uint64_t *)&v165);
      if ((void)v166) {
        WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(v166, v30);
      }
      unint64_t v31 = (atomic_uchar *)v165;
      *(void *)&long long v165 = 0;
      if (v31) {
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v31, v30);
      }
      uint64_t v32 = *v20;
      if (*v20) {
        int v33 = *(_DWORD *)(v32 - 12) + 1;
      }
      else {
        int v33 = 1;
      }
      *(_DWORD *)(v32 - 12) = v33;
      uint64_t v90 = *v20;
      if (*v20) {
        int v91 = *(_DWORD *)(v90 - 12);
      }
      else {
        int v91 = 0;
      }
      uint64_t v92 = (*(_DWORD *)(v90 - 16) + v91);
      unint64_t v93 = *(unsigned int *)(v90 - 4);
      if (v93 > 0x400)
      {
        if (v93 > 2 * v92) {
          goto LABEL_91;
        }
      }
      else if (3 * v93 > 4 * v92)
      {
        goto LABEL_91;
      }
      unsigned int v26 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)(a1 + 72), v26);
      goto LABEL_91;
    }
    uint64_t v45 = (uint64_t *)(a1 + 72);
    uint64_t v44 = *(void *)(a1 + 72);
    int v145 = v15;
    if (v44
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)(a1 + 72), 0), (uint64_t v44 = *v45) != 0))
    {
      int v46 = *(_DWORD *)(v44 - 8);
    }
    else
    {
      int v46 = 0;
    }
    unint64_t v47 = (~(a7 << 32) + a7) ^ ((unint64_t)(~(a7 << 32) + a7) >> 22);
    unint64_t v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
    unint64_t v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
    unsigned int v50 = v46 & ((v49 >> 31) ^ v49);
    uint64_t v51 = (uint64_t *)(v44 + 48 * v50);
    uint64_t v52 = *v51;
    int v144 = a6;
    if (*v51)
    {
      v53 = 0;
      int v54 = 1;
      while (v52 != a7)
      {
        if (v52 == -1) {
          v53 = v51;
        }
        unsigned int v50 = (v50 + v54) & v46;
        uint64_t v51 = (uint64_t *)(v44 + 48 * v50);
        uint64_t v52 = *v51;
        ++v54;
        if (!*v51)
        {
          if (v53)
          {
            *((_OWORD *)v53 + 1) = 0u;
            *((_OWORD *)v53 + 2) = 0u;
            *(_OWORD *)v53 = 0u;
            --*(_DWORD *)(*v45 - 16);
            uint64_t v51 = v53;
          }
          goto LABEL_52;
        }
      }
LABEL_66:
      v66 = (atomic_uchar *)(v51 + 3);
      WTF::ThreadSafeWeakHashSet<WebCore::RealtimeMediaSource>::values((uint64_t)v153, (atomic_uchar *)v51 + 24);
      v67 = v153[0];
      v153[0] = 0;
      *(void *)&long long v165 = v67;
      LODWORD(v67) = v153[1];
      unint64_t v68 = HIDWORD(v153[1]);
      v153[1] = 0;
      *((void *)&v165 + 1) = __PAIR64__(v68, v67);
      *(void *)&long long v166 = 0;
      WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v153, v69);
      *(void *)buf = 0;
      v153[0] = 0;
      uint64_t v164 = 0;
      v153[1] = 0;
      *(void *)&long long v154 = 0;
      WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v70);
      if (v68)
      {
        unint64_t v73 = 0;
        while (1)
        {
          if (v73 >= v68)
          {
            __break(0xC471u);
            JUMPOUT(0x198F8EBECLL);
          }
          uint64_t v74 = *(void *)(v165 + 8 * v73);
          if (WTF::equal(*(WTF **)(v74 + 176), *(const WTF::StringImpl **)a3, v72))
          {
            if (!*(unsigned char *)(v74 + 294)) {
              break;
            }
          }
          unint64_t v68 = HIDWORD(v165);
          if ((unint64_t)v166 >= HIDWORD(v165))
          {
            __break(0xC471u);
            JUMPOUT(0x198F8EC0CLL);
          }
          unint64_t v73 = v166 + 1;
          *(void *)&long long v166 = v73;
          if (v73 == HIDWORD(v165)) {
            goto LABEL_73;
          }
        }
        (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v74 + 48))(buf, v74);
        WTF::ThreadSafeWeakHashSet<WebCore::RealtimeMediaSource>::add<WebCore::RealtimeMediaSource,(void *)0>((uint64_t)v66, *(uint64_t *)buf);
        int v40 = *(WTF::StringImpl **)buf;
        WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v153, v88);
        WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v165, v89);
        __int16 v86 = 0;
        v87 = 0;
        a6 = v144;
        int v15 = v145;
      }
      else
      {
LABEL_73:
        WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v153, v71);
        v76 = (WebCore::RealtimeMediaSourceCenter *)WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v165, v75);
        v77 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::singleton(v76);
        uint64_t v78 = WebCore::RealtimeMediaSourceCenter::videoCaptureFactory(v77);
        (*(void (**)(long long *__return_ptr))(*(void *)v78 + 16))(&v165);
        if ((void)v165)
        {
          uint64_t v143 = a5;
          WTF::ThreadSafeWeakHashSet<WebCore::RealtimeMediaSource>::values((uint64_t)v153, v66);
          if (HIDWORD(v153[1]))
          {
            v80 = (WebCore::RealtimeMediaSource **)v153[0];
            uint64_t v81 = 8 * HIDWORD(v153[1]);
            do
            {
              v82 = *v80;
              v83 = qword_1EB358820;
              if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_1985F2000, v83, OS_LOG_TYPE_ERROR, "Ending camera source as new source is using a different device.", buf, 2u);
              }
              WebCore::RealtimeMediaSource::end(v82, 0);
              ++v80;
              v81 -= 8;
            }
            while (v81);
          }
          WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v153, v79);
          int v40 = (WTF::StringImpl *)v165;
          *(void *)&long long v165 = 0;
          (*(void (**)(WTF::StringImpl *, uint64_t))(*(void *)v40 + 232))(v40, a1 + 32);
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 104))(*(void *)(a1 + 24), a7, a3);
          WTF::ThreadSafeWeakHashSet<WebCore::RealtimeMediaSource>::add<WebCore::RealtimeMediaSource,(void *)0>((uint64_t)v66, (uint64_t)v40);
          v85 = (WTF::StringImpl *)*((void *)&v165 + 1);
          *((void *)&v165 + 1) = 0;
          a6 = v144;
          if (v85)
          {
            a5 = v143;
            int v15 = v145;
            if (*(_DWORD *)v85 == 2)
            {
              WTF::StringImpl::destroy(v85, v84);
              __int16 v86 = 0;
              v87 = 0;
            }
            else
            {
              __int16 v86 = 0;
              v87 = 0;
              *(_DWORD *)v85 -= 2;
            }
          }
          else
          {
            __int16 v86 = 0;
            v87 = 0;
            a5 = v143;
            int v15 = v145;
          }
        }
        else
        {
          int v40 = 0;
          v87 = (WTF::StringImpl *)*((void *)&v165 + 1);
          __int16 v86 = v166;
          long long v165 = 0uLL;
          a6 = v144;
          int v15 = v145;
        }
        uint64_t v128 = v165;
        *(void *)&long long v165 = 0;
        if (v128) {
          (*(void (**)(uint64_t))(*(void *)v128 + 144))(v128);
        }
      }
      v151[0] = v40;
      v151[1] = v87;
      __int16 v152 = v86;
      if (v40)
      {
LABEL_109:
        v150 = v40;
        v151[0] = 0;
        uint64_t v104 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 48))(*(void *)(a1 + 24));
        uint64_t v105 = WTF::cryptographicallyRandomNumber<unsigned long long>();
        (*(void (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(void *)v40 + 272))(v40, v104, v105);
        v106 = (atomic_uchar *volatile *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v149, v106);
        uint64_t v107 = 0;
        if (a6)
        {
          uint64_t v108 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 96))(*(void *)(a1 + 24));
          uint64_t v107 = v108;
          if (v108) {
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v108 + 16));
          }
        }
        uint64_t v148 = v107;
        uint64_t v109 = v162;
        v110 = (const WTF::MachSendRight *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 64))(*(void *)(a1 + 24));
        WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)&v165, v110);
        uint64_t v111 = WTF::fastMalloc((WTF *)0x560);
        v147 = (_DWORD *)WebKit::UserMediaCaptureManagerProxySourceProxy::UserMediaCaptureManagerProxySourceProxy(v111, v109, (uint64_t *)&v149, (const WTF::MachSendRight *)&v165, (uint64_t *)&v150, &v148);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v165);
        WebKit::UserMediaCaptureManagerProxySourceProxy::observeMedia((WebKit::UserMediaCaptureManagerProxySourceProxy *)v111);
        if (v15
          && (v112 = *(unsigned __int8 **)(v111 + 72),
              (*(void (**)(unsigned __int8 *))(*(void *)v112 + 136))(v112),
              int v113 = v112[112],
              (*(void (**)(unsigned __int8 *))(*(void *)v112 + 144))(v112),
              v113))
        {
          if ((WebCore::MediaTrackConstraintSetMap::isValid((WebCore::MediaTrackConstraintSetMap *)a5) & 1) == 0)
          {
            v142 = off_1EB358938;
            if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
            {
              LODWORD(v165) = 136446210;
              *(void *)((char *)&v165 + 4) = "void WebKit::UserMediaCaptureManagerProxy::createMediaSourceForCaptureDev"
                                               "iceWithConstraints(RealtimeMediaSourceIdentifier, const CaptureDevice &, "
                                               "WebCore::MediaDeviceHashSalts &&, MediaConstraints &&, BOOL, PageIdentifi"
                                               "er, CreateSourceCallback &&)";
              _os_log_fault_impl(&dword_1985F2000, v142, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp 576: Invalid message dispatched %{public}s", (uint8_t *)&v165, 0xCu);
            }
LABEL_165:
            *(unsigned char *)((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24)) + 98) = 1;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            *(void *)buf = v165;
            LOWORD(v164) = 4;
            uint64_t v157 = 4;
            *(_OWORD *)v155 = 0u;
            *(_OWORD *)v156 = 0u;
            *(_OWORD *)v153 = 0u;
            long long v154 = 0u;
            memset(v160, 0, sizeof(v160));
            __int16 v161 = 0;
            uint64_t v158 = 0x3FF0000000000000;
            uint64_t v159 = 0;
            long long v175 = 0u;
            long long v176 = 0u;
            long long v173 = 0u;
            long long v174 = 0u;
            long long v171 = 0u;
            long long v172 = 0u;
            long long v169 = 0u;
            long long v170 = 0u;
            long long v167 = 0u;
            long long v168 = 0u;
            long long v165 = 0u;
            long long v166 = 0u;
            uint64_t v136 = *a8;
            *a8 = 0;
            (*(void (**)(uint64_t, uint8_t *, WTF::StringImpl **, long long *))(*(void *)v136 + 16))(v136, buf, v153, &v165);
            (*(void (**)(uint64_t))(*(void *)v136 + 8))(v136);
            WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v165, v137);
            v138 = v156[1];
            v156[1] = 0;
            if (v138)
            {
              if (*(_DWORD *)v138 == 2) {
                WTF::StringImpl::destroy(v138, v126);
              }
              else {
                *(_DWORD *)v138 -= 2;
              }
            }
            v139 = v156[0];
            v156[0] = 0;
            if (v139)
            {
              if (*(_DWORD *)v139 == 2) {
                WTF::StringImpl::destroy(v139, v126);
              }
              else {
                *(_DWORD *)v139 -= 2;
              }
            }
            v140 = v155[1];
            v155[1] = 0;
            if (v140)
            {
              if (*(_DWORD *)v140 == 2) {
                WTF::StringImpl::destroy(v140, v126);
              }
              else {
                *(_DWORD *)v140 -= 2;
              }
            }
            v141 = *(WTF::StringImpl **)buf;
            *(void *)buf = 0;
            if (v141)
            {
              if (*(_DWORD *)v141 == 2) {
                WTF::StringImpl::destroy(v141, v126);
              }
              else {
                *(_DWORD *)v141 -= 2;
              }
            }
            goto LABEL_128;
          }
          unsigned int v114 = *(_DWORD *)(a5 + 956);
          if (v114)
          {
            v115 = *(WebCore::MediaTrackConstraintSetMap **)(a5 + 944);
            uint64_t v116 = 944 * v114;
            while ((WebCore::MediaTrackConstraintSetMap::isValid(v115) & 1) != 0)
            {
              v115 = (WebCore::MediaTrackConstraintSetMap *)((char *)v115 + 944);
              v116 -= 944;
              if (!v116) {
                goto LABEL_119;
              }
            }
            v135 = off_1EB358938;
            if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
            {
              LODWORD(v165) = 136446210;
              *(void *)((char *)&v165 + 4) = "void WebKit::UserMediaCaptureManagerProxy::createMediaSourceForCaptureDev"
                                               "iceWithConstraints(RealtimeMediaSourceIdentifier, const CaptureDevice &, "
                                               "WebCore::MediaDeviceHashSalts &&, MediaConstraints &&, BOOL, PageIdentifi"
                                               "er, CreateSourceCallback &&)";
              _os_log_fault_impl(&dword_1985F2000, v135, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp 578: Invalid message dispatched %{public}s", (uint8_t *)&v165, 0xCu);
            }
            goto LABEL_165;
          }
LABEL_119:
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v111 + 8), v111);
          v117 = *(atomic_uint **)(v111 + 8);
          if (v117) {
            atomic_fetch_add(v117, 1u);
          }
          uint64_t v118 = *a8;
          *a8 = 0;
          v119 = (void *)WTF::fastMalloc((WTF *)0x20);
          void *v119 = &unk_1EE9E2FE0;
          v119[1] = v117;
          v119[2] = v118;
          v146 = v119;
          WebKit::UserMediaCaptureManagerProxySourceProxy::applyConstraints((unsigned int *)v111, a5, (uint64_t *)&v146);
          if (v146) {
            (*(void (**)(void *))(*v146 + 8))(v146);
          }
        }
        else
        {
          long long v165 = 0uLL;
          uint64_t v120 = WebKit::UserMediaCaptureManagerProxySourceProxy::settings((WebKit::UserMediaCaptureManagerProxySourceProxy *)v111);
          uint64_t v121 = *(void *)(v111 + 72);
          (*(void (**)(uint64_t))(*(void *)v121 + 136))(v121);
          uint64_t v122 = (*(uint64_t (**)(uint64_t))(*(void *)v121 + 120))(v121);
          uint64_t v123 = *a8;
          *a8 = 0;
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v123 + 16))(v123, &v165, v120, v122);
          (*(void (**)(uint64_t))(*(void *)v123 + 8))(v123);
          (*(void (**)(uint64_t))(*(void *)v121 + 144))(v121);
          v125 = (WTF::StringImpl *)v165;
          *(void *)&long long v165 = 0;
          if (v125)
          {
            if (*(_DWORD *)v125 == 2) {
              WTF::StringImpl::destroy(v125, v124);
            }
            else {
              *(_DWORD *)v125 -= 2;
            }
          }
        }
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>((uint64_t *)&v165, (uint64_t *)(a1 + 16), &v162, (uint64_t *)&v147);
LABEL_128:
        if (v147)
        {
          if (v147[4] == 1) {
            (*(void (**)(void))(*(void *)v147 + 8))();
          }
          else {
            --v147[4];
          }
        }
        if (v148) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v148 + 16), v126);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v149);
        if (v150) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v150 + 144))(v150);
        }
LABEL_153:
        v134 = v151[1];
        v151[1] = 0;
        if (v134)
        {
          if (*(_DWORD *)v134 == 2) {
            WTF::StringImpl::destroy(v134, v127);
          }
          else {
            *(_DWORD *)v134 -= 2;
          }
        }
        uint64_t result = v151[0];
        v151[0] = 0;
        if (result) {
          return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 144))(result);
        }
        return result;
      }
LABEL_141:
      uint64_t v157 = 4;
      *(_OWORD *)v155 = 0u;
      *(_OWORD *)v156 = 0u;
      *(_OWORD *)v153 = 0u;
      long long v154 = 0u;
      memset(v160, 0, sizeof(v160));
      __int16 v161 = 0;
      uint64_t v158 = 0x3FF0000000000000;
      uint64_t v159 = 0;
      long long v175 = 0u;
      long long v176 = 0u;
      long long v173 = 0u;
      long long v174 = 0u;
      long long v171 = 0u;
      long long v172 = 0u;
      long long v169 = 0u;
      long long v170 = 0u;
      long long v167 = 0u;
      long long v168 = 0u;
      long long v165 = 0u;
      long long v166 = 0u;
      uint64_t v129 = *a8;
      *a8 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, long long *))(*(void *)v129 + 16))(v129, &v151[1], v153, &v165);
      (*(void (**)(uint64_t))(*(void *)v129 + 8))(v129);
      WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v165, v130);
      v131 = v156[1];
      v156[1] = 0;
      if (v131)
      {
        if (*(_DWORD *)v131 == 2) {
          WTF::StringImpl::destroy(v131, v127);
        }
        else {
          *(_DWORD *)v131 -= 2;
        }
      }
      v132 = v156[0];
      v156[0] = 0;
      if (v132)
      {
        if (*(_DWORD *)v132 == 2) {
          WTF::StringImpl::destroy(v132, v127);
        }
        else {
          *(_DWORD *)v132 -= 2;
        }
      }
      v133 = v155[1];
      v155[1] = 0;
      if (v133)
      {
        if (*(_DWORD *)v133 == 2) {
          WTF::StringImpl::destroy(v133, v127);
        }
        else {
          *(_DWORD *)v133 -= 2;
        }
      }
      goto LABEL_153;
    }
LABEL_52:
    *uint64_t v51 = a7;
    *(void *)&long long v167 = 0;
    long long v165 = 0u;
    long long v166 = 0u;
    WTF::GenericHashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>::assignToEmpty<WebKit::UserMediaCaptureManagerProxy::PageSources,WebKit::UserMediaCaptureManagerProxy::PageSources>((uint64_t)(v51 + 1), (uint64_t *)&v165);
    if ((void)v166) {
      WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(v166, v55);
    }
    uint64_t v56 = (atomic_uchar *)v165;
    *(void *)&long long v165 = 0;
    if (v56) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v56, v55);
    }
    uint64_t v57 = *v45;
    if (*v45) {
      int v58 = *(_DWORD *)(v57 - 12) + 1;
    }
    else {
      int v58 = 1;
    }
    *(_DWORD *)(v57 - 12) = v58;
    uint64_t v62 = *v45;
    if (*v45) {
      int v63 = *(_DWORD *)(v62 - 12);
    }
    else {
      int v63 = 0;
    }
    uint64_t v64 = (*(_DWORD *)(v62 - 16) + v63);
    unint64_t v65 = *(unsigned int *)(v62 - 4);
    if (v65 > 0x400)
    {
      if (v65 > 2 * v64) {
        goto LABEL_66;
      }
    }
    else if (3 * v65 > 4 * v64)
    {
      goto LABEL_66;
    }
    uint64_t v51 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)(a1 + 72), v51);
    goto LABEL_66;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOWORD(v151[1]) = 6;
  uint64_t v157 = 4;
  *(_OWORD *)v155 = 0u;
  *(_OWORD *)v156 = 0u;
  *(_OWORD *)v153 = 0u;
  long long v154 = 0u;
  memset(v160, 0, sizeof(v160));
  __int16 v161 = 0;
  uint64_t v158 = 0x3FF0000000000000;
  uint64_t v159 = 0;
  long long v175 = 0u;
  long long v176 = 0u;
  long long v173 = 0u;
  long long v174 = 0u;
  long long v171 = 0u;
  long long v172 = 0u;
  long long v169 = 0u;
  long long v170 = 0u;
  long long v167 = 0u;
  long long v168 = 0u;
  long long v165 = 0u;
  long long v166 = 0u;
  uint64_t v34 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, long long *))(*(void *)v34 + 16))(v34, v151, v153, &v165);
  (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v165, v35);
  uint64_t v37 = v156[1];
  v156[1] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2) {
      WTF::StringImpl::destroy(v37, v36);
    }
    else {
      *(_DWORD *)v37 -= 2;
    }
  }
  uint64_t v41 = v156[0];
  v156[0] = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, v36);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  unint64_t v42 = v155[1];
  v155[1] = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, v36);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
  uint64_t result = v151[0];
  v151[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v36);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::observeMedia(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  if (!*(unsigned char *)(*((void *)this + 9) + 112)) {
    return WebCore::RealtimeMediaSource::addAudioSampleObserver();
  }
  if (!*((void *)this + 47) && *((double *)this + 48) == 0.0) {
    return WebCore::RealtimeMediaSource::addVideoFrameObserver();
  }
  return WebCore::RealtimeMediaSource::addVideoFrameObserver();
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = *a3 + ~(*a3 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  int v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = *(unsigned int *)(v8 - 4);
        }
        char v22 = 0;
        uint64_t v23 = v8 + 16 * v21;
        goto LABEL_28;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      int v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      uint64_t *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v11 = *a3;
      int v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  uint64_t v20 = *a4;
  *a4 = 0;
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1) {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
    else {
      --*((_DWORD *)result + 4);
    }
  }
  uint64_t v24 = *a2;
  if (*a2) {
    int v25 = *(_DWORD *)(v24 - 12) + 1;
  }
  else {
    int v25 = 1;
  }
  *(_DWORD *)(v24 - 12) = v25;
  uint64_t v26 = *a2;
  if (*a2) {
    int v27 = *(_DWORD *)(v26 - 12);
  }
  else {
    int v27 = 0;
  }
  uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
  unint64_t v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
    {
LABEL_25:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v16);
      int v16 = result;
      uint64_t v26 = *a2;
      if (*a2) {
        unint64_t v29 = *(unsigned int *)(v26 - 4);
      }
      else {
        unint64_t v29 = 0;
      }
    }
  }
  else if (3 * v29 <= 4 * v28)
  {
    goto LABEL_25;
  }
  uint64_t v23 = v26 + 16 * v29;
  char v22 = 1;
LABEL_28:
  uint64_t *v7 = (uint64_t)v16;
  v7[1] = v23;
  *((unsigned char *)v7 + 16) = v22;
  return result;
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::applyConstraints(unsigned int *a1, uint64_t a2, uint64_t *a3)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1 + 2, (uint64_t)a1);
  uint64_t v6 = (atomic_uint *)*((void *)a1 + 1);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  uint64_t v23 = (WTF *)v6;
  WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)v24, a2);
  uint64_t v7 = *(void *)(a2 + 944);
  *(void *)(a2 + 944) = 0;
  uint64_t v29 = v7;
  uint64_t v8 = *(void *)(a2 + 952);
  *(void *)(a2 + 952) = 0;
  uint64_t v30 = v8;
  char v31 = *(unsigned char *)(a2 + 960);
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v32 = v9;
  uint64_t v10 = WTF::fastMalloc((WTF *)0x3E8);
  *(void *)uint64_t v10 = &unk_1EE9E2C70;
  *(void *)(v10 + 8) = a1;
  *(void *)(v10 + 16) = v23;
  WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v10 + 24, (uint64_t)v24);
  *(void *)(v10 + 976) = 0;
  uint64_t v11 = v29;
  uint64_t v29 = 0;
  *(void *)(v10 + 968) = v11;
  uint64_t v12 = v30;
  uint64_t v30 = 0;
  *(void *)(v10 + 976) = v12;
  *(unsigned char *)(v10 + 984) = v31;
  uint64_t v13 = v32;
  uint64_t v32 = 0;
  *(void *)(v10 + 992) = v13;
  uint64_t v33 = v10;
  WebKit::UserMediaCaptureManagerProxySourceProxy::queueAndProcessSerialAction((WTF::RunLoop *)a1, &v33);
  uint64_t v15 = v33;
  uint64_t v33 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v32;
  uint64_t v32 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v14);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v17);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v18);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v26, v19);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v20);
  return 0;
}

void WebKit::UserMediaCaptureManagerProxy::startProducingData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = a2;
  uint64_t v5 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 16), &v15);
  if (v5)
  {
    uint64_t v6 = v5;
    ++*(_DWORD *)(v5 + 16);
    if ((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 56))(*(void *)(a1 + 24)))
    {
      uint64_t v7 = *(void *)(v6 + 72);
      (*(void (**)(uint64_t))(*(void *)v7 + 136))(v7);
      (*(void (**)(void))(**(void **)(a1 + 24) + 72))(*(void *)(a1 + 24));
      uint64_t v8 = (WebCore::RealtimeMediaSourceCenter *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24)
                                                                                            + 80))(*(void *)(a1 + 24), a3);
      if ((v8 & 1) != 0
        || *(void *)(WebCore::RealtimeMediaSourceCenter::singleton(v8) + 88)
        || (*(unsigned int (**)(uint64_t))(*(void *)v7 + 208))(v7) != 3
        || !WTF::processHasEntitlement())
      {
        uint64_t v11 = *(void *)(a1 + 24);
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 208))(v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 88))(v11, v12);
        *(unsigned char *)(v6 + 248) = 1;
        *(unsigned char *)(v6 + 176) = 0;
        WebCore::RealtimeMediaSource::start(*(WebCore::RealtimeMediaSource **)(v6 + 72));
      }
      else
      {
        uint64_t v9 = qword_1EB358820;
        if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v13 = 0;
          _os_log_error_impl(&dword_1985F2000, v9, OS_LOG_TYPE_ERROR, "Unable to set media environment, failing capture.", v13, 2u);
        }
        (*(void (**)(uint64_t))(*(void *)v7 + 240))(v7);
      }
      (*(void (**)(uint64_t))(*(void *)v7 + 144))(v7);
    }
    else
    {
      uint64_t v10 = qword_1EB358820;
      if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1985F2000, v10, OS_LOG_TYPE_ERROR, "Unable to set capture attribution, failing capture.", buf, 2u);
      }
    }
    if (*(_DWORD *)(v6 + 16) == 1) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    else {
      --*(_DWORD *)(v6 + 16);
    }
  }
}

uint64_t WebKit::UserMediaCaptureManagerProxy::stopProducingData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 16), &v4);
  if (result)
  {
    uint64_t v3 = (_DWORD *)result;
    ++*(_DWORD *)(result + 16);
    *(unsigned char *)(result + 176) = 1;
    uint64_t result = WebCore::RealtimeMediaSource::stop(*(WebCore::RealtimeMediaSource **)(result + 72));
    if (v3[4] == 1) {
      return (*(uint64_t (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManagerProxy::removeSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v92 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 16);
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 16), &v92);
  if (!result) {
    return result;
  }
  uint64_t v5 = (_DWORD *)result;
  ++*(_DWORD *)(result + 16);
  uint64_t v6 = *(void *)(result + 72);
  (*(void (**)(uint64_t))(*(void *)v6 + 136))(v6);
  uint64_t v7 = *(void *)(v6 + 72);
  if (!v7) {
    goto LABEL_94;
  }
  uint64_t v8 = *(void *)(v2 + 72);
  if (!v8) {
    goto LABEL_94;
  }
  int v9 = *(_DWORD *)(v8 - 8);
  unint64_t v10 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v9 & ((v12 >> 31) ^ v12);
  unint64_t v14 = (uint64_t *)(v8 + 48 * v13);
  uint64_t v15 = *v14;
  if (*v14 != v7)
  {
    int v16 = 1;
    while (v15)
    {
      unsigned int v13 = (v13 + v16) & v9;
      unint64_t v14 = (uint64_t *)(v8 + 48 * v13);
      uint64_t v15 = *v14;
      ++v16;
      if (*v14 == v7) {
        goto LABEL_10;
      }
    }
    unint64_t v14 = (uint64_t *)(v8 + 48 * *(unsigned int *)(v8 - 4));
  }
LABEL_10:
  if ((uint64_t *)(v8 + 48 * *(unsigned int *)(v8 - 4)) == v14) {
    goto LABEL_94;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 208))(v6) != 3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 208))(v6) == 1)
    {
      char v31 = (atomic_uchar *)v14[1];
      if (v31)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v93, v31, v14[2]);
        uint64_t v33 = v93;
        if (v93) {
          (*(void (**)(void *))(*v93 + 144))(v93);
        }
        if ((void *)v6 == v33)
        {
          uint64_t v34 = (atomic_uchar *)v14[1];
          v14[1] = 0;
          if (v34) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v34, v32);
          }
          v14[2] = 0;
        }
      }
    }
    goto LABEL_94;
  }
  char v18 = 0;
  int v19 = (atomic_uchar *)(v14 + 5);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14 + 40, (unsigned __int8 *)&v18, 1u, memory_order_acquire, memory_order_acquire);
  if (v18) {
    MEMORY[0x19972E8D0](v14 + 5);
  }
  uint64_t v90 = v14 + 3;
  unsigned int v20 = *((_DWORD *)v14 + 9);
  unsigned int v21 = *((_DWORD *)v14 + 8) + 1;
  *((_DWORD *)v14 + 8) = v21;
  uint64_t v22 = v14[3];
  if (v21 > v20)
  {
    if (v22)
    {
      int v23 = *(_DWORD *)(v22 - 4);
      if (!v23) {
        goto LABEL_45;
      }
      uint64_t v89 = v2;
      int v91 = 0;
      unsigned int v24 = v23 - 1;
      do
      {
        uint64_t v25 = v24;
        uint64_t v26 = (void *)(v22 + 16 * v24);
        if ((unint64_t)(*v26 + 1) >= 2)
        {
          uint64_t v27 = v22 + 16 * v24;
          uint64_t v29 = *(atomic_uchar **)(v27 + 8);
          uint64_t v28 = (atomic_uchar **)(v27 + 8);
          if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v29))
          {
            *uint64_t v26 = -1;
            uint64_t v30 = *v28;
            uint64_t *v28 = 0;
            if (v30) {
              WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v30, v17);
            }
            ++v91;
          }
        }
        --v24;
      }
      while (v25);
      uint64_t v22 = *v90;
      if (v91)
      {
        *(_DWORD *)(v22 - 16) += v91;
        uint64_t v35 = *v90;
        int v19 = (atomic_uchar *)(v14 + 5);
        uint64_t v2 = v89;
        if (*v90) {
          int v36 = *(_DWORD *)(v35 - 12);
        }
        else {
          int v36 = 0;
        }
        *(_DWORD *)(v35 - 12) = v36 - v91;
        uint64_t v22 = *v90;
      }
      else
      {
        int v19 = (atomic_uchar *)(v14 + 5);
        uint64_t v2 = v89;
      }
      if (v22)
      {
        unsigned int v37 = *(_DWORD *)(v22 - 4);
        if (v37 >= 9 && 6 * *(_DWORD *)(v22 - 12) < v37)
        {
          WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::shrinkToBestSize(v90);
          uint64_t v22 = v14[3];
          *((_DWORD *)v14 + 8) = 0;
          if (!v22)
          {
            unsigned int v39 = 0;
            goto LABEL_49;
          }
LABEL_46:
          unsigned int v39 = *(_DWORD *)(v22 - 12);
          int v40 = 0x7FFFFFFF;
          if (v39 >= 0x7FFFFFFF) {
            goto LABEL_50;
          }
          goto LABEL_49;
        }
LABEL_45:
        *((_DWORD *)v14 + 8) = 0;
        goto LABEL_46;
      }
    }
    uint64_t v22 = 0;
    unsigned int v39 = 0;
    *((_DWORD *)v14 + 8) = 0;
LABEL_49:
    int v40 = v39;
LABEL_50:
    *((_DWORD *)v14 + 9) = 2 * v40;
  }
  if (v22)
  {
    unsigned int v41 = *(_DWORD *)(v22 - 8);
    unint64_t v42 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    unint64_t v43 = 9 * ((v42 + ~(v42 << 13)) ^ ((v42 + ~(v42 << 13)) >> 8));
    unint64_t v44 = (v43 ^ (v43 >> 15)) + ~((v43 ^ (v43 >> 15)) << 27);
    uint64_t v45 = v41 & ((v44 >> 31) ^ v44);
    uint64_t v46 = *(void *)(v22 + 16 * v45);
    if (v46 != v6)
    {
      int v47 = 1;
      while (v46)
      {
        uint64_t v45 = (v45 + v47) & v41;
        uint64_t v46 = *(void *)(v22 + 16 * v45);
        ++v47;
        if (v46 == v6) {
          goto LABEL_58;
        }
      }
      uint64_t v45 = *(unsigned int *)(v22 - 4);
    }
LABEL_58:
    uint64_t v48 = *(unsigned int *)(v22 - 4);
    if (v45 != v48)
    {
      unsigned int v50 = v19;
      uint64_t v51 = (void *)(v22 + 16 * v45);
      v53 = (atomic_uchar **)(v51 + 1);
      uint64_t v52 = (atomic_uchar *)v51[1];
      if (v52)
      {
        BOOL v54 = !WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v52);
        uint64_t v22 = *v90;
        if (!*v90)
        {
          v55 = 0;
          goto LABEL_67;
        }
        uint64_t v48 = *(unsigned int *)(v22 - 4);
      }
      else
      {
        BOOL v54 = 1;
      }
      v55 = (void *)(v22 + 16 * v48);
      if (v55 == v51)
      {
        int v56 = 0;
        goto LABEL_73;
      }
LABEL_67:
      if (v55 != v51)
      {
        *uint64_t v51 = -1;
        uint64_t v57 = *v53;
        uint64_t *v53 = 0;
        if (v57) {
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v57, v17);
        }
        ++*(_DWORD *)(*v90 - 16);
        uint64_t v58 = *v90;
        if (*v90) {
          int v59 = *(_DWORD *)(v58 - 12) - 1;
        }
        else {
          int v59 = -1;
        }
        int v19 = v50;
        *(_DWORD *)(v58 - 12) = v59;
        uint64_t v60 = *v90;
        if (*v90)
        {
          unsigned int v61 = 6 * *(_DWORD *)(v60 - 12);
          unsigned int v62 = *(_DWORD *)(v60 - 4);
          int v56 = 1;
          if (v61 >= v62 || v62 < 9) {
            goto LABEL_82;
          }
          WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::rehash(v90, v62 >> 1);
        }
        int v56 = 1;
LABEL_82:
        int v49 = v54 & v56;
        goto LABEL_83;
      }
      int v56 = 1;
LABEL_73:
      int v19 = v50;
      goto LABEL_82;
    }
  }
  int v49 = 0;
LABEL_83:
  int v63 = 1;
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v63, 0, memory_order_release, memory_order_relaxed);
  if (v63 == 1)
  {
    if (!v49) {
      goto LABEL_94;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
    if (!v49) {
      goto LABEL_94;
    }
  }
  WTF::ThreadSafeWeakHashSet<WebCore::RealtimeMediaSource>::values((uint64_t)&v93, (atomic_uchar *)v90);
  if (v94)
  {
    char v66 = 0;
    v67 = v93;
    uint64_t v68 = 8 * v94;
    do
    {
      uint64_t v69 = *v67++;
      int v70 = WTF::equal(*(WTF **)(v69 + 176), *(const WTF::StringImpl **)(v6 + 176), v65);
      char v72 = *(unsigned char *)(v69 + 294) ^ 1;
      if (!v70) {
        char v72 = 0;
      }
      v66 |= v72;
      v68 -= 8;
    }
    while (v68);
    WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v93, v71);
    if (v66) {
      goto LABEL_94;
    }
  }
  else
  {
    WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v93, v64);
  }
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 24) + 112))(*(void *)(v2 + 24), v7, v6 + 176);
LABEL_94:
  uint64_t v73 = *v3;
  if (*v3)
  {
    unsigned int v74 = *(_DWORD *)(v73 - 8);
    unint64_t v75 = (v92 + ~(v92 << 32)) ^ ((unint64_t)(v92 + ~(v92 << 32)) >> 22);
    unint64_t v76 = 9 * ((v75 + ~(v75 << 13)) ^ ((v75 + ~(v75 << 13)) >> 8));
    unint64_t v77 = (v76 ^ (v76 >> 15)) + ~((v76 ^ (v76 >> 15)) << 27);
    uint64_t v78 = v74 & ((v77 >> 31) ^ v77);
    uint64_t v79 = *(void *)(v73 + 16 * v78);
    if (v79 != v92)
    {
      int v80 = 1;
      while (v79)
      {
        uint64_t v78 = (v78 + v80) & v74;
        uint64_t v79 = *(void *)(v73 + 16 * v78);
        ++v80;
        if (v79 == v92) {
          goto LABEL_101;
        }
      }
      uint64_t v78 = *(unsigned int *)(v73 - 4);
    }
LABEL_101:
    if (v78 != *(_DWORD *)(v73 - 4))
    {
      uint64_t v81 = (void *)(v73 + 16 * v78);
      v82 = (_DWORD *)v81[1];
      *uint64_t v81 = -1;
      v81[1] = 0;
      if (v82)
      {
        if (v82[4] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v82 + 8))(v82);
        }
        else {
          --v82[4];
        }
      }
      ++*(_DWORD *)(*v3 - 16);
      uint64_t v83 = *v3;
      if (*v3) {
        int v84 = *(_DWORD *)(v83 - 12) - 1;
      }
      else {
        int v84 = -1;
      }
      *(_DWORD *)(v83 - 12) = v84;
      uint64_t v85 = *v3;
      if (*v3)
      {
        unsigned int v86 = 6 * *(_DWORD *)(v85 - 12);
        unsigned int v87 = *(_DWORD *)(v85 - 4);
        if (v86 < v87 && v87 >= 9) {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v3, v87 >> 1, 0);
        }
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 144))(v6);
  if (v5[4] == 1) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)v5 + 8))(v5);
  }
  --v5[4];
  return result;
}

WTF::StringImpl *WebKit::UserMediaCaptureManagerProxy::applyConstraints(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v23[1] = *(atomic_uchar *volatile **)MEMORY[0x1E4F143B8];
  uint64_t v21 = a2;
  uint64_t v5 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 16), &v21);
  if (v5)
  {
    uint64_t v6 = (unsigned int *)v5;
    ++*(_DWORD *)(v5 + 16);
    if (WebCore::MediaTrackConstraintSetMap::isValid((WebCore::MediaTrackConstraintSetMap *)a3))
    {
      unsigned int v7 = *(_DWORD *)(a3 + 956);
      if (!v7)
      {
LABEL_7:
        uint64_t v10 = v21;
        ++v6[4];
        *(void *)&long long buf = v10;
        *((void *)&buf + 1) = v6;
        unint64_t v11 = (atomic_uchar *volatile *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v23, v11);
        uint64_t v12 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v12 = &unk_1EE9E3008;
        *(_OWORD *)(v12 + 8) = buf;
        unsigned int v13 = v23[0];
        *((void *)&buf + 1) = 0;
        v23[0] = 0;
        *(void *)(v12 + 24) = v13;
        uint64_t v19 = v12;
        WebKit::UserMediaCaptureManagerProxySourceProxy::applyConstraints(v6, a3, &v19);
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v23);
        uint64_t result = (WTF::StringImpl *)*((void *)&buf + 1);
        *((void *)&buf + 1) = 0;
        if (result)
        {
          if (*((_DWORD *)result + 4) == 1) {
            uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
          }
          else {
            --*((_DWORD *)result + 4);
          }
        }
        goto LABEL_13;
      }
      uint64_t v8 = *(WebCore::MediaTrackConstraintSetMap **)(a3 + 944);
      uint64_t v9 = 944 * v7;
      while ((WebCore::MediaTrackConstraintSetMap::isValid(v8) & 1) != 0)
      {
        uint64_t v8 = (WebCore::MediaTrackConstraintSetMap *)((char *)v8 + 944);
        v9 -= 944;
        if (!v9) {
          goto LABEL_7;
        }
      }
      uint64_t v15 = off_1EB358938;
      if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
LABEL_18:
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
        *((unsigned char *)result + 98) = 1;
LABEL_13:
        if (v6[4] == 1) {
          return (WTF::StringImpl *)(*(uint64_t (**)(unsigned int *))(*(void *)v6 + 8))(v6);
        }
        --v6[4];
        return result;
      }
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "void WebKit::UserMediaCaptureManagerProxy::applyConstraints(RealtimeMediaSourceIde"
                                      "ntifier, WebCore::MediaConstraints &&)";
      int v16 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp "
            "675: Invalid message dispatched %{public}s";
    }
    else
    {
      uint64_t v15 = off_1EB358938;
      if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
        goto LABEL_18;
      }
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "void WebKit::UserMediaCaptureManagerProxy::applyConstraints(RealtimeMediaSourceIde"
                                      "ntifier, WebCore::MediaConstraints &&)";
      int v16 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp "
            "673: Invalid message dispatched %{public}s";
    }
    _os_log_fault_impl(&dword_1985F2000, v15, OS_LOG_TYPE_FAULT, v16, (uint8_t *)&buf, 0xCu);
    goto LABEL_18;
  }
  uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(void *)&long long buf = &v21;
  BYTE8(buf) = 0;
  v23[0] = (atomic_uchar *volatile *)&v20;
  IPC::Connection::send<Messages::UserMediaCaptureManager::ApplyConstraintsFailed>(v17, (uint64_t)&buf);
  uint64_t result = v20;
  unsigned int v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::UserMediaCaptureManager::ApplyConstraintsFailed>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1507;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::MediaProducerMediaCaptureKind,void>::encode<IPC::Encoder>(v4, *(unsigned char *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, *(uint64_t **)(a2 + 16));
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManagerProxy::clone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v56 = a3;
  uint64_t v57 = a2;
  unsigned int v7 = (uint64_t *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 16);
  if ((WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v8, a2) & 1) == 0)
  {
    unsigned int v50 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_62:
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
      *(unsigned char *)(result + 98) = 1;
      return result;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&buf[4] = "void WebKit::UserMediaCaptureManagerProxy::clone(RealtimeMediaSourceIdentifier, RealtimeMediaSo"
                         "urceIdentifier, WebCore::PageIdentifier)";
    uint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp 68"
          "9: Invalid message dispatched %{public}s";
LABEL_64:
    _os_log_fault_impl(&dword_1985F2000, v50, OS_LOG_TYPE_FAULT, v51, buf, 0xCu);
    goto LABEL_62;
  }
  if (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v8, a3))
  {
    unsigned int v50 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_62;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&buf[4] = "void WebKit::UserMediaCaptureManagerProxy::clone(RealtimeMediaSourceIdentifier, RealtimeMediaSo"
                         "urceIdentifier, WebCore::PageIdentifier)";
    uint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp 69"
          "0: Invalid message dispatched %{public}s";
    goto LABEL_64;
  }
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v7, &v57);
  if (!result) {
    return result;
  }
  uint64_t v10 = result;
  ++*(_DWORD *)(result + 16);
  uint64_t v11 = *(void *)(result + 72);
  (*(void (**)(uint64_t))(*(void *)v11 + 136))(v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v11 + 48))(&v55, v11);
  (*(void (**)(uint64_t))(*(void *)v11 + 144))(v11);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v55 + 208))(v55) == 3)
  {
    unsigned int v13 = (uint64_t *)(a1 + 72);
    uint64_t v12 = *(void *)(a1 + 72);
    if (v12
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)(a1 + 72), 0), (uint64_t v12 = *v13) != 0))
    {
      int v14 = *(_DWORD *)(v12 - 8);
    }
    else
    {
      int v14 = 0;
    }
    unint64_t v15 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
    unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
    uint64_t v19 = (uint64_t *)(v12 + 48 * v18);
    uint64_t v20 = *v19;
    if (*v19)
    {
      uint64_t v21 = 0;
      int v22 = 1;
      while (v20 != a4)
      {
        if (v20 == -1) {
          uint64_t v21 = v19;
        }
        unsigned int v18 = (v18 + v22) & v14;
        uint64_t v19 = (uint64_t *)(v12 + 48 * v18);
        uint64_t v20 = *v19;
        ++v22;
        if (!*v19)
        {
          if (v21)
          {
            *((_OWORD *)v21 + 1) = 0u;
            *((_OWORD *)v21 + 2) = 0u;
            *(_OWORD *)uint64_t v21 = 0u;
            --*(_DWORD *)(*v13 - 16);
            uint64_t v19 = v21;
          }
          goto LABEL_16;
        }
      }
      goto LABEL_29;
    }
LABEL_16:
    uint64_t *v19 = a4;
    uint64_t v60 = 0;
    *(_OWORD *)long long buf = 0u;
    long long v59 = 0u;
    WTF::GenericHashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>::assignToEmpty<WebKit::UserMediaCaptureManagerProxy::PageSources,WebKit::UserMediaCaptureManagerProxy::PageSources>((uint64_t)(v19 + 1), (uint64_t *)buf);
    if ((void)v59) {
      WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(v59, v23);
    }
    unsigned int v24 = *(atomic_uchar **)buf;
    *(void *)long long buf = 0;
    if (v24) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v24, v23);
    }
    uint64_t v25 = *v13;
    if (*v13) {
      int v26 = *(_DWORD *)(v25 - 12) + 1;
    }
    else {
      int v26 = 1;
    }
    *(_DWORD *)(v25 - 12) = v26;
    uint64_t v27 = *v13;
    if (*v13) {
      int v28 = *(_DWORD *)(v27 - 12);
    }
    else {
      int v28 = 0;
    }
    uint64_t v29 = (*(_DWORD *)(v27 - 16) + v28);
    unint64_t v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29) {
        goto LABEL_29;
      }
    }
    else if (3 * v30 > 4 * v29)
    {
LABEL_29:
      WTF::ThreadSafeWeakHashSet<WebCore::RealtimeMediaSource>::add<WebCore::RealtimeMediaSource,(void *)0>((uint64_t)(v19 + 3), v55);
      goto LABEL_30;
    }
    uint64_t v19 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)(a1 + 72), v19);
    goto LABEL_29;
  }
LABEL_30:
  char v31 = (atomic_uchar *volatile *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, v31);
  uint64_t v32 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 96))(*(void *)(a1 + 24));
  uint64_t v33 = v32;
  if (v32) {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v32 + 16));
  }
  uint64_t v53 = v33;
  uint64_t v34 = v56;
  uint64_t v35 = (const WTF::MachSendRight *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 64))(*(void *)(a1 + 24));
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)buf, v35);
  uint64_t v36 = WTF::fastMalloc((WTF *)0x560);
  uint64_t v52 = (_DWORD *)WebKit::UserMediaCaptureManagerProxySourceProxy::UserMediaCaptureManagerProxySourceProxy(v36, v34, (uint64_t *)&v54, (const WTF::MachSendRight *)buf, &v55, &v53);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)buf);
  unsigned int v37 = (WTF::StringImpl *)(v10 + 264);
  int v38 = (_OWORD *)(v36 + 264);
  if (*(unsigned __int8 *)(v36 + 368) == *(unsigned __int8 *)(v10 + 368))
  {
    if (*(unsigned char *)(v36 + 368))
    {
      long long v39 = *(_OWORD *)v37;
      long long v40 = *(_OWORD *)(v10 + 280);
      *(unsigned char *)(v36 + 296) = *(unsigned char *)(v10 + 296);
      _OWORD *v38 = v39;
      *(_OWORD *)(v36 + 280) = v40;
      WTF::String::operator=((uint64_t *)(v36 + 304), (WTF::StringImpl **)(v10 + 304));
      WTF::String::operator=((uint64_t *)(v36 + 312), (WTF::StringImpl **)(v10 + 312));
      WTF::String::operator=((uint64_t *)(v36 + 320), (WTF::StringImpl **)(v10 + 320));
      uint64_t v41 = *(void *)(v10 + 358);
      long long v42 = *(_OWORD *)(v10 + 344);
      *(_OWORD *)(v36 + 328) = *(_OWORD *)(v10 + 328);
      *(_OWORD *)(v36 + 344) = v42;
      *(void *)(v36 + 358) = v41;
    }
  }
  else if (*(unsigned char *)(v36 + 368))
  {
    std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::reset[abi:sn180100]((uint64_t)v38, v37);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings const&,WebCore::RealtimeMediaSourceSettings*>((uint64_t)v38, (long long *)v37);
    *(unsigned char *)(v36 + 368) = 1;
  }
  *(void *)(v36 + 376) = *(void *)(v10 + 376);
  *(void *)(v36 + 384) = *(void *)(v10 + 384);
  unint64_t v43 = (unsigned char *)(v10 + 392);
  unint64_t v44 = (unsigned int *)(v36 + 392);
  if (*(unsigned __int8 *)(v36 + 1360) == *(unsigned __int8 *)(v10 + 1360))
  {
    if (*(unsigned char *)(v36 + 1360))
    {
      WebCore::MediaTrackConstraintSetMap::operator=(v44, v43);
      WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v36 + 1336, v10 + 1336);
      *(unsigned char *)(v36 + 1352) = *(unsigned char *)(v10 + 1352);
    }
  }
  else if (*(unsigned char *)(v36 + 1360))
  {
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v36 + 1336, v43);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v36 + 1120, v45);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v36 + 1064, v46);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v36 + 1008, v47);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v36 + 952, v48);
    *(unsigned char *)(v36 + 1360) = 0;
  }
  else
  {
    WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((WebCore::MediaTrackConstraintSetMap *)v44, (const WebCore::MediaTrackConstraintSetMap *)v43);
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v36 + 1336, v10 + 1336);
    *(unsigned char *)(v36 + 1352) = *(unsigned char *)(v10 + 1352);
    *(unsigned char *)(v36 + 1360) = 1;
  }
  WebKit::UserMediaCaptureManagerProxySourceProxy::observeMedia((WebKit::UserMediaCaptureManagerProxySourceProxy *)v36);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>((uint64_t *)buf, v7, &v56, (uint64_t *)&v52);
  if (v52)
  {
    if (v52[4] == 1) {
      (*(void (**)(void))(*(void *)v52 + 8))();
    }
    else {
      --v52[4];
    }
  }
  if (v53) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v53 + 16), v49);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v54);
  uint64_t result = v55;
  uint64_t v55 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
  }
  if (*(_DWORD *)(v10 + 16) == 1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  --*(_DWORD *)(v10 + 16);
  return result;
}

WTF::StringImpl *WebKit::UserMediaCaptureManagerProxy::takePhoto(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4)
{
  uint64_t v33 = a2;
  uint64_t v6 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 16), &v33);
  if (v6)
  {
    unsigned int v7 = (unsigned int *)v6;
    ++*(_DWORD *)(v6 + 16);
    v35[0] = 0;
    v35[1] = 0;
    *(void *)&long long v36 = "takePhoto";
    *((void *)&v36 + 1) = 0;
    WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v42, 0, (WTF::Logger::LogSiteIdentifier *)v35);
    uint64_t v8 = v42;
    if (v42) {
      atomic_fetch_add(v42 + 2, 1u);
    }
    v35[0] = (WTF *)v7;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v7 + 2, (uint64_t)v7);
    uint64_t v9 = (atomic_uint *)*((void *)v7 + 1);
    uint64_t v10 = (WTF *)v7;
    if (v9)
    {
      atomic_fetch_add(v9, 1u);
      uint64_t v10 = v35[0];
    }
    long long v11 = a3[1];
    long long v36 = *a3;
    *(_OWORD *)unsigned int v37 = v11;
    *(_OWORD *)&v37[10] = *(long long *)((char *)a3 + 26);
    uint64_t v12 = v42;
    long long v42 = 0;
    long long v39 = v43;
    long long v40 = v44;
    uint64_t v13 = WTF::fastMalloc((WTF *)0x70);
    *(void *)uint64_t v13 = &unk_1EE9E2D10;
    *(void *)(v13 + 8) = v10;
    *(void *)(v13 + 16) = v9;
    long long v14 = *(_OWORD *)v37;
    long long v15 = v36;
    *(_OWORD *)(v13 + 56) = *(_OWORD *)&v37[16];
    *(_OWORD *)(v13 + 24) = v15;
    *(_OWORD *)(v13 + 40) = v14;
    v35[1] = 0;
    uint64_t v38 = 0;
    *(void *)(v13 + 72) = v12;
    long long v16 = v40;
    *(_OWORD *)(v13 + 80) = v39;
    *(_OWORD *)(v13 + 96) = v16;
    uint64_t v41 = (WTF *)v13;
    WebKit::UserMediaCaptureManagerProxySourceProxy::queueAndProcessSerialAction((WTF::RunLoop *)v7, (uint64_t *)&v41);
    uint64_t v17 = (uint64_t)v41;
    uint64_t v41 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(&v38);
    uint64_t v19 = (unsigned int *)v35[1];
    v35[1] = 0;
    if (v19 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v18);
    }
    uint64_t v20 = WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer((uint64_t *)&v42);
    uint64_t v21 = WTF::RunLoop::main((WTF::RunLoop *)v20);
    v35[0] = 0;
    v35[1] = 0;
    uint64_t v22 = *a4;
    *a4 = 0;
    uint64_t v23 = WTF::fastMalloc((WTF *)0x50);
    (*(void (**)(uint64_t))(*(void *)v21 + 32))(v21);
    unsigned int v24 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v24 = &unk_1EE9E2E30;
    v24[1] = v22;
    *(_DWORD *)(v23 + 8) = 1;
    *(void *)(v23 + 16) = v21;
    *(void *)(v23 + 24) = 0;
    *(void *)(v23 + 32) = 0;
    *(void *)(v23 + 40) = "takePhoto";
    *(void *)(v23 + 48) = 0;
    *(_WORD *)(v23 + 56) = 0;
    *(void *)uint64_t v23 = &unk_1EE9E2E58;
    *(void *)(v23 + 64) = 0;
    *(void *)(v23 + 72) = v24;
    atomic_fetch_add(v8 + 2, 1u);
    long long v30 = *(_OWORD *)v35;
    char v31 = "takePhoto";
    uint64_t v32 = 0;
    long long v42 = (atomic_uint *)v23;
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::maybeSettle((uint64_t)v8, (WTF::NativePromiseBase **)&v42, (WTF::Logger::LogSiteIdentifier *)&v30);
    uint64_t v25 = (unsigned int *)v42;
    long long v42 = 0;
    if (v25 && atomic_fetch_add((atomic_uint *volatile)v25 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v25 + 2);
      (*(void (**)(unsigned int *))(*(void *)v25 + 8))(v25);
    }
    uint64_t result = (WTF::StringImpl *)v8;
    if (v8 && atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v8 + 2);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
    }
    else if (!v8)
    {
LABEL_19:
      if (v7[4] == 1) {
        return (WTF::StringImpl *)(*(uint64_t (**)(unsigned int *))(*(void *)v7 + 8))(v7);
      }
      --v7[4];
      return result;
    }
    if (atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v8 + 2);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
    }
    goto LABEL_19;
  }
  long long v42 = (atomic_uint *)"Device not available";
  *(void *)&long long v43 = 21;
  WTF::NeverDestroyed<WTF::String,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&v41, (uint64_t)&v42);
  uint64_t v27 = v41;
  uint64_t v41 = 0;
  v35[0] = v27;
  DWORD2(v36) = 1;
  uint64_t v28 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v28 + 16))(v28, v35);
  (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  if (DWORD2(v36) != -1) {
    ((void (*)(char *, WTF **))off_1EE9E2CB0[DWORD2(v36)])(&v34, v35);
  }
  DWORD2(v36) = -1;
  uint64_t result = v41;
  uint64_t v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WebKit::UserMediaCaptureManagerProxy::getPhotoCapabilities(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v63 = a2;
  uint64_t v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 16), &v63);
  if (v4)
  {
    uint64_t v5 = (_DWORD *)v4;
    ++*(_DWORD *)(v4 + 16);
    uint64_t v6 = (WTF::RunLoop *)(*(void *(**)(unsigned int **__return_ptr))(**(void **)(v4 + 72) + 168))(&v57);
    uint64_t v7 = (uint64_t)v57;
    uint64_t v8 = WTF::RunLoop::main(v6);
    long long v56 = 0uLL;
    uint64_t v9 = *a3;
    *a3 = 0;
    uint64_t v10 = WTF::fastMalloc((WTF *)0x50);
    (*(void (**)(uint64_t))(*(void *)v8 + 32))(v8);
    long long v11 = (void *)WTF::fastMalloc((WTF *)0x10);
    char v12 = 0;
    void *v11 = &unk_1EE9E2E98;
    v11[1] = v9;
    *(_DWORD *)(v10 + 8) = 1;
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = "getPhotoCapabilities";
    *(void *)(v10 + 48) = 0;
    *(_WORD *)(v10 + 56) = 0;
    *(void *)uint64_t v10 = &unk_1EE9E2EC0;
    *(void *)(v10 + 64) = 0;
    *(void *)(v10 + 72) = v11;
    atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
    long long v60 = v56;
    uint64_t v61 = "getPhotoCapabilities";
    uint64_t v62 = 0;
    uint64_t v58 = (unsigned int *)v7;
    long long v59 = 0;
    uint64_t v13 = (WTF::NativePromiseBase *)(v7 + 48);
    uint64_t v64 = (WTF::NativePromiseBase *)v10;
    unint64_t v65 = (WTF::StringImpl *)(v7 + 48);
    char v66 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v7 + 48), (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
    if (v12) {
      uint64_t v13 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
    }
    *(unsigned char *)(v7 + 264) = 1;
    long long v14 = (unsigned char *)WTF::NativePromiseBase::logChannel(v13);
    if (*v14)
    {
      long long v15 = v14;
      if (v14[16] >= 4u)
      {
        WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v75, (WTF::Logger::LogSiteIdentifier *)&v60);
        WTF::String::String((WTF::String *)&v74, " invoking maybeSettle() [");
        WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v7, &v73);
        WTF::String::String((WTF::String *)&v72, " callback:");
        WTF::LogArgument<void const*>::toString();
        WTF::String::String((WTF::String *)&v70, " isNothing:");
        WTF::LogArgument<BOOL>::toString<BOOL>(&v69);
        WTF::String::String((WTF::String *)&v68, "]");
        uint64_t result = (unsigned int *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v75, (uint64_t *)&v74, (uint64_t *)&v73, (uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v76);
        if (!v76)
        {
          __break(0xC471u);
          return result;
        }
        unsigned int v18 = v68;
        uint64_t v68 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v17);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
        uint64_t v19 = v69;
        uint64_t v69 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v17);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
        uint64_t v20 = v70;
        int v70 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, v17);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
        uint64_t v21 = v71;
        v71 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v17);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
        uint64_t v22 = v72;
        char v72 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, v17);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
        uint64_t v23 = v73;
        uint64_t v73 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2) {
            WTF::StringImpl::destroy(v23, v17);
          }
          else {
            *(_DWORD *)v23 -= 2;
          }
        }
        unsigned int v24 = v74;
        unsigned int v74 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2) {
            WTF::StringImpl::destroy(v24, v17);
          }
          else {
            *(_DWORD *)v24 -= 2;
          }
        }
        uint64_t v25 = v75;
        unint64_t v75 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2) {
            WTF::StringImpl::destroy(v25, v17);
          }
          else {
            *(_DWORD *)v25 -= 2;
          }
        }
        int v26 = *((void *)v15 + 4);
        uint64_t v27 = (WTF *)os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
        if (v27)
        {
          WTF::String::utf8();
          uint64_t v29 = v67[0] ? (char *)v67[0] + 16 : 0;
          *(_DWORD *)long long buf = 136446210;
          *(void *)uint64_t v78 = v29;
          _os_log_impl(&dword_1985F2000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          uint64_t v27 = v67[0];
          v67[0] = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 1) {
              uint64_t v27 = (WTF *)WTF::fastFree(v27, v28);
            }
            else {
              --*(_DWORD *)v27;
            }
          }
        }
        if (*v15 && v15[16] >= 4u)
        {
          long long v30 = (atomic_uchar *)MEMORY[0x1E4F30998];
          while (1)
          {
            int v31 = *v30;
            if (v31) {
              break;
            }
            int v32 = *v30;
            atomic_compare_exchange_strong_explicit(v30, (unsigned __int8 *)&v32, v31 | 1, memory_order_acquire, memory_order_acquire);
            if (v32 == v31)
            {
              uint64_t v33 = WTF::Logger::observers(v27);
              uint64_t v34 = *(unsigned int *)(v33 + 12);
              if (v34)
              {
                uint64_t v35 = *(uint64_t **)v33;
                uint64_t v55 = *(void *)v33 + 8 * v34;
                do
                {
                  uint64_t v36 = *v35;
                  *(_DWORD *)long long buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v78[4], (WTF::Logger::LogSiteIdentifier *)&v60);
                  int v79 = 0;
                  WTF::String::String((WTF::String *)v80, " invoking maybeSettle() [");
                  v80[2] = 0;
                  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v7, &v81);
                  int v82 = 0;
                  WTF::String::String((WTF::String *)v83, " callback:");
                  v83[2] = 0;
                  WTF::LogArgument<void const*>::toString();
                  v83[6] = 0;
                  WTF::String::String((WTF::String *)v84, " isNothing:");
                  v84[2] = 0;
                  WTF::LogArgument<BOOL>::toString<BOOL>(&v85);
                  int v86 = 0;
                  WTF::String::String((WTF::String *)&v87, "]");
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v67, (uint64_t)buf, 8uLL);
                  (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v36 + 16))(v36, v15, 4, v67);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v67, v37);
                  for (uint64_t i = 120; i != -8; i -= 16)
                  {
                    long long v39 = *(WTF::StringImpl **)&buf[i];
                    *(void *)&buf[i] = 0;
                    if (v39)
                    {
                      if (*(_DWORD *)v39 == 2) {
                        WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v28);
                      }
                      else {
                        *(_DWORD *)v39 -= 2;
                      }
                    }
                  }
                  ++v35;
                }
                while (v35 != (uint64_t *)v55);
              }
              int v40 = 1;
              atomic_compare_exchange_strong_explicit(v30, (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
              if (v40 != 1) {
                WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
              }
              break;
            }
          }
        }
        uint64_t v41 = v76;
        unint64_t v76 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2) {
            WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v28);
          }
          else {
            *(_DWORD *)v41 -= 2;
          }
        }
      }
    }
    if (*(_DWORD *)(v7 + 216))
    {
      WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(v64, v7, (atomic_uchar *volatile *)&v65);
    }
    else
    {
      uint64_t v42 = *(unsigned int *)(v7 + 236);
      if (v42 == *(_DWORD *)(v7 + 232))
      {
        long long v43 = (WTF::NativePromiseBase **)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 224, v42 + 1, (unint64_t)&v64);
        uint64_t v42 = *(unsigned int *)(v7 + 236);
        int v44 = v42 + 1;
        uint64_t v45 = *(void *)(v7 + 224);
        uint64_t v46 = *v43;
        *long long v43 = 0;
      }
      else
      {
        int v44 = v42 + 1;
        uint64_t v45 = *(void *)(v7 + 224);
        uint64_t v46 = v64;
        uint64_t v64 = 0;
      }
      *(void *)(v45 + 8 * v42) = v46;
      *(_DWORD *)(v7 + 236) = v44;
    }
    if (v66)
    {
      int v47 = v65;
      int v48 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v65, (unsigned __int8 *)&v48, 0, memory_order_release, memory_order_relaxed);
      if (v48 != 1) {
        WTF::Lock::unlockSlow(v47);
      }
    }
    int v49 = (unsigned int *)v64;
    uint64_t v64 = 0;
    if (v49 && atomic_fetch_add((atomic_uint *volatile)v49 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v49 + 2);
      (*(void (**)(unsigned int *))(*(void *)v49 + 8))(v49);
    }
    unsigned int v50 = v59;
    long long v59 = 0;
    if (v50 && atomic_fetch_add((atomic_uint *volatile)v50 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v50 + 2);
      (*(void (**)(unsigned int *))(*(void *)v50 + 8))(v50);
    }
    uint64_t v51 = v58;
    uint64_t v58 = 0;
    if (v51 && atomic_fetch_add((atomic_uint *volatile)v51 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(void *)v51 + 16))(v51);
    }
    uint64_t result = v57;
    uint64_t v57 = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    }
    if (v5[4] == 1) {
      return (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[4];
    }
  }
  else
  {
    v67[0] = (WTF *)"Device not available";
    v67[1] = (WTF *)21;
    WTF::NeverDestroyed<WTF::String,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&v65, (uint64_t)v67);
    uint64_t v52 = v65;
    unint64_t v65 = 0;
    *(void *)&v78[4] = v52;
    int v88 = 1;
    uint64_t v53 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v53 + 16))(v53, buf);
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
    if (v88 != -1) {
      ((void (*)(long long *, unsigned char *))off_1EE9E2E78[v88])(&v56, &v78[4]);
    }
    int v88 = -1;
    uint64_t result = (unsigned int *)v65;
    unint64_t v65 = 0;
    if (result)
    {
      if (*result == 2) {
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v54);
      }
      else {
        *result -= 2;
      }
    }
  }
  return result;
}

unsigned int *WebKit::UserMediaCaptureManagerProxy::getPhotoSettings(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v87[1] = *MEMORY[0x1E4F143B8];
  uint64_t v63 = a2;
  uint64_t v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 16), &v63);
  if (v4)
  {
    uint64_t v5 = (_DWORD *)v4;
    ++*(_DWORD *)(v4 + 16);
    uint64_t v6 = (WTF::RunLoop *)(*(void *(**)(unsigned int **__return_ptr))(**(void **)(v4 + 72) + 176))(&v57);
    uint64_t v7 = (uint64_t)v57;
    uint64_t v8 = WTF::RunLoop::main(v6);
    uint64_t v9 = *a3;
    *a3 = 0;
    long long v56 = 0uLL;
    uint64_t v10 = WTF::fastMalloc((WTF *)0x50);
    (*(void (**)(uint64_t))(*(void *)v8 + 32))(v8);
    long long v11 = (void *)WTF::fastMalloc((WTF *)0x10);
    char v12 = 0;
    void *v11 = &unk_1EE9E2F30;
    v11[1] = v9;
    *(_DWORD *)(v10 + 8) = 1;
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = "getPhotoSettings";
    *(void *)(v10 + 48) = 0;
    *(_WORD *)(v10 + 56) = 0;
    *(void *)uint64_t v10 = &unk_1EE9E2F58;
    *(void *)(v10 + 64) = 0;
    *(void *)(v10 + 72) = v11;
    atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
    long long v60 = v56;
    uint64_t v61 = "getPhotoSettings";
    uint64_t v62 = 0;
    uint64_t v58 = (unsigned int *)v7;
    long long v59 = 0;
    uint64_t v13 = (WTF::NativePromiseBase *)(v7 + 48);
    uint64_t v64 = (WTF::NativePromiseBase *)v10;
    unint64_t v65 = (WTF::StringImpl *)(v7 + 48);
    char v66 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v7 + 48), (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
    if (v12) {
      uint64_t v13 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
    }
    *(unsigned char *)(v7 + 168) = 1;
    long long v14 = (unsigned char *)WTF::NativePromiseBase::logChannel(v13);
    if (*v14)
    {
      long long v15 = v14;
      if (v14[16] >= 4u)
      {
        WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v75, (WTF::Logger::LogSiteIdentifier *)&v60);
        WTF::String::String((WTF::String *)&v74, " invoking maybeSettle() [");
        WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v7, &v73);
        WTF::String::String((WTF::String *)&v72, " callback:");
        WTF::LogArgument<void const*>::toString();
        WTF::String::String((WTF::String *)&v70, " isNothing:");
        WTF::LogArgument<BOOL>::toString<BOOL>(&v69);
        WTF::String::String((WTF::String *)&v68, "]");
        uint64_t result = (unsigned int *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v75, (uint64_t *)&v74, (uint64_t *)&v73, (uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v76);
        if (!v76)
        {
          __break(0xC471u);
          return result;
        }
        unsigned int v18 = v68;
        uint64_t v68 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v17);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
        uint64_t v19 = v69;
        uint64_t v69 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v17);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
        uint64_t v20 = v70;
        int v70 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, v17);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
        uint64_t v21 = v71;
        v71 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v17);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
        uint64_t v22 = v72;
        char v72 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, v17);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
        uint64_t v23 = v73;
        uint64_t v73 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2) {
            WTF::StringImpl::destroy(v23, v17);
          }
          else {
            *(_DWORD *)v23 -= 2;
          }
        }
        unsigned int v24 = v74;
        unsigned int v74 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2) {
            WTF::StringImpl::destroy(v24, v17);
          }
          else {
            *(_DWORD *)v24 -= 2;
          }
        }
        uint64_t v25 = v75;
        unint64_t v75 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2) {
            WTF::StringImpl::destroy(v25, v17);
          }
          else {
            *(_DWORD *)v25 -= 2;
          }
        }
        int v26 = *((void *)v15 + 4);
        uint64_t v27 = (WTF *)os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
        if (v27)
        {
          WTF::String::utf8();
          uint64_t v29 = v67[0] ? (char *)v67[0] + 16 : 0;
          *(_DWORD *)long long buf = 136446210;
          *(void *)uint64_t v78 = v29;
          _os_log_impl(&dword_1985F2000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          uint64_t v27 = v67[0];
          v67[0] = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 1) {
              uint64_t v27 = (WTF *)WTF::fastFree(v27, v28);
            }
            else {
              --*(_DWORD *)v27;
            }
          }
        }
        if (*v15 && v15[16] >= 4u)
        {
          long long v30 = (atomic_uchar *)MEMORY[0x1E4F30998];
          while (1)
          {
            int v31 = *v30;
            if (v31) {
              break;
            }
            int v32 = *v30;
            atomic_compare_exchange_strong_explicit(v30, (unsigned __int8 *)&v32, v31 | 1, memory_order_acquire, memory_order_acquire);
            if (v32 == v31)
            {
              uint64_t v33 = WTF::Logger::observers(v27);
              uint64_t v34 = *(unsigned int *)(v33 + 12);
              if (v34)
              {
                uint64_t v35 = *(uint64_t **)v33;
                uint64_t v55 = *(void *)v33 + 8 * v34;
                do
                {
                  uint64_t v36 = *v35;
                  *(_DWORD *)long long buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v78[4], (WTF::Logger::LogSiteIdentifier *)&v60);
                  int v79 = 0;
                  WTF::String::String((WTF::String *)v80, " invoking maybeSettle() [");
                  v80[2] = 0;
                  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v7, &v81);
                  int v82 = 0;
                  WTF::String::String((WTF::String *)v83, " callback:");
                  v83[2] = 0;
                  WTF::LogArgument<void const*>::toString();
                  v83[6] = 0;
                  WTF::String::String((WTF::String *)v84, " isNothing:");
                  v84[2] = 0;
                  WTF::LogArgument<BOOL>::toString<BOOL>(&v85);
                  int v86 = 0;
                  WTF::String::String((WTF::String *)v87, "]");
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v67, (uint64_t)buf, 8uLL);
                  (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v36 + 16))(v36, v15, 4, v67);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v67, v37);
                  for (uint64_t i = 120; i != -8; i -= 16)
                  {
                    long long v39 = *(WTF::StringImpl **)&buf[i];
                    *(void *)&buf[i] = 0;
                    if (v39)
                    {
                      if (*(_DWORD *)v39 == 2) {
                        WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v28);
                      }
                      else {
                        *(_DWORD *)v39 -= 2;
                      }
                    }
                  }
                  ++v35;
                }
                while (v35 != (uint64_t *)v55);
              }
              int v40 = 1;
              atomic_compare_exchange_strong_explicit(v30, (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
              if (v40 != 1) {
                WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
              }
              break;
            }
          }
        }
        uint64_t v41 = v76;
        unint64_t v76 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2) {
            WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v28);
          }
          else {
            *(_DWORD *)v41 -= 2;
          }
        }
      }
    }
    if (*(_DWORD *)(v7 + 120))
    {
      WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(v64, v7, (atomic_uchar *volatile *)&v65);
    }
    else
    {
      uint64_t v42 = *(unsigned int *)(v7 + 140);
      if (v42 == *(_DWORD *)(v7 + 136))
      {
        long long v43 = (WTF::NativePromiseBase **)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 128, v42 + 1, (unint64_t)&v64);
        uint64_t v42 = *(unsigned int *)(v7 + 140);
        int v44 = v42 + 1;
        uint64_t v45 = *(void *)(v7 + 128);
        uint64_t v46 = *v43;
        *long long v43 = 0;
      }
      else
      {
        int v44 = v42 + 1;
        uint64_t v45 = *(void *)(v7 + 128);
        uint64_t v46 = v64;
        uint64_t v64 = 0;
      }
      *(void *)(v45 + 8 * v42) = v46;
      *(_DWORD *)(v7 + 140) = v44;
    }
    if (v66)
    {
      int v47 = v65;
      int v48 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v65, (unsigned __int8 *)&v48, 0, memory_order_release, memory_order_relaxed);
      if (v48 != 1) {
        WTF::Lock::unlockSlow(v47);
      }
    }
    int v49 = (unsigned int *)v64;
    uint64_t v64 = 0;
    if (v49 && atomic_fetch_add((atomic_uint *volatile)v49 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v49 + 2);
      (*(void (**)(unsigned int *))(*(void *)v49 + 8))(v49);
    }
    unsigned int v50 = v59;
    long long v59 = 0;
    if (v50 && atomic_fetch_add((atomic_uint *volatile)v50 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v50 + 2);
      (*(void (**)(unsigned int *))(*(void *)v50 + 8))(v50);
    }
    uint64_t v51 = v58;
    uint64_t v58 = 0;
    if (v51 && atomic_fetch_add((atomic_uint *volatile)v51 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(void *)v51 + 16))(v51);
    }
    uint64_t result = v57;
    uint64_t v57 = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    }
    if (v5[4] == 1) {
      return (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[4];
    }
  }
  else
  {
    v67[0] = (WTF *)"Device not available";
    v67[1] = (WTF *)21;
    WTF::NeverDestroyed<WTF::String,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&v65, (uint64_t)v67);
    uint64_t v52 = v65;
    unint64_t v65 = 0;
    *(void *)&v78[4] = v52;
    v83[0] = 1;
    uint64_t v53 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v53 + 16))(v53, buf);
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
    if (v83[0] != -1) {
      ((void (*)(long long *, unsigned char *))off_1EE9E2F10[v83[0]])(&v56, &v78[4]);
    }
    v83[0] = -1;
    uint64_t result = (unsigned int *)v65;
    unint64_t v65 = 0;
    if (result)
    {
      if (*result == 2) {
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v54);
      }
      else {
        *result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManagerProxy::endProducingData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 16), &v4);
  if (result)
  {
    uint64_t v3 = (_DWORD *)result;
    ++*(_DWORD *)(result + 16);
    *(_WORD *)(result + 176) = 257;
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(result + 72) + 72))(*(void *)(result + 72), result);
    if (v3[4] == 1) {
      return (*(uint64_t (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManagerProxy::setShouldApplyRotation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 16), &v4);
  if (result)
  {
    int v3 = *(_DWORD *)(result + 16);
    *(_DWORD *)(result + 16) = v3 + 1;
    *(unsigned char *)(result + 192) = 1;
    if (v3) {
      *(_DWORD *)(result + 16) = v3;
    }
    else {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManagerProxy::setIsInBackground(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 16), &v6);
  if (result)
  {
    uint64_t v5 = (_DWORD *)result;
    ++*(_DWORD *)(result + 16);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(result + 72) + 304))(*(void *)(result + 72), a3);
    if (v5[4] == 1) {
      return (*(uint64_t (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[4];
    }
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManagerProxy::isPowerEfficient(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v9 = a2;
  uint64_t v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 16), &v9);
  uint64_t v5 = (_DWORD *)v4;
  if (v4)
  {
    ++*(_DWORD *)(v4 + 16);
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v4 + 72) + 320))(*(void *)(v4 + 72));
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v6);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  if (v5)
  {
    if (v5[4] == 1) {
      return (*(uint64_t (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[4];
    }
  }
  return result;
}

void *WebKit::UserMediaCaptureManagerProxy::close(WebKit::UserMediaCaptureManagerProxy *this)
{
  uint64_t v1 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin(v1);
  uint64_t v4 = result;
  uint64_t v5 = v3;
  uint64_t v6 = 0;
  if (v1) {
    uint64_t v6 = &v1[2 * *((unsigned int *)v1 - 1)];
  }
  if (v6 != result)
  {
    do
    {
      uint64_t v7 = v4[1];
      *(unsigned char *)(v7 + 176) = 1;
      uint64_t result = (void *)WebCore::RealtimeMediaSource::stop(*(WebCore::RealtimeMediaSource **)(v7 + 72));
      while (1)
      {
        v4 += 2;
        if (v4 == v5) {
          break;
        }
        if ((unint64_t)(*v4 + 1) > 1) {
          goto LABEL_11;
        }
      }
      uint64_t v4 = v5;
LABEL_11:
      ;
    }
    while (v4 != v6);
  }
  if (v1)
  {
    return (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable((uint64_t)v1, v3);
  }
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)2>::type()
{
  return 2;
}

uint64_t API::ObjectImpl<(API::Object::Type)3>::type()
{
  return 3;
}

uint64_t API::ObjectImpl<(API::Object::Type)7>::type()
{
  return 7;
}

void WebKit::WebProtectionSpace::~WebProtectionSpace(WebKit::WebProtectionSpace *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9E2A20;
  int v3 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
}

{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE9E2A20;
  int v3 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)14>::type()
{
  return 14;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(void *a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      if (*v4 != -1)
      {
        uint64_t v5 = v4[3];
        if (v5) {
          WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(v5, a2);
        }
        uint64_t v6 = (atomic_uchar *)v4[1];
        v4[1] = 0;
        if (v6) {
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
        }
      }
      v4 += 6;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (atomic_uchar **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (atomic_uchar *)-1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5) {
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebCore::OrientationNotifier::~OrientationNotifier(WebCore::OrientationNotifier *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 1);
  uint64_t v4 = *((unsigned int *)this + 5);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    uint64_t v6 = v3;
    do
    {
      if (*(void *)(*(void *)v6 + 8)) {
        *(void *)(*(void *)v6 + 8) = 0;
      }
      uint64_t v6 = (WTF *)((char *)v6 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  if (v3)
  {
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (_DWORD **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (_DWORD *)-1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5)
        {
          if (v5[4] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
          }
          else {
            --v5[4];
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)uint64_t v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 144))(v6);
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::UserMediaCaptureManagerProxySourceProxy(uint64_t a1, uint64_t a2, uint64_t *a3, const WTF::MachSendRight *a4, uint64_t *a5, uint64_t *a6)
{
  *(_DWORD *)(a1 + 16) = 1;
  uint64_t v12 = WebCore::RealtimeMediaSourceObserver::RealtimeMediaSourceObserver((WebCore::RealtimeMediaSourceObserver *)a1);
  *(_DWORD *)(v12 + 40) = 0;
  *(void *)uint64_t v12 = &unk_1EE9E2AD8;
  *(void *)(v12 + 24) = &unk_1EE9E2B68;
  *(void *)(v12 + 32) = &unk_1EE9E2BB0;
  *(void *)(v12 + 48) = a2;
  uint64_t v13 = *a3;
  *a3 = 0;
  *(void *)(v12 + 56) = v13;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(v12 + 64), a4);
  uint64_t v14 = *a5;
  *a5 = 0;
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 10000000;
  *(unsigned char *)(a1 + 244) = 1;
  *(unsigned char *)(a1 + 248) = 0;
  uint64_t v15 = *a6;
  *a6 = 0;
  *(void *)(a1 + 256) = v15;
  *(unsigned char *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 1360) = 0;
  *(unsigned char *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  v17[0] = 0;
  v17[1] = 0;
  v17[2] = "UserMediaCaptureManagerProxySourceProxy";
  v17[3] = 0;
  WTF::NativePromise<void,void,0u>::createAndResolve<std::enable_if<true,void>>((WTF::NativePromiseBase *)v17, (uint64_t *)(a1 + 1368));
  WebCore::RealtimeMediaSource::addObserver(*(WebCore::RealtimeMediaSource **)(a1 + 72), (WebCore::RealtimeMediaSourceObserver *)a1);
  return a1;
}

IPC::Encoder *WebKit::UserMediaCaptureManagerProxySourceProxy::sourceStopped(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  uint64_t v1 = *((void *)this + 7);
  char v2 = *(unsigned char *)(*((void *)this + 9) + 293);
  uint64_t v8 = (char *)this + 48;
  char v9 = v2;
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1512;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v10 = v3;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v3, (uint64_t)&v8);
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::UserMediaCaptureManagerProxySourceProxy::sourceMutedChanged(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  uint64_t v1 = *((void *)this + 7);
  char v2 = (uint64_t *)((char *)this + 48);
  uint64_t v3 = (unsigned char *)*((void *)this + 9);
  char v4 = v3[289];
  char v5 = (*(uint64_t (**)(unsigned char *))(*(void *)v3 + 88))(v3);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1510;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v15 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, v2);
  uint64_t v7 = (unsigned char *)IPC::Encoder::grow(v6, 1uLL, 1);
  if (!v8 || (unsigned char *v7 = v4, v9 = (unsigned char *)IPC::Encoder::grow(v6, 1uLL, 1), !v10))
  {
    __break(0xC471u);
    JUMPOUT(0x198F929B8);
  }
  unsigned char *v9 = v5;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v15, 0, 0);
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::UserMediaCaptureManagerProxySourceProxy::sourceSettingsChanged(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  LOBYTE(v11[0]) = 0;
  char v12 = 0;
  std::__optional_storage_base<WebCore::RealtimeMediaSourceSettings,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RealtimeMediaSourceSettings,false>>((uint64_t)this + 264, (long long *)v11);
  std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v2);
  uint64_t v3 = *((void *)this + 7);
  char v4 = (uint64_t *)((char *)this + 48);
  char v5 = (int *)WebKit::UserMediaCaptureManagerProxySourceProxy::settings(this);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1511;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  v11[0] = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, v4);
  IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSettings,void>::encode(v6, v5);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)v11, 0, 0);
  uint64_t result = v11[0];
  v11[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::audioUnitWillStart(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  uint64_t v1 = WebCore::AudioSession::sharedSession(this);
  char v2 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v1 + 32))(v1, 5, 1, 0);
  uint64_t v3 = (WebCore::AudioSession *)WebCore::AudioSession::sharedSession(v2);

  return WebCore::AudioSession::tryToSetActive(v3);
}

IPC::Encoder *WebKit::UserMediaCaptureManagerProxySourceProxy::sourceConfigurationChanged(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  if (((*(uint64_t (**)(void))(**((void **)this + 9) + 208))(*((void *)this + 9)) & 0xFE) == 4
    && *((unsigned char *)this + 1360)
    && WebKit::UserMediaCaptureManagerProxySourceProxy::updateVideoConstraints((uint64_t)this, (WebKit::UserMediaCaptureManagerProxySourceProxy *)((char *)this + 392)))
  {
    WebCore::RealtimeMediaSource::removeVideoFrameObserver();
    WebCore::RealtimeMediaSource::addVideoFrameObserver();
  }
  uint64_t v2 = *((void *)this + 7);
  uint64_t v3 = (uint64_t *)((char *)this + 48);
  char v4 = (uint64_t *)(*((void *)this + 9) + 176);
  char v5 = (int *)WebKit::UserMediaCaptureManagerProxySourceProxy::settings(this);
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 9) + 120))(*((void *)this + 9));
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1509;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v12 = v7;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, v3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, v4);
  IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSettings,void>::encode(v7, v5);
  IPC::ArgumentCoder<WebCore::RealtimeMediaSourceCapabilities,void>::encode(v7, v6);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  char v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

BOOL WebKit::UserMediaCaptureManagerProxySourceProxy::preventSourceFromEnding(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  return *((unsigned char *)this + 177) == 0;
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::ptrCount(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::ptrCountWithoutThreadCheck(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::incrementPtrCount(uint64_t this)
{
  return this;
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::decrementPtrCount(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 40);
  if (v1)
  {
    *(_DWORD *)(this + ++*(_DWORD *)(this + 40) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::audioSamplesAvailable(uint64_t a1, void *a2, const AudioBufferList **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (WebCore::CAAudioStreamDescription *)(a1 + 88);
  if (!*(unsigned char *)(a1 + 168) || !WebCore::CAAudioStreamDescription::operator==() || *(unsigned char *)(a1 + 248))
  {
    *(unsigned char *)(a1 + 248) = 0;
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    uint64_t v11 = *(void *)((char *)a2 + 5);
    *(void *)(a1 + 232) = *a2;
    *(void *)(a1 + 237) = v11;
    char v12 = (semaphore_t *)WTF::fastMalloc((WTF *)8);
    *char v12 = 0;
    v12[1] = 0;
    semaphore_create(*MEMORY[0x1E4F14960], v12 + 1, 0, 0);
    std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)(a1 + 200), (IPC::Semaphore *)v12);
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
    if (*(_DWORD *)(v13 + 16) != 1)
    {
      uint64_t v39 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebKit::UserMediaCaptureManagerProxySourceProxy::videoFrameAvailable(v39);
    }
    uint64_t v14 = std::optional<WebCore::CAAudioStreamDescription>::operator=[abi:sn180100]<AudioStreamBasicDescription const&,void>(v10, *(const AudioStreamBasicDescription **)(v13 + 8));
    uint64_t v15 = WebCore::AudioSession::sharedSession(v14);
    unint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 104))(v15);
    uint64_t v17 = 128;
    if (v16 > 0x80) {
      uint64_t v17 = v16;
    }
    *(void *)(a1 + 224) = v17;
    if (!*(unsigned char *)(a1 + 168)) {
      goto LABEL_22;
    }
    WebCore::CAAudioStreamDescription::sampleRate(v10);
    WebKit::ProducerSharedCARingBuffer::allocate(v10, (const WebCore::CAAudioStreamDescription *)(v18 + v18), (uint64_t)v42);
    if (!v44)
    {
      __break(0xC471u);
      JUMPOUT(0x198F9308CLL);
    }
    uint64_t v19 = (WebCore::CARingBuffer *)v42[0];
    v42[0] = 0;
    int v40 = v19;
    WTF::MachSendRight::MachSendRight();
    *(_OWORD *)&v41[8] = v43;
    uint64_t v20 = *(WebCore::CARingBuffer **)(a1 + 80);
    uint64_t v21 = v40;
    int v40 = 0;
    *(void *)(a1 + 80) = v21;
    if (v20) {
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](a1 + 80, v20);
    }
    if (!*(unsigned char *)(a1 + 168))
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v23 = *(IPC::Semaphore **)(a1 + 200);
    uint64_t v24 = *(void *)(a1 + 224);
    uint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v25 = 758;
    *((void *)v25 + 1) = 0;
    *((void *)v25 + 66) = (char *)v25 + 16;
    *((void *)v25 + 67) = 512;
    *((void *)v25 + 68) = 0;
    *((void *)v25 + 70) = 0;
    *((void *)v25 + 69) = 0;
    IPC::Encoder::encodeHeader(v25);
    uint64_t v45 = v25;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v25, (uint64_t *)(a1 + 48));
    IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::encode(v25, (unint64_t)v41);
    uint64_t v26 = WebCore::CAAudioStreamDescription::streamDescription(v10);
    IPC::ArgumentCoder<AudioStreamBasicDescription,void>::encode(v25, v26);
    IPC::ArgumentCoder<IPC::Semaphore,void>::encode((uint64_t)v25, v23);
    IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v25, a1 + 232);
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v25, v24);
    IPC::Connection::sendMessageImpl(v22, (uint64_t *)&v45, 0, 0);
    uint64_t v28 = v45;
    uint64_t v45 = 0;
    if (v28)
    {
      IPC::Encoder::~Encoder(v28, v27);
      WTF::fastFree(v37, v38);
    }
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v41);
    uint64_t v29 = v40;
    int v40 = 0;
    if (v29) {
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v40, v29);
    }
    std::__optional_destruct_base<WebKit::ProducerSharedCARingBuffer::Pair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42);
  }
  long long v30 = *(WebCore::CARingBuffer **)(a1 + 80);
  if (((unsigned int (*)(const AudioBufferList **))(*a3)->mBuffers[0].mData)(a3) != 1)
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x198F9306CLL);
  }
  uint64_t result = WebCore::CARingBuffer::store(v30, a3[5]);
  unint64_t v32 = *(void *)(a1 + 216) + a5;
  unint64_t v33 = *(void *)(a1 + 224);
  unint64_t v34 = v32 / v33;
  *(void *)(a1 + 208) += a5;
  *(void *)(a1 + 216) = v32 % v33;
  if (v33 <= v32)
  {
    unsigned int v35 = 1;
    do
      uint64_t result = MEMORY[0x1997420B0](*(unsigned int *)(*(void *)(a1 + 200) + 4));
    while (v34 > v35++);
  }
  return result;
}

void WebKit::UserMediaCaptureManagerProxySourceProxy::videoFrameAvailable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 192)) {
    BOOL v6 = *(unsigned __int16 *)(a2 + 34) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
  }
  else
  {
    if (!*(void *)(a1 + 184))
    {
      uint64_t v8 = WTF::fastMalloc((WTF *)0x70);
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(unsigned char *)(v8 + 104) = 1;
      char v9 = *(WTF **)(a1 + 184);
      *(void *)(a1 + 184) = v8;
      if (v9) {
        std::default_delete<WebCore::ImageRotationSessionVT>::operator()[abi:sn180100](v9, v7);
      }
    }
    LOWORD(v33[0]) = 0;
    DWORD1(v33[0]) = 0;
    int v10 = *(unsigned __int16 *)(v4 + 34);
    if (v10 == 270 || v10 == 180 || v10 == 90) {
      DWORD1(v33[0]) = *(unsigned __int16 *)(v4 + 34);
    }
    WebCore::ImageRotationSessionVT::rotate();
    LOBYTE(v33[0]) = 0;
    BYTE8(v33[0]) = 0;
    WebCore::VideoFrameCV::create();
    uint64_t v4 = v34;
    uint64_t v11 = v35;
    unsigned int v35 = 0;
    if (v11)
    {
      CFRelease(v11);
      if (!v34) {
        return;
      }
    }
    else if (!v34)
    {
      return;
    }
  }
  if (WebCore::ProcessIdentity::operator BOOL()) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 64))(v4, a1 + 64);
  }
  uint64_t v12 = *(void *)(a1 + 256);
  if (v12)
  {
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
    unsigned int v35 = (IPC::Encoder *)v4;
    WebKit::RemoteVideoFrameObjectHeap::add(v12, (uint64_t *)&v35, (uint64_t)v33);
    uint64_t v13 = (unsigned int *)v35;
    unsigned int v35 = 0;
    if (v13 && atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(void *)v13 + 8))(v13);
    }
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v15 = 759;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 66) = (char *)v15 + 16;
    *((void *)v15 + 67) = 512;
    *((void *)v15 + 68) = 0;
    *((void *)v15 + 70) = 0;
    *((void *)v15 + 69) = 0;
    IPC::Encoder::encodeHeader(v15);
    unsigned int v35 = v15;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v15, (uint64_t *)(a1 + 48));
    IPC::ArgumentCoder<WebKit::RemoteVideoFrameProxyProperties,void>::encode(v15, (uint64_t)v33);
    IPC::ArgumentCoder<WebCore::VideoFrameTimeMetadata,void>::encode(v15, a3);
    IPC::Connection::sendMessageImpl(v14, (uint64_t *)&v35, 0, 0);
    uint64_t v17 = v35;
    unsigned int v35 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v16);
      WTF::fastFree(v18, v19);
    }
    goto LABEL_29;
  }
  uint64_t v20 = *(void *)(a1 + 56);
  uint64_t v21 = (uint64_t *)(a1 + 48);
  uint64_t v22 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
  uint64_t v23 = v22;
  if (v22) {
    CFRetain(v22);
  }
  __int16 v24 = *(_WORD *)(v4 + 34);
  char v25 = *(unsigned char *)(v4 + 32);
  v33[0] = *(_OWORD *)(v4 + 16);
  uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v26 = 760;
  *((void *)v26 + 1) = 0;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  unsigned int v35 = v26;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v26, v21);
  IPC::ArgumentCoder<__CVBuffer *,void>::encode((uint64_t)v26, v23);
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v26, v24);
  uint64_t v27 = (unsigned char *)IPC::Encoder::grow(v26, 1uLL, 1);
  if (!v28)
  {
    __break(0xC471u);
    return;
  }
  unsigned char *v27 = v25;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v26, (uint64_t)v33);
  IPC::ArgumentCoder<WebCore::VideoFrameTimeMetadata,void>::encode(v26, a3);
  IPC::Connection::sendMessageImpl(v20, (uint64_t *)&v35, 0, 0);
  long long v30 = v35;
  unsigned int v35 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
    if (!v23) {
      goto LABEL_29;
    }
  }
  else if (!v23)
  {
    goto LABEL_29;
  }
  CFRelease(v23);
LABEL_29:
  if (atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v4 + 8));
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

void non-virtual thunk to'WebKit::UserMediaCaptureManagerProxySourceProxy::~UserMediaCaptureManagerProxySourceProxy(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
}

{
  WebKit::UserMediaCaptureManagerProxySourceProxy::operator delete((WebKit::UserMediaCaptureManagerProxySourceProxy *)((char *)this - 24));
}

{
  WebKit::UserMediaCaptureManagerProxySourceProxy::~UserMediaCaptureManagerProxySourceProxy((WebKit::UserMediaCaptureManagerProxySourceProxy *)((char *)this - 32));
}

{
  WebKit::UserMediaCaptureManagerProxySourceProxy::operator delete((WebKit::UserMediaCaptureManagerProxySourceProxy *)((char *)this - 32));
}

uint64_t non-virtual thunk to'WebKit::UserMediaCaptureManagerProxySourceProxy::ptrCount(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t non-virtual thunk to'WebKit::UserMediaCaptureManagerProxySourceProxy::ptrCountWithoutThreadCheck(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t non-virtual thunk to'WebKit::UserMediaCaptureManagerProxySourceProxy::incrementPtrCount(uint64_t this)
{
  return this;
}

uint64_t non-virtual thunk to'WebKit::UserMediaCaptureManagerProxySourceProxy::decrementPtrCount(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 16);
  if (v1)
  {
    *(_DWORD *)(this + ++*(_DWORD *)(this + 16) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t non-virtual thunk to'WebKit::UserMediaCaptureManagerProxySourceProxy::audioSamplesAvailable(uint64_t a1, void *a2, const AudioBufferList **a3, uint64_t a4, uint64_t a5)
{
  return WebKit::UserMediaCaptureManagerProxySourceProxy::audioSamplesAvailable(a1 - 24, a2, a3, a4, a5);
}

void non-virtual thunk to'WebKit::UserMediaCaptureManagerProxySourceProxy::videoFrameAvailable(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void WebKit::UserMediaCaptureManagerProxySourceProxy::~UserMediaCaptureManagerProxySourceProxy(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  if (*(unsigned char *)(*((void *)this + 9) + 112)) {
    WebCore::RealtimeMediaSource::removeVideoFrameObserver();
  }
  else {
    WebCore::RealtimeMediaSource::removeAudioSampleObserver();
  }
  WebCore::RealtimeMediaSource::removeObserver(*((WebCore::RealtimeMediaSource **)this + 9), this);
  uint64_t v3 = (unsigned int *)*((void *)this + 171);
  *((void *)this + 171) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 392, v2);
  std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 264, v4);
  uint64_t v6 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 16), v5);
  }
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)this + 25, 0);
  uint64_t v8 = (WTF *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v8) {
    std::default_delete<WebCore::ImageRotationSessionVT>::operator()[abi:sn180100](v8, v7);
  }
  if (*((unsigned char *)this + 168)) {
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebKit::UserMediaCaptureManagerProxySourceProxy *)((char *)this + 88));
  }
  char v9 = (WebCore::CARingBuffer *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v9) {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](this + 80, v9);
  }
  uint64_t v10 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 144))(v10);
  }
  WTF::MachSendRight::~MachSendRight((WebKit::UserMediaCaptureManagerProxySourceProxy *)((char *)this + 64));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 7);

  MEMORY[0x1F4171960](this);
}

uint64_t std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    char v5 = *(WTF::StringImpl **)(a1 + 40);
    *(void *)(a1 + ++*(_DWORD *)(this + 40) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t std::default_delete<WebCore::ImageRotationSessionVT>::operator()[abi:sn180100](WTF *this, void *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4) {
    CFRelease(v4);
  }

  return WTF::fastFree(this, a2);
}

void WebKit::UserMediaCaptureManagerProxySourceProxy::operator delete(WebKit::UserMediaCaptureManagerProxySourceProxy *a1)
{
  WebKit::UserMediaCaptureManagerProxySourceProxy::~UserMediaCaptureManagerProxySourceProxy(a1);
  if (v1[10])
  {
    bzero(v1, 0x560uLL);
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::settings(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  uint64_t v2 = (unsigned char *)*((void *)this + 9);
  if (v2[112])
  {
    if (*((unsigned char *)this + 368)) {
      return (uint64_t)this + 264;
    }
    uint64_t v5 = (*(uint64_t (**)(unsigned char *))(*(void *)v2 + 128))(v2);
    unint64_t v6 = v5;
    if (*((unsigned char *)this + 368))
    {
      long long v7 = *(_OWORD *)v5;
      long long v8 = *(_OWORD *)(v5 + 16);
      *((unsigned char *)this + 296) = *(unsigned char *)(v5 + 32);
      *(_OWORD *)((char *)this + 264) = v7;
      *(_OWORD *)((char *)this + 280) = v8;
      WTF::String::operator=((uint64_t *)this + 38, (WTF::StringImpl **)(v5 + 40));
      WTF::String::operator=((uint64_t *)this + 39, (WTF::StringImpl **)(v6 + 48));
      WTF::String::operator=((uint64_t *)this + 40, (WTF::StringImpl **)(v6 + 56));
      uint64_t v9 = *(void *)(v6 + 94);
      long long v10 = *(_OWORD *)(v6 + 80);
      *(_OWORD *)((char *)this + 328) = *(_OWORD *)(v6 + 64);
      *(_OWORD *)((char *)this + 344) = v10;
      *(void *)((char *)this + 358) = v9;
    }
    else
    {
      std::construct_at[abi:sn180100]<WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings const&,WebCore::RealtimeMediaSourceSettings*>((uint64_t)this + 264, (long long *)v5);
      *((unsigned char *)this + 368) = 1;
    }
    unint64_t v11 = *((unsigned int *)this + 94);
    uint64_t v12 = *((unsigned int *)this + 95);
    if (*((void *)this + 47))
    {
      uint64_t v14 = (WebCore::RealtimeMediaSource *)*((void *)this + 9);
      uint64_t v15 = WebCore::RealtimeMediaSource::intrinsicSize(v14);
      unint64_t v6 = (*(uint64_t (**)(WebCore::RealtimeMediaSource *, unint64_t, uint64_t))(*(void *)v14 + 224))(v14, v11 | (v12 << 32), v15);
      unint64_t v11 = HIDWORD(v6);
      int v16 = (*(uint64_t (**)(void))(**((void **)this + 9) + 216))(*((void *)this + 9));
      if (v16 == 270 || v16 == 90)
      {
        int v17 = HIDWORD(v6);
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    double v13 = *((double *)this + 48);
    if (v13 == 0.0)
    {
      if (*((unsigned char *)this + 368)) {
        return (uint64_t)this + 264;
      }
    }
    else if (*((unsigned char *)this + 368))
    {
LABEL_22:
      if (v13 < *((float *)this + 68))
      {
        float v18 = v13;
        *((float *)this + 68) = v18;
      }
      return (uint64_t)this + 264;
    }
    do
    {
      __break(1u);
LABEL_19:
      int v17 = v6;
      LODWORD(v6) = v11;
LABEL_20:
      ;
    }
    while (!*((unsigned char *)this + 368));
    *((_DWORD *)this + 66) = v17;
    *((_DWORD *)this + 67) = v6;
    double v13 = *((double *)this + 48);
    if (v13 == 0.0) {
      return (uint64_t)this + 264;
    }
    goto LABEL_22;
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)v2 + 128);

  return v4();
}

__n128 std::__optional_storage_base<WebCore::RealtimeMediaSourceSettings,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RealtimeMediaSourceSettings,false>>(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 104) == *((unsigned __int8 *)a2 + 104))
  {
    if (*(unsigned char *)(a1 + 104))
    {
      long long v4 = *a2;
      long long v5 = a2[1];
      *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
      *(_OWORD *)a1 = v4;
      *(_OWORD *)(a1 + ++*(_DWORD *)(this + 16) = v5;
      WTF::String::operator=((uint64_t *)(a1 + 40), (uint64_t *)a2 + 5);
      WTF::String::operator=((uint64_t *)(a1 + 48), (uint64_t *)a2 + 6);
      WTF::String::operator=((uint64_t *)(a1 + 56), (uint64_t *)a2 + 7);
      uint64_t v6 = *(void *)((char *)a2 + 94);
      __n128 result = (__n128)a2[5];
      *(_OWORD *)(a1 + 64) = a2[4];
      *(__n128 *)(a1 + 80) = result;
      *(void *)(a1 + 94) = v6;
    }
  }
  else if (*(unsigned char *)(a1 + 104))
  {
    std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + ++*(_DWORD *)(this + 16) = v9;
    uint64_t v10 = *((void *)a2 + 5);
    *((void *)a2 + 5) = 0;
    *(void *)(a1 + ++*(_DWORD *)(this + 40) = v10;
    uint64_t v11 = *((void *)a2 + 6);
    *((void *)a2 + 6) = 0;
    *(void *)(a1 + 48) = v11;
    uint64_t v12 = *((void *)a2 + 7);
    *((void *)a2 + 7) = 0;
    *(void *)(a1 + 56) = v12;
    __n128 result = (__n128)a2[4];
    long long v13 = a2[5];
    *(void *)(a1 + 94) = *(void *)((char *)a2 + 94);
    *(__n128 *)(a1 + 64) = result;
    *(_OWORD *)(a1 + 80) = v13;
    *(unsigned char *)(a1 + 104) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(result + 104))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(WTF::StringImpl **)(result + 56);
    *(void *)(v2 + 56) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    long long v4 = *(WTF::StringImpl **)(v2 + 48);
    *(void *)(v2 + 48) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    __n128 result = *(void *)(v2 + 40);
    *(void *)(v2 + ++*(_DWORD *)(this + 40) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        __n128 result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    *(unsigned char *)(v2 + 104) = 0;
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings const&,WebCore::RealtimeMediaSourceSettings*>(uint64_t result, long long *a2)
{
  if (result)
  {
    long long v2 = *a2;
    long long v3 = a2[1];
    *(unsigned char *)(result + 32) = *((unsigned char *)a2 + 32);
    *(_OWORD *)__n128 result = v2;
    *(_OWORD *)(result + ++*(_DWORD *)(this + 16) = v3;
    long long v4 = (_DWORD *)*((void *)a2 + 5);
    if (v4) {
      *v4 += 2;
    }
    *(void *)(result + ++*(_DWORD *)(this + 40) = v4;
    long long v5 = (_DWORD *)*((void *)a2 + 6);
    if (v5) {
      *v5 += 2;
    }
    *(void *)(result + 48) = v5;
    uint64_t v6 = (_DWORD *)*((void *)a2 + 7);
    if (v6) {
      *v6 += 2;
    }
    *(void *)(result + 56) = v6;
    long long v7 = a2[4];
    long long v8 = a2[5];
    *(void *)(result + 94) = *(void *)((char *)a2 + 94);
    *(_OWORD *)(result + 64) = v7;
    *(_OWORD *)(result + 80) = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::updateVideoConstraints(uint64_t a1, const WebCore::MediaTrackConstraintSetMap *a2)
{
  std::optional<WebCore::MediaConstraints>::operator=[abi:sn180100]<WebCore::MediaConstraints const&,void>(a1 + 392, a2);
  WebCore::RealtimeMediaSource::extractVideoPresetConstraints();
  if (v9)
  {
    int v3 = *(_DWORD *)(a1 + 376);
    int v4 = v3 != v8;
    *(_DWORD *)(a1 + 376) = v8;
    if (!v11)
    {
      int v4 = v3 != v8 || *(_DWORD *)(a1 + 380) != 0;
      *(_DWORD *)(a1 + 380) = 0;
      goto LABEL_15;
    }
  }
  else
  {
    int v4 = v11;
    if (!v11) {
      goto LABEL_15;
    }
    int v4 = *(_DWORD *)(a1 + 376) != 0;
    *(_DWORD *)(a1 + 376) = 0;
  }
  if (*(_DWORD *)(a1 + 380) != v10) {
    int v4 = 1;
  }
  *(_DWORD *)(a1 + 380) = v10;
LABEL_15:
  if (v13)
  {
    BOOL v6 = *(double *)(a1 + 384) != v12;
    *(double *)(a1 + 384) = v12;
  }
  else
  {
    BOOL v6 = *(double *)(a1 + 384) != 0.0;
    *(void *)(a1 + 384) = 0;
  }
  return v4 | v6;
}

uint64_t std::optional<WebCore::MediaConstraints>::operator=[abi:sn180100]<WebCore::MediaConstraints const&,void>(uint64_t a1, const WebCore::MediaTrackConstraintSetMap *a2)
{
  uint64_t v4 = a1 + 944;
  uint64_t v5 = (uint64_t)a2 + 944;
  if (*(unsigned char *)(a1 + 968))
  {
    WebCore::MediaTrackConstraintSetMap::operator=((unsigned int *)a1, a2);
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v4, v5);
    char v6 = *((unsigned char *)a2 + 960);
  }
  else
  {
    WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((WebCore::MediaTrackConstraintSetMap *)a1, a2);
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4, v5);
    char v6 = *((unsigned char *)a2 + 960);
    *(unsigned char *)(a1 + 968) = 1;
  }
  *(unsigned char *)(a1 + 960) = v6;
  return a1;
}

unsigned int *WebCore::MediaTrackConstraintSetMap::operator=(unsigned int *a1, unsigned char *a2)
{
  return a1;
}

uint64_t WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    unsigned int v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        unsigned int v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::MediaTrackConstraintSetMap>::destruct(*(void *)a1 + 944 * v5, (char *)(*(void *)a1 + 944 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      unsigned int v4 = v5;
    }
    std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::MediaTrackConstraintSetMap const*,WebCore::MediaTrackConstraintSetMap const*,WebCore::MediaTrackConstraintSetMap*,0>(*(unsigned char **)a2, (unsigned char *)(*(void *)a2 + 944 * v4), *(unsigned int **)a1);
    unsigned int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(_DWORD *)(a2 + 12);
    if (v6 != v7)
    {
      int v8 = (WebCore::MediaTrackConstraintSetMap *)(*(void *)a1 + 944 * v6);
      char v9 = (const WebCore::MediaTrackConstraintSetMap *)(*(void *)a2 + 944 * v6);
      uint64_t v10 = 944 * v7 - 944 * v6;
      do
      {
        int v8 = (WebCore::MediaTrackConstraintSetMap *)((char *)WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v8, v9)+ 944);
        char v9 = (const WebCore::MediaTrackConstraintSetMap *)((char *)v9 + 944);
        v10 -= 944;
      }
      while (v10);
      unsigned int v6 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v6;
  }
  return a1;
}

__n128 std::__optional_storage_base<WebCore::IntConstraint,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::IntConstraint,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      __n128 result = *(__n128 *)(a2 + 12);
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      *(__n128 *)(a1 + 12) = result;
    }
  }
  else if (*(unsigned char *)(a1 + 48))
  {
    *(unsigned char *)(a1 + 48) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    *(void *)a1 = &unk_1EE9B46B0;
    __n128 result = *(__n128 *)(a2 + 12);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    *(__n128 *)(a1 + 12) = result;
    *(void *)a1 = &unk_1EE9B4688;
    *(unsigned char *)(a1 + 48) = 1;
  }
  return result;
}

__n128 std::__optional_storage_base<WebCore::DoubleConstraint,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::DoubleConstraint,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80))
  {
    if (*(unsigned char *)(a1 + 80))
    {
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      __n128 result = *(__n128 *)(a2 + 16);
      long long v3 = *(_OWORD *)(a2 + 32);
      long long v4 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      *(_OWORD *)(a1 + 32) = v3;
      *(_OWORD *)(a1 + 48) = v4;
      *(__n128 *)(a1 + ++*(_DWORD *)(this + 16) = result;
    }
  }
  else if (*(unsigned char *)(a1 + 80))
  {
    *(unsigned char *)(a1 + 80) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    *(void *)a1 = &unk_1EE9B4728;
    __n128 result = *(__n128 *)(a2 + 16);
    long long v5 = *(_OWORD *)(a2 + 32);
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    *(_OWORD *)(a1 + 32) = v5;
    *(_OWORD *)(a1 + 48) = v6;
    *(__n128 *)(a1 + ++*(_DWORD *)(this + 16) = result;
    *(void *)a1 = &unk_1EE9B4700;
    *(unsigned char *)(a1 + 80) = 1;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::BooleanConstraint,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BooleanConstraint,false> const&>(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int8 *)(result + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(unsigned char *)(result + 16))
    {
      *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
      *(_DWORD *)(result + 9) = *(_DWORD *)(a2 + 9);
    }
  }
  else if (*(unsigned char *)(result + 16))
  {
    *(unsigned char *)(result + ++*(_DWORD *)(this + 16) = 0;
  }
  else
  {
    *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
    *(void *)__n128 result = &unk_1EE9B4750;
    *(_DWORD *)(result + 9) = *(_DWORD *)(a2 + 9);
    *(unsigned char *)(result + ++*(_DWORD *)(this + 16) = 1;
  }
  return result;
}

unsigned int *std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::StringConstraint,false> const&>(unsigned int *result, unsigned char *a2)
{
  long long v3 = result;
  if (*((unsigned __int8 *)result + 48) == a2[48])
  {
    if (*((unsigned char *)result + 48))
    {
      *((unsigned char *)result + 8) = a2[8];
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(result + 4, (uint64_t)(a2 + 16));
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v3 + 8, (uint64_t)(a2 + 32));
    }
  }
  else if (*((unsigned char *)result + 48))
  {
    return (unsigned int *)std::__optional_destruct_base<WebCore::StringConstraint,false>::reset[abi:sn180100]((uint64_t)result, a2);
  }
  else
  {
    *((unsigned char *)result + 8) = a2[8];
    *(void *)__n128 result = &unk_1EE9B53F8;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(result + 4), (uint64_t)(a2 + 16));
    __n128 result = (unsigned int *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v3 + 8), (uint64_t)(a2 + 32));
    *((unsigned char *)v3 + 48) = 1;
  }
  return result;
}

unsigned char *std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::MediaTrackConstraintSetMap const*,WebCore::MediaTrackConstraintSetMap const*,WebCore::MediaTrackConstraintSetMap*,0>(unsigned char *a1, unsigned char *a2, unsigned int *a3)
{
  long long v4 = a1;
  if (a1 != a2)
  {
    do
    {
      WebCore::MediaTrackConstraintSetMap::operator=(a3, v4);
      v4 += 944;
      a3 += 236;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

WebCore::MediaTrackConstraintSetMap *WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(WebCore::MediaTrackConstraintSetMap *this, const WebCore::MediaTrackConstraintSetMap *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 48) = 0;
  if (*((unsigned char *)a2 + 48))
  {
    *((unsigned char *)this + 8) = *((unsigned char *)a2 + 8);
    *(void *)this = &unk_1EE9B46B0;
    long long v4 = *(_OWORD *)((char *)a2 + 12);
    *(_OWORD *)((char *)this + 25) = *(_OWORD *)((char *)a2 + 25);
    *(_OWORD *)((char *)this + 12) = v4;
    *(void *)this = &unk_1EE9B4688;
    *((unsigned char *)this + 48) = 1;
  }
  *((unsigned char *)this + 56) = 0;
  *((unsigned char *)this + 104) = 0;
  if (*((unsigned char *)a2 + 104))
  {
    *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
    *((void *)this + 7) = &unk_1EE9B46B0;
    long long v5 = *(_OWORD *)((char *)a2 + 68);
    *(_OWORD *)((char *)this + 81) = *(_OWORD *)((char *)a2 + 81);
    *(_OWORD *)((char *)this + 68) = v5;
    *((void *)this + 7) = &unk_1EE9B4688;
    *((unsigned char *)this + 104) = 1;
  }
  *((unsigned char *)this + 112) = 0;
  *((unsigned char *)this + 160) = 0;
  if (*((unsigned char *)a2 + 160))
  {
    *((unsigned char *)this + 120) = *((unsigned char *)a2 + 120);
    *((void *)this + 14) = &unk_1EE9B46B0;
    long long v6 = *(_OWORD *)((char *)a2 + 124);
    *(_OWORD *)((char *)this + 137) = *(_OWORD *)((char *)a2 + 137);
    *(_OWORD *)((char *)this + 124) = v6;
    *((void *)this + 14) = &unk_1EE9B4688;
    *((unsigned char *)this + 160) = 1;
  }
  *((unsigned char *)this + 168) = 0;
  *((unsigned char *)this + 2++*(_DWORD *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 216))
  {
    *((unsigned char *)this + 176) = *((unsigned char *)a2 + 176);
    *((void *)this + 21) = &unk_1EE9B46B0;
    long long v7 = *(_OWORD *)((char *)a2 + 180);
    *(_OWORD *)((char *)this + 193) = *(_OWORD *)((char *)a2 + 193);
    *(_OWORD *)((char *)this + 180) = v7;
    *((void *)this + 21) = &unk_1EE9B4688;
    *((unsigned char *)this + 2++*(_DWORD *)(this + 16) = 1;
  }
  *((unsigned char *)this + 224) = 0;
  *((unsigned char *)this + 304) = 0;
  if (*((unsigned char *)a2 + 304))
  {
    char v8 = *((unsigned char *)a2 + 232);
    *((void *)this + 28) = &unk_1EE9B4728;
    *((unsigned char *)this + 232) = v8;
    long long v9 = *((_OWORD *)a2 + 15);
    long long v10 = *((_OWORD *)a2 + 16);
    long long v11 = *((_OWORD *)a2 + 17);
    *(_OWORD *)((char *)this + 281) = *(_OWORD *)((char *)a2 + 281);
    *((_OWORD *)this + ++*(_DWORD *)(this + 16) = v10;
    *((_OWORD *)this + 17) = v11;
    *((_OWORD *)this + 15) = v9;
    *((void *)this + 28) = &unk_1EE9B4700;
    *((unsigned char *)this + 304) = 1;
  }
  *((unsigned char *)this + 312) = 0;
  *((unsigned char *)this + 392) = 0;
  if (*((unsigned char *)a2 + 392))
  {
    *((unsigned char *)this + 320) = *((unsigned char *)a2 + 320);
    *((void *)this + 39) = &unk_1EE9B4728;
    long long v12 = *(_OWORD *)((char *)a2 + 328);
    long long v13 = *(_OWORD *)((char *)a2 + 344);
    long long v14 = *(_OWORD *)((char *)a2 + 360);
    *(_OWORD *)((char *)this + 369) = *(_OWORD *)((char *)a2 + 369);
    *(_OWORD *)((char *)this + 344) = v13;
    *(_OWORD *)((char *)this + 360) = v14;
    *(_OWORD *)((char *)this + 328) = v12;
    *((void *)this + 39) = &unk_1EE9B4700;
    *((unsigned char *)this + 392) = 1;
  }
  *((unsigned char *)this + 400) = 0;
  *((unsigned char *)this + 480) = 0;
  if (*((unsigned char *)a2 + 480))
  {
    *((unsigned char *)this + 408) = *((unsigned char *)a2 + 408);
    *((void *)this + 50) = &unk_1EE9B4728;
    long long v15 = *((_OWORD *)a2 + 26);
    long long v16 = *((_OWORD *)a2 + 27);
    long long v17 = *((_OWORD *)a2 + 28);
    *(_OWORD *)((char *)this + 457) = *(_OWORD *)((char *)a2 + 457);
    *((_OWORD *)this + 27) = v16;
    *((_OWORD *)this + 28) = v17;
    *((_OWORD *)this + 26) = v15;
    *((void *)this + 50) = &unk_1EE9B4700;
    *((unsigned char *)this + 480) = 1;
  }
  *((unsigned char *)this + 488) = 0;
  *((unsigned char *)this + 504) = 0;
  if (*((unsigned char *)a2 + 504))
  {
    *((unsigned char *)this + 496) = *((unsigned char *)a2 + 496);
    *((void *)this + 61) = &unk_1EE9B4750;
    *(_DWORD *)((char *)this + 497) = *(_DWORD *)((char *)a2 + 497);
    *((unsigned char *)this + 504) = 1;
  }
  *((unsigned char *)this + 512) = 0;
  *((unsigned char *)this + 528) = 0;
  if (*((unsigned char *)a2 + 528))
  {
    *((unsigned char *)this + 520) = *((unsigned char *)a2 + 520);
    *((void *)this + 64) = &unk_1EE9B4750;
    *(_DWORD *)((char *)this + 521) = *(_DWORD *)((char *)a2 + 521);
    *((unsigned char *)this + 528) = 1;
  }
  *((unsigned char *)this + 536) = 0;
  *((unsigned char *)this + 552) = 0;
  if (*((unsigned char *)a2 + 552))
  {
    *((unsigned char *)this + 544) = *((unsigned char *)a2 + 544);
    *((void *)this + 67) = &unk_1EE9B4750;
    *(_DWORD *)((char *)this + 545) = *(_DWORD *)((char *)a2 + 545);
    *((unsigned char *)this + 552) = 1;
  }
  std::__optional_move_base<WebCore::StringConstraint,false>::__optional_move_base[abi:sn180100]((unsigned char *)this + 560, (uint64_t)a2 + 560);
  std::__optional_move_base<WebCore::StringConstraint,false>::__optional_move_base[abi:sn180100]((unsigned char *)this + 616, (uint64_t)a2 + 616);
  std::__optional_move_base<WebCore::StringConstraint,false>::__optional_move_base[abi:sn180100]((unsigned char *)this + 672, (uint64_t)a2 + 672);
  std::__optional_move_base<WebCore::StringConstraint,false>::__optional_move_base[abi:sn180100]((unsigned char *)this + 728, (uint64_t)a2 + 728);
  *((unsigned char *)this + 784) = 0;
  *((unsigned char *)this + 864) = 0;
  if (*((unsigned char *)a2 + 864))
  {
    *((unsigned char *)this + 792) = *((unsigned char *)a2 + 792);
    *((void *)this + 98) = &unk_1EE9B4728;
    long long v18 = *((_OWORD *)a2 + 50);
    long long v19 = *((_OWORD *)a2 + 51);
    long long v20 = *((_OWORD *)a2 + 52);
    *(_OWORD *)((char *)this + 841) = *(_OWORD *)((char *)a2 + 841);
    *((_OWORD *)this + 51) = v19;
    *((_OWORD *)this + 52) = v20;
    *((_OWORD *)this + 50) = v18;
    *((void *)this + 98) = &unk_1EE9B4700;
    *((unsigned char *)this + 864) = 1;
  }
  *((unsigned char *)this + 872) = 0;
  *((unsigned char *)this + 888) = 0;
  if (*((unsigned char *)a2 + 888))
  {
    *((unsigned char *)this + 880) = *((unsigned char *)a2 + 880);
    *((void *)this + 109) = &unk_1EE9B4750;
    *(_DWORD *)((char *)this + 881) = *(_DWORD *)((char *)a2 + 881);
    *((unsigned char *)this + 888) = 1;
  }
  *((unsigned char *)this + 896) = 0;
  *((unsigned char *)this + 912) = 0;
  if (*((unsigned char *)a2 + 912))
  {
    *((unsigned char *)this + 904) = *((unsigned char *)a2 + 904);
    *((void *)this + 112) = &unk_1EE9B4750;
    *(_DWORD *)((char *)this + 905) = *(_DWORD *)((char *)a2 + 905);
    *((unsigned char *)this + 912) = 1;
  }
  *((unsigned char *)this + 920) = 0;
  *((unsigned char *)this + 936) = 0;
  if (*((unsigned char *)a2 + 936))
  {
    *((unsigned char *)this + 928) = *((unsigned char *)a2 + 928);
    *((void *)this + 115) = &unk_1EE9B4750;
    *(_DWORD *)((char *)this + 929) = *(_DWORD *)((char *)a2 + 929);
    *((unsigned char *)this + 936) = 1;
  }
  return this;
}

uint64_t WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  unsigned int v3 = *(_DWORD *)(a2 + 12);
  *(void *)__n128 result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0x456C7A)
  {
    int v5 = 944 * v3;
    long long v6 = (WebCore::MediaTrackConstraintSetMap *)WTF::fastMalloc((WTF *)(944 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x3B0;
    *(void *)uint64_t v2 = v6;
    unsigned int v7 = *(_DWORD *)(a2 + 12);
    if (v7)
    {
      char v8 = *(const WebCore::MediaTrackConstraintSetMap **)a2;
      uint64_t v9 = 944 * v7;
      do
      {
        long long v6 = (WebCore::MediaTrackConstraintSetMap *)((char *)WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v6, v8)+ 944);
        char v8 = (const WebCore::MediaTrackConstraintSetMap *)((char *)v8 + 944);
        v9 -= 944;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

WebCore::CAAudioStreamDescription *std::optional<WebCore::CAAudioStreamDescription>::operator=[abi:sn180100]<AudioStreamBasicDescription const&,void>(WebCore::CAAudioStreamDescription *this, const AudioStreamBasicDescription *a2)
{
  if (*((unsigned char *)this + 80))
  {
    WebCore::CAAudioStreamDescription::CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v4, a2);
    *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v4[8];
    *(_OWORD *)((char *)this + 24) = v5;
    *((void *)this + 5) = v6;
    *((_OWORD *)this + 3) = v7;
    *((void *)this + 8) = v8;
    *((_DWORD *)this + 18) = v9;
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v4);
  }
  else
  {
    WebCore::CAAudioStreamDescription::CAAudioStreamDescription(this, a2);
    *((unsigned char *)this + 80) = 1;
  }
  return this;
}

unsigned int *WebKit::UserMediaCaptureManagerProxySourceProxy::queueAndProcessSerialAction(WTF::RunLoop *a1, uint64_t *a2)
{
  unsigned int v3 = a1;
  char v4 = 0;
  uint64_t v5 = *((void *)a1 + 171);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v5 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    a1 = (WTF::RunLoop *)MEMORY[0x19972E8D0](v5 + 48);
  }
  int v6 = *(_DWORD *)(v5 + 64);
  if (v6)
  {
    if (v6 == 1) {
      uint64_t v7 = v5 + 56;
    }
    else {
      uint64_t v7 = 0;
    }
    BOOL v8 = *(unsigned __int8 *)(v7 + 1) == 0;
  }
  else
  {
    BOOL v8 = 0;
  }
  int v9 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v5 + 48), (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 == 1)
  {
    if (v8)
    {
LABEL_11:
      (*(void (**)(unsigned int **__return_ptr))(*(void *)*a2 + 16))(&v29);
      goto LABEL_22;
    }
  }
  else
  {
    a1 = (WTF::RunLoop *)WTF::Lock::unlockSlow((WTF::Lock *)(v5 + 48));
    if (v8) {
      goto LABEL_11;
    }
  }
  uint64_t v10 = *((void *)v3 + 171);
  uint64_t v11 = WTF::RunLoop::main(a1);
  uint64_t v12 = *a2;
  *a2 = 0;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(void *)v11 + 32))(v11);
  long long v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *long long v14 = &unk_1EE9E2BD8;
  v14[1] = v12;
  *(_DWORD *)(v13 + 8) = 1;
  *(void *)(v13 + ++*(_DWORD *)(this + 16) = v11;
  *(void *)(v13 + 24) = 0;
  *(void *)(v13 + 32) = 0;
  *(void *)(v13 + ++*(_DWORD *)(this + 40) = "queueAndProcessSerialAction";
  *(void *)(v13 + 48) = 0;
  *(_WORD *)(v13 + 56) = 0;
  *(void *)uint64_t v13 = &unk_1EE9E2C00;
  *(void *)(v13 + 64) = 0;
  *(void *)(v13 + 72) = v14;
  atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
  __int16 v24 = (unsigned int *)v10;
  long long v26 = 0uLL;
  uint64_t v27 = "queueAndProcessSerialAction";
  uint64_t v28 = 0;
  v30[0] = 0;
  v30[1] = 0;
  v30[2] = (WTF::NativePromiseBase *)"<completion promise>";
  v30[3] = 0;
  long long v15 = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
  uint64_t v16 = *(void *)WTF::NativePromiseProducer<void,void,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v15, 0, (WTF::Logger::LogSiteIdentifier *)v30);
  if (v16) {
    atomic_fetch_add((atomic_uint *volatile)(v16 + 8), 1u);
  }
  char v17 = 0;
  uint64_t v29 = (unsigned int *)v16;
  long long v18 = (atomic_uchar *)(v13 + 57);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v13 + 57), (unsigned __int8 *)&v17, 1u, memory_order_acquire, memory_order_acquire);
  if (v17) {
    MEMORY[0x19972E8D0](v18);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(v13 + 64), v15);
  int v19 = 1;
  atomic_compare_exchange_strong_explicit(v18, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
  if (v19 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
  }
  char v25 = 0;
  v30[0] = (WTF::NativePromiseBase *)v13;
  WTF::NativePromise<void,void,0u>::maybeSettle((uint64_t)v24, v30, (WTF::Logger::LogSiteIdentifier *)&v26);
  long long v20 = (unsigned int *)v30[0];
  v30[0] = 0;
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v20 + 2);
    (*(void (**)(unsigned int *))(*(void *)v20 + 8))(v20);
  }
LABEL_22:
  uint64_t v21 = v29;
  uint64_t v29 = 0;
  __n128 result = (unsigned int *)*((void *)v3 + 171);
  *((void *)v3 + 171) = v21;
  if (!result) {
    goto LABEL_27;
  }
  if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    (*(void (**)(unsigned int *))(*(void *)result + 16))(result);
  }
  __n128 result = v29;
  uint64_t v29 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    __n128 result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    if (v8) {
      return result;
    }
  }
  else
  {
LABEL_27:
    if (v8) {
      return result;
    }
  }
  if (v25)
  {
    v30[0] = v25;
    WTF::NativePromise<void,void,0u>::maybeSettle((uint64_t)v24, v30, (WTF::Logger::LogSiteIdentifier *)&v26);
    uint64_t v23 = (unsigned int *)v30[0];
    v30[0] = 0;
    if (v23)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v23 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v23 + 2);
        (*(void (**)(unsigned int *))(*(void *)v23 + 8))(v23);
      }
    }
  }
  __n128 result = v24;
  if (v24)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v24 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v24 + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v24 + 16))(v24);
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvvLj0EE11whenSettledINS_8FunctionIFNS_3RefIS3_NS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEEvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvNS_6detail15VoidPlaceholderEEEE_SB_JST_EED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E2BD8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvvLj0EE11whenSettledINS_8FunctionIFNS_3RefIS3_NS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEEvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvNS_6detail15VoidPlaceholderEEEE_SB_JST_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E2BD8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvvLj0EE11whenSettledINS_8FunctionIFNS_3RefIS3_NS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEEvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvNS_6detail15VoidPlaceholderEEEE_SB_JST_EE4callEST_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t WTF::NativePromise<void,void,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E2C00;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9C1D08;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9E2C00;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9C1D08;
  char v4 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<void,void,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<void,void,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 1);
  v16[0] = a1;
  int v6 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v6) {
    BOOL v7 = v6[16] >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (v5) {
      BOOL v8 = "Rejecting";
    }
    else {
      BOOL v8 = "Resolving";
    }
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,void,0u>,char [11],void const*,char [2]>((uint64_t)v6, 4u, v8, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v16, "]");
  }
  char v9 = 0;
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
  if (v9) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  uint64_t v11 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  (*(void (**)(atomic_uchar **__return_ptr))(**(void **)(a1 + 72) + 16))(&v17);
  if (v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    void v16[2] = "<chained completion promise>";
    v16[3] = 0;
    WTF::NativePromise<void,void,0u>::chainTo(v17, (unint64_t)v11, (WTF::Logger::LogSiteIdentifier *)v16);
  }
  uint64_t v12 = (unsigned int *)v17;
  char v17 = 0;
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12 + 2);
    (*(void (**)(unsigned int *))(*(void *)v12 + 16))(v12);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v11)
  {
    long long v14 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v11);
    return WTF::fastFree((WTF *)v14, v15);
  }
  return result;
}

uint64_t WTF::NativePromise<void,void,0u>::chainTo(atomic_uchar *a1, unint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5 = (uint64_t)a1;
  char v6 = 0;
  BOOL v7 = a1 + 48;
  atomic_compare_exchange_strong_explicit(a1 + 48, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    a1 = (atomic_uchar *)MEMORY[0x19972E8D0](a1 + 48);
  }
  *(unsigned char *)(v5 + 112) = 1;
  BOOL v8 = *(atomic_uchar **)a2;
  if (*(void *)a2) {
    atomic_fetch_add((atomic_uint *volatile)v8 + 2, 1u);
  }
  BOOL v21 = *(_DWORD *)(v5 + 64) == 0;
  char v9 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v9) {
    BOOL v10 = v9[16] >= 4u;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [22],WTF::NativePromise<void,void,0u>,char [17],WTF::NativePromise<void,void,0u>,char [12],BOOL,char [2]>((uint64_t)v9, 4u, a3, " invoking chainTo() [", v5, " chainedPromise:", (uint64_t)v8, " isNothing:", (uint64_t)&v21, "]");
  }
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v8 + 2);
    (*(void (**)(atomic_uchar *))(*(void *)v8 + 16))(v8);
  }
  unsigned __int8 v11 = atomic_load((unsigned __int8 *)(v5 + 113));
  uint64_t result = (uint64_t)WTF::NativePromise<void,void,0u>::setDispatchMode(*(atomic_uchar **)a2, v11, a3);
  if (*(_DWORD *)(v5 + 64))
  {
    uint64_t result = (uint64_t)WTF::NativePromise<void,void,0u>::settleChainedPromise(v5, a2);
  }
  else
  {
    uint64_t v13 = *(unsigned int *)(v5 + 108);
    if (v13 == *(_DWORD *)(v5 + 104))
    {
      uint64_t result = WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 96, v13 + 1, a2);
      uint64_t v14 = *(void *)(v5 + 96) + 40 * *(unsigned int *)(v5 + 108);
      uint64_t v15 = *(void *)result;
      *(void *)uint64_t result = 0;
      *(void *)uint64_t v14 = v15;
      long long v16 = *(_OWORD *)(result + 24);
      *(_OWORD *)(v14 + 8) = *(_OWORD *)(result + 8);
      *(_OWORD *)(v14 + 24) = v16;
    }
    else
    {
      uint64_t v17 = *(void *)(v5 + 96) + 40 * v13;
      long long v18 = *(atomic_uchar **)a2;
      *(void *)a2 = 0;
      *(void *)uint64_t v17 = v18;
      long long v19 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v17 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v17 + 8) = v19;
    }
    ++*(_DWORD *)(v5 + 108);
  }
  int v20 = 1;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
  if (v20 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [22],WTF::NativePromise<void,void,0u>,char [17],WTF::NativePromise<void,void,0u>,char [12],BOOL,char [2]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5, const char *a6, uint64_t a7, const char *a8, uint64_t a9, const char *a10)
{
  v67[1] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v53, this);
  WTF::String::String((WTF::String *)&v52, a4);
  WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a5, &v51);
  WTF::String::String((WTF::String *)&v50, a6);
  WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a7, &v49);
  uint64_t v42 = (char *)a8;
  WTF::String::String((WTF::String *)&v48, a8);
  WTF::LogArgument<BOOL>::toString<BOOL>(&v47);
  WTF::String::String((WTF::String *)&v46, a10);
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, &v54);
  if (v54)
  {
    uint64_t v17 = v46;
    uint64_t v46 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    long long v18 = v47;
    int v47 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v16);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    long long v19 = v48;
    int v48 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v16);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    int v20 = v49;
    int v49 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v16);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    BOOL v21 = v50;
    unsigned int v50 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v16);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    uint64_t v22 = v51;
    uint64_t v51 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v16);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    uint64_t v23 = v52;
    uint64_t v52 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v16);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    __int16 v24 = v53;
    uint64_t v53 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v16);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    char v25 = *(NSObject **)(a1 + 32);
    long long v26 = (WTF *)os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    if (v26)
    {
      WTF::String::utf8();
      uint64_t v28 = v45[0] ? (char *)v45[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      long long v56 = v28;
      _os_log_impl(&dword_1985F2000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      long long v26 = v45[0];
      v45[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          long long v26 = (WTF *)WTF::fastFree(v26, v27);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      uint64_t v29 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v30 = *v29;
        if (v30) {
          break;
        }
        int v31 = *v29;
        atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v31, v30 | 1, memory_order_acquire, memory_order_acquire);
        if (v31 == v30)
        {
          uint64_t v32 = WTF::Logger::observers(v26);
          uint64_t v33 = *(unsigned int *)(v32 + 12);
          if (v33)
          {
            uint64_t v34 = *(uint64_t **)v32;
            uint64_t v40 = *(void *)v32 + 8 * v33;
            do
            {
              uint64_t v35 = *v34;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v56 + 4), this);
              int v57 = 0;
              WTF::String::String((WTF::String *)v58, a4);
              v58[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a5, &v59);
              int v60 = 0;
              WTF::String::String((WTF::String *)v61, a6);
              v61[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a7, &v62);
              int v63 = 0;
              WTF::String::String((WTF::String *)v64, v42);
              v64[2] = 0;
              WTF::LogArgument<BOOL>::toString<BOOL>(&v65);
              int v66 = 0;
              WTF::String::String((WTF::String *)v67, a10);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v35 + 16))(v35, a1, a2, v45);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v36);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                uint64_t v38 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2) {
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v27);
                  }
                  else {
                    *(_DWORD *)v38 -= 2;
                  }
                }
              }
              ++v34;
            }
            while (v34 != (uint64_t *)v40);
          }
          int v39 = 1;
          atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
          if (v39 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v54;
    BOOL v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v27);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WTF::NativePromise<void,void,0u>::setDispatchMode(atomic_uchar *a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5 = (uint64_t)a1;
  char v6 = 0;
  BOOL v7 = (WTF::Lock *)(a1 + 48);
  atomic_compare_exchange_strong_explicit(a1 + 48, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    a1 = (atomic_uchar *)MEMORY[0x19972E8D0](a1 + 48);
  }
  uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)result) {
    BOOL v9 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    uint64_t result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)result, 4u, a3, " runSynchronouslyOnTarget ", v5);
  }
  atomic_store(a2, (unsigned __int8 *)(v5 + 113));
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v5 + 48), (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1)
  {
    return (WTF::StringImpl *)WTF::Lock::unlockSlow(v7);
  }
  return result;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0x6666667)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    unsigned int v4 = *(_DWORD *)(result + 12);
    int v5 = 40 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)uint64_t v2 = v6;
    if (v4)
    {
      uint64_t v8 = v6;
      unint64_t v9 = (uint64_t *)v3;
      do
      {
        uint64_t v10 = *v9;
        uint64_t *v9 = 0;
        *(void *)uint64_t v8 = v10;
        long long v11 = *(_OWORD *)(v9 + 1);
        *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 3);
        *(_OWORD *)(v8 + 8) = v11;
        unint64_t v9 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v9) + 5;
        v8 += 40;
      }
      while (v9 != (uint64_t *)((char *)v3 + 40 * v4));
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::NativePromiseProducer<void,void,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x78);
  unint64_t v7 = (atomic_uchar *)WTF::NativePromise<void,void,0u>::NativePromise(v6, a3);
  *(void *)a1 = v7;
  long long v8 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a3 + 1);
  *(_OWORD *)(a1 + 8) = v8;
  WTF::NativePromise<void,void,0u>::setDispatchMode(v7, a2, a3);
  return a1;
}

uint64_t WTF::NativePromise<void,void,0u>::~NativePromise(uint64_t a1)
{
  int v1 = (WTF *)WTF::NativePromise<void,void,0u>::~NativePromise(a1);

  return WTF::fastFree(v1, v2);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  char v6;

  WTF::NativePromiseBase::log<char [10],WTF::NativePromise<void,void,0u>>((WTF::NativePromiseBase *)"destroying ", a1);
  WTF::NativePromise<void,void,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 96, v2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 72, v3);
  unsigned int v4 = *(unsigned int *)(a1 + 64);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9E2C20[v4])(&v6, a1 + 56);
  }
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

WTF::StringImpl *WTF::Logger::log<char [10],WTF::NativePromise<void,void,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v30, a3);
  WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a4, &v29);
  *(void *)long long buf = v30;
  v28[0] = v29;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
  if (v31)
  {
    unint64_t v9 = v29;
    uint64_t v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v10 = v30;
    int v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    long long v11 = *(NSObject **)(a1 + 32);
    uint64_t v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      WTF::String::utf8();
      uint64_t v14 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v12 = v28[0];
      v28[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1) {
          uint64_t v12 = (WTF *)WTF::fastFree(v12, v13);
        }
        else {
          --*(_DWORD *)v12;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      uint64_t v15 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v16 = *v15;
        if (v16) {
          break;
        }
        int v17 = *v15;
        atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v17, v16 | 1, memory_order_acquire, memory_order_acquire);
        if (v17 == v16)
        {
          uint64_t v18 = WTF::Logger::observers(v12);
          uint64_t v19 = *(unsigned int *)(v18 + 12);
          if (v19)
          {
            int v20 = *(uint64_t **)v18;
            uint64_t v21 = *(void *)v18 + 8 * v19;
            do
            {
              uint64_t v22 = *v20;
              *(_DWORD *)long long buf = 0;
              WTF::String::String((WTF::String *)&buf[8], a3);
              int v33 = 0;
              WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a4, v34);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v22 + 16))(v22, a1, a2, v28);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v23);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                char v25 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v25)
                {
                  if (*(_DWORD *)v25 == 2) {
                    WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                  }
                  else {
                    *(_DWORD *)v25 -= 2;
                  }
                }
              }
              ++v20;
            }
            while (v20 != (uint64_t *)v21);
          }
          int v26 = 1;
          atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
          if (v26 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v31;
    int v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxySourceProxy::applyConstraints(WebCore::MediaConstraints &&,WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>)::{lambda(void)#1},WTF::Ref<WTF::NativePromise<void,void,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E2C70;
  uint64_t v3 = a1[124];
  a1[124] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 121), a2);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 94), v4);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 87), v5);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 80), v6);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 73), v7);
  unint64_t v9 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxySourceProxy::applyConstraints(WebCore::MediaConstraints &&,WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>)::{lambda(void)#1},WTF::Ref<WTF::NativePromise<void,void,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9E2C70;
  uint64_t v3 = *((void *)a1 + 124);
  *((void *)a1 + 124) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 968, a2);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 752, v4);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 696, v5);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 640, v6);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 584, v7);
  unint64_t v9 = (unsigned int *)*((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }

  return WTF::fastFree(a1, v8);
}

WTF::Lock *WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxySourceProxy::applyConstraints(WebCore::MediaConstraints &&,WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>)::{lambda(void)#1},WTF::Ref<WTF::NativePromise<void,void,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::call@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1[2];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = *(unsigned char **)(v5 + 72);
    if (v6[112])
    {
      WebCore::RealtimeMediaSource::removeVideoFrameObserver();
      uint64_t v7 = *(void *)(v5 + 72);
      uint64_t v8 = a1[2];
      a1[2] = 0;
      uint64_t v9 = a1[124];
      a1[124] = 0;
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x28);
      void *v10 = &unk_1EE9E2C98;
      v10[1] = v5;
      v10[2] = v8;
      v10[3] = a1 + 3;
      v10[4] = v9;
      int v16 = v10;
      (*(void (**)(uint64_t, void *, void **))(*(void *)v7 + 184))(v7, a1 + 3, &v16);
      long long v11 = v16;
      int v16 = 0;
      if (v11) {
        (*(void (**)(void *))(*v11 + 8))(v11);
      }
    }
    else
    {
      (*(void (**)(unsigned char *, void *, void *))(*(void *)v6 + 184))(v6, a1 + 3, a1 + 124);
    }
  }
  else
  {
    LOBYTE(v++*(_DWORD *)(this + 16) = 0;
    int v17 = 0;
    LOBYTE(v18) = 1;
    uint64_t v12 = a1[124];
    a1[124] = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v12 + 16))(v12, &v16);
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    if ((_BYTE)v18)
    {
      uint64_t v14 = v17;
      int v17 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
  }
  int v16 = 0;
  int v17 = 0;
  uint64_t v18 = "operator()";
  uint64_t v19 = 0;
  return WTF::NativePromise<void,void,0u>::createAndResolve<std::enable_if<true,void>>((WTF::NativePromiseBase *)&v16, a2);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit39UserMediaCaptureManagerProxySourceProxy16applyConstraintsEON7WebCore16MediaConstraintsENS_17CompletionHandlerIFvONSt3__18optionalINS4_19RealtimeMediaSource21ApplyConstraintsErrorEEEEEEENUlvE_clEvEUlOT_E_vJSD_EED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9E2C98;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit39UserMediaCaptureManagerProxySourceProxy16applyConstraintsEON7WebCore16MediaConstraintsENS_17CompletionHandlerIFvONSt3__18optionalINS4_19RealtimeMediaSource21ApplyConstraintsErrorEEEEEEENUlvE_clEvEUlOT_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E2C98;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit39UserMediaCaptureManagerProxySourceProxy16applyConstraintsEON7WebCore16MediaConstraintsENS_17CompletionHandlerIFvONSt3__18optionalINS4_19RealtimeMediaSource21ApplyConstraintsErrorEEEEEEENUlvE_clEvEUlOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && *(void *)(v3 + 8))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (!*(unsigned char *)(a2 + 16))
    {
      WebKit::UserMediaCaptureManagerProxySourceProxy::updateVideoConstraints(*(void *)(a1 + 8), *(const WebCore::MediaTrackConstraintSetMap **)(a1 + 24));
      LOBYTE(v11) = 0;
      char v13 = 0;
      std::__optional_storage_base<WebCore::RealtimeMediaSourceSettings,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RealtimeMediaSourceSettings,false>>(v5 + 264, &v11);
      std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11, v6);
    }
    WebCore::RealtimeMediaSource::addVideoFrameObserver();
    uint64_t v7 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a2);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  else
  {
    LOBYTE(v11) = 0;
    *((void *)&v11 + 1) = 0;
    char v12 = 1;
    uint64_t v9 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v9 + 16))(v9, &v11);
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
    if (v12)
    {
      uint64_t result = (WTF::StringImpl *)*((void *)&v11 + 1);
      *((void *)&v11 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSF_SE_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(WTF::StringImpl **)(a2 + 16);
  *(void *)(a2 + ++*(_DWORD *)(this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t result = *(WTF **)a2;
  if (*(void *)a2)
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSF_SE_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x90);
  uint64_t v7 = (atomic_uchar *)WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromise(v6, a3);
  *(void *)a1 = v7;
  long long v8 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a3 + 1);
  *(_OWORD *)(a1 + 8) = v8;
  WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::setDispatchMode(v7, a2, a3);
  return a1;
}

WTF::StringImpl *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::setDispatchMode(atomic_uchar *a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5 = (uint64_t)a1;
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  atomic_compare_exchange_strong_explicit(a1 + 48, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    a1 = (atomic_uchar *)MEMORY[0x19972E8D0](a1 + 48);
  }
  uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)result) {
    BOOL v9 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    uint64_t result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, a3, " runSynchronouslyOnTarget ", v5);
  }
  atomic_store(a2, (unsigned __int8 *)(v5 + 137));
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v5 + 48), (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1)
  {
    return (WTF::StringImpl *)WTF::Lock::unlockSlow(v7);
  }
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromise(uint64_t a1, _OWORD *a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9E2CD0;
  long long v3 = a2[1];
  *(_OWORD *)(a1 + ++*(_DWORD *)(this + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a1 + 112;
  *(void *)(a1 + 104) = 1;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 0;
  uint64_t v4 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v4 && v4[16] >= 4u) {
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v4, 4u, "creating ", a1);
  }
  return a1;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  long long v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 132);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 120);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromise(a1);

  return WTF::fastFree((WTF *)v1, v2);
}

unsigned int *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromise(unsigned int *a1)
{
  char v2 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2) {
    BOOL v3 = v2[16] >= 4u;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v2, 4u, "destroying ", (uint64_t)a1);
  }
  WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 30), v4);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v5);
  uint64_t v6 = a1[22];
  if (v6 != -1) {
    ((void (*)(char *, unsigned int *))off_1EE9E2CE8[v6])(&v8, a1 + 14);
  }
  a1[22] = -1;
  return a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(v4)
         + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESF_Lj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SF_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E2CB0[v3])(&v5, a2);
  }
  *(_DWORD *)(a2 + 24) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESF_Lj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SF_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxySourceProxy::takePhoto(WebCore::PhotoSettings &&)::{lambda(void)#1},WTF::Ref<WTF::NativePromise<void,void,0u>,WTF::RawPtrTraits<WTF::NativePromise>,WTF::DefaultRefDerefTraits<WTF::NativePromise>>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E2D10;
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(a1 + 9);
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxySourceProxy::takePhoto(WebCore::PhotoSettings &&)::{lambda(void)#1},WTF::Ref<WTF::NativePromise<void,void,0u>,WTF::RawPtrTraits<WTF::NativePromise>,WTF::DefaultRefDerefTraits<WTF::NativePromise>>>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9E2D10;
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(a1 + 9);
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxySourceProxy::takePhoto(WebCore::PhotoSettings &&)::{lambda(void)#1},WTF::Ref<WTF::NativePromise<void,void,0u>,WTF::RawPtrTraits<WTF::NativePromise>,WTF::DefaultRefDerefTraits<WTF::NativePromise>>>::call@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v74[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4 || !*(void *)(v4 + 8))
  {
    uint64_t v68 = 0;
    *(void *)&long long v69 = 0;
    *((void *)&v69 + 1) = "operator()";
    *(void *)&long long v70 = 0;
    uint64_t isSettled = *(void *)(a1 + 72);
    if (isSettled)
    {
      uint64_t isSettled = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::isSettled(isSettled);
      uint64_t v24 = *(void *)(a1 + 72);
      if (!isSettled)
      {
        char v25 = 0;
        int v26 = (WTF::NativePromiseBase *)(v24 + 48);
        v63[0] = (WTF::Lock *)(v24 + 48);
        LOBYTE(v63[1]) = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v24 + 48), (unsigned __int8 *)&v25, 1u, memory_order_acquire, memory_order_acquire);
        if (v25) {
          int v26 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
        }
        uint64_t v27 = (unsigned char *)WTF::NativePromiseBase::logChannel(v26);
        if (*v27)
        {
          uint64_t v28 = v27;
          if (v27[16] >= 4u)
          {
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v66, (WTF::Logger::LogSiteIdentifier *)&v68);
            WTF::String::String((WTF::String *)&v65, " rejecting ");
            WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v24, &v64);
            WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v66, (uint64_t *)&v65, (uint64_t *)&v64, &v67);
            int v30 = v64;
            uint64_t v64 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2) {
                WTF::StringImpl::destroy(v30, v29);
              }
              else {
                *(_DWORD *)v30 -= 2;
              }
            }
            uint64_t v35 = v65;
            uint64_t v65 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2) {
                WTF::StringImpl::destroy(v35, v29);
              }
              else {
                *(_DWORD *)v35 -= 2;
              }
            }
            uint64_t v36 = v66;
            int v66 = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2) {
                WTF::StringImpl::destroy(v36, v29);
              }
              else {
                *(_DWORD *)v36 -= 2;
              }
            }
            unsigned int v37 = *((void *)v28 + 4);
            uint64_t v38 = (WTF *)os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
            if (v38)
            {
              WTF::String::utf8();
              uint64_t v40 = v60 ? (char *)v60 + 16 : 0;
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = v40;
              _os_log_impl(&dword_1985F2000, v37, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              uint64_t v38 = v60;
              int v60 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 1) {
                  uint64_t v38 = (WTF *)WTF::fastFree(v38, v39);
                }
                else {
                  --*(_DWORD *)v38;
                }
              }
            }
            if (*v28 && v28[16] >= 4u)
            {
              uint64_t v41 = (atomic_uchar *)MEMORY[0x1E4F30998];
              while (1)
              {
                int v42 = *v41;
                if (v42) {
                  break;
                }
                int v43 = *v41;
                atomic_compare_exchange_strong_explicit(v41, (unsigned __int8 *)&v43, v42 | 1, memory_order_acquire, memory_order_acquire);
                if (v43 == v42)
                {
                  uint64_t v44 = WTF::Logger::observers(v38);
                  uint64_t v45 = *(unsigned int *)(v44 + 12);
                  if (v45)
                  {
                    uint64_t v46 = *(uint64_t **)v44;
                    uint64_t v47 = *(void *)v44 + 8 * v45;
                    do
                    {
                      uint64_t v48 = *v46;
                      *(_DWORD *)long long buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)&v68);
                      LODWORD(v72) = 0;
                      WTF::String::String((WTF::String *)((char *)&v72 + 8), " rejecting ");
                      LODWORD(v73) = 0;
                      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v24, v74);
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v60, (uint64_t)buf, 3uLL);
                      (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF::StringImpl **))(*(void *)v48 + 16))(v48, v28, 4, &v60);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v49);
                      for (uint64_t i = 40; i != -8; i -= 16)
                      {
                        uint64_t v51 = *(WTF::StringImpl **)&buf[i];
                        *(void *)&buf[i] = 0;
                        if (v51)
                        {
                          if (*(_DWORD *)v51 == 2) {
                            WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v39);
                          }
                          else {
                            *(_DWORD *)v51 -= 2;
                          }
                        }
                      }
                      ++v46;
                    }
                    while (v46 != (uint64_t *)v47);
                  }
                  int v52 = 1;
                  atomic_compare_exchange_strong_explicit(v41, (unsigned __int8 *)&v52, 0, memory_order_release, memory_order_relaxed);
                  if (v52 != 1) {
                    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                  }
                  break;
                }
              }
            }
            uint64_t v53 = v67;
            v67 = 0;
            if (v53)
            {
              if (*(_DWORD *)v53 == 2) {
                WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v39);
              }
              else {
                *(_DWORD *)v53 -= 2;
              }
            }
          }
        }
        *(void *)long long buf = "Track has ended";
        *(void *)&uint8_t buf[8] = 16;
        WTF::NeverDestroyed<WTF::String,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&v60, (uint64_t)buf);
        uint64_t v54 = *(unsigned int *)(v24 + 88);
        if (v54 != -1) {
          ((void (*)(WTF::StringImpl **, uint64_t))off_1EE9E2CE8[v54])(&v67, v24 + 56);
        }
        uint64_t v55 = v60;
        int v60 = 0;
        *(void *)(v24 + 56) = v55;
        *(_DWORD *)(v24 + 80) = 1;
        *(_DWORD *)(v24 + 88) = 1;
        WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll((void *)v24, (atomic_uchar *volatile *)v63);
        int v57 = v60;
        int v60 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2) {
            WTF::StringImpl::destroy(v57, v56);
          }
          else {
            *(_DWORD *)v57 -= 2;
          }
        }
        if (LOBYTE(v63[1]))
        {
          uint64_t v58 = v63[0];
          int v59 = 1;
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v63[0], (unsigned __int8 *)&v59, 0, memory_order_release, memory_order_relaxed);
          if (v59 != 1) {
            WTF::Lock::unlockSlow(v58);
          }
        }
        goto LABEL_88;
      }
    }
    else
    {
      uint64_t v24 = 0;
    }
    int v31 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
    if (*v31) {
      BOOL v32 = v31[16] >= 4u;
    }
    else {
      BOOL v32 = 0;
    }
    if (v32) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v31, 4u, (WTF::Logger::LogSiteIdentifier *)&v68, " ignored already resolved or rejected ", v24);
    }
LABEL_88:
    *(_OWORD *)long long buf = 0uLL;
    long long v72 = (unint64_t)"operator()";
    return WTF::NativePromise<void,void,0u>::createAndResolve<std::enable_if<true,void>>((WTF::NativePromiseBase *)buf, a2);
  }
  char v5 = (WTF::RunLoop *)(*(void *(**)(WTF::StringImpl **__return_ptr))(**(void **)(*(void *)(a1 + 8)
                                                                                               + 72)
                                                                                 + 160))(&v67);
  uint64_t v6 = v67;
  uint64_t v7 = WTF::RunLoop::main(v5);
  uint64_t v8 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  long long v61 = *(_OWORD *)(a1 + 80);
  long long v9 = *(_OWORD *)(a1 + 80);
  long long v62 = *(_OWORD *)(a1 + 96);
  v63[0] = 0;
  v63[1] = 0;
  int v60 = 0;
  long long v10 = *(_OWORD *)(a1 + 96);
  long long v69 = v9;
  long long v70 = v10;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(void *)v7 + 32))(v7);
  uint64_t v12 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v12 = &unk_1EE9E2DA8;
  *(void *)(v12 + 8) = v8;
  uint64_t v68 = 0;
  long long v13 = v70;
  *(_OWORD *)(v12 + ++*(_DWORD *)(this + 16) = v69;
  *(_OWORD *)(v12 + 32) = v13;
  *(_DWORD *)(v11 + 8) = 1;
  *(void *)(v11 + ++*(_DWORD *)(this + 16) = v7;
  *(void *)(v11 + 24) = 0;
  *(void *)(v11 + 32) = 0;
  *(void *)(v11 + ++*(_DWORD *)(this + 40) = "operator()";
  *(void *)(v11 + 48) = 0;
  *(_WORD *)(v11 + 56) = 0;
  *(void *)uint64_t v11 = &unk_1EE9E2DD0;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 72) = v12;
  atomic_fetch_add((atomic_uint *volatile)v6 + 2, 1u);
  *(void *)long long buf = v6;
  *(void *)&uint8_t buf[8] = v11;
  long long v72 = *(_OWORD *)v63;
  uint64_t v73 = "operator()";
  v74[0] = 0;
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer((uint64_t *)&v68);
  uint64_t v68 = 0;
  *(void *)&long long v69 = 0;
  *((void *)&v69 + 1) = "<completion promise>";
  *(void *)&long long v70 = 0;
  uint64_t v14 = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
  uint64_t v15 = *(void *)WTF::NativePromiseProducer<void,void,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v14, 0, (WTF::Logger::LogSiteIdentifier *)&v68);
  if (v15)
  {
    atomic_fetch_add((atomic_uint *volatile)(v15 + 8), 1u);
    uint64_t v11 = *(void *)&buf[8];
  }
  char v16 = 0;
  *a2 = v15;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v11 + 57), (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
  if (v16) {
    MEMORY[0x19972E8D0](v11 + 57);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(v11 + 64), v14);
  int v17 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v11 + 57), (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
  if (v17 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 57));
  }
  uint64_t v18 = *(WTF::NativePromiseBase **)&buf[8];
  *(void *)&uint8_t buf[8] = 0;
  uint64_t v68 = v18;
  WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::maybeSettle(*(uint64_t *)buf, &v68, (WTF::Logger::LogSiteIdentifier *)&v72);
  uint64_t v19 = (unsigned int *)v68;
  uint64_t v68 = 0;
  if (v19 && atomic_fetch_add((atomic_uint *volatile)v19 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v19 + 2);
    (*(void (**)(unsigned int *))(*(void *)v19 + 8))(v19);
  }
  int v20 = *(WTF::NativePromiseBase **)&buf[8];
  if (*(void *)&buf[8])
  {
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v68 = v20;
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::maybeSettle(*(uint64_t *)buf, &v68, (WTF::Logger::LogSiteIdentifier *)&v72);
    uint64_t v21 = (unsigned int *)v68;
    uint64_t v68 = 0;
    if (v21 && atomic_fetch_add((atomic_uint *volatile)v21 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21 + 2);
      (*(void (**)(unsigned int *))(*(void *)v21 + 8))(v21);
    }
    uint64_t v22 = *(unsigned int **)&buf[8];
    *(void *)&uint8_t buf[8] = 0;
    if (v22 && atomic_fetch_add((atomic_uint *volatile)v22 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v22 + 2);
      (*(void (**)(unsigned int *))(*(void *)v22 + 8))(v22);
    }
  }
  else
  {
    *(void *)&uint8_t buf[8] = 0;
  }
  int v33 = *(unsigned int **)buf;
  *(void *)long long buf = 0;
  if (v33 && atomic_fetch_add((atomic_uint *volatile)v33 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v33 + 2);
    (*(void (**)(unsigned int *))(*(void *)v33 + 16))(v33);
  }
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer((uint64_t *)&v60);
  uint64_t result = v67;
  v67 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result + 2);
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 16))(result);
    }
  }
  return result;
}

BOOL WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::isSettled(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(a1 + 48);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](a1 + 48);
  }
  int v5 = *(_DWORD *)(a1 + 88);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v5 != 0;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll(void *__dst, atomic_uchar *volatile *a2)
{
  int v5 = __dst + 12;
  int v4 = (void *)__dst[12];
  int v20 = &v22;
  uint64_t v21 = 1;
  uint64_t v23 = (WTF::NativePromiseBase **)&v25;
  uint64_t v24 = 1;
  if (v4 == __dst + 14)
  {
    uint64_t v7 = *((unsigned int *)__dst + 27);
    memcpy(&v25, v4, 8 * v7);
  }
  else
  {
    __dst[12] = __dst + 14;
    uint64_t v23 = (WTF::NativePromiseBase **)v4;
    int v6 = *((_DWORD *)__dst + 26);
    LODWORD(v7) = *((_DWORD *)__dst + 27);
    *((_DWORD *)__dst + 26) = 1;
    LODWORD(v24) = v6;
  }
  *((_DWORD *)__dst + 27) = 0;
  HIDWORD(v24) = v7;
  WTF::VectorBuffer<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::FastMalloc>::adopt(v5, &v20);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v8);
  uint64_t v9 = __dst[15];
  int v20 = (uint64_t *)v9;
  uint64_t v10 = *((unsigned int *)__dst + 33);
  LODWORD(v21) = *((_DWORD *)__dst + 32);
  HIDWORD(v21) = v10;
  v19[0] = 0;
  __dst[15] = 0;
  v19[1] = 0;
  __dst[16] = 0;
  WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v11);
  if (HIDWORD(v24))
  {
    long long v13 = v23;
    uint64_t v14 = 8 * HIDWORD(v24);
    do
    {
      uint64_t v15 = *v13++;
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(v15, (uint64_t)__dst, a2);
      v14 -= 8;
    }
    while (v14);
  }
  if (v10)
  {
    uint64_t v16 = 40 * v10;
    do
    {
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::settleChainedPromise((uint64_t)__dst, v9);
      v9 += 40;
      v16 -= 40;
    }
    while (v16);
  }
  WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v12);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v17);
}

unsigned __int8 *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, atomic_uchar *volatile *a3)
{
  int v5 = a1;
  if (!*((void *)a1 + 2)
    || (int v6 = atomic_load((unsigned __int8 *)(a2 + 137)), v6 == 1)
    && (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(void))(**((void **)a1 + 2) + 24))(*((void *)a1 + 2)),
        a1))
  {
    if (*((unsigned char *)v5 + 56))
    {
      v16[0] = v5;
      uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
      if (*result) {
        BOOL v10 = result[16] >= 4u;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10) {
        return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)v16, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
      }
    }
    else
    {
      atomic_uchar *volatile v11 = *a3;
      int v12 = 1;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
      }
      if (WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::hasRunnable(a2))
      {
        WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::takeResultRunnable(a2, &v15);
        (*(void (**)(void *__return_ptr))(*(void *)v15 + 16))(v16);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, void *))(*(void *)v5 + 24))(v5, a2, v16);
        if (v17 != -1) {
          ((void (*)(char *, void *))off_1EE9E2CB0[v17])(&v18, v16);
        }
        int v17 = -1;
        uint64_t v13 = v15;
        uint64_t v15 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
      }
      else
      {
        WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::takeResult(a2, (uint64_t)v16);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, void *))(*(void *)v5 + 24))(v5, a2, v16);
        if (v17 != -1) {
          ((void (*)(uint64_t *, void *))off_1EE9E2CB0[v17])(&v15, v16);
        }
      }
      char v14 = 0;
      uint64_t result = (unsigned __int8 *)*a3;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
      if (v14) {
        return (unsigned __int8 *)MEMORY[0x19972E8D0]();
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)v5 + 2);
    atomic_fetch_add((atomic_uint *volatile)v5 + 2, 1u);
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v8 = &unk_1EE9E2D48;
    v8[1] = v5;
    v8[2] = v5;
    v8[3] = a2;
    v16[0] = v8;
    (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v16);
    uint64_t result = (unsigned __int8 *)v16[0];
    v16[0] = 0;
    if (result) {
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::settleChainedPromise(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v9 = v2;
  long long v3 = *(_OWORD *)(a2 + 24);
  long long v10 = *(_OWORD *)(a2 + 8);
  long long v11 = v3;
  if (v2)
  {
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = "<chained promise>";
    uint64_t v8 = 0;
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage>((atomic_uchar *)v2, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v5);
    if (atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v2 + 8));
      (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = "<chained promise>";
    uint64_t v8 = 0;
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage>(0, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v5);
  }
  return WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(&v9);
}

BOOL WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::hasRunnable(uint64_t a1)
{
  char v2 = 0;
  long long v3 = (atomic_uchar *)(a1 + 48);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](a1 + 48);
  }
  int v5 = *(_DWORD *)(a1 + 88);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v5 == 2;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::takeResultRunnable@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  if (*(_DWORD *)(v2 + 88) == 2)
  {
    uint64_t v6 = *(void *)(v2 + 56);
    *(void *)(v2 + 56) = 0;
    *a2 = v6;
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::takeResult(v8);
  }
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::takeResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = 0;
  int v5 = (WTF::Lock *)(a1 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 48);
  }
  if (*(_DWORD *)(a1 + 88) == 1)
  {
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 24) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,(std::__variant_detail::_Trait)1>>(a2, a1 + 56);
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,(std::__variant_detail::_Trait)1>>(v8, v9);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E2CB0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E2D28[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSF_SE_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  uint64_t v4 = a3[2];
  a3[2] = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 16) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSF_SE_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E2D48;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E2D48;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

unsigned __int8 *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[2];
  if (*(unsigned char *)(*a1 + 56))
  {
    v9[0] = *a1;
    uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
    if (*result) {
      BOOL v4 = result[16] >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)v9, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::hasRunnable(a1[2]);
    uint64_t v7 = a1[2];
    if (hasRunnable)
    {
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::takeResultRunnable(a1[2], &v8);
      (*(void (**)(void *__return_ptr))(*(void *)v8 + 16))(v9);
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v9);
      if (v10 != -1) {
        ((void (*)(char *, void *))off_1EE9E2CB0[v10])(&v11, v9);
      }
      int v10 = -1;
      uint64_t result = v8;
      uint64_t v8 = 0;
      if (result) {
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
      }
    }
    else
    {
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::takeResult(a1[2], (uint64_t)v9);
      uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v9);
      if (v10 != -1) {
        return (unsigned __int8 *)((uint64_t (*)(unsigned __int8 **, void *))off_1EE9E2CB0[v10])(&v8, v9);
      }
    }
  }
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage>(atomic_uchar *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = a1 + 48;
  int v12 = (WTF::Lock *)v7;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (atomic_uchar *)MEMORY[0x19972E8D0]();
  }
  uint64_t v8 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", (uint64_t)a1);
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>,(std::__variant_detail::_Trait)1>>((uint64_t)(a1 + 56), a2);
  WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll(a1);
  uint64_t result = (uint64_t)v12;
  int v11 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    return WTF::Lock::unlockSlow(v12);
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 32);
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E2CE8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 32) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1EE9E2D60[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESF_Lj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SF_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 32);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E2CE8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESF_Lj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SF_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>(*a1, a2, a3);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESF_Lj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SF_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>(*a1, a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 32) == 1) {
    return std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>::operator=(a2, a3);
  }
  else {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__emplace[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>(a1, a3);
  }
}

uint64_t std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>::operator=(uint64_t a1, uint64_t a2)
{
  v4[0] = 0;
  int v5 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v4, a2);
  std::variant<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>::swap[abi:sn180100]<true,0>((uint64_t)v4, a1);
  if (v5 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9E2CB0[v5])(&v6, v4);
  }
  return a1;
}

uint64_t std::variant<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>::swap[abi:sn180100]<true,0>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 == -1)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 24);
    if (v5 == -1) {
      return result;
    }
    v10[0] = 0;
LABEL_11:
    int v7 = *((unsigned __int8 *)v10 + v5);
    BOOL v8 = v7 == 0;
    if (v7) {
      uint64_t v9 = result;
    }
    else {
      uint64_t v9 = a2;
    }
    if (v8) {
      uint64_t v2 = result;
    }
    uint64_t v3 = v9;
    goto LABEL_17;
  }
  unsigned int v5 = *(_DWORD *)(a2 + 24);
  if (v5 != -1 && v5 == v4) {
    return ((uint64_t (*)(_WORD *, uint64_t, uint64_t))off_1EE9E2D78[v4])(v10, result, a2);
  }
  v10[0] = 0;
  if (*((unsigned char *)v10 + v4))
  {
    v10[0] = 0;
    if (v5 != -1) {
      goto LABEL_11;
    }
  }
LABEL_17:
  LOBYTE(v10[0]) = 0;
  int v11 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v10, v2);
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>(v2, v3);
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>(v3, (uint64_t)v10);
  if (v11 != -1) {
    return ((uint64_t (*)(char *, _WORD *))off_1EE9E2CB0[v11])(&v12, v10);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E2CB0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E2D88[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJNS_4pairIN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESD_EE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SD_EEESQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
  uint64_t v4 = a2[2];
  a2[2] = a3[2];
  a3[2] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJNS_4pairIN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESD_EE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SD_EEESQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEEE19__generic_constructB8sn180100INS0_6__implIJSF_SE_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SE_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  uint64_t v4 = a3[2];
  a3[2] = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 16) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEEE19__generic_constructB8sn180100INS0_6__implIJSF_SE_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SE_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__emplace[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 32);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9E2CE8[v4])(&v6, a1);
  }
  *(_DWORD *)(a1 + 32) = -1;
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,(std::__variant_detail::_Trait)1>>(a1, a2);
  *(_DWORD *)(a1 + 32) = 1;
  return a1;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = result;
  uint64_t v5 = result[8];
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1EE9E2CE8[v5])(&v9, result);
LABEL_8:
    BOOL v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    v4[8] = 2;
    return result;
  }
  char v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    char v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v7();
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledIZZN6WebKit39UserMediaCaptureManagerProxySourceProxy9takePhotoEON7WebCore13PhotoSettingsEENUlvE_clEvEUlOT_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESK_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_S9_EEE_NS_3RefINS2_IvvLj0EEENS_12RawPtrTraitsIS10_EENS_21DefaultRefDerefTraitsIS10_EEEEJSX_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9E2DA8;
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledIZZN6WebKit39UserMediaCaptureManagerProxySourceProxy9takePhotoEON7WebCore13PhotoSettingsEENUlvE_clEvEUlOT_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESK_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_S9_EEE_NS_3RefINS2_IvvLj0EEENS_12RawPtrTraitsIS10_EENS_21DefaultRefDerefTraitsIS10_EEEEJSX_EED0Ev(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9E2DA8;
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledIZZN6WebKit39UserMediaCaptureManagerProxySourceProxy9takePhotoEON7WebCore13PhotoSettingsEENUlvE_clEvEUlOT_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESK_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_S9_EEE_NS_3RefINS2_IvvLj0EEENS_12RawPtrTraitsIS10_EENS_21DefaultRefDerefTraitsIS10_EEEEJSX_EE4callESX_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  v20[0] = 0;
  v20[1] = 0;
  v20[2] = "operator()";
  v20[3] = 0;
  uint64_t isSettled = *(void *)(a1 + 8);
  if (!isSettled)
  {
    char v7 = 0;
LABEL_12:
    char v14 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
    if (*v14) {
      BOOL v15 = v14[16] >= 4u;
    }
    else {
      BOOL v15 = 0;
    }
    if (v15) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v14, 4u, (WTF::Logger::LogSiteIdentifier *)v20, " ignored already resolved or rejected ", (uint64_t)v7);
    }
    goto LABEL_24;
  }
  uint64_t isSettled = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::isSettled(isSettled);
  char v7 = *(atomic_uchar **)(a1 + 8);
  if (isSettled) {
    goto LABEL_12;
  }
  char v8 = 0;
  char v9 = (WTF::NativePromiseBase *)(v7 + 48);
  uint64_t v25 = (WTF::Lock *)(v7 + 48);
  char v26 = 1;
  atomic_compare_exchange_strong_explicit(v7 + 48, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    char v9 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
  }
  int v10 = (unsigned char *)WTF::NativePromiseBase::logChannel(v9);
  if (*v10 && v10[16] >= 4u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v10, 4u, (WTF::Logger::LogSiteIdentifier *)v20, " settling ", (uint64_t)v7);
  }
  int v11 = *((_DWORD *)a2 + 6);
  if (v11 == 1)
  {
    WTF::String::isolatedCopy();
    goto LABEL_19;
  }
  if (!v11)
  {
    uint64_t v12 = *a2;
    uint64_t v13 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    WTF::String::isolatedCopy();
    uint64_t v21 = v12;
    uint64_t v22 = v13;
LABEL_19:
    LODWORD(v24) = v11;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__emplace[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>((uint64_t)(v7 + 56), (uint64_t)&v21);
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll(v7, (atomic_uchar *volatile *)&v25);
    if (v24 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9E2CB0[v24])(&v27, &v21);
    }
    if (v26)
    {
      uint64_t v16 = v25;
      int v17 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v25, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
      if (v17 != 1) {
        WTF::Lock::unlockSlow(v16);
      }
    }
LABEL_24:
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = "operator()";
    uint64_t v24 = 0;
    return WTF::NativePromise<void,void,0u>::createAndResolve<std::enable_if<true,void>>((WTF::NativePromiseBase *)&v21, a3);
  }
  uint64_t v19 = std::__throw_bad_variant_access[abi:sn180100]();
  return (WTF::Lock *)WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>::~ThenCallback(v19);
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E2DD0;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9E2E00;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9E2DD0;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9E2E00;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a3 + 24);
  v16[0] = a1;
  char v6 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v6) {
    BOOL v7 = v6[16] >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (v5) {
      char v8 = "Rejecting";
    }
    else {
      char v8 = "Resolving";
    }
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [11],void const*,char [2]>((uint64_t)v6, v8, (WTF::Logger::LogSiteIdentifier *)(a1 + 24), a2);
  }
  char v9 = 0;
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
  if (v9) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  int v11 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  (*(void (**)(atomic_uchar **__return_ptr))(**(void **)(a1 + 72) + 16))(&v17);
  if (v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    void v16[2] = "<chained completion promise>";
    void v16[3] = 0;
    WTF::NativePromise<void,void,0u>::chainTo(v17, (unint64_t)v11, (WTF::Logger::LogSiteIdentifier *)v16);
  }
  uint64_t v12 = (unsigned int *)v17;
  int v17 = 0;
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12 + 2);
    (*(void (**)(unsigned int *))(*(void *)v12 + 16))(v12);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v11)
  {
    char v14 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v11);
    return WTF::fastFree((WTF *)v14, v15);
  }
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(unsigned char *)(result + 56) = 1;
  return result;
}

WTF::StringImpl *WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [11],void const*,char [2]>(uint64_t a1, const char *a2, WTF::Logger::LogSiteIdentifier *a3, uint64_t a4)
{
  v54[1] = *MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v42, a2);
  WTF::String::String((WTF::String *)&v41, " then() call made from ");
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v40, a3);
  WTF::String::String((WTF::String *)&v39, "[");
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, &v38);
  WTF::String::String((WTF::String *)&v37, " callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v35, "]");
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v42, (uint64_t *)&v41, (uint64_t *)&v40, (uint64_t *)&v39, (uint64_t *)&v38, (uint64_t *)&v37, (uint64_t *)&v36, (uint64_t *)&v35, &v43);
  if (v43)
  {
    char v8 = v35;
    uint64_t v35 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    char v9 = v36;
    uint64_t v36 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    int v10 = v37;
    unsigned int v37 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v7);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    int v11 = v38;
    uint64_t v38 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v7);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = v39;
    int v39 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v7);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v13 = v40;
    uint64_t v40 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v7);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    char v14 = v41;
    uint64_t v41 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v7);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    BOOL v15 = v42;
    int v42 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v7);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v16 = *(NSObject **)(a1 + 32);
    int v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (v17)
    {
      WTF::String::utf8();
      uint64_t v19 = v34[0] ? (char *)v34[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      uint64_t v45 = v19;
      _os_log_impl(&dword_1985F2000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      int v17 = v34[0];
      v34[0] = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1) {
          int v17 = (WTF *)WTF::fastFree(v17, v18);
        }
        else {
          --*(_DWORD *)v17;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      int v20 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v21 = *v20;
        if (v21) {
          break;
        }
        int v22 = *v20;
        atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, v21 | 1, memory_order_acquire, memory_order_acquire);
        if (v22 == v21)
        {
          uint64_t v23 = WTF::Logger::observers(v17);
          uint64_t v24 = *(unsigned int *)(v23 + 12);
          if (v24)
          {
            uint64_t v25 = *(uint64_t **)v23;
            uint64_t v31 = *(void *)v23 + 8 * v24;
            do
            {
              uint64_t v26 = *v25;
              *(_DWORD *)long long buf = 0;
              WTF::String::String((WTF::String *)((char *)&v45 + 4), a2);
              int v46 = 0;
              WTF::String::String((WTF::String *)v47, " then() call made from ");
              v47[2] = 0;
              WTF::Logger::LogSiteIdentifier::toString(&v48, a3);
              int v49 = 0;
              WTF::String::String((WTF::String *)v50, "[");
              v50[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, &v51);
              int v52 = 0;
              WTF::String::String((WTF::String *)v53, " callback:");
              v53[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v53[6] = 0;
              WTF::String::String((WTF::String *)v54, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v34, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v26 + 16))(v26, a1, 4, v34);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v27);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                uint64_t v29 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v29)
                {
                  if (*(_DWORD *)v29 == 2) {
                    WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v18);
                  }
                  else {
                    *(_DWORD *)v29 -= 2;
                  }
                }
              }
              ++v25;
            }
            while (v25 != (uint64_t *)v31);
          }
          int v30 = 1;
          atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v30, 0, memory_order_release, memory_order_relaxed);
          if (v30 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v43;
    int v43 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v18);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unsigned __int8 *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v5 = 0;
  v65[1] = *MEMORY[0x1E4F143B8];
  char v6 = (WTF::Lock *)(a1 + 48);
  int v43 = v6;
  char v44 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    char v6 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  *(unsigned char *)(a1 + 136) = 1;
  uint64_t v7 = *(unsigned int *)(a1 + 88);
  uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v6);
  int v42 = result;
  if (*result) {
    BOOL v9 = result[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v53, a3);
    WTF::String::String((WTF::String *)&v52, " invoking maybeSettle() [");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a1, &v51);
    WTF::String::String((WTF::String *)&v50, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v48, " isNothing:");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v47);
    WTF::String::String((WTF::String *)&v46, "]");
    uint64_t result = (unsigned __int8 *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, &v54);
    if (!v54)
    {
      __break(0xC471u);
      return result;
    }
    int v11 = v46;
    int v46 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = v47;
    uint64_t v47 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v13 = v48;
    uint64_t v48 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v10);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    char v14 = v49;
    int v49 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v10);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    BOOL v15 = v50;
    unsigned int v50 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v10);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v16 = v51;
    uint64_t v51 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v10);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    int v17 = v52;
    int v52 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v10);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    char v18 = v53;
    uint64_t v53 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v10);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    uint64_t v19 = *((void *)v42 + 4);
    int v20 = (WTF *)os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      WTF::String::utf8();
      int v22 = v45[0] ? (char *)v45[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      long long v56 = v22;
      _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      int v20 = v45[0];
      v45[0] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1) {
          int v20 = (WTF *)WTF::fastFree(v20, v21);
        }
        else {
          --*(_DWORD *)v20;
        }
      }
    }
    if (*v42 && v42[16] >= 4u)
    {
      uint64_t v23 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v24 = *v23;
        if (v24) {
          break;
        }
        int v25 = *v23;
        atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v25, v24 | 1, memory_order_acquire, memory_order_acquire);
        if (v25 == v24)
        {
          uint64_t v26 = WTF::Logger::observers(v20);
          uint64_t v27 = *(unsigned int *)(v26 + 12);
          if (v27)
          {
            uint64_t v28 = *(uint64_t **)v26;
            uint64_t v40 = *(void *)v26 + 8 * v27;
            do
            {
              uint64_t v29 = v7;
              uint64_t v30 = *v28;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v56 + 4), a3);
              int v57 = 0;
              WTF::String::String((WTF::String *)v58, " invoking maybeSettle() [");
              v58[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a1, &v59);
              int v60 = 0;
              WTF::String::String((WTF::String *)v61, " callback:");
              v61[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v61[6] = 0;
              WTF::String::String((WTF::String *)v62, " isNothing:");
              v62[2] = 0;
              WTF::LogArgument<BOOL>::toString<BOOL>(&v63);
              int v64 = 0;
              WTF::String::String((WTF::String *)v65, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(void *)v30 + 16))(v30, v42, 4, v45);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v31);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                int v33 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v33)
                {
                  if (*(_DWORD *)v33 == 2) {
                    WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v21);
                  }
                  else {
                    *(_DWORD *)v33 -= 2;
                  }
                }
              }
              ++v28;
              uint64_t v7 = v29;
            }
            while (v28 != (uint64_t *)v40);
          }
          int v34 = 1;
          atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
          if (v34 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = (unsigned __int8 *)v54;
    uint64_t v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (*(_DWORD *)(a1 + 88))
  {
    uint64_t result = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(*a2, a1, (atomic_uchar *volatile *)&v43);
  }
  else
  {
    uint64_t v35 = *(unsigned int *)(a1 + 108);
    if (v35 == *(_DWORD *)(a1 + 104))
    {
      uint64_t result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 96, v35 + 1, (unint64_t)a2);
      uint64_t v35 = *(unsigned int *)(a1 + 108);
      int v36 = v35 + 1;
      uint64_t v37 = *(void *)(a1 + 96);
      uint64_t v38 = *(WTF::NativePromiseBase **)result;
      *(void *)uint64_t result = 0;
    }
    else
    {
      int v36 = v35 + 1;
      uint64_t v37 = *(void *)(a1 + 96);
      uint64_t v38 = *a2;
      *a2 = 0;
    }
    *(void *)(v37 + 8 * v35) = v38;
    *(_DWORD *)(a1 + 108) = v36;
  }
  if (v44)
  {
    uint64_t result = (unsigned __int8 *)v43;
    int v39 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v43, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
    if (v39 != 1) {
      return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
    }
  }
  return result;
}

uint64_t *WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISA_S9_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSI_E_vJSI_EED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E2E30;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISA_S9_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSI_E_vJSI_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E2E30;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISA_S9_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSI_E_vJSI_EE4callESI_(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E2E58;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9E2E00;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9E2E58;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9E2E00;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a3 + 24);
  v16[0] = a1;
  uint64_t v7 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7) {
    BOOL v8 = v7[16] >= 4u;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    if (v6) {
      BOOL v9 = "Rejecting";
    }
    else {
      BOOL v9 = "Resolving";
    }
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [11],void const*,char [2]>((uint64_t)v7, v9, (WTF::Logger::LogSiteIdentifier *)(a1 + 24), a2);
  }
  char v10 = 0;
  int v11 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
  if (v10) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  uint64_t v12 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), a3);
  if (v12)
  {
    v16[0] = 0;
    v16[1] = 0;
    void v16[2] = "<chained completion promise>";
    void v16[3] = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v12, (WTF::NativePromiseBase *)v16);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v12)
  {
    char v14 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v12);
    return WTF::fastFree((WTF *)v14, v15);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 136))
  {
    uint64_t v2 = *(WTF **)(a2 + 120);
    if (v2)
    {
      *(void *)(a2 + 120) = 0;
      *(_DWORD *)(a2 + 128) = 0;
      WTF::fastFree(v2, (void *)a2);
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore17PhotoCapabilitiesENS_6StringELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS4_S5_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSD_E_vJSD_EED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E2E98;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore17PhotoCapabilitiesENS_6StringELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS4_S5_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSD_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E2E98;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore17PhotoCapabilitiesENS_6StringELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS4_S5_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSD_E_vJSD_EE4callESD_(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E2EC0;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9E2EF0;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9E2EC0;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9E2EF0;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v63[1] = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a3 + 152);
  uint64_t v42 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v42) {
    BOOL v7 = *(unsigned __int8 *)(v42 + 16) >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (v6) {
      BOOL v8 = "Rejecting";
    }
    else {
      BOOL v8 = "Resolving";
    }
    uint64_t v41 = (char *)v8;
    WTF::String::String((WTF::String *)&v51, v8);
    WTF::String::String((WTF::String *)&v50, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v49, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v48, "[");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a2, &v47);
    WTF::String::String((WTF::String *)&v46, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v44, "]");
    uint64_t result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, &v52);
    if (!v52)
    {
      __break(0xC471u);
      return result;
    }
    int v11 = v44;
    char v44 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = v45;
    uint64_t v45 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v13 = v46;
    int v46 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v10);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    char v14 = v47;
    uint64_t v47 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v10);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    BOOL v15 = v48;
    uint64_t v48 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v10);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v16 = v49;
    int v49 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v10);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    int v17 = v50;
    unsigned int v50 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v10);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    char v18 = v51;
    uint64_t v51 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v10);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    uint64_t v19 = *(NSObject **)(v42 + 32);
    int v20 = (WTF *)os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      WTF::String::utf8();
      int v22 = v43[0] ? (char *)v43[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      int v20 = v43[0];
      v43[0] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1) {
          int v20 = (WTF *)WTF::fastFree(v20, v21);
        }
        else {
          --*(_DWORD *)v20;
        }
      }
    }
    if (*(unsigned char *)v42 && *(unsigned __int8 *)(v42 + 16) >= 4u)
    {
      uint64_t v23 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v24 = *v23;
        if (v24) {
          break;
        }
        int v25 = *v23;
        atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v25, v24 | 1, memory_order_acquire, memory_order_acquire);
        if (v25 == v24)
        {
          uint64_t v26 = WTF::Logger::observers(v20);
          uint64_t v27 = *(unsigned int *)(v26 + 12);
          if (v27)
          {
            uint64_t v28 = *(uint64_t **)v26;
            uint64_t v40 = *(void *)v26 + 8 * v27;
            do
            {
              uint64_t v29 = *v28;
              *(_DWORD *)long long buf = 0;
              WTF::String::String((WTF::String *)&buf[8], v41);
              LODWORD(v54) = 0;
              WTF::String::String((WTF::String *)&v55, " then() call made from ");
              int v56 = 0;
              WTF::Logger::LogSiteIdentifier::toString(&v57, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
              int v58 = 0;
              WTF::String::String((WTF::String *)v59, "[");
              v59[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a2, &v60);
              int v61 = 0;
              WTF::String::String((WTF::String *)v62, " callback:");
              v62[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v62[6] = 0;
              WTF::String::String((WTF::String *)v63, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v43, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v29 + 16))(v29, v42, 4, v43);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v30);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                BOOL v32 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v32)
                {
                  if (*(_DWORD *)v32 == 2) {
                    WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v21);
                  }
                  else {
                    *(_DWORD *)v32 -= 2;
                  }
                }
              }
              ++v28;
            }
            while (v28 != (uint64_t *)v40);
          }
          int v33 = 1;
          atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
          if (v33 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    int v34 = v52;
    int v52 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
  }
  char v35 = 0;
  int v36 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v35, 1u, memory_order_acquire, memory_order_acquire);
  if (v35) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  uint64_t v37 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v36, 0, memory_order_release, memory_order_relaxed);
  if (v36 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), a3);
  if (v37)
  {
    *(_OWORD *)long long buf = 0uLL;
    uint64_t v54 = "<chained completion promise>";
    uint64_t v55 = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v37, (WTF::NativePromiseBase *)buf);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v37)
  {
    uint64_t v38 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v37);
    return WTF::fastFree((WTF *)v38, v39);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(unsigned char *)(result + 56) = 1;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13PhotoSettingsEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore13PhotoSettingsENS_6StringELj0EE11whenSettledIZN6WebKit28UserMediaCaptureManagerProxy16getPhotoSettingsENS_23ObjectIdentifierGenericINS3_33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS4_S5_EEEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSL_E_vJSL_EED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E2F30;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore13PhotoSettingsENS_6StringELj0EE11whenSettledIZN6WebKit28UserMediaCaptureManagerProxy16getPhotoSettingsENS_23ObjectIdentifierGenericINS3_33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS4_S5_EEEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSL_E_vJSL_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E2F30;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore13PhotoSettingsENS_6StringELj0EE11whenSettledIZN6WebKit28UserMediaCaptureManagerProxy16getPhotoSettingsENS_23ObjectIdentifierGenericINS3_33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS4_S5_EEEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSL_E_vJSL_EE4callESL_(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E2F58;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9E2F88;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9E2F58;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9E2F88;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v63[1] = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a3 + 56);
  uint64_t v42 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v42) {
    BOOL v7 = *(unsigned __int8 *)(v42 + 16) >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (v6) {
      BOOL v8 = "Rejecting";
    }
    else {
      BOOL v8 = "Resolving";
    }
    uint64_t v41 = (char *)v8;
    WTF::String::String((WTF::String *)&v51, v8);
    WTF::String::String((WTF::String *)&v50, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v49, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v48, "[");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a2, &v47);
    WTF::String::String((WTF::String *)&v46, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v44, "]");
    uint64_t result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, &v52);
    if (!v52)
    {
      __break(0xC471u);
      return result;
    }
    int v11 = v44;
    char v44 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = v45;
    uint64_t v45 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v13 = v46;
    int v46 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v10);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    char v14 = v47;
    uint64_t v47 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v10);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    BOOL v15 = v48;
    uint64_t v48 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v10);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v16 = v49;
    int v49 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v10);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    int v17 = v50;
    unsigned int v50 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v10);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    char v18 = v51;
    uint64_t v51 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v10);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    uint64_t v19 = *(NSObject **)(v42 + 32);
    int v20 = (WTF *)os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      WTF::String::utf8();
      int v22 = v43[0] ? (char *)v43[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      int v20 = v43[0];
      v43[0] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1) {
          int v20 = (WTF *)WTF::fastFree(v20, v21);
        }
        else {
          --*(_DWORD *)v20;
        }
      }
    }
    if (*(unsigned char *)v42 && *(unsigned __int8 *)(v42 + 16) >= 4u)
    {
      uint64_t v23 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v24 = *v23;
        if (v24) {
          break;
        }
        int v25 = *v23;
        atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v25, v24 | 1, memory_order_acquire, memory_order_acquire);
        if (v25 == v24)
        {
          uint64_t v26 = WTF::Logger::observers(v20);
          uint64_t v27 = *(unsigned int *)(v26 + 12);
          if (v27)
          {
            uint64_t v28 = *(uint64_t **)v26;
            uint64_t v40 = *(void *)v26 + 8 * v27;
            do
            {
              uint64_t v29 = *v28;
              *(_DWORD *)long long buf = 0;
              WTF::String::String((WTF::String *)&buf[8], v41);
              LODWORD(v54) = 0;
              WTF::String::String((WTF::String *)&v55, " then() call made from ");
              int v56 = 0;
              WTF::Logger::LogSiteIdentifier::toString(&v57, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
              int v58 = 0;
              WTF::String::String((WTF::String *)v59, "[");
              v59[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a2, &v60);
              int v61 = 0;
              WTF::String::String((WTF::String *)v62, " callback:");
              v62[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v62[6] = 0;
              WTF::String::String((WTF::String *)v63, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v43, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v29 + 16))(v29, v42, 4, v43);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v30);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                BOOL v32 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v32)
                {
                  if (*(_DWORD *)v32 == 2) {
                    WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v21);
                  }
                  else {
                    *(_DWORD *)v32 -= 2;
                  }
                }
              }
              ++v28;
            }
            while (v28 != (uint64_t *)v40);
          }
          int v33 = 1;
          atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
          if (v33 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    int v34 = v52;
    int v52 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
  }
  char v35 = 0;
  int v36 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v35, 1u, memory_order_acquire, memory_order_acquire);
  if (v35) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  uint64_t v37 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v36, 0, memory_order_release, memory_order_relaxed);
  if (v36 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), a3);
  if (v37)
  {
    *(_OWORD *)long long buf = 0uLL;
    uint64_t v54 = "<chained completion promise>";
    uint64_t v55 = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v37, (WTF::NativePromiseBase *)buf);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v37)
  {
    uint64_t v38 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v37);
    return WTF::fastFree((WTF *)v38, v39);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(unsigned char *)(result + 56) = 1;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticationChallengeProxy::AuthenticationChallengeProxy(WebCore::AuthenticationChallenge &&,WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC>,WTF::DefaultRefDerefTraits<IPC>> &&,WTF::WeakPtr<WebKit::SecKeyProxyStore,WTF::DefaultWeakPtrImpl,IPC::Connection<WTF::WeakPtr>> &&)::$_0,void,WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9E2FB8;
  uint64_t v3 = *(unsigned int **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

{
  unsigned int *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9E2FB8;
  uint64_t v3 = *(unsigned int **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));

  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::AuthenticationChallengeProxy::AuthenticationChallengeProxy(WebCore::AuthenticationChallenge &&,WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC>,WTF::DefaultRefDerefTraits<IPC>> &&,WTF::WeakPtr<WebKit::SecKeyProxyStore,WTF::DefaultWeakPtrImpl,IPC::Connection<WTF::WeakPtr>> &&)::$_0,void,WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&>::call(void *a1, char a2, WebCore::Credential *a3)
{
  uint64_t v6 = a1[3];
  if (v6 && (BOOL v7 = *(WebKit::SecKeyProxyStore **)(v6 + 8)) != 0 && WebKit::SecKeyProxyStore::initialize(v7, a3))
  {
    uint64_t v8 = a1[2];
    uint64_t v9 = *(void *)(a1[3] + 8);
    uint64_t v10 = a1[1];
    WebKit::AuthenticationChallengeProxy::sendClientCertificateCredentialOverXpc(v8, v9, v10, a3);
  }
  else
  {
    int v11 = a1 + 1;
    uint64_t v12 = a1[2];
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 2;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 70) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    char v18 = v13;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v13, v11);
    IPC::ArgumentCoder<WebKit::AuthenticationChallengeDisposition,void>::encode<IPC::Encoder>(v13, a2);
    IPC::ArgumentCoder<WebCore::Credential,void>::encode(v13, a3);
    IPC::Connection::sendMessageImpl(v12, (uint64_t *)&v18, 0, 0);
    BOOL v15 = v18;
    char v18 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v14);
      WTF::fastFree(v16, v17);
    }
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = WTF::fastMalloc((WTF *)(48 * v5 + 16));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (v5) {
    bzero((void *)(v6 + 16), 48 * v5);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    uint64_t v12 = v3;
    uint64_t v13 = v2;
    uint64_t v59 = v2;
    uint64_t v55 = v3;
    do
    {
      char v14 = (uint64_t *)(v13 + 48 * v10);
      uint64_t v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          uint64_t v19 = *a1;
          int v58 = v11;
          if (*a1) {
            int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            int v20 = 0;
          }
          unint64_t v21 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          unint64_t v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          unint64_t v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          unsigned int v24 = v20 & ((v23 >> 31) ^ v23);
          int v25 = 1;
          do
          {
            unsigned int v26 = v24;
            int v11 = (uint64_t *)(v19 + 48 * v24);
            unsigned int v24 = (v24 + v25++) & v20;
          }
          while (*v11);
          unsigned int v27 = v26;
          uint64_t v28 = v19 + 48 * v26;
          uint64_t v31 = *(void *)(v28 + 24);
          uint64_t v30 = v28 + 24;
          uint64_t v29 = v31;
          if (v31) {
            WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(v29, v7);
          }
          BOOL v32 = *(atomic_uchar **)(v30 - 16);
          *(void *)(v30 - ++*(_DWORD *)(this + 16) = 0;
          if (v32) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v32, v7);
          }
          char v33 = 0;
          uint64_t *v11 = *v14;
          uint64_t v34 = v13 + 48 * v10;
          uint64_t v36 = *(void *)(v34 + 8);
          uint64_t v35 = v34 + 8;
          *(void *)(v30 - ++*(_DWORD *)(this + 16) = v36;
          uint64_t v37 = v19 + 48 * v27;
          uint64_t v38 = *(void *)(v35 + 8);
          *(_OWORD *)uint64_t v35 = 0u;
          *(void *)(v37 + ++*(_DWORD *)(this + 16) = v38;
          int v39 = (atomic_uchar *)(v37 + 40);
          *(_OWORD *)uint64_t v30 = 0u;
          *(unsigned char *)(v30 + ++*(_DWORD *)(this + 16) = 0;
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v37 + 40), (unsigned __int8 *)&v33, 1u, memory_order_acquire, memory_order_acquire);
          if (v33)
          {
            MEMORY[0x19972E8D0](v37 + 40);
            int v39 = (atomic_uchar *)(v37 + 40);
          }
          char v40 = 0;
          uint64_t v41 = (atomic_uchar *)(v13 + 48 * v10 + 40);
          atomic_compare_exchange_strong_explicit(v41, (unsigned __int8 *)&v40, 1u, memory_order_acquire, memory_order_acquire);
          if (v40)
          {
            int v52 = v39;
            MEMORY[0x19972E8D0](v13 + 48 * v10 + 40);
            int v39 = v52;
          }
          uint64_t v42 = (uint64_t *)(v35 + 16);
          uint64_t v43 = *(void *)(v35 + 16);
          *(void *)(v35 + ++*(_DWORD *)(this + 16) = 0;
          uint64_t v44 = *(void *)v30;
          *(void *)uint64_t v30 = v43;
          uint64_t v12 = v55;
          if (v44)
          {
            uint64_t v45 = v39;
            WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(v44, v7);
            int v39 = v45;
          }
          uint64_t v46 = v59 + 48 * v10;
          int v47 = *(_DWORD *)(v46 + 32);
          *(_DWORD *)(v46 + 32) = 0;
          *(_DWORD *)(v37 + 32) = v47;
          int v48 = *(_DWORD *)(v46 + 36);
          *(_DWORD *)(v46 + 36) = 0;
          *(_DWORD *)(v37 + 36) = v48;
          int v49 = 1;
          atomic_compare_exchange_strong_explicit(v41, (unsigned __int8 *)&v49, 0, memory_order_release, memory_order_relaxed);
          if (v49 != 1)
          {
            uint64_t v53 = v39;
            WTF::Lock::unlockSlow((WTF::Lock *)v41);
            int v39 = v53;
          }
          int v50 = 1;
          atomic_compare_exchange_strong_explicit(v39, (unsigned __int8 *)&v50, 0, memory_order_release, memory_order_relaxed);
          if (v50 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v39);
          }
          if (*v42) {
            WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(*v42, v7);
          }
          uint64_t v51 = *(atomic_uchar **)v35;
          *(void *)uint64_t v35 = 0;
          uint64_t v13 = v59;
          if (v51) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v51, v7);
          }
          if (v14 != a2) {
            int v11 = v58;
          }
        }
        else
        {
          uint64_t v16 = v13 + 48 * v10;
          uint64_t v17 = *(void *)(v16 + 24);
          if (v17) {
            WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(v17, v7);
          }
          char v18 = *(atomic_uchar **)(v16 + 8);
          *(void *)(v16 + 8) = 0;
          if (v18) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v18, v7);
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    int v11 = 0;
    uint64_t result = 0;
    uint64_t v13 = v2;
    if (!v2) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v13 - 16), v7);
  return v11;
}

uint64_t WTF::GenericHashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>::assignToEmpty<WebKit::UserMediaCaptureManagerProxy::PageSources,WebKit::UserMediaCaptureManagerProxy::PageSources>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  unsigned int v5 = *(atomic_uchar **)a1;
  *(void *)a1 = v4;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  }
  char v6 = 0;
  uint64_t v7 = a2[1];
  a2[1] = 0;
  *(void *)(a1 + 8) = v7;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 32), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x19972E8D0](a1 + 32);
  }
  char v8 = 0;
  uint64_t v9 = (WTF::Lock *)(a2 + 4);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)a2 + 32, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    MEMORY[0x19972E8D0](a2 + 4);
  }
  uint64_t v10 = a2[2];
  a2[2] = 0;
  uint64_t result = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = v10;
  if (result) {
    uint64_t result = WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(result, a2);
  }
  int v12 = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(a1 + 24) = v12;
  int v13 = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(a1 + 28) = v13;
  char v14 = (atomic_uchar *)(a2 + 4);
  int v15 = 1;
  int v16 = 1;
  atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
  if (v16 != 1) {
    uint64_t result = WTF::Lock::unlockSlow(v9);
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 32), (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
  if (v15 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 32));
  }
  return result;
}

uint64_t WTF::ThreadSafeWeakHashSet<WebCore::RealtimeMediaSource>::values(uint64_t result, atomic_uchar *a2)
{
  uint64_t v3 = result;
  char v4 = 0;
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  unsigned int v5 = (WTF::Lock *)(a2 + 16);
  atomic_compare_exchange_strong_explicit(a2 + 16, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = MEMORY[0x19972E8D0](a2 + 16);
  }
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  if (!*(void *)a2 || (uint64_t v6 = *(unsigned int *)(*(void *)a2 - 12), !v6))
  {
    int v12 = 0;
    goto LABEL_34;
  }
  if (v6 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  uint64_t v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * v6));
  LODWORD(v43) = v6;
  uint64_t v42 = (uint64_t)v7;
  uint64_t v8 = *(void *)a2;
  if (!*(void *)a2 || !*(_DWORD *)(v8 - 12))
  {
    int v12 = 0;
    goto LABEL_15;
  }
  uint64_t v9 = *(unsigned int *)(v8 - 4);
  if (v9)
  {
    uint64_t v10 = 16 * v9;
    uint64_t v11 = *(void *)a2;
    while ((unint64_t)(*(void *)v11 + 1) <= 1)
    {
      v11 += 16;
      v10 -= 16;
      if (!v10) {
        goto LABEL_30;
      }
    }
  }
  else
  {
    uint64_t v11 = *(void *)a2;
  }
  uint64_t v13 = v8 + 16 * v9;
  if (v13 == v11)
  {
LABEL_30:
    int v12 = 0;
    LODWORD(v14) = 0;
  }
  else
  {
    int v12 = 0;
    LODWORD(v14) = 0;
    uint64_t v15 = *(void *)v11;
LABEL_19:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v45, *(atomic_uchar **)(v11 + 8), v15);
    if (v45)
    {
      uint64_t v44 = v45;
      if (v14 == v43)
      {
        int v16 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v42, v14 + 1, (unint64_t)&v44);
        uint64_t v14 = HIDWORD(v43);
        uint64_t v7 = (WTF *)v42;
        uint64_t v17 = *v16;
        uint64_t *v16 = 0;
        *((void *)v7 + v14) = v17;
      }
      else
      {
        uint64_t v44 = 0;
        *((void *)v7 + v14) = v45;
      }
      LODWORD(v14) = v14 + 1;
      HIDWORD(v43) = v14;
      uint64_t v18 = v44;
      uint64_t v44 = 0;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 144))(v18);
      }
    }
    else
    {
      int v12 = 1;
    }
    while (1)
    {
      v11 += 16;
      if (v11 == v13) {
        break;
      }
      uint64_t v15 = *(void *)v11;
      if ((unint64_t)(*(void *)v11 + 1) > 1)
      {
        if (v11 != v13) {
          goto LABEL_19;
        }
        break;
      }
    }
    LODWORD(v6) = v43;
  }
  if (v6 > v14)
  {
    if (v14)
    {
      LODWORD(v43) = v14;
      uint64_t v42 = WTF::fastRealloc(v7, (void *)(8 * v14));
      goto LABEL_34;
    }
    if (v7)
    {
LABEL_15:
      uint64_t v42 = 0;
      LODWORD(v43) = 0;
      WTF::fastFree(v7, a2);
    }
  }
LABEL_34:
  uint64_t v19 = *(unsigned int *)(v3 + 12);
  int v20 = *(WTF **)v3;
  if (v19)
  {
    uint64_t v21 = 8 * v19;
    unint64_t v22 = *(WTF **)v3;
    do
    {
      uint64_t v23 = *(void *)v22;
      *(void *)unint64_t v22 = 0;
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 144))(v23);
      }
      unint64_t v22 = (WTF *)((char *)v22 + 8);
      v21 -= 8;
    }
    while (v21);
  }
  if (v20) {
    WTF::fastFree(v20, a2);
  }
  *(void *)uint64_t v3 = v42;
  uint64_t v24 = v43;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  *(void *)(v3 + 8) = v24;
  uint64_t result = WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, a2);
  uint64_t v25 = *(void *)a2;
  if (v12)
  {
    if (v25)
    {
      int v26 = *(_DWORD *)(v25 - 4);
      if (!v26) {
        goto LABEL_63;
      }
      int v27 = 0;
      unsigned int v28 = v26 - 1;
      do
      {
        uint64_t v29 = v28;
        uint64_t v30 = (void *)(v25 + 16 * v28);
        if ((unint64_t)(*v30 + 1) >= 2)
        {
          uint64_t v31 = v25 + 16 * v28;
          char v33 = *(atomic_uchar **)(v31 + 8);
          BOOL v32 = (uint64_t *)(v31 + 8);
          uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v33);
          if (result)
          {
            void *v30 = -1;
            uint64_t result = *v32;
            *BOOL v32 = 0;
            if (result) {
              uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)result, v34);
            }
            ++v27;
          }
        }
        --v28;
      }
      while (v29);
      uint64_t v25 = *(void *)a2;
      if (v27)
      {
        *(_DWORD *)(v25 - 16) += v27;
        uint64_t v35 = *(void *)a2;
        if (*(void *)a2) {
          int v36 = *(_DWORD *)(v35 - 12);
        }
        else {
          int v36 = 0;
        }
        *(_DWORD *)(v35 - 12) = v36 - v27;
        uint64_t v25 = *(void *)a2;
      }
      if (v25)
      {
        unsigned int v37 = *(_DWORD *)(v25 - 4);
        if (v37 >= 9 && 6 * *(_DWORD *)(v25 - 12) < v37)
        {
          uint64_t result = WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::shrinkToBestSize((uint64_t *)a2);
          uint64_t v25 = *(void *)a2;
          goto LABEL_65;
        }
LABEL_63:
        *((_DWORD *)a2 + 2) = 0;
        goto LABEL_66;
      }
    }
    unsigned int v39 = 0;
    *((_DWORD *)a2 + 2) = 0;
LABEL_69:
    int v40 = v39;
    goto LABEL_70;
  }
LABEL_65:
  *((_DWORD *)a2 + 2) = 0;
  if (!v25)
  {
    unsigned int v39 = 0;
    goto LABEL_69;
  }
LABEL_66:
  unsigned int v39 = *(_DWORD *)(v25 - 12);
  int v40 = 0x7FFFFFFF;
  if (v39 < 0x7FFFFFFF) {
    goto LABEL_69;
  }
LABEL_70:
  *((_DWORD *)a2 + 3) = 2 * v40;
  int v41 = 1;
  atomic_compare_exchange_strong_explicit(a2 + 16, (unsigned __int8 *)&v41, 0, memory_order_release, memory_order_relaxed);
  if (v41 != 1) {
    return WTF::Lock::unlockSlow(v5);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v4, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          int v26 = (uint64_t *)(v17 + 16 * v24);
          int v27 = (_DWORD *)v26[1];
          v26[1] = 0;
          if (v27)
          {
            if (v27[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
            }
            else {
              --v27[4];
            }
          }
          *int v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(_DWORD **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30)
          {
            if (v30[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v30 + 8))(v30);
            }
            else {
              --v30[4];
            }
          }
          if (v13 == a3) {
            int v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          int v16 = *(_DWORD **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16)
          {
            if (v16[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
            }
            else {
              --v16[4];
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    int v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxy::createMediaSourceForCaptureDeviceWithConstraints(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::CaptureDevice const&,WebCore::MediaDeviceHashSalts &&,WebCore::MediaConstraints &&,BOOL,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::CaptureSourceError const&,WebCore::RealtimeMediaSourceSettings const&,WebCore::RealtimeMediaSourceCapabilities const&)> &&)::$_1,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E2FE0;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxy::createMediaSourceForCaptureDeviceWithConstraints(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::CaptureDevice const&,WebCore::MediaDeviceHashSalts &&,WebCore::MediaConstraints &&,BOOL,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::CaptureSourceError const&,WebCore::RealtimeMediaSourceSettings const&,WebCore::RealtimeMediaSourceCapabilities const&)> &&)::$_1,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E2FE0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxy::createMediaSourceForCaptureDeviceWithConstraints(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::CaptureDevice const&,WebCore::MediaDeviceHashSalts &&,WebCore::MediaConstraints &&,BOOL,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::CaptureSourceError const&,WebCore::RealtimeMediaSourceSettings const&,WebCore::RealtimeMediaSourceCapabilities const&)> &&)::$_1,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&>::call(WTF::StringImpl *result, char *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((void *)result + 1);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    ++*(_DWORD *)(v4 + 16);
    if (!a2[16])
    {
      v18[0] = 0;
      v18[1] = 0;
      uint64_t v11 = WebKit::UserMediaCaptureManagerProxySourceProxy::settings((WebKit::UserMediaCaptureManagerProxySourceProxy *)v4);
      uint64_t v12 = *(void *)(v4 + 72);
      (*(void (**)(uint64_t))(*(void *)v12 + 136))(v12);
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 120))(v12);
      uint64_t v14 = *((void *)v2 + 2);
      *((void *)v2 + 2) = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v18, v11, v13);
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      (*(void (**)(uint64_t))(*(void *)v12 + 144))(v12);
      uint64_t result = v18[0];
      v18[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      goto LABEL_30;
    }
    char v5 = 0;
  }
  else
  {
    if (!a2[16])
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    char v5 = 1;
  }
  char v6 = *a2;
  unsigned int v37 = 0;
  char v38 = 4;
  char v39 = v6;
  uint64_t v33 = 4;
  long long v31 = 0u;
  long long v32 = 0u;
  memset(v30, 0, sizeof(v30));
  __int16 v36 = 0;
  uint64_t v34 = 0x3FF0000000000000;
  memset(v35, 0, sizeof(v35));
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  *(_OWORD *)int v18 = 0u;
  long long v19 = 0u;
  uint64_t v7 = *((void *)result + 2);
  *((void *)result + 2) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, _OWORD *, WTF::StringImpl **))(*(void *)v7 + 16))(v7, &v37, v30, v18);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)v18, v8);
  uint64_t v10 = (WTF::StringImpl *)*((void *)&v32 + 1);
  *((void *)&v32 + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  int v16 = (WTF::StringImpl *)v32;
  *(void *)&long long v32 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v9);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = (WTF::StringImpl *)*((void *)&v31 + 1);
  *((void *)&v31 + 1) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v9);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t result = v37;
  unsigned int v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      if (v5) {
        return result;
      }
      goto LABEL_30;
    }
    *(_DWORD *)result -= 2;
  }
  if (v5) {
    return result;
  }
LABEL_30:
  if (*(_DWORD *)(v4 + 16) == 1) {
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  --*(_DWORD *)(v4 + 16);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxy::applyConstraints(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::MediaConstraints &&)::$_0,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E3008;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 24));
  uint64_t v2 = *(_DWORD **)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  return a1;
}

{
  void *v2;
  _DWORD *v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9E3008;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 24));
  uint64_t v3 = *(_DWORD **)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxy::applyConstraints(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::MediaConstraints &&)::$_0,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&>::call(uint64_t a1, char *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  if (a2[16])
  {
    char v4 = *a2;
    uint64_t v11 = (IPC::Encoder *)(a1 + 8);
    char v12 = v4;
    uint64_t v13 = a2 + 8;
    return IPC::Connection::send<Messages::UserMediaCaptureManager::ApplyConstraintsFailed>(v3, (uint64_t)&v11);
  }
  else
  {
    char v6 = (int *)WebKit::UserMediaCaptureManagerProxySourceProxy::settings(*(WebKit::UserMediaCaptureManagerProxySourceProxy **)(a1 + 16));
    uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v7 = 1508;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 66) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    uint64_t v11 = v7;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, v2);
    IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSettings,void>::encode(v7, v6);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  return result;
}

unsigned __int8 *WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, atomic_uchar *volatile *a3)
{
  char v5 = a1;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!*((void *)a1 + 2)
    || (int v6 = atomic_load((unsigned __int8 *)(a2 + 265)), v6 == 1)
    && (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(void))(**((void **)a1 + 2) + 24))(*((void *)a1 + 2)),
        a1))
  {
    if (*((unsigned char *)v5 + 56))
    {
      uint64_t v17 = (unsigned __int8 *)v5;
      uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
      if (*result) {
        BOOL v10 = result[16] >= 4u;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10) {
        return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v17, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
      }
    }
    else
    {
      atomic_uchar *volatile v11 = *a3;
      int v12 = 1;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
      }
      if (WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::hasRunnable(a2))
      {
        WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::takeResultRunnable(a2, &v15);
        (*(void (**)(unsigned __int8 **__return_ptr))(*(void *)v15 + 16))(&v17);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(void *)v5 + 24))(v5, a2, &v17);
        if (v19 != -1) {
          ((void (*)(char *, unsigned char *))off_1EE9E2E78[v19])(&v16, v18);
        }
        int v19 = -1;
        uint64_t v13 = v15;
        uint64_t v15 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
      }
      else
      {
        WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::takeResult(a2, (uint64_t)&v17);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(void *)v5 + 24))(v5, a2, &v17);
        if (v19 != -1) {
          ((void (*)(uint64_t *, unsigned char *))off_1EE9E2E78[v19])(&v15, v18);
        }
      }
      char v14 = 0;
      uint64_t result = (unsigned __int8 *)*a3;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
      if (v14) {
        return (unsigned __int8 *)MEMORY[0x19972E8D0]();
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)v5 + 2);
    atomic_fetch_add((atomic_uint *volatile)v5 + 2, 1u);
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
    int v8 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
    *(void *)int v8 = &unk_1EE9E3040;
    *((void *)v8 + 1) = v5;
    *((void *)v8 + 2) = v5;
    *((void *)v8 + 3) = a2;
    uint64_t v17 = v8;
    (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)v7 + 16))(v7, &v17);
    uint64_t result = v17;
    uint64_t v17 = 0;
    if (result) {
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

BOOL WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::hasRunnable(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(a1 + 48);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](a1 + 48);
  }
  int v5 = *(_DWORD *)(a1 + 216);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v5 == 2;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::takeResultRunnable@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  if (*(_DWORD *)(v2 + 216) == 2)
  {
    uint64_t v6 = *(void *)(v2 + 56);
    *(void *)(v2 + 56) = 0;
    *a2 = v6;
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::takeResult(v8);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::takeResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = 0;
  int v5 = (WTF::Lock *)(a1 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 48);
  }
  if (*(_DWORD *)(a1 + 216) == 1)
  {
    *(unsigned char *)(a2 + 8) = 0;
    uint64_t v6 = a2 + 8;
    *(_DWORD *)(v6 + 144) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>,(std::__variant_detail::_Trait)1>>(v6, a1 + 64);
    int v8 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>,(std::__variant_detail::_Trait)1>>(v9, v10);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 144);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E2E78[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 144) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 144);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E3020[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 144) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[1];
  long long v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + ++*(_DWORD *)(this + 16) = v4;
  long long v6 = a3[4];
  long long v7 = a3[5];
  long long v8 = a3[6];
  *(unsigned char *)(a2 + 112) = *((unsigned char *)a3 + 112);
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 64) = v6;
  *(unsigned char *)(a2 + 120) = 0;
  *(unsigned char *)(a2 + 136) = 0;
  if (*((unsigned char *)a3 + 136))
  {
    *(void *)(a2 + 120) = 0;
    *(void *)(a2 + 128) = 0;
    uint64_t v9 = *((void *)a3 + 15);
    *((void *)a3 + 15) = 0;
    *(void *)(a2 + 120) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 32);
    *((_DWORD *)a3 + 32) = 0;
    *(_DWORD *)(a2 + 128) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 33);
    *((_DWORD *)a3 + 33) = 0;
    *(_DWORD *)(a2 + 132) = v9;
    *(unsigned char *)(a2 + 136) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E3040;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E3040;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  long long v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

unsigned __int8 *WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t v2 = a1[2];
  if (*(unsigned char *)(*a1 + 56))
  {
    uint64_t v10 = *a1;
    uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
    if (*result) {
      BOOL v4 = result[16] >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)&v10, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::hasRunnable(a1[2]);
    uint64_t v7 = a1[2];
    if (hasRunnable)
    {
      WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::takeResultRunnable(a1[2], &v8);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 16))(&v10);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v1 + 24))(v1, v7, &v10);
      if (v12 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9E2E78[v12])(&v9, v11);
      }
      int v12 = -1;
      uint64_t result = v8;
      long long v8 = 0;
      if (result) {
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
      }
    }
    else
    {
      WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::takeResult(v7, (uint64_t)&v10);
      uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v1 + 24))(v1, v7, &v10);
      if (v12 != -1) {
        return (unsigned __int8 *)((uint64_t (*)(unsigned __int8 **, unsigned char *))off_1EE9E2E78[v12])(&v8, v11);
      }
    }
  }
  return result;
}

unsigned __int8 *WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, atomic_uchar *volatile *a3)
{
  long long v5 = a1;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!*((void *)a1 + 2)
    || (int v6 = atomic_load((unsigned __int8 *)(a2 + 169)), v6 == 1)
    && (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(void))(**((void **)a1 + 2) + 24))(*((void *)a1 + 2)),
        a1))
  {
    if (*((unsigned char *)v5 + 56))
    {
      uint64_t v17 = (unsigned __int8 *)v5;
      uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
      if (*result) {
        BOOL v10 = result[16] >= 4u;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10) {
        return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v17, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
      }
    }
    else
    {
      atomic_uchar *volatile v11 = *a3;
      int v12 = 1;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
      }
      if (WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::hasRunnable(a2))
      {
        WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::takeResultRunnable(a2, &v15);
        (*(void (**)(unsigned __int8 **__return_ptr))(*(void *)v15 + 16))(&v17);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(void *)v5 + 24))(v5, a2, &v17);
        if (v19 != -1) {
          ((void (*)(char *, unsigned char *))off_1EE9E2F10[v19])(&v16, v18);
        }
        int v19 = -1;
        uint64_t v13 = v15;
        uint64_t v15 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
      }
      else
      {
        WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::takeResult(a2, (uint64_t)&v17);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(void *)v5 + 24))(v5, a2, &v17);
        if (v19 != -1) {
          ((void (*)(uint64_t *, unsigned char *))off_1EE9E2F10[v19])(&v15, v18);
        }
      }
      char v14 = 0;
      uint64_t result = (unsigned __int8 *)*a3;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
      if (v14) {
        return (unsigned __int8 *)MEMORY[0x19972E8D0]();
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)v5 + 2);
    atomic_fetch_add((atomic_uint *volatile)v5 + 2, 1u);
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
    long long v8 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
    *(void *)long long v8 = &unk_1EE9E3078;
    *((void *)v8 + 1) = v5;
    *((void *)v8 + 2) = v5;
    *((void *)v8 + 3) = a2;
    uint64_t v17 = v8;
    (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)v7 + 16))(v7, &v17);
    uint64_t result = v17;
    uint64_t v17 = 0;
    if (result) {
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

BOOL WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::hasRunnable(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(a1 + 48);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](a1 + 48);
  }
  int v5 = *(_DWORD *)(a1 + 120);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v5 == 2;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::takeResultRunnable@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  if (*(_DWORD *)(v2 + 120) == 2)
  {
    uint64_t v6 = *(void *)(v2 + 56);
    *(void *)(v2 + 56) = 0;
    *a2 = v6;
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::takeResult(v8);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::takeResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = 0;
  int v5 = (WTF::Lock *)(a1 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 48);
  }
  if (*(_DWORD *)(a1 + 120) == 1)
  {
    *(unsigned char *)(a2 + 8) = 0;
    uint64_t v6 = a2 + 8;
    *(_DWORD *)(v6 + 48) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>,(std::__variant_detail::_Trait)1>>(v6, a1 + 64);
    int v8 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>,(std::__variant_detail::_Trait)1>>(v9, v10);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 48);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E2F10[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 48) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 48);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E3058[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 48) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13PhotoSettingsEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + ++*(_DWORD *)(this + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13PhotoSettingsEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E3078;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E3078;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  long long v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

unsigned __int8 *WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t v2 = a1[2];
  if (*(unsigned char *)(*a1 + 56))
  {
    uint64_t v10 = *a1;
    __n128 result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
    if (*result) {
      BOOL v4 = result[16] >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)&v10, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::hasRunnable(a1[2]);
    uint64_t v7 = a1[2];
    if (hasRunnable)
    {
      WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::takeResultRunnable(a1[2], &v8);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 16))(&v10);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v1 + 24))(v1, v7, &v10);
      if (v12 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9E2F10[v12])(&v9, v11);
      }
      int v12 = -1;
      __n128 result = v8;
      int v8 = 0;
      if (result) {
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
      }
    }
    else
    {
      WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::takeResult(v7, (uint64_t)&v10);
      __n128 result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v1 + 24))(v1, v7, &v10);
      if (v12 != -1) {
        return (unsigned __int8 *)((uint64_t (*)(unsigned __int8 **, unsigned char *))off_1EE9E2F10[v12])(&v8, v11);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebGeolocationManagerProxy::positionChanged(uint64_t a1, WTF::StringImpl **this, _OWORD *a3)
{
  WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(this, &v30);
  uint64_t v5 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 56), &v30);
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    v7 += 16 * *(unsigned int *)(v7 - 4);
  }
  if (v7 == v5) {
    goto LABEL_12;
  }
  uint64_t v8 = *(void *)(v5 + 8);
  int v9 = *(unsigned __int8 *)(v8 + 144);
  long long v11 = a3[1];
  long long v10 = a3[2];
  *(_OWORD *)(v8 + 32) = *a3;
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v10;
  long long v12 = a3[6];
  long long v14 = a3[3];
  long long v13 = a3[4];
  *(_OWORD *)(v8 + 112) = a3[5];
  *(_OWORD *)(v8 + 128) = v12;
  *(_OWORD *)(v8 + 80) = v14;
  *(_OWORD *)(v8 + 96) = v13;
  if (!v9) {
    *(unsigned char *)(v8 + 144) = 1;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)v8, &v28);
  uint64_t v15 = *(void **)v8;
  if (*(void *)v8)
  {
    uint64_t v16 = *((unsigned int *)v15 - 1);
    uint64_t v17 = &v15[v16];
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v16 = 0;
  }
  uint64_t v23 = v8;
  long long v24 = v17;
  long long v25 = v17;
  long long v26 = v17;
  long long v27 = &v15[v16];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v23);
  int v18 = v29;
  if (v29 == v24)
  {
LABEL_12:
    __n128 result = v30;
    uint64_t v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    while (*(unsigned char *)(v8 + 144))
    {
      uint64_t v19 = *(void *)(*v18 + 8);
      v22[0] = &v30;
      v22[1] = v8 + 32;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::DidChangePosition>(v19, (uint64_t)v22, 0, 0);
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v28);
      int v18 = v29;
      if (v29 == v24) {
        goto LABEL_12;
      }
    }
    uint64_t v21 = std::__throw_bad_optional_access[abi:sn180100]();
  }
  return result;
}

WTF::StringImpl *non-virtual thunk to'WebKit::WebGeolocationManagerProxy::positionChanged(uint64_t a1, WTF::StringImpl **a2, _OWORD *a3)
{
  return WebKit::WebGeolocationManagerProxy::positionChanged(a1 - 48, a2, a3);
}

WTF::StringImpl *WebKit::WebGeolocationManagerProxy::errorOccurred(WebKit::WebGeolocationManagerProxy *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(a2, &v23);
  uint64_t v5 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 7, &v23);
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    v7 += 16 * *(unsigned int *)(v7 - 4);
  }
  if (v7 != v5)
  {
    uint64_t v8 = *(void ***)(v5 + 8);
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v8, &v21);
    int v9 = *v8;
    if (*v8)
    {
      uint64_t v10 = *((unsigned int *)v9 - 1);
      long long v11 = &v9[v10];
    }
    else
    {
      long long v11 = 0;
      uint64_t v10 = 0;
    }
    uint64_t v16 = v8;
    uint64_t v17 = v11;
    int v18 = v11;
    uint64_t v19 = v11;
    uint64_t v20 = &v9[v10];
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v16);
    for (uint64_t i = v22; v22 != v17; uint64_t i = v22)
    {
      uint64_t v13 = *(void *)(*i + 8);
      v15[0] = (uint64_t *)&v23;
      v15[1] = (uint64_t *)a3;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::DidFailToDeterminePosition>(v13, v15, 0, 0);
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v21);
    }
  }
  __n128 result = v23;
  uint64_t v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *non-virtual thunk to'WebKit::WebGeolocationManagerProxy::errorOccurred(WebKit::WebGeolocationManagerProxy *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  return WebKit::WebGeolocationManagerProxy::errorOccurred((WebKit::WebGeolocationManagerProxy *)((char *)this - 48), a2, a3);
}

WTF::StringImpl *WebKit::WebGeolocationManagerProxy::resetGeolocation(WebKit::WebGeolocationManagerProxy *this, WTF::StringImpl **a2)
{
  WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(a2, &v21);
  uint64_t v3 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 7, &v21);
  uint64_t v5 = *((void *)this + 7);
  if (v5) {
    v5 += 16 * *(unsigned int *)(v5 - 4);
  }
  if (v5 != v3)
  {
    char v6 = *(void ***)(v3 + 8);
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v6, &v19);
    uint64_t v7 = *v6;
    if (*v6)
    {
      uint64_t v8 = *((unsigned int *)v7 - 1);
      int v9 = &v7[v8];
    }
    else
    {
      int v9 = 0;
      uint64_t v8 = 0;
    }
    long long v14 = v6;
    uint64_t v15 = v9;
    uint64_t v16 = v9;
    uint64_t v17 = v9;
    int v18 = &v7[v8];
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
    for (uint64_t i = v20; v20 != v15; uint64_t i = v20)
    {
      uint64_t v11 = *(void *)(*i + 8);
      uint64_t v13 = &v21;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::ResetPermissions>(v11, (uint64_t **)&v13, 0, 0);
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v19);
    }
  }
  __n128 result = v21;
  uint64_t v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *non-virtual thunk to'WebKit::WebGeolocationManagerProxy::resetGeolocation(WebKit::WebGeolocationManagerProxy *this, WTF::StringImpl **a2)
{
  return WebKit::WebGeolocationManagerProxy::resetGeolocation((WebKit::WebGeolocationManagerProxy *)((char *)this - 48), a2);
}

void WebKit::DigitalCredentialsCoordinatorProxy::~DigitalCredentialsCoordinatorProxy(WebKit::DigitalCredentialsCoordinatorProxy *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  CFRetain(*(CFTypeRef *)(v3 + 8));
  uint64_t v4 = *(void *)(v3 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  IPC::MessageReceiverMap::removeMessageReceiver(v4 + 152, 4u, *(void *)(*(void *)(v3 + 32) + 1928));
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 - 8));
  }
  char v6 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::DigitalCredentialsCoordinatorProxy::~DigitalCredentialsCoordinatorProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::DigitalCredentialsCoordinatorProxy::sharedPreferencesForWebProcess(WebKit::DigitalCredentialsCoordinatorProxy *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v3 = *(void *)(v2 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3 + 1080;
}

WTF::StringImpl *WebKit::DigitalCredentialsCoordinatorProxy::requestDigitalCredential(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  v10[0] = 6;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v7 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v7 + 16))(v7, v10);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  __n128 result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::DownloadProxy::~DownloadProxy(WebKit::DownloadProxy *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9E30D8;
  *((void *)this + 2) = &unk_1EE9E3108;
  uint64_t v3 = *((void *)this + 41);
  if (v3)
  {
    *((void *)this + 41) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, 0);
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 40);
  *((void *)this + ++*(_DWORD *)(this + 40) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 296, a2);
  uint64_t v8 = (unsigned int *)*((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  int v9 = (WTF::StringImpl *)*((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = (const void *)*((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v11) {
    CFRelease(v11);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::DownloadProxy *)((char *)this + 72));
  uint64_t v13 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v13) {
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  long long v14 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v14)
  {
    if (v14[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
    }
    else {
      --v14[2];
    }
  }
  uint64_t v15 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v15) {
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  uint64_t v16 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, v12);
  }
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v12);
}

{
  uint64_t vars8;

  WebKit::DownloadProxy::~DownloadProxy(this, a2);

  JUMPOUT(0x199740C10);
}

void non-virtual thunk to'WebKit::DownloadProxy::~DownloadProxy(WebKit::DownloadProxy *this, WTF::StringImpl *a2)
{
}

{
  uint64_t vars8;

  WebKit::DownloadProxy::~DownloadProxy((WebKit::DownloadProxy *)((char *)this - 16), a2);

  JUMPOUT(0x199740C10);
}

IPC::Encoder *WebKit::DownloadProxy::cancel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(WebKit::WebsiteDataStore **)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = WebKit::WebsiteDataStore::networkProcess(v4);
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v7 = 373;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 66) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    int v18 = v7;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, (uint64_t *)(a1 + 56));
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v8 = &unk_1EE9E3278;
    v8[1] = a1;
    v8[2] = a1;
    v8[3] = v6;
    v16[0] = v8;
    v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    char v17 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v18, 0, (uint64_t)v16, 1);
    if (v17)
    {
      uint64_t v10 = v16[0];
      v16[0] = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    __n128 result = v18;
    int v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  else
  {
    uint64_t v12 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
    uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (IPC::Encoder *)v13(v12);
  }
  return result;
}

uint64_t WebKit::DownloadProxy::didStart(WebKit::DownloadProxy *this, const WebCore::ResourceRequest *a2, WTF::StringImpl **a3)
{
  WebCore::ResourceRequestBase::operator=((uint64_t)this + 72, (uint64_t)a2);
  uint64_t v6 = *((void *)a2 + 24);
  if (v6) {
    CFRetain(*((CFTypeRef *)a2 + 24));
  }
  uint64_t v7 = (const void *)*((void *)this + 33);
  *((void *)this + 33) = v6;
  if (v7) {
    CFRelease(v7);
  }
  WTF::String::operator=((uint64_t *)this + 34, a3);
  uint64_t v8 = (uint64_t *)((char *)this + 296);
  unsigned int v9 = *((_DWORD *)this + 77);
  if (!v9
    || (uint64_t v10 = *v8 + 40 * v9,
        uint64_t v11 = (const WTF::StringImpl **)WebCore::ResourceRequestBase::url(a2),
        (WTF::equal(*(WTF **)(v10 - 40), *v11, v12) & 1) == 0))
  {
    unint64_t v13 = WebCore::ResourceRequestBase::url(a2);
    unsigned int v14 = *((_DWORD *)this + 77);
    if (v14 == *((_DWORD *)this + 76))
    {
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL const&>((uint64_t)this + 296, v13);
    }
    else
    {
      uint64_t v15 = *v8;
      uint64_t v16 = (void *)(*v8 + 40 * v14);
      char v17 = *(_DWORD **)v13;
      if (*(void *)v13) {
        *v17 += 2;
      }
      void *v16 = v17;
      uint64_t v18 = v15 + 40 * v14;
      long long v19 = *(_OWORD *)(v13 + 8);
      *(_OWORD *)(v18 + 24) = *(_OWORD *)(v13 + 24);
      *(_OWORD *)(v18 + 8) = v19;
      ++*((_DWORD *)this + 77);
    }
  }
  uint64_t v20 = *((void *)this + 41);
  if (v20)
  {
    *((void *)this + 41) = 0;
    (*(void (**)(uint64_t, WebKit::DownloadProxy *))(*(void *)v20 + 16))(v20, this);
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *(uint64_t (**)(void))(**((void **)this + 6) + 16);

  return v21();
}

void WebKit::DownloadProxy::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(WebKit::WebsiteDataStore **)(a1 + 40);
  if (v4)
  {
    uint64_t v7 = *(atomic_uchar *volatile **)(WebKit::WebsiteDataStore::networkProcess(v4) + 144);
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198F9E0F4);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, v7);
    uint64_t v11 = 0;
    uint64_t v8 = (CFTypeRef *)API::Object::newObject(0x1D8uLL, 2);
    WebKit::AuthenticationChallengeProxy::AuthenticationChallengeProxy((WebKit *)v8, a2, a3, (uint64_t *)&v12, (uint64_t *)&v11);
    uint64_t v10 = (unsigned int *)v11;
    uint64_t v11 = 0;
    if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
    (*(void (**)(void, uint64_t, CFTypeRef *))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), a1, v8);
    if (v8) {
      CFRelease(v8[1]);
    }
  }
}

uint64_t WebKit::DownloadProxy::willSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 48);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v9 = *a4;
  *a4 = 0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v10 = &unk_1EE9E32A0;
  v10[1] = a1;
  v10[2] = a1;
  v10[3] = v9;
  uint64_t v12 = v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v8 + 112))(v8, a1, a2, a3, &v12);
  uint64_t result = (uint64_t)v12;
  uint64_t v12 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::DownloadProxy::didReceiveData(WebKit::DownloadProxy *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, WebKit::DownloadProxy *, uint64_t, uint64_t, uint64_t))(**((void **)this + 6)
                                                                                               + 32))(*((void *)this + 6), this, a2, a3, a4);
}

WTF::StringImpl *WebKit::DownloadProxy::decideDestinationWithSuggestedFilename(uint64_t a1, WebCore::ResourceResponseBase *this, uint64_t *a3, uint64_t *a4)
{
  if (!WebCore::ResourceResponseBase::expectedContentLength(this))
  {
    long long v27 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1985F2000, v27, OS_LOG_TYPE_INFO, "DownloadProxy::decideDestinationWithSuggestedFilename expectedContentLength is null", buf, 2u);
    }
  }
  if ((WebCore::ResourceResponseBase::isAttachmentWithFilename(this) & 1) == 0)
  {
    if (*a3 && *(_DWORD *)(*a3 + 4))
    {
      uint64_t v13 = *(void *)(a1 + 272);
      if (!v13 || !*(_DWORD *)(v13 + 4)) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 272);
      if (!v14 || !*(_DWORD *)(v14 + 4)) {
        goto LABEL_3;
      }
    }
    WTF::String::operator=(a3, (WTF::StringImpl **)(a1 + 272));
    goto LABEL_16;
  }
LABEL_3:
  WebCore::ResourceResponseBase::suggestedFilename((uint64_t *)buf, this);
  uint64_t v9 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  uint64_t v10 = (WTF::StringImpl *)*a3;
  *a3 = (uint64_t)v9;
  if (v10)
  {
    int v11 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 != 2)
    {
LABEL_7:
      *(_DWORD *)uint64_t v10 = v11;
      goto LABEL_16;
    }
    WTF::StringImpl::destroy(v10, v8);
    uint64_t v10 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v10)
    {
      int v11 = *(_DWORD *)v10 - 2;
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v12);
        goto LABEL_16;
      }
      goto LABEL_7;
    }
  }
LABEL_16:
  uint64_t v15 = (const WTF::String *)WebCore::ResourceResponseBase::mimeType(this);
  WebCore::MIMETypeRegistry::appendFileExtensionIfNecessary((uint64_t *)buf, (WebCore::MIMETypeRegistry *)a3, v15, v16);
  uint64_t v18 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  long long v19 = (WTF::StringImpl *)*a3;
  *a3 = (uint64_t)v18;
  if (!v19) {
    goto LABEL_21;
  }
  int v20 = *(_DWORD *)v19 - 2;
  if (*(_DWORD *)v19 != 2) {
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v19, v17);
  long long v19 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (!v19) {
    goto LABEL_21;
  }
  int v20 = *(_DWORD *)v19 - 2;
  if (*(_DWORD *)v19 == 2) {
    WTF::StringImpl::destroy(v19, v17);
  }
  else {
LABEL_20:
  }
    *(_DWORD *)long long v19 = v20;
LABEL_21:
  uint64_t v21 = *(void *)(a1 + 48);
  WebCore::ResourceResponseBase::sanitizeSuggestedFilename((uint64_t *)buf, (WebCore::ResourceResponseBase *)a3, v17);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v22 = *a4;
  *a4 = 0;
  uint64_t v23 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v23 = &unk_1EE9E32C8;
  v23[1] = a1;
  v23[2] = a1;
  v23[3] = v22;
  uint64_t v28 = v23;
  (*(void (**)(uint64_t, uint64_t, WebCore::ResourceResponseBase *, uint8_t *, void **))(*(void *)v21 + 48))(v21, a1, this, buf, &v28);
  long long v25 = v28;
  uint64_t v28 = 0;
  if (v25) {
    (*(void (**)(void *))(*v25 + 8))(v25);
  }
  uint64_t result = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::DownloadProxy::didCreateDestination(WebKit::DownloadProxy *this, const WTF::String *a2)
{
  return (*(uint64_t (**)(void, WebKit::DownloadProxy *, const WTF::String *))(**((void **)this + 6) + 56))(*((void *)this + 6), this, a2);
}

unsigned int *WebKit::DownloadProxy::didFinish(WebKit::DownloadProxy *this)
{
  uint64_t result = (unsigned int *)(*(uint64_t (**)(void, WebKit::DownloadProxy *))(**((void **)this + 6) + 64))(*((void *)this + 6), this);
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *(WebKit::DownloadProxyMap **)(v3 + 8);
    if (v4)
    {
      atomic_fetch_add((atomic_uint *volatile)(*(void *)(*((void *)v4 + 1) + 8) + 16), 1u);
      WebKit::DownloadProxyMap::downloadFinished(v4, this);
      uint64_t v5 = (unsigned int *)(*(void *)(*((void *)v4 + 1) + 8) + 16);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
    }
  }
  return result;
}

void WebKit::DownloadProxyMap::downloadFinished(WebKit::DownloadProxyMap *this, WebKit::DownloadProxy *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 7);
  uint64_t v5 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = 134217984;
    uint64_t v28 = v4;
    _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "Removing download %llu from UIProcess DownloadProxyMap", (uint8_t *)&v27, 0xCu);
  }
  uint64_t v6 = *(void *)(*((void *)this + 1) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  IPC::MessageReceiverMap::removeMessageReceiver(v6 + 152, 5u, v4);
  if (v6) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  }
  uint64_t v8 = *((void *)a2 + 5);
  *((void *)a2 + 5) = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  uint64_t v10 = (uint64_t *)((char *)this + 16);
  uint64_t v9 = *((void *)this + 2);
  if (!v9) {
    goto LABEL_37;
  }
  unsigned int v11 = *(_DWORD *)(v9 - 8);
  unint64_t v12 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  uint64_t v15 = v11 & ((v14 >> 31) ^ v14);
  uint64_t v16 = *(void *)(v9 + 16 * v15);
  if (v16 != v4)
  {
    int v17 = 1;
    while (v16)
    {
      uint64_t v15 = (v15 + v17) & v11;
      uint64_t v16 = *(void *)(v9 + 16 * v15);
      ++v17;
      if (v16 == v4) {
        goto LABEL_14;
      }
    }
    uint64_t v15 = *(unsigned int *)(v9 - 4);
  }
LABEL_14:
  if (v15 != *(_DWORD *)(v9 - 4))
  {
    uint64_t v18 = (void *)(v9 + 16 * v15);
    uint64_t v19 = v18[1];
    void *v18 = -1;
    v18[1] = 0;
    if (v19) {
      CFRelease(*(CFTypeRef *)(v19 + 8));
    }
    ++*(_DWORD *)(*v10 - 16);
    uint64_t v20 = *v10;
    int v21 = *v10 ? *(_DWORD *)(v20 - 12) - 1 : -1;
    *(_DWORD *)(v20 - 12) = v21;
    uint64_t v9 = *v10;
    if (!*v10) {
      goto LABEL_37;
    }
    unsigned int v22 = *(_DWORD *)(v9 - 4);
    if (6 * *(_DWORD *)(v9 - 12) < v22 && v22 >= 9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash((uint64_t *)this + 2, v22 >> 1);
      uint64_t v9 = *v10;
      if (!*v10) {
        goto LABEL_37;
      }
    }
  }
  if (!*(_DWORD *)(v9 - 12))
  {
LABEL_37:
    if (*((unsigned char *)this + 24))
    {
      uint64_t v24 = *((void *)this + 4);
      *((void *)this + 4) = 0;
      if (v24) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v24 + 8), v7);
      }
      uint64_t v25 = *((void *)this + 5);
      *((void *)this + 5) = 0;
      if (v25) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v25 + 8), v7);
      }
      long long v26 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v27) = 0;
        _os_log_impl(&dword_1985F2000, v26, OS_LOG_TYPE_DEFAULT, "UIProcess released 'WebKit downloads' assertions for UIProcess and NetworkProcess", (uint8_t *)&v27, 2u);
      }
    }
  }
}

unsigned int *WebKit::DownloadProxy::didFail(uint64_t a1, uint64_t a2, const void *a3, WTF *this)
{
  if (this)
  {
    API::Data::create(this, a3, &v10);
    this = v10;
  }
  uint64_t v6 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = this;
  if (v6)
  {
    CFRelease(*(CFTypeRef *)(v6 + 8));
    this = *(WTF **)(a1 + 64);
  }
  uint64_t result = (unsigned int *)(*(uint64_t (**)(void, uint64_t, uint64_t, WTF *))(**(void **)(a1 + 48) + 72))(*(void *)(a1 + 48), a1, a2, this);
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    uint64_t v9 = *(WebKit::DownloadProxyMap **)(v8 + 8);
    if (v9)
    {
      atomic_fetch_add((atomic_uint *volatile)(*(void *)(*((void *)v9 + 1) + 8) + 16), 1u);
      WebKit::DownloadProxyMap::downloadFinished(v9, (WebKit::DownloadProxy *)a1);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(*(void *)(*((void *)v9 + 1) + 8) + 16));
    }
  }
  return result;
}

WebKit::DownloadProxyMap *WebKit::DownloadProxyMap::DownloadProxyMap(WebKit::DownloadProxyMap *this, WebKit::NetworkProcessProxy *a2)
{
  *(void *)this = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v4, 1u);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = WTF::processHasEntitlement();
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  return this;
}

void WebKit::DownloadProxyMap::~DownloadProxyMap(WebKit::DownloadProxyMap *this, void *a2)
{
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v5, a2);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, a2);
}

unsigned __int8 *WebKit::DownloadProxyMap::createDownloadProxy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, const String *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = API::Object::newObject(0x158uLL, 56);
  uint64_t v15 = *a3;
  *(void *)uint64_t v14 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v14);
  *(void *)uint64_t v14 = &unk_1EE9E30D8;
  *(void *)(v14 + ++*(_DWORD *)(this + 16) = &unk_1EE9E3108;
  *(void *)(v14 + 24) = 0;
  uint64_t v16 = *(void *)a1;
  if (*(void *)a1) {
    goto LABEL_6;
  }
  uint64_t v16 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v16 = 1;
  *(void *)(v16 + 8) = a1;
  uint64_t v18 = *(unsigned int **)a1;
  *(void *)a1 = v16;
  if (!v18) {
    goto LABEL_6;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, v17);
  }
  uint64_t v16 = *(void *)a1;
  if (*(void *)a1) {
LABEL_6:
  }
    atomic_fetch_add((atomic_uint *volatile)v16, 1u);
  *(void *)(v14 + 32) = v16;
  CFRetain(*(CFTypeRef *)(a2 + 8));
  *(void *)(v14 + ++*(_DWORD *)(this + 40) = a2;
  ++*(_DWORD *)(v15 + 8);
  *(void *)(v14 + 48) = v15;
  *(void *)(v14 + 56) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(v14 + 64) = 0;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v14 + 72), a4);
  *(void *)(v14 + 272) = 0;
  *(void *)(v14 + 280) = 0;
  if (a6)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a6 + 24), a6 + 16);
    uint64_t v19 = *(atomic_uint **)(a6 + 24);
    if (v19) {
      atomic_fetch_add(v19, 1u);
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  *(void *)(v14 + 296) = 0;
  *(void *)(v14 + 304) = 0;
  *(void *)(v14 + 288) = v19;
  *(unsigned char *)(v14 + 312) = 1;
  *(_WORD *)long long buf = *(_WORD *)a5;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&buf[8], (const String *)(a5 + 8));
  v69[0] = 0;
  int v70 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v69, a5 + 208);
  uint64_t v20 = *(WTF::StringImpl **)(a5 + 240);
  if (v20) {
    *(_DWORD *)v20 += 2;
  }
  v71 = v20;
  v73[0] = *(_OWORD *)(a5 + 264);
  *(_OWORD *)((char *)v73 + 14) = *(_OWORD *)(a5 + 278);
  long long v72 = *(_OWORD *)(a5 + 248);
  if (a6) {
    CFRetain(*(CFTypeRef *)(a6 + 8));
  }
  v66[0] = a6;
  uint64_t v21 = API::Object::newObject(0x140uLL, 60);
  *(void *)(v14 + 320) = API::FrameInfo::FrameInfo(v21, (uint64_t)buf, v66);
  if (v66[0]) {
    CFRelease(*(CFTypeRef *)(v66[0] + 8));
  }
  uint64_t v23 = v71;
  v71 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v22);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  if (v70 != -1) {
    ((void (*)(uint64_t *, unsigned char *))off_1EE9E31C0[v70])(v66, v69);
  }
  int v70 = -1;
  CFTypeRef v24 = cf;
  CFTypeRef cf = 0;
  if (v24) {
    CFRelease(v24);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[8]);
  *(void *)(v14 + 328) = 0;
  *(void *)(v14 + 336) = 0;
  *(void *)a7 = v14;
  uint64_t v25 = *(void *)(v14 + 56);
  CFRetain(*(CFTypeRef *)(v14 + 8));
  int v27 = (uint64_t *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 16);
  if (v26
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)(a1 + 16)),
        (uint64_t v26 = *v27) != 0))
  {
    int v28 = *(_DWORD *)(v26 - 8);
  }
  else
  {
    int v28 = 0;
  }
  unint64_t v29 = (v25 + ~(v25 << 32)) ^ ((unint64_t)(v25 + ~(v25 << 32)) >> 22);
  unint64_t v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
  unint64_t v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
  unsigned int v32 = v28 & ((v31 >> 31) ^ v31);
  uint64_t v33 = (void *)(v26 + 16 * v32);
  uint64_t v34 = *v33;
  if (!*v33)
  {
LABEL_36:
    uint64_t v37 = v33[1];
    *uint64_t v33 = v25;
    v33[1] = v14;
    if (v37) {
      CFRelease(*(CFTypeRef *)(v37 + 8));
    }
    uint64_t v38 = *v27;
    if (*v27) {
      int v39 = *(_DWORD *)(v38 - 12) + 1;
    }
    else {
      int v39 = 1;
    }
    *(_DWORD *)(v38 - 12) = v39;
    uint64_t v41 = *v27;
    if (*v27) {
      int v42 = *(_DWORD *)(v41 - 12);
    }
    else {
      int v42 = 0;
    }
    uint64_t v43 = (*(_DWORD *)(v41 - 16) + v42);
    unint64_t v44 = *(unsigned int *)(v41 - 4);
    if (v44 > 0x400)
    {
      if (v44 > 2 * v43) {
        goto LABEL_49;
      }
    }
    else if (3 * v44 > 4 * v43)
    {
      goto LABEL_49;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)(a1 + 16));
    goto LABEL_49;
  }
  uint64_t v35 = 0;
  int v36 = 1;
  while (v34 != v25)
  {
    if (v34 == -1) {
      uint64_t v35 = v33;
    }
    unsigned int v32 = (v32 + v36) & v28;
    uint64_t v33 = (void *)(v26 + 16 * v32);
    uint64_t v34 = *v33;
    ++v36;
    if (!*v33)
    {
      if (v35)
      {
        void *v35 = 0;
        v35[1] = 0;
        --*(_DWORD *)(*v27 - 16);
        uint64_t v33 = v35;
      }
      goto LABEL_36;
    }
  }
  uint64_t v40 = v33[1];
  v33[1] = v14;
  if (v40) {
    CFRelease(*(CFTypeRef *)(v40 + 8));
  }
LABEL_49:
  uint64_t v45 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v46 = *(void *)(v14 + 56);
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v46;
    _os_log_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEFAULT, "Adding download %llu to UIProcess DownloadProxyMap", buf, 0xCu);
  }
  if (*v27 && *(_DWORD *)(*v27 - 12) == 1 && *(unsigned char *)(a1 + 24))
  {
    pid_t v47 = getpid();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v66[0] = 0;
    uint64_t v48 = WTF::fastMalloc((WTF *)0xB0);
    uint64_t v49 = WebKit::ProcessAssertion::ProcessAssertion(v48, v47, (_DWORD **)buf, 2, MEMORY[0x1E4F30980]);
    WebKit::ProcessAssertion::acquireAsync(v49, v66);
    uint64_t v51 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v48;
    if (v51) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v51 + 8), v50);
    }
    uint64_t v52 = v66[0];
    v66[0] = 0;
    if (v52) {
      (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
    }
    uint64_t v53 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2) {
        WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v50);
      }
      else {
        *(_DWORD *)v53 -= 2;
      }
    }
    uint64_t v54 = *(void **)(*(void *)(a1 + 8) + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v66[0] = 0;
    uint64_t v55 = WTF::fastMalloc((WTF *)0xB0);
    uint64_t v56 = WebKit::ProcessAssertion::ProcessAssertion(v55, v54, (_DWORD **)buf, 2);
    WebKit::ProcessAssertion::acquireAsync(v56, v66);
    uint64_t v58 = *(void *)(a1 + 40);
    *(void *)(a1 + ++*(_DWORD *)(this + 40) = v55;
    if (v58) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v58 + 8), v57);
    }
    uint64_t v59 = v66[0];
    v66[0] = 0;
    if (v59) {
      (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
    }
    uint64_t v60 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2) {
        WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v57);
      }
      else {
        *(_DWORD *)v60 -= 2;
      }
    }
    int v61 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1985F2000, v61, OS_LOG_TYPE_DEFAULT, "UIProcess took 'WebKit downloads' assertions for UIProcess and NetworkProcess", buf, 2u);
    }
  }
  uint64_t v62 = *(void *)(*(void *)(a1 + 8) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v62 + 16), 1u);
  uint64_t v63 = *(void *)(*(void *)a7 + 56);
  uint64_t v64 = *(void *)a7 + 16;
  v66[0] = 5;
  v66[1] = v63;
  uint64_t result = WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v62 + 160), (unsigned __int8 *)v66, v64, (unsigned __int8 **)buf);
  if (v62) {
    return (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v62 + 16));
  }
  return result;
}

void WebKit::DownloadProxyMap::invalidate(WebKit::DownloadProxyMap *this, void *a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (!v3)
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
LABEL_10:
    uint64_t v5 = (void *)(v3 + 16 * v4);
    goto LABEL_11;
  }
  uint64_t v4 = *(unsigned int *)(v3 - 4);
  uint64_t v5 = (void *)(v3 + 16 * v4);
  if (!*(_DWORD *)(v3 - 12))
  {
    uint64_t v6 = (void *)(v3 + 16 * v4);
    goto LABEL_10;
  }
  uint64_t v6 = (void *)v3;
  if (v4)
  {
    uint64_t v7 = 16 * v4;
    uint64_t v6 = (void *)v3;
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      v6 += 2;
      v7 -= 16;
      if (!v7)
      {
        uint64_t v6 = v5;
        break;
      }
    }
  }
LABEL_11:
  if (v3) {
    uint64_t v8 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != v6)
  {
    do
    {
      (*(void (**)(void))(**(void **)(v6[1] + 48) + 104))(*(void *)(v6[1] + 48));
      uint64_t v9 = v6[1];
      uint64_t v10 = *(void *)(v9 + 40);
      *(void *)(v9 + ++*(_DWORD *)(this + 40) = 0;
      if (v10) {
        CFRelease(*(CFTypeRef *)(v10 + 8));
      }
      uint64_t v11 = *(void *)(*((void *)this + 1) + 8);
      atomic_fetch_add((atomic_uint *volatile)(v11 + 16), 1u);
      IPC::MessageReceiverMap::removeMessageReceiver(v11 + 152, 5u, *(void *)(v6[1] + 56));
      if (v11) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v11 + 16));
      }
      unint64_t v12 = v6 + 2;
      uint64_t v6 = v5;
      if (v12 != v5)
      {
        uint64_t v6 = v12;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          if (v6 == v5)
          {
            uint64_t v6 = v5;
            break;
          }
        }
      }
    }
    while (v6 != v8);
    uint64_t v3 = *((void *)this + 2);
  }
  if (v3)
  {
    *((void *)this + 2) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v3, a2);
  }
  uint64_t v13 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v13) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v13 + 8), a2);
  }
  uint64_t v14 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v14) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v14 + 8), a2);
  }
  uint64_t v15 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_1985F2000, v15, OS_LOG_TYPE_DEFAULT, "UIProcess DownloadProxyMap invalidated - Released 'WebKit downloads' assertions for UIProcess and NetworkProcess", v16, 2u);
  }
}

uint64_t WebKit::WebExtensionAlarm::schedule(WebKit::WebExtensionAlarm *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  WTF::MonotonicTime::now(this);
  double v2 = *((double *)this + 2);
  *((double *)this + 4) = v2 + v3;
  uint64_t v4 = qword_1EB357DF8;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG);
  if (v5)
  {
    uint64_t v11 = *((void *)this + 3);
    int v12 = 134349312;
    double v13 = v2;
    __int16 v14 = 2050;
    uint64_t v15 = v11;
    _os_log_debug_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEBUG, "Scheduled alarm; initial = %{public}f seconds; repeat = %{public}f seconds",
      (uint8_t *)&v12,
      0x16u);
  }
  uint64_t v6 = (WTF::RunLoop *)WTF::RunLoop::current((WTF::RunLoop *)v5);
  uint64_t v7 = (WTF::RunLoop::TimerBase *)WTF::fastMalloc((WTF *)0x20);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v8 = &unk_1EE9E31E0;
  v8[1] = WebKit::WebExtensionAlarm::fire;
  v8[2] = 0;
  v8[3] = this;
  WTF::RunLoop::TimerBase::TimerBase(v7, v6);
  *(void *)uint64_t v7 = &unk_1EE9B3390;
  *((void *)v7 + 3) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = v7;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return WTF::RunLoop::TimerBase::start();
}

uint64_t WebKit::WebExtensionAlarm::fire(WebKit::WebExtensionAlarm *this)
{
  WTF::MonotonicTime::now(this);
  double v3 = v2;
  double v4 = *((double *)this + 3);
  if (!*((unsigned char *)this + 56))
  {
    *((unsigned char *)this + 56) = 1;
    WTF::RunLoop::TimerBase::start();
  }
  uint64_t result = (*(uint64_t (**)(void, WebKit::WebExtensionAlarm *))(**((void **)this + 5) + 16))(*((void *)this + 5), this);
  if (*((double *)this + 3) == 0.0)
  {
    uint64_t result = *((void *)this + 6);
    *((void *)this + 6) = 0;
    if (result)
    {
      uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 8);
      return v6();
    }
  }
  else
  {
    *((double *)this + 4) = v4 + v3;
  }
  return result;
}

WebKit::WebExtensionContext *WebKit::WebExtensionContext::WebExtensionContext(WebKit::WebExtensionContext *this)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9E3208;
  *((void *)this + 3) = 0;
  double v2 = (atomic_uint *volatile *)((char *)this + 24);
  *((void *)this + 2) = &unk_1EE9B71B0;
  *((void *)this + 4) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)this = &unk_1EE9FFEA8;
  *((void *)this + 2) = &unk_1EE9FFED8;
  *(_OWORD *)((char *)this + ++*(_DWORD *)(this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  WTF::URL::invalidate((WebKit::WebExtensionContext *)((char *)this + 80));
  WTF::UUID::UUID((WTF::UUID *)v23);
  WTF::UUID::toString((uint64_t *)this + 15, (WTF::UUID *)v23);
  *(_OWORD *)((char *)this + 232) = 0u;
  *((unsigned char *)this + 128) = 0;
  *((void *)this + 17) = 0;
  *((unsigned char *)this + 144) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  int64x2_t v3 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)((char *)this + 184) = v3;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(int64x2_t *)((char *)this + 2++*(_DWORD *)(this + 16) = v3;
  *((unsigned char *)this + 552) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 258) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_WORD *)this + 156) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_WORD *)this + 192) = 0;
  *(_OWORD *)((char *)this + 529) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 4++*(_DWORD *)(this + 40) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((unsigned char *)this + 624) = 0;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 705) = 0u;
  *((void *)this + 93) = 0;
  *(_OWORD *)((char *)this + 728) = 0u;
  if (_MergedGlobals_103)
  {
    uint64_t v4 = qword_1EB359DC0;
    uint64_t v5 = *((void *)this + 4);
    if (qword_1EB359DC0)
    {
LABEL_4:
      int v6 = *(_DWORD *)(v4 - 8);
      goto LABEL_5;
    }
  }
  else
  {
    qword_1EB359DC0 = 0;
    _MergedGlobals_103 = 1;
    uint64_t v5 = *((void *)this + 4);
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand();
  uint64_t v4 = qword_1EB359DC0;
  if (qword_1EB359DC0) {
    goto LABEL_4;
  }
  int v6 = 0;
LABEL_5:
  unint64_t v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
  unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = v6 & ((v9 >> 31) ^ v9);
  uint64_t v11 = (void *)(v4 + 16 * v10);
  uint64_t v12 = *v11;
  if (!*v11)
  {
LABEL_13:
    void *v11 = v5;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 6, (uint64_t)this + 16);
    atomic_uint *volatile v16 = *v2;
    atomic_fetch_add(*v2, 1u);
    int v17 = (unsigned int *)v11[1];
    v11[1] = v16;
    if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v15);
    }
    if (qword_1EB359DC0) {
      int v18 = *(_DWORD *)(qword_1EB359DC0 - 12) + 1;
    }
    else {
      int v18 = 1;
    }
    *(_DWORD *)(qword_1EB359DC0 - 12) = v18;
    if (qword_1EB359DC0) {
      int v19 = *(_DWORD *)(qword_1EB359DC0 - 12);
    }
    else {
      int v19 = 0;
    }
    uint64_t v20 = (*(_DWORD *)(qword_1EB359DC0 - 16) + v19);
    unint64_t v21 = *(unsigned int *)(qword_1EB359DC0 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20) {
        return this;
      }
    }
    else if (3 * v21 > 4 * v20)
    {
      return this;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand();
    return this;
  }
  double v13 = 0;
  int v14 = 1;
  while (v12 != v5)
  {
    if (v12 == -1) {
      double v13 = v11;
    }
    unsigned int v10 = (v10 + v14) & v6;
    uint64_t v11 = (void *)(v4 + 16 * v10);
    uint64_t v12 = *v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        void *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(v4 - 16);
        uint64_t v11 = v13;
      }
      goto LABEL_13;
    }
  }
  return this;
}

void *WebKit::WebExtensionContext::parameters@<X0>(WebKit::WebExtensionContext *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *((void *)this + 4);
  uint64_t v4 = (_DWORD *)*((void *)this + 10);
  if (v4) {
    *v4 += 2;
  }
  *(void *)(a2 + 8) = v4;
  long long v5 = *(_OWORD *)((char *)this + 104);
  *(_OWORD *)(a2 + ++*(_DWORD *)(this + 16) = *(_OWORD *)((char *)this + 88);
  *(_OWORD *)(a2 + 32) = v5;
  int v6 = (_DWORD *)*((void *)this + 15);
  if (v6) {
    *v6 += 2;
  }
  *(void *)(a2 + 48) = v6;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(a2 + 56), (void **)this + 19);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(a2 + 64), (void **)this + 21);
  WebKit::WebExtension::serializeLocalization(*((id **)this + 8), (WebKit **)(a2 + 72));
  WebKit::WebExtension::serializeManifest(*((WebKit::WebExtension **)this + 8), (WebKit **)(a2 + 80));
  *(double *)(a2 + 88) = WebKit::WebExtension::manifestVersion(*((WebKit::WebExtension **)this + 8));
  *(unsigned char *)(a2 + 96) = *((unsigned char *)this + 720);
  *(void *)(a2 + 104) = WebKit::WebExtensionContext::backgroundPageIdentifier(this);
  *(void *)(a2 + 112) = v7;
  WebKit::WebExtensionContext::popupPageIdentifiers(this, a2 + 120);
  return WebKit::WebExtensionContext::tabPageIdentifiers(this, a2 + 136);
}

uint64_t WebKit::WebExtensionContext::pageListensForEvent(uint64_t a1, uint64_t a2, unsigned __int8 a3, unsigned __int8 a4)
{
  uint64_t v4 = *(void *)(a1 + 72);
  if (!v4) {
    return 0;
  }
  if (!*(void *)(v4 + 8)) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 273))
  {
    uint64_t v7 = *(void *)(*(void *)(a2 + 312) + 24);
    if (v7 < 0 && v7 != -1) {
      return 0;
    }
  }
  v13[0] = a3;
  v13[1] = a4;
  unint64_t v8 = WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>,std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>((uint64_t *)(a1 + 304), v13);
  unint64_t v9 = *(unsigned __int8 **)(a1 + 304);
  if (v9) {
    v9 += 24 * *((unsigned int *)v9 - 1);
  }
  if (v9 == v8) {
    return 0;
  }
  uint64_t result = WTF::WeakHashMap<WebKit::WebPageProxy,unsigned int,WTF::DefaultWeakPtrImpl>::contains((uint64_t)(v8 + 8), a2);
  if (result)
  {
    uint64_t v11 = *(void *)(a2 + 256);
    uint64_t v12 = *(void *)(v11 + 136);
    return v12 && *(unsigned char *)(v12 + 104) || *(void *)(v11 + 144) != 0;
  }
  return result;
}

void *WebKit::WebExtensionContext::processes@<X0>(void *result@<X0>, unsigned __int8 **a2@<X1>, unsigned __int8 **a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  uint64_t v5 = result[9];
  if (!v5 || !*(void *)(v5 + 8)) {
    return result;
  }
  int v6 = result;
  uint64_t v7 = *a2;
  if (!*a2)
  {
    unsigned int v10 = 0;
    uint64_t v8 = 0;
LABEL_12:
    unint64_t v9 = &v7[v8];
    goto LABEL_13;
  }
  uint64_t v8 = *((unsigned int *)v7 - 1);
  unint64_t v9 = &v7[v8];
  if (!*((_DWORD *)v7 - 3))
  {
    unsigned int v10 = &v7[v8];
    goto LABEL_12;
  }
  unsigned int v10 = *a2;
  if (v8)
  {
    unsigned int v10 = *a2;
    while (*v10 >= 0xFEu)
    {
      ++v10;
      if (!--v8)
      {
        unsigned int v10 = v9;
        break;
      }
    }
  }
LABEL_13:
  if (v7) {
    v7 += *((unsigned int *)v7 - 1);
  }
  if (v7 != v10)
  {
    uint64_t v51 = result + 38;
    pid_t v47 = v7;
    uint64_t v48 = v9;
    while (1)
    {
      uint64_t v11 = *a3;
      if (!*a3) {
        break;
      }
      uint64_t v12 = *((unsigned int *)v11 - 1);
      double v13 = &v11[v12];
      if (!*((_DWORD *)v11 - 3))
      {
        int v14 = &v11[v12];
LABEL_28:
        double v13 = &v11[v12];
        if (!v11) {
          goto LABEL_29;
        }
        goto LABEL_25;
      }
      int v14 = *a3;
      if (v12)
      {
        int v14 = *a3;
        while (*v14 >= 0xFEu)
        {
          ++v14;
          if (!--v12)
          {
            int v14 = v13;
            break;
          }
        }
      }
      if (!v11)
      {
LABEL_29:
        uint64_t v15 = 0;
        goto LABEL_30;
      }
LABEL_25:
      uint64_t v15 = &v11[*((unsigned int *)v11 - 1)];
LABEL_30:
      if (v15 != v14)
      {
        unsigned __int8 v52 = *v10;
        int v50 = v15;
        while (1)
        {
          unsigned __int8 v16 = *v14;
          LOBYTE(v59) = v52;
          BYTE1(v59) = v16;
          uint64_t result = WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>,std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>(v51, (unsigned __int8 *)&v59);
          int v17 = result;
          uint64_t v18 = *v51;
          if (*v51) {
            v18 += 24 * *(unsigned int *)(v18 - 4);
          }
          if ((void *)v18 != result) {
            break;
          }
LABEL_82:
          uint64_t v45 = v14 + 1;
          int v14 = v13;
          if (v45 != v13)
          {
            int v14 = v45;
            while (*v14 >= 0xFEu)
            {
              if (++v14 == v13)
              {
                int v14 = v13;
                break;
              }
            }
          }
          if (v14 == v15) {
            goto LABEL_88;
          }
        }
        WTF::WeakHashMap<WebKit::WebPageProxy,unsigned int,WTF::DefaultWeakPtrImpl>::begin((void **)result + 1, (uint64_t)&v59);
        uint64_t v19 = v17[1];
        if (v19)
        {
          uint64_t v20 = *(unsigned int *)(v19 - 4);
          unint64_t v21 = (void *)(v19 + 16 * v20);
        }
        else
        {
          unint64_t v21 = 0;
          uint64_t v20 = 0;
        }
        uint64_t v53 = v17 + 1;
        uint64_t v54 = v21;
        uint64_t v55 = v21;
        uint64_t v56 = v21;
        uint64_t v57 = v19 + 16 * v20;
        int v58 = 0;
        uint64_t result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v53);
LABEL_39:
        if (v60 == v54)
        {
          uint64_t v15 = v50;
          goto LABEL_82;
        }
        uint64_t v22 = *(void *)(*v60 + 8);
        if (v22) {
          uint64_t v23 = v22 - 16;
        }
        else {
          uint64_t v23 = 0;
        }
        if (!*((unsigned char *)v6 + 273))
        {
          uint64_t v24 = *(void *)(*(void *)(v23 + 312) + 24);
          if (v24 < 0 && v24 != -1) {
            goto LABEL_72;
          }
        }
        uint64_t v25 = *(void *)(v23 + 256);
        atomic_fetch_add((atomic_uint *volatile)(v25 + 16), 1u);
        uint64_t v26 = *(void *)(v25 + 136);
        if ((!v26 || !*(unsigned char *)(v26 + 104)) && !*(void *)(v25 + 144)) {
          goto LABEL_61;
        }
        uint64_t v27 = *a4;
        if (*a4
          || (WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::expand(a4, 0), (uint64_t v27 = *a4) != 0))
        {
          int v28 = *(_DWORD *)(v27 - 8);
        }
        else
        {
          int v28 = 0;
        }
        unint64_t v29 = 0;
        unint64_t v30 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
        unint64_t v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
        unint64_t v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
        unsigned int v33 = (v32 >> 31) ^ v32;
        for (int i = 1; ; ++i)
        {
          unsigned int v35 = v33 & v28;
          int v36 = (uint64_t *)(v27 + 8 * v35);
          uint64_t v37 = *v36;
          if (*v36 == -1)
          {
            unint64_t v29 = (uint64_t *)(v27 + 8 * v35);
          }
          else
          {
            if (!v37)
            {
              if (v29)
              {
                uint64_t *v29 = 0;
                --*(_DWORD *)(*a4 - 16);
                uint64_t *v29 = v25;
              }
              else
              {
                *int v36 = v25;
                unint64_t v29 = (uint64_t *)(v27 + 8 * v35);
              }
              uint64_t v38 = *a4;
              if (*a4) {
                int v39 = *(_DWORD *)(v38 - 12) + 1;
              }
              else {
                int v39 = 1;
              }
              *(_DWORD *)(v38 - 12) = v39;
              uint64_t v40 = *a4;
              if (*a4) {
                int v41 = *(_DWORD *)(v40 - 12);
              }
              else {
                int v41 = 0;
              }
              uint64_t v42 = (*(_DWORD *)(v40 - 16) + v41);
              unint64_t v43 = *(unsigned int *)(v40 - 4);
              if (v43 > 0x400)
              {
                if (v43 > 2 * v42) {
                  goto LABEL_72;
                }
              }
              else if (3 * v43 > 4 * v42)
              {
                goto LABEL_72;
              }
              WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::expand(a4, v29);
              goto LABEL_72;
            }
            if (v37 == v25)
            {
              if (!v25) {
                goto LABEL_72;
              }
LABEL_61:
              WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v25 + 16));
LABEL_72:
              unint64_t v44 = v60;
              do
              {
                v44 += 2;
                uint64_t v60 = v44;
              }
              while (v44 != v61 && (unint64_t)(*v44 + 1) <= 1);
              ++v62;
              uint64_t result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v59);
              ++*(_DWORD *)(v59 + 8);
              goto LABEL_39;
            }
          }
          unsigned int v33 = i + v35;
        }
      }
LABEL_88:
      uint64_t v46 = v10 + 1;
      unsigned int v10 = v48;
      if (v46 != v48)
      {
        unsigned int v10 = v46;
        while (*v10 >= 0xFEu)
        {
          if (++v10 == v48)
          {
            unsigned int v10 = v48;
            break;
          }
        }
      }
      if (v10 == v47) {
        return result;
      }
    }
    int v14 = 0;
    uint64_t v12 = 0;
    goto LABEL_28;
  }
  return result;
}

void WebKit::WebExtensionMessagePort::~WebExtensionMessagePort(WebKit::WebExtensionMessagePort *this)
{
  *(void *)this = &unk_1EE9E3318;
  WebKit::WebExtensionMessagePort::remove((uint64_t)this);
  int64x2_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v2);
    }
  }
}

{
  uint64_t vars8;

  WebKit::WebExtensionMessagePort::~WebExtensionMessagePort(this);

  JUMPOUT(0x199740C10);
}

void WebKit::WebExtensionController::~WebExtensionController(WebKit::WebExtensionController *this)
{
  *(void *)this = &unk_1EE9E3140;
  *((void *)this + 2) = &unk_1EE9E3170;
  WebKit::WebExtensionController::unloadAll(this);
  uint64_t v3 = *((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 21);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    if (v6)
    {
      uint64_t v7 = *((void *)this + 21);
      do
      {
        uint64_t v8 = *(WTF::StringImpl **)v7;
        if (*(void *)v7 != -1)
        {
          unint64_t v9 = *(_DWORD **)(v7 + 8);
          *(void *)(v7 + 8) = 0;
          if (v9)
          {
            if (v9[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
              uint64_t v8 = *(WTF::StringImpl **)v7;
            }
            else
            {
              --v9[2];
            }
          }
          *(void *)uint64_t v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2) {
              WTF::StringImpl::destroy(v8, v2);
            }
            else {
              *(_DWORD *)v8 -= 2;
            }
          }
        }
        v7 += 16;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), v2);
  }
  unsigned int v10 = (unsigned int **)*((void *)this + 19);
  if (v10) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v10, v2);
  }
  uint64_t v11 = (unsigned int **)*((void *)this + 17);
  if (v11) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v11, v2);
  }
  uint64_t v12 = (unsigned int **)*((void *)this + 15);
  if (v12) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v12, v2);
  }
  double v13 = (unsigned int **)*((void *)this + 13);
  if (v13) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v13, v2);
  }
  int v14 = (unsigned int **)*((void *)this + 11);
  if (v14) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v14, v2);
  }
  uint64_t v15 = (unsigned int **)*((void *)this + 9);
  if (v15) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v15, v2);
  }
  uint64_t v16 = *((void *)this + 8);
  if (v16)
  {
    uint64_t v17 = *(unsigned int *)(v16 - 4);
    if (v17)
    {
      uint64_t v18 = *((void *)this + 8);
      do
      {
        uint64_t v19 = *(WTF::StringImpl **)v18;
        if (*(void *)v18 != -1)
        {
          uint64_t v20 = *(void *)(v18 + 8);
          *(void *)(v18 + 8) = 0;
          if (v20)
          {
            CFRelease(*(CFTypeRef *)(v20 + 8));
            uint64_t v19 = *(WTF::StringImpl **)v18;
          }
          *(void *)uint64_t v18 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v2);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
        }
        v18 += 16;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v16 - 16), v2);
  }
  unint64_t v21 = (uint64_t *)*((void *)this + 7);
  if (v21) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v21, v2);
  }
  uint64_t v22 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v23 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v23) {
    CFRelease(*(CFTypeRef *)(v23 + 8));
  }
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v2);
}

{
  uint64_t vars8;

  WebKit::WebExtensionController::~WebExtensionController(this);

  JUMPOUT(0x199740C10);
}

void non-virtual thunk to'WebKit::WebExtensionController::~WebExtensionController(WebKit::WebExtensionController *this)
{
}

{
  uint64_t vars8;

  WebKit::WebExtensionController::~WebExtensionController((WebKit::WebExtensionController *)((char *)this - 16));

  JUMPOUT(0x199740C10);
}

void *WebKit::WebExtensionController::allProcesses@<X0>(WebKit::WebExtensionController *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = (char *)this + 72;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 9, &v17);
  uint64_t v5 = *((void *)this + 9);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v12 = v4;
  uint64_t v13 = v7;
  uint64_t v14 = v7;
  uint64_t v15 = v7;
  uint64_t v16 = v5 + 8 * v6;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
  while (v18 != v13)
  {
    uint64_t v9 = *(void *)(*(void *)v18 + 8);
    if (v9) {
      uint64_t v10 = v9 - 16;
    }
    else {
      uint64_t v10 = 0;
    }
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>((uint64_t)a2, *(unsigned int **)(v10 + 256), (uint64_t)v11);
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v17);
  }
  return result;
}

uint64_t WebKit::WebExtensionControllerConfiguration::WebExtensionControllerConfiguration(uint64_t a1, uint64_t a2, _DWORD **a3)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9E31A8;
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  uint64_t v6 = (void *)(a1 + 40);
  uint64_t v7 = *a3;
  if (*a3 && v7[1])
  {
    *v7 += 2;
    void *v6 = v7;
  }
  else
  {
    WebKit::WebExtensionControllerConfiguration::createTemporaryStorageDirectoryPath(v5, (uint64_t)v6);
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  return a1;
}

WebKit::WebExtensionControllerConfiguration *WebKit::WebExtensionControllerConfiguration::WebExtensionControllerConfiguration(WebKit::WebExtensionControllerConfiguration *this, const WTF::UUID *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9E31A8;
  *((_OWORD *)this + 1) = *(_OWORD *)a2;
  *((unsigned char *)this + 32) = 0;
  long long v5 = *(_OWORD *)a2;
  char v6 = 1;
  WebKit::WebExtensionControllerConfiguration::createStorageDirectoryPath((WTF::UUID *)&v5);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  return this;
}

uint64_t WebKit::WebExtensionControllerConfiguration::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1 == a2) {
    return 1;
  }
  BOOL v5 = *(_OWORD *)(a1 + 16) != 0;
  BOOL v6 = *(_OWORD *)(a2 + 16) != 0;
  int v8 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
  if (!v5 || !v6) {
    int v8 = v5 ^ v6 ^ 1;
  }
  if (v8 == 1)
  {
    uint64_t result = WTF::equal(*(WTF **)(a1 + 40), *(const WTF::StringImpl **)(a2 + 40), a3);
    if (!result) {
      return result;
    }
    if (*(void *)(a1 + 48) == *(void *)(a2 + 48)) {
      return *(void *)(a1 + 56) == *(void *)(a2 + 56);
    }
  }
  return 0;
}

CFTypeRef *WebKit::WebExtensionControllerConfiguration::defaultWebsiteDataStore(WebKit::WebExtensionControllerConfiguration *this)
{
  uint64_t v1 = (CFTypeRef *)*((void *)this + 7);
  if (!v1)
  {
    WebKit::WebsiteDataStore::defaultDataStore(this, (WebKit::WebsiteDataStore **)&v3);
    uint64_t v1 = v3;
    if (v3) {
      CFRelease(v3[1]);
    }
  }
  return v1;
}

uint64_t API::ObjectImpl<(API::Object::Type)56>::type()
{
  return 56;
}

uint64_t API::ObjectImpl<(API::Object::Type)118>::type()
{
  return 118;
}

uint64_t API::ObjectImpl<(API::Object::Type)114>::type()
{
  return 114;
}

uint64_t API::ObjectImpl<(API::Object::Type)115>::type()
{
  return 115;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebExtensionAlarm::*&)(void),WebKit::WebExtensionAlarm*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  double v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void API::ObjectImpl<(API::Object::Type)113>::~ObjectImpl()
{
}

uint64_t API::ObjectImpl<(API::Object::Type)113>::type()
{
  return 113;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, void **a2)
{
  *a1 = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    int v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      unsigned int v6 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      size_t v7 = 16 * v6;
      uint64_t v8 = WTF::fastMalloc((WTF *)(v7 + 16));
      uint64_t v9 = v8;
      uint64_t v10 = v8 + 16;
      if (v6) {
        bzero((void *)(v8 + 16), v7);
      }
      *a1 = v10;
      *(_DWORD *)(v9 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
      uint64_t v11 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
      uint64_t v12 = v11;
      uint64_t v14 = v13;
      uint64_t v15 = *a2 ? (uint64_t)&(*a2)[2 * *((unsigned int *)*a2 - 1)] : 0;
      if ((void *)v15 != v11)
      {
        do
        {
          uint64_t v23 = v12;
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unsigned int v18 = *(_DWORD *)(*v12 + 16);
          if (v18 >= 0x100) {
            unsigned int v19 = v18 >> 8;
          }
          else {
            unsigned int v19 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)*v12);
          }
          int v20 = 0;
          do
          {
            uint64_t v21 = v19 & v17;
            unsigned int v19 = ++v20 + v21;
          }
          while (*(void *)(v16 + 16 * v21));
          WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::String,WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>> const&)::{lambda(void)#1}>(v16 + 16 * v21, (WTF::StringImpl *)v12, &v23);
          while (1)
          {
            v12 += 2;
            if (v12 == v14) {
              break;
            }
            if ((unint64_t)(*v12 + 1) > 1) {
              goto LABEL_22;
            }
          }
          uint64_t v12 = v14;
LABEL_22:
          ;
        }
        while (v12 != (void *)v15);
      }
    }
  }
  return a1;
}

WTF::StringImpl *WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::String,WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>> const&)::{lambda(void)#1}>(uint64_t a1, WTF::StringImpl *a2, void **a3)
{
  int v4 = (_DWORD **)*a3;
  BOOL v5 = (_DWORD *)**a3;
  if (v5) {
    *v5 += 2;
  }
  unsigned int v6 = v4[1];
  uint64_t result = *(WTF::StringImpl **)a1;
  *(void *)a1 = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  *(void *)(a1 + 8) = v6;
  return result;
}

uint64_t WTF::WeakHashMap<WebKit::WebPageProxy,unsigned int,WTF::DefaultWeakPtrImpl>::contains(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 8);
  uint64_t v2 = *(void *)(a2 + 24);
  if (!v2 || !*(void *)(v2 + 8)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v4);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  for (int i = 1; ; ++i)
  {
    uint64_t v9 = *(void *)(v2 + 16 * v7);
    if (v9 != -1)
    {
      if (!v9) {
        return 0;
      }
      if (v9 == *a2) {
        break;
      }
    }
    unsigned int v7 = (v7 + i) & v3;
  }
  return 1;
}

void API::ObjectImpl<(API::Object::Type)114>::~ObjectImpl()
{
}

unsigned int *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebExtensionController::WebExtensionController(WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>)::$_0>(WebKit::WebExtensionController::WebExtensionController(WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebExtensionController::WebExtensionController(WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>)::$_0>(WebKit::WebExtensionController::WebExtensionController(WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>)::$_0)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  if (v1)
  {
    if (*(void *)(v1 + 8)) {
      *(unsigned char *)(*(void *)(result + 32) + 176) &= ~1u;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CancelDownload,WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0>(WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E3278;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CancelDownload,WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0>(WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E3278;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CancelDownload,WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0>(WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (WebKit::DownloadProxy **)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>(a2, (uint64_t)v12);
    if (v14)
    {
      uint64_t v4 = v13;
      unint64_t v5 = *v2;
      if (v13)
      {
        API::Data::create(v13, *(const void **)v12, &v15);
        uint64_t v4 = v15;
      }
      uint64_t v6 = *((void *)v5 + 8);
      *((void *)v5 + 8) = v4;
      if (v6)
      {
        CFRelease(*(CFTypeRef *)(v6 + 8));
        uint64_t v4 = (WTF *)*((void *)v5 + 8);
      }
      uint64_t v7 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = 0;
      (*(void (**)(uint64_t, WTF *))(*(void *)v7 + 16))(v7, v4);
      uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
      uint64_t v9 = *((void *)v5 + 4);
      if (v9)
      {
        uint64_t v10 = *(WebKit::DownloadProxyMap **)(v9 + 8);
        if (v10)
        {
          atomic_fetch_add((atomic_uint *volatile)(*(void *)(*((void *)v10 + 1) + 8) + 16), 1u);
          WebKit::DownloadProxyMap::downloadFinished(v10, v5);
          return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(*(void *)(*((void *)v10 + 1) + 8) + 16));
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::NetworkProcess::CancelDownload,WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v11 = (WebKit::DownloadProxy **)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkProcess::CancelDownload,WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0>(v11);
  }
  return result;
}

unsigned int *IPC::Connection::cancelReply<Messages::NetworkProcess::CancelDownload,WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0>(WebKit::DownloadProxy **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((void *)*a1 + 8);
  *((void *)*a1 + 8) = 0;
  if (v3)
  {
    CFRelease(*(CFTypeRef *)(v3 + 8));
    uint64_t v4 = *((void *)v2 + 8);
  }
  else
  {
    uint64_t v4 = 0;
  }
  unint64_t v5 = a1[2];
  a1[2] = 0;
  (*(void (**)(WebKit::DownloadProxy *, uint64_t))(*(void *)v5 + 16))(v5, v4);
  uint64_t result = (unsigned int *)(*(uint64_t (**)(WebKit::DownloadProxy *))(*(void *)v5 + 8))(v5);
  uint64_t v7 = *((void *)v2 + 4);
  if (v7)
  {
    uint64_t v8 = *(WebKit::DownloadProxyMap **)(v7 + 8);
    if (v8)
    {
      atomic_fetch_add((atomic_uint *volatile)(*(void *)(*((void *)v8 + 1) + 8) + 16), 1u);
      WebKit::DownloadProxyMap::downloadFinished(v8, v2);
      uint64_t v9 = (unsigned int *)(*(void *)(*((void *)v8 + 1) + 8) + 16);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::DownloadProxy::willSendRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E32A0;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DownloadProxy::willSendRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E32A0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DownloadProxy::willSendRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &>::call(uint64_t a1, WebCore::ResourceRequestBase *this)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (uint64_t *)(v4 + 296);
  unint64_t v6 = WebCore::ResourceRequestBase::url(this);
  unsigned int v7 = *(_DWORD *)(v4 + 308);
  if (v7 == *(_DWORD *)(v4 + 304))
  {
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL const&>(v4 + 296, v6);
  }
  else
  {
    uint64_t v8 = *v5;
    uint64_t v9 = (void *)(*v5 + 40 * v7);
    uint64_t v10 = *(_DWORD **)v6;
    if (*(void *)v6) {
      *v10 += 2;
    }
    void *v9 = v10;
    uint64_t v11 = v8 + 40 * v7;
    long long v12 = *(_OWORD *)(v6 + 8);
    *(_OWORD *)(v11 + 24) = *(_OWORD *)(v6 + 24);
    *(_OWORD *)(v11 + 8) = v12;
    ++*(_DWORD *)(v4 + 308);
  }
  uint64_t v13 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, WebCore::ResourceRequestBase *))(*(void *)v13 + 16))(v13, this);
  char v14 = *(uint64_t (**)(uint64_t))(*(void *)v13 + 8);

  return v14(v13);
}

void *WTF::Detail::CallableWrapper<WebKit::DownloadProxy::decideDestinationWithSuggestedFilename(WebCore::ResourceResponse const&,WTF::String &&,WTF::CompletionHandler<void ()(WTF::String,WebKit::SandboxExtensionHandle,WebKit::AllowOverwrite,WebKit::UseDownloadPlaceholder,WTF::URL const&,WTF::CompletionHandler,std::span<unsigned char const,18446744073709551615ul>,unsigned char const)> &&)::$_0,void,WebKit::SandboxExtensionHandle,WTF::String>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E32C8;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DownloadProxy::decideDestinationWithSuggestedFilename(WebCore::ResourceResponse const&,WTF::String &&,WTF::CompletionHandler<void ()(WTF::String,WebKit::SandboxExtensionHandle,WebKit::AllowOverwrite,WebKit::UseDownloadPlaceholder,WTF::URL const&,WTF::CompletionHandler,std::span<unsigned char const,18446744073709551615ul>,unsigned char const)> &&)::$_0,void,WebKit::SandboxExtensionHandle,WTF::String>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E32C8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::DownloadProxy::decideDestinationWithSuggestedFilename(WebCore::ResourceResponse const&,WTF::String &&,WTF::CompletionHandler<void ()(WTF::String,WebKit::SandboxExtensionHandle,WebKit::AllowOverwrite,WebKit::UseDownloadPlaceholder,WTF::URL const&,WTF::CompletionHandler,std::span<unsigned char const,18446744073709551615ul>,unsigned char const)> &&)::$_0,void,WebKit::SandboxExtensionHandle,WTF::String>::call(uint64_t a1, char a2, WTF::StringImpl **a3)
{
  unint64_t v5 = *a3;
  *a3 = 0;
  unsigned int v18 = v5;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v5 && (WebKit::SandboxExtension::createHandle(1, (uint64_t)&v19), (_BYTE)v20))
  {
    unsigned int v7 = v19;
    unsigned int v19 = 0;
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v19);
  }
  else
  {
    unsigned int v7 = 0;
  }
  WTF::String::operator=((uint64_t *)(v6 + 280), &v18);
  uint64_t v8 = *(void *)(v6 + 48);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  uint64_t v10 = v18;
  unsigned int v18 = 0;
  uint64_t v24 = 0;
  char v22 = a2;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v11 = &unk_1EE9E32F0;
  *(void *)(v11 + 8) = v9;
  unsigned int v19 = 0;
  int v20 = 0;
  *(void *)(v11 + ++*(_DWORD *)(this + 16) = v10;
  *(void *)(v11 + 24) = v7;
  uint64_t v21 = 0;
  *(unsigned char *)(v11 + 32) = a2;
  uint64_t v23 = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v8 + 40))(v8, v6, &v23);
  uint64_t v12 = v23;
  uint64_t v23 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v21);
  char v14 = v20;
  int v20 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = v19;
  unsigned int v19 = 0;
  if (v15) {
    (*((void (**)(const char **))*v15 + 1))(v15);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v24);
  uint64_t result = v18;
  unsigned int v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DownloadProxy::decideDestinationWithSuggestedFilename(WebCore::ResourceResponse const&,WTF::String &&,WTF::CompletionHandler<void ()(WTF::String,WebKit::SandboxExtensionHandle,WebKit::AllowOverwrite,WebKit::UseDownloadPlaceholder,WTF::URL const&,WTF::CompletionHandler,std::span<unsigned char const,18446744073709551615ul>,unsigned char const)> &&)::$_0::operator()(WebKit::SandboxExtensionHandle,WTF::String)::{lambda(WebKit::AllowOverwrite,WTF::URL const)#1},void,WebKit::AllowOverwrite,WTF::URL const>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E32F0;
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 24));
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9E32F0;
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 24));
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::DownloadProxy::decideDestinationWithSuggestedFilename(WebCore::ResourceResponse const&,WTF::String &&,WTF::CompletionHandler<void ()(WTF::String,WebKit::SandboxExtensionHandle,WebKit::AllowOverwrite,WebKit::UseDownloadPlaceholder,WTF::URL const&,WTF::CompletionHandler,std::span<unsigned char const,18446744073709551615ul>,unsigned char const)> &&)::$_0::operator()(WebKit::SandboxExtensionHandle,WTF::String)::{lambda(WebKit::AllowOverwrite,WTF::URL const)#1},void,WebKit::AllowOverwrite,WTF::URL const>::call(uint64_t a1, uint64_t a2, WebKit::DownloadProxy *this)
{
  WebKit::DownloadProxy::bookmarkDataForURL(this, (uint64_t)&v17);
  uint64_t v6 = v17;
  activityAccessToken(&v17);
  unsigned int v7 = v17;
  uint64_t v8 = *(WTF::StringImpl **)(a1 + 16);
  if (v8) {
    *(_DWORD *)v8 += 2;
  }
  uint64_t v9 = *(const char ***)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 32);
  unsigned int v18 = 0;
  unsigned int v19 = 0;
  uint64_t v11 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = v8;
  int v20 = 0;
  uint64_t v21 = 0;
  char v22 = v9;
  (*(void (**)(uint64_t, WTF::StringImpl **, const char ***, uint64_t, uint64_t, WebKit::DownloadProxy *, const char ***))(*(void *)v11 + 16))(v11, &v17, &v22, v10, a2, this, &v21);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v21);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v22);
  uint64_t v13 = v17;
  int v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v19);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v20);
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v15);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v16);
  if (v7) {
    WTF::fastFree(v7, v14);
  }
  if (v6) {
    WTF::fastFree(v6, v14);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v18);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          uint64_t v23 = (uint64_t *)(v14 + 16 * v21);
          uint64_t v24 = v23[1];
          v23[1] = 0;
          if (v24) {
            CFRelease(*(CFTypeRef *)(v24 + 8));
          }
          uint64_t *v23 = *v10;
          uint64_t v25 = v4 + 16 * v9;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          uint64_t v13 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (!v13) {
            goto LABEL_19;
          }
LABEL_18:
          CFRelease(*(CFTypeRef *)(v13 + 8));
          goto LABEL_19;
        }
        uint64_t v12 = v4 + 16 * v9;
        uint64_t v13 = *(void *)(v12 + 8);
        *(void *)(v12 + 8) = 0;
        if (v13) {
          goto LABEL_18;
        }
      }
LABEL_19:
      if (++v9 == v5) {
        goto LABEL_22;
      }
    }
  }
  if (v4)
  {
LABEL_22:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand()
{
  uint64_t v0 = qword_1EB359DC0;
  if (qword_1EB359DC0)
  {
    int v1 = *(_DWORD *)(qword_1EB359DC0 - 4);
    int v2 = *(_DWORD *)(qword_1EB359DC0 - 12);
    if (v1)
    {
      unsigned int v3 = v1 << (6 * v2 >= (2 * v1));
      goto LABEL_6;
    }
  }
  else
  {
    int v1 = 0;
    int v2 = 0;
  }
  unsigned int v3 = 8;
LABEL_6:
  uint64_t result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v3 + 16));
  qword_1EB359DC0 = (uint64_t)(result + 4);
  result[2] = v3 - 1;
  result[3] = v3;
  *uint64_t result = 0;
  *(_DWORD *)(qword_1EB359DC0 - 12) = v2;
  if (v1)
  {
    uint64_t v6 = 0;
    while (1)
    {
      unsigned int v7 = (uint64_t *)(v0 + 16 * v6);
      uint64_t v8 = *v7;
      if (*v7 != -1)
      {
        if (v8)
        {
          if (qword_1EB359DC0) {
            int v11 = *(_DWORD *)(qword_1EB359DC0 - 8);
          }
          else {
            int v11 = 0;
          }
          unint64_t v12 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
          unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
          unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
          unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
          int v16 = 1;
          do
          {
            unsigned int v17 = v15;
            uint64_t v18 = *(void *)(qword_1EB359DC0 + 16 * v15);
            unsigned int v15 = (v15 + v16++) & v11;
          }
          while (v18);
          unsigned int v19 = (uint64_t *)(qword_1EB359DC0 + 16 * v17);
          int v20 = (unsigned int *)v19[1];
          v19[1] = 0;
          if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v20);
            WTF::fastFree((WTF *)v20, v5);
          }
          uint64_t *v19 = *v7;
          uint64_t v21 = v0 + 16 * v6;
          uint64_t v22 = *(void *)(v21 + 8);
          *(void *)(v21 + 8) = 0;
          v19[1] = v22;
          uint64_t v10 = *(atomic_uint **)(v21 + 8);
          *(void *)(v21 + 8) = 0;
          if (!v10 || atomic_fetch_add(v10, 0xFFFFFFFF) != 1) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v9 = v0 + 16 * v6;
          uint64_t v10 = *(atomic_uint **)(v9 + 8);
          *(void *)(v9 + 8) = 0;
          if (!v10 || atomic_fetch_add(v10, 0xFFFFFFFF) != 1) {
            goto LABEL_20;
          }
        }
        atomic_store(1u, (unsigned int *)v10);
        WTF::fastFree((WTF *)v10, v5);
      }
LABEL_20:
      if (++v6 == v1) {
        goto LABEL_27;
      }
    }
  }
  if (v0)
  {
LABEL_27:
    return (_DWORD *)WTF::fastFree((WTF *)(v0 - 16), v5);
  }
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>,std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  int v6 = WTF::PairHash<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>::hash(a2);
  int v7 = *a2;
  int v8 = a2[1];
  unsigned int v9 = v6 & v5;
  uint64_t result = (unsigned __int8 *)(v2 + 24 * (v6 & v5));
  int v11 = *result;
  int v12 = result[1];
  if (v11 != v7 || v12 != v8)
  {
    int v14 = 1;
    while (v11 != 255 || v12 != 255)
    {
      unsigned int v9 = (v9 + v14) & v5;
      uint64_t result = (unsigned __int8 *)(v2 + 24 * v9);
      int v11 = *result;
      int v12 = result[1];
      ++v14;
      if (v11 == v7 && v12 == v8) {
        return result;
      }
    }
    if (*a1) {
      return (unsigned __int8 *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    }
    else {
      return 0;
    }
  }
  return result;
}

unint64_t WTF::PairHash<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>::hash(unsigned __int8 *a1)
{
  v1.i32[0] = *a1;
  v1.i32[1] = a1[1];
  int8x8_t v2 = (int8x8_t)vadd_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v1, 0xFuLL)), v1);
  int8x8_t v3 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v2, 0xAuLL), v2), (int32x2_t)0x900000009);
  int32x2_t v4 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v3, 6uLL), v3);
  int8x8_t v5 = (int8x8_t)vadd_s32(v4, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v4, 0xBuLL)));
  int32x2_t v6 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v5, 0x10uLL), v5), (int32x2_t)0x5AC73FE109132F9);
  return (0xD7862706ELL * (unint64_t)vadd_s32(vdup_lane_s32(v6, 1), v6).u32[0]) >> 4;
}

void *WTF::WeakHashMap<WebKit::WebPageProxy,unsigned int,WTF::DefaultWeakPtrImpl>::begin@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  int32x2_t v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a1);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + ++*(_DWORD *)(this + 16) = v5;
  int32x2_t v6 = *a1;
  if (*a1)
  {
    uint64_t v7 = *((unsigned int *)v6 - 1);
    int v8 = &v6[2 * v7];
  }
  else
  {
    int v8 = 0;
    uint64_t v7 = 0;
  }
  *(void *)(a2 + 24) = v8;
  *(void *)(a2 + 32) = &v6[2 * v7];
  *(_DWORD *)(a2 + ++*(_DWORD *)(this + 40) = 0;

  return WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets((void *)a2);
}

void *WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  int v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    unint64_t v13 = (uint64_t *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          int v14 = (void *)WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::lookupForReinsert(a1, v13);
          uint64_t v15 = *v14;
          *int v14 = 0;
          if (v15) {
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v15 + 16));
          }
          uint64_t v16 = *v13;
          uint64_t *v13 = 0;
          *int v14 = v16;
          uint64_t v17 = *v13;
          uint64_t *v13 = 0;
          if (v17) {
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v17 + 16));
          }
          if (v13 == a3) {
            int v11 = v14;
          }
        }
        else
        {
          uint64_t *v13 = 0;
        }
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

__n128 WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1 + 152 * *(unsigned int *)(a1 + 12);
  *(void *)uint64_t v4 = *(void *)a2;
  WTF::URL::URL(v4 + 8, (uint64_t *)(a2 + 8));
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(v4 + 48) = v5;
  *(void *)(v4 + 56) = 0;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(v4 + 56) = v6;
  *(void *)(v4 + 64) = 0;
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(v4 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(void *)(v4 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  *(void *)(v4 + 80) = v9;
  __n128 result = *(__n128 *)(a2 + 88);
  *(_OWORD *)(v4 + 97) = *(_OWORD *)(a2 + 97);
  *(__n128 *)(v4 + 88) = result;
  *(void *)(v4 + 120) = 0;
  *(void *)(v4 + 128) = 0;
  uint64_t v11 = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  *(void *)(v4 + 120) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_DWORD *)(v4 + 128) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = 0;
  *(_DWORD *)(v4 + 132) = v11;
  *(void *)(v4 + 136) = 0;
  *(void *)(v4 + 144) = 0;
  uint64_t v12 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  *(void *)(v4 + 136) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  *(_DWORD *)(v4 + 144) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 148) = 0;
  *(_DWORD *)(v4 + 148) = v12;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

WebKit::WebExtensionDataRecord *WebKit::WebExtensionDataRecord::WebExtensionDataRecord(WebKit::WebExtensionDataRecord *this, const WTF::String *a2, const WTF::String *a3)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9E3340;
  uint64_t v6 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v6 += 2;
  }
  *((void *)this + 2) = v6;
  uint64_t v7 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v7 += 2;
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = v7;
  return this;
}

uint64_t WebKit::WebExtensionDataRecord::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = WTF::equal(*(WTF **)(a1 + 16), *(const WTF::StringImpl **)(a2 + 16), a3);
  if (result)
  {
    uint64_t v7 = *(WTF **)(a1 + 24);
    uint64_t v8 = *(const WTF::StringImpl **)(a2 + 24);
    return WTF::equal(v7, v8, v6);
  }
  return result;
}

uint64_t WebKit::WebExtensionDataRecord::totalSize(WebKit::WebExtensionDataRecord *this)
{
  int32x2_t v1 = (unsigned __int8 *)*((void *)this + 4);
  if (!v1)
  {
    uint64_t v4 = 0;
    uint64_t v2 = 0;
LABEL_10:
    uint64_t v3 = &v1[16 * v2];
    goto LABEL_11;
  }
  uint64_t v2 = *((unsigned int *)v1 - 1);
  uint64_t v3 = &v1[16 * v2];
  if (!*((_DWORD *)v1 - 3))
  {
    uint64_t v4 = &v1[16 * v2];
    goto LABEL_10;
  }
  uint64_t v4 = (unsigned __int8 *)*((void *)this + 4);
  if (v2)
  {
    uint64_t v5 = 16 * v2;
    uint64_t v4 = (unsigned __int8 *)*((void *)this + 4);
    while (*v4 >= 0xFEu)
    {
      v4 += 16;
      v5 -= 16;
      if (!v5)
      {
        uint64_t v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1) {
    v1 += 16 * *((unsigned int *)v1 - 1);
  }
  if (v1 == v4) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v7 = v3;
    if (v4 + 16 != v3)
    {
      uint64_t v7 = v4 + 16;
      while (*v7 >= 0xFEu)
      {
        v7 += 16;
        if (v7 == v3)
        {
          uint64_t v7 = v3;
          break;
        }
      }
    }
    result += *((void *)v4 + 1);
    uint64_t v4 = v7;
  }
  while (v7 != v1);
  return result;
}

uint64_t WebKit::WebExtensionDataRecord::sizeOfTypes(uint64_t a1, int a2)
{
  int v2 = a2;
  if (!(_BYTE)a2) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    unsigned __int8 v6 = v2 & -(char)v2;
    v3 += WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::WebExtensionDataType>>,WebKit::WebExtensionDataType>(v4, &v6);
    v2 &= v2 - 1;
  }
  while ((_BYTE)v2);
  return v3;
}

uint64_t WebKit::WebExtensionDataRecord::types(WebKit::WebExtensionDataRecord *this)
{
  int32x2_t v1 = (unsigned __int8 *)*((void *)this + 4);
  if (!v1)
  {
    uint64_t v4 = 0;
    uint64_t v2 = 0;
LABEL_10:
    uint64_t v3 = &v1[16 * v2];
    goto LABEL_11;
  }
  uint64_t v2 = *((unsigned int *)v1 - 1);
  uint64_t v3 = &v1[16 * v2];
  if (!*((_DWORD *)v1 - 3))
  {
    uint64_t v4 = &v1[16 * v2];
    goto LABEL_10;
  }
  uint64_t v4 = (unsigned __int8 *)*((void *)this + 4);
  if (v2)
  {
    uint64_t v5 = 16 * v2;
    uint64_t v4 = (unsigned __int8 *)*((void *)this + 4);
    while (*v4 >= 0xFEu)
    {
      v4 += 16;
      v5 -= 16;
      if (!v5)
      {
        uint64_t v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1) {
    v1 += 16 * *((unsigned int *)v1 - 1);
  }
  if (v1 == v4) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    uint64_t v8 = v4 + 16;
    int v7 = *v4;
    uint64_t v4 = v3;
    if (v8 != v3)
    {
      uint64_t v4 = v8;
      while (*v4 >= 0xFEu)
      {
        v4 += 16;
        if (v4 == v3)
        {
          uint64_t v4 = v3;
          break;
        }
      }
    }
    uint64_t result = v7 | result;
  }
  while (v4 != v1);
  return result;
}

unsigned int *WebKit::GPUProcessProxy::keepProcessAliveTemporarily(unsigned int *this)
{
  {
    if (WebKit::singleton(void)::singleton)
    {
      uint64_t v1 = *(void *)(WebKit::singleton(void)::singleton + 8);
      if (v1)
      {
        {
          WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy = 0;
        }
        atomic_fetch_add((atomic_uint *volatile)(v1 + 16), 1u);
        uint64_t v2 = WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy;
        WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy = v1;
        if (v2) {
          this = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
        }
        {
          uint64_t v3 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)this);
          uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
          *uint64_t v4 = &unk_1EE9E3678;
          uint64_t v5 = (void *)WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)&WebKit::GPUProcessProxy::keepProcessAliveTemporarily(void)::releaseGPUProcessTimer, v3);
          *uint64_t v5 = &unk_1EE9B3390;
          v5[3] = v4;
        }
        return (unsigned int *)WTF::RunLoop::TimerBase::start();
      }
    }
  }
  else
  {
    WebKit::singleton(void)::singleton = 0;
  }
  return this;
}

void WebKit::GPUProcessProxy::~GPUProcessProxy(WebKit::GPUProcessProxy *this, void *a2)
{
  uint64_t v3 = *((void *)this + 58);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v4 = (unsigned int **)*((void *)this + 55);
  if (v4) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *((unsigned int *)this + 106);
  if (v5 != -1) {
    ((void (*)(char *, char *))off_1EE9E3628[v5])(&v6, (char *)this + 416);
  }
  *((_DWORD *)this + 106) = -1;
  WebKit::AuxiliaryProcessProxy::~AuxiliaryProcessProxy(this);
}

void non-virtual thunk to'WebKit::GPUProcessProxy::~GPUProcessProxy(WebKit::GPUProcessProxy *this, void *a2)
{
}

{
  WebKit::GPUProcessProxy::~GPUProcessProxy((WebKit::GPUProcessProxy *)((char *)this - 32), a2);
}

{
  WebKit::GPUProcessProxy::operator delete((WebKit::GPUProcessProxy *)((char *)this - 24), a2);
}

{
  WebKit::GPUProcessProxy::operator delete((WebKit::GPUProcessProxy *)((char *)this - 32), a2);
}

double WebKit::GPUProcessProxy::operator delete(WebKit::GPUProcessProxy *a1, void *a2)
{
  WebKit::GPUProcessProxy::~GPUProcessProxy(a1, a2);
  if (atomic_load((unsigned int *)(v2 + 48)))
  {
    *(void *)(v2 + 464) = 0;
    double result = 0.0;
    *(_OWORD *)(v2 + 432) = 0u;
    *(_OWORD *)(v2 + 448) = 0u;
    *(_OWORD *)(v2 + 400) = 0u;
    *(_OWORD *)(v2 + 4++*(_DWORD *)(this + 16) = 0u;
    *(_OWORD *)(v2 + 368) = 0u;
    *(_OWORD *)(v2 + 384) = 0u;
    *(_OWORD *)(v2 + 336) = 0u;
    *(_OWORD *)(v2 + 352) = 0u;
    *(_OWORD *)(v2 + 304) = 0u;
    *(_OWORD *)(v2 + 320) = 0u;
    *(_OWORD *)(v2 + 272) = 0u;
    *(_OWORD *)(v2 + 288) = 0u;
    *(_OWORD *)(v2 + 2++*(_DWORD *)(this + 40) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + ++*(_DWORD *)(this + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetMockCaptureDevicesEnabled>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 82;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetOrientationForMediaCapture>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 85;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::Encoder::operator<<<int>(v8, *a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unsigned char *WebKit::GPUProcessProxy::updateSandboxAccess(unsigned char *this, void *a2, int a3)
{
  if (this[432]) {
    return this;
  }
  char v3 = (char)a2;
  uint64_t v4 = this;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if (!a3)
  {
    if (!a2) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (!this[458])
  {
    WebKit::SandboxExtension::createHandleForGenericExtension((uint64_t)"com.apple.webkit.camera", &v26);
    int v9 = v27;
    if (v27)
    {
      uint64_t v18 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v23, HIDWORD(v24) + 1, (unint64_t)&v26);
      uint64_t v19 = HIDWORD(v24);
      uint64_t v20 = v23;
      uint64_t v21 = *v18;
      uint64_t *v18 = 0;
      *(void *)(v20 + 8 * v19) = v21;
      HIDWORD(v24) = v19 + 1;
    }
    else
    {
      uint64_t v15 = qword_1EB358820;
      if (!os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR)) {
        goto LABEL_4;
      }
      *(_WORD *)unint64_t v29 = 0;
      _os_log_error_impl(&dword_1985F2000, v15, OS_LOG_TYPE_ERROR, "Unable to create com.apple.webkit.camera sandbox extension", v29, 2u);
    }
    if (v27)
    {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v26);
      if (!v9) {
        goto LABEL_4;
      }
    }
    else if (!v9)
    {
      goto LABEL_4;
    }
    v4[458] = 1;
  }
LABEL_4:
  if ((v3 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_7:
  if (v4[459]) {
    goto LABEL_8;
  }
  WebKit::SandboxExtension::createHandleForGenericExtension((uint64_t)"com.apple.webkit.microphone", &v26);
  int v10 = v27;
  if (v27)
  {
    uint64_t v11 = HIDWORD(v24);
    if (HIDWORD(v24) == v24)
    {
      uint64_t v22 = (const char ***)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v23, HIDWORD(v24) + 1, (unint64_t)&v26);
      uint64_t v11 = HIDWORD(v24);
      uint64_t v12 = v23;
      unint64_t v13 = *v22;
      *uint64_t v22 = 0;
    }
    else
    {
      uint64_t v12 = v23;
      unint64_t v13 = v26;
      uint64_t v26 = 0;
    }
    *(void *)(v12 + 8 * v11) = v13;
    HIDWORD(v24) = v11 + 1;
  }
  else
  {
    uint64_t v16 = qword_1EB358820;
    if (!os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    *(_WORD *)unint64_t v29 = 0;
    _os_log_error_impl(&dword_1985F2000, v16, OS_LOG_TYPE_ERROR, "Unable to create com.apple.webkit.microphone sandbox extension", v29, 2u);
  }
  if (!v27)
  {
    if (!v10) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v26);
  if (v10) {
LABEL_31:
  }
    v4[459] = 1;
LABEL_8:
  if (!v4[457])
  {
    LOBYTE(v26) = 0;
    char v28 = 0;
    WebKit::SandboxExtension::createHandleForMachLookup((uint64_t)"com.apple.tccd", (uint64_t)&v26, 0, v29);
    int v5 = v30;
    if (v30)
    {
      uint64_t v6 = HIDWORD(v24);
      if (HIDWORD(v24) == v24)
      {
        char v17 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v23, HIDWORD(v24) + 1, (unint64_t)v29);
        uint64_t v6 = HIDWORD(v24);
        uint64_t v7 = v23;
        uint64_t v8 = *v17;
        uint64_t *v17 = 0;
      }
      else
      {
        uint64_t v7 = v23;
        uint64_t v8 = *(void *)v29;
        *(void *)unint64_t v29 = 0;
      }
      *(void *)(v7 + 8 * v6) = v8;
      HIDWORD(v24) = v6 + 1;
    }
    else
    {
      int v14 = qword_1EB358820;
      if (!os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR)) {
        goto LABEL_9;
      }
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v14, OS_LOG_TYPE_ERROR, "Unable to create com.apple.tccd sandbox extension", buf, 2u);
    }
    if (v30)
    {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v29);
      if (!v5) {
        goto LABEL_9;
      }
    }
    else if (!v5)
    {
      goto LABEL_9;
    }
    v4[457] = 1;
  }
LABEL_9:
  if (HIDWORD(v24))
  {
    uint64_t v26 = (const char **)&v23;
    WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::UpdateSandboxAccess>((uint64_t)v4, (uint64_t *)&v26, 0, 0);
  }
  return (unsigned char *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, a2);
}

uint64_t WebKit::GPUProcessProxy::updateCaptureAccess(unsigned char *a1, void *a2, int a3, char a4, uint64_t a5, uint64_t *a6)
{
  char v8 = a3;
  char v9 = (char)a2;
  uint64_t v14 = a5;
  WebKit::GPUProcessProxy::updateSandboxAccess(a1, a2, a3);
  v12[0] = v9;
  v12[1] = v8;
  int v12[2] = a4;
  unint64_t v13 = &v14;
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::GPUProcess::UpdateCaptureAccess,WTF::CompletionHandler<void ()(void)>>((uint64_t)a1, v12, a6, 0, 0, 1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::GPUProcess::UpdateCaptureAccess,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 89;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<BOOL,BOOL,BOOL,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,BOOL,BOOL,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,0ul,1ul,2ul,3ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E36C8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::UpdateCaptureOrigin>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 90;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v8, *(void *)a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *(uint64_t **)(a2 + 8));
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::AddMockMediaDevice>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 69;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::MockMediaDevice,void>::encode(v8, *a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::ClearMockMediaDevices>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 71;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::RemoveMockMediaDevice>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 76;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetMockMediaDeviceIsEphemeral>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 84;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,BOOL>,0ul,1ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::ResetMockMediaDevices>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 79;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetMockCaptureDevicesInterrupted>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 83;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  char v24 = v8;
  char v9 = *a2;
  uint64_t v10 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (!v11 || (*v10 = v9, char v12 = a2[1], v13 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1), !v14))
  {
    __break(0xC471u);
    JUMPOUT(0x198FA309CLL);
  }
  unsigned char *v13 = v12;
  LOBYTE(v22) = 0;
  char v23 = 0;
  uint64_t v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a4, (uint64_t)&v22, 1);
  if (v23)
  {
    uint64_t v17 = v22;
    uint64_t v22 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  return v16;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::TriggerMockCaptureConfigurationChange>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 88;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  char v24 = v8;
  char v9 = *a2;
  uint64_t v10 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (!v11 || (*v10 = v9, char v12 = a2[1], v13 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1), !v14))
  {
    __break(0xC471u);
    JUMPOUT(0x198FA3210);
  }
  unsigned char *v13 = v12;
  LOBYTE(v22) = 0;
  char v23 = 0;
  uint64_t v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a4, (uint64_t)&v22, 1);
  if (v23)
  {
    uint64_t v17 = v22;
    uint64_t v22 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  return v16;
}

uint64_t WebKit::GPUProcessProxy::setShouldListenToVoiceActivity(WebKit::GPUProcessProxy *this, const WebKit::WebPageProxy *a2, int a3)
{
  uint64_t v4 = (void **)((char *)this + 440);
  if (a3)
  {
    uint64_t result = (uint64_t)WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)this + 440, (unsigned int *)a2, (uint64_t)&v19);
    if (*((unsigned char *)this + 456)) {
      return result;
    }
  }
  else
  {
    uint64_t result = WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)this + 440, a2);
    if (!*((unsigned char *)this + 456)) {
      return result;
    }
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v4, &v19);
  uint64_t v6 = *v4;
  if (*v4)
  {
    uint64_t v7 = *((unsigned int *)v6 - 1);
    char v8 = &v6[v7];
  }
  else
  {
    char v8 = 0;
    uint64_t v7 = 0;
  }
  uint64_t v14 = v4;
  uint64_t v15 = v8;
  uint64_t v16 = v8;
  uint64_t v17 = v8;
  uint64_t v18 = &v6[v7];
  uint64_t result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
  char v9 = v20;
  if (v20 == v15)
  {
    int v13 = 0;
  }
  else
  {
    do
    {
      uint64_t v10 = *(void *)(*v9 + 8);
      if (v10) {
        uint64_t v11 = v10 - 16;
      }
      else {
        uint64_t v11 = 0;
      }
      int v12 = *(unsigned __int8 *)(v11 + 568);
      int v13 = v12 != 0;
      if (v12) {
        break;
      }
      uint64_t result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v19);
      char v9 = v20;
    }
    while (v20 != v15);
  }
  if (*((unsigned __int8 *)this + 456) != v13)
  {
    *((unsigned char *)this + 456) = v13;
    LOBYTE(v19) = v13;
    return WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetShouldListenToVoiceActivity>((uint64_t)this, (char *)&v19, 0, 0);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetShouldListenToVoiceActivity>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 86;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  int v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unsigned int *WebKit::GPUProcessProxy::processWillShutDown(WebKit::GPUProcessProxy *this, IPC::Connection *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  char v3 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 134217984;
    char v8 = this;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - GPUProcessProxy::processWillShutDown:", (uint8_t *)&v7, 0xCu);
  }
  {
    uint64_t result = (unsigned int *)WebKit::singleton(void)::singleton;
    if (WebKit::singleton(void)::singleton) {
      uint64_t v6 = *(WebKit::GPUProcessProxy **)(WebKit::singleton(void)::singleton + 8);
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t result = 0;
    uint64_t v6 = 0;
    WebKit::singleton(void)::singleton = 0;
  }
  if (v6 == this)
  {
    WebKit::singleton(void)::singleton = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v4);
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::GPUProcess::SharedPreferencesForWebProcessDidChange,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  int v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v12 = 87;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::SharedPreferencesForWebProcess,void>::encode(v12, *(void *)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E3718;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

unsigned int *WebKit::GPUProcessProxy::gpuProcessExited(uint64_t a1, unsigned int a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)(a1 + 16);
  atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 1u);
  int v5 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134218242;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = WebKit::processTerminationReasonToString();
    _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "%p - GPUProcessProxy::gpuProcessExited: reason=%{public}s", buf, 0x16u);
  }
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v27);
  if (v28)
  {
    int v7 = (WebKit *)WebKit::WebProcessPool::extensionCapabilityGranter(*v27);
    uint64_t v25 = *(void **)(a1 + 392);
    *(void *)(a1 + 392) = 0;
    char v8 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(&v25);
    if (v25)
    {
      unsigned int v10 = *((_DWORD *)v25 - 1);
      uint64_t v11 = &v25[3 * v10];
    }
    else
    {
      uint64_t v11 = 0;
      unsigned int v10 = 0;
    }
    *(void *)long long buf = &v25;
    *(void *)&uint8_t buf[8] = v8;
    *(void *)&uint8_t buf[16] = v9;
    unsigned __int8 v30 = v11;
    unint64_t v31 = &v25[3 * v10];
    v26[0] = 0;
    v26[1] = 0;
    WTF::Mapper<WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::moveToVectorOf<WebKit::ExtensionCapabilityGrant,WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &>(WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &)::{lambda(WebKit::ExtensionCapabilityGrant&&)#1},WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &,void>::map((uint64_t)v26, (uint64_t **)buf);
    WebKit::ExtensionCapabilityGranter::invalidateGrants(v7, (uint64_t)v26);
    WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v12);
    if (v25) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v25, v6);
    }
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v6);
  {
    uint64_t v14 = WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy;
  }
  else
  {
    uint64_t v14 = 0;
    WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy = 0;
  }
  if (v14 == a1)
  {
    WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy = 0;
    if (a1) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
    }
  }
  {
    uint64_t v15 = (unsigned int *)WebKit::singleton(void)::singleton;
    if (WebKit::singleton(void)::singleton) {
      uint64_t v16 = *(void *)(WebKit::singleton(void)::singleton + 8);
    }
    else {
      uint64_t v16 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    WebKit::singleton(void)::singleton = 0;
  }
  if (v16 == a1)
  {
    WebKit::singleton(void)::singleton = 0;
    if (v15)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v13);
      }
    }
  }
  WebKit::WebProcessPool::allProcessPools((uint64_t)buf);
  if (*(_DWORD *)&buf[12])
  {
    uint64_t v18 = *(uint64_t **)buf;
    uint64_t v19 = 8 * *(unsigned int *)&buf[12];
    do
    {
      uint64_t v20 = *(void *)(a1 + 136);
      if (v20) {
        uint64_t v21 = *(unsigned int *)(v20 + 108);
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v22 = *v18++;
      WebKit::WebProcessPool::gpuProcessExited(v22, v21, a2);
      v19 -= 8;
    }
    while (v19);
    WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v23);
  }
  else
  {
    uint64_t result = (unsigned int *)WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v17);
    if (!a1) {
      return result;
    }
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
}

unsigned int *WebKit::GPUProcessProxy::processIsReadyToExit(WebKit::GPUProcessProxy *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 134217984;
    int v5 = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - GPUProcessProxy::processIsReadyToExit:", (uint8_t *)&v4, 0xCu);
  }
  WebKit::AuxiliaryProcessProxy::terminate(this);
  return WebKit::GPUProcessProxy::gpuProcessExited((uint64_t)this, 3u);
}

unsigned int *WebKit::GPUProcessProxy::childConnectionDidBecomeUnresponsive(WebKit::GPUProcessProxy *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    int v4 = 134217984;
    int v5 = this;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "%p - GPUProcessProxy::childConnectionDidBecomeUnresponsive:", (uint8_t *)&v4, 0xCu);
  }
  return WebKit::GPUProcessProxy::didBecomeUnresponsive(this);
}

unsigned int *WebKit::GPUProcessProxy::didBecomeUnresponsive(WebKit::GPUProcessProxy *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *((void *)this + 17);
    if (v4) {
      LODWORD(v4) = *(_DWORD *)(v4 + 108);
    }
    int v5 = 134218240;
    uint64_t v6 = this;
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "%p - GPUProcessProxy::didBecomeUnresponsive: GPUProcess with PID %d became unresponsive, terminating it", (uint8_t *)&v5, 0x12u);
  }
  WebKit::AuxiliaryProcessProxy::terminate(this);
  return WebKit::GPUProcessProxy::gpuProcessExited((uint64_t)this, 4u);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::GPUProcess::WebProcessConnectionCountForTesting,WTF::CompletionHandler<void ()(unsigned long long)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 94;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v13 = &unk_1EE9E3740;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

unsigned int *WebKit::GPUProcessProxy::didClose(WebKit::GPUProcessProxy *this, IPC::Connection *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  char v3 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    int v5 = 134217984;
    uint64_t v6 = this;
    _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "%p - GPUProcessProxy::didClose:", (uint8_t *)&v5, 0xCu);
  }
  return WebKit::GPUProcessProxy::gpuProcessExited((uint64_t)this, 5u);
}

unsigned int *non-virtual thunk to'WebKit::GPUProcessProxy::didClose(WebKit::GPUProcessProxy *this, IPC::Connection *a2)
{
  return WebKit::GPUProcessProxy::didClose((WebKit::GPUProcessProxy *)((char *)this - 32), a2);
}

unsigned int *WebKit::GPUProcessProxy::didReceiveInvalidMessage(WebKit::AuxiliaryProcessProxy *a1, uint64_t a2, WTF::StringImpl *a3)
{
  WebKit::AuxiliaryProcessProxy::logInvalidMessage(a1, a2, a3);
  WebKit::WebProcessPool::didReceiveInvalidMessage(a3);
  WebKit::AuxiliaryProcessProxy::terminate(a1);

  return WebKit::GPUProcessProxy::didClose(a1, v5);
}

unsigned int *non-virtual thunk to'WebKit::GPUProcessProxy::didReceiveInvalidMessage(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  return WebKit::GPUProcessProxy::didReceiveInvalidMessage((WebKit::AuxiliaryProcessProxy *)(a1 - 32), a2, a3);
}

void *WebKit::GPUProcessProxy::removeSession(void *result, uint64_t a2)
{
  uint64_t v2 = (uint64_t)result;
  uint64_t v7 = a2;
  uint64_t v3 = result[17];
  if (v3 && *(unsigned char *)(v3 + 104) || result[18])
  {
    uint64_t result = (void *)WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(result + 58, &v7);
    uint64_t v4 = *(void *)(v2 + 464);
    if (v4)
    {
      int v5 = (void *)(v4 + 8 * *(unsigned int *)(v4 - 4));
      if (v5 == result) {
        return result;
      }
    }
    else
    {
      if (!result) {
        return result;
      }
      int v5 = 0;
    }
    if (v5 != result) {
      WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::remove((uint64_t *)(v2 + 464), result);
    }
    uint64_t v6 = &v7;
    return (void *)WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::RemoveSession>(v2, &v6, 0, 0);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::RemoveSession>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 77;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

IPC::Encoder *WebKit::GPUProcessProxy::sendPrepareToSuspend(uint64_t a1, char a2, uint64_t *a3, double a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v8 = qword_1EB358348;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = a1;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - GPUProcessProxy::sendPrepareToSuspend:", (uint8_t *)&buf, 0xCu);
  }
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
  double v20 = v10 + a4;
  LOBYTE(v21[0]) = a2;
  v21[1] = &v20;
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 74;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v22 = v11;
  IPC::ArgumentCoder<std::tuple<BOOL,WTF::MonotonicTime const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::MonotonicTime const&>,0ul,1ul>(v11, v21);
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v13 = &unk_1EE9E3768;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)&long long buf = v13;
  *((void *)&buf + 1) = v14;
  char v24 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v22, 0, (uint64_t)&buf, 0);
  if (v24)
  {
    uint64_t v16 = buf;
    *(void *)&long long buf = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  uint64_t result = v22;
  uint64_t v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

void WebKit::GPUProcessProxy::sendProcessDidResume(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = a1;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - GPUProcessProxy::sendProcessDidResume:", buf, 0xCu);
  }
  uint64_t v3 = *(void *)(a1 + 136);
  if (v3 && *(unsigned char *)(v3 + 104) || *(void *)(a1 + 144))
  {
    uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v4 = 75;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    double v10 = v4;
    buf[0] = 0;
    char v12 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v10, 0, (uint64_t)buf, 1);
    if (v12)
    {
      uint64_t v6 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
    uint64_t v7 = v10;
    double v10 = 0;
    if (v7)
    {
      IPC::Encoder::~Encoder(v7, v5);
      WTF::fastFree(v8, v9);
    }
  }
}

unsigned int *WebKit::GPUProcessProxy::terminateWebProcess(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)&v6[4] = a2;
    _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "GPUProcessProxy::terminateWebProcess: webProcessIdentifier=%llu", v6, 0xCu);
  }
  *(void *)uint64_t v6 = a2;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  uint64_t result = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, v6);
  if (result)
  {
    int v5 = result + 4;
    atomic_fetch_add((atomic_uint *volatile)result + 4, 1u);
    WebKit::WebProcessProxy::requestTermination(result, 9);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::GPUProcess::RequestBitmapImageForCurrentTime,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  char v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v12 = 78;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E3790;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WebKit::GPUProcessProxy::voiceActivityDetected(WebKit::GPUProcessProxy *this)
{
  uint64_t v2 = (char *)this + 440;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 55, &v14);
  uint64_t v3 = *((void *)this + 55);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = v3 + 8 * v4;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  BOOL v9 = v2;
  uint64_t v10 = v5;
  uint64_t v11 = v5;
  uint64_t v12 = v5;
  uint64_t v13 = v3 + 8 * v4;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    uint64_t v7 = *(void *)(*(void *)v15 + 8);
    if (v7) {
      uint64_t v8 = v7 - 16;
    }
    else {
      uint64_t v8 = 0;
    }
    CFRetain(*(CFTypeRef *)(v8 + 8));
    char v16 = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::VoiceActivityDetected>(*(void *)(v8 + 256), (uint64_t)&v16, *(void *)(*(void *)(v8 + 32) + 1928), 0);
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 - 8));
    }
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

void WebKit::GPUProcessProxy::startMonitoringCaptureDeviceRotation(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  WebKit::WebProcessProxy::webPage(a2, &v7);
  uint64_t v5 = v7;
  if (v7)
  {
    WebKit::WebPageProxy::startMonitoringCaptureDeviceRotation(v7, a3, v4);
    uint64_t v6 = (const void *)*((void *)v5 + 1);
    CFRelease(v6);
  }
}

void WebKit::GPUProcessProxy::stopMonitoringCaptureDeviceRotation(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  WebKit::WebProcessProxy::webPage(a2, &v7);
  uint64_t v5 = v7;
  if (v7)
  {
    WebKit::WebPageProxy::stopMonitoringCaptureDeviceRotation(v7, a3, v4);
    uint64_t v6 = (const void *)*((void *)v5 + 1);
    CFRelease(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::RotationAngleForCaptureDeviceChanged>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 81;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v8, *(_WORD *)(a2 + 8));
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::GPUProcessProxy::statusBarWasTapped(uint64_t a1, uint64_t *a2)
{
  WebKit::WebProcessProxy::audioCapturingWebPage(&v7);
  uint64_t v3 = v7;
  if (v7)
  {
    WebKit::WebPageProxy::statusBarWasTapped(v7);
    CFRelease(*((CFTypeRef *)v3 + 1));
  }
  uint64_t v4 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void WebKit::UIGamepad::updateFromPlatformGamepad(WebKit::UIGamepad *this, WebCore::PlatformGamepad *a2)
{
  uint64_t v4 = (unsigned int *)(*(uint64_t (**)(WebCore::PlatformGamepad *))(*(void *)a2 + 24))(a2);
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 24, v4);
  uint64_t v5 = (unsigned int *)(*(uint64_t (**)(WebCore::PlatformGamepad *))(*(void *)a2 + 32))(a2);
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 40, v5);
  *((double *)this + 7) = (*(double (**)(WebCore::PlatformGamepad *))(*(void *)a2 + 16))(a2);
}

uint64_t WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t result, unsigned int *a2)
{
  uint64_t v2 = result;
  if (a2 == (unsigned int *)result) {
    return v2;
  }
  uint64_t v4 = *(unsigned int *)(result + 12);
  uint64_t v5 = a2[3];
  if (v4 > v5)
  {
    WTF::VectorDestructor<true,WebCore::SharedGamepadValue>::destruct((WTF *)(*(void *)result + 8 * v5), (void *)(*(void *)result + 8 * v4));
    *(_DWORD *)(v2 + 12) = v5;
    LODWORD(v4) = v5;
LABEL_24:
    uint64_t v16 = *(WTF ***)a2;
    if (v4)
    {
      char v17 = *(WTF ***)v2;
      uint64_t v18 = 8 * v4;
      do
      {
        uint64_t v19 = *v16;
        *(_DWORD *)uint64_t v19 = *(_DWORD *)*v16 + 1;
        double v20 = *v17;
        void *v17 = v19;
        if (v20)
        {
          if (*(_DWORD *)v20 == 1) {
            WTF::fastFree(v20, a2);
          }
          else {
            --*(_DWORD *)v20;
          }
        }
        ++v16;
        ++v17;
        v18 -= 8;
      }
      while (v18);
      uint64_t v16 = *(WTF ***)a2;
      unsigned int v21 = *(_DWORD *)(v2 + 12);
    }
    else
    {
      unsigned int v21 = 0;
    }
    uint64_t v22 = a2[3];
    if (v21 != v22)
    {
      char v23 = (void *)(*(void *)v2 + 8 * v21);
      char v24 = &v16[v21];
      uint64_t v25 = 8 * v22 - 8 * v21;
      do
      {
        uint64_t v26 = *v24++;
        ++*v26;
        *v23++ = v26;
        v25 -= 8;
      }
      while (v25);
    }
    *(_DWORD *)(v2 + 12) = v22;
    return v2;
  }
  unsigned int v6 = *(_DWORD *)(result + 8);
  if (v5 <= v6) {
    goto LABEL_24;
  }
  if (v6)
  {
    if (v4)
    {
      WTF::VectorDestructor<true,WebCore::SharedGamepadValue>::destruct(*(WTF **)result, (void *)(*(void *)result + 8 * v4));
      *(_DWORD *)(v2 + 12) = 0;
    }
    uint64_t result = *(void *)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      uint64_t result = WTF::fastFree((WTF *)result, a2);
    }
  }
  uint64_t v7 = a2[3];
  if (*(_DWORD *)(v2 + 8) >= v7)
  {
LABEL_23:
    LODWORD(v4) = *(_DWORD *)(v2 + 12);
    goto LABEL_24;
  }
  if (!(v7 >> 29))
  {
    uint64_t v8 = *(WTF **)v2;
    uint64_t v9 = *(unsigned int *)(v2 + 12);
    uint64_t v10 = WTF::fastMalloc((WTF *)(8 * v7));
    *(_DWORD *)(v2 + 8) = v7;
    *(void *)uint64_t v2 = v10;
    if (v9)
    {
      uint64_t v11 = (void *)v10;
      uint64_t v12 = 8 * v9;
      uint64_t v13 = (WTF **)v8;
      do
      {
        uint64_t v14 = *v13;
        void *v13 = 0;
        void *v11 = v14;
        uint64_t v15 = *v13;
        void *v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 1) {
            WTF::fastFree(v15, a2);
          }
          else {
            --*(_DWORD *)v15;
          }
        }
        ++v11;
        ++v13;
        v12 -= 8;
      }
      while (v12);
    }
    if (v8)
    {
      if (*(WTF **)v2 == v8)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v8, a2);
    }
    goto LABEL_23;
  }
  __break(0xC471u);
  return result;
}

WebKit::UIGamepadProvider *WebKit::UIGamepadProvider::UIGamepadProvider(WebKit::UIGamepadProvider *this)
{
  *(void *)this = &unk_1EE9E3508;
  *((void *)this + 1) = 0;
  uint64_t v2 = (WebKit::UIGamepadProvider *)((char *)this + 48);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  uint64_t v3 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v4 = &unk_1EE9E37B8;
  v4[1] = WebKit::UIGamepadProvider::gamepadSyncTimerFired;
  v4[2] = 0;
  v4[3] = this;
  WTF::RunLoop::TimerBase::TimerBase(v2, v3);
  *((void *)this + 6) = &unk_1EE9B3390;
  *((void *)this + 9) = v4;
  *((_WORD *)this + ++*(_DWORD *)(this + 40) = 0;
  WebKit::UIGamepadProvider::platformSetDefaultGamepadProvider(this);
  return this;
}

void WebKit::UIGamepadProvider::gamepadSyncTimerFired(WebKit::UIGamepadProvider *this)
{
  uint64_t v2 = WebKit::UIGamepadProvider::platformWebPageProxyForGamepadInput(this);
  if (v2)
  {
    uint64_t v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    uint64_t v4 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get(*(void *)(v3 + 48) + 24);
    if (WTF::WeakHashSet<WebKit::WebProcessPool,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessPool>((uint64_t)this + 16, v4))
    {
      WebKit::UIGamepadProvider::snapshotGamepads((uint64_t)this, (uint64_t)v7);
      char v5 = *((unsigned char *)this + 81);
      uint64_t v8 = v7;
      char v9 = v5;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GamepadActivity>(*(void *)(v3 + 256), (uint64_t)&v8, *(void *)(*(void *)(v3 + 32) + 1928), 0);
      WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v6);
      *((unsigned char *)this + 81) = 0;
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void WebKit::UIGamepadProvider::~UIGamepadProvider(WebKit::UIGamepadProvider *this)
{
  uint64_t v2 = (unsigned int ***)((char *)this + 16);
  BOOL isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 2);
  if (!isEmptyIgnoringNullReferences)
  {
    uint64_t v4 = WebCore::GamepadProvider::singleton((WebCore::GamepadProvider *)isEmptyIgnoringNullReferences);
    (*(void (**)(uint64_t, WebKit::UIGamepadProvider *))(*(void *)v4 + 24))(v4, this);
  }
  *((void *)this + 6) = &unk_1EE9B3390;
  uint64_t v5 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::UIGamepadProvider *)((char *)this + 48));
  uint64_t v7 = *((unsigned int *)this + 11);
  if (v7)
  {
    uint64_t v8 = (WTF **)*((void *)this + 4);
    uint64_t v9 = 8 * v7;
    do
    {
      uint64_t v10 = *v8;
      unsigned char *v8 = 0;
      if (v10) {
        std::default_delete<WebKit::UIGamepad>::operator()[abi:sn180100](v10, v6);
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  uint64_t v11 = (WTF *)*((void *)this + 4);
  if (v11)
  {
    *((void *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v11, v6);
  }
  if (*v2) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v2, v6);
  }
  uint64_t v12 = *((void *)this + 1);
  if (v12)
  {
    *(void *)(v12 + 8) = 0;
    uint64_t v13 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v13)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v6);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  uint64_t vars8;

  WebKit::UIGamepadProvider::~UIGamepadProvider(this);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::UIGamepadProvider::snapshotGamepads@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *(unsigned int *)(this + 44);
  if (v3)
  {
    if (v3 >= 0x3333334)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v4 = this;
      int v5 = 80 * v3;
      this = WTF::fastMalloc((WTF *)(80 * v3));
      *(_DWORD *)(a2 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
      *(void *)a2 = this;
      if (*(_DWORD *)(v4 + 44))
      {
        unint64_t v7 = 0;
        uint64_t v8 = (unsigned char *)(this + 72);
        do
        {
          uint64_t v9 = *(void *)(*(void *)(v4 + 32) + 8 * v7);
          if (v9)
          {
            WebKit::GamepadData::GamepadData((uint64_t)&v24, *(_DWORD *)v9, (_DWORD **)(v9 + 8), (_DWORD **)(v9 + 16), (uint64_t *)(v9 + 24), (uint64_t *)(v9 + 40), (unsigned __int8 **)(v9 + 64), *(double *)(v9 + 56));
            int v15 = v24;
            long long v16 = v25;
            uint64_t v17 = v26;
            uint64_t v18 = v27;
            uint64_t v19 = v28;
            uint64_t v20 = v29;
            uint64_t v21 = v30;
            uint64_t v22 = v31;
            char v23 = 1;
            *((_DWORD *)v8 - 18) = v24;
            uint64_t v10 = v16;
            *(void *)&long long v16 = 0;
            *((void *)v8 - 8) = v10;
            uint64_t v11 = *((void *)&v16 + 1);
            *((void *)&v16 + 1) = 0;
            *((void *)v8 - 7) = v11;
            uint64_t v12 = v17;
            uint64_t v17 = 0;
            *((void *)v8 - 6) = v12;
            LODWORD(v12) = v18;
            LODWORD(v18) = 0;
            *((_DWORD *)v8 - 10) = v12;
            LODWORD(v12) = HIDWORD(v18);
            HIDWORD(v18) = 0;
            *((_DWORD *)v8 - 9) = v12;
            uint64_t v13 = v19;
            uint64_t v19 = 0;
            *((void *)v8 - 4) = v13;
            LODWORD(v13) = v20;
            LODWORD(v20) = 0;
            *((_DWORD *)v8 - 6) = v13;
            LODWORD(v13) = HIDWORD(v20);
            HIDWORD(v20) = 0;
            *((_DWORD *)v8 - 5) = v13;
            *((void *)v8 - 2) = v21;
            uint64_t v14 = v22;
            uint64_t v22 = 0;
            *((void *)v8 - 1) = v14;
            unsigned char *v8 = 1;
          }
          else
          {
            LOBYTE(v15) = 0;
            char v23 = 0;
            *(v8 - 72) = 0;
            unsigned char *v8 = 0;
          }
          *(_DWORD *)(a2 + 12) = ++v7;
          this = std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v6);
          v8 += 80;
        }
        while (v7 < *(unsigned int *)(v4 + 44));
      }
    }
  }
  return this;
}

uint64_t WebKit::UIGamepadProvider::scheduleGamepadStateSync(uint64_t this)
{
  if (*(unsigned char *)(this + 80))
  {
    uint64_t v1 = this;
    uint64_t v2 = (WTF::RunLoop::TimerBase *)(this + 48);
    this = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(this + 48));
    if ((this & 1) == 0)
    {
      if (*(_DWORD *)(v1 + 44)
        && !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(v1 + 16)))
      {
        return WTF::RunLoop::TimerBase::start();
      }
      else
      {
        return WTF::RunLoop::TimerBase::stop(v2);
      }
    }
  }
  return this;
}

void *WebKit::UIGamepadProvider::platformGamepadConnected(uint64_t a1, unsigned int *a2, char a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 44);
  unsigned int v7 = a2[8];
  if (v6 <= v7)
  {
    unint64_t v8 = v7 + 1;
    unint64_t v9 = *(unsigned int *)(a1 + 40);
    if (v9 < v8)
    {
      unint64_t v10 = v9 + (v9 >> 2);
      if (v10 >= 0x10) {
        unint64_t v11 = v10 + 1;
      }
      else {
        unint64_t v11 = 16;
      }
      if (v11 <= v8) {
        unint64_t v12 = v8;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12 >> 29)
      {
        __break(0xC471u);
LABEL_38:
        JUMPOUT(0x198FA532CLL);
      }
      uint64_t v13 = *(void **)(a1 + 32);
      uint64_t v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
      *(_DWORD *)(a1 + ++*(_DWORD *)(this + 40) = v12;
      *(void *)(a1 + 32) = v14;
      memcpy(v14, v13, 8 * v6);
      if (v13)
      {
        if (*(void **)(a1 + 32) == v13)
        {
          *(void *)(a1 + 32) = 0;
          *(_DWORD *)(a1 + ++*(_DWORD *)(this + 40) = 0;
        }
        WTF::fastFree((WTF *)v13, v15);
      }
    }
    uint64_t v16 = *(void *)(a1 + 32);
    if (v16) {
      bzero((void *)(v16 + 8 * *(unsigned int *)(a1 + 44)), 8 * v8 - 8 * *(unsigned int *)(a1 + 44));
    }
    *(_DWORD *)(a1 + 44) = v8;
  }
  uint64_t v17 = WTF::fastMalloc((WTF *)0x48);
  uint64_t v18 = v17;
  *(_DWORD *)uint64_t v17 = a2[8];
  uint64_t v19 = (_DWORD *)*((void *)a2 + 2);
  if (v19) {
    *v19 += 2;
  }
  *(void *)(v17 + 8) = v19;
  uint64_t v20 = (_DWORD *)*((void *)a2 + 3);
  if (v20) {
    *v20 += 2;
  }
  *(void *)(v17 + ++*(_DWORD *)(this + 16) = v20;
  uint64_t v21 = (*(uint64_t (**)(unsigned int *))(*(void *)a2 + 24))(a2);
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v18 + 24, *(unsigned int *)(v21 + 12));
  uint64_t v22 = (*(uint64_t (**)(unsigned int *))(*(void *)a2 + 32))(a2);
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v18 + 40, *(unsigned int *)(v22 + 12));
  *(double *)(v18 + 56) = (*(double (**)(unsigned int *))(*(void *)a2 + 16))(a2);
  WTF::HashTable<WebCore::GamepadHapticEffectType,WebCore::GamepadHapticEffectType,WTF::IdentityExtractor,WTF::IntHash<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>>::HashTable((uint64_t *)(v18 + 64), (unsigned __int8 **)a2 + 7);
  WebKit::UIGamepad::updateFromPlatformGamepad((WebKit::UIGamepad *)v18, (WebCore::PlatformGamepad *)a2);
  uint64_t v24 = a2[8];
  if (*(_DWORD *)(a1 + 44) <= v24)
  {
    __break(0xC471u);
    JUMPOUT(0x198FA5334);
  }
  uint64_t v25 = *(void *)(a1 + 32);
  uint64_t v26 = *(WTF **)(v25 + 8 * v24);
  *(void *)(v25 + 8 * v24) = v18;
  if (v26) {
    std::default_delete<WebKit::UIGamepad>::operator()[abi:sn180100](v26, v23);
  }
  WebKit::UIGamepadProvider::scheduleGamepadStateSync(a1);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 16), &v39);
  uint64_t v27 = *(void *)(a1 + 16);
  if (v27)
  {
    uint64_t v28 = *(unsigned int *)(v27 - 4);
    uint64_t v29 = v27 + 8 * v28;
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v28 = 0;
  }
  uint64_t v34 = a1 + 16;
  uint64_t v35 = v29;
  uint64_t v36 = v29;
  uint64_t v37 = v29;
  uint64_t v38 = v27 + 8 * v28;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v34);
  while (v40 != v35)
  {
    uint64_t v31 = a2[8];
    if (*(_DWORD *)(a1 + 44) <= v31)
    {
      __break(0xC471u);
      goto LABEL_38;
    }
    uint64_t v32 = *(void *)(*(void *)v40 + 8);
    if (v32) {
      uint64_t v33 = v32 - 16;
    }
    else {
      uint64_t v33 = 0;
    }
    WebKit::WebProcessPool::gamepadConnected(v33, *(void *)(*(void *)(a1 + 32) + 8 * v31), a3);
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v39);
  }
  return result;
}

void *WebKit::UIGamepadProvider::platformGamepadDisconnected(void *this, WebCore::PlatformGamepad *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 8);
  if (*((_DWORD *)this + 11) <= v2)
  {
    __break(0xC471u);
  }
  else
  {
    uint64_t v3 = this;
    uint64_t v4 = this[4];
    int v5 = *(const WebKit::UIGamepad **)(v4 + 8 * v2);
    *(void *)(v4 + 8 * v2) = 0;
    WebKit::UIGamepadProvider::scheduleGamepadStateSync((uint64_t)this);
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)v3 + 2, &v17);
    uint64_t v6 = v3[2];
    if (v6)
    {
      uint64_t v7 = *(unsigned int *)(v6 - 4);
      uint64_t v8 = v6 + 8 * v7;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v7 = 0;
    }
    unint64_t v12 = v3 + 2;
    uint64_t v13 = v8;
    uint64_t v14 = v8;
    uint64_t v15 = v8;
    uint64_t v16 = v6 + 8 * v7;
    this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
    while (v18 != v13)
    {
      uint64_t v10 = *(void *)(*(void *)v18 + 8);
      if (v10) {
        unint64_t v11 = (WebKit::WebProcessPool *)(v10 - 16);
      }
      else {
        unint64_t v11 = 0;
      }
      WebKit::WebProcessPool::gamepadDisconnected(v11, v5);
      this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v17);
    }
    if (v5) {
      return (void *)std::default_delete<WebKit::UIGamepad>::operator()[abi:sn180100](v5, v9);
    }
  }
  return this;
}

uint64_t WebKit::UIGamepadProvider::platformGamepadInputActivity(uint64_t a1, char a2)
{
  uint64_t v4 = WebCore::GamepadProvider::singleton((WebCore::GamepadProvider *)a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
  uint64_t v6 = *(unsigned int *)(v5 + 12);
  uint64_t v21 = 0;
  int v22 = 0;
  int v23 = v6;
  if (v6)
  {
    if (v6 >> 29) {
      goto LABEL_26;
    }
    uint64_t v7 = v5;
    uint64_t v8 = (atomic_uint **)WTF::fastMalloc((WTF *)(8 * v6));
    int v22 = v6;
    uint64_t v21 = v8;
    uint64_t v9 = *(unsigned int *)(v7 + 12);
    if (v9)
    {
      uint64_t v10 = *(atomic_uint ***)v7;
      uint64_t v11 = 8 * v9;
      do
      {
        unint64_t v12 = *v10;
        if (*v10) {
          atomic_fetch_add(v12, 1u);
        }
        *v8++ = v12;
        ++v10;
        v11 -= 8;
      }
      while (v11);
      LODWORD(v6) = v23;
    }
  }
  unsigned int v13 = *(_DWORD *)(a1 + 44);
  if (v6 >= v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = v6;
  }
  if (v14)
  {
    unint64_t v15 = 0;
    while (v15 < *(unsigned int *)(a1 + 44))
    {
      uint64_t v16 = *(WebKit::UIGamepad **)(*(void *)(a1 + 32) + 8 * v15);
      if (v16)
      {
        if (v15 >= v6)
        {
          __break(0xC471u);
          JUMPOUT(0x198FA5568);
        }
        uint64_t v17 = v21[v15];
        if (v17)
        {
          uint64_t v18 = (WebCore::PlatformGamepad *)*((void *)v17 + 1);
          if (v18) {
            WebKit::UIGamepad::updateFromPlatformGamepad(v16, v18);
          }
        }
      }
      if (v14 == ++v15) {
        goto LABEL_21;
      }
    }
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x198FA5560);
  }
LABEL_21:
  if (a2) {
    *(unsigned char *)(a1 + 81) = 1;
  }
  WebKit::UIGamepadProvider::scheduleGamepadStateSync(a1);
  return WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v19);
}

unsigned int *WebKit::UIGamepadProvider::processPoolStartedUsingGamepads(WebKit::UIGamepadProvider *this, WebKit::WebProcessPool *a2)
{
  uint64_t result = WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)this + 16, (unsigned int *)a2, (uint64_t)v4);
  if (!*((unsigned char *)this + 80))
  {
    uint64_t result = (unsigned int *)WebKit::UIGamepadProvider::platformWebPageProxyForGamepadInput(this);
    if (result) {
      return (unsigned int *)WebKit::UIGamepadProvider::startMonitoringGamepads(this);
    }
  }
  return result;
}

WebCore::GamepadProvider *WebKit::UIGamepadProvider::startMonitoringGamepads(WebCore::GamepadProvider *this)
{
  if (!*((unsigned char *)this + 80))
  {
    *((unsigned char *)this + 80) = 1;
    uint64_t v1 = *(uint64_t (**)(void))(*(void *)WebCore::GamepadProvider::singleton(this) + 16);
    return (WebCore::GamepadProvider *)v1();
  }
  return this;
}

uint64_t WebKit::UIGamepadProvider::processPoolStoppedUsingGamepads(WebKit::UIGamepadProvider *this, WebKit::WebProcessPool *a2)
{
  uint64_t result = WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)this + 16, a2);
  if (*((unsigned char *)this + 80))
  {
    return WebKit::UIGamepadProvider::platformWebPageProxyForGamepadInput(this);
  }
  return result;
}

uint64_t WebKit::UIGamepadProvider::viewBecameActive(WebKit::UIGamepadProvider *this, WebKit::WebPageProxy *a2)
{
  uint64_t v3 = (char *)this + 16;
  uint64_t v4 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*((void *)a2 + 6) + 24));
  uint64_t result = WTF::WeakHashSet<WebKit::WebProcessPool,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessPool>((uint64_t)v3, v4);
  if (result)
  {
    if (!*((unsigned char *)this + 80)) {
      WebKit::UIGamepadProvider::startMonitoringGamepads(this);
    }
    return WebKit::UIGamepadProvider::platformWebPageProxyForGamepadInput(this);
  }
  return result;
}

void WebKit::UIGamepadProvider::viewBecameInactive(WebKit::UIGamepadProvider *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = WebKit::UIGamepadProvider::platformWebPageProxyForGamepadInput(this);
  if (v2)
  {
    uint64_t v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

void WebKit::InspectorTargetProxy::create(uint64_t a1@<X0>, _DWORD **a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 8);
  if (v8) {
    uint64_t v9 = v8 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  CFRetain(*(CFTypeRef *)(v9 + 8));
  uint64_t v10 = WTF::fastMalloc((WTF *)0x40);
  *a4 = WebKit::InspectorTargetProxy::InspectorTargetProxy(v10, v9, a2, a3);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  unint64_t v12 = *(atomic_uint **)(a1 + 8);
  if (v12)
  {
    atomic_fetch_add(v12, 1u);
    uint64_t v10 = *a4;
  }
  unsigned int v13 = *(unsigned int **)(v10 + 56);
  *(void *)(v10 + 56) = v12;
  if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, v11);
  }
  uint64_t v14 = *(const void **)(v9 + 8);

  CFRelease(v14);
}

IPC::Encoder *WebKit::InspectorTargetProxy::connect(IPC::Encoder *result, char a2)
{
  uint64_t v3 = *((void *)result + 7);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = v4 + 16;
      uint64_t v6 = (IPC::Encoder *)*((void *)result + 5);
      if (v6) {
        *(_DWORD *)v6 += 2;
      }
      uint64_t v26 = v6;
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
      uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v8 = 2178;
      *((void *)v8 + 1) = v7;
      *((void *)v8 + 66) = (char *)v8 + 16;
      *((void *)v8 + 67) = 512;
      *((void *)v8 + 68) = 0;
      *((void *)v8 + 70) = 0;
      *((void *)v8 + 69) = 0;
      IPC::Encoder::encodeHeader(v8);
      v24[0] = v8;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, (uint64_t *)&v26);
      IPC::ArgumentCoder<Inspector::FrontendChannel::ConnectionType,void>::encode<IPC::Encoder>(v8, a2);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, v24, 0);
      uint64_t v10 = v24[0];
      v24[0] = 0;
      if (v10)
      {
        IPC::Encoder::~Encoder(v10, v9);
        WTF::fastFree(v19, v20);
      }
      uint64_t result = v26;
      uint64_t v26 = 0;
      if (!result) {
        return result;
      }
LABEL_22:
      if (*(_DWORD *)result == 2) {
        return (IPC::Encoder *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v9);
      }
      *(_DWORD *)result -= 2;
      return result;
    }
  }
  uint64_t v11 = *(void *)(*((void *)result + 4) + 8);
  if (v11) {
    uint64_t v12 = v11 - 16;
  }
  else {
    uint64_t v12 = 0;
  }
  if (!*(unsigned char *)(v12 + 801) && *(unsigned char *)(v12 + 800))
  {
    uint64_t v13 = *(void *)(v12 + 256);
    uint64_t v14 = (WTF::StringImpl *)*((void *)result + 5);
    if (v14) {
      *(_DWORD *)v14 += 2;
    }
    int v23 = v14;
    uint64_t v15 = *(void *)(*(void *)(v12 + 32) + 1928);
    uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v16 = 2178;
    *((void *)v16 + 1) = v15;
    *((void *)v16 + 66) = (char *)v16 + 16;
    *((void *)v16 + 67) = 512;
    *((void *)v16 + 68) = 0;
    *((void *)v16 + 70) = 0;
    *((void *)v16 + 69) = 0;
    IPC::Encoder::encodeHeader(v16);
    uint64_t v26 = v16;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, (uint64_t *)&v23);
    IPC::ArgumentCoder<Inspector::FrontendChannel::ConnectionType,void>::encode<IPC::Encoder>(v16, a2);
    LOBYTE(v24[0]) = 0;
    char v25 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v13, &v26, 0, (uint64_t)v24, 1);
    if (v25)
    {
      uint64_t v17 = v24[0];
      v24[0] = 0;
      if (v17) {
        (*(void (**)(IPC::Encoder *))(*(void *)v17 + 8))(v17);
      }
    }
    uint64_t v18 = v26;
    uint64_t v26 = 0;
    if (v18)
    {
      IPC::Encoder::~Encoder(v18, v9);
      WTF::fastFree(v21, v22);
    }
    uint64_t result = v23;
    int v23 = 0;
    if (result) {
      goto LABEL_22;
    }
  }
  return result;
}

IPC::Encoder *WebKit::InspectorTargetProxy::disconnect(IPC::Encoder *this)
{
  uint64_t v1 = this;
  if (*((unsigned char *)this + 24)) {
    this = (IPC::Encoder *)Inspector::InspectorTarget::resume(this);
  }
  uint64_t v2 = *((void *)v1 + 7);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = v3 + 16;
      uint64_t v5 = (IPC::Encoder *)*((void *)v1 + 5);
      if (v5) {
        *(_DWORD *)v5 += 2;
      }
      char v25 = v5;
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 2217;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      v23[0] = v7;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)&v25);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, v23, 0);
      uint64_t v9 = v23[0];
      v23[0] = 0;
      if (v9)
      {
        IPC::Encoder::~Encoder(v9, v8);
        WTF::fastFree(v18, v19);
      }
      this = v25;
      char v25 = 0;
      if (!this) {
        return this;
      }
LABEL_24:
      if (*(_DWORD *)this == 2) {
        return (IPC::Encoder *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v8);
      }
      *(_DWORD *)this -= 2;
      return this;
    }
  }
  uint64_t v10 = *(void *)(*((void *)v1 + 4) + 8);
  if (v10) {
    uint64_t v11 = v10 - 16;
  }
  else {
    uint64_t v11 = 0;
  }
  if (!*(unsigned char *)(v11 + 801) && *(unsigned char *)(v11 + 800))
  {
    uint64_t v12 = *(void *)(v11 + 256);
    uint64_t v13 = (WTF::StringImpl *)*((void *)v1 + 5);
    if (v13) {
      *(_DWORD *)v13 += 2;
    }
    int v22 = v13;
    uint64_t v14 = *(void *)(*(void *)(v11 + 32) + 1928);
    uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v15 = 2217;
    *((void *)v15 + 1) = v14;
    *((void *)v15 + 66) = (char *)v15 + 16;
    *((void *)v15 + 67) = 512;
    *((void *)v15 + 68) = 0;
    *((void *)v15 + 70) = 0;
    *((void *)v15 + 69) = 0;
    IPC::Encoder::encodeHeader(v15);
    char v25 = v15;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v15, (uint64_t *)&v22);
    LOBYTE(v23[0]) = 0;
    char v24 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v25, 0, (uint64_t)v23, 1);
    if (v24)
    {
      uint64_t v16 = v23[0];
      v23[0] = 0;
      if (v16) {
        (*(void (**)(IPC::Encoder *))(*(void *)v16 + 8))(v16);
      }
    }
    uint64_t v17 = v25;
    char v25 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v8);
      WTF::fastFree(v20, v21);
    }
    this = v22;
    int v22 = 0;
    if (this) {
      goto LABEL_24;
    }
  }
  return this;
}

IPC::Encoder *WebKit::InspectorTargetProxy::sendMessageToTargetBackend(IPC::Encoder *this, const WTF::String *a2)
{
  uint64_t v3 = *((void *)this + 7);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = v4 + 16;
      uint64_t v6 = (IPC::Encoder *)*((void *)this + 5);
      if (v6) {
        *(_DWORD *)v6 += 2;
      }
      uint64_t v26 = v6;
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
      uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v8 = 2403;
      *((void *)v8 + 1) = v7;
      *((void *)v8 + 66) = (char *)v8 + 16;
      *((void *)v8 + 67) = 512;
      *((void *)v8 + 68) = 0;
      *((void *)v8 + 70) = 0;
      *((void *)v8 + 69) = 0;
      IPC::Encoder::encodeHeader(v8);
      v24[0] = v8;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, (uint64_t *)&v26);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, (uint64_t *)a2);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, v24, 0);
      uint64_t v10 = v24[0];
      v24[0] = 0;
      if (v10)
      {
        IPC::Encoder::~Encoder(v10, v9);
        WTF::fastFree(v19, v20);
      }
      this = v26;
      uint64_t v26 = 0;
      if (!this) {
        return this;
      }
LABEL_22:
      if (*(_DWORD *)this == 2) {
        return (IPC::Encoder *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v9);
      }
      *(_DWORD *)this -= 2;
      return this;
    }
  }
  uint64_t v11 = *(void *)(*((void *)this + 4) + 8);
  if (v11) {
    uint64_t v12 = v11 - 16;
  }
  else {
    uint64_t v12 = 0;
  }
  if (!*(unsigned char *)(v12 + 801) && *(unsigned char *)(v12 + 800))
  {
    uint64_t v13 = *(void *)(v12 + 256);
    uint64_t v14 = (WTF::StringImpl *)*((void *)this + 5);
    if (v14) {
      *(_DWORD *)v14 += 2;
    }
    int v23 = v14;
    uint64_t v15 = *(void *)(*(void *)(v12 + 32) + 1928);
    uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v16 = 2403;
    *((void *)v16 + 1) = v15;
    *((void *)v16 + 66) = (char *)v16 + 16;
    *((void *)v16 + 67) = 512;
    *((void *)v16 + 68) = 0;
    *((void *)v16 + 70) = 0;
    *((void *)v16 + 69) = 0;
    IPC::Encoder::encodeHeader(v16);
    uint64_t v26 = v16;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, (uint64_t *)&v23);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, (uint64_t *)a2);
    LOBYTE(v24[0]) = 0;
    char v25 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v13, &v26, 0, (uint64_t)v24, 1);
    if (v25)
    {
      uint64_t v17 = v24[0];
      v24[0] = 0;
      if (v17) {
        (*(void (**)(IPC::Encoder *))(*(void *)v17 + 8))(v17);
      }
    }
    uint64_t v18 = v26;
    uint64_t v26 = 0;
    if (v18)
    {
      IPC::Encoder::~Encoder(v18, v9);
      WTF::fastFree(v21, v22);
    }
    this = v23;
    int v23 = 0;
    if (this) {
      goto LABEL_22;
    }
  }
  return this;
}

BOOL WebKit::InspectorTargetProxy::isProvisional(WebKit::InspectorTargetProxy *this)
{
  uint64_t v1 = *((void *)this + 7);
  return v1 && *(void *)(v1 + 8) != 0;
}

void WebKit::WebInspectorUIProxy::~WebInspectorUIProxy(WebKit::WebInspectorUIProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9E3590;
  *((void *)this + 2) = &unk_1EE9E35D0;
  *((void *)this + 4) = &unk_1EE9E3608;
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, a2);
}

{
  uint64_t vars8;

  WebKit::WebInspectorUIProxy::~WebInspectorUIProxy(this, a2);

  JUMPOUT(0x199740C10);
}

void non-virtual thunk to'WebKit::WebInspectorUIProxy::~WebInspectorUIProxy(WebKit::WebInspectorUIProxy *this, void *a2)
{
}

{
  WebKit::WebInspectorUIProxy::~WebInspectorUIProxy((WebKit::WebInspectorUIProxy *)((char *)this - 32), a2);
}

{
  uint64_t vars8;

  WebKit::WebInspectorUIProxy::~WebInspectorUIProxy((WebKit::WebInspectorUIProxy *)((char *)this - 16), a2);

  JUMPOUT(0x199740C10);
}

{
  uint64_t vars8;

  WebKit::WebInspectorUIProxy::~WebInspectorUIProxy((WebKit::WebInspectorUIProxy *)((char *)this - 32), a2);

  JUMPOUT(0x199740C10);
}

void WebKit::WebInspectorUIProxy::closeFrontendPageAndWindow(WebKit::WebInspectorUIProxy *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (!v2 || !*(void *)(v2 + 8) || *((unsigned char *)this + 83)) {
    return;
  }
  *((unsigned char *)this + 83) = 1;
  uint64_t v4 = *((void *)this + 5);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    (*(void (**)(void, uint64_t, WebKit::WebInspectorUIProxy *))(**(void **)(v5 + 88) + 576))(*(void *)(v5 + 88), v5 - 16, this);
    CFRelease(*(CFTypeRef *)(v5 - 8));
    uint64_t v2 = *((void *)this + 6);
    *((unsigned char *)this + 73) = 0;
    *((_WORD *)this + 38) = 0;
    *((unsigned char *)this + 78) = 0;
    if (!v2) {
      goto LABEL_11;
    }
  }
  else
  {
    *((unsigned char *)this + 73) = 0;
    *((_WORD *)this + 38) = 0;
    *((unsigned char *)this + 78) = 0;
  }
  uint64_t v6 = *(void *)(v2 + 8);
  if (v6)
  {
    uint64_t v7 = v6 - 16;
    CFRetain(*(CFTypeRef *)(v6 - 8));
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v7 = 0;
LABEL_12:
  WebKit::untrackInspectorPage((WebKit *)v7, a2);
  uint64_t v8 = *(void *)(v7 + 256);
  char v13 = *((unsigned char *)this + 73);
  WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::SetIsVisible>(v8, &v13, *(void *)(*(void *)(v7 + 32) + 1928), 0);
  IPC::MessageReceiverMap::removeMessageReceiver(*(void *)(v7 + 256) + 152, 0xB4u, *((void *)this + 8));
  uint64_t v10 = *((void *)this + 5);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 8);
    if (v11)
    {
      CFRetain(*(CFTypeRef *)(v11 - 8));
      if (*((unsigned char *)this + 81)) {
        WebKit::WebPageInspectorController::disconnectFrontend(*(void **)(v11 + 1128));
      }
      CFRelease(*(CFTypeRef *)(v11 - 8));
    }
  }
  *((unsigned char *)this + 81) = 0;
  uint64_t v12 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v12)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v9);
    }
  }
  *((_WORD *)this + 37) = 0;
  *((unsigned char *)this + 72) = 0;
  CFRelease(*(CFTypeRef *)(v7 + 8));
  *((unsigned char *)this + 83) = 0;
}

uint64_t WebKit::WebInspectorUIProxy::reset(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = this;
      IPC::MessageReceiverMap::removeMessageReceiver(*(void *)(v2 + 240) + 152, 0xB4u, *(void *)(*(void *)(v2 + 16) + 1928));
      this = *(void *)(v3 + 40);
      *(void *)(v3 + ++*(_DWORD *)(this + 40) = 0;
      if (this)
      {
        if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)this);
          return WTF::fastFree((WTF *)this, v4);
        }
      }
    }
  }
  return this;
}

IPC::Encoder *WebKit::WebInspectorUIProxy::sendMessageToFrontend(IPC::Encoder *this, const WTF::String *a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void *)(v3 + 240);
      uint64_t v6 = *(void *)(*(void *)(v3 + 16) + 1928);
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 1831;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      uint64_t v14 = v7;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a2);
      LOBYTE(v12) = 0;
      char v13 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v14, 0, (uint64_t)&v12, 1);
      if (v13)
      {
        uint64_t v9 = v12;
        uint64_t v12 = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
      }
      this = v14;
      uint64_t v14 = 0;
      if (this)
      {
        IPC::Encoder::~Encoder(this, v8);
        return (IPC::Encoder *)WTF::fastFree(v10, v11);
      }
    }
  }
  return this;
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUIProxy::sendMessageToFrontend(WebKit::WebInspectorUIProxy *this, const WTF::String *a2)
{
  return WebKit::WebInspectorUIProxy::sendMessageToFrontend((WebKit::WebInspectorUIProxy *)((char *)this - 32), a2);
}

uint64_t WebKit::WebInspectorUIProxy::connect(uint64_t this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(void *)(this + 40);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = this;
      uint64_t v6 = *(void *)(v4 + 256);
      {
        WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      this = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, a3);
      if (this && !*(unsigned char *)(v5 + 77))
      {
        *(_WORD *)(v5 + 77) = 257;
        WebKit::WebInspectorUIProxy::createFrontendPage((WebKit::WebInspectorUIProxy *)v5, v7);
        uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 8);
        if (v8) {
          uint64_t v9 = v8 - 16;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(void *)(v9 + 256);
        char v15 = 0;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorInterruptDispatcher::NotifyNeedDebuggerBreak>(v10, (uint64_t)&v15, 0, 0);
        uint64_t v11 = *(void *)(*(void *)(v5 + 40) + 8);
        uint64_t v12 = v11 - 16;
        if (!v11) {
          uint64_t v12 = 0;
        }
        uint64_t v13 = *(void *)(v12 + 256);
        char v14 = 0;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::Show>(v13, (uint64_t)&v14, *(void *)(*(void *)(v11 + 16) + 1928), 0);
      }
    }
  }
  return this;
}

unsigned __int8 *WebKit::WebInspectorUIProxy::createFrontendPage(WebKit::WebInspectorUIProxy *this, void *a2)
{
  uint64_t result = (unsigned __int8 *)*((void *)this + 6);
  if (result)
  {
    if (!*((void *)result + 1))
    {
      *((void *)this + 6) = 0;
      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)result);
        uint64_t result = (unsigned __int8 *)WTF::fastFree((WTF *)result, a2);
      }
      uint64_t v4 = *((void *)this + 6);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          CFRetain(*(CFTypeRef *)(v5 - 8));
          uint64_t v7 = *((void *)this + 5);
          if (v7 && (uint64_t v8 = *(void *)(v7 + 8)) != 0)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            WebKit::trackInspectorPage((WebKit *)(v5 - 16), (WebKit::WebPageProxy *)(v8 - 16), v9);
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
          else
          {
            WebKit::trackInspectorPage((WebKit *)(v5 - 16), 0, v6);
          }
          CFRelease(*(CFTypeRef *)(v5 - 8));
          uint64_t v10 = *((void *)this + 5);
          if (v10)
          {
            uint64_t v11 = *(void *)(v10 + 8);
            if (v11) {
              uint64_t v12 = (WebKit::WebProcessProxy **)(v11 - 16);
            }
            else {
              uint64_t v12 = 0;
            }
          }
          else
          {
            uint64_t v12 = 0;
          }
          WebKit::WebPageProxy::launchInitialProcessIfNecessary(v12);
          uint64_t v13 = *(void *)(*((void *)this + 6) + 8);
          if (v13) {
            uint64_t v14 = v13 - 16;
          }
          else {
            uint64_t v14 = 0;
          }
          uint64_t v15 = *((void *)this + 8);
          uint64_t v16 = (uint64_t *)(*(void *)(v14 + 256) + 160);
          v18[0] = 180;
          v18[1] = v15;
          return WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v16, (unsigned __int8 *)v18, (uint64_t)this + 16, &v17);
        }
      }
    }
  }
  else
  {
    *((void *)this + 6) = 0;
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorInterruptDispatcher::NotifyNeedDebuggerBreak>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1782;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::WebInspectorUIProxy::show(uint64_t this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(void *)(this + 40);
  if (!v3 || !*(void *)(v3 + 8)) {
    return this;
  }
  uint64_t v4 = this;
  uint64_t v5 = *(void *)(this + 48);
  if (!v5 || !*(void *)(v5 + 8))
  {
    this = WebKit::WebInspectorUIProxy::connect(this, a2, a3);
    goto LABEL_11;
  }
  if (*(unsigned char *)(this + 78))
  {
LABEL_11:
    *(unsigned char *)(v4 + 78) = 0;
    return this;
  }
  if (!*(unsigned char *)(this + 73))
  {
    return WebKit::WebInspectorUIProxy::open(this);
  }
  return this;
}

void WebKit::WebInspectorUIProxy::close(WebKit::WebInspectorUIProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v4 = *(void *)(v2 + 240);
      char v6 = 0;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::Close>(v4, (uint64_t)&v6, *(void *)(*(void *)(v2 + 16) + 1928), 0);
      WebKit::WebInspectorUIProxy::closeFrontendPageAndWindow(this, v5);
    }
  }
}

WebKit::WebInspectorUIProxy *WebKit::WebInspectorUIProxy::reopen(WebKit::WebInspectorUIProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = (uint64_t)this;
    WebKit::WebInspectorUIProxy::close(this);
    return (WebKit::WebInspectorUIProxy *)WebKit::WebInspectorUIProxy::show(v2, v3, v4);
  }
  return this;
}

void *WebKit::WebInspectorUIProxy::resetState(void *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = this[5];
  if (v3)
  {
    if (*(void *)(v3 + 8))
    {
      uint64_t v4 = this;
      uint64_t v5 = this[6];
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6)
        {
          uint64_t v7 = *(WebKit::WebPreferences **)(*(void *)(v6 + 248) + 40);
          {
            WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl += 2;
            WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl;
          }
          WebKit::WebPreferences::deleteKey(v7, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key, a3);
          uint64_t v9 = *(void *)(v4[6] + 8);
          if (v9) {
            uint64_t v10 = v9 - 16;
          }
          else {
            uint64_t v10 = 0;
          }
          uint64_t v11 = *(WebKit::WebPreferences **)(*(void *)(v10 + 264) + 40);
          {
            WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl += 2;
            WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl;
          }
          WebKit::WebPreferences::deleteKey(v11, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key, v8);
          uint64_t v13 = *(void *)(v4[6] + 8);
          if (v13) {
            uint64_t v14 = v13 - 16;
          }
          else {
            uint64_t v14 = 0;
          }
          uint64_t v15 = *(WebKit::WebPreferences **)(*(void *)(v14 + 264) + 40);
          {
            WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl += 2;
            WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl;
          }
          WebKit::WebPreferences::deleteKey(v15, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key, v12);
          uint64_t v17 = *(void *)(v4[6] + 8);
          if (v17) {
            uint64_t v18 = v17 - 16;
          }
          else {
            uint64_t v18 = 0;
          }
          uint64_t v19 = *(WebKit::WebPreferences **)(*(void *)(v18 + 264) + 40);
          {
            WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl += 2;
            WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl;
          }
          WebKit::WebPreferences::deleteKey(v19, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key, v16);
          uint64_t v21 = *(void *)(v4[6] + 8);
          if (v21) {
            uint64_t v22 = v21 - 16;
          }
          else {
            uint64_t v22 = 0;
          }
          int v23 = *(WebKit::WebPreferences **)(*(void *)(v22 + 264) + 40);
          {
            WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::$_0::operator() const(void)::impl += 2;
            WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::$_0::operator() const(void)::impl;
          }
          return WebKit::WebPreferences::deleteKey(v23, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::key, v20);
        }
      }
    }
  }
  return this;
}

unsigned __int8 *WebKit::WebInspectorUIProxy::updateForNewPageProcess(WebKit::WebInspectorUIProxy *this, WebKit::WebPageProxy *a2)
{
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v5 = *((void *)a2 + 3);
  if (v5) {
    atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = v5;
  if (v6)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v4);
    }
    uint64_t v5 = *((void *)this + 5);
  }
  uint64_t v7 = *(void *)(v5 + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  *((void *)this + 8) = *(void *)(*(void *)(v8 + 32) + 760);
  uint64_t v9 = *(void *)(v5 + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(v10 + 256);
  uint64_t v12 = *(void *)(*(void *)(v10 + 32) + 1928);
  v18[0] = 180;
  v18[1] = v12;
  uint64_t result = WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v11 + 160), (unsigned __int8 *)v18, (uint64_t)this + 16, v17);
  uint64_t v14 = *((void *)this + 6);
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 8);
    if (v15)
    {
      uint64_t v16 = *(void *)(v15 + 240);
      LOBYTE(v17[0]) = 0;
      return (unsigned __int8 *)WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::UpdateConnection>(v16, (uint64_t)v17, *(void *)(*(void *)(v15 + 16) + 1928), 0);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebInspectorUIProxy::setFrontendConnection(IPC::Encoder *result, unint64_t a2)
{
  uint64_t v2 = *((void *)result + 5);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void *)(v3 + 240);
      uint64_t v6 = *(void *)(*(void *)(v3 + 16) + 1928);
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 1846;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      uint64_t v14 = v7;
      IPC::Encoder::addAttachment((uint64_t)v7, a2);
      LOBYTE(v12) = 0;
      char v13 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v14, 0, (uint64_t)&v12, 1);
      if (v13)
      {
        uint64_t v9 = v12;
        uint64_t v12 = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
      }
      uint64_t result = v14;
      uint64_t v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v8);
        return (IPC::Encoder *)WTF::fastFree(v10, v11);
      }
    }
  }
  return result;
}

void *WebKit::WebInspectorUIProxy::showConsole(void *this, void *a2)
{
  uint64_t v2 = this[5];
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v3 = this;
    WebKit::WebInspectorUIProxy::createFrontendPage((WebKit::WebInspectorUIProxy *)this, a2);
    uint64_t v4 = *(void *)(v3[5] + 8);
    uint64_t v5 = v4 - 16;
    if (!v4) {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void *)(v5 + 256);
    char v7 = 0;
    return (void *)WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::ShowConsole>(v6, (uint64_t)&v7, *(void *)(*(void *)(v4 + 16) + 1928), 0);
  }
  return this;
}

void *WebKit::WebInspectorUIProxy::showResources(void *this, void *a2)
{
  uint64_t v2 = this[5];
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v3 = this;
    WebKit::WebInspectorUIProxy::createFrontendPage((WebKit::WebInspectorUIProxy *)this, a2);
    uint64_t v4 = *(void *)(v3[5] + 8);
    uint64_t v5 = v4 - 16;
    if (!v4) {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void *)(v5 + 256);
    char v7 = 0;
    return (void *)WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::ShowResources>(v6, (uint64_t)&v7, *(void *)(*(void *)(v4 + 16) + 1928), 0);
  }
  return this;
}

void WebKit::WebInspectorUIProxy::showMainResourceForFrame(WebKit::WebInspectorUIProxy *a1, void *a2, uint64_t a3)
{
  *(void *)&long long v9 = a2;
  *((void *)&v9 + 1) = a3;
  uint64_t v3 = *((void *)a1 + 5);
  if (v3 && *(void *)(v3 + 8))
  {
    WebKit::WebInspectorUIProxy::createFrontendPage(a1, a2);
    uint64_t v5 = *((void *)a1 + 5);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6) {
        uint64_t v7 = v6 - 16;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    long long v12 = v9;
    uint64_t v8 = &v9;
    char v13 = 1;
    uint64_t v10 = &v8;
    char v11 = 0;
    WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebInspector::ShowMainResourceForFrame>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebInspector::ShowMainResourceForFrame &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebInspector::ShowMainResourceForFrame&)#1}>(v7, (uint64_t)&v12, (uint64_t)&v10);
  }
}

IPC::Encoder *WebKit::WebInspectorUIProxy::attach(IPC::Encoder *result, unsigned int a2)
{
  uint64_t v2 = *((void *)result + 5);
  if (v2)
  {
    if (*(void *)(v2 + 8))
    {
      uint64_t v3 = result;
      uint64_t v4 = *((void *)result + 6);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          if (*((unsigned char *)result + 74) || *((unsigned char *)result + 75))
          {
            *((unsigned char *)result + 74) = 1;
            *((_DWORD *)result + 21) = a2;
            uint64_t v6 = *(WebKit::WebPreferences **)(*(void *)(v5 + 248) + 40);
            unsigned int v22 = a2;
            WebKit::WebPreferences::setInspectorAttachmentSide(v6, &v22);
            if (*((unsigned char *)v3 + 73))
            {
              uint64_t v7 = *(void *)(*((void *)v3 + 6) + 8);
              if (v7) {
                uint64_t v8 = v7 - 16;
              }
              else {
                uint64_t v8 = 0;
              }
              long long v9 = *(WebKit::WebPreferences **)(*(void *)(v8 + 264) + 40);
              BOOL v21 = 1;
              WebKit::WebPreferences::setInspectorStartsAttached(v9, &v21);
            }
            uint64_t v10 = *(void *)(*((void *)v3 + 5) + 8);
            uint64_t v11 = v10 - 16;
            if (!v10) {
              uint64_t v11 = 0;
            }
            uint64_t v12 = *(void *)(v11 + 256);
            char v20 = 1;
            uint64_t result = (IPC::Encoder *)WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::SetAttached>(v12, &v20, *(void *)(*(void *)(v10 + 16) + 1928), 0);
            int v13 = *((_DWORD *)v3 + 21);
            switch(v13)
            {
              case 2:
                uint64_t v16 = *(void *)(*((void *)v3 + 6) + 8);
                uint64_t v17 = v16 - 16;
                if (!v16) {
                  uint64_t v17 = 0;
                }
                return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedLeft>(*(void *)(v17 + 256), *(void *)(*(void *)(v16 + 16) + 1928));
              case 1:
                uint64_t v18 = *(void *)(*((void *)v3 + 6) + 8);
                uint64_t v19 = v18 - 16;
                if (!v18) {
                  uint64_t v19 = 0;
                }
                return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedRight>(*(void *)(v19 + 256), *(void *)(*(void *)(v18 + 16) + 1928));
              case 0:
                uint64_t v14 = *(void *)(*((void *)v3 + 6) + 8);
                uint64_t v15 = v14 - 16;
                if (!v14) {
                  uint64_t v15 = 0;
                }
                return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedBottom>(*(void *)(v15 + 256), *(void *)(*(void *)(v14 + 16) + 1928));
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebInspectorUIProxy::detach(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = this;
      uint64_t v4 = *(void *)(this + 48);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          int v6 = *(unsigned __int8 *)(this + 73);
          if (*(unsigned char *)(this + 74))
          {
            *(unsigned char *)(this + 74) = 0;
            if (v6)
            {
              uint64_t v7 = *(WebKit::WebPreferences **)(*(void *)(v5 + 248) + 40);
              BOOL v15 = 0;
              WebKit::WebPreferences::setInspectorStartsAttached(v7, &v15);
              uint64_t v2 = *(void *)(*(void *)(v3 + 40) + 8);
            }
          }
          else
          {
            if (*(unsigned char *)(this + 73)) {
              return this;
            }
            *(unsigned char *)(this + 74) = 0;
          }
          uint64_t v8 = v2 - 16;
          if (!v2) {
            uint64_t v8 = 0;
          }
          uint64_t v9 = *(void *)(v8 + 256);
          char v14 = 0;
          WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::SetAttached>(v9, &v14, *(void *)(*(void *)(v2 + 16) + 1928), 0);
          uint64_t v10 = *(void *)(*(void *)(v3 + 48) + 8);
          uint64_t v11 = v10 - 16;
          if (!v10) {
            uint64_t v11 = 0;
          }
          uint64_t v12 = *(void *)(v11 + 256);
          char v13 = 0;
          return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::Detached>(v12, (uint64_t)&v13, *(void *)(*(void *)(v10 + 16) + 1928), 0);
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebInspectorUIProxy::setAttachedWindowHeight(uint64_t this, unsigned int a2)
{
  unsigned int v4 = a2;
  uint64_t v2 = *(void *)(this + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      return WebKit::WebPreferences::setInspectorAttachedHeight(*(WebKit::WebPreferences **)(*(void *)(v3 + 248) + 40), &v4);
    }
  }
  return this;
}

uint64_t WebKit::WebInspectorUIProxy::setAttachedWindowWidth(uint64_t this, unsigned int a2)
{
  unsigned int v4 = a2;
  uint64_t v2 = *(void *)(this + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      return WebKit::WebPreferences::setInspectorAttachedWidth(*(WebKit::WebPreferences **)(*(void *)(v3 + 248) + 40), &v4);
    }
  }
  return this;
}

uint64_t WebKit::WebInspectorUIProxy::togglePageProfiling(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      int v3 = *(unsigned __int8 *)(this + 76);
      uint64_t v4 = *(void *)(v2 + 240);
      if (v3)
      {
        char v6 = 0;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::StopPageProfiling>(v4, (uint64_t)&v6, *(void *)(*(void *)(v2 + 16) + 1928), 0);
      }
      else
      {
        char v5 = 0;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::StartPageProfiling>(v4, (uint64_t)&v5, *(void *)(*(void *)(v2 + 16) + 1928), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebInspectorUIProxy::toggleElementSelection(uint64_t this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(void *)(this + 40);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = this;
      if (*(unsigned char *)(this + 79))
      {
        *(unsigned char *)(this + 80) = 1;
        uint64_t v6 = *(void *)(v4 + 240);
        char v11 = 0;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::StopElementSelection>(v6, (uint64_t)&v11, *(void *)(*(void *)(v4 + 16) + 1928), 0);
      }
      else
      {
        WebKit::WebInspectorUIProxy::connect(this, a2, a3);
        uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 8);
        uint64_t v8 = v7 - 16;
        if (!v7) {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *(void *)(v8 + 256);
        char v10 = 0;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::StartElementSelection>(v9, (uint64_t)&v10, *(void *)(*(void *)(v7 + 16) + 1928), 0);
      }
    }
  }
  return this;
}

void WebKit::WebInspectorUIProxy::openLocalInspectorFrontend(WebKit::WebInspectorUIProxy *this, char a2, char a3)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      CFRetain(*(CFTypeRef *)(v4 - 8));
      uint64_t v9 = *(void *)(v4 + 256);
      {
        WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v9 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, v8))
      {
        if (Inspector::FrontendRouter::hasLocalFrontend(**(Inspector::FrontendRouter ***)(v4 + 1128)))
        {
          WebKit::WebInspectorUIProxy::show((uint64_t)this, (uint64_t)v10, v11);
        }
        else
        {
          *((unsigned char *)this + 72) = a3;
          WebKit::WebInspectorUIProxy::createFrontendPage(this, v10);
          uint64_t v12 = *((void *)this + 6);
          if (v12)
          {
            uint64_t v13 = *(void *)(v12 + 8);
            if (v13)
            {
              CFRetain(*(CFTypeRef *)(v13 - 8));
              uint64_t v14 = *(void *)(v13 + 240);
              WebKit::DebuggableInfoData::empty((uint64_t)v52);
              char v15 = *((unsigned char *)this + 72);
              uint64_t v16 = *((void *)this + 5);
              if (v16 && (uint64_t v17 = *(void *)(v16 + 8)) != 0)
              {
                CFRetain(*(CFTypeRef *)(v17 - 8));
                int v19 = WebKit::inspectorLevelForPage((WebKit *)(v17 - 16), v18);
                CFRelease(*(CFTypeRef *)(v17 - 8));
              }
              else
              {
                int v19 = 1;
              }
              int v58 = v19;
              uint64_t v20 = *(void *)(*((void *)this + 6) + 8);
              if (v20) {
                uint64_t v21 = v20 - 16;
              }
              else {
                uint64_t v21 = 0;
              }
              uint64_t v22 = *(void *)(*(void *)(v21 + 32) + 1928);
              int v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)int v23 = 1829;
              *((void *)v23 + 1) = v22;
              *((void *)v23 + 66) = (char *)v23 + 16;
              *((void *)v23 + 67) = 512;
              *((void *)v23 + 68) = 0;
              *((void *)v23 + 70) = 0;
              *((void *)v23 + 69) = 0;
              IPC::Encoder::encodeHeader(v23);
              uint64_t v59 = v23;
              IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v23, (uint64_t *)this + 8);
              IPC::ArgumentCoder<WebKit::DebuggableInfoData,void>::encode(v23, (uint64_t)v52);
              char v24 = (unsigned char *)IPC::Encoder::grow(v23, 1uLL, 1);
              if (!v25)
              {
                __break(0xC471u);
                JUMPOUT(0x198FA7748);
              }
              unsigned char *v24 = v15;
              IPC::Encoder::operator<<<int>(v23, &v58);
              LOBYTE(v50[0]) = 0;
              char v51 = 0;
              WebKit::AuxiliaryProcessProxy::sendMessage(v14, &v59, 0, (uint64_t)v50, 1);
              if (v51)
              {
                uint64_t v27 = v50[0];
                v50[0] = 0;
                if (v27) {
                  (*(void (**)(WTF::StringImpl *))(*(void *)v27 + 8))(v27);
                }
              }
              uint64_t v28 = v59;
              uint64_t v59 = 0;
              if (v28)
              {
                IPC::Encoder::~Encoder(v28, v26);
                WTF::fastFree(v43, v44);
              }
              uint64_t v29 = v55;
              uint64_t v55 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2) {
                  WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v26);
                }
                else {
                  *(_DWORD *)v29 -= 2;
                }
              }
              uint64_t v30 = v54;
              uint64_t v54 = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2) {
                  WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v26);
                }
                else {
                  *(_DWORD *)v30 -= 2;
                }
              }
              uint64_t v31 = v53;
              uint64_t v53 = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2) {
                  WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v26);
                }
                else {
                  *(_DWORD *)v31 -= 2;
                }
              }
              *((unsigned char *)this + 81) = 1;
              WebKit::WebPageInspectorController::connectFrontend(*(Inspector::FrontendRouter ***)(v4 + 1128));
              if (!*((unsigned char *)this + 72))
              {
                *((unsigned char *)this + 75) = a2;
                uint64_t v33 = *(void *)(*((void *)this + 6) + 8);
                if (v33) {
                  uint64_t v34 = v33 - 16;
                }
                else {
                  uint64_t v34 = 0;
                }
                uint64_t v35 = *(void *)(*(void *)(v34 + 264) + 40);
                {
                  WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl += 2;
                  WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl;
                }
                if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v35 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key, v32))BOOL v36 = *((unsigned char *)this + 75) != 0; {
                else
                }
                  BOOL v36 = 0;
                *((unsigned char *)this + 74) = v36;
                uint64_t v37 = *(void *)(*((void *)this + 6) + 8);
                if (v37) {
                  uint64_t v38 = v37 - 16;
                }
                else {
                  uint64_t v38 = 0;
                }
                uint64_t v39 = *(void *)(*(void *)(v38 + 264) + 40);
                {
                  WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl += 2;
                  WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl;
                }
                *((_DWORD *)this + 21) = WebKit::valueForKey<unsigned int>(v39 + 40, v39 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key);
                uint64_t v40 = *(void *)(v4 + 240);
                v52[0] = *((unsigned char *)this + 74);
                WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::SetAttached>(v40, v52, *(void *)(*(void *)(v4 + 16) + 1928), 0);
                if (*((unsigned char *)this + 74))
                {
                  int v41 = *((_DWORD *)this + 21);
                  switch(v41)
                  {
                    case 2:
                      WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedLeft>(*(void *)(v13 + 240), *(void *)(*(void *)(v13 + 16) + 1928));
                      break;
                    case 1:
                      WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedRight>(*(void *)(v13 + 240), *(void *)(*(void *)(v13 + 16) + 1928));
                      break;
                    case 0:
                      WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedBottom>(*(void *)(v13 + 240), *(void *)(*(void *)(v13 + 16) + 1928));
                      break;
                  }
                }
                else
                {
                  uint64_t v42 = *(void *)(v13 + 240);
                  v52[0] = 0;
                  WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::Detached>(v42, (uint64_t)v52, *(void *)(*(void *)(v13 + 16) + 1928), 0);
                }
                uint64_t v45 = *(void *)(v13 + 240);
                v52[0] = *((unsigned char *)this + 75) ^ 1;
                WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::SetDockingUnavailable>(v45, v52, *(void *)(*(void *)(v13 + 16) + 1928));
              }
              (*(void (**)(void, uint64_t, WebKit::WebInspectorUIProxy *))(**(void **)(v4 + 88) + 568))(*(void *)(v4 + 88), v4 - 16, this);
              uint64_t v59 = 0;
              MEMORY[0x19972E890](v50, &v59, 0);
              WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v52, (const String *)v50, 0);
              CFTypeRef cf = 0;
              WebKit::WebPageProxy::loadRequest(v13 - 16, (WebCore::ResourceRequestBase *)v52, 1, 0, 0, &v57);
              if (v57) {
                CFRelease(*(CFTypeRef *)(v57 + 8));
              }
              CFTypeRef v46 = cf;
              CFTypeRef cf = 0;
              if (v46) {
                CFRelease(v46);
              }
              WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v52);
              uint64_t v48 = v50[0];
              v50[0] = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2) {
                  WTF::StringImpl::destroy(v48, v47);
                }
                else {
                  *(_DWORD *)v48 -= 2;
                }
              }
              uint64_t v49 = v59;
              uint64_t v59 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2) {
                  WTF::StringImpl::destroy(v49, v47);
                }
                else {
                  *(_DWORD *)v49 -= 2;
                }
              }
              CFRelease(*(CFTypeRef *)(v13 - 8));
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v4 - 8));
    }
  }
}

uint64_t WebKit::WebInspectorUIProxy::open(uint64_t this)
{
  if (!*(unsigned char *)(this + 72))
  {
    uint64_t v1 = (unsigned char *)this;
    uint64_t v2 = *(void *)(this + 48);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 8);
      if (v3)
      {
        char v4 = *(unsigned char *)(this + 82);
        *(unsigned char *)(this + 82) = 1;
        *(unsigned char *)(this + 73) = 1;
        uint64_t v5 = *(void *)(v3 + 240);
        char v6 = 1;
        this = WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::SetIsVisible>(v5, &v6, *(void *)(*(void *)(v3 + 16) + 1928), 0);
        if (!v1[74] || !v1[75]) {
          v1[74] = 0;
        }
        v1[82] = v4;
      }
    }
  }
  return this;
}

void WebKit::WebInspectorUIProxy::sendMessageToBackend(WebKit::WebInspectorUIProxy *this, const WTF::String *a2)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      Inspector::BackendDispatcher::dispatch(*(Inspector::BackendDispatcher **)(*(void *)(v3 + 1128) + 8), a2);
      uint64_t v5 = *(const void **)(v3 - 8);
      CFRelease(v5);
    }
  }
}

void WebKit::WebInspectorUIProxy::frontendLoaded(WebKit::WebInspectorUIProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      char v4 = *(WebKit::WebAutomationSession **)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(v2 + 32) + 24))
                                            + 320);
      if (v4) {
        WebKit::WebAutomationSession::inspectorFrontendLoaded(v4, (const WebKit::WebPageProxy *)(v2 - 16));
      }
      uint64_t v5 = *((void *)this + 7);
      if (v5) {
        (*(void (**)(uint64_t, WebKit::WebInspectorUIProxy *))(*(void *)v5 + 24))(v5, this);
      }
      char v6 = *(const void **)(v2 - 8);
      CFRelease(v6);
    }
  }
}

void WebKit::WebInspectorUIProxy::attachAvailabilityChanged(WebKit::WebInspectorUIProxy *this, int a2)
{
  int v2 = *((unsigned __int8 *)this + 75);
  if (*((unsigned char *)this + 74)) {
    a2 = 1;
  }
  *((unsigned char *)this + 75) = a2;
  if (v2 != a2)
  {
    uint64_t v5 = *((void *)this + 6);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        CFRetain(*(CFTypeRef *)(v6 - 8));
        if (!*((unsigned char *)this + 72))
        {
          uint64_t v7 = *(void *)(v6 + 240);
          char v8 = *((unsigned char *)this + 75) ^ 1;
          WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::SetDockingUnavailable>(v7, &v8, *(void *)(*(void *)(v6 + 16) + 1928));
        }
        CFRelease(*(CFTypeRef *)(v6 - 8));
      }
    }
  }
}

uint64_t WebKit::WebInspectorUIProxy::openURLExternally(WebKit::WebInspectorUIProxy *this, const WTF::String *a2)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    return (*(uint64_t (**)(uint64_t, WebKit::WebInspectorUIProxy *, const WTF::String *))(*(void *)result
  }
                                                                                                  + 16))(result, this, a2);
  return result;
}

void *WebKit::WebInspectorUIProxy::setInspectorPageDeveloperExtrasEnabled(void *this, BOOL a2)
{
  BOOL v4 = a2;
  uint64_t v2 = this[6];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      return WebKit::WebPreferences::setDeveloperExtrasEnabled(*(WebKit::WebPreferences **)(v3 + 256), &v4);
    }
  }
  return this;
}

void WebKit::WebInspectorUIProxy::elementSelectionChanged(WebKit::WebInspectorUIProxy *this, char a2)
{
  *((unsigned char *)this + 79) = a2;
  if (*((unsigned char *)this + 80))
  {
    *((unsigned char *)this + 80) = 0;
    if (!*((unsigned char *)this + 73)) {
      WebKit::WebInspectorUIProxy::close(this);
    }
  }
  else if ((a2 & 1) == 0)
  {
    uint64_t v2 = *((void *)this + 6);
    if (v2)
    {
      if (*(void *)(v2 + 8))
      {
        if (*((unsigned char *)this + 78))
        {
          *((unsigned char *)this + 78) = 0;
        }
        else if (!*((unsigned char *)this + 73))
        {
          WebKit::WebInspectorUIProxy::open((uint64_t)this);
        }
      }
    }
  }
}

uint64_t WebKit::WebInspectorUIProxy::timelineRecordingChanged(uint64_t this, char a2)
{
  *(unsigned char *)(this + 76) = a2;
  return this;
}

void WebKit::WebInspectorUIProxy::setDeveloperPreferenceOverride(uint64_t a1, int a2, __int16 a3)
{
  if (a2 == 2)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    if (!v11) {
      return;
    }
    uint64_t v12 = *(void *)(v11 + 8);
    if (!v12) {
      return;
    }
    char v8 = (WebKit::WebPageProxy *)(v12 - 16);
    CFRetain(*(CFTypeRef *)(v12 - 8));
    uint64_t v13 = WebKit::WebPageProxy::userMediaPermissionRequestManager(v8);
    *((_WORD *)v13 + 136) = a3;
    WebKit::UserMediaPermissionRequestManagerProxy::syncWithWebCorePrefs(v13);
  }
  else
  {
    int v4 = a3;
    int v5 = HIBYTE(a3);
    if (a2 == 1)
    {
      uint64_t v14 = *(void *)(a1 + 40);
      if (!v14) {
        return;
      }
      uint64_t v15 = *(void *)(v14 + 8);
      if (!v15) {
        return;
      }
      char v8 = (WebKit::WebPageProxy *)(v15 - 16);
      CFRetain(*(CFTypeRef *)(v15 - 8));
      if (v5) {
        BOOL v16 = v4 == 0;
      }
      else {
        BOOL v16 = 1;
      }
      char v17 = !v16;
      WebKit::WebsiteDataStore::setResourceLoadStatisticsDebugMode(*(WebKit::WebsiteDataStore **)(v15 + 296), v17);
    }
    else
    {
      if (a2) {
        return;
      }
      uint64_t v6 = *(void *)(a1 + 40);
      if (!v6) {
        return;
      }
      uint64_t v7 = *(void *)(v6 + 8);
      if (!v7) {
        return;
      }
      char v8 = (WebKit::WebPageProxy *)(v7 - 16);
      CFRetain(*(CFTypeRef *)(v7 - 8));
      if (v5) {
        BOOL v9 = v4 == 0;
      }
      else {
        BOOL v9 = 1;
      }
      char v10 = !v9;
      WebKit::WebsiteDataStore::setPrivateClickMeasurementDebugMode(*(WebKit::WebsiteDataStore **)(v7 + 296), v10);
    }
  }
  uint64_t v18 = (const void *)*((void *)v8 + 1);

  CFRelease(v18);
}

uint64_t WebKit::WebInspectorUIProxy::save(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(v4 + 272);
  {
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebInspectorUIProxy::load(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(v6 + 272);
  {
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, a3);
  if (result && *(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, MEMORY[0x1E4F30978]);
    char v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);
    return v10(v9);
  }
  return result;
}

unsigned int *WebKit::WebInspectorUIProxy::pickColorFromScreen(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(v5 + 272);
  {
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, a3);
  LOBYTE(v10) = 0;
  char v11 = 0;
  uint64_t v7 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 16))(v7, &v10);
  uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  if (v11 && (v10 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v9);
    }
  }
  return result;
}

void WebKit::WebInspectorUIProxy::evaluateInFrontendForTesting(WebKit::WebInspectorUIProxy *this, const WTF::String *a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      uint64_t v5 = *(void *)(v3 + 240);
      uint64_t v6 = (uint64_t *)a2;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::EvaluateInFrontendForTesting>(v5, &v6, *(void *)(*(void *)(v3 + 16) + 1928), 0);
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

uint64_t WebKit::GPUProcessProxy::type(WebKit::GPUProcessProxy *this)
{
  return 0;
}

const char *WebKit::GPUProcessProxy::processName(WebKit::GPUProcessProxy *this)
{
  return "GPU";
}

uint64_t WebKit::InspectorTargetProxy::type(WebKit::InspectorTargetProxy *this)
{
  return *((unsigned __int8 *)this + 48);
}

uint64_t API::ObjectImpl<(API::Object::Type)71>::type()
{
  return 71;
}

uint64_t WebKit::WebInspectorUIProxy::connectionType(WebKit::WebInspectorUIProxy *this)
{
  return 1;
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUIProxy::connectionType(WebKit::WebInspectorUIProxy *this)
{
  return 1;
}

void WebKit::WebExtensionDataRecord::~WebExtensionDataRecord(WebKit::WebExtensionDataRecord *this, void *a2)
{
  *(void *)this = &unk_1EE9E3340;
  uint64_t v3 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
}

{
  const void *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE9E3340;
  uint64_t v3 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)116>::type()
{
  return 116;
}

uint64_t std::default_delete<WebKit::UIGamepad>::operator()[abi:sn180100](WTF *a1, void *a2)
{
  uint64_t v3 = *((void *)a1 + 8);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 40, a2);
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, v4);
  uint64_t v6 = (WTF::StringImpl *)*((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }

  return WTF::fastFree(a1, v5);
}

uint64_t WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::SharedGamepadValue>::destruct(*(WTF **)a1, (void *)(*(void *)a1 + 8 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WTF::VectorDestructor<true,WebCore::SharedGamepadValue>::destruct(WTF *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (WTF **)result;
    do
    {
      uint64_t result = *v3;
      *uint64_t v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1) {
          uint64_t result = (WTF *)WTF::fastFree(result, a2);
        }
        else {
          --*(_DWORD *)result;
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::WebExtensionDataType>>,WebKit::WebExtensionDataType>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 8);
    int v4 = *a2;
    unsigned int v5 = 9 * ((~(v4 << 15) + v4) ^ ((~(v4 << 15) + v4) >> 10));
    unsigned int v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
    uint64_t v7 = (v6 ^ HIWORD(v6)) & v3;
    int v8 = *(unsigned __int8 *)(v2 + 16 * v7);
    if (v8 == v4) {
      return *(void *)(v2 + 16 * v7 + 8);
    }
    int v9 = 1;
    while (v8 != 255)
    {
      uint64_t v7 = (v7 + v9) & v3;
      int v8 = *(unsigned __int8 *)(v2 + 16 * v7);
      ++v9;
      if (v8 == v4) {
        return *(void *)(v2 + 16 * v7 + 8);
      }
    }
  }
  return 0;
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::GPUProcessProxy::keepProcessAliveTemporarily(void)::$_0,void>::call()
{
  {
    uint64_t v0 = WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy;
    WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy = 0;
    if (v0) {
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v0 + 16));
    }
  }
  else
  {
    WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy = 0;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<BOOL,BOOL,BOOL,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,BOOL,BOOL,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, char *a2)
{
  char v4 = *a2;
  unsigned int v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6) {
    goto LABEL_9;
  }
  *unsigned int v5 = v4;
  char v7 = a2[1];
  int v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198FA83D0);
  }
  unsigned char *v8 = v7;
  char v10 = a2[2];
  char v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x198FA83B0);
  }
  unsigned char *v11 = v10;
  uint64_t v13 = (uint64_t *)*((void *)a2 + 1);

  return IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, v13);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::UpdateCaptureAccess,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E36C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::UpdateCaptureAccess,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E36C8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::UpdateCaptureAccess,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::CreateGPUConnectionToWebProcess,WebKit::GPUProcessProxy::createGPUProcessConnection(WebKit::WebProcessProxy &,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&)::$_0>(WebKit::GPUProcessProxy::createGPUProcessConnection(WebKit::WebProcessProxy &,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E36F0;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::SharedPreferencesForWebProcessDidChange,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E3718;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::SharedPreferencesForWebProcessDidChange,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E3718;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::SharedPreferencesForWebProcessDidChange,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::WebProcessConnectionCountForTesting,WTF::CompletionHandler<void ()(unsigned long long)>>(WTF::CompletionHandler<void ()(unsigned long long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E3740;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::WebProcessConnectionCountForTesting,WTF::CompletionHandler<void ()(unsigned long long)>>(WTF::CompletionHandler<void ()(unsigned long long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E3740;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::WebProcessConnectionCountForTesting,WTF::CompletionHandler<void ()(unsigned long long)>>(WTF::CompletionHandler<void ()(unsigned long long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2 && (unint64_t v3 = IPC::Decoder::decode<std::tuple<unsigned long long>>(a2), v4))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, unint64_t))(*(void *)v5 + 16))(v5, v3);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E3768;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E3768;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::RequestBitmapImageForCurrentTime,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E3790;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::RequestBitmapImageForCurrentTime,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E3790;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::MachSendRight *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::RequestBitmapImageForCurrentTime,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>(a2, v6);
    if (v7)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v6);
      uint64_t result = (WTF::MachSendRight *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v7) {
        return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v6);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(v5);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, unint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = result;
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a2;
  if (!a2) {
    return v3;
  }
  if (!(a2 >> 29))
  {
    uint64_t v4 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v4;
    uint64_t v5 = *(unsigned int *)(v3 + 12);
    if (v5)
    {
      uint64_t v6 = (uint64_t *)v4;
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = WTF::fastMalloc((WTF *)0x10);
        *(_DWORD *)uint64_t v8 = 1;
        *(void *)(v8 + 8) = 0;
        *v6++ = v8;
        v7 -= 8;
      }
      while (v7);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::UIGamepadProvider::*&)(void),WebKit::UIGamepadProvider*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  int v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t std::construct_at[abi:sn180100]<WebKit::GamepadData,WebKit::GamepadData,WebKit::GamepadData*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    *(_DWORD *)uint64_t result = *(_DWORD *)a2;
    uint64_t v2 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(result + 8) = v2;
    uint64_t v3 = *(void *)(a2 + 16);
    *(void *)(a2 + ++*(_DWORD *)(this + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + ++*(_DWORD *)(this + 16) = v3;
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    *(void *)(result + 24) = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    *(_DWORD *)(result + 32) = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    *(_DWORD *)(result + 36) = v4;
    *(void *)(result + ++*(_DWORD *)(this + 40) = 0;
    *(void *)(result + 48) = 0;
    uint64_t v5 = *(void *)(a2 + 40);
    *(void *)(a2 + ++*(_DWORD *)(this + 40) = 0;
    *(void *)(result + ++*(_DWORD *)(this + 40) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    *(_DWORD *)(result + 48) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 52) = 0;
    *(_DWORD *)(result + 52) = v5;
    *(void *)(result + 56) = *(void *)(a2 + 56);
    *(void *)(result + 64) = 0;
    uint64_t v6 = *(void *)(a2 + 64);
    *(void *)(a2 + 64) = 0;
    *(void *)(result + 64) = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<Inspector::FrontendChannel::ConnectionType,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::Show>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1847;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  char v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::Close>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1844;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  char v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::UpdateConnection>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1842;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  char v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::ShowConsole>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1848;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  char v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::ShowResources>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1850;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  char v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::SetAttached>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1845;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedBottom>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1825;
  *((void *)v4 + 1) = a2;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v12 = v4;
  LOBYTE(v10) = 0;
  char v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  unint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedRight>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1827;
  *((void *)v4 + 1) = a2;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v12 = v4;
  LOBYTE(v10) = 0;
  char v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  unint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedLeft>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1826;
  *((void *)v4 + 1) = a2;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v12 = v4;
  LOBYTE(v10) = 0;
  char v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  unint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::Detached>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1828;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  char v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::StopPageProfiling>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1854;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  char v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::StartPageProfiling>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1852;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  char v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::StopElementSelection>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1853;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  char v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::StartElementSelection>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1851;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  char v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::SetDockingUnavailable>(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1833;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v14 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, a2);
  LOBYTE(v12) = 0;
  char v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  unint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::SetIsVisible>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1834;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::SetDiagnosticLoggingAvailable>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1832;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::EvaluateInFrontendForTesting>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1830;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::inspectorLevelForPage(WebKit *this, WebKit::WebPageProxy *a2)
{
  uint64_t v5 = this;
  if (!this) {
    return 1;
  }
  {
    WebKit::pageLevelMap(void)::map = 0;
  }
  uint64_t v2 = WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>,NSObject  {objcproto13OS_xpc_object} const*>(&WebKit::pageLevelMap(void)::map, &v5);
  {
    uint64_t v3 = WebKit::pageLevelMap(void)::map;
    if (WebKit::pageLevelMap(void)::map) {
      uint64_t v3 = WebKit::pageLevelMap(void)::map + 16 * *(unsigned int *)(WebKit::pageLevelMap(void)::map - 4);
    }
  }
  else
  {
    uint64_t v3 = 0;
    WebKit::pageLevelMap(void)::map = 0;
  }
  if (v3 == v2) {
    return 1;
  }
  else {
    return (*(_DWORD *)(v2 + 8) + 1);
  }
}

uint64_t *WebKit::trackInspectorPage(WebKit *this, WebKit::WebPageProxy *a2, WebKit::WebPageProxy *a3)
{
  uint64_t v6 = this;
  {
    WebKit::pageLevelMap(void)::map = 0;
  }
  int v5 = WebKit::inspectorLevelForPage(a2, a2);
  return WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::inlineSet<WebKit::WebPageProxy * const&,unsigned int>(&WebKit::pageLevelMap(void)::map, (uint64_t *)&v6, &v5, (uint64_t)v4);
}

uint64_t *WebKit::untrackInspectorPage(WebKit *this, WebKit::WebPageProxy *a2)
{
  uint64_t v4 = this;
  {
    WebKit::pageLevelMap(void)::map = 0;
  }
  unint64_t result = (uint64_t *)WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>,NSObject  {objcproto13OS_xpc_object} const*>(&WebKit::pageLevelMap(void)::map, &v4);
  if (WebKit::pageLevelMap(void)::map)
  {
    uint64_t v3 = WebKit::pageLevelMap(void)::map + 16 * *(unsigned int *)(WebKit::pageLevelMap(void)::map - 4);
    if ((uint64_t *)v3 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 0;
  }
  if ((uint64_t *)v3 != result) {
    return WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::remove(&WebKit::pageLevelMap(void)::map, result);
  }
  return result;
}

__CFString *WebKit::bundleIdentifierForSandboxBroker(WebKit *this)
{
  WebCore::applicationBundleIdentifier((uint64_t *)&v8, this);
  char v2 = MEMORY[0x19972E990](v8, "com.apple.SafariTechnologyPreview", 33);
  uint64_t v3 = v8;
  uint64_t v8 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      uint64_t v3 = (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v1);
      if (v2) {
        return @"com.apple.SafariTechnologyPreview.SandboxBroker";
      }
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  if (v2) {
    return @"com.apple.SafariTechnologyPreview.SandboxBroker";
  }
LABEL_7:
  WebCore::applicationBundleIdentifier((uint64_t *)&v8, v3);
  int v6 = MEMORY[0x19972E990](v8, "com.apple.Safari.automation", 27);
  uint64_t v7 = v8;
  uint64_t v8 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  if (v6) {
    return @"com.apple.Safari.automation.SandboxBroker";
  }
  else {
    return @"com.apple.Safari.SandboxBroker";
  }
}

void WebKit::WebPageDebuggable::~WebPageDebuggable(WebKit::WebPageDebuggable *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  *(void *)this = MEMORY[0x1E4F309B0] + 16;
  int v5 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5) {
    CFRelease(v5);
  }

  MEMORY[0x1F40EC3A8](this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebPageDebuggable::~WebPageDebuggable(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebPageDebuggable::connect(uint64_t a1, uint64_t a2, char a3, char a4)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 8));
  uint64_t v8 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v8 = &unk_1EE9E39E8;
  *(void *)(v8 + 8) = a1;
  *(void *)(v8 + ++*(_DWORD *)(this + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(unsigned char *)(v8 + 32) = a3;
  *(unsigned char *)(v8 + 33) = a4;
  uint64_t v10 = v8;
  WTF::callOnMainRunLoopAndWait();
  uint64_t result = v10;
  if (v10) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return result;
}

uint64_t WebKit::WebPageDebuggable::disconnect(uint64_t a1, uint64_t a2)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 8));
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v4 = &unk_1EE9E3A10;
  v4[1] = a1;
  v4[2] = a1;
  v4[3] = a2;
  int v6 = v4;
  WTF::callOnMainRunLoopAndWait();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::WebPageDebuggable::dispatchMessageFromRemote(uint64_t a1)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 8));
  WTF::String::isolatedCopy();
  char v2 = (void *)WTF::fastMalloc((WTF *)0x20);
  *char v2 = &unk_1EE9E3A38;
  v2[1] = a1;
  v2[2] = a1;
  v2[3] = v5;
  int v6 = v2;
  WTF::callOnMainRunLoopAndWait();
  if (v6) {
    (*(void (**)(void *))(*v6 + 8))(v6);
  }
  return 0;
}

uint64_t WebKit::WebPageDebuggable::setIndicating(atomic_uchar *volatile *this, char a2)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 1);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v4 = &unk_1EE9E3A60;
  *(void *)(v4 + 8) = this;
  *(void *)(v4 + ++*(_DWORD *)(this + 16) = this;
  *(unsigned char *)(v4 + 24) = a2;
  uint64_t v6 = v4;
  WTF::callOnMainRunLoopAndWait();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void WebKit::WebPageInspectorController::disconnectAllFrontends(Inspector::FrontendRouter **this)
{
  if (*((_DWORD *)*this + 5))
  {
    Inspector::AgentRegistry::willDestroyFrontendAndBackend();
    Inspector::FrontendRouter::disconnectAllFrontends(*this);
    uint64_t v2 = *((void *)this[4] + 1);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    CFRetain(*(CFTypeRef *)(v3 + 8));
    *(_DWORD *)(v3 + 900) = *((_DWORD *)*this + 5);
    uint64_t v4 = *(Inspector::RemoteControllableTarget **)(v3 + 1152);
    if (v4) {
      Inspector::RemoteControllableTarget::update(v4);
    }
    if (v2)
    {
      int v5 = *(const void **)(v2 - 8);
      CFRelease(v5);
    }
  }
}

void WebKit::WebPageInspectorController::connectFrontend(Inspector::FrontendRouter **a1)
{
  WebKit::WebPageInspectorController::createLazyAgents(a1);
  int v2 = *((_DWORD *)*a1 + 5);
  Inspector::FrontendRouter::connectFrontend();
  if (!v2) {
    Inspector::AgentRegistry::didCreateFrontendAndBackend();
  }
  uint64_t v3 = *((void *)a1[4] + 1);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  int v5 = *a1;
  *(_DWORD *)(v4 + 900) = *((_DWORD *)*a1 + 5);
  if (Inspector::FrontendRouter::hasLocalFrontend(v5))
  {
    uint64_t v6 = *(Inspector::RemoteControllableTarget **)(v4 + 1152);
    if (v6) {
      Inspector::RemoteControllableTarget::update(v6);
    }
  }
  if (v3)
  {
    uint64_t v7 = *(const void **)(v3 - 8);
    CFRelease(v7);
  }
}

void *WebKit::WebPageInspectorController::createLazyAgents(void *this)
{
  if (!*((unsigned char *)this + 64))
  {
    *((unsigned char *)this + 64) = 1;
    long long v5 = *(_OWORD *)this;
    uint64_t v1 = (atomic_uint *)this[4];
    atomic_fetch_add(v1, 1u);
    uint64_t v6 = v1;
    int v2 = (void *)WTF::fastMalloc((WTF *)0x30);
    uint64_t v4 = WebKit::InspectorBrowserAgent::InspectorBrowserAgent(v2, (uint64_t *)&v5);
    Inspector::AgentRegistry::append();
    this = v4;
    if (v4) {
      this = (void *)(*(uint64_t (**)(void *))(*v4 + 8))(v4);
    }
    uint64_t v6 = 0;
    if (v1)
    {
      if (atomic_fetch_add(v1, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v1);
        return (void *)WTF::fastFree((WTF *)v1, v3);
      }
    }
  }
  return this;
}

void WebKit::WebPageInspectorController::disconnectFrontend(void *a1)
{
  Inspector::FrontendRouter::disconnectFrontend();
  if (*(_DWORD *)(*a1 + 20))
  {
    uint64_t v2 = *(void *)(a1[4] + 8);
    uint64_t v3 = v2 - 16;
    if (v2) {
      uint64_t v4 = v2 - 16;
    }
    else {
      uint64_t v4 = 0;
    }
    CFRetain(*(CFTypeRef *)(v4 + 8));
    *(_DWORD *)(v4 + 900) = *(_DWORD *)(*a1 + 20);
  }
  else
  {
    Inspector::AgentRegistry::willDestroyFrontendAndBackend();
    uint64_t v5 = *(void *)(a1[4] + 8);
    uint64_t v3 = v5 - 16;
    if (v5) {
      uint64_t v6 = v5 - 16;
    }
    else {
      uint64_t v6 = 0;
    }
    CFRetain(*(CFTypeRef *)(v6 + 8));
    *(_DWORD *)(v6 + 900) = *(_DWORD *)(*a1 + 20);
    uint64_t v7 = *(Inspector::RemoteControllableTarget **)(v6 + 1152);
    if (v7) {
      Inspector::RemoteControllableTarget::update(v7);
    }
  }
  uint64_t v8 = *(const void **)(v3 + 8);

  CFRelease(v8);
}

WTF::StringImpl **WebKit::WebPageInspectorController::destroyInspectorTarget(WebKit::WebPageInspectorController *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = (uint64_t *)((char *)this + 48);
  uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 6, a2, a3);
  uint64_t v6 = result;
  uint64_t v7 = (WTF::StringImpl **)*((void *)this + 6);
  if (v7) {
    v7 += 2 * *((unsigned int *)v7 - 1);
  }
  if (v7 != result)
  {
    uint64_t result = (WTF::StringImpl **)Inspector::InspectorTargetAgent::targetDestroyed(*((Inspector::InspectorTargetAgent **)this + 5), result[1]);
    uint64_t v8 = *((void *)this + 6);
    if (v8)
    {
      uint64_t v9 = (WTF::StringImpl **)(v8 + 16 * *(unsigned int *)(v8 - 4));
      if (v9 == v6) {
        return result;
      }
    }
    else
    {
      if (!v6) {
        return result;
      }
      uint64_t v9 = 0;
    }
    if (v9 != v6)
    {
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v4, v6);
    }
  }
  return result;
}

BOOL WebKit::WebPageInspectorController::shouldPauseLoading(WebKit::WebPageInspectorController *this, const WebKit::ProvisionalPageProxy *a2)
{
  if (!*(_DWORD *)(*(void *)this + 20)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)((char *)this + 48);
  WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, *((void *)a2 + 4), &v8);
  uint64_t v5 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v2, &v8, v3);
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return *((unsigned char *)v5 + 24) != 0;
}

uint64_t WebKit::WebPageInspectorController::setContinueLoadingCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 48);
  WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, *(void *)(a2 + 32), &v7);
  WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v2, &v7, v3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return Inspector::InspectorTarget::setResumeCallback();
}

WTF::StringImpl *WebKit::WebPageInspectorController::didCreateProvisionalPage(WebKit::WebPageInspectorController *this, WebKit::ProvisionalPageProxy *a2)
{
  WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, *((void *)a2 + 4), &v9);
  WebKit::InspectorTargetProxy::create((uint64_t)a2, (_DWORD **)&v9, 0, (uint64_t *)&v10);
  WebKit::WebPageInspectorController::addTarget((uint64_t)this, &v10);
  uint64_t v5 = v10;
  uint64_t v10 = 0;
  if (v5)
  {
    WebKit::InspectorTargetProxy::~InspectorTargetProxy(v5, v4);
    WTF::fastFree(v6, v7);
  }
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageInspectorController::willDestroyProvisionalPage(WebKit::WebPageInspectorController *this, const WebKit::ProvisionalPageProxy *a2)
{
  WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, *((void *)a2 + 4), &v6);
  WebKit::WebPageInspectorController::destroyInspectorTarget(this, &v6, v3);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageInspectorController::didCommitProvisionalPage(uint64_t a1, unint64_t a2, unint64_t a3)
{
  WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, a2, &v33);
  WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, a3, &v32);
  uint64_t v5 = (uint64_t *)(a1 + 48);
  uint64_t v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 48), &v32, v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(WebKit::InspectorTargetProxy **)(v7 + 8);
  *(void *)(v7 + 8) = 0;
  uint64_t v31 = v9;
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10)
  {
    uint64_t v11 = v10 + 16 * *(unsigned int *)(v10 - 4);
    if (v11 == v7) {
      goto LABEL_8;
    }
  }
  else
  {
    if (!v7) {
      goto LABEL_8;
    }
    uint64_t v11 = 0;
  }
  if (v11 != v7) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(a1 + 48), (WTF::StringImpl **)v7);
  }
LABEL_8:
  uint64_t v12 = (unsigned int *)*((void *)v9 + 7);
  *((void *)v9 + 7) = 0;
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, v8);
  }
  Inspector::InspectorTargetAgent::didCommitProvisionalTarget(*(Inspector::InspectorTargetAgent **)(a1 + 40), (const WTF::String *)&v33, (const WTF::String *)&v32);
  uint64_t v14 = *(void *)(a1 + 48);
  if (v14)
  {
    uint64_t v15 = *(unsigned int *)(v14 - 4);
    uint64_t v16 = v14 + 16 * v15;
    if (*(_DWORD *)(v14 - 12))
    {
      uint64_t v17 = *(void *)(a1 + 48);
      if (v15)
      {
        uint64_t v18 = 16 * v15;
        uint64_t v17 = *(void *)(a1 + 48);
        while ((unint64_t)(*(void *)v17 + 1) <= 1)
        {
          v17 += 16;
          v18 -= 16;
          if (!v18)
          {
            uint64_t v17 = v16;
            goto LABEL_18;
          }
        }
      }
      goto LABEL_18;
    }
    uint64_t v17 = v14 + 16 * v15;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v16 = v14 + 16 * v15;
  if (v14)
  {
LABEL_18:
    uint64_t v19 = v14 + 16 * *(unsigned int *)(v14 - 4);
    goto LABEL_23;
  }
  uint64_t v19 = 0;
LABEL_23:
  if (v19 != v17)
  {
    do
    {
      Inspector::InspectorTargetAgent::targetDestroyed(*(Inspector::InspectorTargetAgent **)(a1 + 40), *(Inspector::InspectorTarget **)(v17 + 8));
      uint64_t v20 = v17 + 16;
      uint64_t v17 = v16;
      if (v20 != v16)
      {
        uint64_t v17 = v20;
        while ((unint64_t)(*(void *)v17 + 1) <= 1)
        {
          v17 += 16;
          if (v17 == v16)
          {
            uint64_t v17 = v16;
            break;
          }
        }
      }
    }
    while (v17 != v19);
    uint64_t v14 = *v5;
  }
  if (v14)
  {
    *uint64_t v5 = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v13);
  }
  uint64_t v21 = (WTF::StringImpl *)*((void *)v31 + 5);
  if (v21) {
    *(_DWORD *)v21 += 2;
  }
  uint64_t v30 = v21;
  WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::inlineSet<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>((uint64_t *)(a1 + 48), &v30, (const WTF::StringImpl *)&v31, (uint64_t)v29);
  int v23 = v30;
  uint64_t v30 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v22);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  char v24 = v31;
  uint64_t v31 = 0;
  if (v24)
  {
    WebKit::InspectorTargetProxy::~InspectorTargetProxy(v24, v22);
    WTF::fastFree(v25, v26);
  }
  uint64_t v27 = v32;
  uint64_t v32 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v22);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  uint64_t result = v33;
  uint64_t v33 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::WebPageInspectorController::setEnabledBrowserAgent(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 56) != a2)
  {
    *(void *)(a1 + 56) = a2;
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    if (v3) {
      uint64_t v4 = v3 - 16;
    }
    else {
      uint64_t v4 = 0;
    }
    CFRetain(*(CFTypeRef *)(v4 + 8));
    uint64_t v5 = **(void **)(v4 + 104);
    if (*(void *)(a1 + 56))
    {
      (*(void (**)(void))(v5 + 592))();
      if (!v3) {
        return;
      }
    }
    else
    {
      (*(void (**)(void))(v5 + 600))();
      if (!v3) {
        return;
      }
    }
    uint64_t v6 = *(const void **)(v3 - 8);
    CFRelease(v6);
  }
}

uint64_t WebKit::InspectorBrowserAgent::extensionsEnabled(uint64_t a1, void **a2)
{
  uint64_t v3 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  uint64_t v32 = WTF::JSONImpl::ArrayBase::ArrayBase(v3);
  uint64_t v4 = (WTF::JSONImpl::Object *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  if (*a2) {
    uint64_t v8 = (uint64_t)&(*a2)[2 * *((unsigned int *)*a2 - 1)];
  }
  else {
    uint64_t v8 = 0;
  }
  if ((WTF::JSONImpl::Object *)v8 != v4)
  {
    do
    {
      WTF::JSONImpl::Object::create(v35, v4);
      uint64_t v9 = v35[0];
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((uint64_t *)&v34, v5, v10);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v9 + 16), &v33, (uint64_t *)&v34, (uint64_t)v35);
      if (v36)
      {
        uint64_t v12 = (uint64_t *)(v9 + 24);
        uint64_t v13 = *(unsigned int *)(v9 + 36);
        if (v13 == *(_DWORD *)(v9 + 32))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v12, (unint64_t)&v33);
        }
        else
        {
          uint64_t v14 = *v12;
          uint64_t v15 = v33;
          if (v33) {
            *(_DWORD *)v33 += 2;
          }
          *(void *)(v14 + 8 * v13) = v15;
          *(_DWORD *)(v9 + 36) = v13 + 1;
        }
      }
      uint64_t v16 = v34;
      uint64_t v34 = 0;
      if (v16)
      {
        if (*v16 == 1) {
          WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*v16;
        }
      }
      uint64_t v17 = v33;
      uint64_t v33 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v11);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((uint64_t *)&v34, (WTF::JSONImpl::Object *)((char *)v5 + 8), v18);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v9 + 16), &v33, (uint64_t *)&v34, (uint64_t)v35);
      if (v36)
      {
        uint64_t v20 = (uint64_t *)(v9 + 24);
        uint64_t v21 = *(unsigned int *)(v9 + 36);
        if (v21 == *(_DWORD *)(v9 + 32))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v20, (unint64_t)&v33);
        }
        else
        {
          uint64_t v22 = *v20;
          int v23 = v33;
          if (v33) {
            *(_DWORD *)v33 += 2;
          }
          *(void *)(v22 + 8 * v21) = v23;
          *(_DWORD *)(v9 + 36) = v21 + 1;
        }
      }
      char v24 = v34;
      uint64_t v34 = 0;
      if (v24)
      {
        if (*v24 == 1) {
          WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*v24;
        }
      }
      uint64_t v25 = v33;
      uint64_t v33 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v19);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
      uint64_t v4 = (WTF::JSONImpl::Object *)(v32 + 16);
      unint64_t v26 = *(unsigned int *)(v32 + 28);
      if (v26 == *(_DWORD *)(v32 + 24))
      {
        unint64_t v27 = v26 + (v26 >> 2);
        if (v27 >= 0x10) {
          unint64_t v28 = v27 + 1;
        }
        else {
          unint64_t v28 = 16;
        }
        if (v28 <= v26 + 1) {
          unint64_t v29 = v26 + 1;
        }
        else {
          unint64_t v29 = v28;
        }
        uint64_t v4 = (WTF::JSONImpl::Object *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v4, v29);
        unint64_t v26 = *(unsigned int *)(v32 + 28);
        uint64_t v30 = (uint64_t *)(*(void *)(v32 + 16) + 8 * v26);
      }
      else
      {
        uint64_t v30 = (uint64_t *)(*(void *)v4 + 8 * v26);
      }
      uint64_t *v30 = v9;
      *(_DWORD *)(v32 + 28) = v26 + 1;
      while (1)
      {
        uint64_t v5 = (WTF::JSONImpl::Object *)((char *)v5 + 16);
        if (v5 == v7) {
          break;
        }
        if ((unint64_t)(*(void *)v5 + 1) > 1) {
          goto LABEL_47;
        }
      }
      uint64_t v5 = v7;
LABEL_47:
      ;
    }
    while (v5 != (WTF::JSONImpl::Object *)v8);
  }
  Inspector::BrowserFrontendDispatcher::extensionsEnabled();
  uint64_t result = v32;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1) {
      return WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v32;
    }
  }
  return result;
}

uint64_t WebKit::InspectorBrowserAgent::extensionsDisabled(uint64_t a1, void **a2)
{
  uint64_t v3 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  uint64_t v10 = (_DWORD *)WTF::JSONImpl::ArrayBase::ArrayBase(v3);
  uint64_t v4 = (WTF::JSONImpl::Value *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  if (*a2) {
    uint64_t v8 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  }
  else {
    uint64_t v8 = 0;
  }
  if ((WTF::JSONImpl::Value *)v8 != v4)
  {
    do
    {
      WTF::JSONImpl::ArrayOf<WTF::String>::addItem<WTF::String>((uint64_t)v3, v5);
      while (1)
      {
        uint64_t v5 = (WTF::JSONImpl::Value *)((char *)v5 + 8);
        if (v5 == v7) {
          break;
        }
        if ((unint64_t)(*(void *)v5 + 1) > 1) {
          goto LABEL_9;
        }
      }
      uint64_t v5 = v7;
LABEL_9:
      ;
    }
    while (v5 != (WTF::JSONImpl::Value *)v8);
  }
  Inspector::BrowserFrontendDispatcher::extensionsDisabled();
  uint64_t result = (uint64_t)v10;
  if (v10)
  {
    if (*v10 == 1) {
      return WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v10;
    }
  }
  return result;
}

void *WebKit::InspectorBrowserAgent::InspectorBrowserAgent(void *a1, uint64_t *a2)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (v10)
  {
    int v5 = *(_DWORD *)v10;
    *(_DWORD *)v10 += 2;
    *a1 = &unk_1EE9E38F0;
    a1[1] = v10;
    if (v5) {
      *(_DWORD *)uint64_t v10 = v5;
    }
    else {
      WTF::StringImpl::destroy(v10, v4);
    }
  }
  else
  {
    a1[1] = 0;
  }
  *a1 = &unk_1EE9E3870;
  a1[2] = &unk_1EE9E38C0;
  uint64_t v6 = *a2;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)8);
  void *v7 = v6;
  a1[3] = v7;
  Inspector::BrowserBackendDispatcher::create();
  a1[4] = v10;
  uint64_t v8 = (atomic_uint *)a2[2];
  atomic_fetch_add(v8, 1u);
  a1[5] = v8;
  return a1;
}

void WebKit::InspectorBrowserAgent::~InspectorBrowserAgent(WebKit::InspectorBrowserAgent *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  int v5 = (WTF *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5) {
    WTF::fastFree(v5, a2);
  }
  Inspector::BrowserBackendDispatcherHandler::~BrowserBackendDispatcherHandler((WebKit::InspectorBrowserAgent *)((char *)this + 16));
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E3930;
  *((void *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::InspectorBrowserAgent::~InspectorBrowserAgent(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::InspectorBrowserAgent::~InspectorBrowserAgent(WebKit::InspectorBrowserAgent *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::InspectorBrowserAgent::~InspectorBrowserAgent((WebKit::InspectorBrowserAgent *)((char *)this - 16), a2);

  WTF::fastFree(v2, v3);
}

void WebKit::InspectorBrowserAgent::willDestroyFrontendAndBackend(WebKit::InspectorBrowserAgent *a1)
{
  WebKit::InspectorBrowserAgent::disable(a1, &v3);
  if (v4)
  {
    uint64_t v2 = v3;
    uint64_t v3 = 0;
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v1);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
}

void WebKit::InspectorBrowserAgent::disable(WebKit::InspectorBrowserAgent *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *(void *)(*((void *)this + 5) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(v5 + 1144);
  if (*(WebKit::InspectorBrowserAgent **)(v6 + 56) == this)
  {
    WebKit::WebPageInspectorController::setEnabledBrowserAgent(v6, 0);
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    std::experimental::fundamentals_v3::expected<void,WTF::String>::expected<WTF::ASCIILiteral>((uint64_t)a2, (uint64_t)"Browser domain already disabled", 32);
  }
}

void WebKit::InspectorBrowserAgent::enable(WebKit::InspectorBrowserAgent *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *(void *)(*((void *)this + 5) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(v5 + 1144);
  if (*(WebKit::InspectorBrowserAgent **)(v6 + 56) == this)
  {
    std::experimental::fundamentals_v3::expected<void,WTF::String>::expected<WTF::ASCIILiteral>((uint64_t)a2, (uint64_t)"Browser domain already enabled", 31);
  }
  else
  {
    WebKit::WebPageInspectorController::setEnabledBrowserAgent(v6, (uint64_t)this);
    *a2 = 0;
    a2[8] = 0;
  }
}

void non-virtual thunk to'WebKit::InspectorBrowserAgent::enable(WebKit::InspectorBrowserAgent *this@<X0>, unsigned char *a2@<X8>)
{
}

void non-virtual thunk to'WebKit::InspectorBrowserAgent::disable(WebKit::InspectorBrowserAgent *this@<X0>, unsigned char *a2@<X8>)
{
}

_DWORD *WTF::JSONImpl::ArrayOf<WTF::String>::addItem<WTF::String>(uint64_t a1, WTF::JSONImpl::Value *this)
{
  uint64_t v3 = (uint64_t *)(a1 + 16);
  WTF::JSONImpl::Value::create((uint64_t *)&v9, this, this);
  uint64_t v4 = *(unsigned int *)(a1 + 28);
  if (v4 == *(_DWORD *)(a1 + 24))
  {
    uint64_t v5 = (void *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4 + 1, (unint64_t)&v9);
    uint64_t v4 = *(unsigned int *)(a1 + 28);
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = (_DWORD *)*v5;
    *uint64_t v5 = 0;
  }
  else
  {
    uint64_t v6 = *v3;
    uint64_t v7 = v9;
    uint64_t v9 = 0;
  }
  *(void *)(v6 + 8 * v4) = v7;
  *(_DWORD *)(a1 + 28) = v4 + 1;
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    if (*result == 1) {
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*result;
    }
  }
  return result;
}

uint64_t Inspector::RemoteInspectionTarget::targetRunLoop(Inspector::RemoteInspectionTarget *this)
{
  return *((void *)this + 3);
}

uint64_t std::experimental::fundamentals_v3::expected<void,WTF::String>::expected<WTF::ASCIILiteral>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v4 = MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v4 = v6;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = 1;
  return a1;
}

uint64_t *WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::inlineSet<WebKit::WebPageProxy * const&,unsigned int>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = ~(*a2 << 32) + *a2;
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = *(unsigned int *)(v8 - 4);
        }
        *(void *)a4 = v16;
        *(void *)(a4 + 8) = v8 + 16 * v22;
        *(unsigned char *)(a4 + ++*(_DWORD *)(this + 16) = 0;
        *((_DWORD *)v16 + 2) = *a3;
        return result;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      uint64_t *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  *((_DWORD *)v16 + 2) = *a3;
  uint64_t v20 = *v6;
  if (*v6) {
    int v21 = *(_DWORD *)(v20 - 12) + 1;
  }
  else {
    int v21 = 1;
  }
  *(_DWORD *)(v20 - 12) = v21;
  uint64_t v23 = *v6;
  if (*v6) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_22:
      uint64_t result = (uint64_t *)WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v23 = *v6;
      if (*v6) {
        unint64_t v26 = *(unsigned int *)(v23 - 4);
      }
      else {
        unint64_t v26 = 0;
      }
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_22;
  }
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v23 + 16 * v26;
  *(unsigned char *)(a4 + ++*(_DWORD *)(this + 16) = 1;
  return result;
}

_OWORD *WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = (void *)(v6 + 16 * v11);
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        uint64_t v14 = *a1;
        if (*a1) {
          int v15 = *(_DWORD *)(v14 - 8);
        }
        else {
          int v15 = 0;
        }
        uint64_t v16 = (~(*v13 << 32) + *v13) ^ ((~(*v13 << 32) + *v13) >> 22);
        unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((unint64_t)(v16 + ~(v16 << 13)) >> 8));
        unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
        int v20 = 1;
        do
        {
          unsigned int v21 = v19;
          uint64_t v22 = *(void *)(v14 + 16 * v19);
          unsigned int v19 = (v19 + v20++) & v15;
        }
        while (v22);
        uint64_t v23 = (_OWORD *)(v14 + 16 * v21);
        _OWORD *v23 = *(_OWORD *)v13;
        if (v13 == a3) {
          unint64_t v12 = v23;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return (uint64_t *)WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

BOOL WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::WebPageProxy *>>,WebKit::WebPageProxy *>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  unsigned int v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  uint64_t v8 = *(void *)(v2 + 16 * v7);
  if (v8 == *a2) {
    return 1;
  }
  int v9 = 1;
  do
  {
    BOOL result = v8 != 0;
    if (!v8) {
      break;
    }
    unsigned int v7 = (v7 + v9) & v3;
    uint64_t v8 = *(void *)(v2 + 16 * v7);
    ++v9;
  }
  while (v8 != *a2);
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::name(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E3970;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::name(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E3970;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::name(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      if (*(void *)(v2 + 312))
      {
        WTF::String::isolatedCopy();
        unint64_t v5 = *(WTF::StringImpl ***)(a1 + 24);
        unint64_t v6 = *v5;
        *unint64_t v5 = v7;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2) {
            WTF::StringImpl::destroy(v6, v4);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::url(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E3998;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::url(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E3998;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::url(void)::$_0,void>::call(WTF *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(*((void *)a1 + 1) + 40);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 8)) != 0)
  {
    uint64_t v4 = v3 - 16;
    a1 = (WTF *)CFRetain(*(CFTypeRef *)(v3 - 8));
    if (*(void *)(v3 + 312))
    {
      WTF::String::isolatedCopy();
      unint64_t v6 = (WTF::StringImpl **)*((void *)v1 + 3);
      unsigned int v7 = *v6;
      WTF::StringImpl *v6 = v16;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v5);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      uint64_t v12 = **((void **)v1 + 3);
      if (!v12 || !*(_DWORD *)(v12 + 4))
      {
        WTF::aboutBlankURL(0);
        WTF::String::isolatedCopy();
        uint64_t v14 = (WTF::StringImpl **)*((void *)v1 + 3);
        int v15 = *v14;
        *uint64_t v14 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v13);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
      }
LABEL_22:
      CFRelease(*(CFTypeRef *)(v4 + 8));
      return;
    }
    char v8 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    char v8 = 1;
  }
  WTF::aboutBlankURL(a1);
  WTF::String::isolatedCopy();
  int v10 = (WTF::StringImpl **)*((void *)v1 + 3);
  uint64_t v11 = *v10;
  void *v10 = v16;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  if ((v8 & 1) == 0) {
    goto LABEL_22;
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::hasLocalDebugger(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E39C0;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::hasLocalDebugger(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E39C0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::hasLocalDebugger(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 40);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v3 - 8));
    **(unsigned char **)(a1 + 24) = Inspector::FrontendRouter::hasLocalFrontend(**(Inspector::FrontendRouter ***)(v3 + 1128));
    uint64_t v4 = *(const void **)(v3 - 8);
    CFRelease(v4);
  }
  else
  {
    **(unsigned char **)(a1 + 24) = 0;
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::connect(Inspector::FrontendChannel &,BOOL,BOOL)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E39E8;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::connect(Inspector::FrontendChannel &,BOOL,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E39E8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::connect(Inspector::FrontendChannel &,BOOL,BOOL)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      WebKit::WebPageInspectorController::connectFrontend(*(Inspector::FrontendRouter ***)(v2 + 1128));
      uint64_t v3 = *(const void **)(v2 - 8);
      CFRelease(v3);
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::disconnect(Inspector::FrontendChannel &)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E3A10;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::disconnect(Inspector::FrontendChannel &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E3A10;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::disconnect(Inspector::FrontendChannel &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      WebKit::WebPageInspectorController::disconnectFrontend(*(void **)(v2 + 1128));
      uint64_t v3 = *(const void **)(v2 - 8);
      CFRelease(v3);
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::dispatchMessageFromRemote(WTF::String &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9E3A38;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::dispatchMessageFromRemote(WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9E3A38;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::dispatchMessageFromRemote(WTF::String &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      Inspector::BackendDispatcher::dispatch(*(Inspector::BackendDispatcher **)(*(void *)(v2 + 1128) + 8), (const WTF::String *)(a1 + 24));
      uint64_t v4 = *(const void **)(v2 - 8);
      CFRelease(v4);
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::setIndicating(BOOL)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E3A60;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::setIndicating(BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E3A60;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::setIndicating(BOOL)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 40);
  if (!v1) {
    return;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return;
  }
  CFRetain(*(CFTypeRef *)(v2 - 8));
  int v4 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(v2 + 1128) + 32) + 8);
  if (v5) {
    unint64_t v6 = (CFTypeRef *)(v5 - 16);
  }
  else {
    unint64_t v6 = 0;
  }
  CFRetain(v6[1]);
  if (!v4)
  {
    WebKit::WebPageProxy::hideInspectorIndication((WebKit::WebPageProxy *)v6);
    if (!v5) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  WebKit::WebPageProxy::showInspectorIndication((WebKit::WebPageProxy *)v6);
  if (v5) {
LABEL_8:
  }
    CFRelease(*(CFTypeRef *)(v5 - 8));
LABEL_9:
  unsigned int v7 = *(const void **)(v2 - 8);

  CFRelease(v7);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  BOOL result = (WTF::StringImpl **)std::unique_ptr<WebKit::InspectorTargetProxy>::reset[abi:sn180100](a2 + 1, 0);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v5 = *a1;
  if (*a1) {
    int v6 = *(_DWORD *)(v5 - 12) - 1;
  }
  else {
    int v6 = -1;
  }
  *(_DWORD *)(v5 - 12) = v6;
  uint64_t v7 = *a1;
  if (*a1)
  {
    unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
    unsigned int v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
    {
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v9 >> 1, 0);
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::terminate(WebKit::NetworkProcessProxy *this)
{
  WebKit::AuxiliaryProcessProxy::terminate(this);
  uint64_t v2 = *((void *)this + 18);
  if (v2)
  {
    return IPC::Connection::invalidate(v2);
  }
  else
  {
    uint64_t result = 130;
    __break(0xC471u);
  }
  return result;
}

unsigned int *WebKit::NetworkProcessProxy::networkProcessDidTerminate(uint64_t a1, void *a2)
{
  unsigned int v2 = a2;
  int v4 = (unsigned int *)(a1 + 16);
  atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 1u);
  uint64_t v5 = *(WebKit::DownloadProxyMap **)(a1 + 416);
  if (v5) {
    WebKit::DownloadProxyMap::invalidate(v5, a2);
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 448) + 8);
  uint64_t v7 = (unsigned int *)(v6 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  (*(void (**)(void, uint64_t))(**(void **)(v6 + 424) + 32))(*(void *)(v6 + 424), a1 + 432);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::derefAllowingPartiallyDestroyed(v7);
  std::__optional_destruct_base<WebKit::NetworkProcessProxy::UploadActivity,false>::reset[abi:sn180100](a1 + 496, v8);
  {
    int v10 = (unsigned int *)WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess;
    if (WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess) {
      uint64_t v11 = *(void *)(WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess + 8);
    }
    else {
      uint64_t v11 = 0;
    }
  }
  else
  {
    int v10 = 0;
    uint64_t v11 = 0;
    WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = 0;
  }
  if (v11 == a1)
  {
    WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = 0;
    if (v10)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v9);
      }
    }
  }
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v58);
  if (HIDWORD(v59))
  {
    unint64_t v13 = v58;
    uint64_t v14 = 8 * HIDWORD(v59);
    do
    {
      uint64_t v15 = *v13++;
      WebKit::WebProcessPool::networkProcessDidTerminate(v15, a1, v2);
      v14 -= 8;
    }
    while (v14);
  }
  uint64_t result = (unsigned int *)WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v12);
  unint64_t v18 = (uint64_t *)(a1 + 536);
  uint64_t v19 = *(void *)(a1 + 536);
  if (!v19) {
    goto LABEL_35;
  }
  int v20 = *(_DWORD *)(v19 - 4);
  if (!v20) {
    goto LABEL_34;
  }
  int v21 = 0;
  unsigned int v22 = v20 - 1;
  do
  {
    uint64_t v23 = v22;
    uint64_t result = *(unsigned int **)(v19 + 8 * v22);
    if ((unint64_t)result + 1 >= 2 && !*((void *)result + 1))
    {
      *(void *)(v19 + 8 * v22) = 0;
      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v17);
      }
      *(void *)(v19 + 8 * v22) = -1;
      ++v21;
    }
    --v22;
  }
  while (v23);
  uint64_t v19 = *v18;
  if (v21)
  {
    *(_DWORD *)(v19 - 16) += v21;
    uint64_t v24 = *v18;
    if (*v18) {
      int v25 = *(_DWORD *)(v24 - 12);
    }
    else {
      int v25 = 0;
    }
    *(_DWORD *)(v24 - 12) = v25 - v21;
    uint64_t v19 = *v18;
  }
  if (!v19)
  {
LABEL_35:
    *(_DWORD *)(a1 + 544) = 0;
    goto LABEL_36;
  }
  unsigned int v26 = *(_DWORD *)(v19 - 4);
  if (v26 >= 9 && 6 * *(_DWORD *)(v19 - 12) < v26)
  {
    uint64_t result = (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(a1 + 536));
    uint64_t v19 = *(void *)(a1 + 536);
    *(_DWORD *)(a1 + 544) = 0;
    if (v19) {
      goto LABEL_38;
    }
LABEL_36:
    unint64_t v28 = 0;
    *(_DWORD *)(a1 + 548) = 0;
    goto LABEL_45;
  }
LABEL_34:
  *(_DWORD *)(a1 + 544) = 0;
LABEL_38:
  unsigned int v29 = *(_DWORD *)(v19 - 12);
  if (v29 >= 0x7FFFFFFF) {
    int v30 = -2;
  }
  else {
    int v30 = 2 * v29;
  }
  *(_DWORD *)(a1 + 548) = v30;
  uint64_t v31 = *(unsigned int *)(v19 - 12);
  if (v31)
  {
    if (v31 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    unint64_t v28 = (WTF *)WTF::fastMalloc((WTF *)(8 * v31));
  }
  else
  {
    unint64_t v28 = 0;
  }
LABEL_45:
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 536), &v58);
  uint64_t v32 = *v18;
  if (*v18)
  {
    uint64_t v33 = *(unsigned int *)(v32 - 4);
    uint64_t v34 = v32 + 8 * v33;
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v33 = 0;
  }
  uint64_t v53 = a1 + 536;
  uint64_t v54 = v34;
  uint64_t v55 = v34;
  uint64_t v56 = v34;
  uint64_t v57 = v32 + 8 * v33;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v53);
  uint64_t v36 = v59;
  if (v59 == v54) {
    goto LABEL_58;
  }
  unsigned int v37 = 0;
  do
  {
    unsigned int v38 = v37;
    uint64_t v39 = *(void *)(*(void *)v36 + 8);
    CFRetain(*(CFTypeRef *)(v39 + 8));
    ++v37;
    *((void *)v28 + v38) = v39;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v58);
    uint64_t v36 = v59;
  }
  while (v59 != v54);
  if (v37)
  {
    uint64_t v40 = 8 * v37;
    int v41 = v28;
    do
    {
      uint64_t v42 = *(void **)v41;
      int v41 = (WTF *)((char *)v41 + 8);
      WebKit::WebsiteDataStore::networkProcessDidTerminate(v42, (WebKit::NetworkProcessProxy *)a1);
      v40 -= 8;
    }
    while (v40);
    uint64_t v43 = 8 * v37;
    unint64_t v44 = v28;
    do
    {
      uint64_t v45 = *(void *)v44;
      *(void *)unint64_t v44 = 0;
      if (v45) {
        CFRelease(*(CFTypeRef *)(v45 + 8));
      }
      unint64_t v44 = (WTF *)((char *)v44 + 8);
      v43 -= 8;
    }
    while (v43);
LABEL_58:
    if (!v28) {
      goto LABEL_60;
    }
  }
  WTF::fastFree(v28, v35);
LABEL_60:
  uint64_t v46 = *(void *)(a1 + 568);
  if (v46)
  {
    uint64_t v47 = *(unsigned int *)(v46 - 4);
    uint64_t v48 = v46 + 16 * v47;
    if (*(_DWORD *)(v46 - 12))
    {
      uint64_t v49 = *(void *)(a1 + 568);
      if (v47)
      {
        uint64_t v50 = 16 * v47;
        uint64_t v49 = *(void *)(a1 + 568);
        while ((unint64_t)(*(void *)v49 + 1) <= 1)
        {
          v49 += 16;
          v50 -= 16;
          if (!v50)
          {
            uint64_t v49 = v48;
            goto LABEL_67;
          }
        }
      }
      goto LABEL_67;
    }
    uint64_t v49 = v46 + 16 * v47;
  }
  else
  {
    uint64_t v49 = 0;
    uint64_t v47 = 0;
  }
  uint64_t v48 = v46 + 16 * v47;
  if (!v46)
  {
    uint64_t v51 = 0;
    goto LABEL_72;
  }
LABEL_67:
  uint64_t v51 = v46 + 16 * *(unsigned int *)(v46 - 4);
LABEL_72:
  if (v51 != v49)
  {
    do
    {
      API::DataTask::networkProcessCrashed(*(WebKit::ProcessThrottlerActivity ***)(v49 + 8));
      uint64_t v52 = v49 + 16;
      uint64_t v49 = v48;
      if (v52 != v48)
      {
        uint64_t v49 = v52;
        while ((unint64_t)(*(void *)v49 + 1) <= 1)
        {
          v49 += 16;
          if (v49 == v48)
          {
            uint64_t v49 = v48;
            break;
          }
        }
      }
    }
    while (v49 != v51);
    uint64_t v46 = *(void *)(a1 + 568);
  }
  if (v46)
  {
    *(void *)(a1 + 568) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v46, v35);
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
}

unsigned int *WebKit::NetworkProcessProxy::didBecomeUnresponsive(WebKit::NetworkProcessProxy *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *((void *)this + 17);
    if (v4) {
      LODWORD(v4) = *(_DWORD *)(v4 + 108);
    }
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "NetworkProcessProxy::didBecomeUnresponsive: NetworkProcess with PID %d became unresponsive, terminating it", (uint8_t *)v5, 8u);
  }
  WebKit::NetworkProcessProxy::terminate(this);
  return WebKit::NetworkProcessProxy::networkProcessDidTerminate((uint64_t)this, (void *)4);
}

void WebKit::NetworkProcessProxy::~NetworkProcessProxy(WebKit::NetworkProcessProxy *this)
{
  unsigned int v2 = (unsigned int ***)((char *)this + 472);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 59, &v31);
  uint64_t v3 = *((void *)this + 59);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = v3 + 8 * v4;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  unsigned int v26 = v2;
  uint64_t v27 = v5;
  uint64_t v28 = v5;
  uint64_t v29 = v5;
  uint64_t v30 = v3 + 8 * v4;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v26);
  while (v32 != v27)
  {
    uint64_t v7 = *(void *)(*(void *)v32 + 8);
    if (v7) {
      uint64_t v8 = v7 - 16;
    }
    else {
      uint64_t v8 = 0;
    }
    CFRetain(*(CFTypeRef *)(v8 + 8));
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v8 + 88, this);
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 - 8));
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v31);
  }
  unsigned int v9 = (WebKit::DownloadProxyMap *)*((void *)this + 52);
  if (v9) {
    WebKit::DownloadProxyMap::invalidate(v9, v6);
  }
  {
    WebKit::networkProcessesSet(void)::set = 0;
    *(void *)algn_1EB35A878 = 0;
  }
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>((uint64_t)&WebKit::networkProcessesSet(void)::set, this);
  WebKit::NetworkProcessProxy::removeBackgroundStateObservers(this);
  uint64_t v11 = (const void *)*((void *)this + 73);
  *((void *)this + 73) = 0;
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = (const void *)*((void *)this + 72);
  *((void *)this + 72) = 0;
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = *((void *)this + 71);
  if (v13) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v13, v10);
  }
  uint64_t v14 = *((void *)this + 69);
  if (v14)
  {
    uint64_t v15 = *(unsigned int *)(v14 - 4);
    if (v15)
    {
      uint64_t v16 = *((void *)this + 69);
      do
      {
        unint64_t v17 = *(unsigned int **)v16;
        if (*(void *)v16 != -1)
        {
          if (*(void *)(v16 + 16))
          {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)(v16 + 16), (WTF::StringImpl *)v10);
            unint64_t v17 = *(unsigned int **)v16;
          }
          *(void *)uint64_t v16 = 0;
          if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v17);
            WTF::fastFree((WTF *)v17, v10);
          }
        }
        v16 += 24;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((WTF *)(v14 - 16), v10);
  }
  unint64_t v18 = (unsigned int **)*((void *)this + 67);
  if (v18) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v18, v10);
  }
  uint64_t v19 = (void *)*((void *)this + 66);
  if (v19) {
    os_release(v19);
  }
  if (*((unsigned char *)this + 520))
  {
    uint64_t v20 = *((void *)this + 64);
    if (v20) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v20, v10);
    }
    uint64_t v21 = *((void *)this + 63);
    *((void *)this + 63) = 0;
    if (v21) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v21 + 8), v10);
    }
    uint64_t v22 = *((void *)this + 62);
    *((void *)this + 62) = 0;
    if (v22) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v22 + 8), v10);
    }
  }
  uint64_t v23 = (WebKit::LinkDecorationFilteringDataObserver *)*((void *)this + 61);
  *((void *)this + 61) = 0;
  if (v23) {
    WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v23, v10);
  }
  if (*v2) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v2, v10);
  }
  uint64_t v24 = *((unsigned int *)this + 116);
  if (v24 != -1) {
    ((void (*)(uint64_t *, char *))off_1EE9E3ED0[v24])(&v31, (char *)this + 456);
  }
  *((_DWORD *)this + 1++*(_DWORD *)(this + 16) = -1;
  WebKit::LegacyCustomProtocolManagerProxy::~LegacyCustomProtocolManagerProxy((WebKit::NetworkProcessProxy *)((char *)this + 432));
  uint64_t v25 = *((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  std::unique_ptr<WebKit::DownloadProxyMap>::reset[abi:sn180100]((WebKit::DownloadProxyMap **)this + 52, 0);
  WebKit::AuxiliaryProcessProxy::~AuxiliaryProcessProxy(this);
}

void non-virtual thunk to'WebKit::NetworkProcessProxy::~NetworkProcessProxy(WebKit::NetworkProcessProxy *this)
{
}

{
  WebKit::NetworkProcessProxy::~NetworkProcessProxy((WebKit::NetworkProcessProxy *)((char *)this - 32));
}

{
  WebKit::NetworkProcessProxy::operator delete((WebKit::NetworkProcessProxy *)((char *)this - 24));
}

{
  WebKit::NetworkProcessProxy::operator delete((WebKit::NetworkProcessProxy *)((char *)this - 32));
}

void WebKit::NetworkProcessProxy::operator delete(WebKit::NetworkProcessProxy *a1)
{
  WebKit::NetworkProcessProxy::~NetworkProcessProxy(a1);
  if (atomic_load(v1 + 12))
  {
    bzero(v1, 0x250uLL);
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SharedPreferencesForWebProcessDidChange,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 507;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::SharedPreferencesForWebProcess,void>::encode(v12, *(void *)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E41A8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::synthesizeAppIsBackground(WebKit::NetworkProcessProxy *this, int a2)
{
  if (a2)
  {
    char v3 = 0;
    return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ApplicationDidEnterBackground>((uint64_t)this, (uint64_t)&v3, 0, 0);
  }
  else
  {
    char v4 = 0;
    return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ApplicationWillEnterForeground>((uint64_t)this, (uint64_t)&v4, 0, 0);
  }
}

unsigned __int8 *WebKit::NetworkProcessProxy::createDownloadProxy@<X0>(WebKit::DownloadProxyMap **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, const String *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = (uint64_t)a1[52];
  if (!v14)
  {
    uint64_t v15 = (WebKit::DownloadProxyMap *)WTF::fastMalloc((WTF *)0x30);
    WebKit::DownloadProxyMap::DownloadProxyMap(v15, (WebKit::NetworkProcessProxy *)a1);
    std::unique_ptr<WebKit::DownloadProxyMap>::reset[abi:sn180100](a1 + 52, v15);
    uint64_t v14 = (uint64_t)a1[52];
  }

  return WebKit::DownloadProxyMap::createDownloadProxy(v14, a2, a3, a4, a5, a6, a7);
}

WTF::RefCountedBase *WebKit::NetworkProcessProxy::dataTaskWithRequest(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequestBase *a4, uint64_t a5, int a6, uint64_t *a7)
{
  uint64_t v44 = a3;
  uint64_t v13 = a1 + 200;
  uint64_t v14 = WTF::fastMalloc((WTF *)0x28);
  WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v14, v13, "WKDataTask initialization", 26, a6, 0);
  uint64_t v43 = *(void *)(*(void *)(a2 + 32) + 760);
  WebCore::ResourceRequestBase::httpBody((uint64_t *)&v41, a4);
  uint64_t v15 = v41;
  int v41 = 0;
  uint64_t v42 = v15;
  atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 1u);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  uint64_t v16 = *(atomic_uint **)(a2 + 24);
  if (v16) {
    atomic_fetch_add(v16, 1u);
  }
  uint64_t v17 = *a7;
  *a7 = 0;
  uint64_t v18 = WebCore::ResourceRequestBase::url(a4);
  uint64_t v19 = *(WTF::StringImpl **)v18;
  if (*(void *)v18) {
    *(_DWORD *)v19 += 2;
  }
  long long v40 = *(_OWORD *)(v18 + 8);
  uint64_t v20 = *(void *)(v18 + 24);
  uint64_t v21 = *(void *)(v18 + 32);
  uint64_t v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v22 = 388;
  *((void *)v22 + 1) = 0;
  *((void *)v22 + 66) = (char *)v22 + 16;
  *((void *)v22 + 67) = 512;
  *((void *)v22 + 68) = 0;
  *((void *)v22 + 70) = 0;
  *((void *)v22 + 69) = 0;
  IPC::Encoder::encodeHeader(v22);
  uint64_t v45 = v22;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v22, &v43);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v22, &v44);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v22, a4);
  IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v22, a5);
  IPC::ArgumentCoder<IPC::FormDataReference,void>::encode(v22, (_DWORD **)&v42);
  uint64_t v46 = a1;
  char v50 = a6;
  uint64_t v52 = v19;
  long long v53 = v40;
  uint64_t v54 = v20;
  uint64_t v55 = v21;
  uint64_t v23 = WTF::fastMalloc((WTF *)0x60);
  *(void *)uint64_t v23 = &unk_1EE9E41D0;
  *(void *)(v23 + 8) = a1;
  *(void *)(v23 + ++*(_DWORD *)(this + 16) = a1;
  *(void *)(v23 + 24) = v16;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  *(void *)(v23 + 32) = v14;
  *(unsigned char *)(v23 + ++*(_DWORD *)(this + 40) = a6;
  uint64_t v49 = 0;
  uint64_t v51 = 0;
  *(void *)(v23 + 48) = v17;
  v25.n128_f64[0] = WTF::URL::URL(v23 + 56, (uint64_t *)&v52);
  unsigned int v26 = v52;
  uint64_t v52 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v24);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  uint64_t v27 = v51;
  uint64_t v51 = 0;
  if (v27) {
    (*(void (**)(uint64_t, __n128))(*(void *)v27 + 8))(v27, v25);
  }
  uint64_t v28 = v49;
  uint64_t v49 = 0;
  if (v28)
  {
    WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(v28, v24);
    WTF::fastFree(v29, v30);
  }
  uint64_t v31 = (unsigned int *)v48;
  uint64_t v48 = 0;
  if (v31 && atomic_fetch_add((atomic_uint *volatile)v31, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v31);
    WTF::fastFree((WTF *)v31, v24);
  }
  uint64_t v32 = v47;
  uint64_t v47 = 0;
  if (v32) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v32 + 16));
  }
  uint64_t v33 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v46 = v23;
  uint64_t v47 = v33;
  LOBYTE(v48) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v45, 0, (uint64_t)&v46, 0);
  if ((_BYTE)v48)
  {
    uint64_t v35 = v46;
    uint64_t v46 = 0;
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
    }
  }
  uint64_t v36 = v45;
  uint64_t v45 = 0;
  if (v36)
  {
    IPC::Encoder::~Encoder(v36, v34);
    WTF::fastFree(v38, v39);
  }
  if (v42) {
    WTF::RefCounted<WebCore::FormData>::deref(v42);
  }
  uint64_t result = v41;
  int v41 = 0;
  if (result) {
    return (WTF::RefCountedBase *)WTF::RefCounted<WebCore::FormData>::deref(result);
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::dataTaskReceivedChallenge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v13 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v15) = 136446210;
      *(void *)((char *)&v15 + 4) = "void WebKit::NetworkProcessProxy::dataTaskReceivedChallenge(DataTaskIdentifier, We"
                                      "bCore::AuthenticationChallenge &&, CompletionHandler<void (AuthenticationChallenge"
                                      "Disposition, WebCore::Credential &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v13, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Network/NetworkProcessProxy.cpp 380: Invalid message dispatched %{public}s", (uint8_t *)&v15, 0xCu);
    }
    uint64_t v14 = *(void *)(a1 + 144);
    if (!v14)
    {
      uint64_t result = 130;
      __break(0xC471u);
      return result;
    }
    *(unsigned char *)(v14 + 98) = 1;
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v15);
    CFTypeRef cf = 0;
    uint64_t v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void, long long *))(*(void *)v9 + 16))(v9, 0, &v15);
  }
  else
  {
    uint64_t v6 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 568), a2);
    if (v6)
    {
      uint64_t v7 = *(uint64_t (**)(void))(**(void **)(v6 + 96) + 16);
      return v7();
    }
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v15);
    CFTypeRef cf = 0;
    uint64_t v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v9 + 16))(v9, 3, &v15);
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  CFTypeRef v11 = cf;
  CFTypeRef cf = 0;
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = (WTF::StringImpl *)*((void *)&v15 + 1);
  *((void *)&v15 + 1) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t result = v15;
  *(void *)&long long v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::dataTaskWillPerformHTTPRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v9 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v12 = 136446210;
      uint64_t v13 = "void WebKit::NetworkProcessProxy::dataTaskWillPerformHTTPRedirection(DataTaskIdentifier, WebCore::ResourceRe"
            "sponse &&, WebCore::ResourceRequest &&, CompletionHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v9, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Network/NetworkProcessProxy.cpp 389: Invalid message dispatched %{public}s", (uint8_t *)&v12, 0xCu);
    }
    uint64_t v10 = *(void *)(a1 + 144);
    if (v10)
    {
      *(unsigned char *)(v10 + 98) = 1;
      uint64_t v11 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v11 + 16))(v11, 0);
      return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    else
    {
      uint64_t result = 130;
      __break(0xC471u);
    }
  }
  else
  {
    uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 568), a2);
    if (result)
    {
      uint64_t v8 = *(uint64_t (**)(void))(**(void **)(result + 96) + 24);
      return v8();
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::dataTaskDidReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v11 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v14 = 136446210;
      long long v15 = "void WebKit::NetworkProcessProxy::dataTaskDidReceiveResponse(DataTaskIdentifier, WebCore::ResourceResponse &"
            "&, CompletionHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v11, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Network/NetworkProcessProxy.cpp 396: Invalid message dispatched %{public}s", (uint8_t *)&v14, 0xCu);
    }
    uint64_t v12 = *(void *)(a1 + 144);
    if (v12)
    {
      *(unsigned char *)(v12 + 98) = 1;
      uint64_t v13 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v13 + 16))(v13, 0);
      return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    else
    {
      uint64_t result = 130;
      __break(0xC471u);
    }
  }
  else
  {
    uint64_t v6 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 568), a2);
    if (v6)
    {
      uint64_t v7 = *(uint64_t (**)(void))(**(void **)(v6 + 96) + 32);
      return v7();
    }
    else
    {
      uint64_t v9 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
      uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);
      return v10(v9);
    }
  }
  return result;
}

void WebKit::NetworkProcessProxy::dataTaskDidReceiveData(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v5 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v7 = 136446210;
      uint64_t v8 = "void WebKit::NetworkProcessProxy::dataTaskDidReceiveData(DataTaskIdentifier, std::span<const uint8_t>)";
      _os_log_fault_impl(&dword_1985F2000, v5, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Network/NetworkProcessProxy.cpp 405: Invalid message dispatched %{public}s", (uint8_t *)&v7, 0xCu);
    }
    uint64_t v6 = *(void *)(a1 + 144);
    if (v6) {
      *(unsigned char *)(v6 + 98) = 1;
    }
    else {
      __break(0xC471u);
    }
  }
  else
  {
    uint64_t v3 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 568), a2);
    if (v3)
    {
      char v4 = *(void (**)(void))(**(void **)(v3 + 96) + 40);
      v4();
    }
  }
}

void WebKit::NetworkProcessProxy::dataTaskDidCompleteWithError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a2;
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v11 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      long long v15 = "void WebKit::NetworkProcessProxy::dataTaskDidCompleteWithError(DataTaskIdentifier, WebCore::ResourceError &&)";
      _os_log_fault_impl(&dword_1985F2000, v11, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Network/NetworkProcessProxy.cpp 412: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    uint64_t v12 = *(void *)(a1 + 144);
    if (v12) {
      *(unsigned char *)(v12 + 98) = 1;
    }
    else {
      __break(0xC471u);
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)(a1 + 568);
    uint64_t v6 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 568), &v13);
    uint64_t v7 = *(void *)(a1 + 568);
    if (v7) {
      uint64_t v8 = (void *)(v7 + 16 * *(unsigned int *)(v7 - 4));
    }
    else {
      uint64_t v8 = 0;
    }
    if (v8 != v6)
    {
      uint64_t v9 = v6[1];
      if (v9)
      {
        v6[1] = 0;
        uint64_t v7 = *v5;
      }
      if (v7)
      {
        uint64_t v10 = (void *)(v7 + 16 * *(unsigned int *)(v7 - 4));
        if (v10 == v6)
        {
LABEL_15:
          if (v9)
          {
            std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(v9 + 104), 0);
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v9 + 96) + 48))(*(void *)(v9 + 96), v9, a3);
            CFRelease(*(CFTypeRef *)(v9 + 8));
          }
          return;
        }
      }
      else
      {
        if (!v6) {
          goto LABEL_15;
        }
        uint64_t v10 = 0;
      }
      if (v10 != v6) {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(v5, v6);
      }
      goto LABEL_15;
    }
  }
}

IPC::Encoder *WebKit::NetworkProcessProxy::cancelDataTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  char v4 = (uint64_t *)(a1 + 568);
  uint64_t v5 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 568), &v17);
  uint64_t v6 = *(void *)(a1 + 568);
  if (v6)
  {
    uint64_t v7 = (void *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    if (v7 == v5) {
      goto LABEL_8;
    }
  }
  else
  {
    if (!v5) {
      goto LABEL_8;
    }
    uint64_t v7 = 0;
  }
  if (v7 != v5) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(v4, v5);
  }
LABEL_8:
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 372;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v20 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, &v17);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, &v16);
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9E41F8;
  uint64_t v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v18[0] = v9;
  v18[1] = v10;
  char v19 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v20, 0, (uint64_t)v18, 1);
  if (v19)
  {
    uint64_t v12 = v18[0];
    v18[0] = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::FetchWebsiteData,WTF::CompletionHandler<void ()(WebKit::WebsiteData)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 400;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  __n128 v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::OptionSet<WebKit::WebsiteDataFetchOption> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::OptionSet<WebKit::WebsiteDataFetchOption> const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4220;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  __n128 v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DeleteWebsiteData,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 390;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  __n128 v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::WallTime const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::WallTime const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4248;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  __n128 v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DeleteWebsiteDataForOrigins,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 391;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  __n128 v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul,3ul,4ul,5ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4270;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  __n128 v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::RenameOriginInWebsiteData,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 444;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  __n128 v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::OptionSet<WebKit::WebsiteDataType> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::OptionSet<WebKit::WebsiteDataType> const&>,0ul,1ul,2ul,3ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4298;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  __n128 v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::WebsiteDataOriginDirectoryForTesting,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 517;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  __n128 v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::ClientOrigin const&,WTF::OptionSet<WebKit::WebsiteDataType> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::ClientOrigin const&,WTF::OptionSet<WebKit::WebsiteDataType> const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E42C0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  __n128 v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void WebKit::NetworkProcessProxy::didReceiveMessage(atomic_uint *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  if (!IPC::MessageReceiverMap::dispatchMessage((IPC::MessageReceiverMap *)(this + 38), (IPC::Connection *)a2, a3))
  {
    WebKit::NetworkProcessProxy::didReceiveNetworkProcessProxyMessage(this, a2, a3);
  }
}

void non-virtual thunk to'WebKit::NetworkProcessProxy::didReceiveMessage(atomic_uint *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
}

uint64_t WebKit::NetworkProcessProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, IPC::Encoder **a4)
{
  if (IPC::MessageReceiverMap::dispatchSyncMessage((uint64_t *)(a1 + 152), (uint64_t)a2, (uint64_t)a3, (uint64_t)a4)) {
    return 1;
  }

  return WebKit::NetworkProcessProxy::didReceiveSyncNetworkProcessProxyMessage(a1, a2, a3, a4);
}

uint64_t non-virtual thunk to'WebKit::NetworkProcessProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, IPC::Encoder **a4)
{
  return WebKit::NetworkProcessProxy::didReceiveSyncMessage(a1 - 32, a2, a3, a4);
}

unsigned int *WebKit::NetworkProcessProxy::didClose(WebKit::NetworkProcessProxy *this, IPC::Connection *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  char v4 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = (_xpc_connection_s *)*((void *)a2 + 44);
    if (v6) {
      LODWORD(v6) = xpc_connection_get_pid(v6);
    }
    int v7 = 134218240;
    uint64_t v8 = this;
    __int16 v9 = 1024;
    int v10 = (int)v6;
    _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "%p - NetworkProcessProxy::didClose (Network Process %d crash)", (uint8_t *)&v7, 0x12u);
  }
  return WebKit::NetworkProcessProxy::networkProcessDidTerminate((uint64_t)this, (void *)5);
}

unsigned int *non-virtual thunk to'WebKit::NetworkProcessProxy::didClose(WebKit::NetworkProcessProxy *this, IPC::Connection *a2)
{
  return WebKit::NetworkProcessProxy::didClose((WebKit::NetworkProcessProxy *)((char *)this - 32), a2);
}

unsigned int *WebKit::NetworkProcessProxy::didReceiveInvalidMessage(WebKit::NetworkProcessProxy *a1, uint64_t a2, unsigned int a3)
{
  WebKit::AuxiliaryProcessProxy::logInvalidMessage(a1, a2, a3);
  WebKit::NetworkProcessProxy::terminate(a1);

  return WebKit::NetworkProcessProxy::networkProcessDidTerminate((uint64_t)a1, (void *)5);
}

unsigned int *non-virtual thunk to'WebKit::NetworkProcessProxy::didReceiveInvalidMessage(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = (WebKit::NetworkProcessProxy *)(a1 - 32);
  WebKit::AuxiliaryProcessProxy::logInvalidMessage((void *)(a1 - 32), a2, a3);
  WebKit::NetworkProcessProxy::terminate(v3);

  return WebKit::NetworkProcessProxy::networkProcessDidTerminate((uint64_t)v3, (void *)5);
}

unsigned int *WebKit::NetworkProcessProxy::didReceiveAuthenticationChallenge(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, WebCore::AuthenticationChallengeBase *this, int a6, uint64_t a7)
{
  uint64_t v44 = 0;
  int v14 = (WebKit *)WebCore::AuthenticationChallengeBase::protectionSpace(this);
  if (*((unsigned char *)v14 + 21) != 7) {
    goto LABEL_12;
  }
  long long v40 = a2;
  uint64_t v15 = WebKit::allDataStores(v14);
  uint64_t v16 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v15, &v40);
  if (!v16) {
    goto LABEL_12;
  }
  uint64_t v17 = v16;
  uint64_t v39 = a4;
  int v18 = a6;
  char v19 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  uint64_t *v19 = 1;
  v19[1] = 0;
  uint64_t v20 = v19 + 1;
  void v19[2] = 0;
  long long v40 = (WTF::StringImpl *)v19;
  uint64_t v21 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v21 = 1;
  *(void *)(v21 + 8) = v19;
  uint64_t v23 = (unsigned int *)v19[1];
  v19[1] = v21;
  if (!v23)
  {
    a6 = v18;
LABEL_7:
    atomic_fetch_add((atomic_uint *volatile)v21, 1u);
    char v24 = (unsigned int *)v44;
    uint64_t v44 = (WTF *)v21;
    a4 = v39;
    if (v24 && atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, v22);
    }
    goto LABEL_10;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v23);
    WTF::fastFree((WTF *)v23, v22);
  }
  uint64_t v21 = *v20;
  a6 = v18;
  if (*v20) {
    goto LABEL_7;
  }
  uint64_t v44 = 0;
  a4 = v39;
LABEL_10:
  WebKit::WebsiteDataStore::addSecKeyProxyStore(v17, (unint64_t)&v40);
  unsigned int v26 = v40;
  long long v40 = 0;
  if (v26) {
    WTF::RefCounted<WebKit::SecKeyProxyStore>::deref((uint64_t)v26, v25);
  }
LABEL_12:
  uint64_t v27 = *(atomic_uchar *volatile **)(a1 + 144);
  if (!v27)
  {
    __break(0xC471u);
    JUMPOUT(0x198FAEBB8);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v40, v27);
  uint64_t v28 = API::Object::newObject(0x1D8uLL, 2);
  uint64_t v43 = WebKit::AuthenticationChallengeProxy::AuthenticationChallengeProxy((WebKit *)v28, (uint64_t)this, a7, (uint64_t *)&v40, (uint64_t *)&v44);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v40);
  if (a3)
  {
    WebKit::WebProcessProxy::webPage(a3, (uint64_t *)&v40);
    uint64_t v29 = v40;
    if (v40)
    {
      WebKit::WebPageProxy::didReceiveAuthenticationChallengeProxy((uint64_t)v40, (uint64_t *)&v43, a6);
      CFRelease(*((CFTypeRef *)v29 + 1));
      if (!v28) {
        goto LABEL_34;
      }
LABEL_33:
      CFRelease(*(CFTypeRef *)(v28 + 8));
      goto LABEL_34;
    }
  }
  if (!*(unsigned char *)(a4 + 32))
  {
    uint64_t v33 = *(void *)(v28 + 464);
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v40);
    CFTypeRef cf = 0;
    WebKit::AuthenticationDecisionListener::completeChallenge(v33);
    CFTypeRef v35 = cf;
    CFTypeRef cf = 0;
    if (v35) {
      CFRelease(v35);
    }
    uint64_t v36 = v41;
    int v41 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v34);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
    unsigned int v37 = v40;
    long long v40 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v34);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
    uint64_t v43 = 0;
    goto LABEL_33;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v31 = *(atomic_uint **)(a1 + 8);
  if (v31)
  {
    atomic_fetch_add(v31, 1u);
    uint64_t v28 = (uint64_t)v43;
  }
  uint64_t v32 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v32 = &unk_1EE9E42E8;
  *(void *)(v32 + 8) = a1;
  *(void *)(v32 + ++*(_DWORD *)(this + 16) = v31;
  *(void *)(v32 + 24) = a2;
  *(void *)(v32 + 32) = v28;
  *(unsigned char *)(v32 + ++*(_DWORD *)(this + 40) = a6;
  long long v40 = (WTF::StringImpl *)v32;
  WebKit::WebPageProxy::forMostVisibleWebPageIfAny((uint64_t)a2, a4, (uint64_t *)&v40);
  if (v40) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v40 + 8))(v40);
  }
LABEL_34:
  uint64_t result = (unsigned int *)v44;
  uint64_t v44 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v30);
    }
  }
  return result;
}

void WebKit::NetworkProcessProxy::negotiatedLegacyTLS(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v6);
    char v4 = v6;
    if (v6)
    {
      WebKit::WebPageProxy::negotiatedLegacyTLS(v6, v2, v3);
      uint64_t v5 = (const void *)*((void *)v4 + 1);
      CFRelease(v5);
    }
  }
}

void WebKit::NetworkProcessProxy::didNegotiateModernTLS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    WebKit::WebProcessProxy::webPage(a2, &v6);
    uint64_t v4 = v6;
    if (v6)
    {
      (*(void (**)(void, uint64_t))(**(void **)(v6 + 72) + 232))(*(void *)(v6 + 72), a3);
      uint64_t v5 = *(const void **)(v4 + 8);
      CFRelease(v5);
    }
  }
}

void WebKit::NetworkProcessProxy::didBlockLoadToKnownTracker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    WebKit::WebProcessProxy::webPage(a2, &v6);
    uint64_t v4 = v6;
    if (v6)
    {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 72) + 120))(*(void *)(v6 + 72), v6, a3);
      uint64_t v5 = *(const void **)(v4 + 8);
      CFRelease(v5);
    }
  }
}

void WebKit::NetworkProcessProxy::triggerBrowsingContextGroupSwitchForNavigation(uint64_t a1, uint64_t a2, uint64_t a3, int a4, WTF::ASCIICaseInsensitiveHash **a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v14 = qword_1EB358370;
  if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v17 = 134219008;
    *(void *)&void v17[4] = a1;
    __int16 v18 = 2048;
    uint64_t v19 = a2;
    __int16 v20 = 2048;
    uint64_t v21 = a3;
    __int16 v22 = 1024;
    int v23 = a4;
    __int16 v24 = 2048;
    uint64_t v25 = a6;
    _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::triggerBrowsingContextGroupSwitchForNavigation: pageID=%llu, navigationID=%llu, browsingContextGroupSwitchDecision=%u, existingNetworkResourceLoadIdentifierToResume=%llu", v17, 0x30u);
  }
  if (a2 && (WebKit::WebProcessProxy::webPage(a2, (uint64_t *)v17), (uint64_t v15 = *(void *)v17) != 0))
  {
    WebKit::WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation(*(uint64_t *)v17, a3, a4, a5, a6, a7);
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  else
  {
    uint64_t v16 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v16 + 16))(v16, 0);
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
}

void WebKit::NetworkProcessProxy::logDiagnosticMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v10);
  uint64_t v8 = v10;
  if (v10)
  {
    WebKit::WebPageProxy::logDiagnosticMessage(v10, a3, a4, a5);
    __int16 v9 = (const void *)*((void *)v8 + 1);
    CFRelease(v9);
  }
}

unsigned int *WebKit::NetworkProcessProxy::terminateWebProcess(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  uint64_t result = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, &v4);
  if (result)
  {
    uint64_t v3 = result + 4;
    atomic_fetch_add((atomic_uint *volatile)result + 4, 1u);
    WebKit::WebProcessProxy::requestTermination(result, 8);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
  }
  return result;
}

unsigned int *WebKit::NetworkProcessProxy::terminateUnresponsiveServiceWorkerProcesses(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  uint64_t result = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, &v5);
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 4;
    atomic_fetch_add((atomic_uint *volatile)result + 4, 1u);
    WebKit::WebProcessProxy::disableRemoteWorkers((uint64_t)result, 1);
    WebKit::WebProcessProxy::requestTermination(v3, 1);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
  }
  return result;
}

void WebKit::NetworkProcessProxy::logDiagnosticMessageWithResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v12);
  int v10 = v12;
  if (v12)
  {
    WebKit::WebPageProxy::logDiagnosticMessageWithResult(v12, a3, a4, a5, a6);
    uint64_t v11 = (const void *)*((void *)v10 + 1);
    CFRelease(v11);
  }
}

void WebKit::NetworkProcessProxy::logDiagnosticMessageWithValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v12);
  int v10 = v12;
  if (v12)
  {
    WebKit::WebPageProxy::logDiagnosticMessageWithValue(v12, a3, a4, a5, a6);
    uint64_t v11 = (const void *)*((void *)v10 + 1);
    CFRelease(v11);
  }
}

void WebKit::NetworkProcessProxy::resourceLoadDidSendRequest(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebProcessProxy::webPage(a2, &v11);
  uint64_t v8 = v11;
  if (v11)
  {
    if (*(unsigned char *)(a5 + 8))
    {
      __int16 v9 = *(WTF::RefCountedBase **)a5;
      *(void *)a5 = 0;
      int v10 = v9;
      WebCore::ResourceRequestBase::setHTTPBody();
      if (v10) {
        WTF::RefCounted<WebCore::FormData>::deref(v10);
      }
    }
    WebKit::WebPageProxy::resourceLoadDidSendRequest((void *)v8, a3, a4);
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
}

void WebKit::NetworkProcessProxy::resourceLoadDidPerformHTTPRedirection(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v10);
  uint64_t v8 = v10;
  if (v10)
  {
    WebKit::WebPageProxy::resourceLoadDidPerformHTTPRedirection(v10, a3, a4, a5);
    __int16 v9 = (const void *)v8[1];
    CFRelease(v9);
  }
}

void WebKit::NetworkProcessProxy::resourceLoadDidReceiveChallenge(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, id *a4)
{
  WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v8);
  uint64_t v6 = v8;
  if (v8)
  {
    WebKit::WebPageProxy::resourceLoadDidReceiveChallenge(v8, a3, a4);
    int v7 = (const void *)v6[1];
    CFRelease(v7);
  }
}

void WebKit::NetworkProcessProxy::resourceLoadDidReceiveResponse(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4)
{
  WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v8);
  uint64_t v6 = v8;
  if (v8)
  {
    WebKit::WebPageProxy::resourceLoadDidReceiveResponse(v8, a3, a4);
    int v7 = (const void *)v6[1];
    CFRelease(v7);
  }
}

void WebKit::NetworkProcessProxy::resourceLoadDidCompleteWithError(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v10);
  uint64_t v8 = v10;
  if (v10)
  {
    WebKit::WebPageProxy::resourceLoadDidCompleteWithError(v10, a3, a4, a5);
    __int16 v9 = (const void *)v8[1];
    CFRelease(v9);
  }
}

uint64_t WebKit::NetworkProcessProxy::didAllowPrivateTokenUsageByThirdPartyForTesting(WebKit *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = WebKit::allDataStores(a1);
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v2, &v5);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(result + 384) + 120);
    return v4();
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkProcessProxy::dumpResourceLoadStatistics(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v3 = *(void *)(a1 + 136);
  if (v3 && *(unsigned char *)(v3 + 104) || *(void *)(a1 + 144))
  {
    uint64_t v6 = &v8;
    return (WTF::StringImpl *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DumpResourceLoadStatistics,WTF::CompletionHandler<void ()(WTF::String)>>(a1, &v6, a3, 0, 0, 1);
  }
  else
  {
    int v7 = 0;
    WTF::CompletionHandler<void ()(WTF::String)>::operator()(a3, &v7);
    uint64_t result = v7;
    int v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DumpResourceLoadStatistics,WTF::CompletionHandler<void ()(WTF::String)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 399;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4310;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::isPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(a1, v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
    int v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 418;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4338;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::isVeryPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsVeryPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(a1, v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
    int v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsVeryPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 424;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4360;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrevalentResource,WTF::CompletionHandler<void ()(void)>>(a1, v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrevalentResource,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 474;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4388;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setPrevalentResourceForDebugMode(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrevalentResourceForDebugMode,WTF::CompletionHandler<void ()(void)>>(a1, v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrevalentResourceForDebugMode,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 475;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E43B0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setVeryPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetVeryPrevalentResource,WTF::CompletionHandler<void ()(void)>>(a1, v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetVeryPrevalentResource,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 506;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E43D8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setLastSeen(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, double a5)
{
  uint64_t v11 = a2;
  double v10 = a5;
  uint64_t v5 = *(void *)(a1 + 136);
  if (v5 && *(unsigned char *)(v5 + 104) || *(void *)(a1 + 144))
  {
    v9[0] = &v11;
    v9[1] = a3;
    v9[2] = (uint64_t *)&v10;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetLastSeen,WTF::CompletionHandler<void ()(void)>>(a1, v9, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetLastSeen,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 467;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WTF::Seconds const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WTF::Seconds const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4400;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::domainIDExistsInDatabase(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  int v9 = a3;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v10;
    v8[1] = &v9;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DomainIDExistsInDatabase,WTF::CompletionHandler<void ()(BOOL)>>(a1, (uint64_t)v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DomainIDExistsInDatabase,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 396;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::Encoder::operator<<<int>(v12, *(int **)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4428;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::mergeStatisticForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, double a9, double a10, char a11, unsigned int a12, uint64_t *a13)
{
  uint64_t v23 = a2;
  double v21 = a10;
  double v22 = a9;
  v14[0] = &v23;
  v14[1] = a3;
  v14[2] = a4;
  v14[3] = a5;
  v14[4] = &v22;
  char v15 = a6;
  uint64_t v16 = &v21;
  char v17 = a7;
  char v18 = a8;
  char v19 = a11;
  uint64_t v20 = a12;
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::MergeStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(a1, (uint64_t)v14, a13, 0, 0, 1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::MergeStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 429;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WTF::Seconds const&,BOOL,WTF::Seconds const&,BOOL,BOOL,BOOL,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WTF::Seconds const&,BOOL,WTF::Seconds const&,BOOL,BOOL,BOOL,unsigned long long>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4450;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::InsertExpiredStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 416;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,unsigned long long,BOOL,BOOL,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,unsigned long long,BOOL,BOOL,BOOL>,0ul,1ul,2ul,3ul,4ul,5ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4478;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::clearPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearPrevalentResource,WTF::CompletionHandler<void ()(void)>>(a1, v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearPrevalentResource,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 377;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E44A0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::scheduleCookieBlockingUpdate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v3 = *(void *)(a1 + 136);
  if (v3 && *(unsigned char *)(v3 + 104) || *(void *)(a1 + 144))
  {
    uint64_t v7 = &v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ScheduleCookieBlockingUpdate,WTF::CompletionHandler<void ()(void)>>(a1, &v7, a3, 0, 0, 1);
  }
  else
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ScheduleCookieBlockingUpdate,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 453;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E44C8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::scheduleClearInMemoryAndPersistent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v13 = a2;
  v12[0] = a3;
  v12[1] = a4;
  uint64_t v6 = *(void *)(a1 + 136);
  if (v6 && *(unsigned char *)(v6 + 104) || *(void *)(a1 + 144))
  {
    v10[0] = &v13;
    v10[1] = v12;
    char v11 = a5;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ScheduleClearInMemoryAndPersistent,WTF::CompletionHandler<void ()(void)>>(a1, (uint64_t)v10, a6, 0, 0, 1);
  }
  else
  {
    uint64_t v8 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
    return v9(v8);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ScheduleClearInMemoryAndPersistent,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 452;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,std::optional<WTF::WallTime> const&,WebKit::ShouldGrandfatherStatistics>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,std::optional<WTF::WallTime> const&,WebKit::ShouldGrandfatherStatistics>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E44F0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::scheduleStatisticsAndDataRecordsProcessing(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v3 = *(void *)(a1 + 136);
  if (v3 && *(unsigned char *)(v3 + 104) || *(void *)(a1 + 144))
  {
    uint64_t v7 = &v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ScheduleStatisticsAndDataRecordsProcessing,WTF::CompletionHandler<void ()(void)>>(a1, &v7, a3, 0, 0, 1);
  }
  else
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ScheduleStatisticsAndDataRecordsProcessing,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 454;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4518;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::statisticsDatabaseHasAllTables(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v3 = *(void *)(a1 + 136);
  if (v3 && *(unsigned char *)(v3 + 104) || *(void *)(a1 + 144))
  {
    uint64_t v7 = &v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::StatisticsDatabaseHasAllTables,WTF::CompletionHandler<void ()(BOOL)>>(a1, &v7, a3, 0, 0, 1);
  }
  else
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::StatisticsDatabaseHasAllTables,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 509;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4540;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::logUserInteraction(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::LogUserInteraction,WTF::CompletionHandler<void ()(void)>>(a1, v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::LogUserInteraction,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 426;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4568;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::hasHadUserInteraction(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HadUserInteraction,WTF::CompletionHandler<void ()(BOOL)>>(a1, v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HadUserInteraction,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 410;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4590;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsRelationshipOnlyInDatabaseOnce,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 422;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E45B8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::clearUserInteraction(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearUserInteraction,WTF::CompletionHandler<void ()(void)>>(a1, v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearUserInteraction,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 381;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E45E0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::hasLocalStorage(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HasLocalStorage,WTF::CompletionHandler<void ()(BOOL)>>(a1, v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HasLocalStorage,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 413;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4608;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setTimeToLiveUserInteraction(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v10 = a2;
  double v9 = a4;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v10;
    v8[1] = &v9;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetTimeToLiveUserInteraction,WTF::CompletionHandler<void ()(void)>>(a1, (uint64_t)v8, a3, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetTimeToLiveUserInteraction,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 501;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v12, **(double **)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4630;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setResourceLoadStatisticsTimeAdvanceForTesting(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v10 = a2;
  double v9 = a4;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v10;
    v8[1] = &v9;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetResourceLoadStatisticsTimeAdvanceForTesting,WTF::CompletionHandler<void ()(void)>>(a1, (uint64_t)v8, a3, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetResourceLoadStatisticsTimeAdvanceForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 488;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v12, **(double **)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4658;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setIsRunningResourceLoadStatisticsTest(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    uint64_t v8 = &v10;
    char v9 = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetIsRunningResourceLoadStatisticsTest,WTF::CompletionHandler<void ()(void)>>(a1, (uint64_t)&v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetIsRunningResourceLoadStatisticsTest,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 466;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,BOOL>,0ul,1ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4680;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setSubframeUnderTopFrameDomain(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = a2;
  uint64_t v5 = *(void *)(a1 + 136);
  if (v5 && *(unsigned char *)(v5 + 104) || *(void *)(a1 + 144))
  {
    v9[0] = &v10;
    v9[1] = a3;
    v9[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetSubframeUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(a1, v9, a5, 0, 0, 1);
  }
  else
  {
    uint64_t v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetSubframeUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 495;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E46A8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::isRegisteredAsRedirectingTo(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = a2;
  uint64_t v5 = *(void *)(a1 + 136);
  if (v5 && *(unsigned char *)(v5 + 104) || *(void *)(a1 + 144))
  {
    v9[0] = &v10;
    v9[1] = a3;
    v9[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsRegisteredAsRedirectingTo,WTF::CompletionHandler<void ()(BOOL)>>(a1, v9, a5, 0, 0, 1);
  }
  else
  {
    uint64_t v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsRegisteredAsRedirectingTo,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 419;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E46D0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::isRegisteredAsSubFrameUnder(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = a2;
  uint64_t v5 = *(void *)(a1 + 136);
  if (v5 && *(unsigned char *)(v5 + 104) || *(void *)(a1 + 144))
  {
    v9[0] = &v10;
    v9[1] = a3;
    v9[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsRegisteredAsSubFrameUnder,WTF::CompletionHandler<void ()(BOOL)>>(a1, v9, a5, 0, 0, 1);
  }
  else
  {
    uint64_t v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsRegisteredAsSubFrameUnder,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 420;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E46F8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setSubresourceUnderTopFrameDomain(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = a2;
  uint64_t v5 = *(void *)(a1 + 136);
  if (v5 && *(unsigned char *)(v5 + 104) || *(void *)(a1 + 144))
  {
    v9[0] = &v10;
    v9[1] = a3;
    v9[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetSubresourceUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(a1, v9, a5, 0, 0, 1);
  }
  else
  {
    uint64_t v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetSubresourceUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 496;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4720;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::isRegisteredAsSubresourceUnder(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = a2;
  uint64_t v5 = *(void *)(a1 + 136);
  if (v5 && *(unsigned char *)(v5 + 104) || *(void *)(a1 + 144))
  {
    v9[0] = &v10;
    v9[1] = a3;
    v9[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsRegisteredAsSubresourceUnder,WTF::CompletionHandler<void ()(BOOL)>>(a1, v9, a5, 0, 0, 1);
  }
  else
  {
    uint64_t v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsRegisteredAsSubresourceUnder,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 421;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4748;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setSubresourceUniqueRedirectTo(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = a2;
  uint64_t v5 = *(void *)(a1 + 136);
  if (v5 && *(unsigned char *)(v5 + 104) || *(void *)(a1 + 144))
  {
    v9[0] = &v10;
    v9[1] = a3;
    v9[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetSubresourceUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(a1, v9, a5, 0, 0, 1);
  }
  else
  {
    uint64_t v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetSubresourceUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 498;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4770;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setSubresourceUniqueRedirectFrom(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = a2;
  uint64_t v5 = *(void *)(a1 + 136);
  if (v5 && *(unsigned char *)(v5 + 104) || *(void *)(a1 + 144))
  {
    v9[0] = &v10;
    v9[1] = a3;
    v9[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetSubresourceUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(a1, v9, a5, 0, 0, 1);
  }
  else
  {
    uint64_t v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetSubresourceUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 497;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4798;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setTopFrameUniqueRedirectTo(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = a2;
  uint64_t v5 = *(void *)(a1 + 136);
  if (v5 && *(unsigned char *)(v5 + 104) || *(void *)(a1 + 144))
  {
    v9[0] = &v10;
    v9[1] = a3;
    v9[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetTopFrameUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(a1, v9, a5, 0, 0, 1);
  }
  else
  {
    uint64_t v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetTopFrameUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 504;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E47C0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setTopFrameUniqueRedirectFrom(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = a2;
  uint64_t v5 = *(void *)(a1 + 136);
  if (v5 && *(unsigned char *)(v5 + 104) || *(void *)(a1 + 144))
  {
    v9[0] = &v10;
    v9[1] = a3;
    v9[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetTopFrameUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(a1, v9, a5, 0, 0, 1);
  }
  else
  {
    uint64_t v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetTopFrameUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 503;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E47E8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::isGrandfathered(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsGrandfathered,WTF::CompletionHandler<void ()(BOOL)>>(a1, v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsGrandfathered,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 417;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4810;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setGrandfathered(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v11 = a2;
  uint64_t v5 = *(void *)(a1 + 136);
  if (v5 && *(unsigned char *)(v5 + 104) || *(void *)(a1 + 144))
  {
    v9[0] = &v11;
    v9[1] = a3;
    char v10 = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetGrandfathered,WTF::CompletionHandler<void ()(void)>>(a1, (uint64_t)v9, a5, 0, 0, 1);
  }
  else
  {
    uint64_t v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetGrandfathered,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 463;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E4838;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void WebKit::NetworkProcessProxy::requestStorageAccessConfirm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  WebKit::WebProcessProxy::webPage(a2, &v18);
  uint64_t v14 = v18;
  if (v18)
  {
    WebKit::WebPageProxy::requestStorageAccessConfirm(v18, a5, a6, a3, a4, a7, (uint64_t)a8);
    uint64_t v15 = *(const void **)(v14 + 8);
    CFRelease(v15);
  }
  else
  {
    uint64_t v16 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v16 + 16))(v16, 0);
    int v17 = *(void (**)(uint64_t))(*(void *)v16 + 8);
    v17(v16);
  }
}

uint64_t WebKit::NetworkProcessProxy::getAllStorageAccessEntries(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v3 = *(void *)(a1 + 136);
  if (v3 && *(unsigned char *)(v3 + 104) || *(void *)(a1 + 144))
  {
    uint64_t v6 = &v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetAllStorageAccessEntries,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(a1, &v6, a3, 0, 0, 1);
  }
  else
  {
    v7[0] = 0;
    v7[1] = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a3, v7);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetAllStorageAccessEntries,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 403;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4860;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setCacheMaxAgeCapForPrevalentResources(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v10 = a2;
  double v9 = a4;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v10;
    v8[1] = &v9;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetCacheMaxAgeCapForPrevalentResources,WTF::CompletionHandler<void ()(void)>>(a1, (uint64_t)v8, a3, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetCacheMaxAgeCapForPrevalentResources,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 458;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v12, **(double **)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E48B0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setGrandfatheringTime(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v10 = a2;
  double v9 = a4;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v10;
    v8[1] = &v9;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetGrandfatheringTime,WTF::CompletionHandler<void ()(void)>>(a1, (uint64_t)v8, a3, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetGrandfatheringTime,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 464;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v12, **(double **)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E48D8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setMaxStatisticsEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetMaxStatisticsEntries,WTF::CompletionHandler<void ()(void)>>(a1, (uint64_t)v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetMaxStatisticsEntries,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 469;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,unsigned long long>,0ul,1ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4900;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setMinimumTimeBetweenDataRecordsRemoval(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v10 = a2;
  double v9 = a4;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v10;
    v8[1] = &v9;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetMinimumTimeBetweenDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(a1, (uint64_t)v8, a3, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetMinimumTimeBetweenDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 470;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v12, **(double **)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4928;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setPruneEntriesDownTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPruneEntriesDownTo,WTF::CompletionHandler<void ()(void)>>(a1, (uint64_t)v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPruneEntriesDownTo,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 484;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,unsigned long long>,0ul,1ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4950;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setShouldClassifyResourcesBeforeDataRecordsRemoval(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    uint64_t v8 = &v10;
    char v9 = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetShouldClassifyResourcesBeforeDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(a1, (uint64_t)&v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetShouldClassifyResourcesBeforeDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 490;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,BOOL>,0ul,1ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4978;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setResourceLoadStatisticsDebugMode(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    uint64_t v8 = &v10;
    char v9 = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetResourceLoadStatisticsDebugMode,WTF::CompletionHandler<void ()(void)>>(a1, (uint64_t)&v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetResourceLoadStatisticsDebugMode,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 486;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,BOOL>,0ul,1ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E49A0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::isResourceLoadStatisticsEphemeral(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v3 = *(void *)(a1 + 136);
  if (v3 && *(unsigned char *)(v3 + 104) || *(void *)(a1 + 144))
  {
    uint64_t v7 = &v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsResourceLoadStatisticsEphemeral,WTF::CompletionHandler<void ()(BOOL)>>(a1, &v7, a3, 0, 0, 1);
  }
  else
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsResourceLoadStatisticsEphemeral,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 423;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E49C8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

IPC::Encoder *WebKit::NetworkProcessProxy::resetCacheMaxAgeCapForPrevalentResources(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v16 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v6 = 445;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    char v19 = v6;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, &v16);
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v7 = &unk_1EE9E49F0;
    v7[1] = v5;
    uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v17[0] = v7;
    v17[1] = v8;
    char v18 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, 0, (uint64_t)v17, 1);
    if (v18)
    {
      uint64_t v10 = v17[0];
      v17[0] = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    uint64_t result = v19;
    char v19 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  else
  {
    uint64_t v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (IPC::Encoder *)v13(v12);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkProcessProxy::resetParametersToDefaultValues(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v16 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v6 = 447;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    char v19 = v6;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, &v16);
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v7 = &unk_1EE9E4A18;
    v7[1] = v5;
    uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v17[0] = v7;
    v17[1] = v8;
    char v18 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, 0, (uint64_t)v17, 1);
    if (v18)
    {
      uint64_t v10 = v17[0];
      v17[0] = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    uint64_t result = v19;
    char v19 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  else
  {
    uint64_t v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (IPC::Encoder *)v13(v12);
  }
  return result;
}

void *WebKit::NetworkProcessProxy::logTestingEvent(WebKit *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = WebKit::allDataStores(a1);
  uint64_t result = (void *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v2, &v5);
  if (result)
  {
    uint64_t result = (void *)result[34];
    if (result)
    {
      uint64_t v4 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v4();
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::didCommitCrossSiteLoadWithDataTransfer(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v14 = a2;
  char v13 = a5;
  uint64_t v11 = a7;
  uint64_t v12 = a6;
  uint64_t v8 = *(void *)(result + 136);
  if (v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
  {
    v9[0] = &v14;
    v9[1] = a3;
    void v9[2] = a4;
    void v9[3] = &v13;
    v9[4] = &v12;
    v9[5] = &v11;
    char v10 = a8;
    return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::DidCommitCrossSiteLoadWithDataTransfer>(result, (uint64_t)v9, 0, 0);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::DidCommitCrossSiteLoadWithDataTransfer>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 393;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  char v18 = v8;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WTF::OptionSet<WebCore::CrossSiteNavigationDataTransferFlag> const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebKit::DidFilterKnownLinkDecoration>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WTF::OptionSet<WebCore::CrossSiteNavigationDataTransferFlag> const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebKit::DidFilterKnownLinkDecoration>,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  char v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void WebKit::NetworkProcessProxy::didCommitCrossSiteLoadWithDataTransferFromPrevalentResource(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2 && *(unsigned char *)(v2 + 104) || *(void *)(a1 + 144))
  {
    WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v4);
    uint64_t v3 = v4;
    if (v4)
    {
      WebKit::WebPageProxy::didCommitCrossSiteLoadWithDataTransferFromPrevalentResource((uint64_t)v4);
      CFRelease(*((CFTypeRef *)v3 + 1));
    }
  }
}

uint64_t WebKit::NetworkProcessProxy::setCrossSiteLoadWithLinkDecorationForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v12 = a2;
  uint64_t v6 = *(void *)(a1 + 136);
  if (v6 && *(unsigned char *)(v6 + 104) || *(void *)(a1 + 144))
  {
    v10[0] = &v12;
    v10[1] = a3;
    void v10[2] = a4;
    char v11 = a5;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetCrossSiteLoadWithLinkDecorationForTesting,WTF::CompletionHandler<void ()(void)>>(a1, (uint64_t)v10, a6, 0, 0, 1);
  }
  else
  {
    uint64_t v8 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    char v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
    return v9(v8);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetCrossSiteLoadWithLinkDecorationForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 460;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebKit::DidFilterKnownLinkDecoration>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebKit::DidFilterKnownLinkDecoration>,0ul,1ul,2ul,3ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4A40;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

IPC::Encoder *WebKit::NetworkProcessProxy::resetCrossSiteLoadsWithLinkDecorationForTesting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v16 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v6 = 446;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    char v19 = v6;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, &v16);
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v7 = &unk_1EE9E4A68;
    v7[1] = v5;
    uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v17[0] = v7;
    v17[1] = v8;
    char v18 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, 0, (uint64_t)v17, 1);
    if (v18)
    {
      uint64_t v10 = v17[0];
      v17[0] = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    uint64_t result = v19;
    char v19 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  else
  {
    uint64_t v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (IPC::Encoder *)v13(v12);
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::deleteCookiesForTesting(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v11 = a2;
  uint64_t v5 = *(void *)(a1 + 136);
  if (v5 && *(unsigned char *)(v5 + 104) || *(void *)(a1 + 144))
  {
    v9[0] = &v11;
    v9[1] = a3;
    char v10 = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DeleteCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(a1, (uint64_t)v9, a5, 0, 0, 1);
  }
  else
  {
    uint64_t v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DeleteCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 389;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4A90;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

WTF::StringImpl **WebKit::NetworkProcessProxy::deleteWebsiteDataInUIProcessForRegistrableDomains(WebKit *a1, WTF::StringImpl **a2, int a3, char a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v18 = a2;
  char v10 = WebKit::allDataStores(a1);
  uint64_t v11 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v10, &v18);
  if (v11 && a3 && *(_DWORD *)(a5 + 12))
  {
    uint64_t v12 = v11;
    CFRetain(*(CFTypeRef *)(v11 + 8));
    uint64_t v13 = *a6;
    *a6 = 0;
    uint64_t v14 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v14 = &unk_1EE9E4AB8;
    *(_DWORD *)(v14 + 8) = a3;
    *(void *)(v14 + ++*(_DWORD *)(this + 16) = v12;
    *(void *)(v14 + 24) = v13;
    uint64_t v18 = (WTF::StringImpl **)v14;
    WebKit::WebsiteDataStore::fetchDataForRegistrableDomains(v12, a3, a4, (uint64_t *)a5, (uint64_t *)&v18);
    uint64_t result = v18;
    uint64_t v18 = 0;
    if (result) {
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 1))(result);
    }
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v16 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl ***))(*(void *)v16 + 16))(v16, &v18);
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    uint64_t result = v18;
    if (v18) {
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v18, v17);
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::hasIsolatedSession(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HasIsolatedSession,WTF::CompletionHandler<void ()(BOOL)>>(a1, v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HasIsolatedSession,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 412;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4B08;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

IPC::Encoder *WebKit::NetworkProcessProxy::setAppBoundDomainsForResourceLoadStatistics(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v15 = a2;
  uint64_t v6 = *a4;
  *a4 = 0;
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 455;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v18 = v7;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, &v15);
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v7, a3);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v8 = &unk_1EE9E4B30;
  v8[1] = v6;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v16[0] = v8;
  v16[1] = v9;
  char v17 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, 0, (uint64_t)v16, 1);
  if (v17)
  {
    uint64_t v11 = v16[0];
    v16[0] = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkProcessProxy::setManagedDomainsForResourceLoadStatistics(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v15 = a2;
  uint64_t v6 = *a4;
  *a4 = 0;
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 468;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v18 = v7;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, &v15);
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v7, a3);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v8 = &unk_1EE9E4B58;
  v8[1] = v6;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v16[0] = v8;
  v16[1] = v9;
  char v17 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, 0, (uint64_t)v16, 1);
  if (v17)
  {
    uint64_t v11 = v16[0];
    v16[0] = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkProcessProxy::setShouldDowngradeReferrerForTesting(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    char v16 = a2;
    uint64_t v5 = *a3;
    *a3 = 0;
    uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v6 = 491;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    char v19 = v6;
    IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, &v16);
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v7 = &unk_1EE9E4B80;
    v7[1] = v5;
    uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v17[0] = v7;
    v17[1] = v8;
    char v18 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, 0, (uint64_t)v17, 1);
    if (v18)
    {
      uint64_t v10 = v17[0];
      v17[0] = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    uint64_t result = v19;
    char v19 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  else
  {
    uint64_t v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (IPC::Encoder *)v13(v12);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkProcessProxy::setThirdPartyCookieBlockingMode(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v15 = a2;
  uint64_t v6 = *a4;
  *a4 = 0;
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 500;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v18 = v7;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, &v15);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v7, a3);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v8 = &unk_1EE9E4BA8;
  v8[1] = v6;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v16[0] = v8;
  v16[1] = v9;
  char v17 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, 0, (uint64_t)v16, 1);
  if (v17)
  {
    uint64_t v11 = v16[0];
    v16[0] = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t result = v18;
  char v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetShouldEnbleSameSiteStrictEnforcementForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 492;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v12, *(unsigned char *)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4BD0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setFirstPartyWebsiteDataRemovalModeForTesting(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    uint64_t v8 = &v10;
    char v9 = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetFirstPartyWebsiteDataRemovalModeForTesting,WTF::CompletionHandler<void ()(void)>>(a1, (uint64_t)&v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetFirstPartyWebsiteDataRemovalModeForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 462;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v12, *(unsigned char *)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4BF8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setToSameSiteStrictCookiesForTesting(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetToSameSiteStrictCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(a1, v8, a4, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetToSameSiteStrictCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 502;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4C20;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetFirstPartyHostCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 461;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4C48;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetThirdPartyCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 499;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4C70;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::setDomainsWithUserInteraction(uint64_t a1, uint64_t *a2)
{
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v9);
  if (v10)
  {
    uint64_t v4 = v9;
    uint64_t v5 = 8 * v10;
    do
    {
      uint64_t v6 = *v4;
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)&v8, a2);
      WebKit::WebProcessPool::setDomainsWithUserInteraction(v6, (uint64_t *)&v8);
      if (v8) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v3);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v3);
}

unsigned int *WebKit::NetworkProcessProxy::setDomainsWithCrossPageStorageAccess(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v5 = 1;
  uint64_t v6 = *a3;
  *a3 = 0;
  *(void *)(v5 + 8) = v6;
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v16);
  if (v17)
  {
    uint64_t v8 = v16;
    uint64_t v9 = 8 * v17;
    do
    {
      uint64_t v10 = *v8;
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(&v15, a2);
      atomic_fetch_add((atomic_uint *volatile)v5, 1u);
      uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v11 = &unk_1EE9E4C98;
      v11[1] = v5;
      uint64_t v14 = v11;
      WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(v10, &v15, (uint64_t *)&v14);
      uint64_t v12 = (uint64_t)v14;
      uint64_t v14 = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
      if (v15) {
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v15, v7);
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v7);
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v5);
}

uint64_t WebKit::NetworkProcessProxy::setPrivateClickMeasurementDebugMode(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(result + 136);
  if (v3 && *(unsigned char *)(v3 + 104) || *(void *)(result + 144))
  {
    uint64_t v4 = &v6;
    char v5 = a3;
    return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetPrivateClickMeasurementDebugMode>(result, (uint64_t)&v4, 0, 0);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetPrivateClickMeasurementDebugMode>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 478;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,BOOL>,0ul,1ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

WTF::ApproximateTime *WebKit::NetworkProcessProxy::sendProcessWillSuspendImminentlyForTesting(WTF::ApproximateTime *this)
{
  uint64_t v1 = (uint64_t)this;
  uint64_t v2 = *((void *)this + 17);
  if (v2 && *(unsigned char *)(v2 + 104) || *((void *)this + 18))
  {
    WTF::ApproximateTime::now(this);
    this = (WTF::ApproximateTime *)WebKit::AuxiliaryProcessProxy::sendSync<Messages::NetworkProcess::ProcessWillSuspendImminentlyForTestingSync>(v1, 0, 0, (uint64_t)v4, v3 + 1.0);
    if (v5 != -1) {
      return (WTF::ApproximateTime *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14NetworkProcess42ProcessWillSuspendImminentlyForTestingSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v6, v4);
    }
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendSync<Messages::NetworkProcess::ProcessWillSuspendImminentlyForTestingSync>@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>, double a5@<D0>)
{
  if (*(void *)(result + 144))
  {
    uint64_t v9 = result;
    kdebug_trace();
    uint64_t v10 = *(void *)(v9 + 144);
    if (v10)
    {
      IPC::Connection::sendSync<Messages::NetworkProcess::ProcessWillSuspendImminentlyForTestingSync>(v10, a2, a3, a4, a5);
      return kdebug_trace();
    }
    else
    {
      uint64_t result = 130;
      __break(0xC471u);
    }
  }
  else
  {
    *(unsigned char *)a4 = 1;
    *(_DWORD *)(a4 + ++*(_DWORD *)(this + 16) = 1;
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::sendPrepareToSuspend(WTF::MonotonicTime *a1, char a2, uint64_t *a3, double a4)
{
  if (WebKit::s_suspensionAllowedForTesting)
  {
    WTF::MonotonicTime::now(a1);
    double v13 = v8 + a4;
    LOBYTE(v12[0]) = a2;
    v12[1] = &v13;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>((uint64_t)a1, v12, a3, 0, 0, 0);
  }
  else
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return v11(v10);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, double **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 433;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<BOOL,WTF::MonotonicTime const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::MonotonicTime const&>,0ul,1ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4CD0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::sendProcessDidResume(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 136);
  if (v2 && *(unsigned char *)(v2 + 104) || *(void *)(result + 144))
  {
    char v3 = a2 ^ 1;
    return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ProcessDidResume>(result, &v3, 0, 0);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ProcessDidResume>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  double v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v8 = 434;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::AddWebsiteDataStore>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  double v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v8 = 365;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::WebsiteDataStoreParameters,void>::encode(v8, *a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::NetworkProcessProxy::removeSession(uint64_t a1, void *a2, uint64_t *a3)
{
  char v6 = (void **)(a1 + 536);
  WTF::WeakHashSet<WebKit::WebEditCommandProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebEditCommandProxy>(a1 + 536, a2);
  uint64_t v7 = *(void *)(a1 + 136);
  if (v7 && *(unsigned char *)(v7 + 104) || *(void *)(a1 + 144))
  {
    uint64_t v22 = a2[3];
    uint64_t v8 = *a3;
    *a3 = 0;
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 392;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v25 = v9;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, &v22);
    uint64_t v10 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v10 = &unk_1EE9E4CF8;
    *((void *)v10 + 1) = v8;
    uint64_t v11 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v23[0] = v10;
    v23[1] = v11;
    char v24 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, 0, (uint64_t)v23, 1);
    if (v24)
    {
      uint64_t v13 = v23[0];
      v23[0] = 0;
      if (v13) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v13 + 8))(v13);
      }
    }
    uint64_t v14 = v25;
    uint64_t v25 = 0;
    if (v14)
    {
      IPC::Encoder::~Encoder(v14, v12);
      WTF::fastFree(v20, v21);
    }
  }
  uint64_t v15 = *a3;
  if (*a3)
  {
    v23[0] = 0;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v15 + 16))(v15, v23);
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    char v17 = v23[0];
    v23[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  uint64_t result = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v6);
  if (result)
  {
    {
      uint64_t result = WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess;
      WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = 0;
      if (result)
      {
        if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)result);
          return WTF::fastFree((WTF *)result, v19);
        }
      }
    }
    else
    {
      WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = 0;
    }
  }
  return result;
}

unsigned int *WebKit::NetworkProcessProxy::contentExtensionRules(unsigned int *a1, WTF::StringImpl *a2)
{
  unsigned int v37 = a2;
  unsigned int v38 = a2;
  {
    WebKit::webUserContentControllerProxies(void)::proxies = 0;
  }
  char v3 = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::webUserContentControllerProxies(void)::proxies, &v38);
  if (!v3)
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
LABEL_34:
    unsigned int v38 = (WTF::StringImpl *)&v37;
    uint64_t v39 = &v35;
    WebKit::AuxiliaryProcessProxy::send<Messages::NetworkContentRuleListManager::AddContentRuleLists>((uint64_t)a1, (uint64_t)&v38, 0, 0);
    return (unsigned int *)WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v34);
  }
  uint64_t v4 = v3;
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)(a1 + 118), v3, (uint64_t)&v38);
  uint64_t result = WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>((uint64_t)(v4 + 22), a1, (uint64_t)&v38);
  uint64_t v8 = *((void *)v4 + 13);
  uint64_t v7 = (void **)(v4 + 26);
  uint64_t v6 = v8;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  if (!v8 || (uint64_t v9 = *(unsigned int *)(v6 - 12), !v9))
  {
LABEL_8:
    uint64_t v10 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v7);
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    if (*v7) {
      uint64_t v14 = (uint64_t)&(*v7)[7 * *((unsigned int *)*v7 - 1)];
    }
    else {
      uint64_t v14 = 0;
    }
    if ((void *)v14 != v10)
    {
      do
      {
        uint64_t v15 = *(void *)(v11[1] + 16);
        uint64_t v16 = *(WTF::StringImpl **)(v15 + 16);
        if (v16) {
          *(_DWORD *)v16 += 2;
        }
        unsigned int v38 = v16;
        char v17 = *(atomic_uint **)(v15 + 24);
        if (v17) {
          atomic_fetch_add(v17, 1u);
        }
        uint64_t v39 = (uint64_t *)v17;
        long long v19 = *(_OWORD *)(v15 + 32);
        long long v18 = *(_OWORD *)(v15 + 48);
        long long v20 = *(_OWORD *)(v15 + 80);
        long long v42 = *(_OWORD *)(v15 + 64);
        long long v43 = v20;
        long long v40 = v19;
        long long v41 = v18;
        double v21 = (WTF::StringImpl *)v11[2];
        if (v21) {
          *(_DWORD *)v21 += 2;
        }
        uint64_t v22 = v38;
        uint64_t v44 = v21;
        long long v23 = *(_OWORD *)(v11 + 5);
        long long v45 = *(_OWORD *)(v11 + 3);
        long long v46 = v23;
        int v24 = HIDWORD(v36);
        uint64_t v25 = v35 + 120 * HIDWORD(v36);
        unsigned int v38 = 0;
        *(void *)uint64_t v25 = v22;
        uint64_t v26 = v39;
        uint64_t v39 = 0;
        *(void *)(v25 + 8) = v26;
        long long v27 = v40;
        long long v28 = v41;
        long long v29 = v43;
        *(_OWORD *)(v25 + 48) = v42;
        *(_OWORD *)(v25 + 64) = v29;
        *(_OWORD *)(v25 + ++*(_DWORD *)(this + 16) = v27;
        *(_OWORD *)(v25 + 32) = v28;
        WTF::URL::URL(v25 + 80, (uint64_t *)&v44);
        HIDWORD(v36) = v24 + 1;
        uint64_t v31 = v44;
        uint64_t v44 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2) {
            WTF::StringImpl::destroy(v31, v30);
          }
          else {
            *(_DWORD *)v31 -= 2;
          }
        }
        uint64_t v32 = (unsigned int *)v39;
        uint64_t v39 = 0;
        if (v32) {
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v32);
        }
        uint64_t v33 = v38;
        unsigned int v38 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2) {
            WTF::StringImpl::destroy(v33, v30);
          }
          else {
            *(_DWORD *)v33 -= 2;
          }
        }
        while (1)
        {
          v11 += 7;
          if (v11 == v13) {
            break;
          }
          if ((unint64_t)(*v11 + 1) > 1) {
            goto LABEL_33;
          }
        }
        uint64_t v11 = v13;
LABEL_33:
        ;
      }
      while (v11 != (void *)v14);
    }
    goto LABEL_34;
  }
  if (v9 < 0x2222223)
  {
    LODWORD(v36) = 120 * (int)v9 / 0x78u;
    uint64_t v35 = WTF::fastMalloc((WTF *)(120 * v9));
    goto LABEL_8;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkContentRuleListManager::AddContentRuleLists>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 295;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  long long v18 = v8;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, *(uint64_t **)a2);
  IPC::VectorArgumentCoder<false,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v8, *(void *)(a2 + 8));
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  long long v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::NetworkProcessProxy::didDestroyWebUserContentControllerProxy(WebKit::NetworkProcessProxy *this, WebKit::WebUserContentControllerProxy *a2)
{
  uint64_t v5 = *((void *)a2 + 4);
  uint64_t v6 = &v5;
  WebKit::AuxiliaryProcessProxy::send<Messages::NetworkContentRuleListManager::Remove>((uint64_t)this, &v6, 0, 0);
  return WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)this + 472, a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkContentRuleListManager::Remove>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 296;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  long long v18 = v8;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, *a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  long long v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void WebKit::NetworkProcessProxy::registerRemoteWorkerClientProcess(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = qword_1EB358870;
  if (os_log_type_enabled((os_log_t)qword_1EB358870, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = "shared";
    *(_DWORD *)uint64_t v14 = 136446722;
    if (a2 == 1) {
      uint64_t v8 = "service";
    }
    *(void *)&v14[4] = v8;
    __int16 v15 = 2048;
    uint64_t v16 = a3;
    __int16 v17 = 2048;
    uint64_t v18 = a4;
    _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "NetworkProcessProxy::registerRemoteWorkerClientProcess: workerType=%{public}s, clientProcessIdentifier=%llu, remoteWorkerProcessIdentifier=%llu", v14, 0x20u);
  }
  *(void *)uint64_t v14 = a3;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  uint64_t v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, v14);
  uint64_t v10 = v9;
  if (v9) {
    atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 1u);
  }
  *(void *)uint64_t v14 = a4;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  uint64_t v11 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, v14);
  uint64_t v12 = v11;
  if (v11)
  {
    atomic_fetch_add((atomic_uint *volatile)(v11 + 16), 1u);
    if (v10)
    {
      WebKit::WebProcessProxy::registerRemoteWorkerClientProcess(v11, a2, v10);
      goto LABEL_16;
    }
  }
  uint64_t v13 = qword_1EB358870;
  if (!os_log_type_enabled((os_log_t)qword_1EB358870, OS_LOG_TYPE_ERROR))
  {
    if (!v12) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  *(_DWORD *)uint64_t v14 = 134218240;
  *(void *)&v14[4] = v10;
  __int16 v15 = 2048;
  uint64_t v16 = v12;
  _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "NetworkProcessProxy::registerRemoteWorkerClientProcess: Could not look up one of the processes (clientWebProcess=%p, remoteWorkerProcess=%p)", v14, 0x16u);
  if (v12) {
LABEL_16:
  }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
LABEL_17:
  if (v10) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v10 + 16));
  }
}

void WebKit::NetworkProcessProxy::unregisterRemoteWorkerClientProcess(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = qword_1EB358870;
  if (os_log_type_enabled((os_log_t)qword_1EB358870, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = "shared";
    *(_DWORD *)uint64_t v14 = 136446722;
    if (a2 == 1) {
      uint64_t v8 = "service";
    }
    *(void *)&v14[4] = v8;
    __int16 v15 = 2048;
    uint64_t v16 = a3;
    __int16 v17 = 2048;
    uint64_t v18 = a4;
    _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "NetworkProcessProxy::unregisterRemoteWorkerClientProcess: workerType=%{public}s, clientProcessIdentifier=%llu, remoteWorkerProcessIdentifier=%llu", v14, 0x20u);
  }
  *(void *)uint64_t v14 = a3;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  uint64_t v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, v14);
  uint64_t v10 = v9;
  if (v9) {
    atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 1u);
  }
  *(void *)uint64_t v14 = a4;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  uint64_t v11 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, v14);
  uint64_t v12 = v11;
  if (v11)
  {
    atomic_fetch_add((atomic_uint *volatile)(v11 + 16), 1u);
    if (v10)
    {
      WebKit::WebProcessProxy::unregisterRemoteWorkerClientProcess(v11, a2, (void *)v10);
      goto LABEL_16;
    }
  }
  uint64_t v13 = qword_1EB358870;
  if (!os_log_type_enabled((os_log_t)qword_1EB358870, OS_LOG_TYPE_ERROR))
  {
    if (!v12) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  *(_DWORD *)uint64_t v14 = 134218240;
  *(void *)&v14[4] = v10;
  __int16 v15 = 2048;
  uint64_t v16 = v12;
  _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "NetworkProcessProxy::unregisterRemoteWorkerClientProcess: Could not look up one of the processes (clientWebProcess=%p, remoteWorkerProcess=%p)", v14, 0x16u);
  if (v12) {
LABEL_16:
  }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
LABEL_17:
  if (v10) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v10 + 16));
  }
}

unsigned int *WebKit::NetworkProcessProxy::remoteWorkerContextConnectionNoLongerNeeded(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = a3;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  uint64_t result = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, &v6);
  if (result)
  {
    uint64_t v5 = result + 4;
    atomic_fetch_add((atomic_uint *volatile)result + 4, 1u);
    WebKit::WebProcessProxy::disableRemoteWorkers((uint64_t)result, a2);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
  }
  return result;
}

void WebKit::NetworkProcessProxy::establishRemoteWorkerContextConnectionToNetworkProcess(uint64_t a1, WebKit *a2, const WTF::StringImpl **a3, WebKit::WebsiteDataStore *a4, char a5, _OWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v8 = a6[1];
  v9[0] = *a6;
  v9[1] = v8;
  void v9[2] = a6[2];
  WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(a2, a3, a4, a5, (uint64_t)v9, a7, a8);
}

atomic_uint *WebKit::NetworkProcessProxy::startServiceWorkerBackgroundProcessing(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  uint64_t result = (atomic_uint *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, &v4);
  if (result)
  {
    char v3 = (unsigned int *)(result + 4);
    atomic_fetch_add(result + 4, 1u);
    WebKit::WebProcessProxy::startServiceWorkerBackgroundProcessing((WebKit::WebProcessProxy *)result);
    return (atomic_uint *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
  }
  return result;
}

atomic_uint *WebKit::NetworkProcessProxy::endServiceWorkerBackgroundProcessing(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  uint64_t result = (atomic_uint *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, &v4);
  if (result)
  {
    char v3 = (unsigned int *)(result + 4);
    atomic_fetch_add(result + 4, 1u);
    WebKit::WebProcessProxy::endServiceWorkerBackgroundProcessing((WebKit::WebProcessProxy *)result);
    return (atomic_uint *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::requestBackgroundFetchPermission(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v8 = qword_1EB358550;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    *(_DWORD *)uint64_t v14 = 134217984;
    *(void *)&v14[4] = a1;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::requestBackgroundFetchPermission", v14, 0xCu);
  }
  *(void *)uint64_t v14 = a2;
  uint64_t v10 = WebKit::allDataStores((WebKit *)v9);
  uint64_t v11 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v10, v14);
  if (v11) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(v11 + 384) + 96))(*(void *)(v11 + 384), a3, a3 + 32, a4);
  }
  uint64_t v13 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v13 + 16))(v13, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
}

uint64_t WebKit::NetworkProcessProxy::getAllBackgroundFetchIdentifiers(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v3 = *(void *)(a1 + 136);
  if (v3 && *(unsigned char *)(v3 + 104) || *(void *)(a1 + 144))
  {
    v7[0] = &v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetAllBackgroundFetchIdentifiers,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(a1, v7, a3, 0, 0, 1);
  }
  else
  {
    v7[0] = 0;
    v7[1] = 0;
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(void *)v5 + 16))(v5, v7);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetAllBackgroundFetchIdentifiers,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 402;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4D20;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::getBackgroundFetchState(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a2;
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4 && *(unsigned char *)(v4 + 104) || *(void *)(a1 + 144))
  {
    v9[0] = &v8;
    v9[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetBackgroundFetchState,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)>>(a1, v9, a4, 0, 0, 1);
  }
  else
  {
    LOBYTE(v9[0]) = 0;
    char v10 = 0;
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(void *)v6 + 16))(v6, v9);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    return std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v9, v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetBackgroundFetchState,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 405;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4D48;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::AbortBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 362;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4D70;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::PauseBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 431;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4D98;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ResumeBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 450;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4DC0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClickBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 382;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4DE8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::notifyBackgroundFetchChange(WebKit *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = WebKit::allDataStores(a1);
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v2, &v5);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(result + 384) + 104);
    return v4();
  }
  return result;
}

unsigned int *WebKit::NetworkProcessProxy::increaseQuota(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v31 = a1;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v12 = *(atomic_uint **)(a1 + 8);
  if (v12) {
    atomic_fetch_add(v12, 1u);
  }
  uint64_t v32 = (WTF *)v12;
  uint64_t v33 = a2;
  v34[0] = 0;
  int v35 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v34, a3);
  v36[0] = 0;
  int v37 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v36, a3 + 32);
  uint64_t v38 = a4;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x68);
  *(void *)uint64_t v13 = &unk_1EE9E4E88;
  *(void *)(v13 + 8) = v31;
  uint64_t v14 = v32;
  uint64_t v32 = 0;
  *(void *)(v13 + ++*(_DWORD *)(this + 16) = v14;
  *(void *)(v13 + 24) = v33;
  *(unsigned char *)(v13 + 32) = 0;
  *(_DWORD *)(v13 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v13 + 32, (uint64_t)v34);
  *(unsigned char *)(v13 + 64) = 0;
  *(_DWORD *)(v13 + 88) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v13 + 64, (uint64_t)v36);
  *(void *)(v13 + 96) = v38;
  uint64_t v15 = qword_1EB3585F0;
  BOOL v16 = os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT);
  if (v16)
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = a1;
    _os_log_impl(&dword_1985F2000, v15, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::requestStorageSpace", buf, 0xCu);
  }
  *(void *)long long buf = a2;
  int v17 = WebKit::allDataStores((WebKit *)v16);
  uint64_t v18 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v17, buf);
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 384);
    *(void *)long long buf = a2;
    uint8_t buf[8] = 0;
    int v40 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&buf[8], a3);
    v41[0] = 0;
    int v42 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v41, a3 + 32);
    *(void *)&long long v43 = a5;
    *((void *)&v43 + 1) = a6;
    uint64_t v44 = a7;
    uint64_t v45 = v13;
    uint64_t v20 = WTF::fastMalloc((WTF *)0x70);
    *(void *)uint64_t v20 = &unk_1EE9E4E10;
    *(void *)(v20 + 8) = *(void *)buf;
    *(unsigned char *)(v20 + ++*(_DWORD *)(this + 16) = 0;
    *(_DWORD *)(v20 + ++*(_DWORD *)(this + 40) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v20 + 16, (uint64_t)&buf[8]);
    *(unsigned char *)(v20 + 48) = 0;
    *(_DWORD *)(v20 + 72) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v20 + 48, (uint64_t)v41);
    long long v21 = v43;
    *(void *)(v20 + 96) = v44;
    *(_OWORD *)(v20 + 80) = v21;
    uint64_t v22 = v45;
    uint64_t v45 = 0;
    *(void *)(v20 + 104) = v22;
    uint64_t v29 = v20;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v19 + 16))(v19, a3, a3 + 32, a5, a6, a7, &v29);
    uint64_t v24 = v29;
    uint64_t v29 = 0;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
    uint64_t v25 = v45;
    uint64_t v45 = 0;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
    if (v42 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9E3EF0[v42])(&v30, v41);
    }
    int v42 = -1;
    if (v40 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9E3EF0[v40])(&v30, &buf[8]);
    }
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(*(void *)v13 + 16))(v13, 0, 0);
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  if (v37 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_1EE9E3EF0[v37])(buf, v36);
  }
  int v37 = -1;
  if (v35 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_1EE9E3EF0[v35])(buf, v34);
  }
  int v35 = -1;
  uint64_t result = (unsigned int *)v32;
  uint64_t v32 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v23);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::RegisterScheme>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 115;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::UnregisterScheme>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 116;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unsigned int *WebKit::NetworkProcessProxy::setWebProcessHasUploads(unsigned int *result, uint64_t a2, char a3)
{
  uint64_t v4 = result;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    *(void *)long long buf = a2;
    {
      WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
    }
    uint64_t result = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, buf);
    if (result)
    {
      uint64_t v5 = result;
      uint64_t v6 = result + 4;
      atomic_fetch_add((atomic_uint *volatile)result + 4, 1u);
      if (*((unsigned char *)v4 + 520))
      {
LABEL_34:
        uint64_t v29 = (uint64_t *)(v4 + 128);
        uint64_t v30 = *((void *)v4 + 64);
        if (v30
          || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)v4 + 64),
              (uint64_t v30 = *v29) != 0))
        {
          int v31 = *(_DWORD *)(v30 - 8);
        }
        else
        {
          int v31 = 0;
        }
        unint64_t v32 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
        unint64_t v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
        unint64_t v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
        unsigned int v35 = v31 & ((v34 >> 31) ^ v34);
        uint64_t v36 = (void *)(v30 + 16 * v35);
        uint64_t v37 = *v36;
        if (*v36)
        {
          uint64_t v38 = 0;
          int v39 = 1;
          while (v37 != a2)
          {
            if (v37 == -1) {
              uint64_t v38 = v36;
            }
            unsigned int v35 = (v35 + v39) & v31;
            uint64_t v36 = (void *)(v30 + 16 * v35);
            uint64_t v37 = *v36;
            ++v39;
            if (!*v36)
            {
              if (v38)
              {
                void *v38 = 0;
                v38[1] = 0;
                --*(_DWORD *)(*v29 - 16);
                uint64_t v36 = v38;
              }
              goto LABEL_45;
            }
          }
          return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
        }
LABEL_45:
        *uint64_t v36 = a2;
        int v40 = qword_1EB358348;
        if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v41 = *((void *)v5 + 17);
          if (v41) {
            LODWORD(v41) = *(_DWORD *)(v41 + 108);
          }
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v41;
          _os_log_impl(&dword_1985F2000, v40, OS_LOG_TYPE_DEFAULT, "NetworkProcessProxy::setWebProcessHasUploads: Taking upload assertion on behalf of WebProcess with PID %d", buf, 8u);
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        long long v72 = 0;
        uint64_t v42 = WTF::fastMalloc((WTF *)0xB0);
        uint64_t v43 = WebKit::ProcessAssertion::ProcessAssertion(v42, v5, (_DWORD **)buf, 2);
        WebKit::ProcessAssertion::acquireAsync(v43, (uint64_t *)&v72);
        uint64_t v45 = v72;
        long long v72 = 0;
        if (v45) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v45 + 8))(v45);
        }
        uint64_t v46 = *(WTF::StringImpl **)buf;
        *(void *)long long buf = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2) {
            WTF::StringImpl::destroy(v46, v44);
          }
          else {
            *(_DWORD *)v46 -= 2;
          }
        }
        uint64_t v47 = v36[1];
        v36[1] = v42;
        if (v47) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v47 + 8), v44);
        }
        uint64_t v48 = *v29;
        if (*v29) {
          int v49 = *(_DWORD *)(v48 - 12) + 1;
        }
        else {
          int v49 = 1;
        }
        *(_DWORD *)(v48 - 12) = v49;
        uint64_t v50 = *v29;
        if (*v29) {
          int v51 = *(_DWORD *)(v50 - 12);
        }
        else {
          int v51 = 0;
        }
        uint64_t v52 = (*(_DWORD *)(v50 - 16) + v51);
        unint64_t v53 = *(unsigned int *)(v50 - 4);
        if (v53 > 0x400)
        {
          if (v53 > 2 * v52) {
            return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
          }
        }
        else if (3 * v53 > 4 * v52)
        {
          return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
        }
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v29);
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
      }
      uint64_t v7 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "NetworkProcessProxy::setWebProcessHasUploads: The number of uploads in progress is now greater than 0. Taking Networking and UI process assertions.", buf, 2u);
      }
      pid_t v8 = getpid();
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      BOOL v9 = *(WTF::StringImpl **)buf;
      uint64_t v71 = 0;
      long long v72 = *(WTF::StringImpl **)buf;
      uint64_t v10 = WTF::fastMalloc((WTF *)0xB0);
      uint64_t v11 = WebKit::ProcessAssertion::ProcessAssertion(v10, v8, (_DWORD **)&v72, 2, MEMORY[0x1E4F30980]);
      WebKit::ProcessAssertion::acquireAsync(v11, &v71);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v12 = *(WTF::StringImpl **)buf;
      int v70 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      uint64_t v13 = WTF::fastMalloc((WTF *)0xB0);
      uint64_t v14 = WebKit::ProcessAssertion::ProcessAssertion(v13, v4, (_DWORD **)&v70, 2);
      WebKit::ProcessAssertion::acquireAsync(v14, (uint64_t *)buf);
      if (*((unsigned char *)v4 + 520))
      {
        uint64_t v16 = *((void *)v4 + 62);
        *((void *)v4 + 62) = v10;
        if (v16) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v16 + 8), v15);
        }
        uint64_t v17 = *((void *)v4 + 63);
        *((void *)v4 + 63) = v13;
        if (v17) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v17 + 8), v15);
        }
        uint64_t v18 = *((void *)v4 + 64);
        *((void *)v4 + 64) = 0;
        if (v18) {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v18, v15);
        }
      }
      else
      {
        *((void *)v4 + 62) = v10;
        *((void *)v4 + 63) = v13;
        *((void *)v4 + 64) = 0;
        *((unsigned char *)v4 + 520) = 1;
      }
      long long v27 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v27)
      {
        (*(void (**)(WTF::StringImpl *))(*(void *)v27 + 8))(v27);
        if (!v12) {
          goto LABEL_28;
        }
      }
      else if (!v12)
      {
        goto LABEL_28;
      }
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v15);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
LABEL_28:
      uint64_t v28 = v71;
      uint64_t v71 = 0;
      if (v28)
      {
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        if (!v9) {
          goto LABEL_33;
        }
      }
      else if (!v9)
      {
        goto LABEL_33;
      }
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v15);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
LABEL_33:
      if (*((unsigned char *)v4 + 520)) {
        goto LABEL_34;
      }
LABEL_100:
      __break(1u);
    }
  }
  else if (*((unsigned char *)result + 520))
  {
    uint64_t v19 = *((void *)result + 64);
    if (v19)
    {
      unsigned int v20 = *(_DWORD *)(v19 - 8);
      unint64_t v21 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      unint64_t v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
      unint64_t v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
      uint64_t v24 = v20 & ((v23 >> 31) ^ v23);
      uint64_t v25 = *(void *)(v19 + 16 * v24);
      if (v25 != a2)
      {
        int v26 = 1;
        while (v25)
        {
          uint64_t v24 = (v24 + v26) & v20;
          uint64_t v25 = *(void *)(v19 + 16 * v24);
          ++v26;
          if (v25 == a2) {
            goto LABEL_70;
          }
        }
        uint64_t v24 = *(unsigned int *)(v19 - 4);
      }
LABEL_70:
      if (v24 != *(_DWORD *)(v19 - 4))
      {
        uint64_t v54 = (uint64_t *)(result + 128);
        uint64_t v55 = (void *)(v19 + 16 * v24);
        uint64_t v56 = v55[1];
        v55[1] = 0;
        uint64_t v57 = (void *)*((void *)result + 64);
        if (!v57 || (v57 += 2 * *((unsigned int *)v57 - 1), v57 != v55))
        {
          if (v57 != v55)
          {
            void *v55 = -1;
            v55[1] = 0;
            ++*(_DWORD *)(*v54 - 16);
            uint64_t v58 = *v54;
            int v59 = *v54 ? *(_DWORD *)(v58 - 12) - 1 : -1;
            *(_DWORD *)(v58 - 12) = v59;
            uint64_t v60 = *v54;
            if (*v54)
            {
              unsigned int v61 = 6 * *(_DWORD *)(v60 - 12);
              unsigned int v62 = *(_DWORD *)(v60 - 4);
              if (v61 < v62 && v62 >= 9) {
                uint64_t result = (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash((uint64_t *)result + 64, v62 >> 1);
              }
            }
          }
        }
        if (v56)
        {
          uint64_t v64 = qword_1EB358348;
          if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
          {
            int v66 = *(_DWORD *)(v56 + 20);
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v66;
            _os_log_impl(&dword_1985F2000, v64, OS_LOG_TYPE_DEFAULT, "NetworkProcessProxy::setWebProcessHasUploads: Releasing upload assertion on behalf of WebProcess with PID %d", buf, 8u);
          }
          if (!*((unsigned char *)v4 + 520)) {
            goto LABEL_100;
          }
          if (!*v54 || !*(_DWORD *)(*v54 - 12))
          {
            uint64_t v67 = (uint64_t)(v4 + 124);
            uint64_t v68 = qword_1EB358348;
            if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_1985F2000, v68, OS_LOG_TYPE_DEFAULT, "NetworkProcessProxy::setWebProcessHasUploads: The number of uploads in progress is now zero. Releasing Networking and UI process assertions.", buf, 2u);
            }
            std::__optional_destruct_base<WebKit::NetworkProcessProxy::UploadActivity,false>::reset[abi:sn180100](v67, v69);
          }
          return (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v56 + 8), v65);
        }
      }
    }
  }
  return result;
}

void WebKit::NetworkProcessProxy::testProcessIncomingSyncMessagesWhenWaitingForSyncReply(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebKit::WebProcessProxy::webPage(a2, &v31);
  uint64_t v4 = v31;
  if (v31)
  {
    uint64_t v5 = *(void *)(v31 + 256);
    if (!*(void *)(v5 + 144))
    {
      int v8 = 0;
      int v9 = 1;
      LOBYTE(v28) = 1;
      int v30 = 1;
LABEL_19:
      if (v9) {
        BOOL v16 = 1;
      }
      else {
        BOOL v16 = v8 == 0;
      }
      uint64_t v17 = !v16;
      uint64_t v18 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v17);
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      ((void (*)(uint64_t **, uint64_t **))off_1EE9E3F00[v9])(&v33, &v28);
      CFRelease(*(CFTypeRef *)(v4 + 8));
      return;
    }
    uint64_t v6 = *(void *)(*(void *)(v31 + 32) + 1928);
    kdebug_trace();
    uint64_t v7 = *(void *)(v5 + 144);
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198FBA248);
    }
    uint64_t v36 = 0;
    IPC::Connection::createSyncMessageEncoder(3792, v6, &v36, &v35);
    IPC::Connection::sendSyncMessage(v7, v36, (uint64_t *)&v35, 2, (uint64_t)&v33, INFINITY);
    if (v34)
    {
      if (v34 == 1)
      {
        int v8 = 0;
        LOBYTE(v28) = (_BYTE)v33;
        int v9 = 1;
        int v30 = 1;
        int v10 = 1;
        goto LABEL_15;
      }
    }
    else
    {
      __int16 v32 = 0;
      IPC::Decoder::operator>><std::tuple<BOOL>>(v33, &v32);
      if (!HIBYTE(v32))
      {
        int v8 = 0;
        LOBYTE(v28) = 13;
        int v9 = 1;
        int v30 = 1;
        int v10 = v34;
        if (v34 == -1)
        {
LABEL_16:
          uint64_t v15 = v35;
          unsigned int v35 = 0;
          if (v15)
          {
            IPC::Encoder::~Encoder(v15, v13);
            WTF::fastFree(v19, v20);
          }
          kdebug_trace();
          goto LABEL_19;
        }
LABEL_15:
        ((void (*)(__int16 *, uint64_t **))off_1EE9E4CB0[v10])(&v32, &v33);
        goto LABEL_16;
      }
      int v10 = v34;
      if (!v34)
      {
        int v9 = 0;
        uint64_t v14 = v33;
        unint64_t v33 = 0;
        int v8 = v32;
        uint64_t v28 = v14;
        char v29 = v32;
        int v30 = 0;
        goto LABEL_15;
      }
    }
    uint64_t v21 = std::__throw_bad_variant_access[abi:sn180100]();
    WebKit::NetworkProcessProxy::preconnectTo(v21, v22, v23, v24, v25, v26, v27);
    return;
  }
  uint64_t v11 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v11 + 16))(v11, 0);
  uint64_t v12 = *(void (**)(uint64_t))(*(void *)v11 + 8);

  v12(v11);
}

uint64_t WebKit::NetworkProcessProxy::preconnectTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WebCore::ResourceRequestBase *this, char a6, __int16 a7)
{
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  uint64_t v15 = a4;
  __int16 v14 = a7;
  uint64_t result = WebCore::ResourceRequestBase::url(this);
  if (*(unsigned char *)(result + 8))
  {
    uint64_t result = WebCore::ResourceRequestBase::url(this);
    if ((*(unsigned char *)(result + 8) & 2) != 0)
    {
      v11[0] = &v17;
      v11[1] = &v16;
      void v11[2] = &v15;
      v11[3] = this;
      char v12 = a6;
      uint64_t v13 = &v14;
      return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::PreconnectTo>(a1, (uint64_t)v11, 0, 0);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::PreconnectTo>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 432;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::ResourceRequest const&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::ResourceRequest const&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain> const&>,0ul,1ul,2ul,3ul,4ul,5ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ResetQuota,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  char v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v12 = 448;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  __int16 v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *__int16 v14 = &unk_1EE9E4EB0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ResetStoragePersistedState,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  char v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v12 = 449;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  __int16 v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *__int16 v14 = &unk_1EE9E4ED8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::hasAppBoundSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v3 = *(void *)(a1 + 136);
  if (v3 && *(unsigned char *)(v3 + 104) || *(void *)(a1 + 144))
  {
    uint64_t v7 = &v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HasAppBoundSession,WTF::CompletionHandler<void ()(BOOL)>>(a1, &v7, a3, 0, 0, 1);
  }
  else
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HasAppBoundSession,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  char v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v12 = 411;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  __int16 v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *__int16 v14 = &unk_1EE9E4F00;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::NetworkProcessProxy::clearAppBoundSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v3 = *(void *)(a1 + 136);
  if (v3 && *(unsigned char *)(v3 + 104) || *(void *)(a1 + 144))
  {
    uint64_t v7 = &v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearAppBoundSession,WTF::CompletionHandler<void ()(void)>>(a1, &v7, a3, 0, 0, 1);
  }
  else
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearAppBoundSession,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  char v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v12 = 374;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  __int16 v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *__int16 v14 = &unk_1EE9E4F28;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

WTF::StringImpl **WebKit::NetworkProcessProxy::getAppBoundDomains(WebKit *a1, WTF::StringImpl **a2, uint64_t *a3)
{
  char v12 = a2;
  uint64_t v4 = WebKit::allDataStores(a1);
  uint64_t v5 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v4, &v12);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *a3;
    *a3 = 0;
    uint64_t v8 = WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v8 = &unk_1EE9E4F50;
    *(void *)(v8 + 8) = v7;
    char v12 = (WTF::StringImpl **)v8;
    WebKit::WebsiteDataStore::getAppBoundDomains(v6, (uint64_t *)&v12);
    uint64_t result = v12;
    if (v12) {
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*v12 + 1))(v12);
    }
  }
  else
  {
    char v12 = 0;
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl ***))(*(void *)v10 + 16))(v10, &v12);
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    uint64_t result = v12;
    if (v12) {
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v11);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::UpdateBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  char v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v12 = 514;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  __int16 v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *__int16 v14 = &unk_1EE9E4F78;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 376;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v13 = &unk_1EE9E4FA0;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 406;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4FC8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 407;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E4FF0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

IPC::Encoder *WebKit::NetworkProcessProxy::processPushMessage(WebCore::DeprecatedGlobalSettings *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int v39 = a2;
  uint64_t v8 = (WebKit *)WebCore::DeprecatedGlobalSettings::builtInNotificationsEnabled(a1);
  if (v8)
  {
    char v9 = 1;
    goto LABEL_23;
  }
  v42[0] = a2;
  uint64_t v10 = WebKit::allDataStores(v8);
  uint64_t v11 = (WebKit::WebNotificationManagerProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v10, v42);
  if (!v11)
  {
    uint64_t v13 = 0;
    goto LABEL_8;
  }
  uint64_t v11 = (WebKit::WebNotificationManagerProxy *)(*(void *(**)(WTF::StringImpl **__return_ptr))(**((void **)v11 + 48) + 56))(v42);
  uint64_t v13 = (WTF::StringImpl **)v42[0];
  uint64_t v41 = v42[0];
  if (!v42[0])
  {
LABEL_8:
    char v14 = 1;
    goto LABEL_9;
  }
  if (!*((_DWORD *)v42[0] - 3))
  {
    char v14 = 0;
LABEL_9:
    uint64_t v15 = WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(v11);
    (*(void (**)(WTF::StringImpl **__return_ptr))(**((void **)v15 + 4) + 64))(v42);
    uint64_t v41 = v42[0];
    v42[0] = 0;
    if ((v14 & 1) == 0)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v12);
      if (v42[0]) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v42[0], v12);
      }
    }
  }
  WebCore::SecurityOriginData::fromURL((uint64_t *)v42, (WebCore::SecurityOriginData *)(a3 + 32), v12);
  WebCore::SecurityOriginData::toString((uint64_t *)&v38, (WebCore::SecurityOriginData *)v42);
  if (v44 != -1) {
    ((void (*)(char *, WTF::StringImpl **))off_1EE9E3EF0[v44])(&v40, v42);
  }
  int v17 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)&v41, &v38, v16);
  uint64_t v19 = v41;
  if (v41) {
    uint64_t v19 = (IPC::Encoder *)((char *)v41 + 16 * *((unsigned int *)v41 - 1));
  }
  if (v19 == v17) {
    char v9 = 2;
  }
  else {
    char v9 = *((unsigned char *)v17 + 8);
  }
  unsigned int v20 = v38;
  uint64_t v38 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v18);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  if (v41) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v41, v18);
  }
LABEL_23:
  pid_t v21 = getpid();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v41 = 0;
  uint64_t v22 = WTF::fastMalloc((WTF *)0xB0);
  uint64_t v23 = WebKit::ProcessAssertion::ProcessAssertion(v22, v21, (_DWORD **)v42, 2, MEMORY[0x1E4F30980]);
  WebKit::ProcessAssertion::acquireAsync(v23, (uint64_t *)&v41);
  uint64_t v25 = v41;
  uint64_t v41 = 0;
  if (v25) {
    (*(void (**)(IPC::Encoder *))(*(void *)v25 + 8))(v25);
  }
  char v26 = v42[0];
  v42[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v24);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  __int16 v27 = (WebCore::TimerBase *)WTF::fastMalloc((WTF *)0x38);
  uint64_t v28 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v28 = &unk_1EE9E3F20;
  v28[1] = v22;
  WebCore::TimerBase::TimerBase(v27);
  *(void *)__int16 v27 = &unk_1EE9BA5F0;
  *((void *)v27 + 6) = v28;
  WebCore::TimerBase::start();
  uint64_t v29 = *a4;
  *a4 = 0;
  int v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v30 = 436;
  *((void *)v30 + 1) = 0;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  uint64_t v41 = v30;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v30, (uint64_t *)&v39);
  IPC::ArgumentCoder<WebKit::WebPushMessage,void>::encode(v30, a3);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v30, v9);
  uint64_t v31 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v31 = &unk_1EE9E5018;
  *((void *)v31 + 1) = v29;
  *((void *)v31 + 2) = v27;
  __int16 v32 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v42[0] = v31;
  v42[1] = v32;
  char v43 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)a1, &v41, 0, (uint64_t)v42, 1);
  if (v43)
  {
    int v34 = v42[0];
    v42[0] = 0;
    if (v34) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v34 + 8))(v34);
    }
  }
  uint64_t result = v41;
  uint64_t v41 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v33);
    return (IPC::Encoder *)WTF::fastFree(v36, v37);
  }
  return result;
}

WebKit::WebNotificationManagerProxy *WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(WebKit::WebNotificationManagerProxy *this)
{
    return (WebKit::WebNotificationManagerProxy *)WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(void)::sharedManager;
  uint64_t v2 = (WebKit::WebNotificationManagerProxy *)API::Object::newObject(0x38uLL, 81);
  uint64_t result = WebKit::WebNotificationManagerProxy::WebNotificationManagerProxy(v2, 0);
  WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(void)::sharedManager = (uint64_t)result;
  return result;
}

uint64_t WebKit::NetworkProcessProxy::processNotificationEvent(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  if (*a4)
  {
    pid_t v8 = getpid();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    __int16 v27 = 0;
    uint64_t v9 = WTF::fastMalloc((WTF *)0xB0);
    uint64_t v10 = WebKit::ProcessAssertion::ProcessAssertion(v9, v8, (_DWORD **)v25, 2, MEMORY[0x1E4F30980]);
    WebKit::ProcessAssertion::acquireAsync(v10, (uint64_t *)&v27);
    uint64_t v12 = v27;
    __int16 v27 = 0;
    if (v12) {
      (*(void (**)(IPC::Encoder *))(*(void *)v12 + 8))(v12);
    }
    uint64_t v13 = v25[0];
    v25[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v11);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    char v14 = (WebCore::TimerBase *)WTF::fastMalloc((WTF *)0x38);
    uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v15 = &unk_1EE9E3F48;
    v15[1] = v9;
    WebCore::TimerBase::TimerBase(v14);
    *(void *)char v14 = &unk_1EE9BA5F0;
    *((void *)v14 + 6) = v15;
    WebCore::TimerBase::start();
    uint64_t v16 = *a4;
    *a4 = 0;
    int v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v17 = 435;
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 66) = (char *)v17 + 16;
    *((void *)v17 + 67) = 512;
    *((void *)v17 + 68) = 0;
    *((void *)v17 + 70) = 0;
    *((void *)v17 + 69) = 0;
    IPC::Encoder::encodeHeader(v17);
    __int16 v27 = v17;
    IPC::ArgumentCoder<WebCore::NotificationData,void>::encode(v17, a2);
    IPC::ArgumentCoder<WebKit::ShouldGrandfatherStatistics,void>::encode<IPC::Encoder>(v17, a3);
    uint64_t v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v18 = &unk_1EE9E5040;
    *((void *)v18 + 1) = v16;
    *((void *)v18 + 2) = v14;
    uint64_t v19 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v25[0] = v18;
    v25[1] = v19;
    char v26 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v27, 0, (uint64_t)v25, 1);
    if (v26)
    {
      pid_t v21 = v25[0];
      v25[0] = 0;
      if (v21) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v21 + 8))(v21);
      }
    }
    uint64_t result = (uint64_t)v27;
    __int16 v27 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v20);
      return WTF::fastFree(v23, v24);
    }
  }
  else
  {
    uint64_t result = 1838;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HasPushSubscriptionForTesting,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 414;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  char v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v14 = &unk_1EE9E50B8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::TerminateRemoteWorkerContextConnectionWhenPossible>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  pid_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)pid_t v8 = 513;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,PAL::SessionID const&,WebCore::RegistrableDomain const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,PAL::SessionID const&,WebCore::RegistrableDomain const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,0ul,1ul,2ul,3ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::NetworkProcessProxy::openWindowFromServiceWorker(WebKit *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v15 = (void *)a2;
  pid_t v8 = WebKit::allDataStores(a1);
  uint64_t v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v8, &v15);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v11 = &unk_1EE9E50E0;
    uint64_t v12 = *a5;
    *a5 = 0;
    v11[1] = v12;
    uint64_t v15 = v11;
    WebKit::WebsiteDataStore::openWindowFromServiceWorker(v10, a3, a4, (uint64_t *)&v15);
    uint64_t result = (uint64_t)v15;
    if (v15) {
      return (*(uint64_t (**)(void *))(*v15 + 8))(v15);
    }
  }
  else
  {
    LOBYTE(v15) = 0;
    char v16 = 0;
    uint64_t v14 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v14 + 16))(v14, &v15);
    return (*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::reportConsoleMessage(WebKit *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = WebKit::allDataStores(a1);
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v2, &v5);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(result + 384) + 40);
    return v4();
  }
  return result;
}

unsigned int *WebKit::NetworkProcessProxy::navigateServiceWorkerClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  v18[0] = *(void *)(a4 + 16);
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  uint64_t v11 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, v18);
  if (v11)
  {
    uint64_t v12 = (unsigned int *)(v11 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v11 + 16), 1u);
    uint64_t v13 = WebKit::WebFrameProxy::webFrame(a2, a3);
    if (v13)
    {
      long long v14 = *(_OWORD *)(a4 + 16);
      v20[0] = *(_OWORD *)a4;
      v20[1] = v14;
      WebKit::WebFrameProxy::navigateServiceWorkerClient(v13, (uint64_t)v20, a5, a6);
    }
    else
    {
      uint64_t v15 = *a6;
      *a6 = 0;
      LOBYTE(v18[0]) = 0;
      char v19 = 0;
      (*(void (**)(uint64_t, void, void, void *))(*(void *)v15 + 16))(v15, 0, 0, v18);
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v12);
  }
  else
  {
    uint64_t v17 = *a6;
    *a6 = 0;
    LOBYTE(v18[0]) = 0;
    char v19 = 0;
    (*(void (**)(uint64_t, void, void, void *))(*(void *)v17 + 16))(v17, 0, 0, v18);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ApplicationDidEnterBackground>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 370;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ApplicationWillEnterForeground>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 371;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

WebKit::WebsiteDataStore *WebKit::NetworkProcessProxy::cookiesDidChange(WebKit *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = WebKit::allDataStores(a1);
  uint64_t result = (WebKit::WebsiteDataStore *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v2, &v5);
  if (result)
  {
    uint64_t v4 = WebKit::WebsiteDataStore::cookieStore(result);
    return (WebKit::WebsiteDataStore *)API::HTTPCookieStore::cookiesDidChange(v4);
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::notifyMediaStreamingActivity(uint64_t this, char a2)
{
  uint64_t v2 = *(void *)(this + 136);
  if (v2 && *(unsigned char *)(v2 + 104) || *(void *)(this + 144))
  {
    char v3 = a2;
    return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::NotifyMediaStreamingActivity>(this, &v3, 0, 0);
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::NotifyMediaStreamingActivity>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  pid_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)pid_t v8 = 430;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unsigned int *WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin(uint64_t a1, int a2, const WebCore::SecurityOriginData *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  int v38 = a2;
  uint64_t v11 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = a5;
    _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin - webPageProxyID=%llu - BEGIN", buf, 0x16u);
  }
  atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 1u);
  uint64_t v12 = *a6;
  *a6 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v13 = &unk_1EE9E5108;
  v13[1] = a1;
  unsigned __int8 v13[2] = a5;
  v13[3] = v12;
  long long v14 = (WebKit *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)long long v14 = 1;
  *((void *)v14 + 1) = v13;
  *(void *)long long buf = a4;
  uint64_t v15 = WebKit::allDataStores(v14);
  uint64_t v16 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v15, buf);
  if (v16)
  {
    uint64_t v17 = v16;
    CFRetain(*(CFTypeRef *)(v16 + 8));
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v17 + 304), buf);
    uint64_t v18 = *(void *)(v17 + 304);
    if (v18)
    {
      uint64_t v19 = *(unsigned int *)(v18 - 4);
      uint64_t v20 = v18 + 8 * v19;
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v19 = 0;
    }
    uint64_t v42 = v17 + 304;
    uint64_t v43 = v20;
    uint64_t v44 = v20;
    uint64_t v45 = v20;
    uint64_t v46 = v18 + 8 * v19;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v42);
    for (uint64_t i = *(void *)&buf[8]; *(void *)&buf[8] != v43; uint64_t i = *(void *)&buf[8])
    {
      uint64_t v22 = *(void *)(*(void *)i + 8);
      atomic_fetch_add((atomic_uint *volatile)(v22 + 16), 1u);
      uint64_t v23 = *(void *)(v22 + 136);
      if ((v23 && *(unsigned char *)(v23 + 104) || *(void *)(v22 + 144))
        && !WebKit::WebProcessProxy::isDummyProcessProxy((WebKit::WebProcessProxy *)v22))
      {
        atomic_fetch_add((atomic_uint *volatile)v14, 1u);
        char v24 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)char v24 = 2625;
        *((void *)v24 + 1) = 0;
        *((void *)v24 + 66) = (char *)v24 + 16;
        *((void *)v24 + 67) = 512;
        *((void *)v24 + 68) = 0;
        *((void *)v24 + 70) = 0;
        *((void *)v24 + 69) = 0;
        IPC::Encoder::encodeHeader(v24);
        uint64_t v41 = v24;
        IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(v24, &v38);
        IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v24, (uint64_t)a3);
        uint64_t v25 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v25 = &unk_1EE9E5130;
        v25[1] = v14;
        uint64_t v26 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        v39[0] = (uint64_t)v25;
        v39[1] = v26;
        char v40 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v22, &v41, 0, (uint64_t)v39, 1);
        if (v40)
        {
          uint64_t v28 = v39[0];
          v39[0] = 0;
          if (v28) {
            (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
          }
        }
        uint64_t v29 = v41;
        uint64_t v41 = 0;
        if (v29)
        {
          IPC::Encoder::~Encoder(v29, v27);
          WTF::fastFree(v30, v31);
        }
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v22 + 16));
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
    }
    if ((v38 & 4) == 0 || !WebCore::operator==()) {
      goto LABEL_31;
    }
    {
      byte_1EB35A7F0 = 0;
      WebKit::ViewSnapshotStore::singleton(void)::store = 0u;
      *(_OWORD *)&qword_1EB35A7E0 = 0u;
    }
    WebKit::ViewSnapshotStore::discardSnapshotImagesForOrigin((uint64_t)&WebKit::ViewSnapshotStore::singleton(void)::store, a3);
    WebKit::WebProcessProxy::webPage(a5, v39);
    uint64_t v32 = v39[0];
    if (!v39[0]) {
      goto LABEL_31;
    }
    WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(*(void *)(v39[0] + 32) + 1032));
    WebCore::SecurityOriginData::fromURL(&v42, (WebCore::SecurityOriginData *)buf, v33);
    int v35 = WebCore::operator==();
    if (v45 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))off_1EE9E3EF0[v45])(&v41, &v42);
    }
    LODWORD(v45) = -1;
    uint64_t v36 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::destroy(v36, v34);
        if (!v35) {
          goto LABEL_30;
        }
        goto LABEL_29;
      }
      *(_DWORD *)v36 -= 2;
    }
    if (!v35)
    {
LABEL_30:
      CFRelease(*(CFTypeRef *)(v32 + 8));
LABEL_31:
      CFRelease(*(CFTypeRef *)(v17 + 8));
      return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v14);
    }
LABEL_29:
    *(unsigned char *)(v32 + 965) = 1;
    goto LABEL_30;
  }
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v14);
}

unsigned int *WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 134217984;
    *(void *)((char *)buf + 4) = a1;
    _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::reloadExecutionContextsForOrigin BEGIN", (uint8_t *)buf, 0xCu);
  }
  atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 1u);
  uint64_t v11 = *a5;
  *a5 = 0;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v12 = &unk_1EE9E5158;
  v12[1] = a1;
  void v12[2] = v11;
  uint64_t v13 = (WebKit *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v13 = 1;
  *((void *)v13 + 1) = v12;
  *(void *)&buf[0] = a3;
  long long v14 = WebKit::allDataStores(v13);
  uint64_t v15 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v14, buf);
  if (v15)
  {
    uint64_t v16 = v15;
    CFRetain(*(CFTypeRef *)(v15 + 8));
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v16 + 304), buf);
    uint64_t v17 = *(void *)(v16 + 304);
    if (v17)
    {
      uint64_t v18 = *(unsigned int *)(v17 - 4);
      uint64_t v19 = v17 + 8 * v18;
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v18 = 0;
    }
    uint64_t v32 = v16 + 304;
    uint64_t v33 = v19;
    uint64_t v34 = v19;
    uint64_t v35 = v19;
    uint64_t v36 = v17 + 8 * v18;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v32);
    for (uint64_t i = *((void *)&buf[0] + 1); *((void *)&buf[0] + 1) != v33; uint64_t i = *((void *)&buf[0] + 1))
    {
      uint64_t v21 = *(void *)(*(void *)i + 8);
      atomic_fetch_add((atomic_uint *volatile)(v21 + 16), 1u);
      uint64_t v22 = *(void *)(v21 + 136);
      if ((v22 && *(unsigned char *)(v22 + 104) || *(void *)(v21 + 144))
        && !WebKit::WebProcessProxy::isDummyProcessProxy((WebKit::WebProcessProxy *)v21))
      {
        atomic_fetch_add((atomic_uint *volatile)v13, 1u);
        uint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v23 = 2662;
        *((void *)v23 + 1) = 0;
        *((void *)v23 + 66) = (char *)v23 + 16;
        *((void *)v23 + 67) = 512;
        *((void *)v23 + 68) = 0;
        *((void *)v23 + 70) = 0;
        *((void *)v23 + 69) = 0;
        IPC::Encoder::encodeHeader(v23);
        int v39 = v23;
        IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v23, a2);
        IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v23, a4);
        char v24 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v24 = &unk_1EE9E5180;
        v24[1] = v13;
        uint64_t v25 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        v37[0] = v24;
        v37[1] = v25;
        char v38 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v21, &v39, 0, (uint64_t)v37, 1);
        if (v38)
        {
          uint64_t v27 = v37[0];
          v37[0] = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
        }
        uint64_t v28 = v39;
        int v39 = 0;
        if (v28)
        {
          IPC::Encoder::~Encoder(v28, v26);
          WTF::fastFree(v29, v30);
        }
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v21 + 16));
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
    }
    CFRelease(*(CFTypeRef *)(v16 + 8));
  }
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v13);
}

uint64_t WebKit::NetworkProcessProxy::addAllowedFirstPartyForCookies(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, int a4, uint64_t *a5)
{
  uint64_t v10 = (uint64_t *)(a1 + 552);
  unsigned int v11 = *(_DWORD *)(a1 + 560);
  *(_DWORD *)(a1 + 560) = v11 + 1;
  if (v11 > *(_DWORD *)(a1 + 564)) {
    WTF::WeakHashMap<WebKit::WebProcessProxy,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultWeakPtrImpl>::removeNullReferences((unsigned int **)(a1 + 552), (void *)a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  uint64_t v13 = *(atomic_uint **)(a2 + 8);
  atomic_fetch_add(v13, 1u);
  atomic_fetch_add(v13, 1u);
  v51[0] = (WTF *)v13;
  if (v13 && atomic_fetch_add(v13, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v13);
    WTF::fastFree((WTF *)v13, v12);
  }
  uint64_t v14 = *v10;
  if (*v10
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v10, 0), (uint64_t v14 = *v10) != 0))
  {
    int v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    int v15 = 0;
  }
  unsigned int v17 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash(v51);
  uint64_t v18 = 0;
  int v19 = 1;
  uint64_t v20 = (unsigned int *)v51[0];
  while (1)
  {
    unsigned int v21 = v17 & v15;
    uint64_t v22 = v14 + 24 * v21;
    uint64_t v23 = *(unsigned int **)v22;
    if (*(void *)v22 != -1) {
      break;
    }
    uint64_t v18 = v14 + 24 * v21;
LABEL_15:
    unsigned int v17 = v19 + v21;
    ++v19;
  }
  if (!v23)
  {
    if (v18)
    {
      *(void *)uint64_t v18 = 0;
      *(unsigned char *)(v18 + 8) = 0;
      *(void *)(v18 + ++*(_DWORD *)(this + 16) = 0;
      --*(_DWORD *)(*v10 - 16);
      uint64_t v20 = (unsigned int *)v51[0];
      uint64_t v22 = v18;
    }
    v51[0] = 0;
    char v24 = *(unsigned int **)v22;
    *(void *)uint64_t v22 = v20;
    if (v24 && atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, v16);
    }
    *(unsigned char *)(v22 + 8) = 0;
    uint64_t v25 = *(WTF::StringImpl ***)(v22 + 16);
    *(void *)(v22 + ++*(_DWORD *)(this + 16) = 0;
    if (v25) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v25, (WTF::StringImpl *)v16);
    }
    uint64_t v26 = *v10;
    if (*v10) {
      int v27 = *(_DWORD *)(v26 - 12) + 1;
    }
    else {
      int v27 = 1;
    }
    *(_DWORD *)(v26 - 12) = v27;
    uint64_t v30 = *v10;
    if (*v10) {
      int v31 = *(_DWORD *)(v30 - 12);
    }
    else {
      int v31 = 0;
    }
    uint64_t v32 = (*(_DWORD *)(v30 - 16) + v31);
    unint64_t v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 <= 2 * v32)
      {
LABEL_31:
        uint64_t v22 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v10, (unsigned int **)v22);
        uint64_t v30 = *v10;
        if (*v10) {
          LODWORD(v33) = *(_DWORD *)(v30 - 4);
        }
        else {
          LODWORD(v33) = 0;
        }
      }
    }
    else if (3 * v33 <= 4 * v32)
    {
      goto LABEL_31;
    }
    uint64_t v34 = v30 + 24 * v33;
    uint64_t v20 = (unsigned int *)v51[0];
    goto LABEL_38;
  }
  if (v23 != (unsigned int *)v51[0]) {
    goto LABEL_15;
  }
  uint64_t v28 = *v10;
  if (*v10) {
    unsigned int v29 = *(_DWORD *)(v28 - 4);
  }
  else {
    unsigned int v29 = 0;
  }
  uint64_t v34 = v28 + 24 * v29;
LABEL_38:
  v51[0] = 0;
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v20);
    uint64_t v47 = v34;
    WTF::fastFree((WTF *)v20, v16);
    uint64_t v34 = v47;
  }
  uint64_t v35 = *v10;
  if (*v10) {
    v35 += 24 * *(unsigned int *)(v35 - 4);
  }
  if (v22 != v35)
  {
    while (!*(void *)(*(void *)v22 + 8))
    {
      uint64_t v36 = v22 + 24;
      uint64_t v22 = v34;
      if (v36 != v34)
      {
        uint64_t v22 = v36;
        while ((unint64_t)(*(void *)v22 + 1) <= 1)
        {
          v22 += 24;
          if (v22 == v34)
          {
            uint64_t v22 = v34;
            break;
          }
        }
      }
      if (v22 == v35)
      {
        uint64_t v22 = v35;
        break;
      }
    }
  }
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(v22 + 16), a3, (uint64_t)v51);
  if (a4 && !*(unsigned char *)(v22 + 8))
  {
    *(unsigned char *)(v22 + 8) = 1;
  }
  else if (!v52)
  {
    uint64_t v37 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
    return (*(uint64_t (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t v50 = *(void *)(a2 + 176);
  int v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v39 = 363;
  *((void *)v39 + 1) = 0;
  *((void *)v39 + 66) = (char *)v39 + 16;
  *((void *)v39 + 67) = 512;
  *((void *)v39 + 68) = 0;
  *((void *)v39 + 70) = 0;
  *((void *)v39 + 69) = 0;
  IPC::Encoder::encodeHeader(v39);
  unint64_t v53 = v39;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v39, &v50);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v39, (uint64_t *)a3);
  char v40 = (unsigned char *)IPC::Encoder::grow(v39, 1uLL, 1);
  if (v41)
  {
    unsigned char *v40 = a4;
    uint64_t v42 = *a5;
    *a5 = 0;
    uint64_t v43 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v43 = &unk_1EE9E51A8;
    *((void *)v43 + 1) = v42;
    uint64_t v44 = (WTF *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v51[0] = v43;
    v51[1] = v44;
    char v52 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v53, 0, (uint64_t)v51, 1);
    if (v52)
    {
      uint64_t v46 = v51[0];
      v51[0] = 0;
      if (v46) {
        (*(void (**)(WTF *))(*(void *)v46 + 8))(v46);
      }
    }
    uint64_t result = (uint64_t)v53;
    unint64_t v53 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v45);
      return WTF::fastFree(v48, v49);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void WebKit::NetworkProcessProxy::wakeUpWebProcessForIPC(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *(void *)uint64_t v7 = a2;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  uint64_t v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, v7);
  uint64_t v5 = (unsigned int *)v4;
  if (v4) {
    atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  }
  uint64_t v6 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v7 = 134218496;
    *(void *)&v7[4] = a1;
    __int16 v8 = 2048;
    uint64_t v9 = a2;
    __int16 v10 = 2048;
    unsigned int v11 = v5;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::wakeUpWebProcessForIPC processIdentifier=%llu, webProcess=%p", v7, 0x20u);
  }
  if (v5)
  {
    WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC((WebKit::AuxiliaryProcessProxy *)v5);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5 + 4);
  }
}

void WebKit::NetworkProcessProxy::reportNetworkIssue(uint64_t a1, uint64_t a2, const WTF::URL *a3)
{
  WebKit::WebProcessProxy::webPage(a2, &v7);
  uint64_t v4 = v7;
  if (v7)
  {
    uint64_t v5 = *(WTF::StringImpl **)(v7 + 1400);
    if (v5) {
      WebKit::NetworkIssueReporter::report(v5, a3);
    }
    uint64_t v6 = *(const void **)(v4 + 8);
    CFRelease(v6);
  }
}

void WebKit::LegacyCustomProtocolManagerProxy::~LegacyCustomProtocolManagerProxy(WebKit::LegacyCustomProtocolManagerProxy *this)
{
  *(void *)this = &unk_1EE9E3C38;
  uint64_t v2 = *(void *)(*((void *)this + 2) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 1u);
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(v2 + 152), 0x13u);
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  uint64_t v4 = (unsigned int *)(v3 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
  (*(void (**)(void, WebKit::LegacyCustomProtocolManagerProxy *))(**(void **)(v3 + 424) + 32))(*(void *)(v3 + 424), this);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::derefAllowingPartiallyDestroyed(v4);
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::derefAllowingPartiallyDestroyed((unsigned int *)(v2 + 16));
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

{
  uint64_t vars8;

  WebKit::LegacyCustomProtocolManagerProxy::~LegacyCustomProtocolManagerProxy(this);

  JUMPOUT(0x199740C10);
}

unsigned int *WebKit::LegacyCustomProtocolManagerProxy::startLoading(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v4 = (unsigned int *)(v3 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v3 + 424) + 16))(*(void *)(v3 + 424), a1, a2, a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
}

unsigned int *WebKit::LegacyCustomProtocolManagerProxy::wasRedirectedToRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  v6[0] = &v7;
  v6[1] = a3;
  v6[2] = a4;
  uint64_t v7 = a2;
  uint64_t result = (unsigned int *)WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::WasRedirectedToRequest>(v4, (uint64_t)v6, 0, 0);
  if (v4) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::WasRedirectedToRequest>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __int16 v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v8 = 117;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&>,0ul,1ul,2ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unsigned int *WebKit::LegacyCustomProtocolManagerProxy::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  v6[0] = &v8;
  v6[1] = a3;
  char v7 = a4;
  uint64_t result = (unsigned int *)WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::DidReceiveResponse>(v4, (uint64_t)v6, 0, 0);
  if (v4) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::DidReceiveResponse>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 114;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceResponse const&,WebKit::CacheStoragePolicy>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceResponse const&,WebKit::CacheStoragePolicy>,0ul,1ul,2ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unsigned int *WebKit::LegacyCustomProtocolManagerProxy::didLoadData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2;
  v7[0] = a3;
  v7[1] = a4;
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  v6[0] = &v8;
  v6[1] = v7;
  uint64_t result = (unsigned int *)WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::DidLoadData>(v4, (uint64_t)v6, 0, 0);
  if (v4) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::DidLoadData>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 113;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v8, **(const void ***)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unsigned int *WebKit::LegacyCustomProtocolManagerProxy::didFailWithError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
  v5[0] = &v6;
  v5[1] = a3;
  uint64_t v6 = a2;
  uint64_t result = (unsigned int *)WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::DidFailWithError>(v3, (uint64_t)v5, 0, 0);
  if (v3) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::DidFailWithError>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 111;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v8, *(WebCore::ResourceError **)(a2 + 8));
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unsigned int *WebKit::LegacyCustomProtocolManagerProxy::didFinishLoading(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 1u);
  uint64_t v4 = &v5;
  uint64_t v5 = a2;
  uint64_t result = (unsigned int *)WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::DidFinishLoading>(v2, &v4, 0, 0);
  if (v2) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::DidFinishLoading>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 112;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, *a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::ServiceWorkerNotificationHandler::singleton(WebKit::ServiceWorkerNotificationHandler *this)
{
  return WebKit::ServiceWorkerNotificationHandler::singleton(void)::handler;
}

uint64_t WebKit::ServiceWorkerNotificationHandler::dataStoreForNotificationID(WebKit::ServiceWorkerNotificationHandler *this, const WTF::UUID *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  LODWORD(v21) = -1640531527;
  WORD2(v21) = 0;
  BYTE6(v21) = 0;
  WTF::addArgs<WTF::UUID>(&v21, a2);
  uint64_t v6 = (WebKit *)WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v21);
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *((void *)a2 + 1);
  uint64_t v9 = v6 & v5;
  uint64_t v10 = (uint64_t *)(v2 + 32 * v9);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v12 != v8 || v11 != v7)
  {
    int v14 = 1;
    while (v11 | v12)
    {
      uint64_t v9 = (v9 + v14) & v5;
      int v15 = (uint64_t *)(v2 + 32 * v9);
      uint64_t v11 = *v15;
      uint64_t v12 = v15[1];
      BOOL v16 = v12 == v8 && v11 == v7;
      ++v14;
      if (v16) {
        goto LABEL_13;
      }
    }
    uint64_t v18 = *((void *)this + 2);
    if (!v18) {
      return 0;
    }
    uint64_t v17 = v18 + 32 * *(unsigned int *)(v18 - 4);
    goto LABEL_17;
  }
LABEL_13:
  uint64_t v17 = v2 + 32 * v9;
  uint64_t v18 = *((void *)this + 2);
  if (v18) {
LABEL_17:
  }
    v18 += 32 * *(unsigned int *)(v18 - 4);
  if (v18 != v17)
  {
    uint64_t v21 = *(void *)(v17 + 16);
    int v19 = WebKit::allDataStores(v6);
    return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v19, &v21);
  }
  return 0;
}

uint64_t WebKit::ServiceWorkerNotificationHandler::showNotification(uint64_t a1, atomic_uchar **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = qword_1EB3583C0;
  BOOL v10 = os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    LOWORD(v34[0]) = 0;
    _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "ServiceWorkerNotificationHandler showNotification called", (uint8_t *)v34, 2u);
  }
  v34[0] = *(void *)(a3 + 208);
  uint64_t v11 = WebKit::allDataStores((WebKit *)v10);
  uint64_t v12 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v11, v34);
  if (v12)
  {
    uint64_t v13 = (WebKit::WebsiteDataStore *)v12;
    uint64_t v16 = *(void *)(a1 + 16);
    int v14 = (uint64_t *)(a1 + 16);
    uint64_t v15 = v16;
    uint64_t v17 = (void *)(a3 + 144);
    if (v16
      || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,PAL::SessionID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(v14),
          (uint64_t v15 = *v14) != 0))
    {
      unsigned int v18 = *(_DWORD *)(v15 - 8);
    }
    else
    {
      unsigned int v18 = 0;
    }
    LODWORD(v34[0]) = -1640531527;
    WORD2(v34[0]) = 0;
    BYTE6(v34[0]) = 0;
    WTF::addArgs<WTF::UUID>(v34, (void *)(a3 + 144));
    uint64_t v19 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v34) & v18;
    uint64_t v20 = (void *)(v15 + 32 * v19);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    if (*(_OWORD *)v20 != 0)
    {
      uint64_t v23 = 0;
      int v24 = 1;
      while (v21 != *(void *)(a3 + 152) || v22 != *v17)
      {
        if (!(v22 ^ 1 | v21)) {
          uint64_t v23 = v20;
        }
        uint64_t v19 = (v19 + v24) & v18;
        uint64_t v20 = (void *)(v15 + 32 * v19);
        uint64_t v22 = *v20;
        uint64_t v21 = v20[1];
        ++v24;
        if (*(_OWORD *)v20 == 0)
        {
          if (v23)
          {
            void *v23 = 0;
            v23[1] = 0;
            void v23[2] = 0;
            --*(_DWORD *)(*v14 - 16);
            uint64_t v20 = v23;
          }
          goto LABEL_18;
        }
      }
      goto LABEL_27;
    }
LABEL_18:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v17;
    _OWORD v20[2] = *(void *)(a3 + 208);
    uint64_t v26 = *v14;
    if (*v14) {
      int v27 = *(_DWORD *)(v26 - 12) + 1;
    }
    else {
      int v27 = 1;
    }
    *(_DWORD *)(v26 - 12) = v27;
    uint64_t v28 = *v14;
    if (*v14) {
      int v29 = *(_DWORD *)(v28 - 12);
    }
    else {
      int v29 = 0;
    }
    uint64_t v30 = (*(_DWORD *)(v28 - 16) + v29);
    unint64_t v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 > 2 * v30) {
        goto LABEL_27;
      }
    }
    else if (3 * v31 > 4 * v30)
    {
LABEL_27:
      WebKit::WebsiteDataStore::showPersistentNotification(v13, a2, (WTF::StringImpl **)a3);
      goto LABEL_28;
    }
    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,PAL::SessionID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(v14);
    goto LABEL_27;
  }
LABEL_28:
  uint64_t v32 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
  return (*(uint64_t (**)(uint64_t))(*(void *)v32 + 8))(v32);
}

void WebKit::ServiceWorkerNotificationHandler::cancelNotification(WebKit::ServiceWorkerNotificationHandler *a1, int a2, WTF::UUID *a3)
{
  uint64_t v4 = (WebKit::WebNotificationManagerProxy *)WebKit::ServiceWorkerNotificationHandler::dataStoreForNotificationID(a1, a3);
  if (v4)
  {
    unsigned int v5 = WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(v4);
    WebKit::WebNotificationManagerProxy::cancel(v5, v6, a3);
  }
}

WTF *WebKit::ServiceWorkerNotificationHandler::clearNotifications(WTF *this, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    uint64_t v3 = this;
    uint64_t v4 = *(const WTF::UUID **)a2;
    uint64_t v5 = 16 * v2;
    do
    {
      this = (WTF *)WebKit::ServiceWorkerNotificationHandler::dataStoreForNotificationID(v3, v4);
      if (this) {
        this = WebKit::WebsiteDataStore::clearServiceWorkerNotification(this, v4);
      }
      uint64_t v4 = (const WTF::UUID *)((char *)v4 + 16);
      v5 -= 16;
    }
    while (v5);
  }
  return this;
}

void WebKit::ServiceWorkerNotificationHandler::didDestroyNotification(WebKit::ServiceWorkerNotificationHandler *this, const WTF::UUID *a2)
{
  uint64_t v3 = (WebKit::WebNotificationManagerProxy *)WebKit::ServiceWorkerNotificationHandler::dataStoreForNotificationID(this, a2);
  if (v3)
  {
    uint64_t v4 = WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(v3);
    WebKit::WebNotificationManagerProxy::didDestroyNotification(v4, v5, a2);
  }
}

void WebKit::ServiceWorkerNotificationHandler::requestPermission()
{
}

void WebKit::ServiceWorkerNotificationHandler::getPermissionState()
{
}

void WebKit::ServiceWorkerNotificationHandler::getPermissionStateSync()
{
}

uint64_t WebKit::WebNotification::WebNotification(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, _OWORD *a4, atomic_uchar **a5)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9E3F70;
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)a1 = &unk_1EE9E3C70;
  WebCore::NotificationData::NotificationData((WebCore::NotificationData *)(a1 + 32), (const WebCore::NotificationData *)a2);
  API::SecurityOrigin::createFromString(a2 + 11, &v13);
  *(void *)(a1 + 288) = v13;
  *(void *)(a1 + 296) = a3;
  long long v10 = a4[1];
  *(_OWORD *)(a1 + 304) = *a4;
  *(_OWORD *)(a1 + 320) = v10;
  if (a5)
  {
    uint64_t v11 = *a5;
    if (*a5) {
      uint64_t v11 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v11);
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  *(void *)(a1 + 336) = v11;
  *(void *)(a1 + 344) = a5;
  return a1;
}

uint64_t WebKit::WebNotificationManagerMessageHandler::showNotification(uint64_t a1, atomic_uchar **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  long long v10 = qword_1EB3583C0;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "WebNotificationManagerMessageHandler showNotification called", v19, 2u);
  }
  uint64_t v12 = *(void *)(a3 + 96);
  if (v12 && *(_DWORD *)(v12 + 4))
  {
    uint64_t v13 = WebKit::ServiceWorkerNotificationHandler::singleton((WebKit::ServiceWorkerNotificationHandler *)v11);
    return WebKit::ServiceWorkerNotificationHandler::showNotification(v13, a2, a3, v14, a5);
  }
  else
  {
    uint64_t v16 = *(void *)(*(void *)(a1 + 16) + 8);
    if (v16) {
      uint64_t v17 = v16 - 16;
    }
    else {
      uint64_t v17 = 0;
    }
    CFRetain(*(CFTypeRef *)(v17 + 8));
    WebKit::WebPageProxy::showNotification(v17, a2, (WTF::StringImpl **)a3, a4);
    if (v16) {
      CFRelease(*(CFTypeRef *)(v16 - 8));
    }
    uint64_t v18 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
    return (*(uint64_t (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
}

void WebKit::WebNotificationManagerMessageHandler::cancelNotification(WebKit::ServiceWorkerNotificationHandler *a1, uint64_t a2, const WTF::UUID *a3)
{
  uint64_t v5 = (uint64_t *)WebKit::ServiceWorkerNotificationHandler::singleton(a1);
  uint64_t v6 = *((void *)a3 + 1);
  v12[0] = *(void *)a3;
  v12[1] = v6;
  if (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,PAL::SessionID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v5[2], v12))
  {
    uint64_t v7 = (WebKit::WebNotificationManagerProxy *)WebKit::ServiceWorkerNotificationHandler::dataStoreForNotificationID((WebKit::ServiceWorkerNotificationHandler *)v5, a3);
    if (v7)
    {
      uint64_t v8 = WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(v7);
      WebKit::WebNotificationManagerProxy::cancel(v8, v9, a3);
    }
  }
  else
  {
    uint64_t v10 = *(void *)(*((void *)a1 + 2) + 8);
    if (v10) {
      BOOL v11 = (CFTypeRef *)(v10 - 16);
    }
    else {
      BOOL v11 = 0;
    }
    CFRetain(v11[1]);
    WebKit::WebPageProxy::cancelNotification((WebKit::WebPageProxy *)v11, a3);
    if (v10) {
      CFRelease(*(CFTypeRef *)(v10 - 8));
    }
  }
}

WTF *WebKit::WebNotificationManagerMessageHandler::clearNotifications(WebKit::ServiceWorkerNotificationHandler *a1, uint64_t a2)
{
  uint64_t v4 = WebKit::ServiceWorkerNotificationHandler::singleton(a1);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if (!v6) {
    goto LABEL_19;
  }
  if (v6 >> 28) {
    goto LABEL_30;
  }
  uint64_t v7 = (uint64_t *)v4;
  LODWORD(v29) = *(_DWORD *)(a2 + 12);
  uint64_t v28 = (WTF *)WTF::fastMalloc((WTF *)(16 * v6));
  uint64_t v8 = *(unsigned int *)(a2 + 12);
  if (!v8) {
    goto LABEL_19;
  }
  if (v8 >> 28)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x198FBE200);
  }
  LODWORD(v27) = *(_DWORD *)(a2 + 12);
  uint64_t v26 = (WTF *)WTF::fastMalloc((WTF *)(16 * v8));
  uint64_t v9 = *(unsigned int *)(a2 + 12);
  if (v9)
  {
    uint64_t v10 = *(uint64_t **)a2;
    uint64_t v11 = 16 * v9;
    do
    {
      uint64_t v12 = v10[1];
      v30[0] = *v10;
      v30[1] = v12;
      if (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,PAL::SessionID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v7[2], v30))
      {
        uint64_t v13 = HIDWORD(v29);
        if (HIDWORD(v29) == v29)
        {
          uint64_t v14 = (long long *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v28, HIDWORD(v29) + 1, (unint64_t)v10);
          uint64_t v13 = HIDWORD(v29);
          uint64_t v15 = v28;
          long long v16 = *v14;
        }
        else
        {
          uint64_t v15 = v28;
          long long v16 = *(_OWORD *)v10;
        }
        *((_OWORD *)v15 + v13) = v16;
        uint64_t v21 = (char *)&v29 + 4;
      }
      else
      {
        uint64_t v17 = HIDWORD(v27);
        if (HIDWORD(v27) == v27)
        {
          uint64_t v18 = (long long *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v26, HIDWORD(v27) + 1, (unint64_t)v10);
          uint64_t v17 = HIDWORD(v27);
          uint64_t v19 = v26;
          long long v20 = *v18;
        }
        else
        {
          uint64_t v19 = v26;
          long long v20 = *(_OWORD *)v10;
        }
        *((_OWORD *)v19 + v17) = v20;
        uint64_t v21 = (char *)&v27 + 4;
      }
      ++*(_DWORD *)v21;
      v10 += 2;
      v11 -= 16;
    }
    while (v11);
    if (HIDWORD(v29)) {
      WebKit::ServiceWorkerNotificationHandler::clearNotifications((WTF *)v7, (uint64_t)&v28);
    }
  }
LABEL_19:
  if (HIDWORD(v27))
  {
    uint64_t v22 = *(void *)(*((void *)a1 + 2) + 8);
    uint64_t v23 = v22 ? v22 - 16 : 0;
    CFRetain(*(CFTypeRef *)(v23 + 8));
    WebKit::WebPageProxy::clearNotifications(v23, (uint64_t)&v26);
    if (v22) {
      CFRelease(*(CFTypeRef *)(v22 - 8));
    }
  }
  int v24 = v26;
  if (v26)
  {
    uint64_t v26 = 0;
    LODWORD(v27) = 0;
    WTF::fastFree(v24, v5);
  }
  uint64_t result = v28;
  if (v28)
  {
    uint64_t v28 = 0;
    LODWORD(v29) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

void WebKit::WebNotificationManagerMessageHandler::didDestroyNotification(WebKit::WebNotificationManagerMessageHandler *this, const WTF::UUID *a2)
{
  uint64_t v4 = (uint64_t *)WebKit::ServiceWorkerNotificationHandler::singleton(this);
  uint64_t v5 = *((void *)a2 + 1);
  v8[0] = *(void *)a2;
  v8[1] = v5;
  if (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,PAL::SessionID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v4[2], v8))
  {
    WebKit::ServiceWorkerNotificationHandler::didDestroyNotification((WebKit::ServiceWorkerNotificationHandler *)v4, a2);
  }
  else
  {
    uint64_t v6 = *(void *)(*((void *)this + 2) + 8);
    if (v6) {
      uint64_t v7 = (CFTypeRef *)(v6 - 16);
    }
    else {
      uint64_t v7 = 0;
    }
    CFRetain(v7[1]);
    WebKit::WebPageProxy::didDestroyNotification((WebKit::WebPageProxy *)v7, a2);
    if (v6) {
      CFRelease(*(CFTypeRef *)(v6 - 8));
    }
  }
}

void WebKit::WebNotificationManagerMessageHandler::pageWasNotifiedOfNotificationPermission(WebKit::WebNotificationManagerMessageHandler *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = (CFTypeRef *)(v1 - 16);
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(v2[1]);
  WebKit::WebPageProxy::pageWillLikelyUseNotifications((WebKit::WebPageProxy *)v2);
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

void WebKit::WebNotificationManagerMessageHandler::requestPermission()
{
}

void WebKit::WebNotificationManagerMessageHandler::getPermissionState()
{
}

void WebKit::WebNotificationManagerMessageHandler::getPermissionStateSync()
{
}

void WebKit::WebNotificationManagerProxy::~WebNotificationManagerProxy(WebKit::WebNotificationManagerProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9E3C98;
  uint64_t v3 = (WebKit::WebNotificationManagerProxy *)((char *)this + 16);
  *((void *)this + 2) = &unk_1EE9E3CD8;
  uint64_t v4 = *((void *)this + 6);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      uint64_t v6 = (uint64_t *)(v4 + 16);
      do
      {
        if (*(v6 - 2) ^ 1 | *(v6 - 1))
        {
          uint64_t v7 = *v6;
          uint64_t *v6 = 0;
          if (v7) {
            CFRelease(*(CFTypeRef *)(v7 + 8));
          }
        }
        v6 += 4;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v8 = *((void *)this + 5);
  if (v8) {
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebKit::WebContextSupplement::~WebContextSupplement(v3, a2);
}

{
  uint64_t vars8;

  WebKit::WebNotificationManagerProxy::~WebNotificationManagerProxy(this, a2);

  JUMPOUT(0x199740C10);
}

void non-virtual thunk to'WebKit::WebNotificationManagerProxy::~WebNotificationManagerProxy(WebKit::WebNotificationManagerProxy *this, void *a2)
{
}

{
  uint64_t vars8;

  WebKit::WebNotificationManagerProxy::~WebNotificationManagerProxy((WebKit::WebNotificationManagerProxy *)((char *)this - 16), a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::WebNotificationManagerProxy::setProvider(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      uint64_t v3 = *(void *)(a1 + 32);
    }
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)v3 + 48);
    return v5();
  }
  else
  {
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)8);
    void *v7 = &unk_1EE9E4088;
    uint64_t result = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v7;
    if (result)
    {
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return v8();
    }
  }
  return result;
}

uint64_t WebKit::WebNotificationManagerProxy::processPoolDestroyed(WebKit::WebNotificationManagerProxy *this)
{
  return (*(uint64_t (**)(void, WebKit::WebNotificationManagerProxy *))(**((void **)this + 4) + 56))(*((void *)this + 4), this);
}

uint64_t non-virtual thunk to'WebKit::WebNotificationManagerProxy::processPoolDestroyed(WebKit::WebNotificationManagerProxy *this)
{
  return (*(uint64_t (**)(void, char *))(**((void **)this + 2) + 56))(*((void *)this + 2), (char *)this - 16);
}

CFTypeRef WebKit::WebNotificationManagerProxy::refWebContextSupplement(CFTypeRef *this)
{
  return CFRetain(this[1]);
}

CFTypeRef non-virtual thunk to'WebKit::WebNotificationManagerProxy::refWebContextSupplement(CFTypeRef *this)
{
  return CFRetain(*(this - 1));
}

void WebKit::WebNotificationManagerProxy::derefWebContextSupplement(CFTypeRef *this)
{
}

void non-virtual thunk to'WebKit::WebNotificationManagerProxy::derefWebContextSupplement(CFTypeRef *this)
{
}

void WebKit::WebNotificationManagerProxy::show(uint64_t a1, uint64_t a2, atomic_uchar **a3, WTF::StringImpl **a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2) {
    uint64_t v10 = *(void *)(*(void *)(a2 + 32) + 760);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = API::Object::newObject(0x160uLL, 80);
  LOBYTE(v14) = 0;
  char v15 = 0;
  uint64_t v13 = WebKit::WebNotification::WebNotification(v11, a4, v10, &v14, a3);
  WebKit::WebNotificationManagerProxy::showImpl(a1, a2, &v13, a5);
  uint64_t v12 = v13;
  uint64_t v13 = 0;
  if (v12) {
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
}

uint64_t WebKit::WebNotificationManagerProxy::showImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *a3;
  uint64_t v11 = *(void *)(*a3 + 16);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID const&>((uint64_t *)(a1 + 40), &v11, v8 + 176, (uint64_t)v10);
  WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::inlineSet<WTF::UUID const&,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>&>((uint64_t *)(a1 + 48), (void *)(*a3 + 176), a3, (uint64_t)v10);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, *a3, a4);
}

uint64_t WebKit::WebNotificationManagerProxy::showPersistent(uint64_t a1, uint64_t a2, atomic_uchar **a3, WTF::StringImpl **a4, uint64_t a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a2 + 208);
  uint64_t v11 = *(void *)(v9 + 32);
  uint64_t v12 = *(void *)(v9 + 40);
  uint64_t v10 = (long long *)(v9 + 32);
  if (v11 | v12)
  {
    long long v19 = *v10;
    char v13 = 1;
  }
  else
  {
    char v13 = 0;
    LOBYTE(v19) = 0;
  }
  char v20 = v13;
  uint64_t v14 = API::Object::newObject(0x160uLL, 80);
  uint64_t v18 = WebKit::WebNotification::WebNotification(v14, a4, 0, &v19, a3);
  uint64_t v15 = WebKit::WebNotificationManagerProxy::showImpl(a1, 0, &v18, a5);
  uint64_t v16 = v18;
  uint64_t v18 = 0;
  if (v16) {
    CFRelease(*(CFTypeRef *)(v16 + 8));
  }
  return v15;
}

void WebKit::WebNotificationManagerProxy::cancel(WebKit::WebNotificationManagerProxy *this, WebKit::WebPageProxy *a2, const WTF::UUID *a3)
{
  uint64_t v5 = WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)this + 6, (uint64_t *)a3);
  if (v5)
  {
    (*(void (**)(void, uint64_t))(**((void **)this + 4) + 24))(*((void *)this + 4), v5);
    WebKit::WebNotificationManagerProxy::didDestroyNotification(this, v6, a3);
  }
}

void WebKit::WebNotificationManagerProxy::didDestroyNotification(WebKit::WebNotificationManagerProxy *this, WebKit::WebPageProxy *a2, const WTF::UUID *a3)
{
  uint64_t v4 = (uint64_t *)((char *)this + 48);
  uint64_t v5 = (void *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)this + 6, (uint64_t *)a3);
  WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::take(v4, v5, &v11);
  if (v11)
  {
    uint64_t v10 = *(void *)(v11 + 16);
    uint64_t v6 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 5, &v10);
    uint64_t v7 = *((void *)this + 5);
    if (v7)
    {
      uint64_t v8 = (void *)(v7 + 32 * *(unsigned int *)(v7 - 4));
      if (v8 == v6)
      {
LABEL_9:
        (*(void (**)(void, uint64_t))(**((void **)this + 4) + 32))(*((void *)this + 4), v11);
        uint64_t v9 = v11;
        uint64_t v11 = 0;
        if (v9) {
          CFRelease(*(CFTypeRef *)(v9 + 8));
        }
        return;
      }
    }
    else
    {
      if (!v6) {
        goto LABEL_9;
      }
      uint64_t v8 = 0;
    }
    if (v8 != v6) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove((uint64_t *)this + 5, v6);
    }
    goto LABEL_9;
  }
}

WTF *WebKit::WebNotificationManagerProxy::clearNotifications(WTF *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v6 = (uint64_t *)((char *)result + 40);
  uint64_t v5 = *((void *)result + 5);
  if (v5 && (uint64_t v7 = *(unsigned int *)(v5 - 12), v7))
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
    LODWORD(v38) = v7;
    uint64_t v37 = v8;
    if (!a2) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v8 = 0;
    if (!a2)
    {
LABEL_5:
      uint64_t v34 = 0;
      goto LABEL_8;
    }
  }
  uint64_t v34 = *(void *)(*(void *)(a2 + 32) + 760);
LABEL_8:
  uint64_t v10 = (uint64_t *)((char *)v4 + 48);
  uint64_t v9 = *((void *)v4 + 6);
  if (v9)
  {
    uint64_t v11 = *(unsigned int *)(v9 - 4);
    uint64_t v12 = (void *)(v9 + 32 * v11);
    if (*(_DWORD *)(v9 - 12))
    {
      char v13 = (void *)*((void *)v4 + 6);
      if (v11)
      {
        uint64_t v14 = 32 * v11;
        char v13 = (void *)*((void *)v4 + 6);
        while (*v13 <= 1uLL)
        {
          v13 += 4;
          v14 -= 32;
          if (!v14)
          {
            char v13 = v12;
            goto LABEL_15;
          }
        }
      }
      goto LABEL_15;
    }
    char v13 = (void *)(v9 + 32 * v11);
  }
  else
  {
    char v13 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v12 = (void *)(v9 + 32 * v11);
  if (!v9)
  {
    uint64_t v15 = 0;
    goto LABEL_20;
  }
LABEL_15:
  uint64_t v15 = (void *)(v9 + 32 * *(unsigned int *)(v9 - 4));
LABEL_20:
  if (v15 == v13) {
    goto LABEL_59;
  }
  unint64_t v33 = v4;
  unsigned int v16 = 0;
  int v17 = *(_DWORD *)(a3 + 12);
  do
  {
    uint64_t v18 = v13[2];
    CFRetain(*(CFTypeRef *)(v18 + 8));
    if (!v17) {
      goto LABEL_32;
    }
    uint64_t v19 = *(unsigned int *)(a3 + 12);
    if (v19)
    {
      char v20 = *(void **)a3;
      while (v20[1] != *(void *)(v18 + 184) || *v20 != *(void *)(v18 + 176))
      {
        v20 += 2;
        if (!--v19)
        {
          if (v18) {
            goto LABEL_37;
          }
          goto LABEL_38;
        }
      }
LABEL_32:
      if (v34 == *(void *)(v18 + 296))
      {
        uint64_t v22 = *(void *)(v18 + 16);
        v36[0] = v22;
        if (v16 == v38)
        {
          uint64_t v23 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, v16 + 1, (unint64_t)v36);
          int v24 = HIDWORD(v38);
          uint64_t v8 = v37;
          *((void *)v37 + HIDWORD(v38)) = *v23;
        }
        else
        {
          *((void *)v8 + v++*(_DWORD *)(this + 16) = v22;
          int v24 = HIDWORD(v38);
        }
        unsigned int v16 = v24 + 1;
        HIDWORD(v38) = v24 + 1;
      }
    }
LABEL_37:
    CFRelease(*(CFTypeRef *)(v18 + 8));
LABEL_38:
    uint64_t v25 = v13 + 4;
    char v13 = v12;
    if (v25 != v12)
    {
      char v13 = v25;
      while (*v13 <= 1uLL)
      {
        v13 += 4;
        if (v13 == v12)
        {
          char v13 = v12;
          break;
        }
      }
    }
  }
  while (v13 != v15);
  uint64_t v4 = v33;
  if (v16)
  {
    for (uint64_t i = 8 * v16; i; i -= 8)
    {
      uint64_t v27 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v6, v8);
      if (*v6)
      {
        if ((void *)(*v6 + 32 * *(unsigned int *)(*v6 - 4)) != v27) {
          goto LABEL_48;
        }
      }
      else if (v27)
      {
LABEL_48:
        uint64_t v28 = v27[2];
        uint64_t v29 = v27[3];
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v6, v27);
        goto LABEL_51;
      }
      uint64_t v28 = 0;
      uint64_t v29 = 0;
LABEL_51:
      v36[0] = v28;
      v36[1] = v29;
      uint64_t v30 = (void *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v10, v36);
      if (*v10)
      {
        uint64_t v31 = *v10 + 32 * *(unsigned int *)(*v10 - 4);
        if ((void *)v31 != v30) {
          goto LABEL_56;
        }
      }
      else if (v30)
      {
        uint64_t v31 = 0;
LABEL_56:
        if ((void *)v31 != v30) {
          WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(v10, v30);
        }
      }
      uint64_t v8 = (WTF *)((char *)v8 + 8);
    }
  }
LABEL_59:
  (*(void (**)(void, WTF **))(**((void **)v4 + 4) + 40))(*((void *)v4 + 4), &v37);
  uint64_t result = v37;
  if (v37)
  {
    uint64_t v37 = 0;
    LODWORD(v38) = 0;
    return (WTF *)WTF::fastFree(result, v32);
  }
  return result;
}

uint64_t WebKit::WebNotificationManagerProxy::providerDidShowNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a2;
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 40), &v23);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    v4 += 32 * *(unsigned int *)(v4 - 4);
  }
  if (v4 != result)
  {
    uint64_t v5 = (uint64_t *)(a1 + 48);
    uint64_t v6 = (uint64_t *)(result + 16);
    uint64_t result = WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v5, (uint64_t *)(result + 16));
    if (result)
    {
      if (*(void *)(result + 336))
      {
        uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(result + 336), *(void *)(result + 344), &v22);
        uint64_t v7 = (uint64_t)v22;
        if (v22)
        {
          uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v8 = 1863;
          *((void *)v8 + 1) = 0;
          *((void *)v8 + 66) = (char *)v8 + 16;
          *((void *)v8 + 67) = 512;
          *((void *)v8 + 68) = 0;
          *((void *)v8 + 70) = 0;
          *((void *)v8 + 69) = 0;
          IPC::Encoder::encodeHeader(v8);
          int v24 = v8;
          IPC::ArgumentCoder<WTF::UUID,void>::encode(v8, v6);
          IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v24, 0, 0);
          uint64_t result = (uint64_t)v24;
          int v24 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
            uint64_t result = WTF::fastFree(v19, v20);
          }
          uint64_t v10 = v22;
          uint64_t v22 = 0;
          if (v10)
          {
            char v11 = 0;
            atomic_uchar *volatile v12 = *v10;
            atomic_compare_exchange_strong_explicit(*v10, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
            if (v11) {
              uint64_t result = MEMORY[0x19972E8D0](v12);
            }
            uint64_t v13 = *((void *)v12 + 1);
            uint64_t v14 = v13 - 1;
            *((void *)v12 + 1) = v13 - 1;
            if (v13 == 1)
            {
              uint64_t v21 = *((void *)v12 + 2);
              uint64_t v16 = *((void *)v12 + 3);
              *((void *)v12 + 3) = 0;
              BOOL v15 = v21 == 0;
            }
            else
            {
              BOOL v15 = 0;
              uint64_t v16 = 0;
            }
            int v17 = 1;
            atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
            if (v17 == 1)
            {
              if (v14) {
                return result;
              }
            }
            else
            {
              uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v12);
              if (v14) {
                return result;
              }
            }
            uint64_t v18 = WTF::fastMalloc((WTF *)0x20);
            *(void *)uint64_t v18 = &unk_1EE9B37E8;
            *(void *)(v18 + 8) = v12;
            *(void *)(v18 + ++*(_DWORD *)(this + 16) = v16;
            *(unsigned char *)(v18 + 24) = v15;
            int v24 = (IPC::Encoder *)v18;
            WTF::ensureOnMainRunLoop();
            uint64_t result = (uint64_t)v24;
            int v24 = 0;
            if (result) {
              return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
            }
          }
        }
      }
    }
  }
  return result;
}

void WebKit::WebNotificationManagerProxy::providerDidClickNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 40), &v7);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    v4 += 32 * *(unsigned int *)(v4 - 4);
  }
  if (v4 != v3)
  {
    uint64_t v5 = (WebKit *)WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)(a1 + 48), (uint64_t *)(v3 + 16));
    WebKit::dispatchDidClickNotification(v5, v6);
  }
}

void WebKit::dispatchDidClickNotification(WebKit *this, WebKit::WebNotification *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    uint64_t v3 = *((void *)this + 16);
    if (v3 && *(_DWORD *)(v3 + 4))
    {
      *(void *)long long buf = *((void *)this + 30);
      uint64_t v4 = WebKit::allDataStores(this);
      uint64_t v5 = (WebKit::WebsiteDataStore *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v4, buf);
      if (v5)
      {
        uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(v5);
        uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v7 = &unk_1EE9E3FC0;
        *(void *)long long buf = v7;
        WebKit::NetworkProcessProxy::processNotificationEvent(v6, (uint64_t)this + 32, 0, (uint64_t *)buf);
        if (*(void *)buf) {
          (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
        }
      }
      else
      {
        uint64_t v23 = qword_1EB3581E0;
        if (os_log_type_enabled((os_log_t)qword_1EB3581E0, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = *((void *)this + 30);
          *(_DWORD *)long long buf = 134217984;
          *(void *)&uint8_t buf[4] = v26;
          _os_log_error_impl(&dword_1985F2000, v23, OS_LOG_TYPE_ERROR, "WebsiteDataStore not found from sessionID %llu, dropping notification click", buf, 0xCu);
        }
      }
    }
    else
    {
      uint64_t v8 = (atomic_uchar *)*((void *)this + 42);
      if (v8)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v8, *((void *)this + 43), &v28);
        uint64_t v9 = (uint64_t)v28;
        if (v28)
        {
          uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v10 = 1860;
          *((void *)v10 + 1) = 0;
          *((void *)v10 + 66) = (char *)v10 + 16;
          *((void *)v10 + 67) = 512;
          *((void *)v10 + 68) = 0;
          *((void *)v10 + 70) = 0;
          *((void *)v10 + 69) = 0;
          IPC::Encoder::encodeHeader(v10);
          *(void *)long long buf = v10;
          IPC::ArgumentCoder<WTF::UUID,void>::encode(v10, (uint64_t *)this + 22);
          IPC::Connection::sendMessageImpl(v9, (uint64_t *)buf, 0, 0);
          atomic_uchar *volatile v12 = *(IPC::Encoder **)buf;
          *(void *)long long buf = 0;
          if (v12)
          {
            IPC::Encoder::~Encoder(v12, v11);
            WTF::fastFree(v24, v25);
          }
          uint64_t v13 = v28;
          uint64_t v28 = 0;
          if (v13)
          {
            char v14 = 0;
            atomic_uchar *volatile v15 = *v13;
            atomic_compare_exchange_strong_explicit(*v13, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
            if (v14) {
              MEMORY[0x19972E8D0](v15);
            }
            uint64_t v16 = *((void *)v15 + 1);
            uint64_t v17 = v16 - 1;
            *((void *)v15 + 1) = v16 - 1;
            if (v16 == 1)
            {
              uint64_t v27 = *((void *)v15 + 2);
              uint64_t v19 = *((void *)v15 + 3);
              *((void *)v15 + 3) = 0;
              BOOL v18 = v27 == 0;
            }
            else
            {
              BOOL v18 = 0;
              uint64_t v19 = 0;
            }
            int v20 = 1;
            atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
            if (v20 == 1)
            {
              if (v17) {
                return;
              }
            }
            else
            {
              WTF::Lock::unlockSlow((WTF::Lock *)v15);
              if (v17) {
                return;
              }
            }
            uint64_t v21 = WTF::fastMalloc((WTF *)0x20);
            *(void *)uint64_t v21 = &unk_1EE9B37E8;
            *(void *)(v21 + 8) = v15;
            *(void *)(v21 + ++*(_DWORD *)(this + 16) = v19;
            *(unsigned char *)(v21 + 24) = v18;
            *(void *)long long buf = v21;
            WTF::ensureOnMainRunLoop();
            uint64_t v22 = *(void *)buf;
            *(void *)long long buf = 0;
            if (v22) {
              (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
            }
          }
        }
      }
    }
  }
}

void WebKit::WebNotificationManagerProxy::providerDidCloseNotifications(WebKit::WebNotificationManagerProxy *this, API::Array *a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v2 = *((unsigned int *)a2 + 7);
  if (!v2) {
    return;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = (uint64_t *)((char *)this + 40);
  uint64_t v8 = (uint64_t *)((char *)this + 48);
  do
  {
    LOBYTE(v63[0]) = 0;
    char v64 = 0;
    uint64_t v9 = API::Array::at<API::UInt64>((uint64_t)a2, v6);
    uint64_t v11 = v9;
    if (!v9)
    {
      if (v6 >= *((unsigned int *)a2 + 7))
      {
        __break(0xC471u);
        JUMPOUT(0x198FBF8D0);
      }
      uint64_t v31 = *(void *)(*((void *)a2 + 2) + 8 * v6);
      if (!v31 || (*(unsigned int (**)(uint64_t))(*(void *)v31 + 16))(v31) != 8) {
        goto LABEL_38;
      }
      if (v6 >= *((unsigned int *)a2 + 7))
      {
        __break(0xC471u);
LABEL_87:
        __break(1u);
LABEL_88:
        JUMPOUT(0x198FBF8C4);
      }
      uint64_t v32 = *(void *)(*((void *)a2 + 2) + 8 * v6);
      if (!v32) {
        goto LABEL_38;
      }
      CFRetain(*(CFTypeRef *)(v32 + 8));
      if (*(void *)(v32 + 24) != 16)
      {
        CFRelease(*(CFTypeRef *)(v32 + 8));
        goto LABEL_38;
      }
      unint64_t v33 = *(WTF ***)(v32 + 16);
      uint64_t v35 = *v33;
      uint64_t v34 = v33[1];
      v63[0] = v35;
      v63[1] = v34;
      if (!v64) {
        char v64 = 1;
      }
      CFRelease(*(CFTypeRef *)(v32 + 8));
      if (!v64) {
        goto LABEL_87;
      }
LABEL_10:
      char v14 = (void *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v8, (uint64_t *)v63);
      WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::take(v8, v14, &v59);
      if (!v59)
      {
        int v22 = 4;
        goto LABEL_35;
      }
      uint64_t v16 = *((void *)v59 + 16);
      if (v16 && *(_DWORD *)(v16 + 4))
      {
        *(atomic_uchar **)long long buf = v59[30];
        uint64_t v17 = WebKit::allDataStores(v15);
        BOOL v18 = (WebKit::WebsiteDataStore *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v17, buf);
        if (v18)
        {
          uint64_t v19 = WebKit::WebsiteDataStore::networkProcess(v18);
          uint64_t v20 = (uint64_t)(v59 + 4);
          uint64_t v21 = (void *)WTF::fastMalloc((WTF *)0x10);
          *uint64_t v21 = &unk_1EE9E51F8;
          *(void *)long long buf = v21;
          WebKit::NetworkProcessProxy::processNotificationEvent(v19, v20, 1, (uint64_t *)buf);
          if (*(void *)buf) {
            (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
          }
          int v22 = 1;
        }
        else
        {
          uint64_t v28 = qword_1EB3581E0;
          if (os_log_type_enabled((os_log_t)qword_1EB3581E0, OS_LOG_TYPE_ERROR))
          {
            uint64_t v30 = *((void *)v59 + 30);
            *(_DWORD *)long long buf = 134217984;
            *(void *)&uint8_t buf[4] = v30;
            _os_log_error_impl(&dword_1985F2000, v28, OS_LOG_TYPE_ERROR, "WebsiteDataStore not found from sessionID %llu, dropping notification close", buf, 0xCu);
          }
          int v22 = 1;
        }
        goto LABEL_33;
      }
      *(atomic_uchar **)long long buf = v59[2];
      uint64_t v23 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v7, buf);
      uint64_t v10 = v23;
      if (*v7)
      {
        uint64_t v24 = *v7 + 32 * *(unsigned int *)(*v7 - 4);
        if ((void *)v24 == v23) {
          goto LABEL_26;
        }
      }
      else
      {
        if (!v23)
        {
LABEL_26:
          uint64_t v25 = v5;
          if (v5 == v61)
          {
            uint64_t v26 = (atomic_uchar *volatile **)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v60, v5 + 1, (unint64_t)&v59);
            int v22 = 0;
            uint64_t v25 = HIDWORD(v61);
            unsigned int v5 = HIDWORD(v61) + 1;
            uint64_t v4 = v60;
            uint64_t v27 = *v26;
            *uint64_t v26 = 0;
          }
          else
          {
            int v22 = 0;
            uint64_t v27 = v59;
            ++v5;
            int v59 = 0;
          }
          *((void *)v4 + v25) = v27;
          HIDWORD(v61) = v5;
LABEL_33:
          uint64_t v29 = v59;
          int v59 = 0;
          if (v29) {
            CFRelease(*((CFTypeRef *)v29 + 1));
          }
LABEL_35:
          if (!v11) {
            goto LABEL_37;
          }
          goto LABEL_36;
        }
        uint64_t v24 = 0;
      }
      if ((void *)v24 != v23) {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v7, v23);
      }
      goto LABEL_26;
    }
    CFRetain(*(CFTypeRef *)(v9 + 8));
    *(void *)long long buf = *(void *)(v11 + 16);
    if (*(void *)buf == -1)
    {
      __break(0xC471u);
      goto LABEL_88;
    }
    uint64_t v12 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v7, buf);
    uint64_t v13 = *v7;
    if (*v7) {
      v13 += 32 * *(unsigned int *)(v13 - 4);
    }
    if (v13 != v12)
    {
      *(_OWORD *)uint64_t v63 = *(_OWORD *)(v12 + 16);
      if (!v64) {
        char v64 = 1;
      }
      goto LABEL_10;
    }
    int v22 = 4;
LABEL_36:
    CFRelease(*(CFTypeRef *)(v11 + 8));
LABEL_37:
    if ((v22 | 4) != 4)
    {
LABEL_76:
      if (v5)
      {
        uint64_t v57 = 0;
        do
        {
          uint64_t v58 = *(void *)((char *)v4 + v57);
          *(void *)((char *)v4 + v57) = 0;
          if (v58) {
            CFRelease(*(CFTypeRef *)(v58 + 8));
          }
          v57 += 8;
        }
        while (8 * v5 != v57);
      }
      goto LABEL_81;
    }
LABEL_38:
    ++v6;
  }
  while (v2 != v6);
  if (v5)
  {
    uint64_t v36 = (WTF *)((char *)v4 + 8 * v5);
    while (1)
    {
      uint64_t v37 = *(atomic_uchar **)(*(void *)v4 + 336);
      if (!v37) {
        goto LABEL_71;
      }
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v37, *(void *)(*(void *)v4 + 344), &v59);
      if (!v59) {
        goto LABEL_71;
      }
      *(_OWORD *)long long buf = *(_OWORD *)(*(void *)v4 + 176);
      WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v63, (long long *)buf, 1uLL);
      uint64_t v38 = (uint64_t)v59;
      int v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)int v39 = 1861;
      *((void *)v39 + 1) = 0;
      *((void *)v39 + 66) = (char *)v39 + 16;
      *((void *)v39 + 67) = 512;
      *((void *)v39 + 68) = 0;
      *((void *)v39 + 70) = 0;
      *((void *)v39 + 69) = 0;
      IPC::Encoder::encodeHeader(v39);
      *(void *)long long buf = v39;
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v39, HIDWORD(v63[1]));
      if (HIDWORD(v63[1]))
      {
        char v40 = (uint64_t *)v63[0];
        uint64_t v41 = 16 * HIDWORD(v63[1]);
        do
        {
          IPC::ArgumentCoder<WTF::UUID,void>::encode(v39, v40);
          v40 += 2;
          v41 -= 16;
        }
        while (v41);
      }
      IPC::Connection::sendMessageImpl(v38, (uint64_t *)buf, 0, 0);
      uint64_t v42 = *(IPC::Encoder **)buf;
      *(void *)long long buf = 0;
      if (v42)
      {
        IPC::Encoder::~Encoder(v42, v10);
        WTF::fastFree(v54, v55);
      }
      uint64_t v43 = v63[0];
      if (v63[0])
      {
        v63[0] = 0;
        LODWORD(v63[1]) = 0;
        WTF::fastFree(v43, v10);
      }
      uint64_t v44 = v59;
      int v59 = 0;
      if (!v44) {
        goto LABEL_71;
      }
      char v45 = 0;
      atomic_uchar *volatile v46 = *v44;
      atomic_compare_exchange_strong_explicit(*v44, (unsigned __int8 *)&v45, 1u, memory_order_acquire, memory_order_acquire);
      if (v45) {
        MEMORY[0x19972E8D0](v46);
      }
      uint64_t v47 = *((void *)v46 + 1);
      uint64_t v48 = v47 - 1;
      *((void *)v46 + 1) = v47 - 1;
      if (v47 == 1)
      {
        uint64_t v56 = *((void *)v46 + 2);
        uint64_t v50 = *((void *)v46 + 3);
        *((void *)v46 + 3) = 0;
        BOOL v49 = v56 == 0;
      }
      else
      {
        BOOL v49 = 0;
        uint64_t v50 = 0;
      }
      int v51 = 1;
      atomic_compare_exchange_strong_explicit(v46, (unsigned __int8 *)&v51, 0, memory_order_release, memory_order_relaxed);
      if (v51 == 1)
      {
        if (!v48) {
          goto LABEL_69;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v46);
        if (!v48)
        {
LABEL_69:
          uint64_t v52 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v52 = &unk_1EE9B37E8;
          *(void *)(v52 + 8) = v46;
          *(void *)(v52 + ++*(_DWORD *)(this + 16) = v50;
          *(unsigned char *)(v52 + 24) = v49;
          v63[0] = (WTF *)v52;
          WTF::ensureOnMainRunLoop();
          unint64_t v53 = v63[0];
          v63[0] = 0;
          if (v53) {
            (*(void (**)(WTF *))(*(void *)v53 + 8))(v53);
          }
        }
      }
LABEL_71:
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      if (v4 == v36)
      {
        unsigned int v5 = HIDWORD(v61);
        uint64_t v4 = v60;
        goto LABEL_76;
      }
    }
  }
LABEL_81:
  if (v4)
  {
    uint64_t v60 = 0;
    LODWORD(v61) = 0;
    WTF::fastFree(v4, v10);
  }
}

uint64_t API::Array::at<API::UInt64>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 28) <= a2) {
    goto LABEL_8;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 16) + 8 * a2);
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 16))(result) == 34)
    {
      if (*(unsigned int *)(a1 + 28) > a2) {
        return *(void *)(*(void *)(a1 + 16) + 8 * a2);
      }
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x198FBF964);
    }
    return 0;
  }
  return result;
}

WTF::StringImpl *WebKit::WebNotificationManagerProxy::providerDidUpdateNotificationPolicy(WebKit::WebNotificationManagerProxy *this, const API::SecurityOrigin *a2, int a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = qword_1EB3581E0;
  if (os_log_type_enabled((os_log_t)qword_1EB3581E0, OS_LOG_TYPE_DEFAULT))
  {
    WebCore::SecurityOriginData::toString((uint64_t *)&v28, (const API::SecurityOrigin *)((char *)a2 + 16));
    WTF::String::utf8();
    if (v30) {
      uint64_t v7 = (char *)v30 + 16;
    }
    else {
      uint64_t v7 = 0;
    }
    *(_DWORD *)long long buf = 136643075;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "Provider did update notification policy for origin %{sensitive}s to %d", buf, 0x12u);
    uint64_t v9 = v30;
    uint64_t v30 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1) {
        WTF::fastFree(v9, v8);
      }
      else {
        --*(_DWORD *)v9;
      }
    }
    uint64_t v10 = v28;
    uint64_t v28 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  uint64_t v11 = (const API::SecurityOrigin *)((char *)a2 + 16);
  uint64_t result = (WTF::StringImpl *)WebCore::SecurityOriginData::toString((uint64_t *)&v27, v11);
  if (v27)
  {
    if (*((_DWORD *)v27 + 1))
    {
      if (WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(result) == this)
      {
        uint64_t v21 = WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v21 = &unk_1EE9E3FE8;
        *(void *)(v21 + 8) = v11;
        *(unsigned char *)(v21 + ++*(_DWORD *)(this + 16) = a3;
        *(void *)long long buf = v21;
        WebKit::WebsiteDataStore::forEachWebsiteDataStore((WebKit *)buf);
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
        {
          WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
          unk_1EB35A750 = 0;
        }
        WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, buf);
        if (WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes)
        {
          uint64_t v22 = *(unsigned int *)(WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes - 4);
          uint64_t v23 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v22;
        }
        else
        {
          uint64_t v23 = 0;
          uint64_t v22 = 0;
        }
        uint64_t v30 = (WTF *)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes;
        uint64_t v31 = v23;
        uint64_t v32 = v23;
        uint64_t v33 = v23;
        uint64_t v34 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v22;
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v30);
        for (uint64_t i = *(void *)&buf[8]; *(void *)&buf[8] != v31; uint64_t i = *(void *)&buf[8])
        {
          uint64_t v25 = *(void *)(*(void *)i + 8);
          uint64_t v26 = *(void *)(v25 + 136);
          if (v26 && *(unsigned char *)(v26 + 104) || *(void *)(v25 + 144))
          {
            uint64_t v28 = (WTF::StringImpl *)&v27;
            char v29 = a3;
            WebKit::AuxiliaryProcessProxy::send<Messages::WebNotificationManager::DidUpdateNotificationDecision>(v25, (uint64_t)&v28);
          }
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
        }
      }
      else
      {
        uint64_t v14 = *((void *)this + 3);
        if (v14)
        {
          uint64_t v15 = *(void *)(v14 + 8);
          if (v15)
          {
            uint64_t v16 = *(unsigned int *)(v15 + 68);
            if (v16)
            {
              uint64_t v17 = *(uint64_t **)(v15 + 56);
              uint64_t v18 = 8 * v16;
              do
              {
                uint64_t v19 = *v17;
                uint64_t v20 = *(void *)(*v17 + 136);
                if (v20 && *(unsigned char *)(v20 + 104) || *(void *)(v19 + 144))
                {
                  *(void *)long long buf = &v27;
                  uint8_t buf[8] = a3;
                  WebKit::AuxiliaryProcessProxy::send<Messages::WebNotificationManager::DidUpdateNotificationDecision>(v19, (uint64_t)buf);
                }
                ++v17;
                v18 -= 8;
              }
              while (v18);
            }
          }
        }
      }
    }
    uint64_t result = v27;
    uint64_t v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WebKit::WebNotificationManagerProxy *WebKit::WebNotificationManagerProxy::providerDidRemoveNotificationPolicies(WebKit::WebNotificationManagerProxy *this, API::Array *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a2 + 7))
  {
    uint64_t v3 = this;
    this = WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(this);
    if (this == v3)
    {
      uint64_t v13 = *((unsigned int *)a2 + 7);
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      if (v13)
      {
        if (v13 >> 27)
        {
          __break(0xC471u);
          return this;
        }
        uint64_t v14 = WTF::fastMalloc((WTF *)(32 * v13));
        unint64_t v15 = 0;
        LODWORD(v27) = v13;
        uint64_t v26 = (uint64_t *)v14;
        do
        {
          uint64_t v16 = API::Array::at<API::SecurityOrigin>((uint64_t)a2, v15);
          LOBYTE(v31) = 0;
          int v33 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v31, v16 + 16);
          *(unsigned char *)uint64_t v14 = 0;
          *(_DWORD *)(v14 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v14, (uint64_t)&v31);
          if (v33 != -1) {
            ((void (*)(uint64_t *, void **))off_1EE9E3EF0[v33])(v24, &v31);
          }
          ++v15;
          v14 += 32;
        }
        while (v13 != v15);
        HIDWORD(v27) = v13;
      }
      uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v17 = &unk_1EE9E4038;
      v17[1] = &v26;
      uint64_t v31 = v17;
      WebKit::WebsiteDataStore::forEachWebsiteDataStore((WebKit *)&v31);
      (*(void (**)(void *))(*v17 + 8))(v17);
      WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v18);
      WebKit::apiArrayToSecurityOriginStrings(v24, a2);
      {
        WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
        unk_1EB35A750 = 0;
      }
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, &v31);
      if (WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes)
      {
        uint64_t v19 = *(unsigned int *)(WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes - 4);
        uint64_t v20 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v19;
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v19 = 0;
      }
      uint64_t v26 = &WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes;
      uint64_t v27 = v20;
      uint64_t v28 = v20;
      uint64_t v29 = v20;
      uint64_t v30 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v19;
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v26);
      for (uint64_t i = v32; v32 != v27; uint64_t i = v32)
      {
        uint64_t v22 = *(void *)(*(void *)i + 8);
        uint64_t v23 = *(void *)(v22 + 136);
        if (v23 && *(unsigned char *)(v23 + 104) || *(void *)(v22 + 144))
        {
          uint64_t v25 = v24;
          WebKit::AuxiliaryProcessProxy::send<Messages::WebNotificationManager::DidRemoveNotificationDecisions>(v22, (uint64_t *)&v25);
        }
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v31);
      }
      uint64_t v12 = v24;
      return (WebKit::WebNotificationManagerProxy *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v6);
    }
    uint64_t v4 = *((void *)v3 + 3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        WebKit::apiArrayToSecurityOriginStrings((uint64_t *)&v31, a2);
        uint64_t v7 = *(unsigned int *)(v5 + 68);
        if (v7)
        {
          uint64_t v8 = *(uint64_t **)(v5 + 56);
          uint64_t v9 = 8 * v7;
          do
          {
            uint64_t v10 = *v8;
            uint64_t v11 = *(void *)(*v8 + 136);
            if (v11 && *(unsigned char *)(v11 + 104) || *(void *)(v10 + 144))
            {
              uint64_t v26 = (uint64_t *)&v31;
              WebKit::AuxiliaryProcessProxy::send<Messages::WebNotificationManager::DidRemoveNotificationDecisions>(v10, (uint64_t *)&v26);
            }
            ++v8;
            v9 -= 8;
          }
          while (v9);
        }
        uint64_t v12 = (uint64_t *)&v31;
        return (WebKit::WebNotificationManagerProxy *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v6);
      }
    }
  }
  return this;
}

uint64_t *WebKit::apiArrayToSecurityOriginStrings(uint64_t *this, API::Array *a2)
{
  uint64_t v2 = this;
  if (a2)
  {
    uint64_t v4 = *((unsigned int *)a2 + 7);
    *this = 0;
    this[1] = 0;
    if (v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v4));
        unint64_t v6 = 0;
        *((_DWORD *)v2 + 2) = v4;
        *uint64_t v2 = v5;
        do
        {
          uint64_t v7 = API::Array::at<API::SecurityOrigin>((uint64_t)a2, v6);
          this = WebCore::SecurityOriginData::toString(&v8, (WebCore::SecurityOriginData *)(v7 + 16));
          *(void *)(v5 + 8 * v6) = v8;
          *((_DWORD *)v2 + 3) = ++v6;
        }
        while (v4 != v6);
      }
    }
  }
  else
  {
    *this = 0;
    this[1] = 0;
  }
  return this;
}

uint64_t WebKit::WebNotificationManagerProxy::getNotifications(uint64_t a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)(v8 - 4);
    uint64_t v10 = (void *)(v8 + 32 * v9);
    if (*(_DWORD *)(v8 - 12))
    {
      uint64_t v11 = *(void **)(a1 + 48);
      if (v9)
      {
        uint64_t v12 = 32 * v9;
        uint64_t v11 = *(void **)(a1 + 48);
        while (*v11 <= 1uLL)
        {
          v11 += 4;
          v12 -= 32;
          if (!v12)
          {
            uint64_t v11 = v10;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    uint64_t v11 = (void *)(v8 + 32 * v9);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v10 = (void *)(v8 + 32 * v9);
  if (v8)
  {
LABEL_8:
    uint64_t v13 = (void *)(v8 + 32 * *(unsigned int *)(v8 - 4));
    goto LABEL_13;
  }
  uint64_t v13 = 0;
LABEL_13:
  if (v13 == v11)
  {
    uint64_t v21 = 0;
    unint64_t v14 = 0;
  }
  else
  {
    unint64_t v14 = 0;
    unsigned int v15 = 0;
    do
    {
      uint64_t v16 = v11[2];
      if (WTF::equal(*(WTF **)(v16 + 128), *a2, a3))
      {
        if (*(void *)(v16 + 240) == a4)
        {
          uint64_t v17 = *(const WTF::StringImpl **)a3;
          if (!*(void *)a3 || !*((_DWORD *)v17 + 1) || WTF::equal(*(WTF **)(v16 + 96), v17, a3))
          {
            uint64_t v18 = v11[2];
            uint64_t v65 = (_DWORD *)v18;
            if (v15 == v64)
            {
              uint64_t v19 = (void *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v63, v15 + 1, (unint64_t)&v65);
              unsigned int v15 = HIDWORD(v64);
              unint64_t v14 = (unint64_t)v63;
              *((void *)v63 + HIDWORD(v64)) = *v19;
            }
            else
            {
              *(void *)(v14 + 8 * v15) = v18;
            }
            HIDWORD(v64) = ++v15;
          }
        }
      }
      uint64_t v20 = v11 + 4;
      uint64_t v11 = v10;
      if (v20 != v10)
      {
        uint64_t v11 = v20;
        while (*v11 <= 1uLL)
        {
          v11 += 4;
          if (v11 == v10)
          {
            uint64_t v11 = v10;
            break;
          }
        }
      }
    }
    while (v11 != v13);
    uint64_t v21 = (uint64_t *)(v14 + 8 * v15);
    if (v15)
    {
      uint64_t v22 = 126 - 2 * __clz(v15);
      goto LABEL_34;
    }
  }
  uint64_t v22 = 0;
LABEL_34:
  uint64_t result = std::__introsort<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **,false>(v14, v21, v22, 1);
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  if (HIDWORD(v64))
  {
    if (HIBYTE(HIDWORD(v64)))
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v60 = (WTF *)((unint64_t)HIDWORD(v64) << 8);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    LODWORD(v62) = HIDWORD(v64);
    uint64_t v59 = WTF::fastMalloc(v60);
    uint64_t v61 = v59;
    uint64_t v26 = v63;
    do
    {
      uint64_t v27 = *((void *)v26 + v25);
      uint64_t v28 = *(_DWORD **)(v27 + 32);
      if (v28) {
        *v28 += 2;
      }
      uint64_t v65 = v28;
      long long v29 = *(_OWORD *)(v27 + 56);
      long long v66 = *(_OWORD *)(v27 + 40);
      long long v67 = v29;
      uint64_t v30 = *(_DWORD **)(v27 + 72);
      if (v30) {
        *v30 += 2;
      }
      uint64_t v68 = v30;
      uint64_t v31 = *(_DWORD **)(v27 + 80);
      if (v31) {
        *v31 += 2;
      }
      long long v69 = v31;
      uint64_t v32 = *(_DWORD **)(v27 + 88);
      if (v32) {
        *v32 += 2;
      }
      int v70 = v32;
      int v33 = *(_DWORD **)(v27 + 96);
      if (v33) {
        *v33 += 2;
      }
      uint64_t v71 = v33;
      uint64_t v34 = *(_DWORD **)(v27 + 104);
      if (v34) {
        *v34 += 2;
      }
      long long v72 = v34;
      char v73 = *(unsigned char *)(v27 + 112);
      uint64_t v35 = *(_DWORD **)(v27 + 120);
      if (v35) {
        *v35 += 2;
      }
      uint64_t v74 = v35;
      uint64_t v36 = *(_DWORD **)(v27 + 128);
      if (v36) {
        *v36 += 2;
      }
      unint64_t v75 = v36;
      long long v37 = *(_OWORD *)(v27 + 152);
      long long v76 = *(_OWORD *)(v27 + 136);
      long long v77 = v37;
      long long v38 = *(_OWORD *)(v27 + 224);
      long long v80 = *(_OWORD *)(v27 + 208);
      long long v39 = *(_OWORD *)(v27 + 192);
      long long v78 = *(_OWORD *)(v27 + 176);
      long long v79 = v39;
      long long v40 = *(_OWORD *)(v27 + 240);
      long long v81 = v38;
      long long v82 = v40;
      uint64_t v41 = (WTF *)*(unsigned int *)(v27 + 268);
      uint64_t v83 = 0;
      int v84 = 0;
      int v85 = (int)v41;
      if (v41)
      {
        uint64_t v42 = (void *)WTF::fastMalloc(v41);
        int v84 = (int)v41;
        uint64_t v83 = v42;
        memcpy(v42, *(const void **)(v27 + 256), *(unsigned int *)(v27 + 268));
      }
      __int16 v86 = *(_WORD *)(v27 + 272);
      uint64_t v43 = (char *)v24 + v59;
      WTF::URL::URL((uint64_t)v24 + v59, (uint64_t *)&v65);
      uint64_t v44 = v68;
      uint64_t v68 = 0;
      *((void *)v43 + 5) = v44;
      char v45 = v69;
      long long v69 = 0;
      *((void *)v43 + 6) = v45;
      atomic_uchar *volatile v46 = v70;
      int v70 = 0;
      *((void *)v43 + 7) = v46;
      uint64_t v47 = v71;
      uint64_t v71 = 0;
      *((void *)v43 + 8) = v47;
      uint64_t v48 = v72;
      long long v72 = 0;
      *((void *)v43 + 9) = v48;
      v43[80] = v73;
      BOOL v49 = v74;
      uint64_t v74 = 0;
      *((void *)v43 + 11) = v49;
      WTF::URL::URL((uint64_t)v24 + v59 + 96, (uint64_t *)&v75);
      *((_OWORD *)v43 + 9) = v78;
      long long v50 = v79;
      long long v51 = v80;
      long long v52 = v82;
      *((_OWORD *)v43 + 12) = v81;
      *((_OWORD *)v43 + 13) = v52;
      *((_OWORD *)v43 + 10) = v50;
      *((_OWORD *)v43 + 11) = v51;
      *((void *)v43 + 29) = 0;
      unint64_t v53 = v83;
      uint64_t v83 = 0;
      *((void *)v43 + 28) = v53;
      LODWORD(v53) = v84;
      int v84 = 0;
      *((_DWORD *)v43 + 58) = v53;
      LODWORD(v53) = v85;
      int v85 = 0;
      *((_DWORD *)v43 + 59) = v53;
      *((_WORD *)v43 + 120) = v86;
      HIDWORD(v62) = ++v25;
      WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&v65, v54);
      uint64_t v24 = (WTF *)((char *)v24 + 256);
    }
    while (v60 != v24);
  }
  else
  {
    uint64_t v26 = v63;
  }
  uint64_t v55 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v55 + 16))(v55, &v61);
  (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
  uint64_t result = WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v56);
  if (v26) {
    return WTF::fastFree(v26, v57);
  }
  return result;
}

BOOL WebKit::WebNotificationProvider::show(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void (**)(uint64_t, void, void))(a1 + 24);
  if (v3)
  {
    if (a2) {
      uint64_t v4 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v4 = 0;
    }
    v3(v4, *(void *)(a3 + 8), *(void *)(a1 + 16));
  }
  return v3 != 0;
}

uint64_t WebKit::WebNotificationProvider::cancel(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(void, void))(result + 32);
  if (v2) {
    return v2(*(void *)(a2 + 8), *(void *)(result + 16));
  }
  return result;
}

uint64_t WebKit::WebNotificationProvider::didDestroyNotification(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(void, void))(result + 40);
  if (v2) {
    return v2(*(void *)(a2 + 8), *(void *)(result + 16));
  }
  return result;
}

uint64_t WebKit::WebNotificationProvider::clearNotifications(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 72))
  {
    uint64_t v3 = result;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v4 = *(unsigned int *)(a2 + 12);
    if (v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v4));
      LODWORD(v++*(_DWORD *)(this + 16) = v4;
      uint64_t v15 = v5;
      if (*(_DWORD *)(a2 + 12))
      {
        uint64_t v6 = v5;
        uint64_t v7 = 0;
        do
        {
          uint64_t v8 = v7;
          uint64_t v9 = *(void *)(*(void *)a2 + 8 * v7);
          uint64_t v10 = (WebKit *)API::Object::newObject(0x18uLL, 34);
          *((void *)v10 + 2) = v9;
          *(void *)uint64_t v10 = &unk_1EE9D1E28;
          WebKit::InitializeWebKit2(v10);
          *(void *)uint64_t v10 = &unk_1EE9B3EF8;
          uint64_t v7 = v8 + 1;
          *(void *)(v6 + 8 * v8) = v10;
        }
        while (v8 + 1 < (unint64_t)*(unsigned int *)(a2 + 12));
        HIDWORD(v++*(_DWORD *)(this + 16) = v8 + 1;
      }
    }
    uint64_t v11 = *(void (**)(void, void))(v3 + 72);
    API::Array::create(&v15, &v14);
    uint64_t v12 = v14;
    if (v14)
    {
      v11(*(void *)(v14 + 8), *(void *)(v3 + 16));
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
    else
    {
      v11(0, *(void *)(v3 + 16));
    }
    return WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v13);
  }
  return result;
}

uint64_t WebKit::WebNotificationProvider::addNotificationManager(uint64_t this, WebKit::WebNotificationManagerProxy *a2)
{
  uint64_t v2 = *(uint64_t (**)(void, void))(this + 48);
  if (v2) {
    return v2(*((void *)a2 + 1), *(void *)(this + 16));
  }
  return this;
}

uint64_t WebKit::WebNotificationProvider::removeNotificationManager(uint64_t this, WebKit::WebNotificationManagerProxy *a2)
{
  uint64_t v2 = *(uint64_t (**)(void, void))(this + 56);
  if (v2) {
    return v2(*((void *)a2 + 1), *(void *)(this + 16));
  }
  return this;
}

void WebKit::WebNotificationProvider::notificationPermissions(WebKit::WebNotificationProvider *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  uint64_t v3 = (uint64_t (*)(void))*((void *)this + 8);
  if (v3)
  {
    uint64_t v4 = (void *)v3(*((void *)this + 2));
    if (v4)
    {
      uint64_t v32 = (CFTypeRef *)[v4 _apiObject];
      API::Dictionary::keys((API::Dictionary *)v32, &v35);
      uint64_t v5 = v35;
      if (*(_DWORD *)(v35 + 28))
      {
        for (unint64_t i = 0; i < *(unsigned int *)(v35 + 28); ++i)
        {
          uint64_t v7 = API::Array::at<API::String>(v5, i);
          uint64_t v8 = v7;
          if (v7) {
            CFRetain(*(CFTypeRef *)(v7 + 8));
          }
          WTF::String::isolatedCopy();
          WTF::String::isolatedCopy();
          char v12 = *((unsigned char *)API::Dictionary::get<API::Boolean>((uint64_t)v32, &v33, v9) + 16);
          uint64_t v13 = *a2;
          if (*a2
            || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (uint64_t v13 = *a2) != 0))
          {
            int v14 = *(_DWORD *)(v13 - 8);
          }
          else
          {
            int v14 = 0;
          }
          unsigned int v15 = *((_DWORD *)v34 + 4);
          if (v15 >= 0x100) {
            unsigned int v16 = v15 >> 8;
          }
          else {
            unsigned int v16 = WTF::StringImpl::hashSlowCase(v34);
          }
          uint64_t v17 = 0;
          for (int j = 1; ; ++j)
          {
            uint64_t v19 = v16 & v14;
            uint64_t v20 = (WTF::StringImpl **)(v13 + 16 * v19);
            uint64_t v21 = *v20;
            if (!*v20) {
              break;
            }
            if (v21 != (WTF *)-1)
            {
              uint64_t v20 = v17;
              if (WTF::equal(v21, v34, v11))
              {
                *(unsigned char *)(v13 + 16 * v19 + 8) = v12;
                goto LABEL_32;
              }
            }
            unsigned int v16 = j + v19;
            uint64_t v17 = v20;
          }
          if (v17)
          {
            const WTF::StringImpl *v17 = 0;
            v17[1] = 0;
            --*(_DWORD *)(*a2 - 16);
            uint64_t v20 = v17;
          }
          uint64_t v22 = v34;
          uint64_t v34 = 0;
          uint64_t v23 = *v20;
          *uint64_t v20 = v22;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v10);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          *((unsigned char *)v20 + 8) = v12;
          uint64_t v24 = *a2;
          if (*a2) {
            int v25 = *(_DWORD *)(v24 - 12) + 1;
          }
          else {
            int v25 = 1;
          }
          *(_DWORD *)(v24 - 12) = v25;
          uint64_t v26 = *a2;
          if (*a2) {
            int v27 = *(_DWORD *)(v26 - 12);
          }
          else {
            int v27 = 0;
          }
          uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
          unint64_t v29 = *(unsigned int *)(v26 - 4);
          if (v29 > 0x400)
          {
            if (v29 > 2 * v28) {
              goto LABEL_32;
            }
          }
          else if (3 * v29 > 4 * v28)
          {
            goto LABEL_32;
          }
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, v20);
LABEL_32:
          uint64_t v30 = v33;
          int v33 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2) {
              WTF::StringImpl::destroy(v30, v10);
            }
            else {
              *(_DWORD *)v30 -= 2;
            }
          }
          uint64_t v31 = v34;
          uint64_t v34 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
            {
              WTF::StringImpl::destroy(v31, v10);
              if (!v8) {
                goto LABEL_41;
              }
LABEL_40:
              CFRelease(*(CFTypeRef *)(v8 + 8));
              goto LABEL_41;
            }
            *(_DWORD *)v31 -= 2;
          }
          if (v8) {
            goto LABEL_40;
          }
LABEL_41:
          uint64_t v5 = v35;
        }
      }
      CFRelease(*(CFTypeRef *)(v5 + 8));
      CFRelease(v32[1]);
    }
  }
}

void WebKit::RemoteScrollingCoordinatorProxy::~RemoteScrollingCoordinatorProxy(WebKit::RemoteScrollingCoordinatorProxy *this)
{
  *(void *)this = &unk_1EE9E3D68;
  WebKit::RemoteScrollingTree::invalidate(*((atomic_uchar **)this + 3));
  uint64_t v3 = *((void *)this + 17);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  uint64_t v4 = *((void *)this + 13);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), v2);
  }
  uint64_t v5 = *((void *)this + 12);
  if (v5) {
    WTF::fastFree((WTF *)(v5 - 16), v2);
  }
  uint64_t v6 = *((void *)this + 11);
  if (v6) {
    WTF::fastFree((WTF *)(v6 - 16), v2);
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

atomic_uchar *volatile **WebKit::RemoteScrollingCoordinatorProxy::handleWheelEvent(atomic_uchar *volatile **result, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (result[3])
  {
    uint64_t v3 = (WebCore::ScrollingTree **)result;
    WebKit::WebKit2PlatformWheelEvent::WebKit2PlatformWheelEvent((uint64_t)v10, a2);
    if (v10[92] == 1) {
      WebCore::ScrollingTree::setClientAllowedMainFrameRubberBandableEdges();
    }
    unsigned __int8 v4 = WebCore::ScrollingTree::determineWheelEventProcessing();
    unsigned __int8 v5 = v4;
    if (v4)
    {
      WebCore::ScrollingTree::willProcessWheelEvent(v3[3]);
      (*((void (**)(void *__return_ptr, WebCore::ScrollingTree **, unsigned char *))*v3 + 8))(v9, v3, v10);
      unsigned int v7 = (*(uint64_t (**)(WebCore::ScrollingTree *, void *, void))(*(void *)v3[3] + 48))(v3[3], v9, v5);
      __int16 v8 = v7;
      (*((void (**)(WebCore::ScrollingTree **, void))*v3 + 28))(v3, (v7 >> 8) & 1);
      __int16 v6 = v8;
    }
    else
    {
      __int16 v6 = v4;
    }
    return WebKit::RemoteScrollingCoordinatorProxy::continueWheelEventHandling((uint64_t)v3, a2, v6);
  }
  return result;
}

atomic_uchar *volatile **WebKit::RemoteScrollingCoordinatorProxy::continueWheelEventHandling(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  __int16 v9 = a3;
  WebKit::WebKit2PlatformWheelEvent::WebKit2PlatformWheelEvent((uint64_t)v10, a2);
  __int16 started = WebCore::ScrollingTree::willWheelEventStartSwipeGesture();
  uint64_t v6 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v6) {
    unsigned int v7 = (atomic_uchar *volatile **)(v6 - 16);
  }
  else {
    unsigned int v7 = 0;
  }
  return WebKit::WebPageProxy::continueWheelEventHandling(v7, a2, (char *)&v9, started | 0x100u);
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::currentSnapPointIndicesDidChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a2;
  v12[1] = a3;
  uint64_t v11 = a4;
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(v6 + 256);
  v9[0] = v12;
  v9[1] = &v11;
  void v9[2] = &v10;
  uint64_t v10 = a5;
  return WebKit::AuxiliaryProcessProxy::send<Messages::RemoteScrollingCoordinator::CurrentSnapPointIndicesChangedForNode>(v7, (uint64_t)v9, *(void *)(*(void *)(v6 + 32) + 1928), 0);
}

WebCore::ScrollingTree *WebKit::RemoteScrollingCoordinatorProxy::receivedLastScrollingTreeNodeDidScrollReply(WebKit::RemoteScrollingCoordinatorProxy *this)
{
  *((unsigned char *)this + 128) = 0;
  uint64_t result = (WebCore::ScrollingTree *)*((void *)this + 3);
  if (result)
  {
    uint64_t result = (WebCore::ScrollingTree *)WebCore::ScrollingTree::hasPendingScrollUpdates(result);
    if (result)
    {
      WTF::RunLoop::main(result);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
      uint64_t v3 = (atomic_uint *)*((void *)this + 1);
      if (v3) {
        atomic_fetch_add(v3, 1u);
      }
      unsigned __int8 v4 = (WebCore::ScrollingTree *)WTF::fastMalloc((WTF *)0x10);
      *(void *)unsigned __int8 v4 = &unk_1EE9E5220;
      *((void *)v4 + 1) = v3;
      uint64_t v5 = v4;
      WTF::RunLoop::dispatch();
      uint64_t result = v5;
      if (v5) {
        return (WebCore::ScrollingTree *)(*(uint64_t (**)(WebCore::ScrollingTree *))(*(void *)v5 + 8))(v5);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::scrollingTreeNodeRequestsScroll(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 48);
    uint64_t v4 = *(void *)(v4 + 56);
  }
  else
  {
    uint64_t v5 = 0;
  }
  BOOL v6 = a2 == v5 && a3 == v4;
  uint64_t v7 = v6;
  if (v6)
  {
    __int16 v8 = (_OWORD *)(a1 + 32);
    if (*(unsigned char *)(a1 + 76))
    {
      long long v9 = *a4;
      *(_DWORD *)(a1 + 47) = *(_DWORD *)((char *)a4 + 15);
      _OWORD *v8 = v9;
      if (*(unsigned __int8 *)(a1 + 72) == *((unsigned __int8 *)a4 + 40))
      {
        if (*(unsigned char *)(a1 + 72))
        {
          *(unsigned char *)(a1 + 52) = *((unsigned char *)a4 + 20);
          uint64_t v10 = *((void *)a4 + 3);
          *(_DWORD *)(a1 + 64) = *((_DWORD *)a4 + 8);
          *(void *)(a1 + 56) = v10;
          *(_WORD *)(a1 + 68) = *((_WORD *)a4 + 18);
        }
      }
      else if (*(unsigned char *)(a1 + 72))
      {
        *(unsigned char *)(a1 + 72) = 0;
      }
      else
      {
        long long v13 = *(long long *)((char *)a4 + 20);
        *(_DWORD *)(a1 + 68) = *((_DWORD *)a4 + 9);
        *(_OWORD *)(a1 + 52) = v13;
        *(unsigned char *)(a1 + 72) = 1;
      }
    }
    else
    {
      long long v11 = *a4;
      long long v12 = a4[1];
      *(_OWORD *)(a1 + 60) = *(long long *)((char *)a4 + 28);
      _OWORD *v8 = v11;
      *(_OWORD *)(a1 + 48) = v12;
      *(unsigned char *)(a1 + 76) = 1;
    }
  }
  return v7;
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::scrollingTreeNodeRequestsKeyboardScroll()
{
  return 0;
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::scrollingTreeAsText@<X0>(WebKit::RemoteScrollingCoordinatorProxy *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    return MEMORY[0x1F416D548]();
  }
  uint64_t v3 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v3 += 2;
  }
  *a2 = v3;
  return result;
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::displayDidRefresh(WebKit::RemoteScrollingCoordinatorProxy *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 272))();
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::sendUIStateChangedIfNecessary(uint64_t this)
{
  uint64_t v1 = this + 80;
  if (*(unsigned char *)(this + 80))
  {
    uint64_t v2 = this;
    uint64_t v3 = *(void *)(*(void *)(this + 16) + 8);
    if (v3) {
      uint64_t v4 = v3 - 16;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void *)(v4 + 256);
    uint64_t v6 = v1;
    this = WebKit::AuxiliaryProcessProxy::send<Messages::RemoteScrollingCoordinator::ScrollingStateInUIProcessChanged>(v5, &v6, *(void *)(*(void *)(v4 + 32) + 1928), 0);
    *(unsigned char *)(v2 + 80) = 0;
  }
  return this;
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::resetStateAfterProcessExited(WebKit::RemoteScrollingCoordinatorProxy *this, void *a2)
{
  if (!*((unsigned char *)this + 116)) {
    *((unsigned char *)this + 1++*(_DWORD *)(this + 16) = 1;
  }
  *((_DWORD *)this + 28) = 0;
  if (!*((unsigned char *)this + 124)) {
    *((unsigned char *)this + 124) = 1;
  }
  *((_DWORD *)this + 30) = 0;
  return WebKit::RemoteScrollingUIState::reset((uint64_t)this + 80, a2);
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::deferWheelEventTestCompletionForReason(uint64_t result, uint64_t a2, uint64_t a3, __int16 a4)
{
  v11[0] = a2;
  v11[1] = a3;
  uint64_t v4 = *(void *)(result + 24);
  if (v4)
  {
    if (*(unsigned char *)(v4 + 337) && a2 != 0)
    {
      uint64_t v6 = *(void *)(*(void *)(result + 16) + 8);
      if (v6) {
        uint64_t v7 = v6 - 16;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(void *)(v7 + 256);
      __int16 v9 = a4;
      v10[0] = v11;
      v10[1] = &v9;
      return WebKit::AuxiliaryProcessProxy::send<Messages::RemoteScrollingCoordinator::StartDeferringScrollingTestCompletionForNode>(v8, (uint64_t)v10, *(void *)(*(void *)(v7 + 32) + 1928), 0);
    }
  }
  return result;
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::removeWheelEventTestCompletionDeferralForReason(uint64_t result, uint64_t a2, uint64_t a3, __int16 a4)
{
  v11[0] = a2;
  v11[1] = a3;
  uint64_t v4 = *(void *)(result + 24);
  if (v4)
  {
    if (*(unsigned char *)(v4 + 337) && a2 != 0)
    {
      uint64_t v6 = *(void *)(*(void *)(result + 16) + 8);
      if (v6) {
        uint64_t v7 = v6 - 16;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(void *)(v7 + 256);
      __int16 v9 = a4;
      v10[0] = v11;
      v10[1] = &v9;
      return WebKit::AuxiliaryProcessProxy::send<Messages::RemoteScrollingCoordinator::StopDeferringScrollingTestCompletionForNode>(v8, (uint64_t)v10, *(void *)(*(void *)(v7 + 32) + 1928), 0);
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteScrollingCoordinatorProxy::scrollbarStateForScrollingNodeID@<X0>(void *a1@<X8>)
{
  uint64_t result = (unsigned __int8 *)WebCore::ScrollingTree::nodeForID();
  if (!result || ((unsigned int v3 = result[40], v4 = v3 > 5, v5 = (1 << v3) & 0x2B, !v4) ? (v6 = v5 == 0) : (v6 = 1), v6))
  {
    uint64_t v8 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    *a1 = v8;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 120);
    return (unsigned __int8 *)v7();
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::type(WebKit::NetworkProcessProxy *this)
{
  return 1;
}

const char *WebKit::NetworkProcessProxy::processName(WebKit::NetworkProcessProxy *this)
{
  return "Networking";
}

void WebKit::ServiceWorkerNotificationHandler::~ServiceWorkerNotificationHandler(WebKit::ServiceWorkerNotificationHandler *this, void *a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t v3;
  uint64_t vars8;

  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);

  JUMPOUT(0x199740C10);
}

void WebKit::WebNotificationManagerMessageHandler::~WebNotificationManagerMessageHandler(WebKit::WebNotificationManagerMessageHandler *this, void *a2)
{
  *(void *)this = &unk_1EE9E5248;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  unsigned int *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE9E5248;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)81>::type()
{
  return 81;
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::propagatesMainFrameScrolls(WebKit::RemoteScrollingCoordinatorProxy *this)
{
  return 1;
}

void WebKit::WebNotification::~WebNotification(WebKit::WebNotification *this, void *a2)
{
  *(void *)this = &unk_1EE9E3C70;
  uint64_t v3 = (atomic_uchar *)*((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  uint64_t v4 = *((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  WebCore::NotificationData::~NotificationData((WebKit::WebNotification *)((char *)this + 32), a2);
}

{
  atomic_uchar *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE9E3C70;
  uint64_t v3 = (atomic_uchar *)*((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  uint64_t v4 = *((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  WebCore::NotificationData::~NotificationData((WebKit::WebNotification *)((char *)this + 32), a2);

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)80>::type()
{
  return 80;
}

WebKit::DownloadProxyMap *std::unique_ptr<WebKit::DownloadProxyMap>::reset[abi:sn180100](WebKit::DownloadProxyMap **a1, WebKit::DownloadProxyMap *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::DownloadProxyMap::~DownloadProxyMap(result, a2);
    return (WebKit::DownloadProxyMap *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::NetworkProcessProxy::UploadActivity,false>::reset[abi:sn180100](uint64_t result, void *a2)
{
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v2 = result;
    uint64_t result = *(void *)(result + 16);
    if (result) {
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(result, a2);
    }
    uint64_t v3 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v3) {
      uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
    }
    uint64_t v4 = *(void *)v2;
    *(void *)uint64_t v2 = 0;
    if (v4) {
      uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
    }
    *(unsigned char *)(v2 + 24) = 0;
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14NetworkProcess42ProcessWillSuspendImminentlyForTestingSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 8), a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages7WebPage54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9E3F20;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E3F20;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "NetworkProcess is taking too much time to process a push message", v5, 2u);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), v3);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9E3F48;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E3F48;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "NetworkProcess is taking too much time to process a notification event", v5, 2u);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), v3);
  }
}

void API::ObjectImpl<(API::Object::Type)80>::~ObjectImpl()
{
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,PAL::SessionID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(result - 8);
    int v17 = -1640531527;
    __int16 v18 = 0;
    char v19 = 0;
    WTF::addArgs<WTF::UUID>(&v17, a2);
    int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v17);
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    uint64_t v8 = v5 & v4;
    __int16 v9 = (uint64_t *)(v3 + 32 * v8);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    if (v11 == v7 && v10 == v6)
    {
      return 1;
    }
    else
    {
      int v13 = 1;
      do
      {
        uint64_t v14 = v10 | v11;
        uint64_t result = v14 != 0;
        if (!v14) {
          break;
        }
        uint64_t v8 = (v8 + v13) & v4;
        unsigned int v15 = (uint64_t *)(v3 + 32 * v8);
        uint64_t v10 = *v15;
        uint64_t v11 = v15[1];
        BOOL v16 = v11 == v7 && v10 == v6;
        ++v13;
      }
      while (!v16);
    }
  }
  return result;
}

void API::ObjectImpl<(API::Object::Type)81>::~ObjectImpl()
{
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::setPushesAndNotificationsEnabledForOrigin(WebCore::SecurityOriginData const&,BOOL)::$_0,void,WebKit::WebsiteDataStore &>::call(IPC::Encoder *result, WebKit::WebsiteDataStore *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 0x8000000000000000) == 0 || v4 == -1)
  {
    uint64_t v5 = WebKit::WebsiteDataStore::networkProcess(this);
    uint64_t v6 = *((void *)this + 3);
    uint64_t v7 = *((void *)v3 + 1);
    char v8 = *((unsigned char *)v3 + 16);
    __int16 v9 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v9 = &unk_1EE9E4010;
    uint64_t v19 = v6;
    uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v10 = 485;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    uint64_t v22 = v10;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, &v19);
    IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v10, v7);
    uint64_t v11 = (unsigned char *)IPC::Encoder::grow(v10, 1uLL, 1);
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x198FC1A78);
    }
    unsigned char *v11 = v8;
    int v13 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v13 = &unk_1EE9E5068;
    v13[1] = v9;
    uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v20[0] = v13;
    v20[1] = v14;
    char v21 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v22, 0, (uint64_t)v20, 1);
    if (v21)
    {
      uint64_t v16 = v20[0];
      v20[0] = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
    uint64_t result = v22;
    uint64_t v22 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      return (IPC::Encoder *)WTF::fastFree(v17, v18);
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::removePushSubscriptionsForOrigins(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void,WebKit::WebsiteDataStore &>::call(WTF::StringImpl *result, WebKit::WebsiteDataStore *this)
{
  uint64_t v3 = *((void *)this + 3);
  if ((v3 & 0x8000000000000000) == 0 || v3 == -1)
  {
    uint64_t v4 = *((void *)result + 1);
    uint64_t v5 = *(unsigned int *)(v4 + 12);
    if (v5)
    {
      uint64_t v6 = *(WebCore::SecurityOriginData **)v4;
      uint64_t v7 = 32 * v5;
      do
      {
        uint64_t v8 = WebKit::WebsiteDataStore::networkProcess(this);
        uint64_t v9 = *((void *)this + 3);
        WebCore::SecurityOriginData::toString((uint64_t *)&v20, v6);
        uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v10 = &unk_1EE9E4060;
        uint64_t v11 = v20;
        uint64_t v20 = 0;
        uint64_t v21 = v9;
        v10[1] = v11;
        uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v12 = 442;
        *((void *)v12 + 1) = 0;
        *((void *)v12 + 66) = (char *)v12 + 16;
        *((void *)v12 + 67) = 512;
        *((void *)v12 + 68) = 0;
        *((void *)v12 + 70) = 0;
        *((void *)v12 + 69) = 0;
        IPC::Encoder::encodeHeader(v12);
        uint64_t v24 = v12;
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, &v21);
        IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v12, (uint64_t)v6);
        int v13 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v13 = &unk_1EE9E5090;
        v13[1] = v10;
        uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        v22[0] = v13;
        v22[1] = v14;
        char v23 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v24, 0, (uint64_t)v22, 1);
        if (v23)
        {
          uint64_t v16 = v22[0];
          v22[0] = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
        int v17 = v24;
        uint64_t v24 = 0;
        if (v17)
        {
          IPC::Encoder::~Encoder(v17, v15);
          WTF::fastFree(v18, v19);
        }
        uint64_t result = v20;
        uint64_t v20 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v15);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        uint64_t v6 = (WebCore::SecurityOriginData *)((char *)v6 + 32);
        v7 -= 32;
      }
      while (v7);
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKitL33removePushSubscriptionsForOriginsERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENK3__0clERNS2_16WebsiteDataStoreEEUlOT_E_vJjEED1Ev(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9E4060;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKitL33removePushSubscriptionsForOriginsERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENK3__0clERNS2_16WebsiteDataStoreEEUlOT_E_vJjEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E4060;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t API::Array::at<API::SecurityOrigin>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 28) <= a2) {
    goto LABEL_8;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 16) + 8 * a2);
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 16))(result) == 18)
    {
      if (*(unsigned int *)(a1 + 28) > a2) {
        return *(void *)(*(void *)(a1 + 16) + 8 * a2);
      }
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x198FC1DE0);
    }
    return 0;
  }
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
LABEL_2:
  uint64_t v10 = a2 - 1;
  unint64_t i = v9;
  while (1)
  {
    uint64_t v9 = i;
    uint64_t v12 = (char *)a2 - (char *)i;
    unint64_t v13 = a2 - i;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v47 = *(a2 - 1);
          uint64_t v48 = *i;
          double v49 = *(double *)(v47 + 248);
          double v50 = *(double *)(*i + 248);
          if (v49 < v50 || v49 == v50 && *(void *)(v47 + 16) < *(void *)(v48 + 16))
          {
            *unint64_t i = v47;
            *(a2 - 1) = v48;
          }
          break;
        case 3uLL:
          uint64_t result = (unint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(i, i + 1, a2 - 1);
          break;
        case 4uLL:
          uint64_t result = (unint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(i, i + 1, i + 2, a2 - 1);
          break;
        case 5uLL:
          long long v51 = i + 1;
          long long v52 = i + 2;
          unint64_t v53 = i + 3;
          uint64_t result = (unint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(i, i + 1, i + 2, i + 3);
          uint64_t v54 = *(a2 - 1);
          uint64_t v55 = i[3];
          double v56 = *(double *)(v54 + 248);
          double v57 = *(double *)(v55 + 248);
          if (v56 < v57 || v56 == v57 && *(void *)(v54 + 16) < *(void *)(v55 + 16))
          {
            uint64_t *v53 = v54;
            *(a2 - 1) = v55;
            uint64_t v58 = *v53;
            uint64_t v59 = *v52;
            double v60 = *(double *)(*v53 + 248);
            double v61 = *(double *)(*v52 + 248);
            if (v60 < v61 || v60 == v61 && *(void *)(v58 + 16) < *(void *)(v59 + 16))
            {
              uint64_t *v52 = v58;
              uint64_t *v53 = v59;
              uint64_t v62 = *v51;
              double v63 = *(double *)(*v51 + 248);
              if (v60 < v63 || v60 == v63 && *(void *)(v58 + 16) < *(void *)(v62 + 16))
              {
                i[1] = v58;
                i[2] = v62;
                uint64_t v64 = *i;
                double v65 = *(double *)(*i + 248);
                if (v60 < v65 || v60 == v65 && *(void *)(v58 + 16) < *(void *)(v64 + 16))
                {
                  *unint64_t i = v58;
                  i[1] = v64;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 191)
    {
      long long v66 = i + 1;
      BOOL v68 = i == a2 || v66 == a2;
      if (a4)
      {
        if (!v68)
        {
          uint64_t v69 = 0;
          int v70 = i;
          do
          {
            uint64_t v71 = v70;
            int v70 = v66;
            uint64_t v73 = *v71;
            uint64_t v72 = v71[1];
            double v74 = *(double *)(v72 + 248);
            double v75 = *(double *)(*v71 + 248);
            if (v74 < v75 || v74 == v75 && *(void *)(v72 + 16) < *(void *)(v73 + 16))
            {
              v71[1] = v73;
              long long v76 = i;
              if (v71 != i)
              {
                uint64_t v77 = v69;
                while (1)
                {
                  uint64_t v78 = *(uint64_t *)((char *)i + v77 - 8);
                  double v79 = *(double *)(v78 + 248);
                  if (v74 >= v79)
                  {
                    if (v74 != v79)
                    {
                      long long v76 = v71;
                      goto LABEL_153;
                    }
                    if (*(void *)(v72 + 16) >= *(void *)(v78 + 16)) {
                      break;
                    }
                  }
                  --v71;
                  *(uint64_t *)((char *)i + v77) = v78;
                  v77 -= 8;
                  if (!v77)
                  {
                    long long v76 = i;
                    goto LABEL_153;
                  }
                }
                long long v76 = (uint64_t *)((char *)i + v77);
              }
LABEL_153:
              uint64_t *v76 = v72;
            }
            long long v66 = v70 + 1;
            v69 += 8;
          }
          while (v70 + 1 != a2);
        }
      }
      else if (!v68)
      {
        uint64_t v120 = 0;
        uint64_t v121 = 1;
        do
        {
          uint64_t v122 = v120;
          uint64_t v120 = v121;
          uint64_t v123 = *v66;
          uint64_t v124 = i[v122];
          double v125 = *(double *)(*v66 + 248);
          double v126 = *(double *)(v124 + 248);
          if (v125 < v126 || v125 == v126 && *(void *)(v123 + 16) < *(void *)(v124 + 16))
          {
            uint64_t *v66 = v124;
            while (1)
            {
              v127 = &i[v122];
              uint64_t v128 = *(v127 - 1);
              double v129 = *(double *)(v128 + 248);
              if (v125 >= v129 && (v125 != v129 || *(void *)(v123 + 16) >= *(void *)(v128 + 16))) {
                break;
              }
              --v122;
              uint64_t *v127 = v128;
              if (v122 == -1) {
                goto LABEL_218;
              }
            }
            i[v122] = v123;
          }
          uint64_t v121 = v120 + 1;
          long long v66 = &i[v120 + 1];
        }
        while (v66 != a2);
      }
      return result;
    }
    if (!a3) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    unsigned int v15 = &i[v13 >> 1];
    if ((unint64_t)v12 >= 0x401)
    {
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(v9, &v9[v13 >> 1], a2 - 1);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(v9 + 1, v15 - 1, a2 - 2);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(v9 + 2, &v9[v14 + 1], a2 - 3);
      uint64_t result = (unint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(v15 - 1, v15, &v9[v14 + 1]);
      uint64_t v16 = *v9;
      uint64_t *v9 = *v15;
      *unsigned int v15 = v16;
    }
    else
    {
      uint64_t result = (unint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(&v9[v13 >> 1], v9, a2 - 1);
    }
    --a3;
    uint64_t v17 = *v9;
    if ((a4 & 1) != 0
      || (v18 = *(v9 - 1), v19 = *(double *)(v18 + 248), double v20 = *(double *)(v17 + 248), v19 < v20)
      || v19 == v20 && *(void *)(v18 + 16) < *(void *)(v17 + 16))
    {
      if (v9 + 1 == a2) {
        goto LABEL_218;
      }
      double v21 = *(double *)(v17 + 248);
      uint64_t v22 = 1;
      while (1)
      {
        uint64_t v23 = v9[v22];
        double v24 = *(double *)(v23 + 248);
        if (v24 >= v21 && (v24 != v21 || *(void *)(v23 + 16) >= *(void *)(v17 + 16))) {
          break;
        }
        if (&v9[++v22] == a2) {
          goto LABEL_218;
        }
      }
      int v25 = &v9[v22];
      if (v22 == 1)
      {
        uint64_t v26 = a2;
        if (v25 < a2)
        {
          uint64_t v28 = *v10;
          double v29 = *(double *)(*v10 + 248);
          uint64_t v26 = a2 - 1;
          if (v29 >= v21)
          {
            uint64_t v26 = a2 - 1;
            do
            {
              if (v29 == v21)
              {
                if (v25 >= v26 || *(void *)(v28 + 16) < *(void *)(v17 + 16)) {
                  break;
                }
              }
              else if (v25 >= v26)
              {
                break;
              }
              uint64_t v30 = *--v26;
              uint64_t v28 = v30;
              double v29 = *(double *)(v30 + 248);
            }
            while (v29 >= v21);
          }
        }
      }
      else
      {
        uint64_t v26 = a2 - 1;
        if (a2 == v9) {
          goto LABEL_218;
        }
        while (1)
        {
          double v27 = *(double *)(*v26 + 248);
          if (v27 < v21 || v27 == v21 && *(void *)(*v26 + 16) < *(void *)(v17 + 16)) {
            break;
          }
          BOOL v5 = v26-- == v9;
          if (v5) {
            goto LABEL_218;
          }
        }
      }
      if (v25 < v26)
      {
        uint64_t v31 = *v26;
        unint64_t i = v25;
        uint64_t v32 = v26;
        while (1)
        {
          *i++ = v31;
          *uint64_t v32 = v23;
          while (1)
          {
            if (i == a2) {
              goto LABEL_218;
            }
            uint64_t v23 = *i;
            double v33 = *(double *)(*i + 248);
            if (v33 >= v21 && (v33 != v21 || *(void *)(v23 + 16) >= *(void *)(v17 + 16))) {
              break;
            }
            ++i;
          }
          if (v32 == v9) {
            goto LABEL_218;
          }
          --v32;
          while (1)
          {
            uint64_t v31 = *v32;
            double v34 = *(double *)(*v32 + 248);
            if (v34 < v21 || v34 == v21 && *(void *)(v31 + 16) < *(void *)(v17 + 16)) {
              break;
            }
            BOOL v5 = v32-- == v9;
            if (v5) {
              goto LABEL_218;
            }
          }
          if (i >= v32) {
            goto LABEL_57;
          }
        }
      }
      unint64_t i = v25;
LABEL_57:
      uint64_t v35 = i - 1;
      if (i - 1 != v9) {
        uint64_t *v9 = *v35;
      }
      uint64_t *v35 = v17;
      if (v25 < v26) {
        goto LABEL_62;
      }
      BOOL v36 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(v9, i - 1);
      uint64_t result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(i, a2);
      if (result)
      {
        a2 = i - 1;
        if (v36) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v36)
      {
LABEL_62:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **,false>(v9, i - 1, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      double v37 = *(double *)(*v10 + 248);
      if (v20 < v37 || v20 == v37 && *(void *)(v17 + 16) < *(void *)(*v10 + 16))
      {
        for (unint64_t i = v9 + 1; i != a2; ++i)
        {
          double v38 = *(double *)(*i + 248);
          if (v20 < v38 || v20 == v38 && *(void *)(v17 + 16) < *(void *)(*i + 16)) {
            goto LABEL_78;
          }
        }
LABEL_218:
        __break(1u);
        JUMPOUT(0x198FC2888);
      }
      for (unint64_t i = v9 + 1; i < a2; ++i)
      {
        double v39 = *(double *)(*i + 248);
        if (v20 < v39 || v20 == v39 && *(void *)(v17 + 16) < *(void *)(*i + 16)) {
          break;
        }
      }
LABEL_78:
      long long v40 = a2;
      if (i < a2)
      {
        long long v40 = a2 - 1;
        if (a2 == v9) {
          goto LABEL_218;
        }
        while (1)
        {
          double v41 = *(double *)(*v40 + 248);
          if (v20 >= v41 && (v20 != v41 || *(void *)(v17 + 16) >= *(void *)(*v40 + 16))) {
            break;
          }
          BOOL v5 = v40-- == v9;
          if (v5) {
            goto LABEL_218;
          }
        }
      }
      if (i < v40)
      {
        uint64_t v42 = *i;
        uint64_t v43 = *v40;
        do
        {
          *i++ = v43;
          uint64_t *v40 = v42;
          while (1)
          {
            if (i == a2) {
              goto LABEL_218;
            }
            uint64_t v42 = *i;
            double v44 = *(double *)(*i + 248);
            if (v20 < v44 || v20 == v44 && *(void *)(v17 + 16) < *(void *)(v42 + 16)) {
              break;
            }
            ++i;
          }
          if (v40 == v9) {
            goto LABEL_218;
          }
          --v40;
          while (1)
          {
            uint64_t v43 = *v40;
            double v45 = *(double *)(*v40 + 248);
            if (v20 >= v45 && (v20 != v45 || *(void *)(v17 + 16) >= *(void *)(v43 + 16))) {
              break;
            }
            BOOL v5 = v40-- == v9;
            if (v5) {
              goto LABEL_218;
            }
          }
        }
        while (i < v40);
      }
      atomic_uchar *volatile v46 = i - 1;
      BOOL v4 = i - 1 >= v9;
      BOOL v5 = i - 1 == v9;
      if (i - 1 != v9) {
        uint64_t *v9 = *v46;
      }
      a4 = 0;
      uint64_t *v46 = v17;
    }
  }
  if (i != a2)
  {
    int64_t v80 = (v13 - 2) >> 1;
    int64_t v81 = v80;
    do
    {
      int64_t v82 = v81;
      if (v80 >= v81)
      {
        uint64_t v83 = (2 * v81) | 1;
        int v84 = &i[v83];
        if (2 * v82 + 2 < (uint64_t)v13)
        {
          uint64_t v85 = v84[1];
          double v86 = *(double *)(*v84 + 248);
          double v87 = *(double *)(v85 + 248);
          if (v86 < v87 || v86 == v87 && *(void *)(*v84 + 16) < *(void *)(v85 + 16))
          {
            ++v84;
            uint64_t v83 = 2 * v82 + 2;
          }
        }
        uint64_t v88 = *v84;
        uint64_t v89 = i[v82];
        double v90 = *(double *)(*v84 + 248);
        double v91 = *(double *)(v89 + 248);
        if (v90 >= v91 && (v90 != v91 || *(void *)(v88 + 16) >= *(void *)(v89 + 16)))
        {
          i[v82] = v88;
          if (v80 >= v83)
          {
            while (1)
            {
              uint64_t v93 = 2 * v83;
              uint64_t v83 = (2 * v83) | 1;
              uint64_t v92 = &i[v83];
              uint64_t v94 = v93 + 2;
              if (v94 < (uint64_t)v13)
              {
                uint64_t result = v92[1];
                double v95 = *(double *)(*v92 + 248);
                double v96 = *(double *)(result + 248);
                if (v95 < v96 || v95 == v96 && (uint64_t result = *(void *)(result + 16), *(void *)(*v92 + 16) < result))
                {
                  ++v92;
                  uint64_t v83 = v94;
                }
              }
              uint64_t v97 = *v92;
              double v98 = *(double *)(*v92 + 248);
              if (v98 < v91) {
                break;
              }
              if (v98 == v91)
              {
                uint64_t result = *(void *)(v89 + 16);
                if (*(void *)(v97 + 16) < result) {
                  break;
                }
              }
              uint64_t *v84 = v97;
              int v84 = v92;
              if (v80 < v83) {
                goto LABEL_169;
              }
            }
          }
          uint64_t v92 = v84;
LABEL_169:
          *uint64_t v92 = v89;
        }
      }
      int64_t v81 = v82 - 1;
    }
    while (v82);
    uint64_t v99 = (unint64_t)v12 >> 3;
    while (2)
    {
      uint64_t v100 = 0;
      uint64_t v101 = *i;
      v102 = i;
      do
      {
        v103 = v102;
        v102 += v100 + 1;
        uint64_t v104 = 2 * v100;
        uint64_t v100 = (2 * v100) | 1;
        uint64_t v105 = v104 + 2;
        if (v105 < v99)
        {
          uint64_t v106 = v102[1];
          double v107 = *(double *)(*v102 + 248);
          double v108 = *(double *)(v106 + 248);
          if (v107 < v108 || v107 == v108 && *(void *)(*v102 + 16) < *(void *)(v106 + 16))
          {
            ++v102;
            uint64_t v100 = v105;
          }
        }
        uint64_t *v103 = *v102;
      }
      while (v100 <= (uint64_t)((unint64_t)(v99 - 2) >> 1));
      if (v102 == --a2)
      {
LABEL_200:
        uint64_t *v102 = v101;
      }
      else
      {
        uint64_t *v102 = *a2;
        *a2 = v101;
        uint64_t v109 = (char *)v102 - (char *)i + 8;
        if (v109 >= 9)
        {
          unint64_t v110 = ((unint64_t)v109 >> 3) - 2;
          unint64_t v111 = v110 >> 1;
          v112 = &i[v110 >> 1];
          uint64_t v113 = *v112;
          uint64_t v101 = *v102;
          double v114 = *(double *)(*v112 + 248);
          double v115 = *(double *)(*v102 + 248);
          if (v114 < v115 || v114 == v115 && *(void *)(v113 + 16) < *(void *)(v101 + 16))
          {
            uint64_t *v102 = v113;
            if (v110 >= 2)
            {
              while (1)
              {
                unint64_t v116 = v111 - 1;
                unint64_t v111 = (v111 - 1) >> 1;
                v102 = &i[v111];
                uint64_t v117 = *v102;
                double v118 = *(double *)(*v102 + 248);
                if (v118 >= v115 && (v118 != v115 || *(void *)(v117 + 16) >= *(void *)(v101 + 16))) {
                  break;
                }
                uint64_t *v112 = v117;
                v112 = &i[v111];
                if (v116 <= 1) {
                  goto LABEL_200;
                }
              }
            }
            v102 = v112;
            goto LABEL_200;
          }
        }
      }
      if (v99-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  double v5 = *(double *)(*a2 + 248);
  double v6 = *(double *)(*result + 248);
  if (v5 < v6 || v5 == v6 && *(void *)(v3 + 16) < *(void *)(v4 + 16))
  {
    uint64_t v7 = *a3;
    double v8 = *(double *)(*a3 + 248);
    if (v8 < v5 || v8 == v5 && *(void *)(v7 + 16) < *(void *)(v3 + 16))
    {
      *uint64_t result = v7;
LABEL_19:
      *a3 = v4;
      return result;
    }
    *uint64_t result = v3;
    *a2 = v4;
    uint64_t v15 = *a3;
    double v16 = *(double *)(*a3 + 248);
    if (v16 < v6 || v16 == v6 && *(void *)(v15 + 16) < *(void *)(v4 + 16))
    {
      *a2 = v15;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v9 = *a3;
    double v10 = *(double *)(*a3 + 248);
    if (v10 < v5 || v10 == v5 && *(void *)(v9 + 16) < *(void *)(v3 + 16))
    {
      *a2 = v9;
      *a3 = v3;
      uint64_t v11 = *a2;
      uint64_t v12 = *result;
      double v13 = *(double *)(*a2 + 248);
      double v14 = *(double *)(*result + 248);
      if (v13 < v14 || v13 == v14 && *(void *)(v11 + 16) < *(void *)(v12 + 16))
      {
        *uint64_t result = v11;
        *a2 = v12;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      double v8 = *(double *)(v6 + 248);
      double v9 = *(double *)(*a1 + 248);
      if (v8 < v9 || v8 == v9 && *(void *)(v6 + 16) < *(void *)(v7 + 16))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v22 = a1 + 1;
      uint64_t v23 = a1 + 2;
      double v24 = a1 + 3;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v25 = *(a2 - 1);
      uint64_t v26 = a1[3];
      double v27 = *(double *)(v25 + 248);
      double v28 = *(double *)(v26 + 248);
      if (v27 < v28 || v27 == v28 && *(void *)(v25 + 16) < *(void *)(v26 + 16))
      {
        uint64_t *v24 = v25;
        *(a2 - 1) = v26;
        uint64_t v29 = *v24;
        uint64_t v30 = *v23;
        double v31 = *(double *)(*v24 + 248);
        double v32 = *(double *)(*v23 + 248);
        if (v31 < v32 || v31 == v32 && *(void *)(v29 + 16) < *(void *)(v30 + 16))
        {
          uint64_t *v23 = v29;
          uint64_t *v24 = v30;
          uint64_t v33 = *v22;
          double v34 = *(double *)(*v22 + 248);
          if (v31 < v34 || v31 == v34 && *(void *)(v29 + 16) < *(void *)(v33 + 16))
          {
            a1[1] = v29;
            a1[2] = v33;
            uint64_t v35 = *a1;
            double v36 = *(double *)(*a1 + 248);
            if (v31 < v36 || v31 == v36 && *(void *)(v29 + 16) < *(void *)(v35 + 16))
            {
              *a1 = v29;
              a1[1] = v35;
            }
          }
        }
      }
      return 1;
    default:
      double v10 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(a1, a1 + 1, a1 + 2);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    uint64_t v14 = *v11;
    uint64_t v15 = *v10;
    double v16 = *(double *)(*v11 + 248);
    double v17 = *(double *)(*v10 + 248);
    if (v16 < v17 || v16 == v17 && *(void *)(v14 + 16) < *(void *)(v15 + 16))
    {
      uint64_t *v11 = v15;
      uint64_t v18 = a1;
      if (v10 != a1)
      {
        uint64_t v19 = v12;
        while (1)
        {
          uint64_t v20 = *(uint64_t *)((char *)a1 + v19 + 8);
          double v21 = *(double *)(v20 + 248);
          if (v16 >= v21)
          {
            if (v16 != v21)
            {
              uint64_t v18 = (uint64_t *)((char *)a1 + v19 + 16);
              goto LABEL_20;
            }
            if (*(void *)(v14 + 16) >= *(void *)(v20 + 16)) {
              break;
            }
          }
          --v10;
          *(uint64_t *)((char *)a1 + v19 + ++*(_DWORD *)(this + 16) = v20;
          v19 -= 8;
          if (v19 == -16)
          {
            uint64_t v18 = a1;
            goto LABEL_20;
          }
        }
        uint64_t v18 = v10;
      }
LABEL_20:
      uint64_t *v18 = v14;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    double v10 = v11;
    v12 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(a1, a2, a3);
  uint64_t v9 = *a4;
  uint64_t v10 = *a3;
  double v11 = *(double *)(*a4 + 248);
  double v12 = *(double *)(*a3 + 248);
  if (v11 < v12 || v11 == v12 && *(void *)(v9 + 16) < *(void *)(v10 + 16))
  {
    *a3 = v9;
    *a4 = v10;
    uint64_t v13 = *a3;
    uint64_t v14 = *a2;
    double v15 = *(double *)(*a3 + 248);
    double v16 = *(double *)(*a2 + 248);
    if (v15 < v16 || v15 == v16 && *(void *)(v13 + 16) < *(void *)(v14 + 16))
    {
      *a2 = v13;
      *a3 = v14;
      uint64_t v17 = *a2;
      uint64_t v18 = *a1;
      double v19 = *(double *)(*a2 + 248);
      double v20 = *(double *)(*a1 + 248);
      if (v19 < v20 || v19 == v20 && *(void *)(v17 + 16) < *(void *)(v18 + 16))
      {
        *a1 = v17;
        *a2 = v18;
      }
    }
  }
  return result;
}

uint64_t API::NotificationProvider::show()
{
  return 0;
}

uint64_t WTF::RefCounted<WebKit::SecKeyProxyStore>::deref(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  if (*(_DWORD *)result == 1)
  {
    uint64_t v3 = *(const void **)(result + 16);
    *(void *)(v2 + ++*(_DWORD *)(this + 16) = 0;
    if (v3) {
      CFRelease(v3);
    }
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), a2);
    return WTF::fastFree((WTF *)v2, v4);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(void)::$_0,void>::call(uint64_t a1)
{
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::InitializeNetworkProcess,WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(void)::$_2>(WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(void)::$_2 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E4130;
  uint64_t v2 = (WebKit::ProcessThrottlerActivity **)(a1 + 2);
  uint64_t v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v3);
  }
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v2, 0);
  double v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::NetworkProcessProxy(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E4158;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::NetworkProcessProxy(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E4158;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::NetworkProcessProxy(void)::$_0,void>::call(unsigned int *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 1u);
      {
        unk_1EB35A530 = 0u;
        unk_1EB35A540 = 0u;
        WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance = 0u;
      }
      uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v3 = 516;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 66) = (char *)v3 + 16;
      *((void *)v3 + 67) = 512;
      *((void *)v3 + 68) = 0;
      *((void *)v3 + 70) = 0;
      *((void *)v3 + 69) = 0;
      IPC::Encoder::encodeHeader(v3);
      uint64_t v13 = v3;
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v3, dword_1EB35A534);
      if (dword_1EB35A534)
      {
        uint64_t v4 = (uint64_t *)qword_1EB35A528;
        uint64_t v5 = 32 * dword_1EB35A534;
        do
        {
          IPC::ArgumentCoder<WebCore::OrganizationStorageAccessPromptQuirk,void>::encode(v3, v4);
          v4 += 4;
          v5 -= 32;
        }
        while (v5);
      }
      LOBYTE(v11) = 0;
      char v12 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v2, &v13, 0, (uint64_t)&v11, 1);
      if (v12)
      {
        uint64_t v7 = v11;
        uint64_t v11 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      double v8 = v13;
      uint64_t v13 = 0;
      if (v8)
      {
        IPC::Encoder::~Encoder(v8, v6);
        WTF::fastFree(v9, v10);
      }
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>(WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0)#1},void,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E4180;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

void IPC::Connection::cancelReply<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>(void *a1)
{
  v1[0] = 0;
  char v2 = 0;
  WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0::operator()<std::optional<IPC::ConnectionHandle>,WebCore::HTTPCookieAcceptPolicy>(a1, (uint64_t)v1, 0);
  if (v2) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v1);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SharedPreferencesForWebProcessDidChange,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E41A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SharedPreferencesForWebProcessDidChange,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E41A8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SharedPreferencesForWebProcessDidChange,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::Detail::CallableWrapper<std::optional<WebCore::SecurityOriginData> const&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DataTaskWithRequest,WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0>(WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0)#1},void,WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9E41D0;
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 32), 0);
  uint64_t v6 = *(unsigned int **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
  }
  return a1;
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9E41D0;
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 32), 0);
  uint64_t v6 = *(unsigned int **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
  }

  return WTF::fastFree((WTF *)a1, v5);
}

void WTF::Detail::CallableWrapper<std::optional<WebCore::SecurityOriginData> const&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DataTaskWithRequest,WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0>(WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0)#1},void,WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 8;
  if (!a2 || !*a2)
  {
LABEL_38:
    IPC::Connection::cancelReply<Messages::NetworkProcess::DataTaskWithRequest,WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0>(v2);
    return;
  }
  uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (!v6)
  {
    uint64_t v30 = *a2;
    uint64_t v31 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v32 = a2[3];
    if (v32 && v31) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v32, v30);
    }
    goto LABEL_38;
  }
  uint64_t v7 = v5;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = API::Object::newObject(0x70uLL, 54);
  API::DataTask::DataTask(v9, v7, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 56), *(unsigned __int8 *)(a1 + 40));
  uint64_t v10 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v9);
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  if ((unint64_t)(v7 - 1) > 0xFFFFFFFFFFFFFFFDLL)
  {
    API::DataTask::networkProcessCrashed((WebKit::ProcessThrottlerActivity **)v9);
LABEL_21:
    if (v9)
    {
      uint64_t v25 = *(const void **)(v9 + 8);
      CFRelease(v25);
    }
    return;
  }
  uint64_t v11 = (uint64_t *)(v8 + 568);
  uint64_t v12 = *(void *)(v8 + 568);
  if (v12
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)(v8 + 568), 0), (uint64_t v12 = *v11) != 0))
  {
    int v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    int v13 = 0;
  }
  unint64_t v14 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
  uint64_t v18 = (uint64_t *)(v12 + 16 * v17);
  uint64_t v19 = *v18;
  if (*v18)
  {
    double v20 = 0;
    int v21 = 1;
    while (v19 != v7)
    {
      if (v19 == -1) {
        double v20 = v18;
      }
      unsigned int v17 = (v17 + v21) & v13;
      uint64_t v18 = (uint64_t *)(v12 + 16 * v17);
      uint64_t v19 = *v18;
      ++v21;
      if (!*v18)
      {
        if (v20)
        {
          *double v20 = 0;
          v20[1] = 0;
          --*(_DWORD *)(*v11 - 16);
          uint64_t v18 = v20;
        }
        goto LABEL_16;
      }
    }
    goto LABEL_21;
  }
LABEL_16:
  uint64_t v22 = v18[1];
  uint64_t *v18 = v7;
  v18[1] = v9;
  if (v22) {
    CFRelease(*(CFTypeRef *)(v22 + 8));
  }
  uint64_t v23 = *v11;
  if (*v11) {
    int v24 = *(_DWORD *)(v23 - 12) + 1;
  }
  else {
    int v24 = 1;
  }
  *(_DWORD *)(v23 - 12) = v24;
  uint64_t v26 = *v11;
  if (*v11) {
    int v27 = *(_DWORD *)(v26 - 12);
  }
  else {
    int v27 = 0;
  }
  uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
  unint64_t v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28) {
      return;
    }
  }
  else if (3 * v29 > 4 * v28)
  {
    return;
  }

  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)(v8 + 568), v18);
}

void IPC::Connection::cancelReply<Messages::NetworkProcess::DataTaskWithRequest,WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0>(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 16);
  uint64_t v3 = (uint64_t *)(a1 + 48);
  uint64_t v4 = API::Object::newObject(0x70uLL, 54);
  API::DataTask::DataTask(v4, 0, v2, v3, *(unsigned __int8 *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v4);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  API::DataTask::networkProcessCrashed((WebKit::ProcessThrottlerActivity **)v4);
  if (v4)
  {
    char v6 = *(const void **)(v4 + 8);
    CFRelease(v6);
  }
}

unint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::OptionSet<WebKit::WebsiteDataFetchOption> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::OptionSet<WebKit::WebsiteDataFetchOption> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(a1, *(int **)(a2 + 8));
  uint64_t v4 = *(char **)(a2 + 16);

  return IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebsiteDataFetchOption>,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::FetchWebsiteData,WTF::CompletionHandler<void ()(WebKit::WebsiteData)>>(WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4220;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::FetchWebsiteData,WTF::CompletionHandler<void ()(WebKit::WebsiteData)>>(WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4220;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::FetchWebsiteData,WTF::CompletionHandler<void ()(WebKit::WebsiteData)>>(WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebKit::WebsiteData>>(a2, (uint64_t)&v11);
    if (v15)
    {
      v16[0] = v11;
      uint64_t v4 = v12;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      v16[1] = v4;
      long long v5 = v13;
      long long v13 = 0uLL;
      long long v17 = v5;
      char v6 = v14;
      unint64_t v14 = 0;
      uint64_t v18 = v6;
      WTF::CompletionHandler<void ()(WebKit::WebsiteData)>::operator()(v2, (uint64_t)v16);
      if (v18) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v18, v7);
      }
      if (*((void *)&v17 + 1)) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v17 + 1), v7);
      }
      if ((void)v17) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v17, v7);
      }
      WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v7);
      return std::__optional_destruct_base<WebKit::WebsiteData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11, v8);
    }
    else
    {
      std::__optional_destruct_base<WebKit::WebsiteData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11, v3);
      return IPC::Connection::cancelReply<Messages::NetworkProcess::FetchWebsiteData,WTF::CompletionHandler<void ()(WebKit::WebsiteData)>>(v2);
    }
  }
  else
  {
    uint64_t v10 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkProcess::FetchWebsiteData,WTF::CompletionHandler<void ()(WebKit::WebsiteData)>>(v10);
  }
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkProcess::FetchWebsiteData,WTF::CompletionHandler<void ()(WebKit::WebsiteData)>>(uint64_t *a1)
{
  long long v5 = 0;
  long long v3 = 0u;
  long long v4 = 0u;
  WTF::CompletionHandler<void ()(WebKit::WebsiteData)>::operator()(a1, (uint64_t)&v3);
  if (v5) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, v1);
  }
  if (*((void *)&v4 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v4 + 1), v1);
  }
  if ((void)v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v4, v1);
  }
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v3, v1);
}

unint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::WallTime const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::WallTime const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(a1, *(int **)(a2 + 8));
  double v4 = **(double **)(a2 + 16);

  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteWebsiteData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4248;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteWebsiteData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4248;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteWebsiteData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul,3ul,4ul,5ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(a1, *(int **)(a2 + 8));
  IPC::VectorArgumentCoder<false,WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, *(void *)(a2 + 16));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, *(void *)(a2 + 24));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, *(void *)(a2 + 32));
  uint64_t v4 = *(void *)(a2 + 40);

  return IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteWebsiteDataForOrigins,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4270;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteWebsiteDataForOrigins,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4270;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteWebsiteDataForOrigins,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::OptionSet<WebKit::WebsiteDataType> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::OptionSet<WebKit::WebsiteDataType> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(a1, *(void *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(a1, *(void *)(a2 + 16));
  uint64_t v4 = *(int **)(a2 + 24);

  return IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::RenameOriginInWebsiteData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4298;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::RenameOriginInWebsiteData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4298;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::RenameOriginInWebsiteData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::ClientOrigin const&,WTF::OptionSet<WebKit::WebsiteDataType> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::ClientOrigin const&,WTF::OptionSet<WebKit::WebsiteDataType> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(a1, *(void *)(a2 + 8));
  uint64_t v4 = *(int **)(a2 + 16);

  return IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::WebsiteDataOriginDirectoryForTesting,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E42C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::WebsiteDataOriginDirectoryForTesting,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E42C0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::WebsiteDataOriginDirectoryForTesting,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, &v7);
      BOOL result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        BOOL result = v7;
        uint64_t v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
    }
  }
  else
  {
    char v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::didReceiveAuthenticationChallenge(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WebCore::SecurityOriginData> const&,WebCore::AuthenticationChallenge &&,BOOL,WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0,void,WebKit::WebPageProxy *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E42E8;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::didReceiveAuthenticationChallenge(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WebCore::SecurityOriginData> const&,WebCore::AuthenticationChallenge &&,BOOL,WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0,void,WebKit::WebPageProxy *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E42E8;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::didReceiveAuthenticationChallenge(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WebCore::SecurityOriginData> const&,WebCore::AuthenticationChallenge &&,BOOL,WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0,void,WebKit::WebPageProxy *>::call(WTF::StringImpl *result, WebKit *this)
{
  uint64_t v2 = *((void *)result + 2);
  if (v2 && *(void *)(v2 + 8))
  {
    if (this)
    {
      int v3 = *((unsigned __int8 *)result + 40);
      return (WTF::StringImpl *)WebKit::WebPageProxy::didReceiveAuthenticationChallengeProxy((uint64_t)this, (uint64_t *)result + 4, v3);
    }
    else
    {
      uint64_t v4 = (char *)result + 32;
      long long v13 = (WTF::StringImpl *)*((void *)result + 3);
      long long v5 = WebKit::allDataStores(result);
      uint64_t v6 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5, &v13);
      if (v6
        && (uint64_t v7 = v6,
            *(unsigned char *)(WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)(*(void *)v4 + 16))
                     + 21) == 8))
      {
        char v8 = *(uint64_t (**)(void))(**(void **)(v7 + 384) + 24);
        return (WTF::StringImpl *)v8();
      }
      else
      {
        uint64_t v9 = *(void *)(*(void *)v4 + 464);
        WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v13);
        CFTypeRef cf = 0;
        WebKit::AuthenticationDecisionListener::completeChallenge(v9);
        CFTypeRef v11 = cf;
        CFTypeRef cf = 0;
        if (v11) {
          CFRelease(v11);
        }
        uint64_t v12 = v14;
        unint64_t v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v10);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
        BOOL result = v13;
        long long v13 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DumpResourceLoadStatistics,WTF::CompletionHandler<void ()(WTF::String)>>(WTF::CompletionHandler<void ()(WTF::String)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4310;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DumpResourceLoadStatistics,WTF::CompletionHandler<void ()(WTF::String)>>(WTF::CompletionHandler<void ()(WTF::String)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4310;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DumpResourceLoadStatistics,WTF::CompletionHandler<void ()(WTF::String)>>(WTF::CompletionHandler<void ()(WTF::String)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = v7;
      uint64_t v7 = 0;
      uint64_t v9 = v3;
      WTF::CompletionHandler<void ()(WTF::String)>::operator()(v2, &v9);
      BOOL result = v9;
      uint64_t v9 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          BOOL result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      if (v8)
      {
        BOOL result = v7;
        uint64_t v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::NetworkProcess::DumpResourceLoadStatistics,WTF::CompletionHandler<void ()(WTF::String)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkProcess::DumpResourceLoadStatistics,WTF::CompletionHandler<void ()(WTF::String)>>(v6);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::NetworkProcess::DumpResourceLoadStatistics,WTF::CompletionHandler<void ()(WTF::String)>>(uint64_t *a1)
{
  uint64_t v3 = 0;
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(a1, &v3);
  BOOL result = v3;
  uint64_t v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4338;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4338;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsVeryPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4360;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsVeryPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4360;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsVeryPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4388;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4388;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrevalentResourceForDebugMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E43B0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrevalentResourceForDebugMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E43B0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrevalentResourceForDebugMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetVeryPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E43D8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetVeryPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E43D8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetVeryPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WTF::Seconds const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WTF::Seconds const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2[1]);
  double v4 = *(double *)a2[2];

  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetLastSeen,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4400;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetLastSeen,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4400;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetLastSeen,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DomainIDExistsInDatabase,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4428;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DomainIDExistsInDatabase,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4428;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DomainIDExistsInDatabase,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WTF::Seconds const&,BOOL,WTF::Seconds const&,BOOL,BOOL,BOOL,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WTF::Seconds const&,BOOL,WTF::Seconds const&,BOOL,BOOL,BOOL,unsigned long long>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 24));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, **(double **)(a2 + 32));
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6) {
    goto LABEL_11;
  }
  *uint64_t v5 = v4;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, **(double **)(a2 + 48));
  char v7 = *(unsigned char *)(a2 + 56);
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198FC54B4);
  }
  unsigned char *v8 = v7;
  char v10 = *(unsigned char *)(a2 + 57);
  CFTypeRef v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x198FC54D4);
  }
  unsigned char *v11 = v10;
  char v13 = *(unsigned char *)(a2 + 58);
  unint64_t v14 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198FC54F4);
  }
  *unint64_t v14 = v13;
  uint64_t v16 = *(void *)(a2 + 64);
  BOOL result = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v18 <= 7)
  {
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x198FC5494);
  }
  *BOOL result = v16;
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MergeStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4450;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MergeStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4450;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MergeStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unsigned char *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,unsigned long long,BOOL,BOOL,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,unsigned long long,BOOL,BOOL,BOOL>,0ul,1ul,2ul,3ul,4ul,5ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7) {
    goto LABEL_9;
  }
  *uint64_t v5 = v4;
  char v7 = *(unsigned char *)(a2 + 24);
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198FC5778);
  }
  unsigned char *v8 = v7;
  char v10 = *(unsigned char *)(a2 + 25);
  CFTypeRef v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x198FC5798);
  }
  unsigned char *v11 = v10;
  char v13 = *(unsigned char *)(a2 + 26);
  BOOL result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v15)
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x198FC5758);
  }
  *BOOL result = v13;
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::InsertExpiredStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4478;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::InsertExpiredStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4478;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::InsertExpiredStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E44A0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E44A0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleCookieBlockingUpdate,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E44C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleCookieBlockingUpdate,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E44C8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleCookieBlockingUpdate,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,std::optional<WTF::WallTime> const&,WebKit::ShouldGrandfatherStatistics>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,std::optional<WTF::WallTime> const&,WebKit::ShouldGrandfatherStatistics>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, *(void *)(a2 + 8));
  char v4 = *(unsigned char *)(a2 + 16);

  return IPC::ArgumentCoder<WebKit::ShouldGrandfatherStatistics,void>::encode<IPC::Encoder>(a1, v4);
}

unint64_t IPC::ArgumentCoder<WebKit::ShouldGrandfatherStatistics,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleClearInMemoryAndPersistent,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E44F0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleClearInMemoryAndPersistent,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E44F0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleClearInMemoryAndPersistent,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleStatisticsAndDataRecordsProcessing,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4518;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleStatisticsAndDataRecordsProcessing,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4518;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleStatisticsAndDataRecordsProcessing,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::StatisticsDatabaseHasAllTables,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4540;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::StatisticsDatabaseHasAllTables,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4540;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::StatisticsDatabaseHasAllTables,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::LogUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4568;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::LogUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4568;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::LogUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HadUserInteraction,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4590;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HadUserInteraction,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4590;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HadUserInteraction,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRelationshipOnlyInDatabaseOnce,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E45B8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRelationshipOnlyInDatabaseOnce,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E45B8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRelationshipOnlyInDatabaseOnce,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E45E0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E45E0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasLocalStorage,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4608;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasLocalStorage,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4608;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasLocalStorage,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTimeToLiveUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4630;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTimeToLiveUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4630;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTimeToLiveUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetResourceLoadStatisticsTimeAdvanceForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4658;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetResourceLoadStatisticsTimeAdvanceForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4658;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetResourceLoadStatisticsTimeAdvanceForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetIsRunningResourceLoadStatisticsTest,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4680;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetIsRunningResourceLoadStatisticsTest,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4680;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetIsRunningResourceLoadStatisticsTest,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubframeUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E46A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubframeUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E46A8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubframeUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsRedirectingTo,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E46D0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsRedirectingTo,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E46D0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsRedirectingTo,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsSubFrameUnder,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E46F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsSubFrameUnder,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E46F8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsSubFrameUnder,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4720;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4720;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsSubresourceUnder,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4748;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsSubresourceUnder,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4748;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsSubresourceUnder,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4770;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4770;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4798;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4798;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTopFrameUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E47C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTopFrameUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E47C0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTopFrameUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTopFrameUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E47E8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTopFrameUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E47E8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTopFrameUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsGrandfathered,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4810;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsGrandfathered,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4810;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsGrandfathered,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

unint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  char v4 = *(unsigned char *)(a2 + 16);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetGrandfathered,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4838;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetGrandfathered,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4838;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetGrandfathered,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetAllStorageAccessEntries,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4860;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetAllStorageAccessEntries,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4860;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetAllStorageAccessEntries,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (!a2
    || !*(void *)a2
    || (IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)&v7), !v9))
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(v2, &v7);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v6);
  }
  v10[0] = v7;
  uint64_t v3 = v8;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  v10[1] = v3;
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(v2, v10);
  uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v4);
  if (v9) {
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetResourceLoadStatisticsDataSummary,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4888;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetResourceLoadStatisticsDataSummary,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4888;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetResourceLoadStatisticsDataSummary,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && (char v4 = *(void **)a2) != 0)
  {
    unint64_t v5 = *((void *)a2 + 1);
    unint64_t v6 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
    if (v5 < v6 || v5 - v6 <= 7)
    {
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v21 = *((void *)a2 + 3);
      if (v21)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
          uint64_t v22 = *(void **)a2;
          uint64_t v23 = *((void *)a2 + 1);
          uint64_t v24 = *((void *)a2 + 3);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          if (v24)
          {
            if (v23) {
              (*(void (**)(uint64_t, void *))(*(void *)v24 + 16))(v24, v22);
            }
          }
        }
      }
LABEL_44:
      uint64_t v32 = *(void **)a2;
      uint64_t v33 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v34 = *((void *)a2 + 3);
      if (v34 && v33)
      {
        (*(void (**)(uint64_t, void *))(*(void *)v34 + 16))(v34, v32);
        uint64_t v35 = *(void **)a2;
        uint64_t v36 = *((void *)a2 + 1);
        uint64_t v37 = *((void *)a2 + 3);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        if (v37)
        {
          if (v36) {
            (*(void (**)(uint64_t, void *))(*(void *)v37 + 16))(v37, v35);
          }
        }
      }
      else
      {
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
      }
      return IPC::Connection::cancelReply<Messages::NetworkProcess::GetResourceLoadStatisticsDataSummary,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
    uint64_t v8 = (unint64_t *)((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v9 = *v8;
    *((void *)a2 + 2) = v8 + 1;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    if (v9 >= 0xAAAA)
    {
      do
      {
        IPC::Decoder::decode<WebKit::ITPThirdPartyData>((uint64_t)&v43, a2);
        if (!v47) {
          goto LABEL_43;
        }
        if (HIDWORD(v49) == v49)
        {
          WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ITPThirdPartyData>((uint64_t)&v48, (unint64_t)&v43);
        }
        else
        {
          uint64_t v25 = v48 + 24 * HIDWORD(v49);
          uint64_t v26 = v43;
          uint64_t v43 = 0;
          *(void *)(v25 + 8) = 0;
          *(void *)(v25 + ++*(_DWORD *)(this + 16) = 0;
          *(void *)uint64_t v25 = v26;
          uint64_t v27 = v44;
          uint64_t v44 = 0;
          *(void *)(v25 + 8) = v27;
          LODWORD(v27) = v45;
          int v45 = 0;
          *(_DWORD *)(v25 + ++*(_DWORD *)(this + 16) = v27;
          LODWORD(v27) = v46;
          int v46 = 0;
          *(_DWORD *)(v25 + 20) = v27;
          ++HIDWORD(v49);
        }
        uint64_t result = std::__optional_destruct_base<WebKit::ITPThirdPartyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v43, v10);
        --v9;
      }
      while (v9);
      unsigned int v28 = HIDWORD(v49);
      unint64_t v14 = (WTF::StringImpl *)v48;
      if (v49 > HIDWORD(v49))
      {
        unint64_t v29 = (WTF::StringImpl *)v48;
        if (HIDWORD(v49))
        {
          if (HIDWORD(v49) >= 0xAAAAAAB)
          {
            __break(0xC471u);
            return result;
          }
          uint64_t v30 = WTF::fastMalloc((WTF *)(24 * HIDWORD(v49)));
          LODWORD(v49) = 24 * v28 / 0x18;
          uint64_t v48 = v30;
          unint64_t v29 = v14;
          if ((WTF::StringImpl *)v30 != v14)
          {
            WTF::VectorMover<false,WebKit::ITPThirdPartyData>::move(v14, (WTF::StringImpl *)((char *)v14 + 24 * v28), v30);
            unint64_t v29 = (WTF::StringImpl *)v48;
          }
        }
        if (v14)
        {
          if (v29 == v14)
          {
            uint64_t v48 = 0;
            LODWORD(v49) = 0;
          }
          WTF::fastFree(v14, v4);
          unint64_t v14 = (WTF::StringImpl *)v48;
        }
        else
        {
          unint64_t v14 = v29;
        }
      }
      uint64_t v48 = 0;
      uint64_t v38 = v49;
      goto LABEL_22;
    }
    if (v9)
    {
      LODWORD(v49) = 24 * (int)v9 / 0x18u;
      uint64_t v48 = WTF::fastMalloc((WTF *)(24 * v9));
      while (1)
      {
        IPC::Decoder::decode<WebKit::ITPThirdPartyData>((uint64_t)&v43, a2);
        if (!v47) {
          break;
        }
        if (HIDWORD(v49) == v49)
        {
          WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ITPThirdPartyData>((uint64_t)&v48, (unint64_t)&v43);
        }
        else
        {
          uint64_t v11 = v48 + 24 * HIDWORD(v49);
          uint64_t v12 = v43;
          uint64_t v43 = 0;
          *(void *)(v11 + 8) = 0;
          *(void *)(v11 + ++*(_DWORD *)(this + 16) = 0;
          *(void *)uint64_t v11 = v12;
          uint64_t v13 = v44;
          uint64_t v44 = 0;
          *(void *)(v11 + 8) = v13;
          LODWORD(v13) = v45;
          int v45 = 0;
          *(_DWORD *)(v11 + ++*(_DWORD *)(this + 16) = v13;
          LODWORD(v13) = v46;
          int v46 = 0;
          *(_DWORD *)(v11 + 20) = v13;
          ++HIDWORD(v49);
        }
        std::__optional_destruct_base<WebKit::ITPThirdPartyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v43, v10);
        if (!--v9)
        {
          unint64_t v14 = (WTF::StringImpl *)v48;
          uint64_t v15 = v49;
          goto LABEL_21;
        }
      }
LABEL_43:
      std::__optional_destruct_base<WebKit::ITPThirdPartyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v43, v10);
      WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v31);
      goto LABEL_44;
    }
    unint64_t v14 = 0;
    uint64_t v15 = 0;
LABEL_21:
    uint64_t v38 = v15;
    uint64_t v48 = 0;
LABEL_22:
    uint64_t v49 = 0;
    char v42 = 1;
    WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v4);
    v41[0] = 0;
    v41[1] = 0;
    v39[0] = v14;
    v39[1] = v38;
    WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v18);
    char v40 = 1;
    uint64_t v19 = *v2;
    *uint64_t v2 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v19 + 16))(v19, v39);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 8))(v19);
    if (v40) {
      return WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v20);
    }
  }
  else
  {
    uint64_t v16 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkProcess::GetResourceLoadStatisticsDataSummary,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v16);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkProcess::GetResourceLoadStatisticsDataSummary,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

WTF *IPC::Decoder::decode<WebKit::ITPThirdPartyData>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::ITPThirdPartyData,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a2 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::ITPThirdPartyData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2);
    char v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetCacheMaxAgeCapForPrevalentResources,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E48B0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetCacheMaxAgeCapForPrevalentResources,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E48B0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetCacheMaxAgeCapForPrevalentResources,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetGrandfatheringTime,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E48D8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetGrandfatheringTime,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E48D8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetGrandfatheringTime,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,unsigned long long>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t result = IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(void *)unint64_t result = v4;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetMaxStatisticsEntries,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4900;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetMaxStatisticsEntries,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4900;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetMaxStatisticsEntries,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetMinimumTimeBetweenDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4928;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetMinimumTimeBetweenDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4928;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetMinimumTimeBetweenDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPruneEntriesDownTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4950;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPruneEntriesDownTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4950;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPruneEntriesDownTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldClassifyResourcesBeforeDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4978;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldClassifyResourcesBeforeDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4978;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldClassifyResourcesBeforeDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetResourceLoadStatisticsDebugMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E49A0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetResourceLoadStatisticsDebugMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E49A0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetResourceLoadStatisticsDebugMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsResourceLoadStatisticsEphemeral,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E49C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsResourceLoadStatisticsEphemeral,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E49C8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsResourceLoadStatisticsEphemeral,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  unint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetCacheMaxAgeCapForPrevalentResources,WebKit::NetworkProcessProxy::resetCacheMaxAgeCapForPrevalentResources(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetCacheMaxAgeCapForPrevalentResources(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E49F0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetCacheMaxAgeCapForPrevalentResources,WebKit::NetworkProcessProxy::resetCacheMaxAgeCapForPrevalentResources(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetCacheMaxAgeCapForPrevalentResources(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E49F0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetCacheMaxAgeCapForPrevalentResources,WebKit::NetworkProcessProxy::resetCacheMaxAgeCapForPrevalentResources(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetCacheMaxAgeCapForPrevalentResources(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetParametersToDefaultValues,WebKit::NetworkProcessProxy::resetParametersToDefaultValues(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetParametersToDefaultValues(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4A18;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetParametersToDefaultValues,WebKit::NetworkProcessProxy::resetParametersToDefaultValues(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetParametersToDefaultValues(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4A18;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetParametersToDefaultValues,WebKit::NetworkProcessProxy::resetParametersToDefaultValues(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetParametersToDefaultValues(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WTF::OptionSet<WebCore::CrossSiteNavigationDataTransferFlag> const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebKit::DidFilterKnownLinkDecoration>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WTF::OptionSet<WebCore::CrossSiteNavigationDataTransferFlag> const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebKit::DidFilterKnownLinkDecoration>,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<WTF::OptionSet<WebCore::CrossSiteNavigationDataTransferFlag>,void>::encode<IPC::Encoder>(a1, *(char **)(a2 + 24));
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)(a2 + 32));
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)(a2 + 40));
  char v4 = *(unsigned char *)(a2 + 48);

  return IPC::ArgumentCoder<WebKit::ShouldGrandfatherStatistics,void>::encode<IPC::Encoder>(a1, v4);
}

unint64_t IPC::ArgumentCoder<WTF::OptionSet<WebCore::CrossSiteNavigationDataTransferFlag>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char *a2)
{
  char v2 = *a2;
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = v2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebKit::DidFilterKnownLinkDecoration>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebKit::DidFilterKnownLinkDecoration>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 16));
  char v4 = *(unsigned char *)(a2 + 24);

  return IPC::ArgumentCoder<WebKit::ShouldGrandfatherStatistics,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetCrossSiteLoadWithLinkDecorationForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4A40;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetCrossSiteLoadWithLinkDecorationForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4A40;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetCrossSiteLoadWithLinkDecorationForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetCrossSiteLoadsWithLinkDecorationForTesting,WebKit::NetworkProcessProxy::resetCrossSiteLoadsWithLinkDecorationForTesting(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetCrossSiteLoadsWithLinkDecorationForTesting(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4A68;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetCrossSiteLoadsWithLinkDecorationForTesting,WebKit::NetworkProcessProxy::resetCrossSiteLoadsWithLinkDecorationForTesting(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetCrossSiteLoadsWithLinkDecorationForTesting(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4A68;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetCrossSiteLoadsWithLinkDecorationForTesting,WebKit::NetworkProcessProxy::resetCrossSiteLoadsWithLinkDecorationForTesting(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetCrossSiteLoadsWithLinkDecorationForTesting(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4A90;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4A90;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInUIProcessForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E4AB8;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInUIProcessForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E4AB8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInUIProcessForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::call(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E4AE0;
  v8[1] = v6;
  uint64_t v8[2] = v7;
  char v10 = v8;
  WebKit::WebsiteDataStore::removeData(v4, v5, a2, (uint64_t *)&v10);
  uint64_t result = (uint64_t)v10;
  char v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInUIProcessForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9E4AE0;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl **)a1[1];
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInUIProcessForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9E4AE0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl **)*((void *)this + 1);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInUIProcessForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasIsolatedSession,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4B08;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasIsolatedSession,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4B08;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasIsolatedSession,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  unint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetAppBoundDomainsForResourceLoadStatistics,WebKit::NetworkProcessProxy::setAppBoundDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setAppBoundDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4B30;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetAppBoundDomainsForResourceLoadStatistics,WebKit::NetworkProcessProxy::setAppBoundDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setAppBoundDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4B30;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetAppBoundDomainsForResourceLoadStatistics,WebKit::NetworkProcessProxy::setAppBoundDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setAppBoundDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetManagedDomainsForResourceLoadStatistics,WebKit::NetworkProcessProxy::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4B58;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetManagedDomainsForResourceLoadStatistics,WebKit::NetworkProcessProxy::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4B58;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetManagedDomainsForResourceLoadStatistics,WebKit::NetworkProcessProxy::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldDowngradeReferrerForTesting,WebKit::NetworkProcessProxy::setShouldDowngradeReferrerForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setShouldDowngradeReferrerForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4B80;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldDowngradeReferrerForTesting,WebKit::NetworkProcessProxy::setShouldDowngradeReferrerForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setShouldDowngradeReferrerForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4B80;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldDowngradeReferrerForTesting,WebKit::NetworkProcessProxy::setShouldDowngradeReferrerForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setShouldDowngradeReferrerForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetThirdPartyCookieBlockingMode,WebKit::NetworkProcessProxy::setThirdPartyCookieBlockingMode(PAL::SessionID,WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setThirdPartyCookieBlockingMode(PAL::SessionID,WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4BA8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetThirdPartyCookieBlockingMode,WebKit::NetworkProcessProxy::setThirdPartyCookieBlockingMode(PAL::SessionID,WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setThirdPartyCookieBlockingMode(PAL::SessionID,WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4BA8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetThirdPartyCookieBlockingMode,WebKit::NetworkProcessProxy::setThirdPartyCookieBlockingMode(PAL::SessionID,WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setThirdPartyCookieBlockingMode(PAL::SessionID,WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldEnbleSameSiteStrictEnforcementForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4BD0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldEnbleSameSiteStrictEnforcementForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4BD0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldEnbleSameSiteStrictEnforcementForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetFirstPartyWebsiteDataRemovalModeForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4BF8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetFirstPartyWebsiteDataRemovalModeForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4BF8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetFirstPartyWebsiteDataRemovalModeForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetToSameSiteStrictCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4C20;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetToSameSiteStrictCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4C20;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetToSameSiteStrictCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetFirstPartyHostCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4C48;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetFirstPartyHostCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4C48;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetFirstPartyHostCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetThirdPartyCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4C70;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetThirdPartyCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4C70;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetThirdPartyCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E4C98;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E4C98;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *IPC::Connection::sendSync<Messages::NetworkProcess::ProcessWillSuspendImminentlyForTestingSync>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v19 = 0;
  IPC::Connection::createSyncMessageEncoder(3619, a2, &v19, &v18);
  if (a3)
  {
    **((unsigned char **)v18 + 66) |= 4u;
    *(unsigned char *)(a1 + 96) = 1;
  }
  IPC::Connection::sendSyncMessage(a1, v19, (uint64_t *)&v18, a3, (uint64_t)&v16, a5);
  uint64_t v9 = v17;
  if (v17)
  {
    if (v17 != 1)
    {
      uint64_t v15 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(v15);
    }
    *(unsigned char *)a4 = v16;
  }
  else
  {
    uint64_t v10 = v16;
    uint64_t v16 = 0;
    *(void *)a4 = v10;
  }
  *(_DWORD *)(a4 + ++*(_DWORD *)(this + 16) = v9;
  ((void (*)(char *, uint64_t *))off_1EE9E4CB0[v9])(&v20, &v16);
  uint64_t result = v18;
  unint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4CD0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4CD0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DestroySession,WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0>(WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0)#1},void,WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4CF8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DestroySession,WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0>(WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0)#1},void,WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4CF8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DestroySession,WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0>(WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0)#1},void,WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0>::call(WTF::StringImpl *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t v3 = 0;
    *((void *)result + 1) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v1 + 16))(v1, &v3);
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    uint64_t result = v3;
    uint64_t v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(void **a1)
{
  uint64_t result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  uint64_t v3 = &result[7 * v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[7 * v2];
  }
  if (v2)
  {
    uint64_t v4 = 56 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 7;
      v4 -= 56;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetAllBackgroundFetchIdentifiers,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4D20;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetAllBackgroundFetchIdentifiers,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4D20;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetAllBackgroundFetchIdentifiers,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8) {
        return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetBackgroundFetchState,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4D48;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetBackgroundFetchState,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4D48;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetBackgroundFetchState,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = *(WTF::StringImpl **)a2;
    if (*(void *)a2)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - (void)v4)
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v17 = *((void *)a2 + 3);
        if (v17)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v17 + 16))(v17, v4, v5);
            unint64_t v15 = 0;
            uint64_t v26 = *(WTF::StringImpl **)a2;
            uint64_t v27 = *((void *)a2 + 1);
            uint64_t v28 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v16 = 0;
            if (v28 && v27)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(void *)v28 + 16))(v28, v26, v27);
              uint64_t v16 = *(WTF::StringImpl **)a2;
              unint64_t v15 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v15 = 0;
            uint64_t v16 = 0;
          }
        }
      }
      else
      {
        uint64_t v6 = (unsigned __int8 *)*((void *)a2 + 2);
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          if (!v7)
          {
            v35[0] = 0;
            char v36 = 0;
            v32[0] = 0;
            char v33 = 0;
            char v34 = 1;
            std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v35, a2);
            goto LABEL_14;
          }
          IPC::ArgumentCoder<WebKit::BackgroundFetchState,void>::decode((uint64_t *)a2, (uint64_t)v35);
          if (v36
            || (char v8 = *(WTF::StringImpl **)a2,
                uint64_t v24 = *((void *)a2 + 1),
                *(void *)a2 = 0,
                *((void *)a2 + 1) = 0,
                (uint64_t v25 = *((void *)a2 + 3)) != 0)
            && v24
            && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v25 + 16))(v25, v8), v36))
          {
            std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::__optional_destruct_base[abi:sn180100]<WebKit::BackgroundFetchState>((uint64_t)v32, (uint64_t)v35);
            char v9 = 1;
          }
          else
          {
            char v9 = 0;
            v32[0] = 0;
          }
          char v34 = v9;
          std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v35, v8);
          if (v34)
          {
LABEL_14:
            if (v34)
            {
              v29[0] = 0;
              char v30 = 0;
              if (v33)
              {
                std::construct_at[abi:sn180100]<WebKit::BackgroundFetchState,WebKit::BackgroundFetchState,WebKit::BackgroundFetchState*>((uint64_t)v29, (uint64_t)v32);
                char v30 = 1;
                char v31 = 1;
                if (!v34)
                {
LABEL_20:
                  uint64_t v13 = *v2;
                  *uint64_t v2 = 0;
                  (*(void (**)(uint64_t, unsigned char *))(*(void *)v13 + 16))(v13, v29);
                  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
                  if (v31) {
                    return std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v14);
                  }
                  return result;
                }
              }
              else
              {
                char v31 = 1;
              }
              std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v32, v10);
              if (v31) {
                goto LABEL_20;
              }
            }
            else
            {
              v29[0] = 0;
              char v31 = 0;
            }
            uint64_t v21 = *(WTF::StringImpl **)a2;
            uint64_t v22 = *((void *)a2 + 1);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v23 = *((void *)a2 + 3);
            if (!v23) {
              return IPC::Connection::cancelReply<Messages::NetworkProcess::GetBackgroundFetchState,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)>>(v2);
            }
            if (!v22) {
              return IPC::Connection::cancelReply<Messages::NetworkProcess::GetBackgroundFetchState,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)>>(v2);
            }
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v23 + 16))(v23, v21);
            if (!v31) {
              return IPC::Connection::cancelReply<Messages::NetworkProcess::GetBackgroundFetchState,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)>>(v2);
            }
            goto LABEL_20;
          }
LABEL_26:
          uint64_t v10 = *(WTF::StringImpl **)a2;
          uint64_t v19 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v20 = *((void *)a2 + 3);
          if (v20 && v19) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v20 + 16))(v20, v10);
          }
          goto LABEL_14;
        }
        unint64_t v15 = v5;
        uint64_t v16 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v18 = *((void *)a2 + 3);
      if (v18 && v15) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v18 + 16))(v18, v16);
      }
      v32[0] = 0;
      char v34 = 0;
      goto LABEL_26;
    }
  }
  uint64_t v11 = (uint64_t *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::NetworkProcess::GetBackgroundFetchState,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)>>(v11);
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkProcess::GetBackgroundFetchState,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)>>(uint64_t *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  v4[152] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, v2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AbortBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4D70;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AbortBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4D70;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AbortBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::PauseBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4D98;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::PauseBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4D98;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::PauseBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResumeBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4DC0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResumeBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4DC0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResumeBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClickBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4DE8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClickBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4DE8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClickBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::requestStorageSpace(PAL::SessionID,WebCore::ClientOrigin const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::$_0,void,std::optional<unsigned long long>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E4E10;
  uint64_t v2 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 72);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9E3EF0[v3])(&v6, a1 + 48);
  }
  *(_DWORD *)(a1 + 72) = -1;
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9E3EF0[v4])(&v7, a1 + 16);
  }
  *(_DWORD *)(a1 + ++*(_DWORD *)(this + 40) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::requestStorageSpace(PAL::SessionID,WebCore::ClientOrigin const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::$_0,void,std::optional<unsigned long long>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E4E10;
  uint64_t v3 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((unsigned int *)this + 18);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1EE9E3EF0[v4])(&v7, (char *)this + 48);
  }
  *((_DWORD *)this + 18) = -1;
  uint64_t v5 = *((unsigned int *)this + 10);
  if (v5 != -1) {
    ((void (*)(char *, char *))off_1EE9E3EF0[v5])(&v8, (char *)this + 16);
  }
  *((_DWORD *)this + 10) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::requestStorageSpace(PAL::SessionID,WebCore::ClientOrigin const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::$_0,void,std::optional<unsigned long long>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if ((_BYTE)a3)
  {
    uint64_t v4 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, a2, a3);
LABEL_14:
    uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return v12(v4);
  }
  uint64_t v5 = a1 + 16;
  if ((WebCore::operator==() & 1) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = 0;
    (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, 0, 0);
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  uint64_t v15 = v7;
  v16[0] = 0;
  int v17 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v16, a1 + 16);
  v18[0] = 0;
  int v19 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v18, a1 + 48);
  long long v20 = *(_OWORD *)(a1 + 80);
  uint64_t v21 = *(void *)(a1 + 96);
  uint64_t v8 = WTF::fastMalloc((WTF *)0x68);
  *(void *)uint64_t v8 = &unk_1EE9E4E38;
  uint64_t v9 = v15;
  uint64_t v15 = 0;
  *(void *)(v8 + 8) = v9;
  *(unsigned char *)(v8 + ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(v8 + ++*(_DWORD *)(this + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v8 + 16, (uint64_t)v16);
  *(unsigned char *)(v8 + 48) = 0;
  *(_DWORD *)(v8 + 72) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v8 + 48, (uint64_t)v18);
  long long v10 = v20;
  *(void *)(v8 + 96) = v21;
  *(_OWORD *)(v8 + 80) = v10;
  uint64_t v13 = v8;
  WebKit::WebPageProxy::forMostVisibleWebPageIfAny(v6, v5, &v13);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  if (v19 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9E3EF0[v19])(&v14, v18);
  }
  int v19 = -1;
  if (v17 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9E3EF0[v17])(&v14, v16);
  }
  int v17 = -1;
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19NetworkProcessProxy19requestStorageSpaceEN3PAL9SessionIDERKN7WebCore12ClientOriginEyyyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEN3__0clISD_EEDaT_EUlPSK_E_vJPNS2_12WebPageProxyEEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E4E38;
  uint64_t v2 = *(unsigned int *)(a1 + 72);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9E3EF0[v2])(&v6, a1 + 48);
  }
  *(_DWORD *)(a1 + 72) = -1;
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9E3EF0[v3])(&v7, a1 + 16);
  }
  *(_DWORD *)(a1 + ++*(_DWORD *)(this + 40) = -1;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19NetworkProcessProxy19requestStorageSpaceEN3PAL9SessionIDERKN7WebCore12ClientOriginEyyyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEN3__0clISD_EEDaT_EUlPSK_E_vJPNS2_12WebPageProxyEEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E4E38;
  uint64_t v3 = *((unsigned int *)this + 18);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1EE9E3EF0[v3])(&v7, (char *)this + 48);
  }
  *((_DWORD *)this + 18) = -1;
  uint64_t v4 = *((unsigned int *)this + 10);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1EE9E3EF0[v4])(&v8, (char *)this + 16);
  }
  *((_DWORD *)this + 10) = -1;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19NetworkProcessProxy19requestStorageSpaceEN3PAL9SessionIDERKN7WebCore12ClientOriginEyyyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEN3__0clISD_EEDaT_EUlPSK_E_vJPNS2_12WebPageProxyEEE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2 != 0;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "NetworkProcessProxy::requestStorageSpace trying to get a visible page: %d", buf, 8u);
  }
  if (a2)
  {
    int v6 = *(_DWORD *)(a1 + 40);
    if (v6)
    {
      if (v6 != 1) {
        std::__throw_bad_variant_access[abi:sn180100]();
      }
      char v7 = (WTF::FileSystemImpl *)MEMORY[0x1E4F30980];
    }
    else
    {
      char v7 = (WTF::FileSystemImpl *)(a1 + 24);
    }
    WTF::FileSystemImpl::encodeForFileName((uint64_t *)&v24, v7, v5);
    *(void *)long long buf = " content";
    uint64_t v27 = 9;
    uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v24, (uint64_t *)buf, &v25);
    if (v25)
    {
      long long v10 = v24;
      uint64_t v24 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      uint64_t v12 = *(void *)(a2 + 328);
      uint64_t v13 = *(_DWORD **)(v12 + 272);
      uint64_t v14 = *(void *)(v12 + 280);
      WebCore::SecurityOriginData::databaseIdentifier((uint64_t *)buf, (WebCore::SecurityOriginData *)(a1 + 16));
      uint64_t v15 = *(void *)(a1 + 80);
      uint64_t v16 = *(void *)(a1 + 88);
      uint64_t v17 = *(void *)(a1 + 96);
      uint64_t v18 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      int v19 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v19 = &unk_1EE9E4E60;
      v19[1] = v18;
      uint64_t v23 = v19;
      WebKit::WebPageProxy::requestStorageSpace(a2, v13, v14, (_DWORD **)buf, (_DWORD **)&v25, (_DWORD **)&v25, v15, v16, v16, v17, (uint64_t *)&v23);
      uint64_t v21 = (uint64_t)v23;
      uint64_t v23 = 0;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
      uint64_t v22 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v20);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      uint64_t result = v25;
      uint64_t v25 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void, void))(*(void *)v11 + 16))(v11, 0, 0);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit19NetworkProcessProxy19requestStorageSpaceEN3PAL9SessionIDERKN7WebCore12ClientOriginEyyyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEN3__0clISD_EEDaT_ENUlPSK_E_clINS2_12WebPageProxyEEESJ_SL_EUlSK_E_vJyEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4E60;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit19NetworkProcessProxy19requestStorageSpaceEN3PAL9SessionIDERKN7WebCore12ClientOriginEyyyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEN3__0clISD_EEDaT_ENUlPSK_E_clINS2_12WebPageProxyEEESJ_SL_EUlSK_E_vJyEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4E60;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit19NetworkProcessProxy19requestStorageSpaceEN3PAL9SessionIDERKN7WebCore12ClientOriginEyyyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEN3__0clISD_EEDaT_ENUlPSK_E_clINS2_12WebPageProxyEEESJ_SL_EUlSK_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 16))(v2, a2, 1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::increaseQuota(PAL::SessionID,WebCore::ClientOrigin const&,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,unsigned long long,unsigned long long)::$_0,void,std::optional<unsigned long long>>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9E4E88;
  uint64_t v3 = *(unsigned int *)(a1 + 88);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9E3EF0[v3])(&v7, a1 + 64);
  }
  *(_DWORD *)(a1 + 88) = -1;
  uint64_t v4 = *(unsigned int *)(a1 + 56);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9E3EF0[v4])(&v8, a1 + 32);
  }
  *(_DWORD *)(a1 + 56) = -1;
  uint64_t v5 = *(unsigned int **)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::increaseQuota(PAL::SessionID,WebCore::ClientOrigin const&,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,unsigned long long,unsigned long long)::$_0,void,std::optional<unsigned long long>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E4E88;
  uint64_t v3 = *((unsigned int *)this + 22);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1EE9E3EF0[v3])(&v7, (char *)this + 64);
  }
  *((_DWORD *)this + 22) = -1;
  uint64_t v4 = *((unsigned int *)this + 14);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1EE9E3EF0[v4])(&v8, (char *)this + 32);
  }
  *((_DWORD *)this + 14) = -1;
  uint64_t v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::increaseQuota(PAL::SessionID,WebCore::ClientOrigin const&,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,unsigned long long,unsigned long long)::$_0,void,std::optional<unsigned long long>>::call(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  v13[0] = a2;
  v13[1] = a3;
  uint64_t v3 = *((void *)result + 2);
  if (v3 && *(void *)(v3 + 8))
  {
    uint64_t v4 = *((void *)result + 1);
    uint64_t v5 = (uint64_t *)((char *)result + 24);
    uint64_t v6 = (uint64_t)result + 32;
    char v7 = (uint64_t *)((char *)result + 96);
    char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v8 = 394;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 68) = 0;
    *((void *)v8 + 70) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    uint64_t v16 = v8;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, v5);
    IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v8, v6);
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, v7);
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(v8, (uint64_t)v13);
    LOBYTE(v14) = 0;
    char v15 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v4, &v16, 0, (uint64_t)&v14, 1);
    if (v15)
    {
      uint64_t v10 = v14;
      uint64_t v14 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    uint64_t result = v16;
    uint64_t v16 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v11, v12);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          uint64_t v23 = (uint64_t *)(v14 + 16 * v21);
          uint64_t v24 = v23[1];
          v23[1] = 0;
          if (v24) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v24 + 8), v8);
          }
          uint64_t *v23 = *v10;
          uint64_t v25 = v4 + 16 * v9;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          uint64_t v13 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (!v13) {
            goto LABEL_19;
          }
LABEL_18:
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v13 + 8), v8);
          goto LABEL_19;
        }
        uint64_t v12 = v4 + 16 * v9;
        uint64_t v13 = *(void *)(v12 + 8);
        *(void *)(v12 + 8) = 0;
        if (v13) {
          goto LABEL_18;
        }
      }
LABEL_19:
      if (++v9 == v5) {
        goto LABEL_22;
      }
    }
  }
  if (v4)
  {
LABEL_22:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::ResourceRequest const&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::ResourceRequest const&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain> const&>,0ul,1ul,2ul,3ul,4ul,5ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, *(WebCore::ResourceRequest **)(a2 + 24));
  IPC::ArgumentCoder<WebKit::ShouldGrandfatherStatistics,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 32));
  uint64_t v4 = *(char **)(a2 + 40);

  return IPC::ArgumentCoder<std::optional<WebKit::NavigatingToAppBoundDomain>,void>::encode<IPC::Encoder,std::optional<WebKit::NavigatingToAppBoundDomain> const&>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetQuota,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4EB0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetQuota,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4EB0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetQuota,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetStoragePersistedState,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4ED8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetStoragePersistedState,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4ED8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetStoragePersistedState,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasAppBoundSession,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4F00;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasAppBoundSession,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4F00;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasAppBoundSession,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearAppBoundSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4F28;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearAppBoundSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4F28;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearAppBoundSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::getAppBoundDomains(PAL::SessionID,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4F50;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::getAppBoundDomains(PAL::SessionID,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4F50;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::getAppBoundDomains(PAL::SessionID,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&>::call(uint64_t a1, uint64_t *a2)
{
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)&v6, a2);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl ***))(*(void *)v3 + 16))(v3, &v6);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  uint64_t result = v6;
  if (v6) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::UpdateBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4F78;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::UpdateBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4F78;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::UpdateBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4FA0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4FA0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4FC8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4FC8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebKit::WebPushMessage>>>(a2, v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8) {
        return std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::PushClientConnection::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::PushClientConnection::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)>>(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E4FF0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E4FF0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8) {
        return WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::NetworkProcess::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkProcess::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v6);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkProcess::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t *a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ProcessPushMessage,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>(WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1)#1},void,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E5018;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ProcessPushMessage,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>(WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1)#1},void,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E5018;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ProcessPushMessage,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>(WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1)#1},void,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>::call(uint64_t a1, void *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<BOOL,std::optional<WebCore::NotificationPayload>>>(a2, v8);
    if (v10)
    {
      uint64_t v3 = v8[0];
      uint64_t v4 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v4 + 16))(v4, v3, v9);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
      if (v10) {
        return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v9, v6);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::NetworkProcess::ProcessPushMessage,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>(v2);
    }
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkProcess::ProcessPushMessage,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>(v7);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkProcess::ProcessPushMessage,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>(uint64_t *a1)
{
  v4[0] = 0;
  v4[136] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void, unsigned char *))(*(void *)v1 + 16))(v1, 0, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, v2);
}

uint64_t IPC::Decoder::decode<std::tuple<BOOL,std::optional<WebCore::NotificationPayload>>>@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<BOOL,std::optional<WebCore::NotificationPayload>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[152])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL,std::optional<WebCore::NotificationPayload>>,void>::decode<IPC::Decoder>@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  unint64_t v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v13 = a1;
      unint64_t v16 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
        a1 = v13;
        a2 = v16;
        uint64_t v9 = *v13;
        unint64_t v8 = v13[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v5 = (unsigned __int8 *)(v3 + v4);
  a1[2] = v5 + 1;
  if (!v3)
  {
    unint64_t v8 = v2;
    uint64_t v9 = 0;
LABEL_7:
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      uint64_t v12 = a1;
      int v15 = a2;
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v9, v8);
        a1 = v12;
        a2 = v15;
        uint64_t v3 = *v12;
        unint64_t v2 = v12[1];
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v6 = *v5;
  if (v6 < 2)
  {
    __int16 v17 = (v6 != 0) | 0x100;
    return IPC::ArgumentCoder<std::tuple<BOOL,std::optional<WebCore::NotificationPayload>>,void>::decode<IPC::Decoder,BOOL>(a1, &v17, a2);
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v2)
    {
      uint64_t v14 = a2;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v3);
      a2 = v14;
    }
  }
  *a2 = 0;
  a2[152] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL,std::optional<WebCore::NotificationPayload>>,void>::decode<IPC::Decoder,BOOL>@<X0>(void *a1@<X0>, unsigned char *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WebCore::NotificationPayload>>(a1, v7);
  if (v8)
  {
    if (a2[1])
    {
      *a3 = *a2;
      uint64_t result = std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)(a3 + 8), (uint64_t)v7);
      a3[152] = 1;
      if (v8) {
        return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v6);
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *a3 = 0;
    a3[152] = 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::NotificationPayload>>@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::NotificationPayload>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[144])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::NotificationPayload>,void>::decode<IPC::Decoder>@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      unint64_t v16 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        a1 = v16;
        uint64_t v12 = *v16;
        unint64_t v11 = v16[1];
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v11 = v3;
    uint64_t v12 = 0;
LABEL_13:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14)
    {
      int v15 = a1;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        a1 = v15;
        uint64_t v4 = *v15;
        unint64_t v3 = v15[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_14;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebCore::NotificationPayload>((IPC::Decoder *)a1, v17);
      char v9 = v18;
      if (!v18)
      {
        *a2 = 0;
        goto LABEL_10;
      }
      std::__optional_destruct_base<WebCore::NotificationPayload,false>::__optional_destruct_base[abi:sn180100]<WebCore::NotificationPayload>((uint64_t)a2, (uint64_t)v17);
    }
    else
    {
      v17[0] = 0;
      char v18 = 0;
      std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)a2, (uint64_t)v17);
    }
    char v9 = 1;
LABEL_10:
    a2[144] = v9;
    return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v8);
  }
LABEL_14:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v3) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v4);
    }
  }
  *a2 = 0;
  a2[144] = 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::NotificationPayload>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::NotificationPayload,void>::decode(a1, a2);
  if (!a2[136])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unsigned int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::NotificationPayload,false>::__optional_destruct_base[abi:sn180100]<WebCore::NotificationPayload>(uint64_t a1, uint64_t a2)
{
  WTF::URL::URL(a1, (uint64_t *)a2);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a2 + ++*(_DWORD *)(this + 40) = 0;
  *(void *)(v5 + ++*(_DWORD *)(this + 40) = v4;
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + 48);
  std::__optional_copy_assign_base<WebCore::NotificationOptionsPayload,false>::__optional_copy_assign_base[abi:sn180100](v5 + 64, a2 + 64);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = 1;
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ProcessNotificationEvent,WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E5040;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ProcessNotificationEvent,WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E5040;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ProcessNotificationEvent,WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  char v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E5068;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E5068;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()(unsigned int)>>(WTF::CompletionHandler<void ()(unsigned int)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E5090;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()(unsigned int)>>(WTF::CompletionHandler<void ()(unsigned int)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E5090;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()(unsigned int)>>(WTF::CompletionHandler<void ()(unsigned int)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2 && (uint64_t v3 = IPC::Decoder::decode<std::tuple<float>>(a2), (v3 & 0xFF00000000) != 0))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v3);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasPushSubscriptionForTesting,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E50B8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasPushSubscriptionForTesting,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E50B8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasPushSubscriptionForTesting,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  char v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

unint64_t IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,PAL::SessionID const&,WebCore::RegistrableDomain const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,PAL::SessionID const&,WebCore::RegistrableDomain const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<JSC::MessageSource,void>::encode<IPC::Encoder>(a1, *(unsigned char *)a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 16));
  unsigned __int16 v4 = *(uint64_t **)(a2 + 24);

  return IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> &&)>,void,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E50E0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> &&)>,void,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E50E0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> &&)>,void,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 16))(v3, v5);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E5108;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E5108;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = a1[2];
    int v7 = 134218240;
    uint64_t v8 = v3;
    __int16 v9 = 2048;
    uint64_t v10 = v4;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin - webPageProxyID=%llu - END", (uint8_t *)&v7, 0x16u);
  }
  uint64_t v5 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::DeleteWebsiteDataForOrigin,WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(void)> &&)::$_1>(WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E5130;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::DeleteWebsiteDataForOrigin,WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(void)> &&)::$_1>(WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E5130;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin(WebCore::ClientOrigin const&,PAL::SessionID,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E5158;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin(WebCore::ClientOrigin const&,PAL::SessionID,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E5158;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin(WebCore::ClientOrigin const&,PAL::SessionID,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    int v6 = 134217984;
    uint64_t v7 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::reloadExecutionContextsForOrigin END", (uint8_t *)&v6, 0xCu);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::ReloadExecutionContextsForOrigin,WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin(WebCore::ClientOrigin const&,PAL::SessionID,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::CompletionHandler<void ()(void)> &&)::$_1>(WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin(WebCore::ClientOrigin const&,PAL::SessionID,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E5180;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::ReloadExecutionContextsForOrigin,WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin(WebCore::ClientOrigin const&,PAL::SessionID,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::CompletionHandler<void ()(void)> &&)::$_1>(WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin(WebCore::ClientOrigin const&,PAL::SessionID,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E5180;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

unsigned int **WTF::WeakHashMap<WebKit::WebProcessProxy,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(unsigned int **result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *result;
  if (*result)
  {
    int v4 = *(v3 - 1);
    if (!v4) {
      goto LABEL_21;
    }
    int v5 = 0;
    unsigned int v6 = v4 - 1;
    do
    {
      uint64_t v7 = v6;
      uint64_t result = (unsigned int **)&v3[6 * v6];
      if ((unint64_t)*result + 1 >= 2 && !*((void *)*result + 1))
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(result, a2);
        uint64_t result = *(unsigned int ***)&v3[6 * v6 + 4];
        if (result) {
          uint64_t result = (unsigned int **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, (WTF::StringImpl *)a2);
        }
        ++v5;
      }
      --v6;
    }
    while (v7);
    uint64_t v3 = *v2;
    if (v5)
    {
      *(v3 - 4) += v5;
      uint64_t v8 = *v2;
      if (*v2) {
        int v9 = *(v8 - 3);
      }
      else {
        int v9 = 0;
      }
      *(v8 - 3) = v9 - v5;
      uint64_t v3 = *v2;
    }
    if (v3)
    {
      unsigned int v10 = *(v3 - 1);
      uint64_t v11 = *(v3 - 3);
      if (v10 >= 9 && 6 * (int)v11 < v10)
      {
        unsigned int v15 = (v11 - 1) | ((v11 - 1) >> 1) | (((v11 - 1) | ((v11 - 1) >> 1)) >> 2);
        unsigned int v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
        unint64_t v17 = (v16 | HIWORD(v16)) + 1;
        if (v17 > 0x400)
        {
          if (v17 > 2 * v11) {
            goto LABEL_32;
          }
        }
        else if (3 * v17 > 4 * v11)
        {
LABEL_30:
          double v18 = (double)v11;
          double v19 = (double)v17;
          double v20 = 0.604166667;
          goto LABEL_33;
        }
        LODWORD(v17) = 2 * v17;
        if (v17 <= 0x400) {
          goto LABEL_30;
        }
LABEL_32:
        double v18 = (double)v11;
        double v19 = (double)v17;
        double v20 = 0.416666667;
LABEL_33:
        if (v19 * v20 <= v18) {
          LODWORD(v17) = 2 * v17;
        }
        if (v17 <= 8) {
          unsigned int v21 = 8;
        }
        else {
          unsigned int v21 = v17;
        }
        uint64_t result = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v2, v21, 0);
        uint64_t v3 = *v2;
        *((_DWORD *)v2 + 2) = 0;
        if (!v3)
        {
          unsigned int v13 = 0;
          goto LABEL_25;
        }
LABEL_22:
        unsigned int v13 = *(v3 - 3);
        int v14 = 0x7FFFFFFF;
        if (v13 >= 0x7FFFFFFF) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
LABEL_21:
      *((_DWORD *)v2 + 2) = 0;
      goto LABEL_22;
    }
  }
  unsigned int v13 = 0;
  *((_DWORD *)v2 + 2) = 0;
LABEL_25:
  int v14 = v13;
LABEL_26:
  *((_DWORD *)v2 + 3) = 2 * v14;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    uint64_t v9 = a2;
    unsigned int v10 = (void *)(v7 + 32);
    do
    {
      *(v10 - 2) = 0;
      *((unsigned char *)v10 - 8) = 0;
      void *v10 = 0;
      v10 += 3;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    do
    {
      int v14 = (unsigned int **)(v4 + 24 * v11);
      unsigned int v15 = *v14;
      if (*v14 != (unsigned int *)-1)
      {
        if (v15)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            unsigned int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            unsigned int v17 = 0;
          }
          int v18 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash((void *)(v4 + 24 * v11));
          int v19 = 0;
          do
          {
            unsigned int v20 = v18 & v17;
            unsigned int v21 = (unsigned int **)(v16 + 24 * (v18 & v17));
            int v18 = ++v19 + (v18 & v17);
          }
          while (*v21);
          uint64_t v22 = v16 + 24 * v20;
          uint64_t v25 = *(WTF::StringImpl ***)(v22 + 16);
          uint64_t v24 = (void *)(v22 + 16);
          uint64_t v23 = v25;
          if (v25)
          {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v23, v8);
            char v31 = *v21;
            *unsigned int v21 = 0;
            if (v31 && atomic_fetch_add((atomic_uint *volatile)v31, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v31);
              WTF::fastFree((WTF *)v31, v8);
            }
          }
          else
          {
            *unsigned int v21 = 0;
          }
          uint64_t v26 = *v14;
          *int v14 = 0;
          *unsigned int v21 = v26;
          uint64_t v27 = v4 + 24 * v11;
          *(unsigned char *)(v16 + 24 * v20 + 8) = *(unsigned char *)(v27 + 8);
          void *v24 = 0;
          uint64_t v28 = *(void *)(v27 + 16);
          *(void *)(v27 + ++*(_DWORD *)(this + 16) = 0;
          void *v24 = v28;
          unint64_t v29 = *(WTF::StringImpl ***)(v27 + 16);
          if (v29) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v29, v8);
          }
          char v30 = *v14;
          *int v14 = 0;
          if (v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v30);
            WTF::fastFree((WTF *)v30, v8);
          }
          if (v14 == a3) {
            uint64_t v12 = v16 + 24 * v20;
          }
        }
        else
        {
          if (*(void *)(v4 + 24 * v11 + 16))
          {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)(v4 + 24 * v11 + 16), v8);
            unsigned int v15 = *v14;
          }
          *int v14 = 0;
          if (v15)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v15);
              WTF::fastFree((WTF *)v15, v8);
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AddAllowedFirstPartyForCookies,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E51A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AddAllowedFirstPartyForCookies,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E51A8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AddAllowedFirstPartyForCookies,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::derefAllowingPartiallyDestroyed(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, result);
    uint64_t v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v2 = &unk_1EE9E51D0;
    *((void *)v2 + 1) = v1;
    uint64_t v3 = v2;
    WTF::ensureOnMainRunLoop();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::derefAllowingPartiallyDestroyed(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) - 16) + 8))();
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, *(WebCore::ResourceRequest **)(a2 + 8));
  int v4 = *(WebCore::ResourceResponseBase **)(a2 + 16);

  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, v4);
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceResponse const&,WebKit::CacheStoragePolicy>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceResponse const&,WebKit::CacheStoragePolicy>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, *(WebCore::ResourceResponseBase **)(a2 + 8));
  char v4 = *(unsigned char *)(a2 + 16);

  return IPC::ArgumentCoder<WebKit::ShouldGrandfatherStatistics,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,PAL::SessionID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = v5;
  uint64_t result = WTF::fastMalloc((WTF *)((32 * v5) | 0x10));
  if (v5)
  {
    uint64_t v9 = (void *)(result + 16);
    do
    {
      void *v9 = 0;
      v9[1] = 0;
      void v9[2] = 0;
      v9 += 4;
      --v6;
    }
    while (v6);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v3;
    do
    {
      uint64_t v12 = (_OWORD *)(v2 + 32 * v10);
      if (*v12 >= 2uLL)
      {
        uint64_t v13 = *a1;
        if (*a1) {
          unsigned int v14 = *(_DWORD *)(v13 - 8);
        }
        else {
          unsigned int v14 = 0;
        }
        int v20 = -1640531527;
        __int16 v21 = 0;
        char v22 = 0;
        WTF::addArgs<WTF::UUID>(&v20, (void *)(v2 + 32 * v10));
        int v15 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v20);
        int v16 = 0;
        do
        {
          uint64_t v17 = v15 & v14;
          int v18 = (_OWORD *)(v13 + 32 * v17);
          int v15 = ++v16 + v17;
        }
        while (*v18 != 0);
        long long v19 = v12[1];
        _OWORD *v18 = *v12;
        v18[1] = v19;
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v8);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID const&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    unsigned int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    unsigned int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  unint64_t v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  uint64_t v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~(v14 << 27)));
  uint64_t v16 = v8 + 32 * v15;
  uint64_t v17 = *(void *)v16;
  if (*(void *)v16)
  {
    int v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = *(unsigned int *)(v8 - 4);
        }
        *(void *)a4 = v16;
        *(void *)(a4 + 8) = v8 + 32 * v23;
        *(unsigned char *)(a4 + ++*(_DWORD *)(this + 16) = 0;
        *(_OWORD *)(v16 + ++*(_DWORD *)(this + 16) = *(_OWORD *)a3;
        return result;
      }
      if (v17 == -1) {
        int v18 = (void *)v16;
      }
      uint64_t v15 = (v15 + v19) & v10;
      uint64_t v16 = v8 + 32 * v15;
      uint64_t v17 = *(void *)v16;
      ++v19;
    }
    while (*(void *)v16);
    if (v18)
    {
      void *v18 = 0;
      void v18[2] = 0;
      v18[3] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = (uint64_t)v18;
    }
  }
  *(void *)uint64_t v16 = v11;
  uint64_t v20 = *(void *)(a3 + 8);
  *(void *)(v16 + ++*(_DWORD *)(this + 16) = *(void *)a3;
  *(void *)(v16 + 24) = v20;
  uint64_t v21 = *v6;
  if (*v6) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v24 = *v6;
  if (*v6) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_22:
      uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
      uint64_t v16 = (uint64_t)result;
      uint64_t v24 = *v6;
      if (*v6) {
        unint64_t v27 = *(unsigned int *)(v24 - 4);
      }
      else {
        unint64_t v27 = 0;
      }
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_22;
  }
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v24 + 32 * v27;
  *(unsigned char *)(a4 + ++*(_DWORD *)(this + 16) = 1;
  return result;
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t Table = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v7 = v7;
    uint64_t v12 = v6;
    do
    {
      if ((unint64_t)(*(void *)v12 + 1) >= 2)
      {
        unint64_t v13 = (_OWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookupForReinsert(a1, (void *)v12);
        long long v14 = *(_OWORD *)(v12 + 16);
        _OWORD *v13 = *(_OWORD *)v12;
        v13[1] = v14;
        if (v12 == a3) {
          uint64_t v11 = v13;
        }
      }
      v12 += 32;
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::allocateTable(unsigned int a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = WTF::fastMalloc((WTF *)((32 * a1) | 0x10));
  uint64_t result = v3 + 16;
  if (a1)
  {
    unsigned int v5 = (void *)(v3 + 32);
    do
    {
      *(v5 - 2) = 0;
      *unsigned int v5 = 0;
      v5[1] = 0;
      v5 += 4;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookupForReinsert(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  unint64_t v4 = *a2 + ~(*a2 << 32);
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  unsigned int v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = *(void *)(v2 + 32 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 32 * v9;
}

void WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::inlineSet<WTF::UUID const&,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>&>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    unsigned int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  int v29 = -1640531527;
  __int16 v30 = 0;
  char v31 = 0;
  WTF::addArgs<WTF::UUID>(&v29, a2);
  uint64_t v10 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29) & v9;
  uint64_t v11 = (void *)(v8 + 32 * v10);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  if (*(_OWORD *)v11 == 0)
  {
LABEL_15:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
    uint64_t v17 = *a3;
    CFRetain(*(CFTypeRef *)(v17 + 8));
    uint64_t v18 = v11[2];
    void v11[2] = v17;
    if (v18) {
      CFRelease(*(CFTypeRef *)(v18 + 8));
    }
    uint64_t v19 = *a1;
    if (*a1) {
      int v20 = *(_DWORD *)(v19 - 12) + 1;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(v19 - 12) = v20;
    uint64_t v23 = *a1;
    if (*a1) {
      int v24 = *(_DWORD *)(v23 - 12);
    }
    else {
      int v24 = 0;
    }
    uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
    unint64_t v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
      {
LABEL_27:
        uint64_t v11 = (void *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a1, (uint64_t)v11);
        uint64_t v23 = *a1;
        if (*a1) {
          unint64_t v26 = *(unsigned int *)(v23 - 4);
        }
        else {
          unint64_t v26 = 0;
        }
      }
    }
    else if (3 * v26 <= 4 * v25)
    {
      goto LABEL_27;
    }
    *(void *)a4 = v11;
    *(void *)(a4 + 8) = v23 + 32 * v26;
    *(unsigned char *)(a4 + ++*(_DWORD *)(this + 16) = 1;
    return;
  }
  long long v14 = 0;
  int v15 = 1;
  while (v12 != a2[1] || v13 != *a2)
  {
    if (!(v13 ^ 1 | v12)) {
      long long v14 = v11;
    }
    uint64_t v10 = (v10 + v15) & v9;
    uint64_t v11 = (void *)(v8 + 32 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    ++v15;
    if (*(_OWORD *)v11 == 0)
    {
      if (v14)
      {
        *long long v14 = 0;
        v14[1] = 0;
        v14[2] = 0;
        --*(_DWORD *)(*a1 - 16);
        uint64_t v11 = v14;
      }
      goto LABEL_15;
    }
  }
  uint64_t v21 = *a1;
  if (*a1) {
    uint64_t v22 = *(unsigned int *)(v21 - 4);
  }
  else {
    uint64_t v22 = 0;
  }
  *(void *)a4 = v11;
  *(void *)(a4 + 8) = v21 + 32 * v22;
  *(unsigned char *)(a4 + ++*(_DWORD *)(this + 16) = 0;
  uint64_t v27 = *a3;
  CFRetain(*(CFTypeRef *)(*a3 + 8));
  uint64_t v28 = v11[2];
  void v11[2] = v27;
  if (v28) {
    CFRelease(*(CFTypeRef *)(v28 + 8));
  }
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = a2;
  uint64_t v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    uint64_t v12 = (void *)(v10 + 16);
    do
    {
      *uint64_t v12 = 0;
      v12[1] = 0;
      void v12[2] = 0;
      v12 += 4;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v6 + 32 * v13;
      if (*(void *)v15 ^ 1 | *(void *)(v15 + 8))
      {
        if (*(_OWORD *)v15 == 0)
        {
          uint64_t v16 = v6 + 32 * v13;
          uint64_t v17 = *(void *)(v16 + 16);
          *(void *)(v16 + ++*(_DWORD *)(this + 16) = 0;
          if (v17) {
            CFRelease(*(CFTypeRef *)(v17 + 8));
          }
        }
        else
        {
          uint64_t v18 = *a1;
          if (*a1) {
            unsigned int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            unsigned int v19 = 0;
          }
          int v29 = -1640531527;
          __int16 v30 = 0;
          char v31 = 0;
          WTF::addArgs<WTF::UUID>(&v29, (void *)(v6 + 32 * v13));
          int v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
          int v21 = 0;
          do
          {
            uint64_t v22 = v20 & v19;
            uint64_t v23 = v18 + 32 * v22;
            int v20 = ++v21 + v22;
          }
          while (*(_OWORD *)v23 != 0);
          uint64_t v24 = *(void *)(v23 + 16);
          *(void *)(v23 + ++*(_DWORD *)(this + 16) = 0;
          if (v24) {
            CFRelease(*(CFTypeRef *)(v24 + 8));
          }
          *(_OWORD *)uint64_t v23 = *(_OWORD *)v15;
          uint64_t v25 = v6 + 32 * v13;
          uint64_t v26 = *(void *)(v25 + 16);
          *(void *)(v25 + ++*(_DWORD *)(this + 16) = 0;
          *(void *)(v23 + ++*(_DWORD *)(this + 16) = v26;
          uint64_t v27 = *(void *)(v25 + 16);
          *(void *)(v25 + ++*(_DWORD *)(this + 16) = 0;
          if (v27) {
            CFRelease(*(CFTypeRef *)(v27 + 8));
          }
          if (v15 == a3) {
            uint64_t v14 = v23;
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v11);
  return v14;
}

uint64_t WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v2 - 8);
    int v17 = -1640531527;
    __int16 v18 = 0;
    char v19 = 0;
    WTF::addArgs<WTF::UUID>(&v17, a2);
    int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v17);
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    uint64_t v8 = v5 & v4;
    uint64_t v9 = (uint64_t *)(v2 + 32 * v8);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    if (v11 == v7 && v10 == v6) {
      return *(void *)(v2 + 32 * v8 + 16);
    }
    int v13 = 1;
    while (v10 | v11)
    {
      uint64_t v8 = (v8 + v13) & v4;
      uint64_t v14 = (uint64_t *)(v2 + 32 * v8);
      uint64_t v10 = *v14;
      uint64_t v11 = v14[1];
      BOOL v15 = v11 == v7 && v10 == v6;
      ++v13;
      if (v15) {
        return *(void *)(v2 + 32 * v8 + 16);
      }
    }
  }
  return 0;
}

void WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::take(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1) {
    unsigned int v4 = (void *)(v3 + 32 * *(unsigned int *)(v3 - 4));
  }
  else {
    unsigned int v4 = 0;
  }
  if (v4 == a2)
  {
    *a3 = 0;
    return;
  }
  uint64_t v5 = a2[2];
  if (v5)
  {
    a2[2] = 0;
    uint64_t v3 = *a1;
  }
  *a3 = v5;
  if (v3)
  {
    uint64_t v6 = (void *)(v3 + 32 * *(unsigned int *)(v3 - 4));
    if (v6 == a2) {
      return;
    }
  }
  else
  {
    if (!a2) {
      return;
    }
    uint64_t v6 = 0;
  }
  if (v6 != a2) {
    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(a1, a2);
  }
}

void WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(uint64_t *a1, void *a2)
{
  uint64_t v3 = a2[2];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 1;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v8 >> 1, 0);
    }
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = *a2 + ~(*a2 << 32);
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  uint64_t v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  uint64_t v8 = *(void *)(v2 + 32 * v7);
  if (v8 == *a2) {
    return v2 + 32 * v7;
  }
  int v9 = 1;
  while (v8)
  {
    uint64_t v7 = (v7 + v9) & v3;
    uint64_t v8 = *(void *)(v2 + 32 * v7);
    ++v9;
    if (v8 == *a2) {
      return v2 + 32 * v7;
    }
  }
  return v2 + 32 * *(unsigned int *)(v2 - 4);
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebNotificationManager::DidUpdateNotificationDecision>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v4 = 1864;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v12 = v4;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,BOOL>,0ul,1ul>(v4, a2);
  LOBYTE(v10) = 0;
  char v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebNotificationManager::DidRemoveNotificationDecisions>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v4 = 1862;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v12 = v4;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v4, *a2);
  LOBYTE(v10) = 0;
  char v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::RemoteScrollingCoordinator::CurrentSnapPointIndicesChangedForNode>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1364;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  __int16 v18 = v8;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  __int16 v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, *(void *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);

  return IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteScrollingCoordinatorProxy::receivedLastScrollingTreeNodeDidScrollReply(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  unsigned int v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E5220;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteScrollingCoordinatorProxy::receivedLastScrollingTreeNodeDidScrollReply(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E5220;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::RemoteScrollingCoordinatorProxy::receivedLastScrollingTreeNodeDidScrollReply(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(WebKit::RemoteScrollingCoordinatorProxy **)(v1 + 8);
    if (v2) {
      WebKit::RemoteScrollingCoordinatorProxy::sendScrollingTreeNodeDidScroll(v2);
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::RemoteScrollingCoordinator::AnimatedScrollDidEndForNode>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1363;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  __int16 v18 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  __int16 v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::RemoteScrollingCoordinator::ScrollingStateInUIProcessChanged>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1367;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  __int16 v18 = v8;
  IPC::ArgumentCoder<WebKit::RemoteScrollingUIState,void>::encode(v8, *a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  __int16 v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::RemoteScrollingCoordinator::ReceivedWheelEventWithPhases>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1365;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  __int16 v18 = v8;
  IPC::ArgumentCoder<WebKit::ShouldGrandfatherStatistics,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WebKit::ShouldGrandfatherStatistics,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  __int16 v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::RemoteScrollingCoordinator::StartDeferringScrollingTestCompletionForNode>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1370;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  __int16 v18 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v8, **(_WORD **)(a2 + 8));
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  __int16 v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::RemoteScrollingCoordinator::StopDeferringScrollingTestCompletionForNode>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1371;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  __int16 v18 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v8, **(_WORD **)(a2 + 8));
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  __int16 v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void WebKit::RemoteScrollingTree::~RemoteScrollingTree(WebKit::RemoteScrollingTree *this, void *a2)
{
  *(void *)this = &unk_1EE9E52C8;
  unsigned int v3 = (unsigned int *)*((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  MEMORY[0x1F416D5D8](this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteScrollingTree::~RemoteScrollingTree(this, a2);

  WTF::fastFree(v2, v3);
}

unsigned int *WebKit::RemoteScrollingTree::invalidate(atomic_uchar *this)
{
  char v2 = 0;
  unsigned int v3 = this + 12;
  atomic_compare_exchange_strong_explicit(this + 12, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 12);
  }
  WebCore::ScrollingTree::removeAllNodes((WebCore::ScrollingTree *)this);
  uint64_t result = (unsigned int *)*((void *)this + 43);
  *((void *)this + 43) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v4);
  }
  int v6 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1)
  {
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WebKit::RemoteScrollingTree::scrollingTreeNodeDidStopAnimatedScroll(uint64_t this, WebCore::ScrollingTreeScrollingNode *a2)
{
  uint64_t v2 = *(void *)(this + 344);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      long long v8 = *((_OWORD *)a2 + 3);
      uint64_t v4 = *(void *)(*(void *)(v3 + 16) + 8);
      if (v4) {
        uint64_t v5 = v4 - 16;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(void *)(v5 + 256);
      uint64_t v7 = &v8;
      return WebKit::AuxiliaryProcessProxy::send<Messages::RemoteScrollingCoordinator::AnimatedScrollDidEndForNode>(v6, (uint64_t **)&v7, *(void *)(*(void *)(v5 + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::RemoteScrollingTree::scrollingTreeNodeRequestsScroll(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 344);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 16))();
  }
  else {
    return 0;
  }
}

uint64_t WebKit::RemoteScrollingTree::scrollingTreeNodeRequestsKeyboardScroll(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 344);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 24))();
  }
  else {
    return 0;
  }
}

void *WebKit::RemoteScrollingTree::scrollingTreeNodeWillStartScroll(void *result)
{
  uint64_t v1 = result[43];
  if (v1)
  {
    uint64_t result = *(void **)(v1 + 8);
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*result + 88))();
    }
  }
  return result;
}

void *WebKit::RemoteScrollingTree::scrollingTreeNodeDidEndScroll(void *result)
{
  uint64_t v1 = result[43];
  if (v1)
  {
    uint64_t result = *(void **)(v1 + 8);
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*result + 96))();
    }
  }
  return result;
}

uint64_t WebKit::RemoteScrollingTree::clearNodesWithUserScrollInProgress(WebKit::RemoteScrollingTree *this)
{
  uint64_t result = WebCore::ScrollingTree::clearNodesWithUserScrollInProgress(this);
  uint64_t v3 = *((void *)this + 43);
  if (v3)
  {
    uint64_t result = *(void *)(v3 + 8);
    if (result)
    {
      uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 104);
      return v4();
    }
  }
  return result;
}

void *WebKit::RemoteScrollingTree::scrollingTreeNodeDidBeginScrollSnapping(void *result)
{
  uint64_t v1 = result[43];
  if (v1)
  {
    uint64_t result = *(void **)(v1 + 8);
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*result + 136))();
    }
  }
  return result;
}

void *WebKit::RemoteScrollingTree::scrollingTreeNodeDidEndScrollSnapping(void *result)
{
  uint64_t v1 = result[43];
  if (v1)
  {
    uint64_t result = *(void **)(v1 + 8);
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*result + 144))();
    }
  }
  return result;
}

uint64_t WebKit::RemoteScrollingTree::createScrollingTreeNode(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  switch(a2)
  {
    case 2:
      uint64_t result = MEMORY[0x1F4171D20](a1, a3, a4);
      break;
    case 4:
      uint64_t result = MEMORY[0x1F4171E50](a1, a3, a4);
      break;
    case 6:
      uint64_t result = MEMORY[0x1F4172400](a1, a3, a4);
      break;
    case 8:
      uint64_t result = MEMORY[0x1F4171B08](a1, a3, a4);
      break;
    case 9:
      uint64_t result = MEMORY[0x1F41720F0](a1, a3, a4);
      break;
    default:
      uint64_t result = MEMORY[0x1F41719F0](a1, a3, a4);
      break;
  }
  return result;
}

uint64_t WebKit::RemoteScrollingTree::currentSnapPointIndicesDidChange(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 344);
  if (v5)
  {
    uint64_t result = *(void *)(v5 + 8);
    if (result) {
      return WebKit::RemoteScrollingCoordinatorProxy::currentSnapPointIndicesDidChange(result, a2, a3, a4, a5);
    }
  }
  return result;
}

long long *WebKit::RemoteScrollingTree::reportSynchronousScrollingReasonsChanged(long long *result, unsigned __int8 a2, double a3)
{
  uint64_t v3 = *((void *)result + 43);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(*(void *)(v4 + 16) + 8);
      if (v5) {
        uint64_t v6 = v5 - 16;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t result = *(long long **)(v6 + 984);
      if (result) {
        return WebKit::RemoteLayerTreeScrollingPerformanceData::appendSynchronousScrollingChange((uint64_t)result, a2, a3);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteScrollingTree::receivedWheelEventWithPhases(uint64_t result, char a2, char a3)
{
  uint64_t v3 = *(void *)(result + 344);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(*(void *)(v4 + 16) + 8);
      if (v5) {
        uint64_t v6 = v5 - 16;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(void *)(v6 + 256);
      v8[0] = a2;
      v8[1] = a3;
      return WebKit::AuxiliaryProcessProxy::send<Messages::RemoteScrollingCoordinator::ReceivedWheelEventWithPhases>(v7, v8, *(void *)(*(void *)(v6 + 32) + 1928), 0);
    }
  }
  return result;
}

uint64_t WebKit::RemoteScrollingTree::deferWheelEventTestCompletionForReason(uint64_t result, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v4 = *(void *)(result + 344);
  if (v4)
  {
    uint64_t v5 = result;
    uint64_t result = *(void *)(v4 + 8);
    if (result)
    {
      if (*(unsigned char *)(v5 + 337)) {
        return WebKit::RemoteScrollingCoordinatorProxy::deferWheelEventTestCompletionForReason(result, a2, a3, a4);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteScrollingTree::removeWheelEventTestCompletionDeferralForReason(uint64_t result, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v4 = *(void *)(result + 344);
  if (v4)
  {
    uint64_t v5 = result;
    uint64_t result = *(void *)(v4 + 8);
    if (result)
    {
      if (*(unsigned char *)(v5 + 337)) {
        return WebKit::RemoteScrollingCoordinatorProxy::removeWheelEventTestCompletionDeferralForReason(result, a2, a3, a4);
      }
    }
  }
  return result;
}

void WebKit::RemoteScrollingTreeIOS::~RemoteScrollingTreeIOS(WebKit::RemoteScrollingTreeIOS *this, void *a2)
{
  WebKit::RemoteScrollingTree::~RemoteScrollingTree(this, a2);

  WTF::fastFree(v2, v3);
}

void *WebKit::RemoteScrollingTreeIOS::scrollingTreeNodeWillStartPanGesture(void *result)
{
  uint64_t v1 = result[43];
  if (v1)
  {
    uint64_t result = *(void **)(v1 + 8);
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*result + 80))();
    }
  }
  return result;
}

uint64_t WebKit::WebScriptMessageHandler::create@<X0>(uint64_t *a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = WTF::fastMalloc((WTF *)0x30);
  uint64_t v9 = *a1;
  *a1 = 0;
  uint64_t v12 = v9;
  *a4 = WebKit::WebScriptMessageHandler::WebScriptMessageHandler(v8, &v12, a2, a3);
  uint64_t result = v12;
  if (v12)
  {
    uint64_t v11 = *(uint64_t (**)(void))(*(void *)v12 + 8);
    return v11();
  }
  return result;
}

uint64_t WebKit::WebScriptMessageHandler::WebScriptMessageHandler(uint64_t a1, uint64_t *a2, _DWORD **a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)a1 = &unk_1EE9E55E8;
  uint64_t v8 = *a2;
  *a2 = 0;
  *(void *)(a1 + 24) = v8;
  uint64_t v9 = *a3;
  if (*a3) {
    *v9 += 2;
  }
  *(void *)(a1 + 32) = v9;
  CFRetain(*(CFTypeRef *)(a4 + 8));
  *(void *)(a1 + ++*(_DWORD *)(this + 40) = a4;
  return a1;
}

void WebKit::WebScriptMessageHandler::~WebScriptMessageHandler(WebKit::WebScriptMessageHandler *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9E55E8;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebScriptMessageHandler::~WebScriptMessageHandler(this, a2);

  WTF::fastFree(v2, v3);
}

void WebKit::WebUserContentControllerProxy::~WebUserContentControllerProxy(WebKit::WebUserContentControllerProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9E5608;
  *((void *)this + 2) = &unk_1EE9E5638;
  uint64_t v3 = *((void *)this + 10);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = (uint64_t *)(v3 + 8 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      uint64_t v6 = (uint64_t *)*((void *)this + 10);
      if (v4)
      {
        uint64_t v7 = 8 * v4;
        uint64_t v6 = (uint64_t *)*((void *)this + 10);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          ++v6;
          v7 -= 8;
          if (!v7)
          {
            uint64_t v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    uint64_t v6 = (uint64_t *)(v3 + 8 * v4);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v5 = (uint64_t *)(v3 + 8 * v4);
  if (v3)
  {
LABEL_8:
    uint64_t v8 = (uint64_t *)(v3 + 8 * *(unsigned int *)(v3 - 4));
    goto LABEL_13;
  }
  uint64_t v8 = 0;
LABEL_13:
  while (v6 != v8)
  {
    uint64_t v44 = *v6;
    {
      API::sharedWorldIdentifierMap(void)::sharedMap = 0;
    }
    uint64_t v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(&API::sharedWorldIdentifierMap(void)::sharedMap, &v44);
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x198FD223CLL);
    }
    WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>(v9 + 40, this);
    uint64_t v10 = v6 + 1;
    uint64_t v6 = v5;
    if (v10 != v5)
    {
      uint64_t v6 = v10;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        if (++v6 == v5)
        {
          uint64_t v6 = v5;
          break;
        }
      }
    }
  }
  {
    if (WebKit::webUserContentControllerProxies(void)::proxies)
    {
      uint64_t v11 = *((void *)this + 4);
      unsigned int v12 = *(_DWORD *)(WebKit::webUserContentControllerProxies(void)::proxies - 8);
      unint64_t v13 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
      unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      uint64_t v16 = v12 & ((v15 >> 31) ^ v15);
      uint64_t v17 = *(void *)(WebKit::webUserContentControllerProxies(void)::proxies + 16 * v16);
      if (v17 != v11)
      {
        int v18 = 1;
        while (v17)
        {
          uint64_t v16 = (v16 + v18) & v12;
          uint64_t v17 = *(void *)(WebKit::webUserContentControllerProxies(void)::proxies + 16 * v16);
          ++v18;
          if (v17 == v11) {
            goto LABEL_31;
          }
        }
        uint64_t v16 = *(unsigned int *)(WebKit::webUserContentControllerProxies(void)::proxies - 4);
      }
LABEL_31:
      if (v16 != *(_DWORD *)(WebKit::webUserContentControllerProxies(void)::proxies - 4))
      {
        char v19 = (void *)(WebKit::webUserContentControllerProxies(void)::proxies + 16 * v16);
        int v20 = (unsigned int *)v19[1];
        void *v19 = -1;
        v19[1] = 0;
        if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v20);
          WTF::fastFree((WTF *)v20, a2);
        }
        ++*(_DWORD *)(WebKit::webUserContentControllerProxies(void)::proxies - 16);
        if (WebKit::webUserContentControllerProxies(void)::proxies) {
          int v21 = *(_DWORD *)(WebKit::webUserContentControllerProxies(void)::proxies - 12) - 1;
        }
        else {
          int v21 = -1;
        }
        *(_DWORD *)(WebKit::webUserContentControllerProxies(void)::proxies - 12) = v21;
        if (WebKit::webUserContentControllerProxies(void)::proxies)
        {
          unsigned int v22 = *(_DWORD *)(WebKit::webUserContentControllerProxies(void)::proxies - 4);
          if (6 * *(_DWORD *)(WebKit::webUserContentControllerProxies(void)::proxies - 12) < v22 && v22 >= 9) {
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(&WebKit::webUserContentControllerProxies(void)::proxies, v22 >> 1, 0);
          }
        }
      }
    }
  }
  else
  {
    WebKit::webUserContentControllerProxies(void)::proxies = 0;
  }
  uint64_t v24 = (unsigned int ***)((char *)this + 40);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v44);
  uint64_t v25 = *((void *)this + 5);
  if (v25)
  {
    uint64_t v26 = *(unsigned int *)(v25 - 4);
    uint64_t v27 = v25 + 8 * v26;
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v26 = 0;
  }
  double v39 = (char *)this + 40;
  uint64_t v40 = v27;
  uint64_t v41 = v27;
  uint64_t v42 = v27;
  uint64_t v43 = v25 + 8 * v26;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v39);
  while (v45 != v40)
  {
    uint64_t v28 = *(void *)(*(void *)v45 + 8);
    IPC::MessageReceiverMap::removeMessageReceiver(v28 + 152, 0xD3u, *((void *)this + 4));
    WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>(v28 + 640, this);
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v44);
  }
  int v29 = (unsigned int ***)((char *)this + 88);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 11, &v44);
  uint64_t v30 = *((void *)this + 11);
  if (v30)
  {
    uint64_t v31 = *(unsigned int *)(v30 - 4);
    uint64_t v32 = v30 + 8 * v31;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v31 = 0;
  }
  double v39 = (char *)this + 88;
  uint64_t v40 = v32;
  uint64_t v41 = v32;
  uint64_t v42 = v32;
  uint64_t v43 = v30 + 8 * v31;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v39);
  while (v45 != v40)
  {
    WebKit::NetworkProcessProxy::didDestroyWebUserContentControllerProxy(*(WebKit::NetworkProcessProxy **)(*(void *)v45 + 8), this);
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v44);
  }
  uint64_t v34 = *((void *)this + 13);
  if (v34) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v34, v33);
  }
  if (*v29) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v29, v33);
  }
  uint64_t v35 = *((void *)this + 10);
  if (v35) {
    WTF::fastFree((WTF *)(v35 - 16), v33);
  }
  uint64_t v36 = *((void *)this + 9);
  if (v36) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v36, v33);
  }
  uint64_t v37 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v37) {
    CFRelease(*(CFTypeRef *)(v37 + 8));
  }
  uint64_t v38 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v38) {
    CFRelease(*(CFTypeRef *)(v38 + 8));
  }
  if (*v24) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v24, v33);
  }
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v33);
}

{
  uint64_t vars8;

  WebKit::WebUserContentControllerProxy::~WebUserContentControllerProxy(this, a2);

  JUMPOUT(0x199740C10);
}

void non-virtual thunk to'WebKit::WebUserContentControllerProxy::~WebUserContentControllerProxy(WebKit::WebUserContentControllerProxy *this, void *a2)
{
}

{
  uint64_t vars8;

  WebKit::WebUserContentControllerProxy::~WebUserContentControllerProxy((WebKit::WebUserContentControllerProxy *)((char *)this - 16), a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::WebUserContentControllerProxy::addContentWorld(uint64_t this, API::ContentWorld *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 3);
  {
    uint64_t v5 = WebKit::pageContentWorldIdentifier(void)::identifier;
  }
  else
  {
    uint64_t v5 = 1;
    WebKit::pageContentWorldIdentifier(void)::identifier = 1;
  }
  if (v4 == v5) {
    return this;
  }
  uint64_t v7 = (uint64_t *)(this + 80);
  uint64_t v6 = *(void *)(this + 80);
  if (v6
    || (this = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(this + 80)),
        (uint64_t v6 = *v7) != 0))
  {
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unint64_t v9 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  unsigned int v12 = v8 & ((v11 >> 31) ^ v11);
  unint64_t v13 = (void *)(v6 + 8 * v12);
  uint64_t v14 = *v13;
  if (!*v13)
  {
LABEL_15:
    void *v13 = v4;
    uint64_t v17 = *v7;
    if (*v7) {
      int v18 = *(_DWORD *)(v17 - 12) + 1;
    }
    else {
      int v18 = 1;
    }
    *(_DWORD *)(v17 - 12) = v18;
    uint64_t v19 = *v7;
    if (*v7) {
      int v20 = *(_DWORD *)(v19 - 12);
    }
    else {
      int v20 = 0;
    }
    uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
    unint64_t v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 > 2 * v21)
      {
LABEL_24:
        WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)a2 + 40, (unsigned int *)v3, (uint64_t)&v47);
        WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v3 + 40), &v47);
        uint64_t v23 = *(void *)(v3 + 40);
        if (v23)
        {
          uint64_t v24 = *(unsigned int *)(v23 - 4);
          uint64_t v25 = v23 + 8 * v24;
        }
        else
        {
          uint64_t v25 = 0;
          uint64_t v24 = 0;
        }
        uint64_t v42 = v3 + 40;
        uint64_t v43 = v25;
        uint64_t v44 = v25;
        uint64_t v45 = v25;
        uint64_t v46 = v23 + 8 * v24;
        this = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v42);
        for (uint64_t i = v48; v48 != v43; uint64_t i = v48)
        {
          uint64_t v27 = *(void *)(*(void *)i + 8);
          uint64_t v29 = *((void *)a2 + 3);
          uint64_t v28 = (WTF::StringImpl *)*((void *)a2 + 4);
          if (v28) {
            *(_DWORD *)v28 += 2;
          }
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          uint64_t v30 = WTF::fastMalloc((WTF *)0x10);
          LODWORD(v41) = 1;
          uint64_t v40 = v30;
          uint64_t v31 = HIDWORD(v41);
          *(void *)(v30 + 16 * HIDWORD(v4CFRelease(*(this - 1)) = v29;
          if (v28) {
            *(_DWORD *)v28 += 2;
          }
          *(void *)(v30 + 16 * v31 + 8) = v28;
          ++HIDWORD(v41);
          uint64_t v32 = *(void *)(v3 + 32);
          char v33 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)char v33 = 2854;
          *((void *)v33 + 1) = v32;
          *((void *)v33 + 66) = (char *)v33 + 16;
          *((void *)v33 + 67) = 512;
          *((void *)v33 + 68) = 0;
          *((void *)v33 + 70) = 0;
          *((void *)v33 + 69) = 0;
          IPC::Encoder::encodeHeader(v33);
          long long v51 = v33;
          IPC::VectorArgumentCoder<false,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v33, (uint64_t)&v40);
          LOBYTE(v49) = 0;
          char v50 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v27, &v51, 0, (uint64_t)&v49, 1);
          if (v50)
          {
            uint64_t v35 = v49;
            uint64_t v49 = 0;
            if (v35) {
              (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
            }
          }
          uint64_t v36 = v51;
          long long v51 = 0;
          if (v36)
          {
            IPC::Encoder::~Encoder(v36, v34);
            WTF::fastFree(v38, v39);
          }
          WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v34);
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v37);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          this = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v47);
        }
        return this;
      }
    }
    else if (3 * v22 > 4 * v21)
    {
      goto LABEL_24;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(v3 + 80));
    goto LABEL_24;
  }
  unint64_t v15 = 0;
  int v16 = 1;
  while (v14 != v4)
  {
    if (v14 == -1) {
      unint64_t v15 = v13;
    }
    unsigned int v12 = (v12 + v16) & v8;
    unint64_t v13 = (void *)(v6 + 8 * v12);
    uint64_t v14 = *v13;
    ++v16;
    if (!*v13)
    {
      if (v15)
      {
        *unint64_t v15 = 0;
        --*(_DWORD *)(*v7 - 16);
        unint64_t v13 = v15;
      }
      goto LABEL_15;
    }
  }
  return this;
}

void *WebKit::WebUserContentControllerProxy::contentWorldDestroyed(WebKit::WebUserContentControllerProxy *this, API::ContentWorld *a2)
{
  v47[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 10);
  uint64_t v4 = (uint64_t *)((char *)this + 80);
  uint64_t v5 = v6;
  if (v6)
  {
    uint64_t v7 = *((void *)a2 + 3);
    unsigned int v8 = *(_DWORD *)(v5 - 8);
    unint64_t v9 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
    unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    uint64_t v12 = v8 & ((v11 >> 31) ^ v11);
    uint64_t v13 = *(void *)(v5 + 8 * v12);
    if (v13 != v7)
    {
      int v14 = 1;
      while (v13)
      {
        uint64_t v12 = (v12 + v14) & v8;
        uint64_t v13 = *(void *)(v5 + 8 * v12);
        ++v14;
        if (v13 == v7) {
          goto LABEL_8;
        }
      }
      uint64_t v12 = *(unsigned int *)(v5 - 4);
    }
LABEL_8:
    if (v12 != *(_DWORD *)(v5 - 4))
    {
      *(void *)(v5 + 8 * v12) = -1;
      ++*(_DWORD *)(*v4 - 16);
      uint64_t v15 = *v4;
      int v16 = *v4 ? *(_DWORD *)(v15 - 12) - 1 : -1;
      *(_DWORD *)(v15 - 12) = v16;
      uint64_t v17 = *v4;
      if (*v4)
      {
        unsigned int v18 = 6 * *(_DWORD *)(v17 - 12);
        unsigned int v19 = *(_DWORD *)(v17 - 4);
        if (v18 < v19 && v19 >= 9) {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v4, v19 >> 1);
        }
      }
    }
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v42);
  uint64_t v21 = *((void *)this + 5);
  if (v21)
  {
    uint64_t v22 = *(unsigned int *)(v21 - 4);
    uint64_t v23 = v21 + 8 * v22;
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v22 = 0;
  }
  uint64_t v37 = (char *)this + 40;
  uint64_t v38 = v23;
  uint64_t v39 = v23;
  uint64_t v40 = v23;
  uint64_t v41 = v21 + 8 * v22;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v37);
  for (uint64_t i = v43; v43 != v38; uint64_t i = v43)
  {
    uint64_t v26 = *(void *)(*(void *)i + 8);
    v47[0] = *((void *)a2 + 3);
    WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v35, v47, 1uLL);
    uint64_t v27 = *((void *)this + 4);
    uint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v28 = 2864;
    *((void *)v28 + 1) = v27;
    *((void *)v28 + 66) = (char *)v28 + 16;
    *((void *)v28 + 67) = 512;
    *((void *)v28 + 68) = 0;
    *((void *)v28 + 70) = 0;
    *((void *)v28 + 69) = 0;
    IPC::Encoder::encodeHeader(v28);
    uint64_t v46 = v28;
    IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v28, (uint64_t)&v35);
    LOBYTE(v44) = 0;
    char v45 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v26, &v46, 0, (uint64_t)&v44, 1);
    if (v45)
    {
      uint64_t v30 = v44;
      uint64_t v44 = 0;
      if (v30) {
        (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
      }
    }
    uint64_t v31 = v46;
    uint64_t v46 = 0;
    if (v31)
    {
      IPC::Encoder::~Encoder(v31, v29);
      WTF::fastFree(v33, v34);
    }
    uint64_t v32 = v35;
    if (v35)
    {
      uint64_t v35 = 0;
      int v36 = 0;
      WTF::fastFree(v32, v29);
    }
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v42);
  }
  return result;
}

void WebKit::WebUserContentControllerProxy::addUserScript(uint64_t a1, uint64_t a2, char a3)
{
  v47[11] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 112);
  CFRetain(*(CFTypeRef *)(v6 + 8));
  WebKit::WebUserContentControllerProxy::addContentWorld(a1, (API::ContentWorld *)v6);
  uint64_t v7 = *(void *)(a1 + 56);
  unint64_t v8 = *(unsigned int *)(v7 + 28);
  if (v8 == *(_DWORD *)(v7 + 24))
  {
    unint64_t v9 = v8 + (v8 >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 <= v8 + 1) {
      unint64_t v11 = v8 + 1;
    }
    else {
      unint64_t v11 = v10;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v7 + 16, v11);
    uint64_t v12 = *(unsigned int *)(v7 + 28);
    uint64_t v13 = *(void *)(v7 + 16);
    CFRetain(*(CFTypeRef *)(a2 + 8));
    int v14 = *(_DWORD *)(v7 + 28);
    *(void *)(v13 + 8 * v12) = a2;
  }
  else
  {
    uint64_t v15 = *(void *)(v7 + 16);
    CFRetain(*(CFTypeRef *)(a2 + 8));
    *(void *)(v15 + 8 * v8) = a2;
    int v14 = *(_DWORD *)(v7 + 28);
  }
  *(_DWORD *)(v7 + 28) = v14 + 1;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 40), &v41);
  uint64_t v16 = *(void *)(a1 + 40);
  if (v16)
  {
    uint64_t v17 = *(unsigned int *)(v16 - 4);
    uint64_t v18 = v16 + 8 * v17;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v17 = 0;
  }
  uint64_t v36 = a1 + 40;
  uint64_t v37 = v18;
  uint64_t v38 = v18;
  uint64_t v39 = v18;
  uint64_t v40 = v16 + 8 * v17;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v36);
  for (uint64_t i = v42; v42 != v37; uint64_t i = v42)
  {
    uint64_t v20 = *(void *)(*(void *)i + 8);
    uint64_t v21 = *(void *)(v6 + 24);
    *(void *)&long long v46 = *(void *)(a2 + 16);
    *((void *)&v46 + 1) = v21;
    WebCore::UserScript::UserScript((uint64_t)v47, a2 + 24);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v22 = WTF::fastMalloc((WTF *)0x68);
    LODWORD(v35) = 1;
    uint64_t v34 = v22;
    uint64_t v23 = (_OWORD *)(v22 + 104 * HIDWORD(v35));
    _OWORD *v23 = v46;
    WebCore::UserScript::UserScript((uint64_t)(v23 + 1), (uint64_t)v47);
    ++HIDWORD(v35);
    uint64_t v24 = *(void *)(a1 + 32);
    uint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v25 = 2856;
    *((void *)v25 + 1) = v24;
    *((void *)v25 + 66) = (char *)v25 + 16;
    *((void *)v25 + 67) = 512;
    *((void *)v25 + 68) = 0;
    *((void *)v25 + 70) = 0;
    *((void *)v25 + 69) = 0;
    IPC::Encoder::encodeHeader(v25);
    char v45 = v25;
    IPC::VectorArgumentCoder<false,WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v25, (uint64_t)&v34);
    uint64_t v26 = (unsigned char *)IPC::Encoder::grow(v25, 1uLL, 1);
    if (!v27)
    {
      __break(0xC471u);
      JUMPOUT(0x198FD2C0CLL);
    }
    *uint64_t v26 = a3;
    LOBYTE(v43) = 0;
    char v44 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v20, &v45, 0, (uint64_t)&v43, 1);
    if (v44)
    {
      uint64_t v29 = v43;
      uint64_t v43 = 0;
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
      }
    }
    uint64_t v30 = v45;
    char v45 = 0;
    if (v30)
    {
      IPC::Encoder::~Encoder(v30, v28);
      WTF::fastFree(v32, v33);
    }
    WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v34, v28);
    WebCore::UserScript::~UserScript((WebCore::UserScript *)v47, v31);
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v41);
  }
  CFRelease(*(CFTypeRef *)(v6 + 8));
}

void WebKit::WebUserContentControllerProxy::removeUserScript(WebKit::WebUserContentControllerProxy *this, API::UserScript *a2)
{
  uint64_t v4 = *((void *)a2 + 14);
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v37);
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v32 = (char *)this + 40;
  uint64_t v33 = v7;
  uint64_t v34 = v7;
  uint64_t v35 = v7;
  uint64_t v36 = v5 + 8 * v6;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v32);
  for (uint64_t i = v38; v38 != v33; uint64_t i = v38)
  {
    uint64_t v9 = *(void *)(*(void *)i + 8);
    uint64_t v10 = *(void *)(v4 + 24);
    uint64_t v30 = *((void *)a2 + 2);
    uint64_t v31 = v10;
    uint64_t v11 = *((void *)this + 4);
    uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v12 = 2865;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 68) = 0;
    *((void *)v12 + 70) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    uint64_t v41 = v12;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, &v31);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, &v30);
    LOBYTE(v39) = 0;
    char v40 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v41, 0, (uint64_t)&v39, 1);
    if (v40)
    {
      uint64_t v14 = v39;
      uint64_t v39 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    uint64_t v15 = v41;
    uint64_t v41 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v13);
      WTF::fastFree(v16, v17);
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v37);
  }
  uint64_t v18 = *((void *)this + 7);
  unsigned int v19 = *(API::UserScript ***)(v18 + 16);
  uint64_t v20 = *(unsigned int *)(v18 + 28);
  uint64_t v21 = &v19[v20];
  if (v20)
  {
    int v22 = 0;
    uint64_t v23 = *(void *)(v18 + 16);
    uint64_t v24 = &v19[v20];
    uint64_t v25 = v24;
    while (*v19 != a2)
    {
LABEL_22:
      ++v19;
      v23 += 8;
      if (v19 >= v21)
      {
        unsigned int v19 = *(API::UserScript ***)(v18 + 16);
        uint64_t v28 = *(unsigned int *)(v18 + 28);
        LODWORD(v20) = *(_DWORD *)(v18 + 28);
        uint64_t v21 = v25;
        goto LABEL_25;
      }
    }
    uint64_t v26 = v19;
    if (v25 != (API::UserScript **)(*(void *)(v18 + 16) + 8 * *(unsigned int *)(v18 + 28)))
    {
      if (v19 != v24)
      {
        memmove(v25, v24, v23 - (void)v24);
        uint64_t v26 = (API::UserScript **)((char *)v25 + v23 - (void)v24);
        uint64_t v27 = *v19;
        void *v19 = 0;
        uint64_t v24 = v19 + 1;
        if (!v27) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
      uint64_t v26 = v25;
    }
    void *v19 = 0;
    uint64_t v24 = v19 + 1;
    uint64_t v27 = a2;
LABEL_20:
    CFRelease(*((CFTypeRef *)v27 + 1));
LABEL_21:
    ++v22;
    uint64_t v25 = v26;
    goto LABEL_22;
  }
  uint64_t v28 = 0;
  int v22 = 0;
  uint64_t v24 = &v19[v20];
LABEL_25:
  uint64_t v29 = &v19[v28];
  if (v24 != v29)
  {
    memmove(v21, v24, (char *)v29 - (char *)v24);
    LODWORD(v20) = *(_DWORD *)(v18 + 28);
  }
  *(_DWORD *)(v18 + 28) = v20 - v22;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
}

void WebKit::WebUserContentControllerProxy::removeAllUserScripts(WebKit::WebUserContentControllerProxy *this, API::ContentWorld *a2)
{
  v35[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v33);
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v28 = v4;
  uint64_t v29 = v7;
  uint64_t v30 = v7;
  uint64_t v31 = v7;
  uint64_t v32 = v5 + 8 * v6;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v28);
  for (uint64_t i = v34; v34 != v29; uint64_t i = v34)
  {
    uint64_t v9 = *(void *)(*(void *)i + 8);
    v35[0] = *((void *)a2 + 3);
    WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v25, v35, 1uLL);
    uint64_t v27 = &v25;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebUserContentController::RemoveAllUserScripts>(v9, (uint64_t *)&v27, *((void *)this + 4));
    uint64_t v11 = v25;
    if (v25)
    {
      uint64_t v25 = 0;
      int v26 = 0;
      WTF::fastFree(v11, v10);
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v33);
  }
  uint64_t v12 = *((void *)this + 7);
  unint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = *(unsigned int *)(v12 + 28);
  uint64_t v15 = (char *)(v13 + 8 * v14);
  int v16 = 0;
  if (v14)
  {
    uint64_t v17 = *(void *)(v12 + 16);
    uint64_t v18 = (char *)(v13 + 8 * v14);
    unsigned int v19 = v18;
    do
    {
      if ((*(unsigned int (**)(void))(**(void **)v13 + 16))() == 28)
      {
        uint64_t v20 = *(void *)v13;
        if (*(void *)v13) {
          CFRetain(*(CFTypeRef *)(v20 + 8));
        }
        uint64_t v21 = *(API::ContentWorld **)(v20 + 112);
        CFRelease(*(CFTypeRef *)(v20 + 8));
        if (v21 == a2)
        {
          int v22 = (char *)v13;
          if (v19 != (char *)(*(void *)(v12 + 16) + 8 * *(unsigned int *)(v12 + 28)))
          {
            if ((char *)v13 == v18)
            {
              int v22 = v19;
            }
            else
            {
              memmove(v19, v18, v17 - (void)v18);
              int v22 = &v19[v17 - (void)v18];
            }
          }
          uint64_t v23 = *(void *)v13;
          *(void *)unint64_t v13 = 0;
          uint64_t v18 = (char *)(v13 + 8);
          if (v23) {
            CFRelease(*(CFTypeRef *)(v23 + 8));
          }
          ++v16;
          unsigned int v19 = v22;
        }
      }
      v13 += 8;
      v17 += 8;
    }
    while (v13 < (unint64_t)v15);
    unint64_t v13 = *(void *)(v12 + 16);
    LODWORD(v14) = *(_DWORD *)(v12 + 28);
    uint64_t v15 = v19;
  }
  else
  {
    uint64_t v18 = (char *)(v13 + 8 * v14);
  }
  uint64_t v24 = (char *)(v13 + 8 * v14);
  if (v18 != v24)
  {
    memmove(v15, v18, v24 - v18);
    LODWORD(v14) = *(_DWORD *)(v12 + 28);
  }
  *(_DWORD *)(v12 + 28) = v14 - v16;
}

void WebKit::WebUserContentControllerProxy::removeAllUserScripts(WebKit::WebUserContentControllerProxy *this)
{
  uint64_t v38 = 0;
  API::Array::elementsOfType<API::UserScript>((uint64_t)&v33, *((void *)this + 7));
  uint64_t v2 = v35;
  uint64_t v3 = v37;
  if (v35 == v37)
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
LABEL_19:
    uint64_t v12 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(0);
    uint64_t v11 = 0;
    uint64_t v9 = 0;
    uint64_t v14 = 0;
    char v15 = 1;
    goto LABEL_22;
  }
  uint64_t v4 = v36;
  do
  {
    uint64_t v5 = *(CFTypeRef **)(*v2 + 112);
    CFRetain(v5[1]);
    uint64_t v31 = (WTF *)v5;
    LODWORD(v25) = 0;
    WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t)&v26, (uint64_t *)&v38, (uint64_t *)&v31, &v25);
    ++*((_DWORD *)v26 + 2);
    if (v31) {
      CFRelease(*((CFTypeRef *)v31 + 1));
    }
    uint64_t v6 = v2 + 1;
    while (v6 - 1 != v4 && v6 != v4)
    {
      uint64_t v8 = *v6++;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 16))(v8) == 28)
      {
        uint64_t v2 = v6 - 1;
        goto LABEL_13;
      }
    }
    uint64_t v2 = v4;
LABEL_13:
    ;
  }
  while (v2 != v3);
  uint64_t v9 = v38;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  if (!v38) {
    goto LABEL_19;
  }
  uint64_t v10 = *((unsigned int *)v38 - 3);
  if (v10)
  {
    if (v10 >> 29)
    {
      __break(0xC471u);
      return;
    }
    uint64_t v11 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
    LODWORD(v32) = v10;
    uint64_t v31 = v11;
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v9);
  char v15 = 0;
  uint64_t v14 = &v9[2 * *((unsigned int *)v9 - 1)];
LABEL_22:
  if (v14 != v12)
  {
    unsigned int v16 = 0;
    do
    {
      uint64_t v17 = *v12;
      v12 += 2;
      *((void *)v11 + v++*(_DWORD *)(this + 16) = *(void *)(v17 + 24);
      while (v12 != v13)
      {
        if ((unint64_t)(*v12 + 1) > 1) {
          goto LABEL_29;
        }
        v12 += 2;
      }
      uint64_t v12 = v13;
LABEL_29:
      ++v16;
    }
    while (v12 != v14);
    HIDWORD(v32) = v16;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v33);
  uint64_t v18 = *((void *)this + 5);
  if (v18)
  {
    uint64_t v19 = *(unsigned int *)(v18 - 4);
    uint64_t v20 = v18 + 8 * v19;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v19 = 0;
  }
  int v26 = (char *)this + 40;
  uint64_t v27 = v20;
  uint64_t v28 = v20;
  uint64_t v29 = v20;
  uint64_t v30 = v18 + 8 * v19;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v26);
  for (uint64_t i = v34; v34 != v27; uint64_t i = v34)
  {
    uint64_t v22 = *(void *)(*(void *)i + 8);
    uint64_t v25 = &v31;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebUserContentController::RemoveAllUserScripts>(v22, (uint64_t *)&v25, *((void *)this + 4));
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v33);
  }
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(*((void *)this + 7) + 16, 0);
  uint64_t v24 = v31;
  if (v31)
  {
    uint64_t v31 = 0;
    LODWORD(v32) = 0;
    WTF::fastFree(v24, v23);
  }
  if ((v15 & 1) == 0) {
    WTF::HashTable<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>>::deallocateTable(v9, v23);
  }
}

void WebKit::WebUserContentControllerProxy::addUserStyleSheet(WebKit::WebUserContentControllerProxy *this, API::UserStyleSheet *a2)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (CFTypeRef *)*((void *)a2 + 16);
  CFRetain(v4[1]);
  uint64_t v43 = v4;
  WebKit::WebUserContentControllerProxy::addContentWorld((uint64_t)this, (API::ContentWorld *)v4);
  char v44 = this;
  uint64_t v5 = *((void *)this + 8);
  unint64_t v6 = *(unsigned int *)(v5 + 28);
  if (v6 == *(_DWORD *)(v5 + 24))
  {
    unint64_t v7 = v6 + (v6 >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 <= v6 + 1) {
      unint64_t v9 = v6 + 1;
    }
    else {
      unint64_t v9 = v8;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v5 + 16, v9);
    uint64_t v10 = *(unsigned int *)(v5 + 28);
    uint64_t v11 = *(void *)(v5 + 16);
    CFRetain(*((CFTypeRef *)a2 + 1));
    int v12 = *(_DWORD *)(v5 + 28);
    *(void *)(v11 + 8 * v10) = a2;
  }
  else
  {
    uint64_t v13 = *(void *)(v5 + 16);
    CFRetain(*((CFTypeRef *)a2 + 1));
    *(void *)(v13 + 8 * v6) = a2;
    int v12 = *(_DWORD *)(v5 + 28);
  }
  *(_DWORD *)(v5 + 28) = v12 + 1;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)v44 + 5, &v52);
  uint64_t v14 = *((void *)v44 + 5);
  if (v14)
  {
    uint64_t v15 = *(unsigned int *)(v14 - 4);
    uint64_t v16 = v14 + 8 * v15;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v47 = (char *)v44 + 40;
  uint64_t v48 = v16;
  uint64_t v49 = v16;
  uint64_t v50 = v16;
  uint64_t v51 = v14 + 8 * v15;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v47);
  for (uint64_t i = v53; v53 != v48; uint64_t i = v53)
  {
    uint64_t v18 = *(void *)(*(void *)i + 8);
    CFTypeRef v19 = v43[3];
    uint64_t v20 = (WTF::StringImpl *)*((void *)a2 + 3);
    *(void *)&long long v57 = *((void *)a2 + 2);
    *((void *)&v57 + 1) = v19;
    if (v20) {
      *(_DWORD *)v20 += 2;
    }
    uint64_t v58 = v20;
    uint64_t v21 = (WTF::StringImpl *)*((void *)a2 + 4);
    if (v21) {
      *(_DWORD *)v21 += 2;
    }
    uint64_t v59 = v21;
    long long v22 = *(_OWORD *)((char *)a2 + 56);
    long long v60 = *(_OWORD *)((char *)a2 + 40);
    long long v61 = v22;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v62, (uint64_t)a2 + 72);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v63, (uint64_t)a2 + 88);
    long long v64 = *(_OWORD *)((char *)a2 + 104);
    char v65 = *((unsigned char *)a2 + 120);
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v23 = WTF::fastMalloc((WTF *)0x78);
    LODWORD(v46) = 1;
    uint64_t v45 = v23;
    unsigned int v24 = HIDWORD(v46);
    uint64_t v25 = v23 + 120 * HIDWORD(v46);
    *(_OWORD *)uint64_t v25 = v57;
    int v26 = v58;
    if (v58) {
      *(_DWORD *)v58 += 2;
    }
    *(void *)(v25 + ++*(_DWORD *)(this + 16) = v26;
    uint64_t v27 = v59;
    if (v59) {
      *(_DWORD *)v59 += 2;
    }
    uint64_t v28 = v23 + 120 * v24;
    *(void *)(v28 + 24) = v27;
    long long v29 = v61;
    *(_OWORD *)(v28 + 32) = v60;
    *(_OWORD *)(v28 + 48) = v29;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v28 + 64, (uint64_t)v62);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v28 + 80, (uint64_t)v63);
    char v30 = v65;
    *(_OWORD *)(v28 + 96) = v64;
    *(unsigned char *)(v28 + 112) = v30;
    ++HIDWORD(v46);
    uint64_t v31 = *((void *)v44 + 4);
    uint64_t v32 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v32 = 2857;
    *((void *)v32 + 1) = v31;
    *((void *)v32 + 66) = (char *)v32 + 16;
    *((void *)v32 + 67) = 512;
    *((void *)v32 + 68) = 0;
    *((void *)v32 + 70) = 0;
    *((void *)v32 + 69) = 0;
    IPC::Encoder::encodeHeader(v32);
    double v56 = v32;
    IPC::VectorArgumentCoder<false,WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v32, (uint64_t)&v45);
    LOBYTE(v54) = 0;
    char v55 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v18, &v56, 0, (uint64_t)&v54, 1);
    if (v55)
    {
      uint64_t v34 = v54;
      uint64_t v54 = 0;
      if (v34) {
        (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
      }
    }
    uint64_t v35 = v56;
    double v56 = 0;
    if (v35)
    {
      IPC::Encoder::~Encoder(v35, v33);
      WTF::fastFree(v41, v42);
    }
    WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v33);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v63, v36);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v62, v37);
    uint64_t v39 = v59;
    uint64_t v59 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, v38);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
    char v40 = v58;
    uint64_t v58 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, v38);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v52);
  }
  CFRelease(v43[1]);
}

void WebKit::WebUserContentControllerProxy::removeUserStyleSheet(WebKit::WebUserContentControllerProxy *this, API::UserStyleSheet *a2)
{
  uint64_t v4 = *((void *)a2 + 16);
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v37);
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v32 = (char *)this + 40;
  uint64_t v33 = v7;
  uint64_t v34 = v7;
  uint64_t v35 = v7;
  uint64_t v36 = v5 + 8 * v6;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v32);
  for (uint64_t i = v38; v38 != v33; uint64_t i = v38)
  {
    uint64_t v9 = *(void *)(*(void *)i + 8);
    uint64_t v10 = *(void *)(v4 + 24);
    uint64_t v30 = *((void *)a2 + 2);
    uint64_t v31 = v10;
    uint64_t v11 = *((void *)this + 4);
    int v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v12 = 2867;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 68) = 0;
    *((void *)v12 + 70) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    uint64_t v41 = v12;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, &v31);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, &v30);
    LOBYTE(v39) = 0;
    char v40 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v41, 0, (uint64_t)&v39, 1);
    if (v40)
    {
      uint64_t v14 = v39;
      uint64_t v39 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    uint64_t v15 = v41;
    uint64_t v41 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v13);
      WTF::fastFree(v16, v17);
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v37);
  }
  uint64_t v18 = *((void *)this + 8);
  CFTypeRef v19 = *(API::UserStyleSheet ***)(v18 + 16);
  uint64_t v20 = *(unsigned int *)(v18 + 28);
  uint64_t v21 = &v19[v20];
  if (v20)
  {
    int v22 = 0;
    uint64_t v23 = *(void *)(v18 + 16);
    unsigned int v24 = &v19[v20];
    uint64_t v25 = v24;
    while (*v19 != a2)
    {
LABEL_22:
      ++v19;
      v23 += 8;
      if (v19 >= v21)
      {
        CFTypeRef v19 = *(API::UserStyleSheet ***)(v18 + 16);
        uint64_t v28 = *(unsigned int *)(v18 + 28);
        LODWORD(v20) = *(_DWORD *)(v18 + 28);
        uint64_t v21 = v25;
        goto LABEL_25;
      }
    }
    int v26 = v19;
    if (v25 != (API::UserStyleSheet **)(*(void *)(v18 + 16) + 8 * *(unsigned int *)(v18 + 28)))
    {
      if (v19 != v24)
      {
        memmove(v25, v24, v23 - (void)v24);
        int v26 = (API::UserStyleSheet **)((char *)v25 + v23 - (void)v24);
        uint64_t v27 = *v19;
        char *v19 = 0;
        unsigned int v24 = v19 + 1;
        if (!v27) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
      int v26 = v25;
    }
    char *v19 = 0;
    unsigned int v24 = v19 + 1;
    uint64_t v27 = a2;
LABEL_20:
    CFRelease(*((CFTypeRef *)v27 + 1));
LABEL_21:
    ++v22;
    uint64_t v25 = v26;
    goto LABEL_22;
  }
  uint64_t v28 = 0;
  int v22 = 0;
  unsigned int v24 = &v19[v20];
LABEL_25:
  long long v29 = &v19[v28];
  if (v24 != v29)
  {
    memmove(v21, v24, (char *)v29 - (char *)v24);
    LODWORD(v20) = *(_DWORD *)(v18 + 28);
  }
  *(_DWORD *)(v18 + 28) = v20 - v22;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
}

void WebKit::WebUserContentControllerProxy::removeAllUserStyleSheets(WebKit::WebUserContentControllerProxy *this, API::ContentWorld *a2)
{
  v35[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v33);
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v28 = v4;
  uint64_t v29 = v7;
  uint64_t v30 = v7;
  uint64_t v31 = v7;
  uint64_t v32 = v5 + 8 * v6;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v28);
  for (uint64_t i = v34; v34 != v29; uint64_t i = v34)
  {
    uint64_t v9 = *(void *)(*(void *)i + 8);
    v35[0] = *((void *)a2 + 3);
    WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v25, v35, 1uLL);
    uint64_t v27 = &v25;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebUserContentController::RemoveAllUserStyleSheets>(v9, (uint64_t *)&v27, *((void *)this + 4));
    uint64_t v11 = v25;
    if (v25)
    {
      uint64_t v25 = 0;
      int v26 = 0;
      WTF::fastFree(v11, v10);
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v33);
  }
  uint64_t v12 = *((void *)this + 8);
  unint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = *(unsigned int *)(v12 + 28);
  uint64_t v15 = (char *)(v13 + 8 * v14);
  int v16 = 0;
  if (v14)
  {
    uint64_t v17 = *(void *)(v12 + 16);
    uint64_t v18 = (char *)(v13 + 8 * v14);
    CFTypeRef v19 = v18;
    do
    {
      if ((*(unsigned int (**)(void))(**(void **)v13 + 16))() == 29)
      {
        uint64_t v20 = *(void *)v13;
        if (*(void *)v13) {
          CFRetain(*(CFTypeRef *)(v20 + 8));
        }
        uint64_t v21 = *(API::ContentWorld **)(v20 + 128);
        CFRelease(*(CFTypeRef *)(v20 + 8));
        if (v21 == a2)
        {
          int v22 = (char *)v13;
          if (v19 != (char *)(*(void *)(v12 + 16) + 8 * *(unsigned int *)(v12 + 28)))
          {
            if ((char *)v13 == v18)
            {
              int v22 = v19;
            }
            else
            {
              memmove(v19, v18, v17 - (void)v18);
              int v22 = &v19[v17 - (void)v18];
            }
          }
          uint64_t v23 = *(void *)v13;
          *(void *)unint64_t v13 = 0;
          uint64_t v18 = (char *)(v13 + 8);
          if (v23) {
            CFRelease(*(CFTypeRef *)(v23 + 8));
          }
          ++v16;
          CFTypeRef v19 = v22;
        }
      }
      v13 += 8;
      v17 += 8;
    }
    while (v13 < (unint64_t)v15);
    unint64_t v13 = *(void *)(v12 + 16);
    LODWORD(v14) = *(_DWORD *)(v12 + 28);
    uint64_t v15 = v19;
  }
  else
  {
    uint64_t v18 = (char *)(v13 + 8 * v14);
  }
  unsigned int v24 = (char *)(v13 + 8 * v14);
  if (v18 != v24)
  {
    memmove(v15, v18, v24 - v18);
    LODWORD(v14) = *(_DWORD *)(v12 + 28);
  }
  *(_DWORD *)(v12 + 28) = v14 - v16;
}

void WebKit::WebUserContentControllerProxy::removeAllUserStyleSheets(WebKit::WebUserContentControllerProxy *this)
{
  uint64_t v38 = 0;
  API::Array::elementsOfType<API::UserStyleSheet>((uint64_t)&v33, *((void *)this + 8));
  uint64_t v2 = v35;
  uint64_t v3 = v37;
  if (v35 == v37)
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
LABEL_19:
    uint64_t v12 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(0);
    uint64_t v11 = 0;
    uint64_t v9 = 0;
    uint64_t v14 = 0;
    char v15 = 1;
    goto LABEL_22;
  }
  uint64_t v4 = v36;
  do
  {
    uint64_t v5 = *(CFTypeRef **)(*v2 + 128);
    CFRetain(v5[1]);
    uint64_t v31 = (WTF *)v5;
    LODWORD(v25) = 0;
    WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t)&v26, (uint64_t *)&v38, (uint64_t *)&v31, &v25);
    ++*((_DWORD *)v26 + 2);
    if (v31) {
      CFRelease(*((CFTypeRef *)v31 + 1));
    }
    uint64_t v6 = v2 + 1;
    while (v6 - 1 != v4 && v6 != v4)
    {
      uint64_t v8 = *v6++;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 16))(v8) == 29)
      {
        uint64_t v2 = v6 - 1;
        goto LABEL_13;
      }
    }
    uint64_t v2 = v4;
LABEL_13:
    ;
  }
  while (v2 != v3);
  uint64_t v9 = v38;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  if (!v38) {
    goto LABEL_19;
  }
  uint64_t v10 = *((unsigned int *)v38 - 3);
  if (v10)
  {
    if (v10 >> 29)
    {
      __break(0xC471u);
      return;
    }
    uint64_t v11 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
    LODWORD(v32) = v10;
    uint64_t v31 = v11;
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v9);
  char v15 = 0;
  uint64_t v14 = &v9[2 * *((unsigned int *)v9 - 1)];
LABEL_22:
  if (v14 != v12)
  {
    unsigned int v16 = 0;
    do
    {
      uint64_t v17 = *v12;
      v12 += 2;
      *((void *)v11 + v++*(_DWORD *)(this + 16) = *(void *)(v17 + 24);
      while (v12 != v13)
      {
        if ((unint64_t)(*v12 + 1) > 1) {
          goto LABEL_29;
        }
        v12 += 2;
      }
      uint64_t v12 = v13;
LABEL_29:
      ++v16;
    }
    while (v12 != v14);
    HIDWORD(v32) = v16;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v33);
  uint64_t v18 = *((void *)this + 5);
  if (v18)
  {
    uint64_t v19 = *(unsigned int *)(v18 - 4);
    uint64_t v20 = v18 + 8 * v19;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v19 = 0;
  }
  int v26 = (char *)this + 40;
  uint64_t v27 = v20;
  uint64_t v28 = v20;
  uint64_t v29 = v20;
  uint64_t v30 = v18 + 8 * v19;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v26);
  for (uint64_t i = v34; v34 != v27; uint64_t i = v34)
  {
    uint64_t v22 = *(void *)(*(void *)i + 8);
    uint64_t v25 = &v31;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebUserContentController::RemoveAllUserStyleSheets>(v22, (uint64_t *)&v25, *((void *)this + 4));
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v33);
  }
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(*((void *)this + 8) + 16, 0);
  unsigned int v24 = v31;
  if (v31)
  {
    uint64_t v31 = 0;
    LODWORD(v32) = 0;
    WTF::fastFree(v24, v23);
  }
  if ((v15 & 1) == 0) {
    WTF::HashTable<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>>::deallocateTable(v9, v23);
  }
}

uint64_t WebKit::WebUserContentControllerProxy::addUserScriptMessageHandler(WebKit::WebUserContentControllerProxy *this, WebKit::WebScriptMessageHandler *a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = (uint64_t *)((char *)this + 72);
  uint64_t v4 = *((void *)this + 9);
  if (!v4)
  {
    uint64_t v8 = 0;
    uint64_t v6 = 0;
LABEL_10:
    uint64_t v7 = (void *)(v4 + 16 * v6);
    goto LABEL_11;
  }
  uint64_t v6 = *(unsigned int *)(v4 - 4);
  uint64_t v7 = (void *)(v4 + 16 * v6);
  if (!*(_DWORD *)(v4 - 12))
  {
    uint64_t v8 = (void *)(v4 + 16 * v6);
    goto LABEL_10;
  }
  uint64_t v8 = (void *)*((void *)this + 9);
  if (v6)
  {
    uint64_t v9 = 16 * v6;
    uint64_t v8 = (void *)*((void *)this + 9);
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      v8 += 2;
      v9 -= 16;
      if (!v9)
      {
        uint64_t v8 = v7;
        break;
      }
    }
  }
LABEL_11:
  uint64_t v10 = (API::ContentWorld *)*((void *)a2 + 5);
  if (v4) {
    uint64_t v11 = (void *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11 != v8)
  {
    while (1)
    {
      uint64_t v12 = *(WTF **)(v8[1] + 32);
      if (v12) {
        *(_DWORD *)v12 += 2;
      }
      unint64_t v13 = (WTF::StringImpl *)*((void *)a2 + 4);
      if (v13) {
        break;
      }
      if ((WTF::equal(v12, 0, a3) & 1) == 0) {
        goto LABEL_28;
      }
      BOOL v15 = *(void *)(*(void *)(v8[1] + 40) + 24) == *((void *)v10 + 3);
      if (v12) {
        goto LABEL_25;
      }
LABEL_32:
      if (v15) {
        return 0;
      }
LABEL_35:
      unsigned int v16 = v8 + 2;
      uint64_t v8 = v7;
      if (v16 != v7)
      {
        uint64_t v8 = v16;
        while ((unint64_t)(*v8 + 1) <= 1)
        {
          v8 += 2;
          if (v8 == v7)
          {
            uint64_t v8 = v7;
            break;
          }
        }
      }
      if (v8 == v11) {
        goto LABEL_45;
      }
    }
    *(_DWORD *)v13 += 2;
    if ((WTF::equal(v12, v13, a3) & 1) == 0)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v14);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
LABEL_28:
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v14);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      goto LABEL_35;
    }
    BOOL v15 = *(void *)(*(void *)(v8[1] + 40) + 24) == *((void *)v10 + 3);
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v14);
      if (!v12) {
        goto LABEL_32;
      }
    }
    else
    {
      *(_DWORD *)v13 -= 2;
      if (!v12) {
        goto LABEL_32;
      }
    }
LABEL_25:
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v14);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
    goto LABEL_32;
  }
LABEL_45:
  WebKit::WebUserContentControllerProxy::addContentWorld((uint64_t)this, v10);
  uint64_t v17 = *((void *)a2 + 2);
  uint64_t v18 = *((void *)this + 9);
  if (v18
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v5),
        (uint64_t v18 = *v5) != 0))
  {
    int v19 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    int v19 = 0;
  }
  unint64_t v20 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
  unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
  unsigned int v24 = (void *)(v18 + 16 * v23);
  uint64_t v25 = *v24;
  if (*v24)
  {
    int v26 = 0;
    int v27 = 1;
    while (v25 != v17)
    {
      if (v25 == -1) {
        int v26 = v24;
      }
      unsigned int v23 = (v23 + v27) & v19;
      unsigned int v24 = (void *)(v18 + 16 * v23);
      uint64_t v25 = *v24;
      ++v27;
      if (!*v24)
      {
        if (v26)
        {
          *int v26 = 0;
          v26[1] = 0;
          --*(_DWORD *)(*v5 - 16);
          unsigned int v24 = v26;
        }
        goto LABEL_56;
      }
    }
    goto LABEL_69;
  }
LABEL_56:
  void *v24 = v17;
  ++*((_DWORD *)a2 + 2);
  uint64_t v28 = (_DWORD *)v24[1];
  v24[1] = a2;
  if (v28)
  {
    if (v28[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v28 + 8))(v28);
    }
    else {
      --v28[2];
    }
  }
  uint64_t v30 = *v5;
  if (*v5) {
    int v31 = *(_DWORD *)(v30 - 12) + 1;
  }
  else {
    int v31 = 1;
  }
  *(_DWORD *)(v30 - 12) = v31;
  uint64_t v32 = *v5;
  if (*v5) {
    int v33 = *(_DWORD *)(v32 - 12);
  }
  else {
    int v33 = 0;
  }
  uint64_t v34 = (*(_DWORD *)(v32 - 16) + v33);
  unint64_t v35 = *(unsigned int *)(v32 - 4);
  if (v35 > 0x400)
  {
    if (v35 > 2 * v34) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (3 * v35 <= 4 * v34) {
LABEL_68:
  }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v5);
LABEL_69:
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v63);
  uint64_t v36 = *((void *)this + 5);
  if (v36)
  {
    uint64_t v37 = *(unsigned int *)(v36 - 4);
    uint64_t v38 = v36 + 8 * v37;
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v37 = 0;
  }
  uint64_t v58 = (char *)this + 40;
  uint64_t v59 = v38;
  uint64_t v60 = v38;
  uint64_t v61 = v38;
  uint64_t v62 = v36 + 8 * v37;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v58);
  for (uint64_t i = v64; v64 != v59; uint64_t i = v64)
  {
    uint64_t v40 = *(void *)(*(void *)i + 8);
    uint64_t v41 = *((void *)a2 + 2);
    uint64_t v42 = *((void *)v10 + 3);
    uint64_t v43 = (WTF::StringImpl *)*((void *)a2 + 4);
    if (v43) {
      *(_DWORD *)v43 += 2;
    }
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v44 = WTF::fastMalloc((WTF *)0x18);
    LODWORD(v57) = 1;
    uint64_t v56 = v44;
    unsigned int v45 = HIDWORD(v57);
    uint64_t v46 = (void *)(v44 + 24 * HIDWORD(v57));
    void *v46 = v41;
    v46[1] = v42;
    if (v43) {
      *(_DWORD *)v43 += 2;
    }
    *(void *)(v44 + 24 * v45 + ++*(_DWORD *)(this + 16) = v43;
    ++HIDWORD(v57);
    uint64_t v47 = *((void *)this + 4);
    uint64_t v48 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v48 = 2855;
    *((void *)v48 + 1) = v47;
    *((void *)v48 + 66) = (char *)v48 + 16;
    *((void *)v48 + 67) = 512;
    *((void *)v48 + 68) = 0;
    *((void *)v48 + 70) = 0;
    *((void *)v48 + 69) = 0;
    IPC::Encoder::encodeHeader(v48);
    long long v67 = v48;
    IPC::VectorArgumentCoder<false,WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v48, (uint64_t)&v56);
    LOBYTE(v65) = 0;
    char v66 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v40, &v67, 0, (uint64_t)&v65, 1);
    if (v66)
    {
      uint64_t v50 = v65;
      uint64_t v65 = 0;
      if (v50) {
        (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
      }
    }
    uint64_t v51 = v67;
    long long v67 = 0;
    if (v51)
    {
      IPC::Encoder::~Encoder(v51, v49);
      WTF::fastFree(v53, v54);
    }
    WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v49);
    if (v43)
    {
      if (*(_DWORD *)v43 == 2) {
        WTF::StringImpl::destroy(v43, v52);
      }
      else {
        *(_DWORD *)v43 -= 2;
      }
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v63);
  }
  return 1;
}

uint64_t WebKit::WebUserContentControllerProxy::removeUserMessageHandlerForName(uint64_t this, const WTF::StringImpl **a2, API::ContentWorld *a3)
{
  uint64_t v5 = this;
  uint64_t v7 = (uint64_t *)(this + 72);
  uint64_t v6 = *(void *)(this + 72);
  if (v6)
  {
    uint64_t v8 = *(unsigned int *)(v6 - 4);
    uint64_t v9 = (void *)(v6 + 16 * v8);
    if (*(_DWORD *)(v6 - 12))
    {
      uint64_t v10 = *(void **)(this + 72);
      if (v8)
      {
        uint64_t v11 = 16 * v8;
        uint64_t v10 = *(void **)(this + 72);
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          v10 += 2;
          v11 -= 16;
          if (!v11)
          {
            uint64_t v10 = v9;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    uint64_t v10 = (void *)(v6 + 16 * v8);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v9 = (void *)(v6 + 16 * v8);
  if (v6)
  {
LABEL_8:
    uint64_t v12 = (void *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    goto LABEL_13;
  }
  uint64_t v12 = 0;
LABEL_13:
  if (v12 == v10) {
    return this;
  }
  while (1)
  {
    unint64_t v13 = *(WTF **)(v10[1] + 32);
    if (v13) {
      break;
    }
    this = WTF::equal(0, *a2, a3);
    if ((this & 1) != 0 && *(void *)(*(void *)(v10[1] + 40) + 24) == *((void *)a3 + 3)) {
      goto LABEL_33;
    }
LABEL_24:
    uint64_t v17 = v10 + 2;
    uint64_t v10 = v9;
    if (v17 != v9)
    {
      uint64_t v10 = v17;
      while ((unint64_t)(*v10 + 1) <= 1)
      {
        v10 += 2;
        if (v10 == v9)
        {
          uint64_t v10 = v9;
          break;
        }
      }
    }
    if (v10 == v12) {
      return this;
    }
  }
  *(_DWORD *)v13 += 2;
  this = WTF::equal(v13, *a2, a3);
  if (!this)
  {
    if (*(_DWORD *)v13 == 2) {
      this = WTF::StringImpl::destroy(v13, v14);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
    goto LABEL_24;
  }
  uint64_t v15 = *(void *)(*(void *)(v10[1] + 40) + 24);
  uint64_t v16 = *((void *)a3 + 3);
  if (*(_DWORD *)v13 == 2) {
    this = WTF::StringImpl::destroy(v13, v14);
  }
  else {
    *(_DWORD *)v13 -= 2;
  }
  if (v15 != v16) {
    goto LABEL_24;
  }
LABEL_33:
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v5 + 40), &v44);
  uint64_t v18 = *(void *)(v5 + 40);
  if (v18)
  {
    uint64_t v19 = *(unsigned int *)(v18 - 4);
    uint64_t v20 = v18 + 8 * v19;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v19 = 0;
  }
  uint64_t v39 = v5 + 40;
  uint64_t v40 = v20;
  uint64_t v41 = v20;
  uint64_t v42 = v20;
  uint64_t v43 = v18 + 8 * v19;
  this = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v39);
  for (uint64_t i = v45; v45 != v40; uint64_t i = v45)
  {
    uint64_t v22 = *(void *)(*(void *)i + 8);
    uint64_t v23 = *((void *)a3 + 3);
    uint64_t v37 = *(void *)(v10[1] + 16);
    uint64_t v38 = v23;
    uint64_t v24 = *(void *)(v5 + 32);
    uint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v25 = 2866;
    *((void *)v25 + 1) = v24;
    *((void *)v25 + 66) = (char *)v25 + 16;
    *((void *)v25 + 67) = 512;
    *((void *)v25 + 68) = 0;
    *((void *)v25 + 70) = 0;
    *((void *)v25 + 69) = 0;
    IPC::Encoder::encodeHeader(v25);
    uint64_t v48 = v25;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v25, &v38);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v25, &v37);
    LOBYTE(v46) = 0;
    char v47 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v22, &v48, 0, (uint64_t)&v46, 1);
    if (v47)
    {
      uint64_t v27 = v46;
      uint64_t v46 = 0;
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
    uint64_t v28 = v48;
    uint64_t v48 = 0;
    if (v28)
    {
      IPC::Encoder::~Encoder(v28, v26);
      WTF::fastFree(v29, v30);
    }
    this = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v44);
  }
  uint64_t v31 = *v7;
  if (!*v7 || (v31 += 16 * *(unsigned int *)(v31 - 4), (void *)v31 != v10))
  {
    if ((void *)v31 != v10)
    {
      this = (uint64_t)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>::customDeleteBucket(v10);
      ++*(_DWORD *)(*v7 - 16);
      uint64_t v32 = *v7;
      if (*v7) {
        int v33 = *(_DWORD *)(v32 - 12) - 1;
      }
      else {
        int v33 = -1;
      }
      *(_DWORD *)(v32 - 12) = v33;
      uint64_t v34 = *v7;
      if (*v7)
      {
        unsigned int v35 = 6 * *(_DWORD *)(v34 - 12);
        unsigned int v36 = *(_DWORD *)(v34 - 4);
        if (v35 < v36 && v36 >= 9) {
          return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v7, v36 >> 1);
        }
      }
    }
  }
  return this;
}

void *WebKit::WebUserContentControllerProxy::removeAllUserMessageHandlers(WebKit::WebUserContentControllerProxy *this, API::ContentWorld *a2)
{
  v51[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v46);
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v41 = v4;
  uint64_t v42 = v7;
  uint64_t v43 = v7;
  uint64_t v44 = v7;
  uint64_t v45 = v5 + 8 * v6;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v41);
  for (uint64_t i = v47; v47 != v42; uint64_t i = v47)
  {
    uint64_t v10 = *(void *)(*(void *)i + 8);
    v51[0] = *((void *)a2 + 3);
    WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v39, v51, 1uLL);
    uint64_t v11 = *((void *)this + 4);
    uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v12 = 2860;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 68) = 0;
    *((void *)v12 + 70) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    uint64_t v50 = v12;
    IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v12, (uint64_t)&v39);
    LOBYTE(v48) = 0;
    char v49 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v50, 0, (uint64_t)&v48, 1);
    if (v49)
    {
      uint64_t v14 = v48;
      uint64_t v48 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    uint64_t v15 = v50;
    uint64_t v50 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v13);
      WTF::fastFree(v17, v18);
    }
    uint64_t v16 = v39;
    if (v39)
    {
      uint64_t v39 = 0;
      int v40 = 0;
      WTF::fastFree(v16, v13);
    }
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v46);
  }
  uint64_t v21 = *((void *)this + 9);
  uint64_t v19 = (uint64_t *)((char *)this + 72);
  uint64_t v20 = v21;
  if (v21)
  {
    int v22 = *(_DWORD *)(v20 - 4);
    if (v22)
    {
      int v23 = 0;
      unsigned int v24 = v22 - 1;
      do
      {
        uint64_t v25 = v24;
        uint64_t result = (void *)(v20 + 16 * v24);
        if ((unint64_t)(*result + 1) >= 2
          && *(void *)(*(void *)(*(void *)(v20 + 16 * v24 + 8) + 40) + 24) == *((void *)a2 + 3))
        {
          uint64_t result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>::customDeleteBucket(result);
          ++v23;
        }
        --v24;
      }
      while (v25);
      uint64_t v26 = *v19;
      if (v23)
      {
        *(_DWORD *)(v26 - 16) += v23;
        uint64_t v27 = *v19;
        if (*v19) {
          int v28 = *(_DWORD *)(v27 - 12);
        }
        else {
          int v28 = 0;
        }
        *(_DWORD *)(v27 - 12) = v28 - v23;
        uint64_t v26 = *v19;
      }
      if (v26)
      {
        unsigned int v29 = *(_DWORD *)(v26 - 4);
        uint64_t v30 = *(unsigned int *)(v26 - 12);
        if (v29 >= 9 && 6 * (int)v30 < v29)
        {
          unsigned int v32 = (v30 - 1) | ((v30 - 1) >> 1) | (((v30 - 1) | ((v30 - 1) >> 1)) >> 2);
          unsigned int v33 = v32 | (v32 >> 4) | ((v32 | (v32 >> 4)) >> 8);
          unint64_t v34 = (v33 | HIWORD(v33)) + 1;
          if (v34 > 0x400)
          {
            if (v34 > 2 * v30) {
              goto LABEL_35;
            }
          }
          else if (3 * v34 > 4 * v30)
          {
LABEL_33:
            double v35 = (double)v30;
            double v36 = (double)v34;
            double v37 = 0.604166667;
LABEL_36:
            if (v36 * v37 <= v35) {
              LODWORD(v34) = 2 * v34;
            }
            if (v34 <= 8) {
              unsigned int v38 = 8;
            }
            else {
              unsigned int v38 = v34;
            }
            return (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v19, v38);
          }
          LODWORD(v34) = 2 * v34;
          if (v34 <= 0x400) {
            goto LABEL_33;
          }
LABEL_35:
          double v35 = (double)v30;
          double v36 = (double)v34;
          double v37 = 0.416666667;
          goto LABEL_36;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebUserContentControllerProxy::removeAllUserMessageHandlers(WebKit::WebUserContentControllerProxy *this)
{
  uint64_t v2 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v15);
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = v3 + 8 * v4;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v10 = v2;
  uint64_t v11 = v5;
  uint64_t v12 = v5;
  uint64_t v13 = v5;
  uint64_t v14 = v3 + 8 * v4;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v10);
  while (v16 != v11)
  {
    uint64_t v7 = *(void *)(*(void *)v16 + 8);
    char v9 = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebUserContentController::RemoveAllUserScriptMessageHandlers>(v7, (uint64_t)&v9, *((void *)this + 4), 0);
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v15);
  }
  uint64_t result = *((void *)this + 9);
  if (result)
  {
    *((void *)this + 9) = 0;
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(result, v6);
  }
  return result;
}

void WebKit::WebUserContentControllerProxy::didPostMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, WTF *a6, uint64_t *a7)
{
  WebKit::WebProcessProxy::webPage(a2, &v54);
  uint64_t v13 = v54;
  if (v54)
  {
    if ((unint64_t)(a4 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
      goto LABEL_20;
    }
    uint64_t v14 = *(void *)(a1 + 72);
    if (!v14) {
      goto LABEL_20;
    }
    unsigned int v15 = *(_DWORD *)(v14 - 8);
    unint64_t v16 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
    unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    uint64_t v19 = v15 & ((v18 >> 31) ^ v18);
    uint64_t v20 = *(void *)(v14 + 16 * v19);
    if (v20 != a4)
    {
      int v21 = 1;
      while (v20)
      {
        uint64_t v19 = (v19 + v21) & v15;
        uint64_t v20 = *(void *)(v14 + 16 * v19);
        ++v21;
        if (v20 == a4) {
          goto LABEL_8;
        }
      }
      goto LABEL_20;
    }
LABEL_8:
    uint64_t v22 = *(void *)(v14 + 16 * v19 + 8);
    if (!v22)
    {
LABEL_20:
      uint64_t v50 = 0;
      uint64_t v35 = *a7;
      *a7 = 0;
      (*(void (**)(uint64_t, void, void, WTF::StringImpl **))(*(void *)v35 + 16))(v35, 0, 0, &v50);
      (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      double v37 = v50;
      uint64_t v50 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2) {
          WTF::StringImpl::destroy(v37, v36);
        }
        else {
          *(_DWORD *)v37 -= 2;
        }
      }
      goto LABEL_43;
    }
    ++*(_DWORD *)(v22 + 8);
    char v23 = (*(uint64_t (**)(void))(**(void **)(v22 + 24) + 24))(*(void *)(v22 + 24));
    uint64_t v24 = *(void *)(v22 + 24);
    uint64_t v25 = *(void *)(v22 + 40);
    if (v23)
    {
      uint64_t v50 = 0;
      int v51 = 0;
      int v52 = (int)a6;
      if (!a6)
      {
LABEL_14:
        WebCore::SerializedScriptValue::createFromWireBytes((uint64_t *)&v53);
        uint64_t v28 = (uint64_t)v53;
        uint64_t v29 = *a7;
        *a7 = 0;
        uint64_t v30 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v30 = &unk_1EE9E5698;
        v30[1] = v29;
        char v49 = v30;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v24 + 32))(v24, v13, a3, v25, v28, &v49);
        unsigned int v32 = v49;
        char v49 = 0;
        if (v32) {
          (*(void (**)(void *))(*v32 + 8))(v32);
        }
        unsigned int v33 = v53;
        uint64_t v53 = 0;
        if (v33) {
          WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v33);
        }
        unint64_t v34 = v50;
        if (v50)
        {
          uint64_t v50 = 0;
          int v51 = 0;
          WTF::fastFree(v34, v31);
        }
LABEL_40:
        if (*(_DWORD *)(v22 + 8) == 1) {
          (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
        }
        else {
          --*(_DWORD *)(v22 + 8);
        }
LABEL_43:
        CFRelease(*(CFTypeRef *)(v13 + 8));
        return;
      }
      if (!((unint64_t)a6 >> 32))
      {
        uint64_t v26 = (WTF::StringImpl *)WTF::fastMalloc(a6);
        int v51 = (int)a6;
        uint64_t v50 = v26;
        do
        {
          char v27 = *a5++;
          *(unsigned char *)uint64_t v26 = v27;
          uint64_t v26 = (WTF::StringImpl *)((char *)v26 + 1);
          a6 = (WTF *)((char *)a6 - 1);
        }
        while (a6);
        goto LABEL_14;
      }
LABEL_45:
      __break(0xC471u);
      JUMPOUT(0x198FD5088);
    }
    uint64_t v50 = 0;
    int v51 = 0;
    int v52 = (int)a6;
    if (a6)
    {
      if ((unint64_t)a6 >> 32) {
        goto LABEL_45;
      }
      uint64_t v41 = (WTF::StringImpl *)WTF::fastMalloc(a6);
      int v51 = (int)a6;
      uint64_t v50 = v41;
      do
      {
        char v42 = *a5++;
        *(unsigned char *)uint64_t v41 = v42;
        uint64_t v41 = (WTF::StringImpl *)((char *)v41 + 1);
        a6 = (WTF *)((char *)a6 - 1);
      }
      while (a6);
    }
    WebCore::SerializedScriptValue::createFromWireBytes((uint64_t *)&v53);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)v24 + 16))(v24, v13, a3, v25, v53);
    uint64_t v44 = v53;
    uint64_t v53 = 0;
    if (v44) {
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v44);
    }
    uint64_t v45 = v50;
    if (v50)
    {
      uint64_t v50 = 0;
      int v51 = 0;
      WTF::fastFree(v45, v43);
    }
    uint64_t v50 = 0;
    uint64_t v46 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, void, void, WTF::StringImpl **))(*(void *)v46 + 16))(v46, 0, 0, &v50);
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
    uint64_t v48 = v50;
    uint64_t v50 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2) {
        WTF::StringImpl::destroy(v48, v47);
      }
      else {
        *(_DWORD *)v48 -= 2;
      }
    }
    goto LABEL_40;
  }
  uint64_t v50 = 0;
  uint64_t v38 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, void, void, WTF::StringImpl **))(*(void *)v38 + 16))(v38, 0, 0, &v50);
  (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  int v40 = v50;
  uint64_t v50 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2) {
      WTF::StringImpl::destroy(v40, v39);
    }
    else {
      *(_DWORD *)v40 -= 2;
    }
  }
}

void *WebKit::WebUserContentControllerProxy::removeContentRuleList(WebKit::WebUserContentControllerProxy *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = (uint64_t *)((char *)this + 104);
  uint64_t v6 = *((void *)this + 13);
  if (v6)
  {
    int v7 = *(_DWORD *)(v6 - 8);
    unsigned int v8 = *((_DWORD *)*a2 + 4);
    if (v8 >= 0x100) {
      unsigned int v9 = v8 >> 8;
    }
    else {
      unsigned int v9 = WTF::StringImpl::hashSlowCase(*a2);
    }
    for (i = 0; ; unsigned int v9 = i + v11)
    {
      int v11 = v9 & v7;
      uint64_t v12 = v6 + 56 * (v9 & v7);
      uint64_t v13 = *(WTF **)v12;
      if (*(void *)v12 != -1)
      {
        if (!v13)
        {
          uint64_t v14 = *v5;
          if (!*v5) {
            goto LABEL_28;
          }
          uint64_t v12 = v14 + 56 * *(unsigned int *)(v14 - 4);
          goto LABEL_13;
        }
        if (WTF::equal(v13, *a2, a3)) {
          break;
        }
      }
      ++i;
    }
    uint64_t v14 = *v5;
    if (!*v5) {
      goto LABEL_14;
    }
LABEL_13:
    v14 += 56 * *(unsigned int *)(v14 - 4);
    if (v14 == v12) {
      goto LABEL_28;
    }
LABEL_14:
    if (v14 != v12)
    {
      WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v12, (WTF::StringImpl *)a2);
      unint64_t v16 = *(WTF::StringImpl **)(v12 + 16);
      *(void *)(v12 + ++*(_DWORD *)(this + 16) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v15);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      uint64_t v17 = *(void *)(v12 + 8);
      *(void *)(v12 + 8) = 0;
      if (v17) {
        CFRelease(*(CFTypeRef *)(v17 + 8));
      }
      ++*(_DWORD *)(*v5 - 16);
      uint64_t v18 = *v5;
      if (*v5) {
        int v19 = *(_DWORD *)(v18 - 12) - 1;
      }
      else {
        int v19 = -1;
      }
      *(_DWORD *)(v18 - 12) = v19;
      uint64_t v20 = *v5;
      if (*v5)
      {
        unsigned int v21 = 6 * *(_DWORD *)(v20 - 12);
        unsigned int v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v5, v22 >> 1);
        }
      }
    }
  }
LABEL_28:
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v53);
  uint64_t v23 = *((void *)this + 5);
  if (v23)
  {
    uint64_t v24 = *(unsigned int *)(v23 - 4);
    uint64_t v25 = v23 + 8 * v24;
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v24 = 0;
  }
  uint64_t v48 = (char *)this + 40;
  uint64_t v49 = v25;
  uint64_t v50 = v25;
  uint64_t v51 = v25;
  uint64_t v52 = v23 + 8 * v24;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v48);
  for (uint64_t j = v54; v54 != v49; uint64_t j = v54)
  {
    uint64_t v27 = *(void *)(*(void *)j + 8);
    uint64_t v28 = *((void *)this + 4);
    uint64_t v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v29 = 2863;
    *((void *)v29 + 1) = v28;
    *((void *)v29 + 66) = (char *)v29 + 16;
    *((void *)v29 + 67) = 512;
    *((void *)v29 + 68) = 0;
    *((void *)v29 + 70) = 0;
    *((void *)v29 + 69) = 0;
    IPC::Encoder::encodeHeader(v29);
    uint64_t v57 = v29;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v29, (uint64_t *)a2);
    LOBYTE(v55[0]) = 0;
    char v56 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v27, &v57, 0, (uint64_t)v55, 1);
    if (v56)
    {
      uint64_t v31 = v55[0];
      v55[0] = 0;
      if (v31) {
        (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
      }
    }
    unsigned int v32 = v57;
    uint64_t v57 = 0;
    if (v32)
    {
      IPC::Encoder::~Encoder(v32, v30);
      WTF::fastFree(v33, v34);
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v53);
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 11, &v53);
  uint64_t v35 = *((void *)this + 11);
  if (v35)
  {
    uint64_t v36 = *(unsigned int *)(v35 - 4);
    uint64_t v37 = v35 + 8 * v36;
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v36 = 0;
  }
  uint64_t v48 = (char *)this + 88;
  uint64_t v49 = v37;
  uint64_t v50 = v37;
  uint64_t v51 = v37;
  uint64_t v52 = v35 + 8 * v36;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v48);
  for (uint64_t k = v54; v54 != v49; uint64_t k = v54)
  {
    uint64_t v40 = *(void *)(*(void *)k + 8);
    uint64_t v47 = *((void *)this + 4);
    uint64_t v41 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v41 = 298;
    *((void *)v41 + 1) = 0;
    *((void *)v41 + 66) = (char *)v41 + 16;
    *((void *)v41 + 67) = 512;
    *((void *)v41 + 68) = 0;
    *((void *)v41 + 70) = 0;
    *((void *)v41 + 69) = 0;
    IPC::Encoder::encodeHeader(v41);
    uint64_t v57 = v41;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v41, &v47);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v41, (uint64_t *)a2);
    LOBYTE(v55[0]) = 0;
    char v56 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v40, &v57, 0, (uint64_t)v55, 1);
    if (v56)
    {
      uint64_t v43 = v55[0];
      v55[0] = 0;
      if (v43) {
        (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
      }
    }
    uint64_t v44 = v57;
    uint64_t v57 = 0;
    if (v44)
    {
      IPC::Encoder::~Encoder(v44, v42);
      WTF::fastFree(v45, v46);
    }
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v53);
  }
  return result;
}

uint64_t WebCore::ScrollingTree::isThreadedScrollingTree(WebCore::ScrollingTree *this)
{
  return 0;
}

uint64_t WebCore::ScrollingTree::isScrollingTreeMac(WebCore::ScrollingTree *this)
{
  return 0;
}

uint64_t WebKit::RemoteScrollingTree::isRemoteScrollingTree(WebKit::RemoteScrollingTree *this)
{
  return 1;
}

uint64_t WebCore::ScrollingTree::isScrollingTreeIOS(WebCore::ScrollingTree *this)
{
  return 0;
}

uint64_t WebCore::ScrollingTree::isScrollingSynchronizedWithMainThread(WebCore::ScrollingTree *this)
{
  return 1;
}

uint64_t WebKit::RemoteScrollingTree::handleWheelEventAfterDefaultHandling()
{
  return 0;
}

uint64_t API::ObjectImpl<(API::Object::Type)104>::type()
{
  return 104;
}

void API::ObjectImpl<(API::Object::Type)104>::~ObjectImpl()
{
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      if (*(void *)v4 != -1)
      {
        uint64_t v5 = *(WTF::StringImpl **)(v4 + 16);
        *(void *)(v4 + ++*(_DWORD *)(this + 16) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
        uint64_t v6 = *(void *)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        if (v6) {
          CFRelease(*(CFTypeRef *)(v6 + 8));
        }
        int v7 = *(WTF::StringImpl **)v4;
        *(void *)uint64_t v4 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2) {
            WTF::StringImpl::destroy(v7, a2);
          }
          else {
            *(_DWORD *)v7 -= 2;
          }
        }
      }
      v4 += 56;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (_DWORD **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (_DWORD *)-1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5)
        {
          if (v5[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
          }
          else {
            --v5[2];
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != -1)
      {
        *uint64_t v4 = 0;
        if (v5) {
          CFRelease(*(CFTypeRef *)(v5 + 8));
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t *WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t v3 = result;
  *uint64_t result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  int v4 = a3;
  if (!(a3 >> 29))
  {
    uint64_t v6 = 8 * a3;
    uint64_t v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *uint64_t v3 = v7;
    unsigned int v8 = *((_DWORD *)v3 + 3);
    do
    {
      uint64_t v9 = *a2++;
      *(void *)(*v3 + 8 * v8) = v9;
      unsigned int v8 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v8;
      v6 -= 8;
    }
    while (v6);
    return v3;
  }
  __break(0xC471u);
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebUserContentController::RemoveAllUserScripts>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2861;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v14 = v6;
  IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v6, *a2);
  LOBYTE(v12) = 0;
  char v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = ~(*a3 << 32) + *a3;
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = v8 + 16 * v15;
  uint64_t v17 = *(void *)v16;
  if (*(void *)v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = *(unsigned int *)(v8 - 4);
        }
        char v28 = 0;
        uint64_t v29 = v8 + 16 * v23;
        goto LABEL_31;
      }
      if (v17 == -1) {
        uint64_t v18 = (void *)v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = v8 + 16 * v15;
      uint64_t v17 = *(void *)v16;
      ++v19;
    }
    while (*(void *)v16);
    if (v18)
    {
      void *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v11 = *a3;
      uint64_t v16 = (uint64_t)v18;
    }
  }
  *a3 = 0;
  uint64_t v20 = *(void *)v16;
  *(void *)uint64_t v16 = v11;
  if (v20) {
    CFRelease(*(CFTypeRef *)(v20 + 8));
  }
  *(_DWORD *)(v16 + 8) = *a4;
  uint64_t v21 = *a2;
  if (*a2) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v24 = *a2;
  if (*a2) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_24:
      uint64_t v16 = WTF::HashTable<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>>::expand(a2, (uint64_t *)v16);
      uint64_t v24 = *a2;
      if (*a2) {
        unint64_t v27 = *(unsigned int *)(v24 - 4);
      }
      else {
        unint64_t v27 = 0;
      }
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_24;
  }
  uint64_t v29 = v24 + 16 * v27;
  char v28 = 1;
LABEL_31:
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v29;
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = v28;
}

uint64_t WTF::HashTable<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      unint64_t v12 = (uint64_t *)(v4 + 16 * v10);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          uint64_t v23 = v14 + 16 * v21;
          *(void *)uint64_t v23 = 0;
          uint64_t v24 = *v12;
          *unint64_t v12 = 0;
          *(void *)uint64_t v23 = v24;
          *(_DWORD *)(v23 + 8) = *(_DWORD *)(v4 + 16 * v10 + 8);
          uint64_t v25 = *v12;
          *unint64_t v12 = 0;
          if (v25) {
            CFRelease(*(CFTypeRef *)(v25 + 8));
          }
          if (v12 == a2) {
            uint64_t v11 = v23;
          }
        }
        else
        {
          *unint64_t v12 = 0;
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebUserContentController::RemoveAllUserStyleSheets>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 2862;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v14 = v6;
  IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v6, *a2);
  LOBYTE(v12) = 0;
  char v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          uint64_t v23 = (uint64_t *)(v14 + 16 * v21);
          uint64_t v24 = (_DWORD *)v23[1];
          v23[1] = 0;
          if (v24)
          {
            if (v24[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v24 + 8))(v24);
            }
            else {
              --v24[2];
            }
          }
          uint64_t *v23 = *v10;
          uint64_t v25 = v4 + 16 * v9;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          char v13 = *(_DWORD **)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (!v13) {
            goto LABEL_25;
          }
          if (v13[2] == 1)
          {
LABEL_24:
            (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
            goto LABEL_25;
          }
          --v13[2];
        }
        else
        {
          uint64_t v12 = v4 + 16 * v9;
          char v13 = *(_DWORD **)(v12 + 8);
          *(void *)(v12 + 8) = 0;
          if (v13)
          {
            if (v13[2] == 1) {
              goto LABEL_24;
            }
            --v13[2];
          }
        }
      }
LABEL_25:
      if (++v9 == v5) {
        goto LABEL_28;
      }
    }
  }
  if (v4)
  {
LABEL_28:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

_DWORD *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>::customDeleteBucket(void *a1)
{
  uint64_t result = (_DWORD *)a1[1];
  *a1 = -1;
  a1[1] = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      --result[2];
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebUserContentController::RemoveAllUserScriptMessageHandlers>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v7 = 2859;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  unint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void *WTF::Detail::CallableWrapper<WebKit::WebUserContentControllerProxy::didPostMessage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FrameInfoData &&,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(unsigned char const,WTF::String const&)> &&)::$_0,void,API::SerializedScriptValue *,WTF::String const>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E5698;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebUserContentControllerProxy::didPostMessage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FrameInfoData &&,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(unsigned char const,WTF::String const&)> &&)::$_0,void,API::SerializedScriptValue *,WTF::String const>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E5698;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebUserContentControllerProxy::didPostMessage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FrameInfoData &&,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(unsigned char const,WTF::String const&)> &&)::$_0,void,API::SerializedScriptValue *,WTF::String const>::call(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void, void, void *))(*(void *)v3 + 16))(v3, 0, 0, a3);
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return (WTF::StringImpl *)v4(v3);
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(v6 + 8);
    uint64_t v8 = *(unsigned int *)(v6 + 20);
    uint64_t v11 = 0;
    uint64_t v9 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v9 + 16))(v9, v7, v8, &v11);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t *WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = result;
  *uint64_t result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  if (a3 < 0x2222223)
  {
    uint64_t v5 = 120 * a3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(120 * a3));
    *((_DWORD *)v3 + 2) = (v5 & 0xFFFFFFF8) / 0x78;
    *uint64_t v3 = v6;
    uint64_t v7 = a2 + v5;
    unsigned int v8 = *((_DWORD *)v3 + 3);
    do
    {
      uint64_t v9 = *v3;
      uint64_t v10 = *(_DWORD **)a2;
      if (*(void *)a2) {
        *v10 += 2;
      }
      uint64_t v11 = v9 + 120 * v8;
      *(void *)uint64_t v11 = v10;
      uint64_t v12 = *(atomic_uint **)(a2 + 8);
      if (v12) {
        atomic_fetch_add(v12, 1u);
      }
      *(void *)(v11 + 8) = v12;
      long long v13 = *(_OWORD *)(a2 + 16);
      long long v14 = *(_OWORD *)(a2 + 32);
      long long v15 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(v11 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v11 + 64) = v15;
      *(_OWORD *)(v11 + ++*(_DWORD *)(this + 16) = v13;
      *(_OWORD *)(v11 + 32) = v14;
      char v16 = *(_DWORD **)(a2 + 80);
      if (v16) {
        *v16 += 2;
      }
      uint64_t v17 = v9 + 120 * v8;
      *(void *)(v17 + 80) = v16;
      long long v18 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(v17 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(v17 + 88) = v18;
      unsigned int v8 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v8;
      a2 += 120;
    }
    while (a2 != v7);
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::Authenticator::handleRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (WTF::RunLoop *)WebKit::WebAuthenticationRequestData::operator=(a1 + 32, a2);
  WTF::RunLoop::main(v3);
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(a1 + 16), a1);
  uint64_t v4 = *(atomic_uint **)(a1 + 16);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v5 = &unk_1EE9E5988;
  v5[1] = v4;
  void v5[2] = a1;
  uint64_t v7 = v5;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v7;
  if (v7) {
    return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  return result;
}

uint64_t WebKit::WebAuthenticationRequestData::operator=(uint64_t a1, uint64_t a2)
{
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)a1, a2);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1> const&>(a1 + 24, a2 + 24);
  WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)(a1 + 328), (atomic_uint **)(a2 + 328));
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  uint64_t v4 = *(void *)(a2 + 344);
  if (v4) {
    CFRetain(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = *(void *)(a1 + 344);
  *(void *)(a1 + 344) = v4;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  long long v6 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 361) = *(_OWORD *)(a2 + 361);
  *(_OWORD *)(a1 + 352) = v6;
  *(_WORD *)(a1 + 384) = *(_WORD *)(a2 + 384);
  WebCore::ResourceRequestBase::operator=(a1 + 392, a2 + 392);
  uint64_t v7 = *(void *)(a2 + 584);
  if (v7) {
    CFRetain(*(CFTypeRef *)(a2 + 584));
  }
  unsigned int v8 = *(const void **)(a1 + 584);
  *(void *)(a1 + 584) = v7;
  if (v8) {
    CFRelease(v8);
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 592, a2 + 592);
  WTF::String::operator=((uint64_t *)(a1 + 624), (WTF::StringImpl **)(a2 + 624));
  long long v9 = *(_OWORD *)(a2 + 662);
  long long v10 = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v10;
  *(_OWORD *)(a1 + 662) = v9;
  WTF::String::operator=((uint64_t *)(a1 + 680), (WTF::StringImpl **)(a2 + 680));
  WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)(a1 + 688), (atomic_uint **)(a2 + 688));
  *(_WORD *)(a1 + 696) = *(_WORD *)(a2 + 696);
  std::__optional_storage_base<WebCore::SecurityOriginData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::SecurityOriginData,false> const&>(a1 + 704, a2 + 704);
  return a1;
}

void *WebKit::Authenticator::receiveRespond(void *result)
{
  uint64_t v1 = result[3];
  if (v1)
  {
    uint64_t result = *(void **)(v1 + 8);
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*result + 16))();
    }
  }
  return result;
}

WebKit::HidService *WebKit::AuthenticatorTransportService::create@<X0>(int a1@<W0>, WebKit::AuthenticatorTransportServiceObserver *a2@<X1>, WebKit::HidService **a3@<X8>)
{
  switch(a1)
  {
    case 0:
      uint64_t v7 = (WebKit::HidService *)WTF::fastMalloc((WTF *)0x28);
      uint64_t result = WebKit::HidService::HidService(v7, a2);
      break;
    case 1:
      unsigned int v8 = (WebKit::NfcService *)WTF::fastMalloc((WTF *)0x48);
      uint64_t result = WebKit::NfcService::NfcService(v8, a2);
      break;
    case 6:
      long long v9 = (WebKit::CcidService *)WTF::fastMalloc((WTF *)0x58);
      uint64_t result = WebKit::CcidService::CcidService(v9, a2);
      break;
    default:
      uint64_t v5 = (WebKit::LocalService *)WTF::fastMalloc((WTF *)0x18);
      uint64_t result = WebKit::LocalService::LocalService(v5, a2);
      break;
  }
  *a3 = result;
  return result;
}

uint64_t WebKit::AuthenticatorTransportService::startDiscovery(WebKit::AuthenticatorTransportService *this)
{
  WTF::RunLoop::main(this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v2 = (atomic_uint *)*((void *)this + 1);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v3 = &unk_1EE9E59B0;
  v3[1] = v2;
  uint64_t v5 = (uint64_t)v3;
  WTF::RunLoop::dispatch();
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WebKit::AuthenticatorTransportService::restartDiscovery(WebKit::AuthenticatorTransportService *this)
{
  WTF::RunLoop::main(this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v2 = (atomic_uint *)*((void *)this + 1);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v3 = &unk_1EE9E59D8;
  v3[1] = v2;
  uint64_t v5 = (uint64_t)v3;
  WTF::RunLoop::dispatch();
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

BOOL WebKit::getClientDataType(uint64_t a1)
{
  return *(_DWORD *)(a1 + 304) != 0;
}

void WebKit::WebAuthenticatorCoordinatorProxy::~WebAuthenticatorCoordinatorProxy(WebKit::WebAuthenticatorCoordinatorProxy *this)
{
  *(void *)this = &unk_1EE9E56C0;
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9E5A00;
  uint64_t v11 = v2;
  WebKit::WebAuthenticatorCoordinatorProxy::cancel(this, (uint64_t *)&v11);
  uint64_t v3 = (uint64_t)v11;
  uint64_t v11 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  IPC::MessageReceiverMap::removeMessageReceiver(*(void *)(*((void *)this + 2) + 256) + 152, 0x9Eu, *(void *)(*(void *)(*((void *)this + 2) + 32) + 1928));
  uint64_t v5 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  long long v6 = (const void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v7) {
    CFRelease(v7);
  }
  unsigned int v8 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v8) {
    CFRelease(v8);
  }
  long long v9 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebAuthenticatorCoordinatorProxy::~WebAuthenticatorCoordinatorProxy(this);

  WTF::fastFree(v1, v2);
}

void WebKit::WebAuthenticatorCoordinatorProxy::makeCredential(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  v23[0] = 0;
  v23[1] = 0;
  WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions((uint64_t)v24, a5);
  v24[74] = 0;
  uint64_t v13 = *(void *)(a1 + 16);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v13 + 24), v13 + 16);
  long long v14 = *(atomic_uint **)(v13 + 24);
  if (v14) {
    atomic_fetch_add(v14, 1u);
  }
  uint64_t v25 = v14;
  char v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 16) + 32) + 1928);
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  char v31 = 1;
  __int16 v32 = *a4;
  WTF::URL::URL((uint64_t)&v33, (uint64_t *)a4 + 1);
  WTF::URL::URL((uint64_t)v34, (uint64_t *)a4 + 6);
  v34[5] = *((void *)a4 + 11);
  long long v15 = *((_OWORD *)a4 + 6);
  *((_OWORD *)a4 + 6) = 0u;
  long long v35 = v15;
  *(void *)&long long v15 = *((void *)a4 + 14);
  *((void *)a4 + 14) = 0;
  uint64_t v36 = v15;
  uint64_t v16 = *((void *)a4 + 15);
  *((void *)a4 + 15) = 0;
  uint64_t v37 = v16;
  *(void *)&long long v15 = *((void *)a4 + 16);
  *((void *)a4 + ++*(_DWORD *)(this + 16) = 0;
  uint64_t v38 = v15;
  uint64_t v17 = *((void *)a4 + 17);
  *((void *)a4 + 17) = 0;
  uint64_t v39 = v17;
  *(void *)&long long v15 = *((void *)a4 + 18);
  *((void *)a4 + 18) = 0;
  uint64_t v40 = v15;
  LODWORD(v17) = *((_DWORD *)a4 + 38);
  char v42 = *((unsigned char *)a4 + 156);
  int v41 = v17;
  long long v18 = *((_OWORD *)a4 + 10);
  *((_OWORD *)a4 + 10) = 0u;
  long long v43 = v18;
  uint64_t v19 = *((void *)a4 + 22);
  uint64_t v20 = *((void *)a4 + 23);
  *((void *)a4 + 22) = 0;
  uint64_t v44 = v19;
  char v46 = *((unsigned char *)a4 + 192);
  uint64_t v45 = v20;
  uint64_t v21 = *((void *)a4 + 25);
  *((void *)a4 + 25) = 0;
  uint64_t v47 = v21;
  v48[0] = 0;
  int v49 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v48, (uint64_t)(a4 + 104));
  uint64_t v22 = *((void *)a4 + 30);
  *((void *)a4 + 30) = 0;
  uint64_t v50 = v22;
  long long v51 = *(_OWORD *)(a4 + 124);
  v52[0] = *(_OWORD *)(a4 + 132);
  *(_OWORD *)((char *)v52 + 14) = *(_OWORD *)(a4 + 139);
  v52[2] = 0u;
  char v53 = a6;
  char v54 = 1;
  char v55 = 0;
  char v56 = 0;
  WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(a1, (uint64_t)v23, a7);
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)v23);
}

void WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v7 = *(_DWORD *)(a2 + 616);
  if (v7)
  {
    if (v7 != 1)
    {
      long long v18 = (atomic_uint *)std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_29;
    }
    int v10 = 0;
    long long v9 = (_DWORD **)MEMORY[0x1E4F30980];
    unsigned int v8 = (_DWORD **)MEMORY[0x1E4F30980];
  }
  else
  {
    unsigned int v8 = (_DWORD **)(a2 + 592);
    long long v9 = (_DWORD **)(a2 + 600);
    int v10 = *(_DWORD *)(a2 + 608);
  }
  API::SecurityOrigin::create(v8, v9, v10, &v27);
  if (*(_DWORD *)(a2 + 320))
  {
    int v3 = 0;
    char v26 = 0;
  }
  else
  {
    int v3 = 0;
    int v11 = *(unsigned __int8 *)(a2 + 697);
    int v12 = *(unsigned __int8 *)(a2 + 696);
    char v26 = 0;
    if (v11 && v12 == 3)
    {
      WTF::String::operator=((uint64_t *)&v26, (WTF::StringImpl **)(a2 + 56));
      int v3 = 1;
    }
  }
  uint64_t v28 = a1;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v13 = *(atomic_uint **)(a1 + 8);
  if (v13) {
    atomic_fetch_add(v13, 1u);
  }
  uint64_t v29 = v13;
  WebKit::WebAuthenticationRequestData::WebAuthenticationRequestData((uint64_t)v30, (uint64_t *)a2);
  uint64_t v14 = *a3;
  *a3 = 0;
  uint64_t v31 = v14;
  long long v15 = (void *)WTF::fastMalloc((WTF *)0x308);
  *long long v15 = &unk_1EE9E5A28;
  v15[1] = v28;
  uint64_t v16 = v29;
  uint64_t v29 = 0;
  void v15[2] = v16;
  WebKit::WebAuthenticationRequestData::WebAuthenticationRequestData((uint64_t)(v15 + 3), v30);
  v15[96] = v31;
  uint64_t v25 = v15;
  uint64_t v31 = 0;
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)v30);
  long long v18 = v29;
  uint64_t v29 = 0;
  if (v18)
  {
    unsigned int add = atomic_fetch_add(v18, 0xFFFFFFFF);
    if (add == 1)
    {
LABEL_29:
      atomic_store(add, (unsigned int *)v18);
      WTF::fastFree((WTF *)v18, v17);
      if (v3) {
        goto LABEL_15;
      }
LABEL_17:
      uint64_t v21 = v25;
      (*(void (**)(void *, uint64_t))(*v25 + 16))(v25, 1);
LABEL_18:
      (*(void (**)(void *))(*v21 + 8))(v21);
      goto LABEL_19;
    }
  }
  if (!v3) {
    goto LABEL_17;
  }
LABEL_15:
  uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 16) + 312) + 352);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v20 + 32))(v20) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v20 + 40))(v20))
  {
    goto LABEL_17;
  }
  (*(void (**)(void, WTF::StringImpl **, void **))(**(void **)(*(void *)(a1 + 16) + 104) + 560))(*(void *)(*(void *)(a1 + 16) + 104), &v26, &v25);
  uint64_t v21 = v25;
  uint64_t v25 = 0;
  if (v21) {
    goto LABEL_18;
  }
LABEL_19:
  uint64_t v23 = v26;
  char v26 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v22);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t v24 = v27;
  uint64_t v27 = 0;
  if (v24) {
    CFRelease(*(CFTypeRef *)(v24 + 8));
  }
}

void WebKit::WebAuthenticatorCoordinatorProxy::getAssertion(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4, uint64_t a5, char a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  v25[0] = 0;
  v25[1] = 0;
  std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions>::__alt[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions>((uint64_t)v26, a5);
  v26[74] = 1;
  uint64_t v15 = *(void *)(a1 + 16);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v15 + 24), v15 + 16);
  uint64_t v16 = *(atomic_uint **)(v15 + 24);
  if (v16) {
    atomic_fetch_add(v16, 1u);
  }
  uint64_t v27 = v16;
  char v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 16) + 32) + 1928);
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  char v33 = 1;
  __int16 v34 = *a4;
  WTF::URL::URL((uint64_t)&v35, (uint64_t *)a4 + 1);
  WTF::URL::URL((uint64_t)v36, (uint64_t *)a4 + 6);
  v36[5] = *((void *)a4 + 11);
  long long v17 = *((_OWORD *)a4 + 6);
  *((_OWORD *)a4 + 6) = 0u;
  long long v37 = v17;
  *(void *)&long long v17 = *((void *)a4 + 14);
  *((void *)a4 + 14) = 0;
  uint64_t v38 = v17;
  uint64_t v18 = *((void *)a4 + 15);
  *((void *)a4 + 15) = 0;
  uint64_t v39 = v18;
  *(void *)&long long v17 = *((void *)a4 + 16);
  *((void *)a4 + ++*(_DWORD *)(this + 16) = 0;
  uint64_t v40 = v17;
  uint64_t v19 = *((void *)a4 + 17);
  *((void *)a4 + 17) = 0;
  uint64_t v41 = v19;
  *(void *)&long long v17 = *((void *)a4 + 18);
  *((void *)a4 + 18) = 0;
  uint64_t v42 = v17;
  LODWORD(v19) = *((_DWORD *)a4 + 38);
  char v44 = *((unsigned char *)a4 + 156);
  int v43 = v19;
  long long v20 = *((_OWORD *)a4 + 10);
  *((_OWORD *)a4 + 10) = 0u;
  long long v45 = v20;
  uint64_t v21 = *((void *)a4 + 22);
  uint64_t v22 = *((void *)a4 + 23);
  *((void *)a4 + 22) = 0;
  uint64_t v46 = v21;
  char v48 = *((unsigned char *)a4 + 192);
  uint64_t v47 = v22;
  uint64_t v23 = *((void *)a4 + 25);
  *((void *)a4 + 25) = 0;
  uint64_t v49 = v23;
  v50[0] = 0;
  int v51 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v50, (uint64_t)(a4 + 104));
  uint64_t v24 = *((void *)a4 + 30);
  *((void *)a4 + 30) = 0;
  uint64_t v52 = v24;
  long long v53 = *(_OWORD *)(a4 + 124);
  v54[0] = *(_OWORD *)(a4 + 132);
  *(_OWORD *)((char *)v54 + 14) = *(_OWORD *)(a4 + 139);
  v54[2] = 0u;
  char v55 = a6;
  char v56 = 1;
  v57[0] = 0;
  char v59 = 0;
  if (*(unsigned char *)(a7 + 32))
  {
    int v58 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v57, a7);
    char v59 = 1;
  }
  WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(a1, (uint64_t)v25, a8);
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)v25);
}

uint64_t WebKit::MockAuthenticatorManager::MockAuthenticatorManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = WebKit::AuthenticatorManager::AuthenticatorManager((WebKit::AuthenticatorManager *)a1);
  *(void *)uint64_t v4 = &unk_1EE9E56F8;
  *((void *)v4 + 2) = &unk_1EE9E57A0;
  *((unsigned char *)v4 + 856) = *(unsigned char *)a2;
  std::__optional_copy_assign_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)v4 + 864, a2 + 8);
  *(unsigned char *)(a1 + 912) = 0;
  *(unsigned char *)(a1 + 944) = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    *(void *)(a1 + 912) = 0;
    *(void *)(a1 + 920) = 0;
    uint64_t v5 = *(void *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *(void *)(a1 + 912) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    *(_DWORD *)(a1 + 920) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = 0;
    *(_DWORD *)(a1 + 924) = v5;
    uint64_t v6 = *(void *)(a2 + 72);
    *(_DWORD *)(a1 + 935) = *(_DWORD *)(a2 + 79);
    *(void *)(a1 + 928) = v6;
    *(unsigned char *)(a1 + 944) = 1;
  }
  std::__optional_copy_assign_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_assign_base[abi:sn180100](a1 + 952, a2 + 96);
  *(unsigned char *)(a1 + 992) = 0;
  *(unsigned char *)(a1 + 1008) = 0;
  if (*(unsigned char *)(a2 + 152))
  {
    *(void *)(a1 + 992) = 0;
    *(void *)(a1 + 1000) = 0;
    uint64_t v7 = *(void *)(a2 + 136);
    *(void *)(a2 + 136) = 0;
    *(void *)(a1 + 992) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 144);
    *(_DWORD *)(a2 + 144) = 0;
    *(_DWORD *)(a1 + 1000) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 148);
    *(_DWORD *)(a2 + 148) = 0;
    *(_DWORD *)(a1 + 1004) = v7;
    *(unsigned char *)(a1 + 1008) = 1;
  }
  return a1;
}

uint64_t WebKit::MockAuthenticatorManager::createService@<X0>(uint64_t a1@<X0>, int a2@<W1>, WebKit::AuthenticatorTransportServiceObserver *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = (unsigned char *)(a1 + 856);
  switch(a2)
  {
    case 0:
      uint64_t v7 = WTF::fastMalloc((WTF *)0xC8);
      int v10 = WebKit::HidService::HidService((WebKit::HidService *)v7, a3);
      *(void *)int v10 = &unk_1EE9E5848;
      *((unsigned char *)v10 + ++*(_DWORD *)(this + 40) = *(unsigned char *)(a1 + 856);
      *((unsigned char *)v10 + 48) = 0;
      uint64_t v11 = (uint64_t)v10 + 48;
      *(unsigned char *)(v7 + 88) = 0;
      if (*(unsigned char *)(a1 + 904))
      {
        std::construct_at[abi:sn180100]<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,WebCore::MockWebAuthenticationConfiguration::LocalConfiguration const&,WebCore::MockWebAuthenticationConfiguration::LocalConfiguration*>(v11, a1 + 864);
        *(unsigned char *)(v7 + 88) = 1;
      }
      *(unsigned char *)(v7 + 96) = 0;
      *(unsigned char *)(v7 + 128) = 0;
      if (*(unsigned char *)(a1 + 944))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v7 + 96, a1 + 912);
        uint64_t v12 = *(void *)(a1 + 928);
        *(_DWORD *)(v7 + 119) = *(_DWORD *)(a1 + 935);
        *(void *)(v7 + 112) = v12;
        *(unsigned char *)(v7 + 128) = 1;
      }
      std::__optional_move_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_move_base[abi:sn180100](v7 + 136, a1 + 952);
      *(unsigned char *)(v7 + 176) = 0;
      uint64_t result = v7 + 176;
      *(unsigned char *)(v7 + 192) = 0;
      if (*(unsigned char *)(a1 + 1008))
      {
        uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(result, a1 + 992);
        *(unsigned char *)(v7 + 192) = 1;
      }
      break;
    case 1:
      uint64_t v7 = WTF::fastMalloc((WTF *)0xE8);
      uint64_t result = (uint64_t)WebKit::MockNfcService::MockNfcService((WebKit::NfcService *)v7, a3, v6);
      break;
    case 6:
      uint64_t v7 = WTF::fastMalloc((WTF *)0xF8);
      uint64_t result = (uint64_t)WebKit::MockCcidService::MockCcidService((WebKit::CcidService *)v7, a3, v6);
      break;
    default:
      uint64_t v7 = WTF::fastMalloc((WTF *)0xB8);
      uint64_t result = (uint64_t)WebKit::MockLocalService::MockLocalService((WebKit::LocalService *)v7, a3, v6);
      break;
  }
  *a4 = v7;
  return result;
}

uint64_t WebKit::MockAuthenticatorManager::respondReceivedInternal(uint64_t result, WTF::RefCountedBase *a2)
{
  if (!*(unsigned char *)(result + 856))
  {
    uint64_t v2 = result;
    WebKit::AuthenticatorManager::invokePendingCompletionHandler(result, a2);
    WebKit::AuthenticatorManager::clearStateAsync((WebKit::AuthenticatorManager *)v2);
    return WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v2 + 784));
  }
  return result;
}

WTF *WebKit::MockAuthenticatorManager::filterTransports(unsigned char *a1, uint64_t *a2)
{
  if (!a1[984])
  {
    unsigned __int8 v15 = 1;
    uint64_t v6 = (WTF *)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::find<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a2, &v15);
    if (*a2)
    {
      uint64_t v7 = (WTF *)(*a2 + *(unsigned int *)(*a2 - 4));
      if (v7 == v6) {
        goto LABEL_2;
      }
    }
    else
    {
      if (!v6) {
        goto LABEL_2;
      }
      uint64_t v7 = 0;
    }
    if (v7 != v6) {
      WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::remove((WTF *)a2, v6);
    }
  }
LABEL_2:
  if (a1[904]) {
    goto LABEL_3;
  }
  unsigned __int8 v14 = 3;
  unsigned int v8 = (WTF *)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::find<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a2, &v14);
  if (*a2)
  {
    long long v9 = (WTF *)(*a2 + *(unsigned int *)(*a2 - 4));
    if (v9 == v8) {
      goto LABEL_3;
    }
  }
  else
  {
    if (!v8) {
      goto LABEL_3;
    }
    long long v9 = 0;
  }
  if (v9 != v8) {
    WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::remove((WTF *)a2, v8);
  }
LABEL_3:
  if (a1[1008]) {
    goto LABEL_4;
  }
  unsigned __int8 v13 = 6;
  int v10 = (WTF *)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::find<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a2, &v13);
  if (*a2)
  {
    uint64_t v11 = (WTF *)(*a2 + *(unsigned int *)(*a2 - 4));
    if (v11 == v10) {
      goto LABEL_4;
    }
  }
  else
  {
    if (!v10) {
      goto LABEL_4;
    }
    uint64_t v11 = 0;
  }
  if (v11 != v10) {
    WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::remove((WTF *)a2, v10);
  }
LABEL_4:
  unsigned __int8 v12 = 2;
  uint64_t result = (WTF *)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::find<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a2, &v12);
  if (*a2)
  {
    uint64_t v5 = (WTF *)(*a2 + *(unsigned int *)(*a2 - 4));
    if (v5 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v5 = 0;
  }
  if (v5 != result) {
    return (WTF *)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::remove((WTF *)a2, result);
  }
  return result;
}

uint64_t WebKit::MockHidConnection::initialize(uint64_t this)
{
  *(unsigned char *)(this + 72) = 1;
  return this;
}

uint64_t WebKit::MockHidConnection::terminate(uint64_t this)
{
  *(unsigned char *)(this + 72) = 0;
  return this;
}

uint64_t WebKit::MockHidConnection::sendSync(uint64_t result)
{
  if (*(unsigned char *)(result + 176))
  {
    if (*(unsigned char *)(result + 168))
    {
      fido::FidoHidMessage::createFromSerializedData();
      std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)v1);
    }
    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void WebKit::MockHidConnection::send(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 80), a1);
  uint64_t v6 = *(atomic_uint **)(a1 + 80);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  uint64_t v7 = *a2;
  *a2 = 0;
  uint64_t v8 = *a3;
  *a3 = 0;
  uint64_t v9 = a2[1];
  a2[1] = 0;
  int v10 = malloc_type_malloc(0x40uLL, 0x10F00407B933D54uLL);
  void *v10 = MEMORY[0x1E4F14398];
  v10[1] = 50331650;
  uint64_t v10[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void *)#1}::__invoke;
  void v10[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::descriptor;
  v10[4] = v6;
  v10[5] = v7;
  v10[6] = v9;
  v10[7] = v8;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, v10);

  _Block_release(v10);
}

WTF *WebKit::MockHidConnection::registerDataReceivedCallbackInternal(WTF *this, void *a2)
{
  if (!*((unsigned char *)this + 176)) {
    goto LABEL_15;
  }
  uint64_t v2 = this;
  if ((*((unsigned char *)this + 160) == 0) != (*((unsigned char *)this + 304) != 0)
    && (*((unsigned char *)this + 161) == 0) != (*((unsigned char *)this + 305) != 0)
    && *((unsigned char *)this + 162) == 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    WebKit::HidConnection::receiveReport((uint64_t)this, (uint64_t *)&v4);
    this = v4;
    if (v4)
    {
      uint64_t v4 = 0;
      LODWORD(v5) = 0;
      this = (WTF *)WTF::fastFree(this, v3);
    }
    if (*((unsigned char *)v2 + 176))
    {
      if (*((unsigned char *)v2 + 166))
      {
        *((unsigned char *)v2 + 166) = 0;
        *((unsigned char *)v2 + 162) = 0;
        return (WTF *)WebKit::MockHidConnection::continueFeedReports(v2);
      }
      return this;
    }
LABEL_15:
    __break(1u);
    return this;
  }
  if (!*((unsigned char *)this + 165))
  {
    return WebKit::MockHidConnection::feedReports(this, a2);
  }
  return this;
}

WTF *WebKit::MockHidConnection::feedReports(WebKit::MockHidConnection *this, void *a2)
{
  v84[1] = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 305))
  {
    uint64_t v82 = 17;
    uint64_t v4 = WTF::fastMalloc((WTF *)0x11);
    int64_t v81 = (WTF *)v4;
    size_t v5 = *((unsigned int *)this + 83);
    if (v5)
    {
      uint64_t v6 = (const void *)*((void *)this + 40);
      if (v5 >= 0x12)
      {
        if (v5 <= 0x16) {
          uint64_t v25 = 22;
        }
        else {
          uint64_t v25 = *((unsigned int *)this + 83);
        }
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v81, (WTF::FastMalloc *)v25);
        uint64_t v7 = HIDWORD(v82);
        if (v5 < HIDWORD(v82)) {
          goto LABEL_144;
        }
        uint64_t v4 = (uint64_t)v81;
      }
      else
      {
        uint64_t v7 = 0;
      }
      memcpy((void *)(v4 + v7), v6, v5);
      HIDWORD(v82) = v5;
    }
    if (!*((unsigned char *)this + 176)) {
      goto LABEL_139;
    }
    if ((*((unsigned char *)this + 160) == 0) == (*((unsigned char *)this + 304) != 0)
      || (*((unsigned char *)this + 161) == 0) == (*((unsigned char *)this + 305) != 0)
      || *((unsigned char *)this + 162) != 6)
    {
      goto LABEL_45;
    }
    if (v5)
    {
      --*(unsigned char *)v81;
LABEL_45:
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((unsigned int *)&v81, (WTF::FastMalloc *)0x11);
      if (HIDWORD(v82) < v5) {
        goto LABEL_139;
      }
      if (HIDWORD(v82) - v5 <= 3) {
        goto LABEL_139;
      }
      WTF::cryptographicallyRandomValues();
      if (!*((unsigned char *)this + 176)) {
        goto LABEL_139;
      }
      fido::FidoHidInitPacket::FidoHidInitPacket();
      fido::FidoHidInitPacket::getSerializedData((uint64_t *)&v61, (fido::FidoHidInitPacket *)&v64);
      WebKit::HidConnection::receiveReport((uint64_t)this, (uint64_t *)&v61);
      char v26 = v61;
      if (v61)
      {
        uint64_t v61 = 0;
        LODWORD(v62) = 0;
        WTF::fastFree(v26, a2);
      }
      if (!*((unsigned char *)this + 176)) {
        goto LABEL_139;
      }
      if (*((unsigned char *)this + 166))
      {
        *((unsigned char *)this + 166) = 0;
        *((unsigned char *)this + 162) = 0;
        WebKit::MockHidConnection::continueFeedReports(this);
      }
      uint64_t v64 = &unk_1EE9E5960;
      uint64_t v27 = v65;
      if (v65)
      {
        uint64_t v65 = 0;
        int v66 = 0;
        WTF::fastFree(v27, a2);
      }
      uint64_t result = v81;
      if (v81)
      {
        int64_t v81 = 0;
        LODWORD(v82) = 0;
        return (WTF *)WTF::fastFree(result, a2);
      }
      return result;
    }
LABEL_144:
    __break(0xC471u);
    JUMPOUT(0x198FD83C0);
  }
  LOBYTE(v81) = 0;
  char v83 = 0;
  if (!*((unsigned char *)this + 304))
  {
    double v79 = 0;
    size_t v80 = 0;
    if (*((unsigned char *)this + 176))
    {
      if (*((unsigned char *)this + 167))
      {
        uint64_t v8 = 0;
        v84[0] = 0x100000000;
        uint64_t v62 = 0;
        uint64_t v63 = 0;
        uint64_t v61 = (WTF *)&v62;
        do
        {
          std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__emplace_hint_unique_key_args<fido::ProtocolVersion,fido::ProtocolVersion const&>((uint64_t **)&v61, (uint64_t *)&v62, (int *)((char *)v84 + v8), (void *)((char *)v84 + v8));
          v8 += 4;
        }
        while (v8 != 8);
        size_t v60 = 0x1000000010;
        char v59 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        bzero(v59, 0x10uLL);
        fido::AuthenticatorGetInfoResponse::AuthenticatorGetInfoResponse();
        fido::encodeAsCBOR((uint64_t *)&v77, (fido *)&v64, v9);
        uint64_t v11 = v79;
        if (v79)
        {
          double v79 = 0;
          LODWORD(v80) = 0;
          WTF::fastFree(v11, v10);
        }
        double v79 = v77;
        size_t v12 = v78;
        uint64_t v77 = 0;
        size_t v78 = 0;
        size_t v80 = v12;
        if (v76)
        {
          unsigned __int8 v13 = v74;
          if (v74)
          {
            double v74 = 0;
            int v75 = 0;
            WTF::fastFree(v13, v10);
          }
        }
        if (v73) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v72, v10);
        }
        if (v71)
        {
          uint64_t v57 = v69;
          if (v69)
          {
            uint64_t v69 = 0;
            int v70 = 0;
            WTF::fastFree(v57, v10);
          }
        }
        unsigned __int8 v14 = v67;
        if (v67)
        {
          long long v67 = 0;
          int v68 = 0;
          WTF::fastFree(v14, v10);
        }
        std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy((uint64_t)&v64, v65);
        uint64_t v16 = v59;
        if (v59)
        {
          char v59 = 0;
          LODWORD(v60) = 0;
          WTF::fastFree(v16, v15);
        }
        long long v17 = v62;
        uint64_t v18 = &v61;
        goto LABEL_78;
      }
      LODWORD(v59) = 0;
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      uint64_t v61 = (WTF *)&v62;
      std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__emplace_hint_unique_key_args<fido::ProtocolVersion,fido::ProtocolVersion const&>((uint64_t **)&v61, (uint64_t *)&v62, (int *)&v59, &v59);
      uint64_t v77 = 0;
      size_t v78 = 0x1000000000;
      char v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      LODWORD(v78) = 16;
      uint64_t v77 = v28;
      bzero(v28, HIDWORD(v78));
      fido::AuthenticatorGetInfoResponse::AuthenticatorGetInfoResponse();
      uint64_t v30 = v77;
      if (v77)
      {
        uint64_t v77 = 0;
        LODWORD(v78) = 0;
        WTF::fastFree(v30, v29);
      }
      std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy((uint64_t)&v61, v62);
      LOWORD(v61) = 256;
      HIDWORD(v61) = 2;
      LOBYTE(v62) = 1;
      HIDWORD(v62) = 2;
      if (*((unsigned char *)this + 176))
      {
        if (!*((unsigned char *)this + 169)) {
          goto LABEL_149;
        }
        LOBYTE(v59) = 1;
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v77, (char *)&v59, (WTF *)1);
        fido::AuthenticatorGetInfoResponse::setPinProtocols();
        uint64_t v32 = v77;
        if (v77)
        {
          uint64_t v77 = 0;
          LODWORD(v78) = 0;
          WTF::fastFree(v32, v31);
        }
        fido::AuthenticatorSupportedOptions::setClientPinAvailability();
        if (*((unsigned char *)this + 176))
        {
LABEL_149:
          if (*((unsigned char *)this + 170)) {
            fido::AuthenticatorSupportedOptions::setUserVerificationAvailability();
          }
          fido::AuthenticatorGetInfoResponse::setOptions();
          fido::encodeAsCBOR((uint64_t *)&v77, (fido *)&v64, v33);
          __int16 v34 = v79;
          if (v79)
          {
            double v79 = 0;
            LODWORD(v80) = 0;
            WTF::fastFree(v34, a2);
          }
          double v79 = v77;
          size_t v80 = v78;
          if (v76)
          {
            uint64_t v35 = v74;
            if (v74)
            {
              double v74 = 0;
              int v75 = 0;
              WTF::fastFree(v35, a2);
            }
          }
          if (v73) {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v72, a2);
          }
          if (v71) {
            goto LABEL_140;
          }
          goto LABEL_75;
        }
      }
    }
    goto LABEL_139;
  }
  while (!*((unsigned char *)this + 176))
  {
    while (1)
    {
      do
      {
LABEL_139:
        __break(1u);
LABEL_140:
        int v58 = v69;
        if (v69)
        {
          uint64_t v69 = 0;
          int v70 = 0;
          WTF::fastFree(v58, a2);
        }
LABEL_75:
        uint64_t v36 = v67;
        if (v67)
        {
          long long v67 = 0;
          int v68 = 0;
          WTF::fastFree(v36, a2);
        }
        long long v17 = v65;
        uint64_t v18 = (WTF **)&v64;
LABEL_78:
        std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy((uint64_t)v18, v17);
        LOBYTE(v64) = 0;
        unsigned int v37 = HIDWORD(v80);
        if (HIDWORD(v80) == v80)
        {
          uint64_t v38 = (void **)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v79, (WTF::FastMalloc *)(HIDWORD(v80) + 1), (unint64_t)&v64);
          unsigned int v37 = HIDWORD(v80);
        }
        else
        {
          uint64_t v38 = &v64;
        }
        uint64_t v39 = v79;
        memmove((char *)v79 + 1, v79, v37);
        *(unsigned char *)uint64_t v39 = *(unsigned char *)v38;
        ++HIDWORD(v80);
      }
      while (!*((unsigned char *)this + 176));
      if (((*((unsigned char *)this + 160) == 0) == (*((unsigned char *)this + 304) != 0)
         || (*((unsigned char *)this + 161) == 0) == (*((unsigned char *)this + 305) != 0)
         || *((unsigned char *)this + 162) != 3)
        && *((unsigned char *)this + 163))
      {
        LOBYTE(v77) = 1;
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v61, (char *)&v77, (WTF *)1);
        fido::FidoHidMessage::create();
        std::__optional_storage_base<fido::FidoHidMessage,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<fido::FidoHidMessage,false>>((fido::FidoHidMessage *)&v81, (uint64_t)&v64);
        std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v64);
        uint64_t v40 = v61;
        if (v61)
        {
          uint64_t v61 = 0;
          LODWORD(v62) = 0;
          WTF::fastFree(v40, a2);
        }
      }
      else
      {
        fido::FidoHidMessage::create();
        std::__optional_storage_base<fido::FidoHidMessage,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<fido::FidoHidMessage,false>>((fido::FidoHidMessage *)&v81, (uint64_t)&v64);
        std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v64);
      }
      uint64_t v41 = v79;
      if (v79)
      {
        double v79 = 0;
        LODWORD(v80) = 0;
        WTF::fastFree(v41, a2);
      }
      if (*((unsigned char *)this + 304) && *((unsigned char *)this + 305)) {
        break;
      }
LABEL_112:
      if (v83)
      {
        char v44 = 1;
        while (fido::FidoHidMessage::numPackets((fido::FidoHidMessage *)&v81))
        {
          if (!v83) {
            goto LABEL_139;
          }
          Packet = (WTF *)fido::FidoHidMessage::popNextPacket((uint64_t *)&v61, (fido::FidoHidMessage *)&v81);
          if ((v44 & 1) == 0)
          {
            if (!*((unsigned char *)this + 176)) {
              goto LABEL_139;
            }
            if ((*((unsigned char *)this + 160) == 0) != (*((unsigned char *)this + 304) != 0)
              && (*((unsigned char *)this + 161) == 0) != (*((unsigned char *)this + 305) != 0)
              && *((unsigned char *)this + 162) == 3)
            {
              uint64_t v77 = 0;
              size_t v78 = 0;
              fido::FidoHidContinuationPacket::FidoHidContinuationPacket();
              fido::FidoHidContinuationPacket::getSerializedData((uint64_t *)&v79, (fido::FidoHidContinuationPacket *)&v64);
              uint64_t v47 = v61;
              if (v61)
              {
                uint64_t v61 = 0;
                LODWORD(v62) = 0;
                WTF::fastFree(v47, v46);
              }
              uint64_t v61 = v79;
              char v48 = (WTF *)v80;
              double v79 = 0;
              size_t v80 = 0;
              uint64_t v62 = v48;
              uint64_t v64 = &unk_1EE9E5960;
              uint64_t v49 = v65;
              if (v65)
              {
                uint64_t v65 = 0;
                int v66 = 0;
                WTF::fastFree(v49, v46);
              }
              Packet = v77;
              if (v77)
              {
                uint64_t v77 = 0;
                LODWORD(v78) = 0;
                Packet = (WTF *)WTF::fastFree(Packet, v46);
              }
            }
          }
          WTF::RunLoop::main(Packet);
          uint64_t v50 = v61;
          int v51 = v62;
          uint64_t v61 = 0;
          uint64_t v62 = 0;
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 20, (uint64_t)this);
          uint64_t v52 = (atomic_uint *)*((void *)this + 10);
          if (v52) {
            atomic_fetch_add(v52, 1u);
          }
          long long v53 = (void *)WTF::fastMalloc((WTF *)0x20);
          void *v53 = &unk_1EE9E5A78;
          v53[1] = v50;
          v53[2] = v51;
          v53[3] = v52;
          uint64_t v64 = v53;
          WTF::RunLoop::dispatch();
          char v54 = v64;
          uint64_t v64 = 0;
          if (v54) {
            (*(void (**)(void *))(*(void *)v54 + 8))(v54);
          }
          char v55 = v61;
          if (v61)
          {
            uint64_t v61 = 0;
            LODWORD(v62) = 0;
            WTF::fastFree(v55, a2);
          }
          char v44 = 0;
          if (!v83) {
            goto LABEL_139;
          }
        }
        return std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v81);
      }
    }
  }
  if (!*((unsigned char *)this + 168))
  {
    if (!*((unsigned char *)this + 164))
    {
      if (*((unsigned char *)this + 160)
        && *((unsigned char *)this + 161)
        && *((unsigned char *)this + 162) == 5
        && (*((unsigned char *)this + 312) || *((unsigned char *)this + 313)))
      {
        LOBYTE(v79) = 43;
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v61, (char *)&v79, (WTF *)1);
        fido::FidoHidMessage::create();
        std::__optional_storage_base<fido::FidoHidMessage,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<fido::FidoHidMessage,false>>((fido::FidoHidMessage *)&v81, (uint64_t)&v64);
        std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v64);
      }
      else
      {
        if (!*((_DWORD *)this + 39))
        {
          __break(0xC471u);
          JUMPOUT(0x198FD83C8);
        }
        WTF::base64Decode();
        if (!*((unsigned char *)this + 176)) {
          goto LABEL_139;
        }
        uint64_t v42 = (WTF::StringImpl **)*((void *)this + 18);
        int v43 = *v42;
        *uint64_t v42 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2) {
            WTF::StringImpl::destroy(v43, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v43 -= 2;
          }
        }
        memmove(v42, v42 + 1, *((void *)this + 18) + 8 * *((unsigned int *)this + 39) - (void)(v42 + 1));
        --*((_DWORD *)this + 39);
        if (!*((unsigned char *)this + 176)) {
          goto LABEL_139;
        }
        if (*((unsigned char *)this + 163))
        {
          if (!(_BYTE)v63) {
            goto LABEL_139;
          }
        }
        else if (!(_BYTE)v63)
        {
          goto LABEL_139;
        }
        fido::FidoHidMessage::create();
        std::__optional_storage_base<fido::FidoHidMessage,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<fido::FidoHidMessage,false>>((fido::FidoHidMessage *)&v81, (uint64_t)&v64);
        std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v64);
        if (!(_BYTE)v63) {
          goto LABEL_112;
        }
      }
      char v56 = v61;
      if (v61)
      {
        uint64_t v61 = 0;
        LODWORD(v62) = 0;
        WTF::fastFree(v56, a2);
      }
      goto LABEL_112;
    }
    *((unsigned char *)this + 164) = 0;
    LOBYTE(v79) = 1;
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v61, (char *)&v79, (WTF *)1);
    fido::FidoHidInitPacket::FidoHidInitPacket();
    long long v20 = v61;
    if (v61)
    {
      uint64_t v61 = 0;
      LODWORD(v62) = 0;
      WTF::fastFree(v20, v19);
    }
    fido::FidoHidInitPacket::getSerializedData((uint64_t *)&v61, (fido::FidoHidInitPacket *)&v64);
    WebKit::HidConnection::receiveReport((uint64_t)this, (uint64_t *)&v61);
    uint64_t v22 = v61;
    if (v61)
    {
      uint64_t v61 = 0;
      LODWORD(v62) = 0;
      WTF::fastFree(v22, v21);
    }
    WebKit::MockHidConnection::continueFeedReports(this);
    uint64_t v64 = &unk_1EE9E5960;
    uint64_t v24 = v65;
    if (v65)
    {
      uint64_t v65 = 0;
      int v66 = 0;
      WTF::fastFree(v24, v23);
    }
  }
  return std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v81);
}

uint64_t WebKit::MockHidConnection::continueFeedReports(WebKit::MockHidConnection *this)
{
  WTF::RunLoop::main(this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 20, (uint64_t)this);
  uint64_t v2 = (atomic_uint *)*((void *)this + 10);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  int v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v3 = &unk_1EE9E5AA0;
  v3[1] = v2;
  uint64_t v5 = (uint64_t)v3;
  WTF::RunLoop::dispatch();
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

WebKit::HidService *WebKit::MockHidService::platformStartDiscovery(WebKit::HidService *this)
{
  if (*((unsigned char *)this + 128)) {
    return (WebKit::HidService *)WebKit::HidService::deviceAdded(this, 0);
  }
  return this;
}

uint64_t WebKit::MockHidService::createHidConnection@<X0>(WebKit::MockHidService *this@<X0>, __IOHIDDevice *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x150);
  *(void *)(v6 + 80) = 0;
  uint64_t v7 = WebKit::HidConnection::HidConnection((CFTypeRef *)v6, a2);
  CFTypeRef *v7 = &unk_1EE9E5800;
  *((unsigned char *)v7 + 88) = *((unsigned char *)this + 40);
  *((unsigned char *)v7 + 96) = 0;
  uint64_t v8 = (uint64_t)(v7 + 12);
  *(unsigned char *)(v6 + 136) = 0;
  if (*((unsigned char *)this + 88))
  {
    std::construct_at[abi:sn180100]<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,WebCore::MockWebAuthenticationConfiguration::LocalConfiguration const&,WebCore::MockWebAuthenticationConfiguration::LocalConfiguration*>(v8, (uint64_t)this + 48);
    *(unsigned char *)(v6 + 136) = 1;
  }
  *(unsigned char *)(v6 + 144) = 0;
  *(unsigned char *)(v6 + 176) = 0;
  if (*((unsigned char *)this + 128))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v6 + 144, (uint64_t)this + 96);
    uint64_t v9 = *((void *)this + 14);
    *(_DWORD *)(v6 + 167) = *(_DWORD *)((char *)this + 119);
    *(void *)(v6 + 160) = v9;
    *(unsigned char *)(v6 + 176) = 1;
  }
  std::__optional_move_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_move_base[abi:sn180100](v6 + 184, (uint64_t)this + 136);
  *(unsigned char *)(v6 + 224) = 0;
  uint64_t result = v6 + 224;
  *(unsigned char *)(v6 + 2++*(_DWORD *)(this + 40) = 0;
  if (*((unsigned char *)this + 192))
  {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(result, (uint64_t)this + 176);
    *(unsigned char *)(v6 + 2++*(_DWORD *)(this + 40) = 1;
  }
  *(unsigned char *)(v6 + 248) = 0;
  *(unsigned char *)(v6 + 296) = 0;
  *(_WORD *)(v6 + 304) = 0;
  *(_DWORD *)(v6 + 308) = -1;
  *(_WORD *)(v6 + 312) = 0;
  *(void *)(v6 + 320) = 0;
  *(void *)(v6 + 328) = 0;
  *a3 = v6;
  return result;
}

WTF *WebKit::CtapNfcDriver::transact(uint64_t a1, WTF **a2, WTF::RunLoop *a3)
{
  if (*(_DWORD *)(a1 + 16))
  {
    WebKit::NfcConnection::transact(*(void *)(a1 + 24), (uint64_t)a2, (uint64_t)&v22);
    (*(void (**)(void, WTF **))(**(void **)a3 + 16))(*(void *)a3, &v22);
    uint64_t result = v22;
    if (!v22) {
      return result;
    }
    uint64_t v22 = 0;
    LODWORD(v23) = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  LODWORD(v22) = 4224;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v25 = v7;
  uint64_t v23 = 0x10000;
  uint64_t v24 = v6;
  uint64_t v8 = *(void *)(a1 + 24);
  apdu::ApduCommand::getEncodedCommand((uint64_t *)&v14, (apdu::ApduCommand *)&v22);
  WebKit::NfcConnection::transact(v8, (uint64_t)&v14, (uint64_t)&v16);
  apdu::ApduResponse::createFromMessage();
  int v10 = v16;
  if (v16)
  {
    uint64_t v16 = 0;
    LODWORD(v17) = 0;
    WTF::fastFree(v10, v9);
  }
  uint64_t v11 = v14;
  if (v14)
  {
    unsigned __int8 v14 = 0;
    int v15 = 0;
    WTF::fastFree(v11, v9);
  }
  if (!v21) {
    goto LABEL_13;
  }
  if (v20 != 36864)
  {
    if (v20 == 27904)
    {
      LOBYTE(v14) = 1;
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v16, (char *)&v14, (WTF *)1);
      WebKit::CtapNfcDriver::respondAsync(a3, (uint64_t *)&v16);
      size_t v12 = v16;
      if (!v16) {
        goto LABEL_16;
      }
      uint64_t v16 = 0;
      LODWORD(v17) = 0;
LABEL_14:
      WTF::fastFree(v12, v4);
      goto LABEL_16;
    }
LABEL_13:
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    WebKit::CtapNfcDriver::respondAsync(a3, (uint64_t *)&v16);
    size_t v12 = v16;
    if (!v16) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  WebKit::CtapNfcDriver::respondAsync(a3, (uint64_t *)&v18);
LABEL_16:
  if (v21)
  {
    unsigned __int8 v13 = v18;
    if (v18)
    {
      uint64_t v18 = 0;
      int v19 = 0;
      WTF::fastFree(v13, v4);
    }
  }
  uint64_t result = v24;
  if (v24)
  {
    uint64_t v24 = 0;
    LODWORD(v25) = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

uint64_t WebKit::CtapNfcDriver::respondAsync(WTF::RunLoop *a1, uint64_t *a2)
{
  WTF::RunLoop::main(a1);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v7 = &unk_1EE9E5AC8;
  v7[1] = v4;
  void v7[2] = v5;
  v7[3] = v6;
  uint64_t v9 = v7;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v9;
  if (v9) {
    return (*(uint64_t (**)(void *))(*v9 + 8))(v9);
  }
  return result;
}

void WebKit::MockHidService::~MockHidService(WebKit::MockHidService *this, void *a2)
{
  if (*((unsigned char *)this + 192)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, a2);
  }
  if (*((unsigned char *)this + 168)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 144, a2);
  }
  if (*((unsigned char *)this + 128)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 96, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 48, (WTF::StringImpl *)a2);

  WebKit::HidService::~HidService(this);
}

{
  WTF *v3;
  void *v4;
  uint64_t vars8;

  if (*((unsigned char *)this + 192)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, a2);
  }
  if (*((unsigned char *)this + 168)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 144, a2);
  }
  if (*((unsigned char *)this + 128)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 96, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 48, (WTF::StringImpl *)a2);
  WebKit::HidService::~HidService(this);

  WTF::fastFree(v3, v4);
}

void WebKit::MockAuthenticatorManager::~MockAuthenticatorManager(WebKit::MockAuthenticatorManager *this, void *a2)
{
  if (*((unsigned char *)this + 1008)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 992, a2);
  }
  if (*((unsigned char *)this + 984)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 960, a2);
  }
  if (*((unsigned char *)this + 944)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 912, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 864, (WTF::StringImpl *)a2);

  WebKit::AuthenticatorManager::~AuthenticatorManager(this);
}

{
  WTF *v3;
  void *v4;
  uint64_t vars8;

  if (*((unsigned char *)this + 1008)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 992, a2);
  }
  if (*((unsigned char *)this + 984)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 960, a2);
  }
  if (*((unsigned char *)this + 944)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 912, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 864, (WTF::StringImpl *)a2);
  WebKit::AuthenticatorManager::~AuthenticatorManager(this);

  WTF::fastFree(v3, v4);
}

uint64_t WebKit::MockAuthenticatorManager::isMock(WebKit::MockAuthenticatorManager *this)
{
  return 1;
}

void non-virtual thunk to'WebKit::MockAuthenticatorManager::~MockAuthenticatorManager(WebKit::MockAuthenticatorManager *this, void *a2)
{
  if (*((unsigned char *)this + 992)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 976, a2);
  }
  if (*((unsigned char *)this + 968)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 944, a2);
  }
  if (*((unsigned char *)this + 928)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 896, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 848, (WTF::StringImpl *)a2);

  WebKit::AuthenticatorManager::~AuthenticatorManager((WebKit::MockAuthenticatorManager *)((char *)this - 16));
}

{
  WTF *v3;
  void *v4;
  uint64_t vars8;

  if (*((unsigned char *)this + 992)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 976, a2);
  }
  if (*((unsigned char *)this + 968)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 944, a2);
  }
  if (*((unsigned char *)this + 928)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 896, a2);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 848, (WTF::StringImpl *)a2);
  WebKit::AuthenticatorManager::~AuthenticatorManager((WebKit::MockAuthenticatorManager *)((char *)this - 16));

  WTF::fastFree(v3, v4);
}

void WebKit::MockHidConnection::~MockHidConnection(WebKit::MockHidConnection *this, void *a2)
{
  int v3 = (WTF *)*((void *)this + 40);
  if (v3)
  {
    *((void *)this + ++*(_DWORD *)(this + 40) = 0;
    *((_DWORD *)this + 82) = 0;
    WTF::fastFree(v3, a2);
  }
  std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((WebKit::MockHidConnection *)((char *)this + 248));
  if (*((unsigned char *)this + 240)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 224, v4);
  }
  if (*((unsigned char *)this + 216)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 192, v4);
  }
  if (*((unsigned char *)this + 176)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 144, v4);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 96, (WTF::StringImpl *)v4);
  WebKit::HidConnection::~HidConnection(this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 10, v5);
}

{
  WTF *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  int v3 = (WTF *)*((void *)this + 40);
  if (v3)
  {
    *((void *)this + ++*(_DWORD *)(this + 40) = 0;
    *((_DWORD *)this + 82) = 0;
    WTF::fastFree(v3, a2);
  }
  std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((WebKit::MockHidConnection *)((char *)this + 248));
  if (*((unsigned char *)this + 240)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 224, v4);
  }
  if (*((unsigned char *)this + 216)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 192, v4);
  }
  if (*((unsigned char *)this + 176)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 144, v4);
  }
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 96, (WTF::StringImpl *)v4);
  WebKit::HidConnection::~HidConnection(this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 10, v5);

  WTF::fastFree(this, v6);
}

void WebKit::CtapNfcDriver::~CtapNfcDriver(WebKit::CtapNfcDriver *this, void *a2)
{
  *(void *)this = &unk_1EE9E5888;
  int v3 = (WebKit::NfcConnection *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::NfcConnection>::deref(v3);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WebKit::NfcConnection *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE9E5888;
  int v3 = (WebKit::NfcConnection *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::NfcConnection>::deref(v3);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);

  WTF::fastFree(this, v4);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 296);
  uint64_t v4 = *(unsigned int *)(a2 + 296);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS6_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 296) = -1;
    return result;
  }
  uint64_t v5 = result;
  return (*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS6_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS9_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRSA_SG_EEEDcmSI_DpOT0____fdiagonal
          + v4))((int)&v5, result, (PublicKeyCredentialCreationOptions *)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSR_EEEDcSJ_DpT0_(WebCore::PublicKeyCredentialCreationOptions **a1, uint64_t a2, PublicKeyCredentialCreationOptions *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *((unsigned int *)*a1 + 74);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    ((void (*)(char *, WebCore::PublicKeyCredentialCreationOptions *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS6_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v5])(&v12, v4);
LABEL_7:
    *((_DWORD *)v4 + 74) = -1;
    WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions(v4, a3);
    *((_DWORD *)v4 + 74) = 0;
    return;
  }
  WTF::String::operator=((uint64_t *)a2, (WTF::StringImpl **)a3);
  WTF::String::operator=((uint64_t *)(a2 + 8), (WTF::StringImpl **)&a3->var0.var1);
  std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::String,false> const&>((uint64_t *)(a2 + 16), (WTF::StringImpl **)&a3->var0.var2);
  WTF::String::operator=((uint64_t *)(a2 + 32), (WTF::StringImpl **)&a3->var1);
  WTF::String::operator=((uint64_t *)(a2 + 40), (WTF::StringImpl **)&a3->var1.var1);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(a2 + 48, (uint64_t)&a3->var1.var2);
  WTF::String::operator=((uint64_t *)(a2 + 64), (WTF::StringImpl **)&a3->var1.var3);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(a2 + 72, (uint64_t)&a3->var2);
  if (a3 != (PublicKeyCredentialCreationOptions *)a2)
  {
    unsigned int v7 = *(_DWORD *)(a2 + 100);
    unsigned int var2 = a3->var3.var2;
    if (v7 <= var2)
    {
      if (var2 > *(_DWORD *)(a2 + 96))
      {
        WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(a2 + 88), 0);
        WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a2 + 88, a3->var3.var2);
        unsigned int v7 = *(_DWORD *)(a2 + 100);
      }
    }
    else
    {
      *(_DWORD *)(a2 + 100) = var2;
      unsigned int v7 = var2;
    }
    if (v7)
    {
      memmove(*(void **)(a2 + 88), a3->var3.var0, 16 * v7);
      uint64_t v9 = *(unsigned int *)(a2 + 100);
    }
    else
    {
      uint64_t v9 = 0;
    }
    memcpy((void *)(*(void *)(a2 + 88) + 16 * v9), (char *)a3->var3.var0 + 16 * v9, 16 * a3->var3.var2 - 16 * v9);
    *(_DWORD *)(a2 + 100) = a3->var3.var2;
  }
  unsigned int val = a3->var4.var0.__val_;
  *(unsigned char *)(a2 + 108) = a3->var4.__engaged_;
  *(_DWORD *)(a2 + 104) = val;
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2 + 112, (uint64_t)&a3->var5);
  uint64_t v11 = *(void *)&a3->var6.var0.var0;
  *(unsigned char *)(a2 + 136) = a3->var8.var0.var0;
  *(void *)(a2 + 128) = v11;

  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs,false> const&>(a2 + 144, (uint64_t)&a3->var8.var0.var1.var1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 296);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(a2, a3);
      int v7 = *(_DWORD *)(a3 + 16);
      *(unsigned char *)(a2 + 20) = *(unsigned char *)(a3 + 20);
      *(_DWORD *)(a2 + ++*(_DWORD *)(this + 16) = v7;
      WTF::String::operator=((uint64_t *)(a2 + 24), (WTF::StringImpl **)(a3 + 24));
      WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2 + 32, a3 + 32);
      *(unsigned char *)(a2 + 48) = *(unsigned char *)(a3 + 48);
      std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs,false> const&>(a2 + 56, a3 + 56);
      *(_WORD *)(a2 + 208) = *(_WORD *)(a3 + 208);
      return;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS6_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 296) = -1;
  *(unsigned char *)uint64_t v4 = 0;
  *(_DWORD *)(v4 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(v4, a3);
  *(void *)(v4 + ++*(_DWORD *)(this + 16) = *(void *)(a3 + 16);
  uint64_t v8 = *(_DWORD **)(a3 + 24);
  if (v8) {
    *v8 += 2;
  }
  *(void *)(v4 + 24) = v8;
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4 + 32, a3 + 32);
  char v9 = *(unsigned char *)(a3 + 48);
  *(unsigned char *)(v4 + 56) = 0;
  *(unsigned char *)(v4 + 48) = v9;
  *(unsigned char *)(v4 + 200) = 0;
  if (*(unsigned char *)(a3 + 200))
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs const&,WebCore::AuthenticationExtensionsClientInputs*>(v4 + 56, a3 + 56);
    *(unsigned char *)(v4 + 200) = 1;
  }
  *(_WORD *)(v4 + 208) = *(_WORD *)(a3 + 208);
  *(_DWORD *)(v4 + 296) = 1;
}

uint64_t WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    unsigned int v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        unsigned int v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::PublicKeyCredentialDescriptor>::destruct((WebCore::PublicKeyCredentialDescriptor *)(*(void *)a1 + 40 * v5), (WebCore::PublicKeyCredentialDescriptor *)(*(void *)a1 + 40 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      unsigned int v4 = v5;
    }
    char v6 = *(unsigned char **)a2;
    uint64_t v7 = *(void *)a1;
    if (v4)
    {
      uint64_t v8 = &v6[40 * v4];
      do
      {
        *(unsigned char *)uint64_t v7 = *v6;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(v7 + 8, (uint64_t)(v6 + 8));
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v7 + 24), (uint64_t)(v6 + 24));
        v6 += 40;
        v7 += 40;
      }
      while (v6 != v8);
      char v6 = *(unsigned char **)a2;
      uint64_t v9 = *(unsigned int *)(a1 + 12);
      uint64_t v7 = *(void *)a1;
    }
    else
    {
      uint64_t v9 = 0;
    }
    WTF::VectorCopier<false,WebCore::PublicKeyCredentialDescriptor>::uninitializedCopy<WebCore::PublicKeyCredentialDescriptor>((uint64_t)&v6[40 * v9], (uint64_t)&v6[40 * *(unsigned int *)(a2 + 12)], v7 + 40 * v9);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9E58B8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1EE9E58D8[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, _DWORD **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 != -1)
  {
    if (!v5)
    {
      char v6 = *a3;
      if (*a3) {
        ++*v6;
      }
      uint64_t result = *a2;
      *a2 = (uint64_t)v6;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          return JSC::ArrayBufferView::operator delete();
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E58B8[v5])(&v8, v4);
  }
  uint64_t v7 = *a3;
  if (*a3) {
    ++*v7;
  }
  *(void *)uint64_t v4 = v7;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

WTF::DeferrableRefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS11_EEEDcST_DpT0_(WTF::DeferrableRefCountedBase *result, WTF::DeferrableRefCountedBase **a2, WTF::DeferrableRefCountedBase **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      char v6 = *a3;
      if (*a3) {
        *(_DWORD *)v6 += 2;
      }
      uint64_t result = *a2;
      *a2 = v6;
      if (result)
      {
        return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
      }
      return result;
    }
    uint64_t result = (WTF::DeferrableRefCountedBase *)((uint64_t (*)(char *, uint64_t))off_1EE9E58B8[v5])(&v8, v4);
  }
  uint64_t v7 = *a3;
  if (*a3) {
    *(_DWORD *)v7 += 2;
  }
  *(void *)uint64_t v4 = v7;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

void std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 144) == *(unsigned __int8 *)(a2 + 144))
  {
    if (*(unsigned char *)(a1 + 144))
    {
      WTF::String::operator=((uint64_t *)a1, (WTF::StringImpl **)a2);
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v4 = (uint64_t *)(a1 + 16);
      uint64_t v5 = (WTF::StringImpl **)(a2 + 16);
      if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
      {
        if (*(unsigned char *)(a1 + 56))
        {
          WTF::String::operator=(v4, v5);
          *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
          std::__optional_storage_base<WebCore::BufferSource,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BufferSource,false> const&>(a1 + 32, a2 + 32);
        }
      }
      else if (*(unsigned char *)(a1 + 56))
      {
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::reset[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)v4);
      }
      else
      {
        std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs const&,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>((uint64_t)v4, (uint64_t)v5);
        *(unsigned char *)(a1 + 56) = 1;
      }
      char v6 = (WebCore::AuthenticationExtensionsClientInputs::PRFValues *)(a1 + 64);
      uint64_t v7 = a2 + 64;
      if (*(unsigned __int8 *)(a1 + 136) == *(unsigned __int8 *)(a2 + 136))
      {
        if (*(unsigned char *)(a1 + 136))
        {
          if (*(unsigned __int8 *)(a1 + 104) == *(unsigned __int8 *)(a2 + 104))
          {
            if (*(unsigned char *)(a1 + 104))
            {
              std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v6, v7);
              std::__optional_storage_base<WebCore::BufferSource,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BufferSource,false> const&>(a1 + 80, a2 + 80);
            }
          }
          else if (*(unsigned char *)(a1 + 104))
          {
            std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::reset[abi:sn180100](v6);
          }
          else
          {
            std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues const&,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>((uint64_t)v6, v7);
            *(unsigned char *)(a1 + 104) = 1;
          }
          char v8 = (WTF::StringImpl ***)(a2 + 112);
          if (*(unsigned __int8 *)(a1 + 128) == *(unsigned __int8 *)(a2 + 128))
          {
            if (a2 != a1 && *(unsigned char *)(a1 + 128))
            {
              unsigned int v9 = *(_DWORD *)(a1 + 124);
              unsigned int v10 = *(_DWORD *)(a2 + 124);
              if (v9 <= v10)
              {
                if (v10 > *(_DWORD *)(a1 + 120))
                {
                  WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(a1 + 112), 0);
                  WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 112, *(unsigned int *)(a2 + 124));
                  unsigned int v9 = *(_DWORD *)(a1 + 124);
                }
              }
              else
              {
                WTF::VectorDestructor<true,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::destruct((uint64_t *)(*(void *)(a1 + 112) + 48 * v10), (uint64_t *)(*(void *)(a1 + 112) + 48 * v9));
                *(_DWORD *)(a1 + 124) = v10;
                unsigned int v9 = v10;
              }
              char v12 = *v8;
              unsigned __int8 v13 = *(uint64_t **)(a1 + 112);
              if (v9)
              {
                unsigned __int8 v14 = &v12[6 * v9];
                do
                {
                  WTF::String::operator=(v13, v12);
                  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v13 + 1), (uint64_t)(v12 + 1));
                  std::__optional_storage_base<WebCore::BufferSource,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BufferSource,false> const&>((uint64_t)(v13 + 3), (uint64_t)(v12 + 3));
                  v12 += 6;
                  v13 += 6;
                }
                while (v12 != v14);
                char v12 = *v8;
                uint64_t v15 = *(unsigned int *)(a1 + 124);
                unsigned __int8 v13 = *(uint64_t **)(a1 + 112);
              }
              else
              {
                uint64_t v15 = 0;
              }
              WTF::VectorCopier<false,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::uninitializedCopy<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>(&v12[6 * v15], &v12[6 * *(unsigned int *)(a2 + 124)], (uint64_t)&v13[6 * v15]);
              *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
            }
          }
          else
          {
            uint64_t v11 = (WTF::ASCIILiteral *)(a1 + 112);
            if (*(unsigned char *)(a1 + 128))
            {
              WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11);
              *(unsigned char *)(a1 + 128) = 0;
            }
            else
            {
              WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v11, a2 + 112);
              *(unsigned char *)(a1 + 128) = 1;
            }
          }
        }
      }
      else if (*(unsigned char *)(a1 + 136))
      {
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::reset[abi:sn180100](v6);
      }
      else
      {
        std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs const&,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(v6, v7);
        *(unsigned char *)(a1 + 136) = 1;
      }
    }
  }
  else if (*(unsigned char *)(a1 + 144))
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::reset[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)a1);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs const&,WebCore::AuthenticationExtensionsClientInputs*>(a1, a2);
    *(unsigned char *)(a1 + 144) = 1;
  }
}

uint64_t std::__optional_storage_base<WebCore::BufferSource,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BufferSource,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(unsigned __int8 *)(result + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(unsigned char *)(result + 16))
    {
      return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(result, a2);
    }
  }
  else if (*(unsigned char *)(result + 16))
  {
    uint64_t v3 = *(unsigned int *)(result + 8);
    if (v3 != -1) {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9E58B8[v3])(&v4, result);
    }
    *(_DWORD *)(v2 + 8) = -1;
    *(unsigned char *)(v2 + ++*(_DWORD *)(this + 16) = 0;
  }
  else
  {
    *(unsigned char *)uint64_t result = 0;
    *(_DWORD *)(result + 8) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(result, a2);
    *(unsigned char *)(v2 + ++*(_DWORD *)(this + 16) = 1;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::SecurityOriginData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::SecurityOriginData,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(unsigned __int8 *)(result + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(unsigned char *)(result + 32))
    {
      return std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(result, a2);
    }
  }
  else if (*(unsigned char *)(result + 32))
  {
    uint64_t v3 = *(unsigned int *)(result + 24);
    if (v3 != -1) {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_8[v3])(&v4, result);
    }
    *(_DWORD *)(v2 + 24) = -1;
    *(unsigned char *)(v2 + 32) = 0;
  }
  else
  {
    *(unsigned char *)uint64_t result = 0;
    *(_DWORD *)(result + 24) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(result, a2);
    *(unsigned char *)(v2 + 32) = 1;
  }
  return result;
}

uint64_t WebKit::WebAuthenticationRequestData::WebAuthenticationRequestData(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v4;
  *(unsigned char *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 320) = -1;
  uint64_t v5 = *((unsigned int *)a2 + 80);
  if (v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t *))off_1EE9E58F8[v5])(&v24, a1 + 24, a2 + 3);
    *(_DWORD *)(a1 + 320) = v5;
  }
  uint64_t v6 = a2[41];
  a2[41] = 0;
  *(void *)(a1 + 328) = v6;
  *(unsigned char *)(a1 + 336) = *((unsigned char *)a2 + 336);
  uint64_t v7 = a2[43];
  a2[43] = 0;
  *(void *)(a1 + 344) = v7;
  long long v8 = *((_OWORD *)a2 + 23);
  *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
  *(_OWORD *)(a1 + 368) = v8;
  *(_WORD *)(a1 + 384) = *((_WORD *)a2 + 192);
  WTF::URL::URL(a1 + 392, a2 + 49);
  WTF::URL::URL(a1 + 432, a2 + 54);
  *(void *)(a1 + 472) = a2[59];
  uint64_t v9 = a2[60];
  a2[60] = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = v9;
  uint64_t v10 = a2[61];
  a2[61] = 0;
  *(void *)(a1 + 488) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 124);
  *((_DWORD *)a2 + 124) = 0;
  *(_DWORD *)(a1 + 496) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 125);
  *((_DWORD *)a2 + 125) = 0;
  *(_DWORD *)(a1 + 500) = v10;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  uint64_t v11 = a2[63];
  a2[63] = 0;
  *(void *)(a1 + 504) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 128);
  *((_DWORD *)a2 + 128) = 0;
  *(_DWORD *)(a1 + 512) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 129);
  *((_DWORD *)a2 + 129) = 0;
  *(_DWORD *)(a1 + 5++*(_DWORD *)(this + 16) = v11;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  uint64_t v12 = a2[65];
  a2[65] = 0;
  *(void *)(a1 + 520) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 132);
  *((_DWORD *)a2 + 132) = 0;
  *(_DWORD *)(a1 + 528) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 133);
  *((_DWORD *)a2 + 133) = 0;
  *(_DWORD *)(a1 + 532) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 134);
  *(unsigned char *)(a1 + 5++*(_DWORD *)(this + 40) = *((unsigned char *)a2 + 540);
  *(_DWORD *)(a1 + 536) = v12;
  uint64_t v13 = a2[68];
  a2[68] = 0;
  *(void *)(a1 + 544) = v13;
  uint64_t v14 = a2[69];
  a2[69] = 0;
  *(void *)(a1 + 552) = v14;
  uint64_t v15 = a2[70];
  a2[70] = 0;
  *(void *)(a1 + 560) = v15;
  uint64_t v16 = a2[71];
  *(unsigned char *)(a1 + 576) = *((unsigned char *)a2 + 576);
  *(void *)(a1 + 568) = v16;
  uint64_t v17 = a2[73];
  a2[73] = 0;
  *(void *)(a1 + 584) = v17;
  *(unsigned char *)(a1 + 592) = 0;
  *(_DWORD *)(a1 + 6++*(_DWORD *)(this + 16) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1 + 592, (uint64_t)(a2 + 74));
  uint64_t v18 = a2[78];
  a2[78] = 0;
  *(void *)(a1 + 624) = v18;
  long long v19 = *(_OWORD *)(a2 + 79);
  long long v20 = *(_OWORD *)(a2 + 81);
  *(_OWORD *)(a1 + 662) = *(_OWORD *)((char *)a2 + 662);
  *(_OWORD *)(a1 + 648) = v20;
  *(_OWORD *)(a1 + 632) = v19;
  uint64_t v21 = a2[85];
  a2[85] = 0;
  *(void *)(a1 + 680) = v21;
  uint64_t v22 = a2[86];
  a2[86] = 0;
  *(void *)(a1 + 688) = v22;
  *(_WORD *)(a1 + 696) = *((_WORD *)a2 + 348);
  *(unsigned char *)(a1 + 704) = 0;
  *(unsigned char *)(a1 + 736) = 0;
  if (*((unsigned char *)a2 + 736))
  {
    *(_DWORD *)(a1 + 728) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1 + 704, (uint64_t)(a2 + 88));
    *(unsigned char *)(a1 + 736) = 1;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions>::__alt[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions>(a2, a3);
}

uint64_t std::__optional_copy_assign_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_assign_base[abi:sn180100](uint64_t result, uint64_t a2)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + ++*(_DWORD *)(this + 40) = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    *(_WORD *)uint64_t result = *(_WORD *)a2;
    uint64_t v2 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(result + 8) = v2;
    uint64_t v3 = *(void *)(a2 + 16);
    *(void *)(a2 + ++*(_DWORD *)(this + 16) = 0;
    *(void *)(result + ++*(_DWORD *)(this + 16) = v3;
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    *(void *)(result + 24) = v4;
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *(void *)(result + 32) = v5;
    *(unsigned char *)(result + ++*(_DWORD *)(this + 40) = 1;
  }
  return result;
}

uint64_t std::__optional_copy_assign_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_assign_base[abi:sn180100](uint64_t result, uint64_t a2)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 32) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    *(unsigned char *)uint64_t result = *(unsigned char *)a2;
    *(void *)(result + 8) = 0;
    *(void *)(result + ++*(_DWORD *)(this + 16) = 0;
    uint64_t v2 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(result + 8) = v2;
    LODWORD(v2) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + ++*(_DWORD *)(this + 16) = 0;
    *(_DWORD *)(result + ++*(_DWORD *)(this + 16) = v2;
    LODWORD(v2) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    *(_DWORD *)(result + 20) = v2;
    *(_WORD *)(result + 24) = *(_WORD *)(a2 + 24);
    *(unsigned char *)(result + 32) = 1;
  }
  return result;
}

uint64_t std::__optional_move_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 8, a2 + 8);
    *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

unsigned int *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF **)(a1 + 40);
  if (v4)
  {
    *(void *)(a1 + ++*(_DWORD *)(this + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void *)#1}::__invoke(WTF::RunLoop *a1)
{
  WTF::RunLoop::main(a1);
  uint64_t v2 = (atomic_uint *)*((void *)a1 + 4);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  uint64_t v3 = *((void *)a1 + 5);
  uint64_t v4 = *((void *)a1 + 7);
  *((void *)a1 + 7) = 0;
  uint64_t v5 = *((void *)a1 + 6);
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 6) = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v6 = &unk_1EE9E5938;
  v6[1] = v2;
  void v6[2] = v3;
  void v6[3] = v5;
  v6[4] = v4;
  long long v8 = v6;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v8;
  if (v8) {
    return (*(uint64_t (**)(void *))(*v8 + 8))(v8);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9E5938;
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF **)(a1 + 16);
  if (v4)
  {
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E5938;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF *)*((void *)this + 2);
  if (v4)
  {
    *((void *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (*(unsigned char *)(v3 + 296))
      {
        fido::FidoHidMessage::addContinuationPacket();
      }
      else
      {
        fido::FidoHidMessage::createFromSerializedData();
        std::__optional_storage_base<fido::FidoHidMessage,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<fido::FidoHidMessage,false>>((fido::FidoHidMessage *)(v3 + 248), (uint64_t)v27);
        std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)v27);
      }
      if (!*(unsigned char *)(v3 + 296)) {
        goto LABEL_71;
      }
      if (!fido::FidoHidMessage::messageComplete((fido::FidoHidMessage *)(v3 + 248))) {
        goto LABEL_46;
      }
      if (!*(unsigned char *)(v3 + 296)) {
        goto LABEL_71;
      }
      int v5 = *(unsigned __int8 *)(v3 + 252);
      if (v5 == 3)
      {
        int v6 = 0;
      }
      else
      {
        if (v5 != 16)
        {
          if (v5 == 6)
          {
            int v6 = *(unsigned __int8 *)(v3 + 305);
            *(unsigned char *)(v3 + 305) = 0;
            if (v6)
            {
              int v6 = 0;
              *(unsigned char *)(v3 + 304) = 1;
            }
          }
          else
          {
            int v6 = 0;
          }
          goto LABEL_19;
        }
        int v6 = 1;
      }
      *(unsigned char *)(v3 + 305) = 1;
LABEL_19:
      if (!*(unsigned char *)(v3 + 304) || !*(unsigned char *)(v3 + 305)) {
        goto LABEL_36;
      }
      if (!*(unsigned char *)(v3 + 176)) {
        goto LABEL_71;
      }
      if (*(unsigned char *)(v3 + 167) && !*(unsigned char *)(v3 + 163)) {
        *(unsigned char *)(v3 + 163) = v5 == 3;
      }
      if (!v6)
      {
LABEL_36:
        int v15 = 1;
LABEL_37:
        if (!*(unsigned char *)(v3 + 305))
        {
          if (!v15) {
            goto LABEL_71;
          }
          fido::FidoHidMessage::getMessagePayload(v27, (fido::FidoHidMessage *)(v3 + 248));
          uint64_t v17 = *(WTF **)(v3 + 320);
          if (v17)
          {
            *(void *)(v3 + 320) = 0;
            *(_DWORD *)(v3 + 328) = 0;
            WTF::fastFree(v17, v16);
          }
          *(void *)(v3 + 320) = v27[0];
          *(void *)(v3 + 328) = v27[1];
          int v15 = *(unsigned __int8 *)(v3 + 296);
        }
        if (v15)
        {
          *(_DWORD *)(v3 + 308) = *(_DWORD *)(v3 + 248);
          std::__optional_destruct_base<fido::FidoHidMessage,false>::reset[abi:sn180100]((fido::FidoHidMessage *)(v3 + 248));
          if (*(unsigned char *)(v3 + 176))
          {
            if (*(unsigned char *)(v3 + 165)) {
              WebKit::MockHidConnection::feedReports((WebKit::MockHidConnection *)v3, v18);
            }
LABEL_46:
            uint64_t v19 = *(void *)(a1 + 8);
            if (v19) {
              long long v20 = *(unsigned char **)(v19 + 8);
            }
            else {
              long long v20 = 0;
            }
            if (v20[176])
            {
              if ((v20[160] == 0) == (v20[304] != 0) || (v20[161] == 0) == (v20[305] != 0))
              {
                BOOL v21 = 1;
                goto LABEL_57;
              }
              if (v19) {
                uint64_t v19 = *(void *)(v19 + 8);
              }
              if (*(unsigned char *)(v19 + 176))
              {
                BOOL v21 = *(unsigned __int8 *)(v19 + 162) != 1;
LABEL_57:
                uint64_t v4 = *(void *)(a1 + 32);
                *(void *)(a1 + 32) = 0;
                (*(void (**)(uint64_t, BOOL))(*(void *)v4 + 16))(v4, v21);
                goto LABEL_58;
              }
            }
          }
        }
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      *(_WORD *)(v3 + 312) = 0;
      fido::FidoHidMessage::getMessagePayload((uint64_t *)&v30, (fido::FidoHidMessage *)(v3 + 248));
      if (!v32)
      {
LABEL_72:
        __break(0xC471u);
        return;
      }
      int v7 = *v30;
      memmove(v30, v30 + 1, --v32);
      v29[0] = v30;
      v29[1] = v32;
      cbor::CBORReader::read();
      if (v7 == 2)
      {
        if (!v28) {
          goto LABEL_71;
        }
        uint64_t Map = cbor::CBORValue::getMap((cbor::CBORValue *)v27);
        cbor::CBORValue::CBORValue((cbor::CBORValue *)v29);
        char v24 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)v29);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v29);
        if (!v28) {
          goto LABEL_71;
        }
        if ((void *)(cbor::CBORValue::getMap((cbor::CBORValue *)v27) + 8) == v24) {
          goto LABEL_66;
        }
        uint64_t v25 = cbor::CBORValue::getMap((cbor::CBORValue *)(v24 + 8));
        cbor::CBORValue::CBORValue();
        uint64_t v14 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v25, (cbor::CBORValue *)v29);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v29);
        if ((void *)(v25 + 8) == v14) {
          goto LABEL_66;
        }
      }
      else
      {
        if (v7 != 1) {
          goto LABEL_66;
        }
        if (!v28) {
          goto LABEL_71;
        }
        uint64_t v9 = cbor::CBORValue::getMap((cbor::CBORValue *)v27);
        cbor::CBORValue::CBORValue((cbor::CBORValue *)v29);
        uint64_t v10 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v9, (cbor::CBORValue *)v29);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v29);
        if (!v28) {
          goto LABEL_71;
        }
        if ((void *)(cbor::CBORValue::getMap((cbor::CBORValue *)v27) + 8) == v10) {
          goto LABEL_66;
        }
        uint64_t v11 = cbor::CBORValue::getMap((cbor::CBORValue *)(v10 + 8));
        cbor::CBORValue::CBORValue();
        uint64_t v12 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v11, (cbor::CBORValue *)v29);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v29);
        uint64_t v13 = (void *)(v11 + 8);
        if ((void *)(v11 + 8) != v12) {
          *(unsigned char *)(v3 + 312) = cbor::CBORValue::getBool((cbor::CBORValue *)(v12 + 8));
        }
        cbor::CBORValue::CBORValue();
        uint64_t v14 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v11, (cbor::CBORValue *)v29);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v29);
        if (v13 == v14) {
          goto LABEL_66;
        }
      }
      *(unsigned char *)(v3 + 313) = cbor::CBORValue::getBool((cbor::CBORValue *)(v14 + 8));
LABEL_66:
      if (v28) {
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v27);
      }
      char v26 = (WTF *)v30;
      if (v30)
      {
        uint64_t v30 = 0;
        int v31 = 0;
        WTF::fastFree(v26, v8);
      }
      int v15 = *(unsigned __int8 *)(v3 + 296);
      goto LABEL_37;
    }
  }
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
LABEL_58:
  uint64_t v22 = *(void (**)(uint64_t))(*(void *)v4 + 8);

  v22(v4);
}

void *WTF::Detail::CallableWrapper<WebKit::Authenticator::handleRequest(WebKit::WebAuthenticationRequestData const&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E5988;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::Authenticator::handleRequest(WebKit::WebAuthenticationRequestData const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E5988;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::Authenticator::handleRequest(WebKit::WebAuthenticationRequestData const&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = *(uint64_t **)(result + 16);
    uint64_t v3 = *v2;
    if (*((_DWORD *)v2 + 88)) {
      return (*(uint64_t (**)(void))(v3 + 24))();
    }
    else {
      return (*(uint64_t (**)(void))(v3 + 16))();
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorTransportService::startDiscovery(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E59B0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorTransportService::startDiscovery(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E59B0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorTransportService::startDiscovery(void)::$_0,void>::call(void *result)
{
  uint64_t v1 = result[1];
  if (v1)
  {
    uint64_t result = *(void **)(v1 + 8);
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*result + 16))();
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorTransportService::restartDiscovery(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E59D8;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorTransportService::restartDiscovery(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E59D8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorTransportService::restartDiscovery(void)::$_0,void>::call(void *result)
{
  uint64_t v1 = result[1];
  if (v1)
  {
    uint64_t result = *(void **)(v1 + 8);
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*result + 24))();
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E5A28;
  uint64_t v2 = a1[96];
  a1[96] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)(a1 + 3));
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E5A28;
  uint64_t v2 = a1[96];
  a1[96] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)(a1 + 3));
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2 || !*(void *)(v2 + 8)) {
    return;
  }
  if (a2)
  {
    uint64_t v4 = *(WebKit::WebAuthenticatorCoordinatorProxy **)(a1 + 8);
    int v5 = *(_DWORD **)(*(void *)(*((void *)v4 + 2) + 312) + 352);
    if (((*(uint64_t (**)(_DWORD *))(*(void *)v5 + 32))(v5) & 1) != 0
      || ((*(uint64_t (**)(_DWORD *))(*(void *)v5 + 40))(v5) & 1) != 0)
    {
      if (*(unsigned char *)(a1 + 760))
      {
        WebCore::SecurityOriginData::toString((uint64_t *)&v26, (WebCore::SecurityOriginData *)(a1 + 728));
      }
      else
      {
        uint64_t v9 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
        if (*MEMORY[0x1E4F30978]) {
          *(_DWORD *)v9 += 2;
        }
        char v26 = v9;
      }
      if (*(_DWORD *)(a1 + 344) > 1u)
      {
        uint64_t v25 = std::__throw_bad_variant_access[abi:sn180100]();
        WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(BOOL)::{lambda(std::variant<WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>,WTF::CompletionHandler::AuthenticatorAttachment> &&)#1},void,WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>>::~CallableWrapper(v25);
      }
      else
      {
        WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v27, (WebCore::SecurityOriginData *)(a1 + 616));
        WebCore::buildClientDataJson();
        uint64_t v11 = *(WebCore **)buf;
        *(void *)long long buf = 0;
        uint64_t v12 = v27;
        uint64_t v27 = 0;
        if (v12) {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v12, v10);
        }
        WebCore::buildClientDataJsonHash((uint64_t *)buf, v11, v10);
        uint64_t v14 = *(WTF **)(a1 + 24);
        if (v14)
        {
          *(void *)(a1 + 24) = 0;
          *(_DWORD *)(a1 + 32) = 0;
          WTF::fastFree(v14, v13);
        }
        *(void *)(a1 + 24) = *(void *)buf;
        *(void *)(a1 + 32) = *(void *)&buf[8];
        uint64_t v15 = *(void *)(a1 + 768);
        *(void *)(a1 + 768) = 0;
        uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v16 = &unk_1EE9E5A50;
        v16[1] = v15;
        void v16[2] = v11;
        *(void *)long long buf = v16;
        WebKit::AuthenticatorManager::handleRequest(v5, a1 + 24, (uint64_t)buf);
        uint64_t v18 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        uint64_t v19 = v26;
        char v26 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v17);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
      }
      return;
    }
    if (WebKit::WebAuthenticatorCoordinatorProxy::isASCAvailable(v4))
    {
      WebKit::WebAuthenticatorCoordinatorProxy::performRequest((uint64_t)v4, a1 + 24, a1 + 768);
      return;
    }
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    LOBYTE(v27) = 6;
    *(_OWORD *)long long buf = 0u;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v21 = *(void *)(a1 + 768);
    *(void *)(a1 + 768) = 0;
    (*(void (**)(uint64_t, uint8_t *, void, WTF **))(*(void *)v21 + 16))(v21, buf, 0, &v27);
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    uint64_t v23 = v28;
    char v28 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v22);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)buf, v22);
    long long v20 = qword_1EB3587D0;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      char v24 = "Web Authentication is not currently supported in this environment.";
      goto LABEL_36;
    }
  }
  else
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    LOBYTE(v27) = 31;
    *(_OWORD *)long long buf = 0u;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v6 = *(void *)(a1 + 768);
    *(void *)(a1 + 768) = 0;
    (*(void (**)(uint64_t, uint8_t *, void, WTF **))(*(void *)v6 + 16))(v6, buf, 0, &v27);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    long long v8 = v28;
    char v28 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)buf, v7);
    long long v20 = qword_1EB3587D0;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      char v24 = "Request cancelled due to rejected prompt after lack of user gesture.";
LABEL_36:
      _os_log_error_impl(&dword_1985F2000, v20, OS_LOG_TYPE_ERROR, v24, buf, 2u);
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(BOOL)::{lambda(std::variant<WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>,WTF::CompletionHandler::AuthenticatorAttachment> &&)#1},void,WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E5A50;
  uint64_t v2 = (WTF::DeferrableRefCountedBase *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(BOOL)::{lambda(std::variant<WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>,WTF::CompletionHandler::AuthenticatorAttachment> &&)#1},void,WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E5A50;
  uint64_t v3 = (WTF::DeferrableRefCountedBase *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(BOOL)::{lambda(std::variant<WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>,WTF::CompletionHandler::AuthenticatorAttachment> &&)#1},void,WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>>::call(uint64_t a1, WebCore::AuthenticatorResponse **a2)
{
  int v4 = *((_DWORD *)a2 + 4);
  if (v4 == 1)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    memset(v16, 0, sizeof(v16));
    uint64_t v11 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _OWORD *, void, WebCore::AuthenticatorResponse **))(*(void *)v11 + 16))(v11, v16, 0, a2);
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
LABEL_10:
    WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v16, v9);
    return;
  }
  if (!v4)
  {
    (*(void (**)(_OWORD *__return_ptr))(*(void *)*a2 + 24))(v16);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    uint64_t v6 = (WTF::DeferrableRefCountedBase *)*((void *)&v17 + 1);
    *((void *)&v17 + 1) = v5;
    if (v6) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
    }
    uint64_t v7 = WebCore::AuthenticatorResponse::attachment(*a2);
    v14[0] = 0;
    uint64_t v15 = 0;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _OWORD *, uint64_t, unsigned char *))(*(void *)v8 + 16))(v8, v16, v7, v14);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    goto LABEL_10;
  }
  uint64_t v12 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(v12, v13);
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(unsigned int *a1, WTF::FastMalloc *a2)
{
  unsigned int v2 = a2;
  unint64_t v4 = a1[2];
  if (v4 < (unint64_t)a2)
  {
    unint64_t v5 = v4 + (v4 >> 2);
    if (v5 >= 0x10) {
      unint64_t v6 = v5 + 1;
    }
    else {
      unint64_t v6 = 16;
    }
    if (v6 > (unint64_t)a2) {
      a2 = (WTF::FastMalloc *)v6;
    }
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)a1, a2);
  }
  a1[3] = v2;
  return 1;
}

uint64_t std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__emplace_hint_unique_key_args<fido::ProtocolVersion,fido::ProtocolVersion const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  unint64_t v6 = std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__find_equal<fido::ProtocolVersion>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v7 + 28) = *a4;
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__find_equal<fido::ProtocolVersion>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          unint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    long long v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      long long v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

unint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, WTF::FastMalloc *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > (unint64_t)a2) {
      a2 = (WTF::FastMalloc *)v10;
    }
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > (unint64_t)a2) {
      a2 = (WTF::FastMalloc *)v8;
    }
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockHidConnection::feedReports(void)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9E5A78;
  unint64_t v3 = *(unsigned int **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  unint64_t v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockHidConnection::feedReports(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E5A78;
  unint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  unint64_t v4 = (WTF *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

BOOL WTF::Detail::CallableWrapper<WebKit::MockHidConnection::feedReports(void)::$_0,void>::call(BOOL result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      return WebKit::HidConnection::receiveReport(v2, (uint64_t *)(result + 8));
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::MockHidConnection::continueFeedReports(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  unint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E5AA0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockHidConnection::continueFeedReports(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E5AA0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::MockHidConnection::continueFeedReports(void)::$_0,void>::call(WTF *result, void *a2)
{
  uint64_t v2 = *((void *)result + 1);
  if (v2)
  {
    uint64_t result = *(WTF **)(v2 + 8);
    if (result) {
      return WebKit::MockHidConnection::feedReports(result, a2);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapNfcDriver::respondAsync(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9E5AC8;
  unint64_t v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapNfcDriver::respondAsync(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E5AC8;
  unint64_t v3 = (WTF *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapNfcDriver::respondAsync(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a1 + 16);
}

WebKit::Authenticator *WebKit::FidoAuthenticator::FidoAuthenticator(WebKit::Authenticator *a1, uint64_t *a2)
{
  uint64_t result = WebKit::Authenticator::Authenticator(a1);
  *(void *)uint64_t result = &unk_1EE9E5AF0;
  uint64_t v4 = *a2;
  *a2 = 0;
  *((void *)result + 97) = v4;
  return result;
}

void WebKit::FidoAuthenticator::~FidoAuthenticator(WebKit::FidoAuthenticator *this)
{
  *(void *)this = &unk_1EE9E5AF0;
  uint64_t v2 = *((void *)this + 97);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    uint64_t v3 = *((void *)this + 97);
    *((void *)this + 97) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    *((void *)this + 97) = 0;
  }

  WebKit::Authenticator::~Authenticator(this);
}

uint64_t WebKit::FidoAuthenticator::driver(WebKit::FidoAuthenticator *this)
{
  return *((void *)this + 97);
}

uint64_t WebKit::FidoAuthenticator::releaseDriver@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 776);
  *(void *)(this + 776) = 0;
  *a2 = v2;
  return this;
}

uint64_t WebKit::FidoAuthenticator::transportForDebugging(WebKit::FidoAuthenticator *this)
{
  return WebCore::toString();
}

WebKit::FidoService *WebKit::FidoService::FidoService(WebKit::FidoService *this, WebKit::AuthenticatorTransportServiceObserver *a2)
{
  *(void *)this = &unk_1EE9B5528;
  *((void *)this + 1) = 0;
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)a2 + 1, (uint64_t)a2);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 1);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  *((void *)this + 2) = v4;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1EE9B5558;
  return this;
}

uint64_t *WebKit::FidoService::getInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  fido::encodeEmptyAuthenticatorRequest();
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v5 = *(atomic_uint **)(a1 + 8);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  uint64_t v6 = *a2;
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(*a2 + 8), *a2);
  unint64_t v7 = *(atomic_uint **)(v6 + 8);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  unint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E5C80;
  v8[1] = v5;
  char v8[2] = v7;
  int v15 = v8;
  (*(void (**)(uint64_t, WTF **, void **))(*(void *)v4 + 16))(v4, &v13, &v15);
  unint64_t v10 = v15;
  int v15 = 0;
  if (v10) {
    (*(void (**)(void *))(*v10 + 8))(v10);
  }
  uint64_t v11 = v13;
  if (v13)
  {
    uint64_t v13 = 0;
    int v14 = 0;
    WTF::fastFree(v11, v9);
  }
  return WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::add((uint64_t *)(a1 + 24), a2, (uint64_t)&v13);
}

uint64_t WebKit::U2fAuthenticator::U2fAuthenticator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::Authenticator::Authenticator((WebKit::Authenticator *)a1);
  uint64_t v5 = *a2;
  *a2 = 0;
  *((void *)v4 + 97) = v5;
  *(void *)uint64_t v4 = &unk_1EE9E5B20;
  uint64_t v6 = (WebKit::Authenticator *)((char *)v4 + 784);
  unint64_t v7 = (WTF::RunLoop *)WTF::RunLoop::main(v4);
  unint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v8 = &unk_1EE9E5CA8;
  v8[1] = WebKit::U2fAuthenticator::retryLastCommand;
  char v8[2] = 0;
  v8[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase(v6, v7);
  *(void *)(a1 + 784) = &unk_1EE9B3390;
  *(void *)(a1 + 808) = v8;
  *(_OWORD *)(a1 + 8++*(_DWORD *)(this + 16) = 0u;
  *(void *)(a1 + 8++*(_DWORD *)(this + 40) = 0;
  *(unsigned char *)(a1 + 848) = 0;
  return a1;
}

WTF *WebKit::U2fAuthenticator::retryLastCommand(WebKit::U2fAuthenticator *this)
{
  return WebKit::U2fAuthenticator::issueCommand((uint64_t)this, (uint64_t)this + 816, *((unsigned char *)this + 832));
}

WTF *WebKit::U2fAuthenticator::makeCredential(WebKit::U2fAuthenticator *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB3587D0;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    WebCore::toString();
    WTF::String::utf8();
    if (v8) {
      uint64_t v4 = (char *)v8 + 16;
    }
    else {
      uint64_t v4 = 0;
    }
    *(_DWORD *)long long buf = 134218242;
    unint64_t v10 = this;
    __int16 v11 = 2080;
    uint64_t v12 = v4;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::makeCredential", buf, 0x16u);
    if (v8)
    {
      if (*(_DWORD *)v8 == 1) {
        WTF::fastFree(v8, v3);
      }
      else {
        --*(_DWORD *)v8;
      }
    }
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v3);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  if (*((_DWORD *)this + 88)) {
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  uint64_t result = (WTF *)fido::isConvertibleToU2fRegisterCommand((WebKit::U2fAuthenticator *)((char *)this + 56), v3);
  if (result)
  {
    if (*((_DWORD *)this + 45))
    {
      unint64_t v6 = *((void *)this + 105);
      *((void *)this + 105) = v6 + 1;
      return WebKit::U2fAuthenticator::checkExcludeList(this, v6);
    }
    else
    {
      return (WTF *)WebKit::U2fAuthenticator::issueRegisterCommand(this);
    }
  }
  return result;
}

WTF *WebKit::U2fAuthenticator::checkExcludeList(WebKit::U2fAuthenticator *this, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB3587D0;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    WebCore::toString();
    WTF::String::utf8();
    if (v10) {
      uint64_t v5 = (char *)v10 + 16;
    }
    else {
      uint64_t v5 = 0;
    }
    *(_DWORD *)long long buf = 134218242;
    *(void *)&uint8_t buf[4] = this;
    __int16 v12 = 2080;
    uint64_t v13 = v5;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::checkExcludeList", buf, 0x16u);
    if (v10)
    {
      if (*(_DWORD *)v10 == 1) {
        WTF::fastFree(v10, v6);
      }
      else {
        --*(_DWORD *)v10;
      }
    }
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v6);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  if (*((_DWORD *)this + 88)) {
LABEL_22:
  }
    std::__throw_bad_variant_access[abi:sn180100]();
  if (*((unsigned int *)this + 45) <= a2) {
    return (WTF *)WebKit::U2fAuthenticator::issueRegisterCommand(this);
  }
  fido::convertToU2fCheckOnlySignCommand();
  if (!BYTE2(v13))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t result = WebKit::U2fAuthenticator::issueNewCommand((uint64_t)this, (uint64_t *)buf, 1);
  if (BYTE2(v13))
  {
    uint64_t result = *(WTF **)buf;
    if (*(void *)buf)
    {
      memset(buf, 0, sizeof(buf));
      return (WTF *)WTF::fastFree(result, v8);
    }
  }
  return result;
}

uint64_t WebKit::U2fAuthenticator::issueRegisterCommand(WebKit::U2fAuthenticator *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 88)) {
    goto LABEL_46;
  }
  fido::convertToU2fRegisterCommand();
  uint64_t v2 = qword_1EB3587D0;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (!result) {
      goto LABEL_35;
    }
    WebCore::toString();
    WTF::String::utf8();
    if (v12) {
      uint64_t v4 = (char *)v12 + 16;
    }
    else {
      uint64_t v4 = 0;
    }
    WTF::base64EncodeToString();
    WTF::String::utf8();
    if (v10) {
      uint64_t v5 = (char *)v10 + 16;
    }
    else {
      uint64_t v5 = 0;
    }
    *(_DWORD *)long long buf = 134218498;
    long long v17 = this;
    __int16 v18 = 2080;
    long long v19 = v4;
    __int16 v20 = 2080;
    uint64_t v21 = v5;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::issueRegisterCommand: Sending %s", buf, 0x20u);
    if (v10)
    {
      if (*(_DWORD *)v10 == 1) {
        WTF::fastFree(v10, v6);
      }
      else {
        --*(_DWORD *)v10;
      }
    }
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v6);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    if (v12)
    {
      if (*(_DWORD *)v12 == 1) {
        WTF::fastFree(v12, v6);
      }
      else {
        --*(_DWORD *)v12;
      }
    }
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v6);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    if (v15)
    {
LABEL_35:
      uint64_t result = (uint64_t)WebKit::U2fAuthenticator::issueNewCommand((uint64_t)this, (uint64_t *)&v13, 0);
      goto LABEL_36;
    }
    __break(1u);
LABEL_46:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (!result) {
    return result;
  }
  WebCore::toString();
  WTF::String::utf8();
  if (v12) {
    unint64_t v7 = (char *)v12 + 16;
  }
  else {
    unint64_t v7 = 0;
  }
  *(_DWORD *)long long buf = 134218242;
  long long v17 = this;
  __int16 v18 = 2080;
  long long v19 = v7;
  _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::issueRegisterCommand: request not convertible to U2F.", buf, 0x16u);
  if (v12)
  {
    if (*(_DWORD *)v12 == 1) {
      WTF::fastFree(v12, v8);
    }
    else {
      --*(_DWORD *)v12;
    }
  }
  uint64_t result = (uint64_t)v11;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      uint64_t result = WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v8);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
LABEL_36:
  if (v15)
  {
    uint64_t result = (uint64_t)v13;
    if (v13)
    {
      uint64_t v13 = 0;
      int v14 = 0;
      return WTF::fastFree((WTF *)result, v8);
    }
  }
  return result;
}

WTF *WebKit::U2fAuthenticator::issueNewCommand(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = qword_1EB3587D0;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    WebCore::toString();
    WTF::String::utf8();
    if (v11) {
      unint64_t v7 = (char *)v11 + 16;
    }
    else {
      unint64_t v7 = 0;
    }
    *(_DWORD *)long long buf = 134218242;
    uint64_t v13 = a1;
    __int16 v14 = 2080;
    char v15 = v7;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::issueNewCommand", buf, 0x16u);
    if (v11)
    {
      if (*(_DWORD *)v11 == 1) {
        WTF::fastFree(v11, v8);
      }
      else {
        --*(_DWORD *)v11;
      }
    }
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(a1 + 816, a2);
  *(unsigned char *)(a1 + 832) = a3;
  return WebKit::U2fAuthenticator::issueCommand(a1, a1 + 816, a3);
}

uint64_t WebKit::U2fAuthenticator::getAssertion(WebKit::U2fAuthenticator *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB3587D0;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    WebCore::toString();
    WTF::String::utf8();
    if (v13) {
      uint64_t v4 = (char *)v13 + 16;
    }
    else {
      uint64_t v4 = 0;
    }
    *(_DWORD *)long long buf = 134218242;
    char v15 = this;
    __int16 v16 = 2080;
    long long v17 = v4;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::getAssertion: Sending bogus sign.", buf, 0x16u);
    uint64_t v5 = v13;
    uint64_t v13 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1) {
        WTF::fastFree(v5, v3);
      }
      else {
        --*(_DWORD *)v5;
      }
    }
    unint64_t v6 = v12;
    __int16 v12 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v3);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  if (*((_DWORD *)this + 88) != 1) {
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (fido::isConvertibleToU2fSignCommand((WebKit::U2fAuthenticator *)((char *)this + 56), v3))
  {
    unint64_t v7 = *((void *)this + 105);
    *((void *)this + 105) = v7 + 1;
    return WebKit::U2fAuthenticator::issueSignCommand(this, v7);
  }
  else
  {
    unint64_t v9 = qword_1EB3587D0;
    uint64_t result = os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT);
    if (result)
    {
      WebCore::toString();
      WTF::String::utf8();
      if (v13) {
        unint64_t v10 = (char *)v13 + 16;
      }
      else {
        unint64_t v10 = 0;
      }
      *(_DWORD *)long long buf = 134218242;
      char v15 = this;
      __int16 v16 = 2080;
      long long v17 = v10;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::getAssertion: command not convertible.", buf, 0x16u);
      if (v13)
      {
        if (*(_DWORD *)v13 == 1) {
          WTF::fastFree(v13, v11);
        }
        else {
          --*(_DWORD *)v13;
        }
      }
      uint64_t result = (uint64_t)v12;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          return WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v11);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::U2fAuthenticator::issueSignCommand(WebKit::U2fAuthenticator *this, unint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 88) != 1) {
    goto LABEL_62;
  }
  if (*((unsigned int *)this + 25) > a2)
  {
    fido::convertToU2fSignCommand();
    uint64_t v4 = qword_1EB3587D0;
    uint64_t result = os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT);
    if (!v23)
    {
      if (!result) {
        return result;
      }
      WebCore::toString();
      WTF::String::utf8();
      if (v24) {
        __int16 v14 = (char *)v24 + 16;
      }
      else {
        __int16 v14 = 0;
      }
      *(_DWORD *)long long buf = 134218242;
      *(void *)&uint8_t buf[4] = this;
      __int16 v26 = 2080;
      uint64_t v27 = v14;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::issueSignCommand: request not convertible to U2F.", buf, 0x16u);
      __int16 v16 = v24;
      char v24 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1) {
          WTF::fastFree(v16, v15);
        }
        else {
          --*(_DWORD *)v16;
        }
      }
      uint64_t result = (uint64_t)v20;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          uint64_t result = WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v15);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      goto LABEL_52;
    }
    if (!result) {
      goto LABEL_51;
    }
    WebCore::toString();
    WTF::String::utf8();
    if (v24) {
      unint64_t v6 = (char *)v24 + 16;
    }
    else {
      unint64_t v6 = 0;
    }
    WTF::base64EncodeToString();
    WTF::String::utf8();
    if (v19) {
      unint64_t v7 = (char *)v19 + 16;
    }
    else {
      unint64_t v7 = 0;
    }
    *(_DWORD *)long long buf = 134218754;
    *(void *)&uint8_t buf[4] = this;
    __int16 v26 = 2080;
    uint64_t v27 = v6;
    __int16 v28 = 2048;
    unint64_t v29 = a2;
    __int16 v30 = 2080;
    long long v31 = v7;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::issueSignCommand: index: %lu Sending %s", buf, 0x2Au);
    if (v19)
    {
      if (*(_DWORD *)v19 == 1) {
        WTF::fastFree(v19, v8);
      }
      else {
        --*(_DWORD *)v19;
      }
    }
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v8);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    long long v17 = v24;
    char v24 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1) {
        WTF::fastFree(v17, v8);
      }
      else {
        --*(_DWORD *)v17;
      }
    }
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v8);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    if (v23)
    {
LABEL_51:
      uint64_t result = (uint64_t)WebKit::U2fAuthenticator::issueNewCommand((uint64_t)this, (uint64_t *)&v21, 4);
LABEL_52:
      if (v23)
      {
        uint64_t result = (uint64_t)v21;
        if (v21)
        {
          uint64_t v21 = 0;
          int v22 = 0;
          return WTF::fastFree((WTF *)result, v15);
        }
      }
      return result;
    }
    __break(1u);
LABEL_62:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  unint64_t v9 = qword_1EB3587D0;
  unint64_t v10 = (WTF::StringImpl *)os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    WebCore::toString();
    WTF::String::utf8();
    if (v21) {
      __int16 v11 = (char *)v21 + 16;
    }
    else {
      __int16 v11 = 0;
    }
    *(_DWORD *)long long buf = 134218242;
    *(void *)&uint8_t buf[4] = this;
    __int16 v26 = 2080;
    uint64_t v27 = v11;
    _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::issueSignCommand: Sending bogus sign.", buf, 0x16u);
    uint64_t v13 = v21;
    uint64_t v21 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        WTF::fastFree(v13, v12);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
    unint64_t v10 = v24;
    char v24 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        unint64_t v10 = (WTF::StringImpl *)WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  fido::constructBogusU2fRegistrationCommand((uint64_t *)buf, v10);
  WebKit::U2fAuthenticator::issueNewCommand((uint64_t)this, (uint64_t *)buf, 3);
  uint64_t result = *(void *)buf;
  if (*(void *)buf)
  {
    memset(buf, 0, sizeof(buf));
    return WTF::fastFree((WTF *)result, v15);
  }
  return result;
}

WTF *WebKit::U2fAuthenticator::issueCommand(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = qword_1EB3587D0;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    WebCore::toString();
    WTF::String::utf8();
    if (v22) {
      unint64_t v7 = (char *)v22 + 16;
    }
    else {
      unint64_t v7 = 0;
    }
    WTF::base64EncodeToString();
    WTF::String::utf8();
    if (v20) {
      unint64_t v8 = (char *)v20 + 16;
    }
    else {
      unint64_t v8 = 0;
    }
    *(_DWORD *)long long buf = 134218498;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)char v24 = 2080;
    *(void *)&uint64_t v24[2] = v7;
    __int16 v25 = 2080;
    __int16 v26 = v8;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::issueCommand: Sending %s", buf, 0x20u);
    if (v20)
    {
      if (*(_DWORD *)v20 == 1) {
        WTF::fastFree(v20, v9);
      }
      else {
        --*(_DWORD *)v20;
      }
    }
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    unint64_t v10 = v22;
    int v22 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1) {
        WTF::fastFree(v10, v9);
      }
      else {
        --*(_DWORD *)v10;
      }
    }
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
  }
  uint64_t v11 = *(void *)(a1 + 776);
  __int16 v12 = (WTF *)*(unsigned int *)(a2 + 12);
  memset(buf, 0, sizeof(buf));
  *(_DWORD *)char v24 = v12;
  if (v12)
  {
    uint64_t v13 = (void *)WTF::fastMalloc(v12);
    *(_DWORD *)&uint8_t buf[8] = v12;
    *(void *)long long buf = v13;
    memcpy(v13, *(const void **)a2, *(unsigned int *)(a2 + 12));
  }
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(a1 + 16), a1);
  __int16 v14 = *(atomic_uint **)(a1 + 16);
  if (v14) {
    atomic_fetch_add(v14, 1u);
  }
  uint64_t v15 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v15 = &unk_1EE9E5CD0;
  *(void *)(v15 + 8) = v14;
  *(unsigned char *)(v15 + ++*(_DWORD *)(this + 16) = a3;
  int v22 = (WTF *)v15;
  (*(void (**)(uint64_t, uint8_t *, WTF **))(*(void *)v11 + 16))(v11, buf, &v22);
  long long v17 = v22;
  int v22 = 0;
  if (v17) {
    (*(void (**)(WTF *))(*(void *)v17 + 8))(v17);
  }
  uint64_t result = *(WTF **)buf;
  if (*(void *)buf)
  {
    memset(buf, 0, sizeof(buf));
    return (WTF *)WTF::fastFree(result, v16);
  }
  return result;
}

unsigned int *WebKit::WebDeviceOrientationAndMotionAccessController::shouldAllowAccess(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unsigned int *a6)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(void *)(a2 + 32) + 1000), &v56);
  WebCore::SecurityOrigin::createFromString((uint64_t *)&v58, (WebCore::SecurityOrigin *)&v56, v12);
  v62[0] = 0;
  int v63 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v62, (uint64_t)v58 + 8);
  __int16 v14 = v58;
  int v58 = 0;
  if (v14) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v14, v13);
  }
  uint64_t v15 = v56;
  char v56 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v13);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = WebKit::WebDeviceOrientationAndMotionAccessController::cachedDeviceOrientationPermission((WebKit::WebDeviceOrientationAndMotionAccessController *)a1, (const WebCore::SecurityOriginData *)v62);
  if (v16 != 2 || (a5 & 1) == 0)
  {
LABEL_23:
    uint64_t v27 = *(void *)a6;
    *(void *)a6 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v16);
    uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v27 + 8))(v27);
    goto LABEL_59;
  }
  long long v17 = a1 + 2;
  uint64_t v18 = a1[2];
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  uint64_t v53 = a2;
  if (v18
    || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(a1 + 2, 0), (uint64_t v18 = *v17) != 0))
  {
    int v19 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    int v19 = 0;
  }
  LODWORD(v58) = -1640531527;
  WORD2(v58) = 0;
  BYTE6(v58) = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v58, (uint64_t)v62);
  unsigned int v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v58) & v19;
  uint64_t v21 = (unsigned int *)(v18 + 48 * v20);
  WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v21);
  if (v22) {
    goto LABEL_26;
  }
  char v23 = 0;
  int v24 = 1;
  do
  {
    unsigned int v25 = v21[6];
    if (v25)
    {
      if (v25 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_23;
      }
    }
    else if (*(void *)v21 == -1)
    {
      char v23 = v21;
      goto LABEL_19;
    }
    if (WebCore::operator==()) {
      goto LABEL_42;
    }
LABEL_19:
    unsigned int v20 = (v20 + v24) & v19;
    uint64_t v21 = (unsigned int *)(v18 + 48 * v20);
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v21);
    ++v24;
  }
  while (!v26);
  if (v23)
  {
    *((_OWORD *)v23 + 1) = 0u;
    *((_OWORD *)v23 + 2) = 0u;
    *(_OWORD *)char v23 = 0u;
    --*(_DWORD *)(*v17 - 16);
    uint64_t v21 = v23;
  }
LABEL_26:
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v21, (uint64_t)v62);
  uint64_t v30 = v21[11];
  if (v30)
  {
    long long v31 = (uint64_t *)*((void *)v21 + 4);
    uint64_t v32 = 8 * v30;
    do
    {
      uint64_t v33 = *v31;
      *long long v31 = 0;
      if (v33) {
        (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
      }
      ++v31;
      v32 -= 8;
    }
    while (v32);
  }
  long long v34 = (WTF *)*((void *)v21 + 4);
  if (v34)
  {
    *((void *)v21 + 4) = 0;
    v21[10] = 0;
    WTF::fastFree(v34, v29);
  }
  int v58 = 0;
  *((void *)v21 + 4) = 0;
  char v59 = 0;
  *((void *)v21 + 5) = 0;
  WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v29);
  uint64_t v35 = *v17;
  if (*v17) {
    int v36 = *(_DWORD *)(v35 - 12) + 1;
  }
  else {
    int v36 = 1;
  }
  *(_DWORD *)(v35 - 12) = v36;
  uint64_t v37 = *v17;
  if (*v17) {
    int v38 = *(_DWORD *)(v37 - 12);
  }
  else {
    int v38 = 0;
  }
  uint64_t v39 = (*(_DWORD *)(v37 - 16) + v38);
  unint64_t v40 = *(unsigned int *)(v37 - 4);
  if (v40 > 0x400)
  {
    if (v40 <= 2 * v39) {
LABEL_41:
    }
      uint64_t v21 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(a1 + 2, (uint64_t)v21);
  }
  else if (3 * v40 <= 4 * v39)
  {
    goto LABEL_41;
  }
LABEL_42:
  uint64_t result = v21 + 8;
  uint64_t v41 = v21[11];
  if (v41 == v21[10])
  {
    uint64_t result = (unsigned int *)WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v41 + 1, (unint64_t)a6);
    a6 = result;
    uint64_t v41 = v21[11];
    uint64_t v42 = (void *)(*((void *)v21 + 4) + 8 * v41);
  }
  else
  {
    uint64_t v42 = (void *)(*(void *)result + 8 * v41);
  }
  uint64_t v43 = *(void *)a6;
  *(void *)a6 = 0;
  *uint64_t v42 = v43;
  unsigned int v44 = v41 + 1;
  v21[11] = v44;
  if (v44 <= 1)
  {
    uint64_t v45 = *(void *)(v53 + 104);
    int v58 = (WTF *)a1;
    uint64_t v46 = *a1;
    if (*a1) {
      goto LABEL_51;
    }
    uint64_t v46 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v46 = 1;
    *(void *)(v46 + 8) = a1;
    char v48 = (unsigned int *)*a1;
    *a1 = v46;
    if (!v48) {
      goto LABEL_51;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v48, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v48);
      WTF::fastFree((WTF *)v48, v47);
    }
    uint64_t v46 = *a1;
    if (*a1) {
LABEL_51:
    }
      atomic_fetch_add((atomic_uint *volatile)v46, 1u);
    char v59 = (WTF *)v46;
    v60[0] = 0;
    int v61 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v60, (uint64_t)v62);
    uint64_t v49 = WTF::fastMalloc((WTF *)0x38);
    *(void *)uint64_t v49 = &unk_1EE9E5CF8;
    *(void *)(v49 + 8) = v58;
    uint64_t v50 = v59;
    char v59 = 0;
    *(void *)(v49 + ++*(_DWORD *)(this + 16) = v50;
    *(unsigned char *)(v49 + 24) = 0;
    *(_DWORD *)(v49 + 48) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v49 + 24, (uint64_t)v60);
    char v56 = (WTF::StringImpl *)v49;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v45 + 504))(v45, v53, v54, v55, &v56);
    uint64_t v52 = v56;
    char v56 = 0;
    if (v52) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v52 + 8))(v52);
    }
    if (v61 != -1) {
      ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v61])(&v57, v60);
    }
    int v61 = -1;
    uint64_t result = (unsigned int *)v59;
    char v59 = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v51);
    }
  }
LABEL_59:
  if (v63 != -1) {
    return (unsigned int *)((uint64_t (*)(WTF **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v63])(&v58, v62);
  }
  return result;
}

uint64_t WebKit::WebDeviceOrientationAndMotionAccessController::cachedDeviceOrientationPermission(WebKit::WebDeviceOrientationAndMotionAccessController *this, const WebCore::SecurityOriginData *a2)
{
  int v4 = *((_DWORD *)a2 + 6);
  if (!v4)
  {
    if (*(void *)a2 == -1) {
      return 1;
    }
    goto LABEL_3;
  }
  if (v4 == 1)
  {
LABEL_3:
    WebCore::SecurityOriginData::isNull(a2);
    if ((v5 & 1) == 0)
    {
      uint64_t v7 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)this + 1, (uint64_t)a2);
      uint64_t v8 = *((void *)this + 1);
      if (v8) {
        v8 += 40 * *(unsigned int *)(v8 - 4);
      }
      if (v8 == v7) {
        return 2;
      }
      else {
        return (*(unsigned char *)(v7 + 32) ^ 1);
      }
    }
    return 1;
  }
  unint64_t v10 = (WebKit::WebsiteDataRecord *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::WebsiteDataRecord::displayNameForHostName(v10, v11);
}

uint64_t WebKit::WebsiteDataRecord::displayNameForHostName(WebKit::WebsiteDataRecord *this, const WTF::String *a2)
{
  WebCore::PublicSuffixStore::singleton(this);

  return WebCore::PublicSuffixStore::topPrivatelyControlledDomain();
}

uint64_t WebKit::WebsiteDataStore::createNonPersistent@<X0>(WebKit::WebsiteDataStore **a1@<X8>)
{
  uint64_t v3 = (WebKit::WebsiteDataStore *)API::Object::newObject(0x1F8uLL, 124);
  uint64_t v4 = API::Object::newObject(0x220uLL, 125);
  uint64_t v7 = (CFTypeRef *)WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration(v4, 0, 1);
  uint64_t EphemeralSessionID = PAL::SessionID::generateEphemeralSessionID((PAL::SessionID *)v7);
  WebKit::WebsiteDataStore::WebsiteDataStore((uint64_t)v3, (uint64_t *)&v7, EphemeralSessionID);
  *a1 = v3;
  if (v7) {
    CFRelease(v7[1]);
  }

  return WebKit::WebsiteDataStore::resolveDirectoriesAsynchronously(v3);
}

uint64_t WebKit::WebsiteDataStore::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, WebKit::WebsiteDataStore **a3@<X8>)
{
  uint64_t v6 = API::Object::newObject(0x1F8uLL, 124);
  uint64_t v7 = (WebKit::WebsiteDataStore *)WebKit::WebsiteDataStore::WebsiteDataStore(v6, a1, a2);
  *a3 = v7;

  return WebKit::WebsiteDataStore::resolveDirectoriesAsynchronously(v7);
}

void WebKit::WebsiteDataStore::~WebsiteDataStore(WebKit::WebsiteDataStore *this)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EE9E5B50;
  uint64_t v2 = qword_1EB3585F0;
  uint64_t v3 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    uint64_t v6 = *((void *)this + 3);
    *(_DWORD *)size_t v78 = 134218240;
    *(void *)&v78[4] = this;
    __int16 v79 = 2048;
    uint64_t v80 = v6;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebsiteDataStore::~WebsiteDataStore sessionID=%llu", v78, 0x16u);
  }
  uint64_t v7 = *((void *)this + 3);
  if ((unint64_t)(v7 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    __break(0xC471u);
    JUMPOUT(0x198FDD8F0);
  }
  uint64_t v8 = *(WTF::StringImpl **)(*((void *)this + 26) + 112);
  if (v8)
  {
    *(_DWORD *)v8 += 2;
    if ((v7 & 0x8000000000000000) == 0 && *((_DWORD *)v8 + 1))
    {
      if (_MergedGlobals_104)
      {
        uint64_t v9 = qword_1EB359DD8;
        if (qword_1EB359DD8)
        {
          int v10 = *(_DWORD *)(qword_1EB359DD8 - 8);
          unsigned int v11 = *((_DWORD *)v8 + 4);
          if (v11 >= 0x100) {
            unsigned int v12 = v11 >> 8;
          }
          else {
            unsigned int v12 = WTF::StringImpl::hashSlowCase(v8);
          }
          for (i = 0; ; unsigned int v12 = i + v14)
          {
            uint64_t v14 = v12 & v10;
            uint64_t v3 = *(WTF **)(v9 + 16 * v14);
            if (v3 != (WTF *)-1)
            {
              if (!v3)
              {
                uint64_t v15 = qword_1EB359DD8;
                if (!qword_1EB359DD8) {
                  goto LABEL_32;
                }
                uint64_t v3 = (WTF *)(qword_1EB359DD8 + 16 * *(unsigned int *)(qword_1EB359DD8 - 4));
                goto LABEL_20;
              }
              if (WTF::equal(v3, v8, v5)) {
                break;
              }
            }
            ++i;
          }
          uint64_t v3 = (WTF *)(v9 + 16 * v14);
          uint64_t v15 = qword_1EB359DD8;
          if (!qword_1EB359DD8) {
            goto LABEL_21;
          }
LABEL_20:
          v15 += 16 * *(unsigned int *)(v15 - 4);
          if ((WTF *)v15 == v3) {
            goto LABEL_32;
          }
LABEL_21:
          if ((WTF *)v15 != v3)
          {
            uint64_t v3 = WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v3, v4);
            uint64_t v16 = qword_1EB359DD8;
            ++*(_DWORD *)(qword_1EB359DD8 - 16);
            int v17 = v16 ? *(_DWORD *)(v16 - 12) - 1 : -1;
            *(_DWORD *)(v16 - 12) = v17;
            if (qword_1EB359DD8)
            {
              unsigned int v18 = *(_DWORD *)(qword_1EB359DD8 - 4);
              if (6 * *(_DWORD *)(qword_1EB359DD8 - 12) < v18 && v18 >= 9) {
                WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,PAL::SessionID>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,PAL::SessionID,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v18 >> 1);
              }
            }
          }
        }
      }
      else
      {
        qword_1EB359DD8 = 0;
        _MergedGlobals_104 = 1;
      }
    }
LABEL_32:
    if (*(_DWORD *)v8 == 2) {
      uint64_t v3 = (WTF *)WTF::StringImpl::destroy(v8, v4);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  WebKit::allDataStores(v3);
  if (WebKit::allDataStores(void)::map)
  {
    uint64_t v21 = *((void *)this + 3);
    unsigned int v22 = *(_DWORD *)(WebKit::allDataStores(void)::map - 8);
    unint64_t v23 = (v21 + ~(v21 << 32)) ^ ((unint64_t)(v21 + ~(v21 << 32)) >> 22);
    unint64_t v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    unint64_t v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    uint64_t v26 = v22 & ((v25 >> 31) ^ v25);
    uint64_t v27 = *(void *)(WebKit::allDataStores(void)::map + 16 * v26);
    if (v27 != v21)
    {
      int v28 = 1;
      while (v27)
      {
        uint64_t v26 = (v26 + v28) & v22;
        uint64_t v27 = *(void *)(WebKit::allDataStores(void)::map + 16 * v26);
        ++v28;
        if (v27 == v21) {
          goto LABEL_42;
        }
      }
      uint64_t v26 = *(unsigned int *)(WebKit::allDataStores(void)::map - 4);
    }
LABEL_42:
    if (v26 != *(_DWORD *)(WebKit::allDataStores(void)::map - 4))
    {
      unint64_t v29 = (void *)(WebKit::allDataStores(void)::map + 16 * v26);
      uint64_t v30 = (unsigned int *)v29[1];
      void *v29 = -1;
      v29[1] = 0;
      if (v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v20);
      }
      ++*(_DWORD *)(WebKit::allDataStores(void)::map - 16);
      if (WebKit::allDataStores(void)::map) {
        int v31 = *(_DWORD *)(WebKit::allDataStores(void)::map - 12) - 1;
      }
      else {
        int v31 = -1;
      }
      *(_DWORD *)(WebKit::allDataStores(void)::map - 12) = v31;
      if (WebKit::allDataStores(void)::map)
      {
        unsigned int v32 = *(_DWORD *)(WebKit::allDataStores(void)::map - 4);
        if (6 * *(_DWORD *)(WebKit::allDataStores(void)::map - 12) < v32 && v32 >= 9) {
          WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(v32 >> 1);
        }
      }
    }
  }
  long long v34 = (atomic_uint *)*((void *)this + 50);
  if (v34)
  {
    uint64_t v35 = (unsigned int *)(v34 + 4);
    atomic_fetch_add(v34 + 4, 1u);
    *(void *)size_t v78 = *((void *)this + 55);
    *((void *)this + 55) = 0;
    WebKit::NetworkProcessProxy::removeSession((uint64_t)v34, this, (uint64_t *)v78);
    uint64_t v36 = *(void *)v78;
    *(void *)size_t v78 = 0;
    if (v36) {
      (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    }
    long long v34 = (atomic_uint *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v35);
  }
  if (*((void *)this + 55))
  {
    WTF::RunLoop::main((WTF::RunLoop *)v34);
    uint64_t v37 = *((void *)this + 55);
    *((void *)this + 55) = 0;
    int v38 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v38 = &unk_1EE9E5DC0;
    v38[1] = v37;
    *(void *)size_t v78 = v38;
    WTF::RunLoop::dispatch();
    uint64_t v39 = *(void *)v78;
    *(void *)size_t v78 = 0;
    if (v39) {
      (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
    }
  }
  {
    if (WebKit::singleton(void)::singleton)
    {
      uint64_t v40 = *(void *)(WebKit::singleton(void)::singleton + 8);
      if (v40)
      {
        uint64_t v41 = (unsigned int *)(v40 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v40 + 16), 1u);
        WebKit::GPUProcessProxy::removeSession((void *)v40, *((void *)this + 3));
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v41);
      }
    }
  }
  else
  {
    WebKit::singleton(void)::singleton = 0;
  }
  uint64_t v42 = (WTF::StringImpl **)*((void *)this + 62);
  if (v42) {
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(v42, (WTF::StringImpl *)v20);
  }
  if (*((unsigned char *)this + 480)) {
    WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 464, v20);
  }
  uint64_t v43 = (WTF::StringImpl **)*((void *)this + 57);
  if (v43) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v43, (WTF::StringImpl *)v20);
  }
  uint64_t v44 = *((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  uint64_t v45 = *((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v45) {
    CFRelease(*(CFTypeRef *)(v45 + 8));
  }
  uint64_t v46 = (_DWORD *)*((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v46)
  {
    if (v46[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v46 + 8))(v46);
    }
    else {
      --v46[2];
    }
  }
  uint64_t v47 = (WTF *)*((void *)this + 51);
  *((void *)this + 51) = 0;
  if (v47) {
    std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100](this + 408, v47);
  }
  uint64_t v48 = *((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v48) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v48 + 16));
  }
  uint64_t v49 = *((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v49) {
    CFRelease(*(CFTypeRef *)(v49 + 8));
  }
  uint64_t v50 = *((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
  }
  uint64_t v51 = *((void *)this + 47);
  if (!v51) {
    goto LABEL_100;
  }
  uint64_t v52 = *(unsigned int *)(v51 - 4);
  if (!v52) {
    goto LABEL_99;
  }
  uint64_t v53 = *((void *)this + 47);
  while (1)
  {
    int v54 = *(_DWORD *)(v53 + 24);
    if (v54) {
      break;
    }
    if (*(void *)v53 != -1) {
      goto LABEL_92;
    }
LABEL_95:
    v53 += 48;
    if (!--v52) {
      goto LABEL_99;
    }
  }
  if (v54 == 1)
  {
LABEL_92:
    WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v53 + 32, v47);
    uint64_t v55 = *(unsigned int *)(v53 + 24);
    if (v55 != -1) {
      ((void (*)(unsigned char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v55])(v78, v53);
    }
    *(_DWORD *)(v53 + 24) = -1;
    goto LABEL_95;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_99:
  WTF::fastFree((WTF *)(v51 - 16), v47);
LABEL_100:
  uint64_t v56 = *((void *)this + 46);
  if (v56) {
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v56, v47);
  }
  uint64_t v57 = *((void *)this + 45);
  if (v57)
  {
    *(void *)(v57 + 8) = 0;
    int v58 = (unsigned int *)*((void *)this + 45);
    *((void *)this + 45) = 0;
    if (v58 && atomic_fetch_add((atomic_uint *volatile)v58, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v58);
      WTF::fastFree((WTF *)v58, v47);
    }
  }
  else
  {
    *((void *)this + 45) = 0;
  }
  uint64_t v59 = *((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  uint64_t v60 = *((unsigned int *)this + 87);
  if (v60)
  {
    int v61 = (uint64_t *)*((void *)this + 42);
    uint64_t v62 = 8 * v60;
    do
    {
      uint64_t v63 = *v61;
      *int v61 = 0;
      if (v63) {
        WTF::RefCounted<WebKit::SecKeyProxyStore>::deref(v63, v47);
      }
      ++v61;
      v62 -= 8;
    }
    while (v62);
  }
  uint64_t v64 = (WTF *)*((void *)this + 42);
  if (v64)
  {
    *((void *)this + 42) = 0;
    *((_DWORD *)this + 86) = 0;
    WTF::fastFree(v64, v47);
  }
  uint64_t v65 = (unsigned int **)*((void *)this + 40);
  if (v65) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v65, v47);
  }
  int v66 = (unsigned int **)*((void *)this + 38);
  if (v66) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v66, v47);
  }
  long long v67 = (WTF *)*((void *)this + 36);
  if (v67)
  {
    *((void *)this + 36) = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree(v67, v47);
  }
  uint64_t v68 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v68) {
    (*(void (**)(uint64_t))(*(void *)v68 + 56))(v68);
  }
  uint64_t v69 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v69) {
    (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
  }
  int v70 = (WTF::StringImpl *)*((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2) {
      WTF::StringImpl::destroy(v70, v47);
    }
    else {
      *(_DWORD *)v70 -= 2;
    }
  }
  char v71 = (WTF::StringImpl *)*((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2) {
      WTF::StringImpl::destroy(v71, v47);
    }
    else {
      *(_DWORD *)v71 -= 2;
    }
  }
  uint64_t v72 = (WTF::StringImpl *)*((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2) {
      WTF::StringImpl::destroy(v72, v47);
    }
    else {
      *(_DWORD *)v72 -= 2;
    }
  }
  char v73 = (WTF::StringImpl *)*((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2) {
      WTF::StringImpl::destroy(v73, v47);
    }
    else {
      *(_DWORD *)v73 -= 2;
    }
  }
  double v74 = (unsigned int *)*((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v74) {
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v74);
  }
  uint64_t v75 = *((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v75) {
    CFRelease(*(CFTypeRef *)(v75 + 8));
  }
  if (*((unsigned char *)this + 192)) {
    WebKit::WebsiteDataStoreConfiguration::Directories::~Directories((WebKit::WebsiteDataStore *)((char *)this + 40), v47);
  }
  uint64_t v76 = *((void *)this + 2);
  if (v76)
  {
    *(void *)(v76 + 8) = 0;
    uint64_t v77 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v77)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v77, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v77);
        WTF::fastFree((WTF *)v77, v47);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  uint64_t vars8;

  WebKit::WebsiteDataStore::~WebsiteDataStore(this);

  JUMPOUT(0x199740C10);
}

void WebKit::WebsiteDataStore::defaultDataStore(WebKit::WebsiteDataStore *this@<X0>, WebKit::WebsiteDataStore **a2@<X8>)
{
  WebKit::InitializeWebKit2(this);
  {
    if (WebKit::globalDefaultDataStore(void)::globalDefaultDataStore)
    {
      uint64_t v3 = *(CFTypeRef **)(WebKit::globalDefaultDataStore(void)::globalDefaultDataStore + 8);
      if (v3)
      {
        CFRetain(v3[1]);
        *a2 = (WebKit::WebsiteDataStore *)v3;
        return;
      }
    }
  }
  else
  {
    WebKit::globalDefaultDataStore(void)::globalDefaultDataStore = 0;
  }
  uint64_t v4 = API::Object::newObject(0x220uLL, 125);
  uint64_t v12 = WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration(v4, 1, 1);
  WebKit::WebsiteDataStore::create(&v12, 1, a2);
  if (v12) {
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  uint64_t v6 = *a2;
  if (*a2)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v6 + 4, (uint64_t)*a2);
    uint64_t v7 = (atomic_uint *)*((void *)v6 + 2);
    if (v7) {
      atomic_fetch_add(v7, 1u);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (unsigned int *)WebKit::globalDefaultDataStore(void)::globalDefaultDataStore;
  WebKit::globalDefaultDataStore(void)::globalDefaultDataStore = (uint64_t)v7;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v5);
  }
  uint64_t v9 = *a2;
  {
    if (!v9) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  WebKit::protectedDefaultDataStore(void)::globalDefaultDataStore = 0;
  if (v9) {
LABEL_18:
  }
    CFRetain(*((CFTypeRef *)v9 + 1));
LABEL_19:
  uint64_t v10 = WebKit::protectedDefaultDataStore(void)::globalDefaultDataStore;
  WebKit::protectedDefaultDataStore(void)::globalDefaultDataStore = (uint64_t)v9;
  if (v10)
  {
    unsigned int v11 = *(const void **)(v10 + 8);
    CFRelease(v11);
  }
}

void WebKit::WebsiteDataStore::deleteDefaultDataStoreForTesting(WebKit::WebsiteDataStore *this)
{
  {
    uint64_t v1 = WebKit::protectedDefaultDataStore(void)::globalDefaultDataStore;
    WebKit::protectedDefaultDataStore(void)::globalDefaultDataStore = 0;
    if (v1) {
      CFRelease(*(CFTypeRef *)(v1 + 8));
    }
  }
  else
  {
    WebKit::protectedDefaultDataStore(void)::globalDefaultDataStore = 0;
  }
}

void *WebKit::WebsiteDataStore::existingDataStoreForIdentifier@<X0>(WebKit::WebsiteDataStore *this@<X0>, void *a2@<X8>)
{
  WebKit::allDataStores(this);
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)&WebKit::allDataStores(void)::map);
  uint64_t v7 = WebKit::allDataStores(void)::map;
  if (WebKit::allDataStores(void)::map) {
    uint64_t v7 = WebKit::allDataStores(void)::map + 16 * *(unsigned int *)(WebKit::allDataStores(void)::map - 4);
  }
  if ((void *)v7 == result)
  {
LABEL_15:
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v9 = *(void *)this;
    uint64_t v8 = *((void *)this + 1);
    while (1)
    {
      uint64_t v10 = *(void *)(result[1] + 8);
      if (*(_OWORD *)(*(void *)(v10 + 208) + 32) != 0
        && *(void *)(*(void *)(v10 + 208) + 40) == v8
        && *(void *)(*(void *)(v10 + 208) + 32) == v9)
      {
        break;
      }
      while (1)
      {
        result += 2;
        if (result == v6) {
          break;
        }
        if ((unint64_t)(*result + 1) > 1) {
          goto LABEL_14;
        }
      }
      uint64_t result = v6;
LABEL_14:
      if (result == (void *)v7) {
        goto LABEL_15;
      }
    }
    uint64_t result = CFRetain(*(CFTypeRef *)(v10 + 8));
  }
  *a2 = v10;
  return result;
}

void WebKit::WebsiteDataStore::dataStoreForIdentifier(WebKit::WebsiteDataStore *this@<X0>, WebKit::WebsiteDataStore **a2@<X8>)
{
  if (*(void *)this <= 1uLL)
  {
    __break(0xC471u);
  }
  else
  {
    WebKit::InitializeWebKit2(this);
    WebKit::allDataStores(v5);
    uint64_t v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)&WebKit::allDataStores(void)::map);
    uint64_t v8 = WebKit::allDataStores(void)::map;
    if (WebKit::allDataStores(void)::map) {
      uint64_t v8 = WebKit::allDataStores(void)::map + 16 * *(unsigned int *)(WebKit::allDataStores(void)::map - 4);
    }
    if ((void *)v8 == v6)
    {
LABEL_15:
      unsigned int v11 = (WebKit::WebsiteDataStoreConfiguration *)API::Object::newObject(0x220uLL, 125);
      uint64_t v13 = (CFTypeRef *)WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration(v11, this);
      uint64_t PersistentSessionID = PAL::SessionID::generatePersistentSessionID((PAL::SessionID *)v13);
      WebKit::WebsiteDataStore::create((uint64_t *)&v13, PersistentSessionID, a2);
      if (v13) {
        CFRelease(v13[1]);
      }
    }
    else
    {
      while (1)
      {
        uint64_t v9 = *(void *)(v6[1] + 8);
        if (*(_OWORD *)(*(void *)(v9 + 208) + 32) != 0
          && *(void *)(*(void *)(v9 + 208) + 40) == *((void *)this + 1)
          && *(void *)(*(void *)(v9 + 208) + 32) == *(void *)this)
        {
          break;
        }
        while (1)
        {
          v6 += 2;
          if (v6 == v7) {
            break;
          }
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_14;
          }
        }
        uint64_t v6 = v7;
LABEL_14:
        if (v6 == (void *)v8) {
          goto LABEL_15;
        }
      }
      CFRetain(*(CFTypeRef *)(v9 + 8));
      *a2 = (WebKit::WebsiteDataStore *)v9;
    }
  }
}

WebKit::SOAuthorizationCoordinator *WebKit::WebsiteDataStore::soAuthorizationCoordinator(WebKit::WebsiteDataStore *this, const WebKit::WebPageProxy *a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = *((void *)a2 + 34);
  {
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key, a3) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198FDDD84);
  }
  uint64_t result = (WebKit::SOAuthorizationCoordinator *)*((void *)this + 51);
  if (!result)
  {
    uint64_t v6 = (char *)this + 408;
    uint64_t v7 = (WebKit::SOAuthorizationCoordinator *)WTF::fastMalloc((WTF *)0x10);
    uint64_t result = WebKit::SOAuthorizationCoordinator::SOAuthorizationCoordinator(v7);
    uint64_t v8 = *(WTF **)v6;
    *(void *)uint64_t v6 = result;
    if (v8)
    {
      std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)v6, v8);
      return *(WebKit::SOAuthorizationCoordinator **)v6;
    }
  }
  return result;
}

uint64_t WebKit::WebsiteDataStore::fetchData(WTF::WorkQueue *a1, int a2, char a3, uint64_t *a4)
{
  uint64_t v8 = WTF::WorkQueue::main(a1);
  (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
  uint64_t v11 = v8;
  WebKit::WebsiteDataStore::fetchDataAndApply((uint64_t)a1, a2, a3, &v11, a4);
  uint64_t result = v11;
  if (v11)
  {
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)v11 + 56);
    return v10();
  }
  return result;
}

unsigned int **WebKit::WebsiteDataStore::fetchDataAndApply(uint64_t a1, int a2, char a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 24);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v11;
    _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "WebsiteDataStore::fetchDataAndApply started to fetch data for session %llu", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v12 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)uint64_t v12 = 1;
  *(unsigned char *)(v12 + 4) = a3;
  uint64_t v13 = *a4;
  *a4 = 0;
  *(void *)(v12 + 8) = v13;
  uint64_t v14 = *a5;
  *a5 = 0;
  *(void *)(v12 + ++*(_DWORD *)(this + 16) = v14;
  *(void *)(v12 + 24) = 0;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  *(void *)(v12 + 32) = a1;
  uint64_t v63 = (atomic_uint *)v12;
  if ((a2 & 2) != 0)
  {
    uint64_t v15 = *(void *)(a1 + 280);
    (*(void (**)(uint64_t))(*(void *)v15 + 48))(v15);
    WTF::String::isolatedCopy();
    atomic_fetch_add((atomic_uint *volatile)v12, 1u);
    *((void *)&buf + 1) = v12;
    uint64_t v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v16 = &unk_1EE9E5EB0;
    *((void *)v16 + 1) = buf;
    uint64_t v17 = *((void *)&buf + 1);
    long long buf = 0uLL;
    *((void *)v16 + 2) = v17;
    uint64_t v56 = v16;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v15 + 32))(v15, &v56);
    unsigned int v18 = v56;
    uint64_t v56 = 0;
    if (v18) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v18 + 8))(v18);
    }
    WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)&buf + 1);
    unsigned int v20 = (WTF::StringImpl *)buf;
    *(void *)&long long buf = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v19);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v15 + 56))(v15);
  }
  uint64_t v21 = *(void *)(a1 + 24);
  BOOL v22 = v21 >= 0 || v21 == -1;
  if (a2)
  {
    int v23 = a2;
    while (WebKit::WebsiteData::ownerProcess(v23 & -v23))
    {
      v23 &= v23 - 1;
      if (!v23) {
        goto LABEL_25;
      }
    }
    if (v22) {
      WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
    }
    uint64_t v24 = *(void *)(a1 + 400);
    if (v24)
    {
      atomic_fetch_add((atomic_uint *volatile)(v24 + 16), 1u);
      unint64_t v25 = *(WTF::StringImpl **)(a1 + 24);
      uint64_t v26 = (unsigned int *)v63;
      atomic_fetch_add(v63, 1u);
      int v61 = v26;
      uint64_t v27 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v27 = &unk_1EE9E5F00;
      int v28 = v61;
      int v61 = 0;
      uint64_t v62 = v27;
      v27[1] = v28;
      uint64_t v56 = v25;
      int v65 = a2;
      char v64 = a3;
      *(void *)&long long buf = &v56;
      *((void *)&buf + 1) = &v65;
      long long v67 = &v64;
      WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::FetchWebsiteData,WTF::CompletionHandler<void ()(WebKit::WebsiteData)>>(v24, (uint64_t)&buf, (uint64_t *)&v62, 0, 0, 1);
      uint64_t v29 = (uint64_t)v62;
      uint64_t v62 = 0;
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
      }
      WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref(&v61);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v24 + 16));
    }
  }
LABEL_25:
  if ((a2 & 4) != 0)
  {
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 304), &buf);
    uint64_t v30 = *(void *)(a1 + 304);
    if (v30)
    {
      uint64_t v31 = *(unsigned int *)(v30 - 4);
      uint64_t v32 = v30 + 8 * v31;
    }
    else
    {
      uint64_t v32 = 0;
      uint64_t v31 = 0;
    }
    uint64_t v56 = (WTF::StringImpl *)(a1 + 304);
    uint64_t v57 = v32;
    uint64_t v58 = v32;
    uint64_t v59 = v32;
    uint64_t v60 = v30 + 8 * v31;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v56);
    for (uint64_t i = *((void *)&buf + 1); *((void *)&buf + 1) != v57; uint64_t i = *((void *)&buf + 1))
    {
      uint64_t v34 = *(void *)(*(void *)i + 8);
      atomic_fetch_add((atomic_uint *volatile)(v34 + 16), 1u);
      uint64_t v35 = *(void *)(v34 + 136);
      if ((!v35 || !*(unsigned char *)(v35 + 104)) && *(void *)(v34 + 144))
      {
        uint64_t v36 = *(void *)(a1 + 24);
        uint64_t v37 = (unsigned int *)v63;
        atomic_fetch_add(v63, 1u);
        int v61 = v37;
        int v38 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v38 = &unk_1EE9E5F28;
        uint64_t v39 = v61;
        int v61 = 0;
        uint64_t v62 = v38;
        v38[1] = v39;
        WebKit::WebProcessProxy::fetchWebsiteData(v34, v36, a2, (uint64_t *)&v62);
        uint64_t v40 = (uint64_t)v62;
        uint64_t v62 = 0;
        if (v40) {
          (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
        }
        WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref(&v61);
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v34 + 16));
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&buf);
    }
  }
  if ((a2 & 0x10000) != 0)
  {
    uint64_t v41 = (atomic_uint *)WebKit::WebsiteDataStore::ensureDeviceIdHashSaltStorage((WebKit::WebsiteDataStore *)a1);
    atomic_fetch_add(v41, 1u);
    uint64_t v42 = v63;
    atomic_fetch_add(v63, 1u);
    uint64_t v43 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v43 = &unk_1EE9E5F50;
    v43[1] = v42;
    uint64_t v56 = 0;
    *(void *)&long long buf = v43;
    WebKit::DeviceIdHashSaltStorage::getDeviceIdHashSaltOrigins((uint64_t)v41, (uint64_t *)&buf);
    if ((void)buf) {
      (*(void (**)(void))(*(void *)buf + 8))(buf);
    }
    WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)&v56);
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref((unsigned int *)v41);
  }
  if ((a2 & 0x100) != 0)
  {
    uint64_t v44 = *(void *)(a1 + 24);
    if ((v44 & 0x8000000000000000) == 0 || v44 == -1)
    {
      uint64_t v45 = *(WTF::StringImpl **)(WebKit::WebsiteDataStore::resolvedDirectories((atomic_uchar *)a1) + 96);
      if (v45) {
        *(_DWORD *)v45 += 2;
      }
      uint64_t v56 = v45;
      uint64_t v46 = *(void *)(a1 + 280);
      (*(void (**)(uint64_t))(*(void *)v46 + 48))(v46);
      WTF::String::isolatedCopy();
      uint64_t v47 = v63;
      atomic_fetch_add(v63, 1u);
      *((void *)&buf + 1) = v47;
      uint64_t v48 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v48 = &unk_1EE9E5F78;
      v48[1] = buf;
      uint64_t v49 = *((void *)&buf + 1);
      long long buf = 0uLL;
      v48[2] = v49;
      uint64_t v62 = v48;
      (*(void (**)(uint64_t, void **))(*(void *)v46 + 32))(v46, &v62);
      uint64_t v50 = (uint64_t)v62;
      uint64_t v62 = 0;
      if (v50) {
        (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
      }
      WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)&buf + 1);
      uint64_t v52 = (WTF::StringImpl *)buf;
      *(void *)&long long buf = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2) {
          WTF::StringImpl::destroy(v52, v51);
        }
        else {
          *(_DWORD *)v52 -= 2;
        }
      }
      (*(void (**)(uint64_t))(*(void *)v46 + 56))(v46);
      int v54 = v56;
      uint64_t v56 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2) {
          WTF::StringImpl::destroy(v54, v53);
        }
        else {
          *(_DWORD *)v54 -= 2;
        }
      }
    }
  }
  return WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)&v63);
}

unsigned int **WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref(unsigned int **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v4 = &unk_1EE9E5E60;
      v4[1] = v2;
      char v5 = v4;
      WTF::ensureOnMainRunLoop();
      if (v5) {
        (*(void (**)(void *))(*v5 + 8))(v5);
      }
    }
  }
  return a1;
}

uint64_t WebKit::WebsiteDataStore::fetchDataForRegistrableDomains(uint64_t a1, int a2, char a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = *(void *)(a1 + 280);
  (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
  uint64_t v22 = v10;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_((WTF::StringImpl *)&v18, a4);
  uint64_t v11 = *a5;
  *a5 = 0;
  uint64_t v20 = v11;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v12 = &unk_1EE9E5FA0;
  v12[1] = v18;
  uint64_t v13 = v19;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  void v12[2] = v13;
  uint64_t v14 = v20;
  uint64_t v20 = 0;
  uint64_t v21 = v12;
  v12[3] = v14;
  WebKit::WebsiteDataStore::fetchDataAndApply(a1, a2, a3, &v22, (uint64_t *)&v21);
  if (v21) {
    (*(void (**)(void *))(*v21 + 8))(v21);
  }
  uint64_t v16 = v20;
  uint64_t v20 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v15);
  uint64_t result = v22;
  if (v22) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v22 + 56))(v22);
  }
  return result;
}

uint64_t WebKit::WebsiteDataStore::computeWebProcessAccessTypeForDataRemoval(unsigned int a1)
{
  return (a1 >> 2) & 1;
}

unsigned int *WebKit::WebsiteDataStore::removeData(uint64_t a1, int a2, uint64_t *a3, double a4)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 24);
    *(_DWORD *)long long buf = 134218240;
    *(double *)&uint8_t buf[4] = a4;
    *(_WORD *)&uint8_t buf[12] = 2048;
    *(void *)&buf[14] = v9;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "WebsiteDataStore::removeData started to delete data modified since %f for session %llu", buf, 0x16u);
  }
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *a3;
  *a3 = 0;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v12 = &unk_1EE9E5FF0;
  v12[1] = a1;
  void v12[2] = v10;
  v12[3] = v11;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v13 = 1;
  *(void *)(v13 + 8) = v12;
  if ((a2 & 2) != 0)
  {
    uint64_t v14 = *(void *)(a1 + 280);
    (*(void (**)(uint64_t))(*(void *)v14 + 48))(v14);
    *(double *)long long buf = a4;
    WTF::String::isolatedCopy();
    atomic_fetch_add((atomic_uint *volatile)v13, 1u);
    *(void *)&uint8_t buf[16] = v13;
    uint64_t v15 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v15 = &unk_1EE9E6018;
    *((void *)v15 + 1) = *(void *)buf;
    *((void *)v15 + 2) = *(void *)&buf[8];
    uint64_t v16 = *(void *)&buf[16];
    *(_OWORD *)&uint8_t buf[8] = 0uLL;
    *((void *)v15 + 3) = v16;
    int v70 = v15;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v14 + 32))(v14, &v70);
    uint64_t v18 = v70;
    int v70 = 0;
    if (v18) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v18 + 8))(v18);
    }
    uint64_t v19 = *(unsigned int **)&buf[16];
    *(void *)&uint8_t buf[16] = 0;
    if (v19) {
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v19);
    }
    uint64_t v20 = *(WTF::StringImpl **)&buf[8];
    *(void *)&uint8_t buf[8] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v17);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v14 + 56))(v14);
  }
  uint64_t v21 = *(void *)(a1 + 24);
  BOOL v22 = (v21 & 0x8000000000000000) == 0 || v21 == -1;
  int v23 = WebKit::computeNetworkProcessAccessTypeForDataRemoval(a2, !v22);
  if (v23 != 1)
  {
    if (v23 != 2) {
      goto LABEL_23;
    }
    WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  }
  uint64_t v24 = *(void *)(a1 + 400);
  if (v24)
  {
    atomic_fetch_add((atomic_uint *volatile)(v24 + 16), 1u);
    unint64_t v25 = *(WTF::StringImpl **)(a1 + 24);
    atomic_fetch_add((atomic_uint *volatile)v13, 1u);
    uint64_t v26 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v26 = &unk_1EE9E6040;
    v26[1] = v13;
    uint64_t v75 = v26;
    int v70 = v25;
    int v77 = a2;
    double v76 = a4;
    *(void *)long long buf = &v70;
    *(void *)&uint8_t buf[8] = &v77;
    *(void *)&uint8_t buf[16] = &v76;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DeleteWebsiteData,WTF::CompletionHandler<void ()(void)>>(v24, (uint64_t)buf, (uint64_t *)&v75, 0, 0, 1);
    uint64_t v27 = (uint64_t)v75;
    uint64_t v75 = 0;
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v24 + 16));
    char v28 = 1;
    if ((a2 & 4) == 0) {
      goto LABEL_51;
    }
    goto LABEL_24;
  }
LABEL_23:
  char v28 = 0;
  if ((a2 & 4) == 0) {
    goto LABEL_51;
  }
LABEL_24:
  WebKit::WebsiteDataStore::processPools((WebKit::WebsiteDataStore *)a1, -1, (uint64_t *)buf);
  uint64_t v30 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)buf);
  uint64_t v31 = v29;
  uint64_t v32 = *(uint64_t **)buf;
  if (*(void *)buf) {
    uint64_t v33 = *(void *)buf + 8 * *(unsigned int *)(*(void *)buf - 4);
  }
  else {
    uint64_t v33 = 0;
  }
  if ((uint64_t *)v33 != v30)
  {
    do
    {
      uint64_t v34 = *v30;
      if (*v30) {
        CFRetain(*(CFTypeRef *)(v34 + 8));
      }
      uint64_t v35 = *(_DWORD **)(v34 + 760);
      ++*v35;
      WebKit::WebBackForwardCache::removeEntriesForSession((uint64_t)v35, *(void *)(a1 + 24));
      if (!*v35)
      {
        __break(0xC471u);
        JUMPOUT(0x198FDF138);
      }
      --*v35;
      uint64_t v37 = *(_DWORD **)(v34 + 768);
      ++*v37;
      WebKit::WebProcessCache::clearAllProcessesForSession((uint64_t)v37, *(WTF::StringImpl ***)(a1 + 24), v36);
      if (!*v37)
      {
        __break(0xC471u);
        JUMPOUT(0x198FDF158);
      }
      --*v37;
      CFRelease(*(CFTypeRef *)(v34 + 8));
      while (++v30 != v31)
      {
        if ((unint64_t)(*v30 + 1) > 1) {
          goto LABEL_37;
        }
      }
      uint64_t v30 = v31;
LABEL_37:
      ;
    }
    while (v30 != (uint64_t *)v33);
    uint64_t v32 = *(uint64_t **)buf;
  }
  if (v32) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v32, v29);
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 304), buf);
  uint64_t v38 = *(void *)(a1 + 304);
  if (v38)
  {
    uint64_t v39 = *(unsigned int *)(v38 - 4);
    uint64_t v40 = v38 + 8 * v39;
  }
  else
  {
    uint64_t v40 = 0;
    uint64_t v39 = 0;
  }
  int v70 = (WTF::StringImpl *)(a1 + 304);
  uint64_t v71 = v40;
  uint64_t v72 = v40;
  uint64_t v73 = v40;
  uint64_t v74 = v38 + 8 * v39;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v70);
  for (uint64_t i = *(void *)&buf[8]; *(void *)&buf[8] != v71; uint64_t i = *(void *)&buf[8])
  {
    uint64_t v42 = *(void *)(*(void *)i + 8);
    atomic_fetch_add((atomic_uint *volatile)(v42 + 16), 1u);
    uint64_t v43 = *(void *)(v42 + 136);
    if (!v43 || !*(unsigned char *)(v43 + 104))
    {
      if (*(void *)(v42 + 144))
      {
        uint64_t v44 = *(void *)(a1 + 24);
        atomic_fetch_add((atomic_uint *volatile)v13, 1u);
        uint64_t v45 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v45 = &unk_1EE9E6068;
        v45[1] = v13;
        double v76 = *(double *)&v45;
        WebKit::WebProcessProxy::deleteWebsiteData(v42, a4, v44, a2, (uint64_t *)&v76);
        uint64_t v46 = *(void *)&v76;
        double v76 = 0.0;
        if (v46) {
          (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
        }
      }
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v42 + 16));
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
LABEL_51:
  if ((a2 & 0x10001) != 0)
  {
    uint64_t v47 = (atomic_uint *)WebKit::WebsiteDataStore::ensureDeviceIdHashSaltStorage((WebKit::WebsiteDataStore *)a1);
    atomic_fetch_add(v47, 1u);
    atomic_fetch_add((atomic_uint *volatile)v13, 1u);
    uint64_t v48 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v48 = &unk_1EE9E6090;
    v48[1] = v13;
    *(void *)long long buf = v48;
    WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltOriginsModifiedSince((uint64_t)v47, (uint64_t *)buf, a4);
    uint64_t v49 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v49) {
      (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
    }
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref((unsigned int *)v47);
  }
  if ((a2 & 0x100) != 0)
  {
    uint64_t v50 = *(void *)(a1 + 24);
    if ((v50 & 0x8000000000000000) == 0 || v50 == -1)
    {
      uint64_t v51 = *(WTF::StringImpl **)(WebKit::WebsiteDataStore::resolvedDirectories((atomic_uchar *)a1) + 96);
      if (v51) {
        *(_DWORD *)v51 += 2;
      }
      int v70 = v51;
      uint64_t v52 = *(void *)(a1 + 280);
      (*(void (**)(uint64_t))(*(void *)v52 + 48))(v52);
      WTF::String::isolatedCopy();
      atomic_fetch_add((atomic_uint *volatile)v13, 1u);
      *(void *)&uint8_t buf[8] = v13;
      *(double *)&uint8_t buf[16] = a4;
      uint64_t v53 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v53 = &unk_1EE9E60B8;
      *(void *)(v53 + 8) = *(void *)buf;
      unint64_t v54 = *(void *)&buf[8];
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      *(_OWORD *)(v53 + ++*(_DWORD *)(this + 16) = __PAIR128__(*(unint64_t *)&buf[16], v54);
      double v76 = *(double *)&v53;
      (*(void (**)(uint64_t, double *))(*(void *)v52 + 32))(v52, &v76);
      uint64_t v56 = *(void *)&v76;
      double v76 = 0.0;
      if (v56) {
        (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
      }
      uint64_t v57 = *(unsigned int **)&buf[8];
      *(void *)&uint8_t buf[8] = 0;
      if (v57) {
        WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v57);
      }
      uint64_t v58 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2) {
          WTF::StringImpl::destroy(v58, v55);
        }
        else {
          *(_DWORD *)v58 -= 2;
        }
      }
      (*(void (**)(uint64_t))(*(void *)v52 + 56))(v52);
      uint64_t v60 = v70;
      int v70 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2) {
          WTF::StringImpl::destroy(v60, v59);
        }
        else {
          *(_DWORD *)v60 -= 2;
        }
      }
    }
  }
  if ((a2 & 0x400) != 0)
  {
    uint64_t v61 = *(void *)(a1 + 24);
    if ((v61 & 0x8000000000000000) == 0 || v61 == -1)
    {
      atomic_fetch_add((atomic_uint *volatile)v13, 1u);
      uint64_t v62 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v62 = &unk_1EE9E60E0;
      v62[1] = v13;
      *(void *)long long buf = v62;
      WebKit::WebsiteDataStore::removeRecentSearches(a1, (uint64_t *)buf, a4);
      uint64_t v63 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v63) {
        (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
      }
    }
  }
  if ((a2 & 0x1000) != 0)
  {
    if ((v28 & 1) == 0)
    {
      uint64_t v64 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
      atomic_fetch_add((atomic_uint *volatile)(v64 + 16), 1u);
      int v65 = *(WTF::StringImpl **)(a1 + 24);
      atomic_fetch_add((atomic_uint *volatile)v13, 1u);
      int v66 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v66 = &unk_1EE9E6108;
      v66[1] = v13;
      uint64_t v75 = v66;
      int v70 = v65;
      int v77 = a2;
      double v76 = a4;
      *(void *)long long buf = &v70;
      *(void *)&uint8_t buf[8] = &v77;
      *(void *)&uint8_t buf[16] = &v76;
      WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DeleteWebsiteData,WTF::CompletionHandler<void ()(void)>>(v64, (uint64_t)buf, (uint64_t *)&v75, 0, 0, 1);
      uint64_t v67 = (uint64_t)v75;
      uint64_t v75 = 0;
      if (v67) {
        (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v64 + 16));
    }
    atomic_fetch_add((atomic_uint *volatile)v13, 1u);
    uint64_t v68 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v68 = &unk_1EE9E6130;
    v68[1] = v13;
    *(void *)long long buf = v68;
    WebKit::WebsiteDataStore::clearResourceLoadStatisticsInWebProcesses((WebKit::WebsiteDataStore *)a1, (uint64_t *)buf);
    if (*(void *)buf) {
      (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
    }
  }
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref((unsigned int *)v13);
}

uint64_t WebKit::computeNetworkProcessAccessTypeForDataRemoval(int a1, int a2)
{
  char v2 = a1;
  if (a1)
  {
    unsigned __int8 v4 = 0;
    int v5 = a1;
    while (1)
    {
      if ((v2 & 4) != 0) {
        unsigned __int8 v4 = 1;
      }
      if (!WebKit::WebsiteData::ownerProcess(v5 & -v5))
      {
        unsigned __int8 v4 = 2;
        if ((v5 & -v5) != 1 || !a2) {
          return v4;
        }
        unsigned __int8 v4 = 1;
      }
      v5 &= v5 - 1;
      if (!v5) {
        return v4;
      }
    }
  }
  return 0;
}

void WebKit::WebsiteDataStore::processPools(WebKit::WebsiteDataStore *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  uint64_t v6 = (char *)this + 304;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 38, &v29);
  uint64_t v7 = *((void *)this + 38);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    uint64_t v9 = v7 + 8 * v8;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v24 = (uint64_t *)v6;
  uint64_t v25 = v9;
  uint64_t v26 = v9;
  uint64_t v27 = v9;
  uint64_t v28 = v7 + 8 * v8;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v24);
  uint64_t v10 = v30;
  if (v30 == v25) {
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v11 = *(atomic_uint **)(*(void *)v10 + 8);
    atomic_fetch_add(v11 + 4, 1u);
    uint64_t v12 = WebKit::WebProcessProxy::processPoolIfExists((WebKit::WebProcessProxy *)v11);
    if (v12) {
      break;
    }
LABEL_12:
    if (v11) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v11 + 4);
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v29);
    uint64_t v10 = v30;
    if (v30 == v25)
    {
      uint64_t v14 = *a3;
      goto LABEL_20;
    }
  }
  uint64_t v13 = v12;
  CFRetain(*(CFTypeRef *)(v12 + 8));
  uint64_t v23 = v13;
  WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::add((uint64_t)v22, a3, &v23);
  uint64_t v14 = *a3;
  if (*a3) {
    uint64_t v15 = *(unsigned int *)(v14 - 12);
  }
  else {
    uint64_t v15 = 0;
  }
  if (v15 != a2)
  {
    if (v23) {
      CFRelease(*(CFTypeRef *)(v23 + 8));
    }
    goto LABEL_12;
  }
  if (v23) {
    CFRelease(*(CFTypeRef *)(v23 + 8));
  }
  if (v11) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v11 + 4);
  }
LABEL_20:
  if (!v14 || !*(_DWORD *)(v14 - 12))
  {
LABEL_22:
    WebKit::WebProcessPool::allProcessPools((uint64_t)&v24);
    if (HIDWORD(v25))
    {
      uint64_t v17 = v24;
      uint64_t v18 = 8 * HIDWORD(v25) - 8;
      do
      {
        uint64_t v19 = *v17;
        CFRetain(*(CFTypeRef *)(*v17 + 8));
        v22[0] = v19;
        WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::add((uint64_t)&v29, a3, v22);
        if (v22[0]) {
          CFRelease(*(CFTypeRef *)(v22[0] + 8));
        }
        uint64_t v20 = *a3;
        if (*a3) {
          uint64_t v20 = *(unsigned int *)(v20 - 12);
        }
        if (v20 == a2) {
          break;
        }
        ++v17;
        uint64_t v21 = v18;
        v18 -= 8;
      }
      while (v21);
    }
    WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v16);
  }
}

uint64_t WebKit::WebsiteDataStore::clearResourceLoadStatisticsInWebProcesses(WebKit::WebsiteDataStore *this, uint64_t *a2)
{
  if (*((unsigned char *)this + 265) != 2)
  {
    if (*((unsigned char *)this + 265)) {
      goto LABEL_22;
    }
    if (*(unsigned __int16 *)(*((void *)this + 26) + 528) >= 0x100u)
    {
      if (!*(_WORD *)(*((void *)this + 26) + 528)) {
        goto LABEL_22;
      }
    }
    else if (!WebKit::doesAppHaveTrackingPreventionEnabled(this))
    {
      goto LABEL_22;
    }
  }
  WebKit::WebsiteDataStore::processPools(this, -1, (uint64_t *)&v13);
  int v5 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v13);
  uint64_t v6 = v4;
  uint64_t v7 = v13;
  if (v13) {
    uint64_t v8 = &v13[*((unsigned int *)v13 - 1)];
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != v5)
  {
    do
    {
      uint64_t v9 = *v5;
      if (*v5)
      {
        CFRetain(*(CFTypeRef *)(v9 + 8));
        char v12 = 0;
        WebKit::WebProcessPool::sendToAllProcessesForSession<Messages::WebProcess::ClearResourceLoadStatistics>((unsigned int *)v9, (uint64_t)&v12, *((void *)this + 3), 0);
        CFRelease(*(CFTypeRef *)(v9 + 8));
      }
      else
      {
        char v12 = 0;
        WebKit::WebProcessPool::sendToAllProcessesForSession<Messages::WebProcess::ClearResourceLoadStatistics>(0, (uint64_t)&v12, *((void *)this + 3), 0);
      }
      while (++v5 != v6)
      {
        if ((unint64_t)(*v5 + 1) > 1) {
          goto LABEL_17;
        }
      }
      int v5 = v6;
LABEL_17:
      ;
    }
    while (v5 != v8);
    uint64_t v7 = v13;
  }
  if (v7) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v7, v4);
  }
LABEL_22:
  uint64_t v10 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
  return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
}

unsigned int *WebKit::WebsiteDataStore::removeData(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v8;
    _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "WebsiteDataStore::removeData started to delete data for session %llu", (uint8_t *)&buf, 0xCu);
  }
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *a4;
  *a4 = 0;
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v11 = &unk_1EE9E6158;
  v11[1] = a1;
  void v11[2] = v9;
  v11[3] = v10;
  uint64_t v12 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v12 = 1;
  v130 = a3;
  v131 = (atomic_uint *)v12;
  *(void *)(v12 + 8) = v11;
  uint64_t v143 = 0;
  uint64_t v144 = 0;
  unsigned int v13 = *((_DWORD *)a3 + 3);
  if (v13)
  {
    uint64_t v14 = *a3;
    uint64_t v15 = *a3 + 80 * v13;
    do
    {
      uint64_t v16 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)(v14 + 40));
      uint64_t v17 = v16;
      uint64_t v19 = v18;
      uint64_t v20 = *(void *)(v14 + 40);
      if (v20) {
        uint64_t v21 = (WebCore::SecurityOriginData *)(v20 + 32 * *(unsigned int *)(v20 - 4));
      }
      else {
        uint64_t v21 = 0;
      }
      if (v21 != v16)
      {
        do
        {
          if (HIDWORD(v144) == v144)
          {
            WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData const&>((uint64_t)&v143, (unint64_t)v17);
          }
          else
          {
            uint64_t v22 = v143 + 32 * HIDWORD(v144);
            *(unsigned char *)uint64_t v22 = 0;
            *(_DWORD *)(v22 + 24) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v22, (uint64_t)v17);
            ++HIDWORD(v144);
          }
          while (1)
          {
            uint64_t v17 = (WebCore::SecurityOriginData *)((char *)v17 + 32);
            if (v17 == v19) {
              break;
            }
            if (!WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v17)) {
              goto LABEL_15;
            }
          }
          uint64_t v17 = v19;
LABEL_15:
          ;
        }
        while (v17 != v21);
      }
      v14 += 80;
    }
    while (v14 != v15);
  }
  uint64_t v23 = v130;
  if ((a2 & 2) != 0)
  {
    v140 = 0;
    unsigned int v24 = *((_DWORD *)v130 + 3);
    if (v24)
    {
      uint64_t v25 = *v130;
      uint64_t v26 = *v130 + 80 * v24;
      do
      {
        uint64_t v27 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)(v25 + 40));
        uint64_t v28 = v27;
        uint64_t v30 = v29;
        uint64_t v31 = *(void *)(v25 + 40);
        if (v31) {
          uint64_t v32 = (WebCore::SecurityOriginData *)(v31 + 32 * *(unsigned int *)(v31 - 4));
        }
        else {
          uint64_t v32 = 0;
        }
        if (v32 != v27)
        {
          do
          {
            WebCore::SecurityOriginData::isolatedCopy();
            WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)&v140, (uint64_t)&buf, (uint64_t)&v132);
            if (v149 != -1) {
              ((void (*)(WTF::StringImpl **, long long *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v149])(&v132, &buf);
            }
            while (1)
            {
              uint64_t v28 = (WebCore::SecurityOriginData *)((char *)v28 + 32);
              if (v28 == v30) {
                break;
              }
              if (!WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v28)) {
                goto LABEL_31;
              }
            }
            uint64_t v28 = v30;
LABEL_31:
            ;
          }
          while (v28 != v32);
        }
        v25 += 80;
      }
      while (v25 != v26);
    }
    uint64_t v33 = *(void *)(a1 + 280);
    (*(void (**)(uint64_t))(*(void *)v33 + 48))(v33);
    uint64_t v34 = (uint64_t)v140;
    v140 = 0;
    *(void *)&long long buf = v34;
    WTF::String::isolatedCopy();
    atomic_fetch_add(v131, 1u);
    uint64_t v148 = (unsigned int *)v131;
    uint64_t v35 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v35 = &unk_1EE9E6180;
    *((void *)v35 + 1) = buf;
    uint64_t v36 = *((void *)&buf + 1);
    long long buf = 0uLL;
    *((void *)v35 + 2) = v36;
    uint64_t v37 = v148;
    uint64_t v148 = 0;
    *((void *)v35 + 3) = v37;
    v132 = v35;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v33 + 32))(v33, &v132);
    uint64_t v39 = v132;
    v132 = 0;
    if (v39) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v39 + 8))(v39);
    }
    uint64_t v40 = v148;
    uint64_t v148 = 0;
    uint64_t v23 = v130;
    if (v40) {
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v40);
    }
    uint64_t v41 = (WTF::StringImpl *)*((void *)&buf + 1);
    *((void *)&buf + 1) = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2) {
        WTF::StringImpl::destroy(v41, v38);
      }
      else {
        *(_DWORD *)v41 -= 2;
      }
    }
    if ((void)buf) {
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(buf, v38);
    }
    (*(void (**)(uint64_t))(*(void *)v33 + 56))(v33);
    if (v140) {
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable((uint64_t)v140, v42);
    }
  }
  uint64_t v43 = *(void *)(a1 + 24);
  BOOL v44 = v43 >= 0 || v43 == -1;
  int v45 = a2;
  uint64_t v46 = WebKit::computeNetworkProcessAccessTypeForDataRemoval(a2, !v44);
  if (v46)
  {
    uint64_t v48 = v46;
    if (v46 == 2)
    {
      WebKit::WebsiteDataStore::processPools((WebKit::WebsiteDataStore *)a1, -1, (uint64_t *)&v142);
      if (!v142 || !*((_DWORD *)v142 - 3))
      {
        uint64_t v49 = (API::ProcessPoolConfiguration *)API::Object::newObject(0xA8uLL, 90);
        uint64_t v50 = API::ProcessPoolConfiguration::ProcessPoolConfiguration(v49);
        WebKit::InitializeWebKit2(v50);
        uint64_t v51 = (WebKit::WebProcessPool *)API::Object::newObject(0x3C8uLL, 89);
        WebKit::WebProcessPool::WebProcessPool(v51, v49);
      }
    }
    else
    {
      WebKit::WebsiteDataStore::processPools((WebKit::WebsiteDataStore *)a1, -1, (uint64_t *)&v142);
    }
    uint64_t v52 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v142);
    uint64_t v53 = v47;
    unint64_t v54 = v142;
    if (v142) {
      uint64_t v55 = &v142[*((unsigned int *)v142 - 1)];
    }
    else {
      uint64_t v55 = 0;
    }
    if (v55 != v52)
    {
      do
      {
        uint64_t v56 = v48;
        if (v48 == 2) {
          WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
        }
        v132 = 0;
        uint64_t v133 = 0;
        v140 = 0;
        uint64_t v141 = 0;
        uint64_t v138 = 0;
        uint64_t v139 = 0;
        unsigned int v57 = *((_DWORD *)v23 + 3);
        if (v57)
        {
          uint64_t v58 = *v130;
          uint64_t v59 = *v130 + 80 * v57;
          do
          {
            uint64_t v60 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)(v58 + 48));
            uint64_t v61 = v60;
            uint64_t v63 = v62;
            uint64_t v64 = *(void *)(v58 + 48);
            if (v64) {
              int v65 = (void *)(v64 + 8 * *(unsigned int *)(v64 - 4));
            }
            else {
              int v65 = 0;
            }
            if (v65 != v60)
            {
              do
              {
                uint64_t v66 = HIDWORD(v133);
                if (HIDWORD(v133) == v133)
                {
                  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v132, (unint64_t)v61);
                }
                else
                {
                  uint64_t v67 = v132;
                  uint64_t v68 = (_DWORD *)*v61;
                  if (*v61) {
                    *v68 += 2;
                  }
                  *((void *)v67 + v66) = v68;
                  HIDWORD(v133) = v66 + 1;
                }
                while (++v61 != v63)
                {
                  if ((unint64_t)(*v61 + 1) > 1) {
                    goto LABEL_76;
                  }
                }
                uint64_t v61 = v63;
LABEL_76:
                ;
              }
              while (v61 != v65);
            }
            uint64_t v69 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)(v58 + 56));
            uint64_t v72 = v69;
            uint64_t v73 = (void *)v70;
            uint64_t v74 = *(void *)(v58 + 56);
            if (v74) {
              uint64_t v75 = (void *)(v74 + 8 * *(unsigned int *)(v74 - 4));
            }
            else {
              uint64_t v75 = 0;
            }
            if (v75 != v69)
            {
              do
              {
                uint64_t v76 = HIDWORD(v141);
                if (HIDWORD(v141) == v141)
                {
                  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v140, (unint64_t)v72);
                }
                else
                {
                  uint64_t v77 = (uint64_t)v140;
                  size_t v78 = (_DWORD *)*v72;
                  if (*v72) {
                    *v78 += 2;
                  }
                  *(void *)(v77 + 8 * v76) = v78;
                  HIDWORD(v141) = v76 + 1;
                }
                while (++v72 != v73)
                {
                  if ((unint64_t)(*v72 + 1) > 1) {
                    goto LABEL_89;
                  }
                }
                uint64_t v72 = v73;
LABEL_89:
                ;
              }
              while (v72 != v75);
            }
            uint64_t v79 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(v58 + 72), v70, v71);
            uint64_t v82 = (void *)v79;
            uint64_t v83 = *(void *)(v58 + 72);
            if (v83) {
              uint64_t v84 = v83 + 8 * *(unsigned int *)(v83 - 4);
            }
            else {
              uint64_t v84 = 0;
            }
            *(void *)&long long buf = v79;
            *((void *)&buf + 1) = v80;
            if (v84 != v79)
            {
              do
              {
                uint64_t v85 = HIDWORD(v139);
                if (HIDWORD(v139) == v139)
                {
                  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)&v138, (unint64_t)v82);
                  uint64_t v82 = (void *)buf;
                }
                else
                {
                  uint64_t v86 = v138;
                  double v87 = (_DWORD *)*v82;
                  if (*v82) {
                    *v87 += 2;
                  }
                  *(void *)(v86 + 8 * v85) = v87;
                  HIDWORD(v139) = v85 + 1;
                }
                *(void *)&long long buf = v82 + 1;
                WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&buf, v80, v81);
                uint64_t v82 = (void *)buf;
              }
              while ((void)buf != v84);
            }
            v58 += 80;
          }
          while (v58 != v59);
        }
        uint64_t v88 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
        atomic_fetch_add((atomic_uint *volatile)(v88 + 16), 1u);
        uint64_t v89 = *(void *)(a1 + 24);
        atomic_fetch_add(v131, 1u);
        uint64_t v90 = *v52;
        if (*v52) {
          CFRetain(*(CFTypeRef *)(v90 + 8));
        }
        double v91 = (void *)WTF::fastMalloc((WTF *)0x18);
        *double v91 = &unk_1EE9E61A8;
        v91[1] = v131;
        if (v90) {
          CFRetain(*(CFTypeRef *)(v90 + 8));
        }
        v91[2] = v90;
        v137 = v91;
        uint64_t v146 = v89;
        int v145 = a2;
        *(void *)&long long buf = &v146;
        *((void *)&buf + 1) = &v145;
        uint64_t v148 = (unsigned int *)&v143;
        uint64_t v149 = (uint64_t)&v132;
        v150 = (uint64_t *)&v140;
        v151 = &v138;
        WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DeleteWebsiteDataForOrigins,WTF::CompletionHandler<void ()(void)>>(v88, (uint64_t)&buf, (uint64_t *)&v137, 0, 0, 1);
        uint64_t v92 = (uint64_t)v137;
        v137 = 0;
        if (v92) {
          (*(void (**)(uint64_t))(*(void *)v92 + 8))(v92);
        }
        uint64_t v23 = v130;
        if (v90) {
          CFRelease(*(CFTypeRef *)(v90 + 8));
        }
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v88 + 16));
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v138, v93);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v140, v94);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v132, v95);
        if (++v52 == v53)
        {
          uint64_t v52 = v53;
          uint64_t v48 = v56;
        }
        else
        {
          uint64_t v48 = v56;
          while ((unint64_t)(*v52 + 1) <= 1)
          {
            if (++v52 == v53)
            {
              uint64_t v52 = v53;
              break;
            }
          }
        }
      }
      while (v52 != v55);
      unint64_t v54 = v142;
    }
    if (v54) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v54, v47);
    }
    int v45 = a2;
  }
  if ((a2 & 4) != 0)
  {
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 304), &buf);
    uint64_t v96 = *(void *)(a1 + 304);
    if (v96)
    {
      uint64_t v97 = *(unsigned int *)(v96 - 4);
      uint64_t v98 = v96 + 8 * v97;
    }
    else
    {
      uint64_t v98 = 0;
      uint64_t v97 = 0;
    }
    v132 = (WTF::StringImpl *)(a1 + 304);
    uint64_t v133 = v98;
    uint64_t v134 = v98;
    uint64_t v135 = v98;
    uint64_t v136 = v96 + 8 * v97;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v132);
    for (uint64_t i = *((void *)&buf + 1); *((void *)&buf + 1) != v133; uint64_t i = *((void *)&buf + 1))
    {
      uint64_t v100 = *(void *)(*(void *)i + 8);
      atomic_fetch_add((atomic_uint *volatile)(v100 + 16), 1u);
      uint64_t v101 = *(void *)(v100 + 136);
      if (!v101 || !*(unsigned char *)(v101 + 104))
      {
        if (*(void *)(v100 + 144))
        {
          uint64_t v102 = *(void *)(a1 + 24);
          atomic_fetch_add(v131, 1u);
          v103 = (void *)WTF::fastMalloc((WTF *)0x10);
          void *v103 = &unk_1EE9E61D0;
          v103[1] = v131;
          v140 = v103;
          WebKit::WebProcessProxy::deleteWebsiteDataForOrigins(v100, v102, v45, (uint64_t)&v143, (uint64_t *)&v140);
          uint64_t v104 = (uint64_t)v140;
          v140 = 0;
          if (v104) {
            (*(void (**)(uint64_t))(*(void *)v104 + 8))(v104);
          }
        }
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v100 + 16));
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&buf);
    }
    uint64_t v23 = v130;
  }
  if ((a2 & 0x10001) != 0)
  {
    uint64_t v105 = (atomic_uint *)WebKit::WebsiteDataStore::ensureDeviceIdHashSaltStorage((WebKit::WebsiteDataStore *)a1);
    atomic_fetch_add(v105, 1u);
    atomic_fetch_add(v131, 1u);
    uint64_t v106 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v106 = &unk_1EE9E61F8;
    v106[1] = v131;
    *(void *)&long long buf = v106;
    WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltForOrigins((uint64_t)v105, (unsigned int *)&v143, (uint64_t *)&buf);
    uint64_t v107 = buf;
    *(void *)&long long buf = 0;
    if (v107) {
      (*(void (**)(uint64_t))(*(void *)v107 + 8))(v107);
    }
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref((unsigned int *)v105);
  }
  if ((a2 & 0x100) != 0)
  {
    uint64_t v108 = *(void *)(a1 + 24);
    if ((v108 & 0x8000000000000000) == 0 || v108 == -1)
    {
      v140 = 0;
      unsigned int v109 = *((_DWORD *)v23 + 3);
      if (v109)
      {
        uint64_t v110 = *v23;
        uint64_t v111 = *v23 + 80 * v109;
        do
        {
          v112 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)(v110 + 40));
          uint64_t v113 = v112;
          double v115 = v114;
          uint64_t v116 = *(void *)(v110 + 40);
          if (v116) {
            uint64_t v117 = (WebCore::SecurityOriginData *)(v116 + 32 * *(unsigned int *)(v116 - 4));
          }
          else {
            uint64_t v117 = 0;
          }
          if (v117 != v112)
          {
            do
            {
              WebCore::SecurityOriginData::isolatedCopy();
              WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)&v140, (uint64_t)&buf, (uint64_t)&v132);
              if (v149 != -1) {
                ((void (*)(WTF::StringImpl **, long long *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v149])(&v132, &buf);
              }
              while (1)
              {
                uint64_t v113 = (WebCore::SecurityOriginData *)((char *)v113 + 32);
                if (v113 == v115) {
                  break;
                }
                if (!WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v113)) {
                  goto LABEL_152;
                }
              }
              uint64_t v113 = v115;
LABEL_152:
              ;
            }
            while (v113 != v117);
          }
          v110 += 80;
        }
        while (v110 != v111);
      }
      double v118 = *(WTF::StringImpl **)(WebKit::WebsiteDataStore::resolvedDirectories((atomic_uchar *)a1) + 96);
      if (v118) {
        *(_DWORD *)v118 += 2;
      }
      v132 = v118;
      uint64_t v119 = *(void *)(a1 + 280);
      (*(void (**)(uint64_t))(*(void *)v119 + 48))(v119);
      WTF::String::isolatedCopy();
      *((void *)&buf + 1) = WebKit::WebsiteDataStore::mediaKeysStorageSalt((atomic_uchar *)a1);
      atomic_fetch_add(v131, 1u);
      uint64_t v120 = (uint64_t)v140;
      v140 = 0;
      uint64_t v148 = (unsigned int *)v131;
      uint64_t v149 = v120;
      uint64_t v121 = WTF::fastMalloc((WTF *)0x28);
      *(void *)uint64_t v121 = &unk_1EE9E6220;
      *(_OWORD *)(v121 + 8) = buf;
      *(void *)(v121 + 24) = v148;
      uint64_t v122 = v149;
      *(void *)&long long buf = 0;
      uint64_t v148 = 0;
      uint64_t v149 = 0;
      *(void *)(v121 + 32) = v122;
      uint64_t v138 = v121;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v119 + 32))(v119, &v138);
      uint64_t v124 = v138;
      uint64_t v138 = 0;
      if (v124) {
        (*(void (**)(uint64_t))(*(void *)v124 + 8))(v124);
      }
      if (v149) {
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v149, v123);
      }
      double v125 = v148;
      uint64_t v148 = 0;
      if (v125) {
        WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v125);
      }
      double v126 = (WTF::StringImpl *)buf;
      *(void *)&long long buf = 0;
      if (v126)
      {
        if (*(_DWORD *)v126 == 2) {
          WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v123);
        }
        else {
          *(_DWORD *)v126 -= 2;
        }
      }
      (*(void (**)(uint64_t))(*(void *)v119 + 56))(v119);
      v127 = v132;
      v132 = 0;
      if (v127)
      {
        if (*(_DWORD *)v127 == 2) {
          WTF::StringImpl::destroy(v127, (WTF::StringImpl *)v47);
        }
        else {
          *(_DWORD *)v127 -= 2;
        }
      }
      if (v140) {
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable((uint64_t)v140, v47);
      }
    }
  }
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v143, v47);
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref((unsigned int *)v131);
}

uint64_t WebKit::WebsiteDataStore::ensureDeviceIdHashSaltStorage(WebKit::WebsiteDataStore *this)
{
  uint64_t result = *((void *)this + 28);
  if (!result)
  {
    uint64_t v3 = *((void *)this + 3);
    if ((v3 & 0x8000000000000000) == 0 || v3 == -1)
    {
      unsigned __int8 v4 = *(WTF::StringImpl **)(*((void *)this + 26) + 104);
      if (v4) {
        *(_DWORD *)v4 += 2;
      }
    }
    else
    {
      unsigned __int8 v4 = 0;
    }
    uint64_t v8 = v4;
    int v5 = (WebKit::DeviceIdHashSaltStorage *)WTF::fastMalloc((WTF *)0x38);
    WebKit::DeviceIdHashSaltStorage::DeviceIdHashSaltStorage(v5, (const WTF::String *)&v8);
    uint64_t v7 = (unsigned int *)*((void *)this + 28);
    *((void *)this + 28) = v5;
    if (v7) {
      WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v7);
    }
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v6);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    return *((void *)this + 28);
  }
  return result;
}

unsigned int *WebKit::WebsiteDataStore::setServiceWorkerTimeoutForTesting(WebKit::WebsiteDataStore *a1, double a2)
{
  double v8 = a2;
  char v2 = (atomic_uint *)WebKit::WebsiteDataStore::networkProcess(a1);
  atomic_fetch_add(v2 + 4, 1u);
  int v5 = &v8;
  WTF::ApproximateTime::now((WTF::ApproximateTime *)v2);
  WebKit::AuxiliaryProcessProxy::sendSync<Messages::NetworkProcess::SetServiceWorkerFetchTimeoutForTesting>((uint64_t)v2, &v5, 0, 0, (uint64_t)v6, v3 + 1.0);
  if (v7 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14NetworkProcess38SetServiceWorkerFetchTimeoutForTestingEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v7])(&v9, v6);
  }
  int v7 = -1;
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v2 + 4);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendSync<Messages::NetworkProcess::SetServiceWorkerFetchTimeoutForTesting>@<X0>(uint64_t result@<X0>, double **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  if (*(void *)(result + 144))
  {
    uint64_t v11 = result;
    kdebug_trace();
    uint64_t v12 = *(void *)(v11 + 144);
    if (v12)
    {
      IPC::Connection::sendSync<Messages::NetworkProcess::SetServiceWorkerFetchTimeoutForTesting>(v12, a2, a3, a4, a5, a6);
      return kdebug_trace();
    }
    else
    {
      uint64_t result = 130;
      __break(0xC471u);
    }
  }
  else
  {
    *(unsigned char *)a5 = 1;
    *(_DWORD *)(a5 + ++*(_DWORD *)(this + 16) = 1;
  }
  return result;
}

unsigned int *WebKit::WebsiteDataStore::resetServiceWorkerTimeoutForTesting(WebKit::WebsiteDataStore *this)
{
  uint64_t v1 = (atomic_uint *)WebKit::WebsiteDataStore::networkProcess(this);
  atomic_fetch_add(v1 + 4, 1u);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)v1);
  WebKit::AuxiliaryProcessProxy::sendSync<Messages::NetworkProcess::ResetServiceWorkerFetchTimeoutForTesting>((uint64_t)v1, 0, 0, (uint64_t)v4, v2 + 1.0);
  if (v5 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14NetworkProcess40ResetServiceWorkerFetchTimeoutForTestingEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v6, v4);
  }
  int v5 = -1;
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v1 + 4);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendSync<Messages::NetworkProcess::ResetServiceWorkerFetchTimeoutForTesting>@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>, double a5@<D0>)
{
  if (*(void *)(result + 144))
  {
    uint64_t v9 = result;
    kdebug_trace();
    uint64_t v10 = *(void *)(v9 + 144);
    if (v10)
    {
      IPC::Connection::sendSync<Messages::NetworkProcess::ResetServiceWorkerFetchTimeoutForTesting>(v10, a2, a3, a4, a5);
      return kdebug_trace();
    }
    else
    {
      uint64_t result = 130;
      __break(0xC471u);
    }
  }
  else
  {
    *(unsigned char *)a4 = 1;
    *(_DWORD *)(a4 + ++*(_DWORD *)(this + 16) = 1;
  }
  return result;
}

uint64_t WebKit::WebsiteDataStore::hasServiceWorkerBackgroundActivityForTesting(WebKit::WebsiteDataStore *this)
{
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v8);
  if (v9)
  {
    double v2 = v8;
    uint64_t v3 = 8 * v9 - 8;
    do
    {
      unsigned __int8 v4 = *v2++;
      uint64_t hasServiceWorkerBackgroundActivityForTesting = WebKit::WebProcessPool::hasServiceWorkerBackgroundActivityForTesting(v4);
      if (hasServiceWorkerBackgroundActivityForTesting) {
        break;
      }
      uint64_t v6 = v3;
      v3 -= 8;
    }
    while (v6);
  }
  else
  {
    uint64_t hasServiceWorkerBackgroundActivityForTesting = 0;
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v1);
  return hasServiceWorkerBackgroundActivityForTesting;
}

unsigned int *WebKit::WebsiteDataStore::setMaxStatisticsEntries(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  int v7 = (unsigned int *)(v6 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  WebKit::NetworkProcessProxy::setMaxStatisticsEntries(v6, a1[3], a2, a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::setPruneEntriesDownTo(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  int v7 = (unsigned int *)(v6 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  WebKit::NetworkProcessProxy::setPruneEntriesDownTo(v6, a1[3], a2, a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::setGrandfatheringTime(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  int v7 = (unsigned int *)(v6 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  WebKit::NetworkProcessProxy::setGrandfatheringTime(v6, a1[3], a2, a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::setMinimumTimeBetweenDataRecordsRemoval(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  int v7 = (unsigned int *)(v6 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  WebKit::NetworkProcessProxy::setMinimumTimeBetweenDataRecordsRemoval(v6, a1[3], a2, a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::dumpResourceLoadStatistics(WebKit::WebsiteDataStore *a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess(a1);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  uint64_t v5 = *((void *)a1 + 3);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  uint64_t v7 = *a2;
  *a2 = 0;
  void *v6 = &unk_1EE9E6258;
  v6[1] = v7;
  uint64_t v10 = v6;
  WebKit::NetworkProcessProxy::dumpResourceLoadStatistics(v4, v5, (uint64_t *)&v10);
  uint64_t v8 = (uint64_t)v10;
  uint64_t v10 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
}

unsigned int *WebKit::WebsiteDataStore::isPrevalentResource(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  if ((WTF::URL::protocolIs() & 1) == 0 && *(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
    uint64_t v7 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v13, a2);
    WebKit::NetworkProcessProxy::isPrevalentResource(v6, v7, (uint64_t *)&v13, a3);
    unsigned int v9 = v13;
    unsigned int v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  }
  else
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v10 + 16))(v10, 0);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return (unsigned int *)v11(v10);
  }
}

unsigned int *WebKit::WebsiteDataStore::isGrandfathered(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  if ((WTF::URL::protocolIs() & 1) == 0 && *(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
    uint64_t v7 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v13, a2);
    WebKit::NetworkProcessProxy::isGrandfathered(v6, v7, (uint64_t *)&v13, a3);
    unsigned int v9 = v13;
    unsigned int v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  }
  else
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v10 + 16))(v10, 0);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return (unsigned int *)v11(v10);
  }
}

unsigned int *WebKit::WebsiteDataStore::setPrevalentResource(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  if ((WTF::URL::protocolIs() & 1) == 0 && *(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
    uint64_t v7 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v13, a2);
    WebKit::NetworkProcessProxy::setPrevalentResource(v6, v7, (uint64_t *)&v13, a3);
    unsigned int v9 = v13;
    unsigned int v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  }
  else
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return (unsigned int *)v11(v10);
  }
}

unsigned int *WebKit::WebsiteDataStore::setPrevalentResourceForDebugMode(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  if ((WTF::URL::protocolIs() & 1) == 0 && *(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
    uint64_t v7 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v13, a2);
    WebKit::NetworkProcessProxy::setPrevalentResourceForDebugMode(v6, v7, (uint64_t *)&v13, a3);
    unsigned int v9 = v13;
    unsigned int v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  }
  else
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return (unsigned int *)v11(v10);
  }
}

unsigned int *WebKit::WebsiteDataStore::isVeryPrevalentResource(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  if ((WTF::URL::protocolIs() & 1) == 0 && *(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
    uint64_t v7 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v13, a2);
    WebKit::NetworkProcessProxy::isVeryPrevalentResource(v6, v7, (uint64_t *)&v13, a3);
    unsigned int v9 = v13;
    unsigned int v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  }
  else
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v10 + 16))(v10, 0);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return (unsigned int *)v11(v10);
  }
}

unsigned int *WebKit::WebsiteDataStore::setVeryPrevalentResource(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  if ((WTF::URL::protocolIs() & 1) == 0 && *(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
    uint64_t v7 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v13, a2);
    WebKit::NetworkProcessProxy::setVeryPrevalentResource(v6, v7, (uint64_t *)&v13, a3);
    unsigned int v9 = v13;
    unsigned int v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  }
  else
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return (unsigned int *)v11(v10);
  }
}

unsigned int *WebKit::WebsiteDataStore::setShouldClassifyResourcesBeforeDataRecordsRemoval(uint64_t *a1, char a2, uint64_t *a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v7 = (unsigned int *)(v6 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  WebKit::NetworkProcessProxy::setShouldClassifyResourcesBeforeDataRecordsRemoval(v6, a1[3], a2, a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::setSubframeUnderTopFrameDomain(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  if ((WTF::URL::protocolIs() & 1) == 0
    && *(void *)a2
    && *(_DWORD *)(*(void *)a2 + 4)
    && (WTF::URL::protocolIs() & 1) == 0
    && *(void *)a3
    && *(_DWORD *)(*(void *)a3 + 4))
  {
    uint64_t v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
    uint64_t v9 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v17, a2);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v16, a3);
    WebKit::NetworkProcessProxy::setSubframeUnderTopFrameDomain(v8, v9, (uint64_t *)&v17, (uint64_t *)&v16, a4);
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v15 = v17;
    uint64_t v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v10);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }
  else
  {
    uint64_t v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    unsigned int v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (unsigned int *)v13(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::isRegisteredAsSubFrameUnder(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v8 = WebKit::WebsiteDataStore::networkProcess(a1);
  atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
  uint64_t v9 = *((void *)a1 + 3);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v15, a2);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v14, a3);
  WebKit::NetworkProcessProxy::isRegisteredAsSubFrameUnder(v8, v9, (uint64_t *)&v15, (uint64_t *)&v14, a4);
  uint64_t v11 = v14;
  uint64_t v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = v15;
  uint64_t v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
}

unsigned int *WebKit::WebsiteDataStore::setSubresourceUnderTopFrameDomain(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  if ((WTF::URL::protocolIs() & 1) == 0
    && *(void *)a2
    && *(_DWORD *)(*(void *)a2 + 4)
    && (WTF::URL::protocolIs() & 1) == 0
    && *(void *)a3
    && *(_DWORD *)(*(void *)a3 + 4))
  {
    uint64_t v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
    uint64_t v9 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v17, a2);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v16, a3);
    WebKit::NetworkProcessProxy::setSubresourceUnderTopFrameDomain(v8, v9, (uint64_t *)&v17, (uint64_t *)&v16, a4);
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v15 = v17;
    uint64_t v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v10);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }
  else
  {
    uint64_t v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    unsigned int v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (unsigned int *)v13(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::isRegisteredAsSubresourceUnder(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v8 = WebKit::WebsiteDataStore::networkProcess(a1);
  atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
  uint64_t v9 = *((void *)a1 + 3);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v15, a2);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v14, a3);
  WebKit::NetworkProcessProxy::isRegisteredAsSubresourceUnder(v8, v9, (uint64_t *)&v15, (uint64_t *)&v14, a4);
  uint64_t v11 = v14;
  uint64_t v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = v15;
  uint64_t v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
}

unsigned int *WebKit::WebsiteDataStore::setSubresourceUniqueRedirectTo(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  if ((WTF::URL::protocolIs() & 1) == 0
    && *(void *)a2
    && *(_DWORD *)(*(void *)a2 + 4)
    && (WTF::URL::protocolIs() & 1) == 0
    && *(void *)a3
    && *(_DWORD *)(*(void *)a3 + 4))
  {
    uint64_t v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
    uint64_t v9 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v17, a2);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v16, a3);
    WebKit::NetworkProcessProxy::setSubresourceUniqueRedirectTo(v8, v9, (uint64_t *)&v17, (uint64_t *)&v16, a4);
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v15 = v17;
    uint64_t v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v10);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }
  else
  {
    uint64_t v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    unsigned int v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (unsigned int *)v13(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::setSubresourceUniqueRedirectFrom(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  if ((WTF::URL::protocolIs() & 1) == 0
    && *(void *)a2
    && *(_DWORD *)(*(void *)a2 + 4)
    && (WTF::URL::protocolIs() & 1) == 0
    && *(void *)a3
    && *(_DWORD *)(*(void *)a3 + 4))
  {
    uint64_t v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
    uint64_t v9 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v17, a2);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v16, a3);
    WebKit::NetworkProcessProxy::setSubresourceUniqueRedirectFrom(v8, v9, (uint64_t *)&v17, (uint64_t *)&v16, a4);
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v15 = v17;
    uint64_t v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v10);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }
  else
  {
    uint64_t v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    unsigned int v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (unsigned int *)v13(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::setTopFrameUniqueRedirectTo(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  if ((WTF::URL::protocolIs() & 1) == 0
    && *(void *)a2
    && *(_DWORD *)(*(void *)a2 + 4)
    && (WTF::URL::protocolIs() & 1) == 0
    && *(void *)a3
    && *(_DWORD *)(*(void *)a3 + 4))
  {
    uint64_t v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
    uint64_t v9 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v17, a2);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v16, a3);
    WebKit::NetworkProcessProxy::setTopFrameUniqueRedirectTo(v8, v9, (uint64_t *)&v17, (uint64_t *)&v16, a4);
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v15 = v17;
    uint64_t v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v10);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }
  else
  {
    uint64_t v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    unsigned int v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (unsigned int *)v13(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::setTopFrameUniqueRedirectFrom(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  if ((WTF::URL::protocolIs() & 1) == 0
    && *(void *)a2
    && *(_DWORD *)(*(void *)a2 + 4)
    && (WTF::URL::protocolIs() & 1) == 0
    && *(void *)a3
    && *(_DWORD *)(*(void *)a3 + 4))
  {
    uint64_t v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
    uint64_t v9 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v17, a2);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v16, a3);
    WebKit::NetworkProcessProxy::setTopFrameUniqueRedirectFrom(v8, v9, (uint64_t *)&v17, (uint64_t *)&v16, a4);
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v15 = v17;
    uint64_t v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v10);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }
  else
  {
    uint64_t v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    unsigned int v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (unsigned int *)v13(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::isRegisteredAsRedirectingTo(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v8 = WebKit::WebsiteDataStore::networkProcess(a1);
  atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
  uint64_t v9 = *((void *)a1 + 3);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v15, a2);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v14, a3);
  WebKit::NetworkProcessProxy::isRegisteredAsRedirectingTo(v8, v9, (uint64_t *)&v15, (uint64_t *)&v14, a4);
  uint64_t v11 = v14;
  uint64_t v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = v15;
  uint64_t v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
}

unsigned int *WebKit::WebsiteDataStore::clearPrevalentResource(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  if ((WTF::URL::protocolIs() & 1) == 0 && *(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
    uint64_t v7 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v13, a2);
    WebKit::NetworkProcessProxy::clearPrevalentResource(v6, v7, (uint64_t *)&v13, a3);
    uint64_t v9 = v13;
    unsigned int v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  }
  else
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return (unsigned int *)v11(v10);
  }
}

unsigned int *WebKit::WebsiteDataStore::resetParametersToDefaultValues(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  WebKit::NetworkProcessProxy::resetParametersToDefaultValues(v4, a1[3], a2);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::scheduleClearInMemoryAndPersistent(uint64_t *a1, char a2, uint64_t *a3, double a4)
{
  uint64_t v8 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v9 = (unsigned int *)(v8 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
  WebKit::NetworkProcessProxy::scheduleClearInMemoryAndPersistent(v8, a1[3], *(uint64_t *)&a4, 1, a2, a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
}

unsigned int *WebKit::WebsiteDataStore::scheduleClearInMemoryAndPersistent(uint64_t *a1, char a2, uint64_t *a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v7 = (unsigned int *)(v6 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  WebKit::NetworkProcessProxy::scheduleClearInMemoryAndPersistent(v6, a1[3], 0, 0, a2, a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::scheduleCookieBlockingUpdate(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  WebKit::NetworkProcessProxy::scheduleCookieBlockingUpdate(v4, a1[3], a2);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::scheduleStatisticsAndDataRecordsProcessing(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  WebKit::NetworkProcessProxy::scheduleStatisticsAndDataRecordsProcessing(v4, a1[3], a2);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::statisticsDatabaseHasAllTables(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  WebKit::NetworkProcessProxy::statisticsDatabaseHasAllTables(v4, a1[3], a2);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::setLastSeen(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3, double a4)
{
  if ((WTF::URL::protocolIs() & 1) == 0 && *(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
    uint64_t v9 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v15, a2);
    WebKit::NetworkProcessProxy::setLastSeen(v8, v9, (uint64_t *)&v15, a3, a4);
    uint64_t v11 = v15;
    uint64_t v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }
  else
  {
    uint64_t v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    unsigned int v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (unsigned int *)v13(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::domainIDExistsInDatabase(uint64_t *a1, int a2, uint64_t *a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v7 = (unsigned int *)(v6 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  WebKit::NetworkProcessProxy::domainIDExistsInDatabase(v6, a1[3], a2, a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::mergeStatisticForTesting(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, const WTF::URL *a4, char a5, char a6, char a7, char a8, double a9, double a10, unsigned int a11, uint64_t *a12)
{
  if ((WTF::URL::protocolIs() & 1) == 0 && *(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    char v31 = a7;
    uint64_t v22 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v22 + 16), 1u);
    uint64_t v23 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v34, a2);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v33, a3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v32, a4);
    WebKit::NetworkProcessProxy::mergeStatisticForTesting(v22, v23, (uint64_t)&v34, (uint64_t)&v33, (uint64_t)&v32, a5, a6, v31, a9, a10, a8, a11, a12);
    uint64_t v25 = v32;
    uint64_t v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v24);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    uint64_t v29 = v33;
    uint64_t v33 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v24);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    uint64_t v30 = v34;
    uint64_t v34 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v24);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v22 + 16));
  }
  else
  {
    uint64_t v26 = *a12;
    *a12 = 0;
    (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
    uint64_t v27 = *(uint64_t (**)(uint64_t))(*(void *)v26 + 8);
    return (unsigned int *)v27(v26);
  }
}

unsigned int *WebKit::WebsiteDataStore::insertExpiredStatisticForTesting(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, unsigned int a3, char a4, char a5, char a6, uint64_t *a7)
{
  if ((WTF::URL::protocolIs() & 1) == 0 && *(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v14 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v14 + 16), 1u);
    uint64_t v15 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v21, a2);
    uint64_t v26 = v15;
    v22[0] = &v26;
    v22[1] = &v21;
    void v22[2] = a3;
    char v23 = a4;
    char v24 = a5;
    char v25 = a6;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::InsertExpiredStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(v14, (uint64_t)v22, a7, 0, 0, 1);
    uint64_t v17 = v21;
    uint64_t v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v14 + 16));
  }
  else
  {
    uint64_t v18 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
    uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)v18 + 8);
    return (unsigned int *)v19(v18);
  }
}

unsigned int *WebKit::WebsiteDataStore::setResourceLoadStatisticsTimeAdvanceForTesting(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v7 = (unsigned int *)(v6 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  WebKit::NetworkProcessProxy::setResourceLoadStatisticsTimeAdvanceForTesting(v6, a1[3], a2, a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

uint64_t WebKit::WebsiteDataStore::setStorageAccessPromptQuirkForTesting(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a2;
  if (*a2 && *((_DWORD *)v8 + 1))
  {
    *a2 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v8 = v65;
    if (!v65) {
      goto LABEL_6;
    }
  }
  *(_DWORD *)v8 += 2;
LABEL_6:
  uint64_t v9 = *(unsigned int *)(a3 + 12);
  uint64_t v55 = a5;
  if (v9)
  {
    if (v9 >> 29)
    {
      __break(0xC471u);
      goto LABEL_72;
    }
    uint64_t v10 = WTF::fastMalloc((WTF *)(8 * v9));
    LODWORD(v11) = *(_DWORD *)(a3 + 12);
    if (v11)
    {
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = v11;
        unsigned int v13 = *(WTF::StringImpl **)(*(void *)a3 + 8 * v11);
        if (v13)
        {
          int v14 = *((_DWORD *)v13 + 1);
          *(_DWORD *)v13 += 2;
          if (!v14)
          {
            uint64_t v15 = v13;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            unsigned int v13 = v65;
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v16);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          unsigned int v13 = v65;
        }
        uint64_t v11 = v12 + 1;
        *(void *)(v10 + 8 * v12) = v13;
      }
      while (v12 + 1 < (unint64_t)*(unsigned int *)(a3 + 12));
    }
  }
  else
  {
    LODWORD(v11) = 0;
    uint64_t v10 = 0;
  }
  v57[0] = 0;
  v57[1] = 0;
  uint64_t v61 = v8;
  uint64_t v62 = v10;
  int v63 = v9;
  int v64 = v11;
  uint64_t v17 = WTF::fastZeroedMalloc((WTF *)0xD0);
  uint64_t v58 = v17 + 16;
  *(void *)(v17 + 8) = 0x800000007;
  *(_DWORD *)uint64_t v17 = 0;
  *(_DWORD *)(v58 - 12) = 0;
  uint64_t v19 = v58;
  if (v58
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(&v58, 0), (uint64_t v19 = v58) != 0))
  {
    int v20 = *(_DWORD *)(v19 - 8);
  }
  else
  {
    int v20 = 0;
  }
  unsigned int v21 = WTF::ASCIICaseInsensitiveHash::hash(v61, v18) & v20;
  uint64_t v22 = (uint64_t *)(v19 + 24 * v21);
  if (WTF::equal((WTF *)*v22, 0, v23))
  {
LABEL_29:
    WTF::String::operator=(v22, &v61);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v65, (uint64_t)&v62);
    WTF::GenericHashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)(v22 + 1), &v65);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v28);
    if (v58) {
      int v29 = *(_DWORD *)(v58 - 12) + 1;
    }
    else {
      int v29 = 1;
    }
    *(_DWORD *)(v58 - 12) = v29;
    if (v58) {
      int v30 = *(_DWORD *)(v58 - 12);
    }
    else {
      int v30 = 0;
    }
    uint64_t v31 = (*(_DWORD *)(v58 - 16) + v30);
    unint64_t v32 = *(unsigned int *)(v58 - 4);
    if (v32 > 0x400)
    {
      if (v32 > 2 * v31) {
        goto LABEL_38;
      }
    }
    else if (3 * v32 > 4 * v31)
    {
      goto LABEL_38;
    }
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(&v58, (WTF::StringImpl **)v22);
    goto LABEL_38;
  }
  char v25 = 0;
  int v26 = 1;
  while (1)
  {
    uint64_t v27 = v22;
    if (*v22 != -1)
    {
      uint64_t v27 = v25;
      if (WTF::equalIgnoringASCIICase((WTF *)*v22, v61, v24)) {
        break;
      }
    }
    unsigned int v21 = (v21 + v26) & v20;
    uint64_t v22 = (uint64_t *)(v19 + 24 * v21);
    ++v26;
    char v25 = v27;
    if (WTF::equal((WTF *)*v22, 0, v24))
    {
      if (v27)
      {
        v27[1] = 0;
        v27[2] = 0;
        uint64_t *v27 = 0;
        --*(_DWORD *)(v58 - 16);
        uint64_t v22 = v27;
      }
      goto LABEL_29;
    }
  }
LABEL_38:
  uint64_t v33 = *(unsigned int *)(a4 + 12);
  if (!v33)
  {
    LODWORD(v39) = 0;
    unsigned int v37 = 0;
    uint64_t v36 = 0;
    goto LABEL_50;
  }
  if (v33 >= 0x6666667)
  {
    __break(0xC471u);
LABEL_72:
    JUMPOUT(0x198FE2DA4);
  }
  int v34 = 40 * v33;
  uint64_t v35 = WTF::fastMalloc((WTF *)(40 * v33));
  uint64_t v36 = v35;
  unsigned int v37 = (v34 & 0xFFFFFFF8) / 0x28;
  if (*(_DWORD *)(a4 + 12))
  {
    uint64_t v38 = 0;
    unint64_t v39 = 0;
    uint64_t v40 = v35;
    do
    {
      WTF::URL::URL((uint64_t)&v65, (WTF::StringImpl **)(*(void *)a4 + v38));
      WTF::URL::URL(v40, (uint64_t *)&v65);
      uint64_t v42 = v65;
      int v65 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2) {
          WTF::StringImpl::destroy(v42, v41);
        }
        else {
          *(_DWORD *)v42 -= 2;
        }
      }
      ++v39;
      v40 += 40;
      v38 += 8;
    }
    while (v39 < *(unsigned int *)(a4 + 12));
  }
  else
  {
    LODWORD(v39) = 0;
  }
LABEL_50:
  uint64_t v43 = v58;
  uint64_t v58 = 0;
  int v65 = v8;
  uint64_t v66 = v43;
  v56[0] = 0;
  v56[1] = 0;
  uint64_t v67 = v36;
  unsigned int v68 = v37;
  int v69 = v39;
  uint64_t v60 = 0;
  BOOL v44 = (void *)WTF::fastMalloc((WTF *)0x20);
  LODWORD(v60) = 1;
  uint64_t v59 = v44;
  if (v8) {
    *(_DWORD *)v8 += 2;
  }
  *BOOL v44 = v8;
  uint64_t v45 = (uint64_t)(v44 + 2);
  WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(v44 + 1, &v66);
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v45, &v67);
  HIDWORD(v60) = 1;
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v46);
  if (v66) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v66, v47);
  }
  uint64_t v48 = v65;
  int v65 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2) {
      WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v47);
    }
    else {
      *(_DWORD *)v48 -= 2;
    }
  }
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v56, (WTF::StringImpl *)v47);
  if (v58) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v58, v49);
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v49);
  uint64_t v51 = v61;
  uint64_t v61 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2) {
      WTF::StringImpl::destroy(v51, v50);
    }
    else {
      *(_DWORD *)v51 -= 2;
    }
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v57, v50);
  {
    unk_1EB35A530 = 0u;
    unk_1EB35A540 = 0u;
    WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance = 0u;
  }
  WebKit::StorageAccessPromptQuirkController::setCachedQuirksForTesting((uint64_t)&WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance, (WTF::StringImpl *)&v59);
  uint64_t v52 = *v55;
  uint64_t *v55 = 0;
  (*(void (**)(uint64_t))(*(void *)v52 + 16))(v52);
  (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  return WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v53);
}

unsigned int *WebKit::WebsiteDataStore::grantStorageAccessForTesting(WebKit::WebsiteDataStore *a1, WebCore::RegistrableDomain *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = (unsigned int *)WebKit::WebsiteDataStore::networkProcess(a1);
  uint64_t v9 = (uint64_t)result;
  uint64_t v10 = result + 4;
  atomic_fetch_add((atomic_uint *volatile)result + 4, 1u);
  uint64_t v11 = *((void *)a1 + 3);
  uint64_t v21 = 0;
  uint64_t v22 = v11;
  uint64_t v20 = 0;
  uint64_t v12 = *(unsigned int *)(a3 + 12);
  if (v12)
  {
    if (v12 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v13 = WTF::fastMalloc((WTF *)(8 * v12));
    LODWORD(v21) = v12;
    uint64_t v20 = v13;
    if (*(_DWORD *)(a3 + 12))
    {
      uint64_t v14 = v13;
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        WebCore::RegistrableDomain::uncheckedCreateFromHost((WebCore::RegistrableDomain *)(*(void *)a3 + v15), v23);
        ++v16;
        *(WTF::StringImpl **)(v14 + v15) = v23[0];
        v15 += 8;
      }
      while (v16 < *(unsigned int *)(a3 + 12));
      HIDWORD(v21) = v16;
    }
  }
  WebCore::RegistrableDomain::uncheckedCreateFromHost(a2, &v19);
  v23[0] = (WTF::StringImpl *)&v22;
  v23[1] = (WTF::StringImpl *)&v20;
  void v23[2] = (WTF::StringImpl *)&v19;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GrantStorageAccessForTesting,WTF::CompletionHandler<void ()(void)>>(v9, (uint64_t)v23, a4, 0, 0, 1);
  uint64_t v18 = v19;
  uint64_t v19 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v17);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v17);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GrantStorageAccessForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 409;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  char v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RegistrableDomain const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RegistrableDomain const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E62F8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  char v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

unsigned int *WebKit::WebsiteDataStore::setIsRunningResourceLoadStatisticsTest(uint64_t *a1, char a2, uint64_t *a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v7 = (unsigned int *)(v6 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  WebKit::NetworkProcessProxy::setIsRunningResourceLoadStatisticsTest(v6, a1[3], a2, a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::getAllStorageAccessEntries(WebKit::WebsiteDataStore *a1, uint64_t a2, uint64_t *a3)
{
  WebKit::WebProcessProxy::webPage(a2, v13);
  if (v13[0])
  {
    CFRelease(*(CFTypeRef *)(v13[0] + 8));
    uint64_t v5 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v5 + 16), 1u);
    uint64_t v6 = *((void *)a1 + 3);
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v7 = &unk_1EE9E6320;
    uint64_t v8 = *a3;
    *a3 = 0;
    v7[1] = v8;
    v13[0] = (uint64_t)v7;
    WebKit::NetworkProcessProxy::getAllStorageAccessEntries(v5, v6, v13);
    uint64_t v9 = v13[0];
    v13[0] = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 16));
  }
  else
  {
    v13[0] = 0;
    v13[1] = 0;
    uint64_t v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 16))(v11, v13);
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    return (unsigned int *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::setTimeToLiveUserInteraction(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v7 = (unsigned int *)(v6 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  WebKit::NetworkProcessProxy::setTimeToLiveUserInteraction(v6, a1[3], a2, a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::logUserInteraction(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  if ((WTF::URL::protocolIs() & 1) == 0 && *(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
    uint64_t v7 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v13, a2);
    WebKit::NetworkProcessProxy::logUserInteraction(v6, v7, (uint64_t *)&v13, a3);
    uint64_t v9 = v13;
    uint64_t v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  }
  else
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return (unsigned int *)v11(v10);
  }
}

unsigned int *WebKit::WebsiteDataStore::hasHadUserInteraction(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  if ((WTF::URL::protocolIs() & 1) == 0 && *(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
    uint64_t v7 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v13, a2);
    WebKit::NetworkProcessProxy::hasHadUserInteraction(v6, v7, (uint64_t *)&v13, a3);
    uint64_t v9 = v13;
    uint64_t v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  }
  else
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v10 + 16))(v10, 0);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return (unsigned int *)v11(v10);
  }
}

unsigned int *WebKit::WebsiteDataStore::isRelationshipOnlyInDatabaseOnce(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  if ((WTF::URL::protocolIs() & 1) == 0
    && *(void *)a2
    && *(_DWORD *)(*(void *)a2 + 4)
    && (WTF::URL::protocolIs() & 1) == 0
    && *(void *)a3
    && *(_DWORD *)(*(void *)a3 + 4))
  {
    uint64_t v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
    uint64_t v9 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v17, a2);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v16, a3);
    void v18[2] = (uint64_t *)&v16;
    uint64_t v19 = v9;
    v18[0] = &v19;
    v18[1] = (uint64_t *)&v17;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsRelationshipOnlyInDatabaseOnce,WTF::CompletionHandler<void ()(BOOL)>>(v8, v18, a4, 0, 0, 1);
    uint64_t v11 = v16;
    unint64_t v16 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v15 = v17;
    int v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v10);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }
  else
  {
    uint64_t v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
    uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (unsigned int *)v13(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::clearUserInteraction(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  if ((WTF::URL::protocolIs() & 1) == 0 && *(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
    uint64_t v7 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v13, a2);
    WebKit::NetworkProcessProxy::clearUserInteraction(v6, v7, (uint64_t *)&v13, a3);
    uint64_t v9 = v13;
    uint64_t v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  }
  else
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return (unsigned int *)v11(v10);
  }
}

unsigned int *WebKit::WebsiteDataStore::setGrandfathered(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, char a3, uint64_t *a4)
{
  if ((WTF::URL::protocolIs() & 1) == 0 && *(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
    uint64_t v9 = *((void *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v15, a2);
    WebKit::NetworkProcessProxy::setGrandfathered(v8, v9, (uint64_t)&v15, a3, a4);
    uint64_t v11 = v15;
    uint64_t v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }
  else
  {
    uint64_t v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (unsigned int *)v13(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::setCrossSiteLoadWithLinkDecorationForTesting(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, char a4, uint64_t *a5)
{
  uint64_t v10 = WebKit::WebsiteDataStore::networkProcess(a1);
  atomic_fetch_add((atomic_uint *volatile)(v10 + 16), 1u);
  uint64_t v11 = *((void *)a1 + 3);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v17, a2);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v16, a3);
  WebKit::NetworkProcessProxy::setCrossSiteLoadWithLinkDecorationForTesting(v10, v11, (uint64_t)&v17, (uint64_t)&v16, a4, a5);
  uint64_t v13 = v16;
  unint64_t v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = v17;
  int v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v10 + 16));
}

unsigned int *WebKit::WebsiteDataStore::resetCrossSiteLoadsWithLinkDecorationForTesting(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  WebKit::NetworkProcessProxy::resetCrossSiteLoadsWithLinkDecorationForTesting(v4, a1[3], a2);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::deleteCookiesForTesting(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, char a3, uint64_t *a4)
{
  uint64_t v8 = WebKit::WebsiteDataStore::networkProcess(a1);
  atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
  uint64_t v9 = *((void *)a1 + 3);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v13, a2);
  WebKit::NetworkProcessProxy::deleteCookiesForTesting(v8, v9, (uint64_t)&v13, a3, a4);
  uint64_t v11 = v13;
  uint64_t v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
}

unsigned int *WebKit::WebsiteDataStore::hasLocalStorageForTesting(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(a1);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  uint64_t v7 = *((void *)a1 + 3);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v11, a2);
  WebKit::NetworkProcessProxy::hasLocalStorage(v6, v7, (uint64_t *)&v11, a3);
  uint64_t v9 = v11;
  uint64_t v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
}

unsigned int *WebKit::WebsiteDataStore::hasIsolatedSessionForTesting(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(a1);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  uint64_t v7 = *((void *)a1 + 3);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v11, a2);
  WebKit::NetworkProcessProxy::hasIsolatedSession(v6, v7, (uint64_t *)&v11, a3);
  uint64_t v9 = v11;
  uint64_t v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
}

unsigned int *WebKit::WebsiteDataStore::setResourceLoadStatisticsShouldDowngradeReferrerForTesting(WebKit::WebsiteDataStore *a1, char a2, uint64_t *a3)
{
  uint64_t v5 = WebKit::WebsiteDataStore::networkProcess(a1);
  uint64_t v6 = (unsigned int *)(v5 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v5 + 16), 1u);
  WebKit::NetworkProcessProxy::setShouldDowngradeReferrerForTesting(v5, a2, a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
}

unsigned int *WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v6 = 1;
  uint64_t v7 = *a3;
  *a3 = 0;
  *(void *)(v6 + 8) = v7;
  if (WebKit::WebsiteDataStore::thirdPartyCookieBlockingMode((WebKit::WebsiteDataStore *)a1) != a2)
  {
    *(_WORD *)(a1 + 4++*(_DWORD *)(this + 16) = a2 | 0x100;
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 304), &v25);
    uint64_t v8 = *(void *)(a1 + 304);
    if (v8)
    {
      uint64_t v9 = *(unsigned int *)(v8 - 4);
      uint64_t v10 = v8 + 8 * v9;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v9 = 0;
    }
    uint64_t v20 = a1 + 304;
    uint64_t v21 = v10;
    uint64_t v22 = v10;
    uint64_t v23 = v10;
    uint64_t v24 = v8 + 8 * v9;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v20);
    uint64_t v11 = v26;
    if (v26 != v21)
    {
      while (1)
      {
        uint64_t v12 = *(void *)(*(void *)v11 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v12 + 16), 1u);
        atomic_fetch_add((atomic_uint *volatile)v6, 1u);
        uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v13 = &unk_1EE9E6348;
        v13[1] = v6;
        uint64_t v19 = v13;
        char v27 = a2;
        WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebProcess::SetThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)>>(v12, &v27, (uint64_t *)&v19, 0, 0, 1);
        uint64_t v14 = (uint64_t)v19;
        uint64_t v19 = 0;
        if (v14) {
          break;
        }
        if (v12) {
          goto LABEL_8;
        }
LABEL_9:
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v25);
        uint64_t v11 = v26;
        if (v26 == v21) {
          goto LABEL_13;
        }
      }
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      if (!v12) {
        goto LABEL_9;
      }
LABEL_8:
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
      goto LABEL_9;
    }
  }
LABEL_13:
  uint64_t v15 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  atomic_fetch_add((atomic_uint *volatile)(v15 + 16), 1u);
  uint64_t v16 = *(void *)(a1 + 24);
  atomic_fetch_add((atomic_uint *volatile)v6, 1u);
  int v17 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v17 = &unk_1EE9E6370;
  v17[1] = v6;
  char v25 = v17;
  WebKit::NetworkProcessProxy::setThirdPartyCookieBlockingMode(v15, v16, a2, (uint64_t *)&v25);
  if (v25) {
    (*(void (**)(void *))(*v25 + 8))(v25);
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v15 + 16));
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v6);
}

unsigned int *WebKit::WebsiteDataStore::setResourceLoadStatisticsShouldEnbleSameSiteStrictEnforcementForTesting(WebKit::WebsiteDataStore *a1, char a2, uint64_t *a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(a1);
  uint64_t v7 = (unsigned int *)(v6 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  uint64_t v11 = *((void *)a1 + 3);
  uint64_t v9 = &v11;
  char v10 = a2;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetShouldEnbleSameSiteStrictEnforcementForTesting,WTF::CompletionHandler<void ()(void)>>(v6, (uint64_t)&v9, a3, 0, 0, 1);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::setResourceLoadStatisticsFirstPartyWebsiteDataRemovalModeForTesting(uint64_t *a1, char a2, uint64_t *a3)
{
  char v5 = a2 ^ 1;
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v7 = (unsigned int *)(v6 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  WebKit::NetworkProcessProxy::setFirstPartyWebsiteDataRemovalModeForTesting(v6, a1[3], v5, a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::setResourceLoadStatisticsToSameSiteStrictCookiesForTesting(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(a1);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  uint64_t v7 = *((void *)a1 + 3);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v11, a2);
  WebKit::NetworkProcessProxy::setToSameSiteStrictCookiesForTesting(v6, v7, (uint64_t *)&v11, a3);
  uint64_t v9 = v11;
  uint64_t v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
}

unsigned int *WebKit::WebsiteDataStore::setResourceLoadStatisticsFirstPartyHostCNAMEDomainForTesting(WebKit::WebsiteDataStore *a1, WTF::URL *a2, WTF::URL *this, uint64_t *a4)
{
  uint64_t v8 = WTF::URL::host(this);
  if ((char *)v8 != "testwebkit.org" && v9 == 14)
  {
    if ((v9 & 0xFF00000000) != 0)
    {
      if (*(unsigned char *)v8 == 116
        && *(void *)(v8 + 1) == 0x696B626577747365
        && *(void *)(v8 + 6) == 0x67726F2E74696B62)
      {
        goto LABEL_15;
      }
    }
    else if (*(_WORD *)v8 == 116)
    {
      uint16x8_t v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 2), (int16x8_t)xmmword_1994F7670);
      v23.i16[0] = vminvq_u16(v23);
      if (v23.i32[0])
      {
        uint16x8_t v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 12), (int16x8_t)xmmword_1994F7680);
        v24.i16[0] = vminvq_u16(v24);
        if (v24.i32[0]) {
          goto LABEL_15;
        }
      }
    }
  }
  else if ((char *)v8 == "testwebkit.org" && v9 == 14)
  {
    goto LABEL_15;
  }
  uint64_t v11 = WTF::URL::host(this);
  if ((char *)v11 == "3rdpartytestwebkit.org" || v12 != 22)
  {
    if ((char *)v11 != "3rdpartytestwebkit.org" || v12 != 22) {
      goto LABEL_31;
    }
LABEL_15:
    uint64_t v14 = WebKit::WebsiteDataStore::networkProcess(a1);
    atomic_fetch_add((atomic_uint *volatile)(v14 + 16), 1u);
    uint64_t v15 = *((void *)a1 + 3);
    WTF::URL::host(a2);
    if ((v16 & 0xFF00000000) != 0) {
      WTF::String::String();
    }
    else {
      WTF::String::String();
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v30, this);
    v32[2] = (uint64_t *)&v30;
    uint64_t v33 = v15;
    v32[0] = &v33;
    v32[1] = (uint64_t *)&v31;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetFirstPartyHostCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(v14, v32, a4, 0, 0, 1);
    uint64_t v18 = v30;
    int v30 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v17);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    uint64_t v19 = v31;
    uint64_t v31 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v17);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v14 + 16));
  }
  if ((v12 & 0xFF00000000) != 0)
  {
    if (*(unsigned char *)v11 == 51)
    {
      uint8x16_t v13 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v11 + 6), (int8x16_t)xmmword_1994F76A0), vceqq_s8(*(int8x16_t *)(v11 + 1), (int8x16_t)xmmword_1994F7690));
      v13.i8[0] = vminvq_u8(v13);
      if (v13.i32[0]) {
        goto LABEL_15;
      }
    }
  }
  else if (*(_WORD *)v11 == 51)
  {
    uint16x8_t v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v11 + 2), (int16x8_t)xmmword_1994F76B0);
    v25.i16[0] = vminvq_u16(v25);
    if (v25.i32[0])
    {
      uint64_t v26 = (int16x8_t *)(v11 + 12);
      uint64_t v27 = 6u;
      while (1)
      {
        uint16x8_t v28 = (uint16x8_t)vceqq_s16(*v26, (int16x8_t)vmovl_u8(*(uint8x8_t *)&str_14_3[v27]));
        v28.i16[0] = vminvq_u16(v28);
        if (!v28.i32[0]) {
          break;
        }
        unint64_t v29 = v27 - 1;
        v27 += 8;
        ++v26;
        if (v29 > 0xC) {
          goto LABEL_15;
        }
      }
    }
  }
LABEL_31:
  uint64_t v21 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
  uint64_t v22 = *(uint64_t (**)(uint64_t))(*(void *)v21 + 8);

  return (unsigned int *)v22(v21);
}

unsigned int *WebKit::WebsiteDataStore::setResourceLoadStatisticsThirdPartyCNAMEDomainForTesting(WebKit::WebsiteDataStore *a1, WTF::URL *this, uint64_t *a3)
{
  uint64_t v6 = WTF::URL::host(this);
  if ((char *)v6 != "testwebkit.org" && v7 == 14)
  {
    if ((v7 & 0xFF00000000) != 0)
    {
      if (*(unsigned char *)v6 == 116
        && *(void *)(v6 + 1) == 0x696B626577747365
        && *(void *)(v6 + 6) == 0x67726F2E74696B62)
      {
        goto LABEL_15;
      }
    }
    else if (*(_WORD *)v6 == 116)
    {
      uint16x8_t v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1994F7670);
      v19.i16[0] = vminvq_u16(v19);
      if (v19.i32[0])
      {
        uint16x8_t v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 12), (int16x8_t)xmmword_1994F7680);
        v20.i16[0] = vminvq_u16(v20);
        if (v20.i32[0]) {
          goto LABEL_15;
        }
      }
    }
  }
  else if ((char *)v6 == "testwebkit.org" && v7 == 14)
  {
    goto LABEL_15;
  }
  uint64_t v9 = WTF::URL::host(this);
  if ((char *)v9 == "3rdpartytestwebkit.org" || v10 != 22)
  {
    if ((char *)v9 == "3rdpartytestwebkit.org" && v10 == 22) {
      goto LABEL_15;
    }
  }
  else if ((v10 & 0xFF00000000) != 0)
  {
    if (*(unsigned char *)v9 == 51)
    {
      uint8x16_t v11 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v9 + 6), (int8x16_t)xmmword_1994F76A0), vceqq_s8(*(int8x16_t *)(v9 + 1), (int8x16_t)xmmword_1994F7690));
      v11.i8[0] = vminvq_u8(v11);
      if (v11.i32[0])
      {
LABEL_15:
        uint64_t v12 = WebKit::WebsiteDataStore::networkProcess(a1);
        atomic_fetch_add((atomic_uint *volatile)(v12 + 16), 1u);
        uint64_t v13 = *((void *)a1 + 3);
        WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v26, this);
        v27[1] = (uint64_t *)&v26;
        uint64_t v28 = v13;
        v27[0] = &v28;
        WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetThirdPartyCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(v12, v27, a3, 0, 0, 1);
        uint64_t v15 = v26;
        uint64_t v26 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v14);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
      }
    }
  }
  else if (*(_WORD *)v9 == 51)
  {
    uint16x8_t v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v9 + 2), (int16x8_t)xmmword_1994F76B0);
    v21.i16[0] = vminvq_u16(v21);
    if (v21.i32[0])
    {
      uint64_t v22 = (int16x8_t *)(v9 + 12);
      uint64_t v23 = 6u;
      while (1)
      {
        uint16x8_t v24 = (uint16x8_t)vceqq_s16(*v22, (int16x8_t)vmovl_u8(*(uint8x8_t *)&str_14_3[v23]));
        v24.i16[0] = vminvq_u16(v24);
        if (!v24.i32[0]) {
          break;
        }
        unint64_t v25 = v23 - 1;
        v23 += 8;
        ++v22;
        if (v25 > 0xC) {
          goto LABEL_15;
        }
      }
    }
  }
  uint64_t v17 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
  uint64_t v18 = *(uint64_t (**)(uint64_t))(*(void *)v17 + 8);

  return (unsigned int *)v18(v17);
}

unsigned int *WebKit::WebsiteDataStore::syncLocalStorage(WebKit::WebsiteDataStore *a1, uint64_t *a2)
{
  uint64_t v3 = WebKit::WebsiteDataStore::networkProcess(a1);
  uint64_t v4 = (unsigned int *)(v3 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
  char v6 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SyncLocalStorage,WTF::CompletionHandler<void ()(void)>>(v3, (uint64_t)&v6, a2, 0, 0, 1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SyncLocalStorage,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint8x16_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint8x16_t v11 = 512;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint16x8_t v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v13 = &unk_1EE9E6398;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  uint16x8_t v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

unsigned int *WebKit::WebsiteDataStore::storeServiceWorkerRegistrations(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  char v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  uint64_t v7 = a1 + 3;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::StoreServiceWorkerRegistrations,WTF::CompletionHandler<void ()(void)>>(v4, &v7, a2, 0, 0, 1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::StoreServiceWorkerRegistrations,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 511;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  unint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E63C0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint16x8_t v19 = v25;
  unint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

unsigned int *WebKit::WebsiteDataStore::setCacheMaxAgeCapForPrevalentResources(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v7 = (unsigned int *)(v6 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  WebKit::NetworkProcessProxy::setCacheMaxAgeCapForPrevalentResources(v6, a1[3], a2, a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::resetCacheMaxAgeCapForPrevalentResources(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  char v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  WebKit::NetworkProcessProxy::resetCacheMaxAgeCapForPrevalentResources(v4, a1[3], a2);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::allowTLSCertificateChainForLocalPCMTesting(WebKit::WebsiteDataStore *this, const WebCore::CertificateInfo *a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess(this);
  char v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  uint64_t v7 = *((void *)this + 3);
  v8[0] = &v7;
  v8[1] = (uint64_t *)a2;
  WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::AllowTLSCertificateChainForLocalPCMTesting>(v4, v8, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::AllowTLSCertificateChainForLocalPCMTesting>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 368;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *a2);
  IPC::ArgumentCoder<__SecTrust *,void>::encode(v8);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::computeMediaKeyFile(WebKit *this, const WTF::String *a2)
{
  return WTF::FileSystemImpl::pathByAppendingComponent();
}

void *WebKit::WebsiteDataStore::networkProcessDidTerminate(void *this, WebKit::NetworkProcessProxy *a2)
{
  double v2 = this;
  uint64_t v3 = this[50];
  this[50] = 0;
  if (v3) {
    this = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  uint64_t v4 = v2[55];
  v2[55] = 0;
  if (v4)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v4 + 16))(v4, &v6);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    this = v6;
    uint64_t v6 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        return (void *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v5);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

unsigned int *WebKit::WebsiteDataStore::terminateNetworkProcess(unsigned int *this)
{
  uint64_t v1 = (unsigned int *)*((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v1)
  {
    WebKit::NetworkProcessProxy::terminate((WebKit::NetworkProcessProxy *)v1);
    WebKit::NetworkProcessProxy::networkProcessDidTerminate((uint64_t)v1, (void *)2);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1 + 4);
  }
  return this;
}

unsigned int *WebKit::WebsiteDataStore::sendNetworkProcessPrepareToSuspendForTesting(WebKit::WebsiteDataStore *a1, uint64_t *a2)
{
  uint64_t v3 = (atomic_uint *)WebKit::WebsiteDataStore::networkProcess(a1);
  uint64_t v4 = (unsigned int *)(v3 + 4);
  atomic_fetch_add(v3 + 4, 1u);
  WebKit::NetworkProcessProxy::sendPrepareToSuspend((WTF::MonotonicTime *)v3, 0, a2, 0.0);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
}

unsigned int *WebKit::WebsiteDataStore::sendNetworkProcessWillSuspendImminentlyForTesting(WebKit::WebsiteDataStore *this)
{
  uint64_t v1 = (atomic_uint *)WebKit::WebsiteDataStore::networkProcess(this);
  double v2 = (unsigned int *)(v1 + 4);
  atomic_fetch_add(v1 + 4, 1u);
  WebKit::NetworkProcessProxy::sendProcessWillSuspendImminentlyForTesting((WTF::ApproximateTime *)v1);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2);
}

unsigned int *WebKit::WebsiteDataStore::sendNetworkProcessDidResume(WebKit::WebsiteDataStore *this)
{
  uint64_t v1 = WebKit::WebsiteDataStore::networkProcess(this);
  double v2 = (unsigned int *)(v1 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v1 + 16), 1u);
  WebKit::NetworkProcessProxy::sendProcessDidResume(v1, 0);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2);
}

uint64_t WebKit::WebProcessPool::sendToAllProcessesForSession<Messages::WebProcess::SetTrackingPreventionEnabled>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  char v9 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E6438;
  v6[1] = &v9;
  void v6[2] = a2;
  uint64_t v8 = v6;
  WebKit::WebProcessPool::forEachProcessForSession(a1, a3, (uint64_t)&v8);
  return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
}

uint64_t WebKit::WebsiteDataStore::setStatisticsTestingCallback(WebKit::WebsiteDataStore *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = WebKit::WebsiteDataStore::networkProcess(this);
    uint64_t v6 = (unsigned int *)(v5 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v5 + 16), 1u);
    char v8 = 1;
    WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetResourceLoadStatisticsLogTestingEvent>(v5, &v8, 0, 0);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
    uint64_t v4 = *a2;
  }
  *a2 = 0;
  uint64_t result = *((void *)this + 34);
  *((void *)this + 34) = v4;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetResourceLoadStatisticsLogTestingEvent>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 487;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *WebKit::WebsiteDataStore::setResourceLoadStatisticsDebugMode(WebKit::WebsiteDataStore *this, char a2)
{
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9E6460;
  uint64_t v6 = v4;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsDebugMode((uint64_t)this, a2, (uint64_t *)&v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  return result;
}

unsigned int *WebKit::WebsiteDataStore::setResourceLoadStatisticsDebugMode(uint64_t a1, char a2, uint64_t *a3)
{
  *(unsigned char *)(a1 + 264) = a2;
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v7 = (unsigned int *)(v6 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  WebKit::NetworkProcessProxy::setResourceLoadStatisticsDebugMode(v6, *(void *)(a1 + 24), a2, a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::isResourceLoadStatisticsEphemeral(WebKit::WebsiteDataStore *this, uint64_t *a2)
{
  if (*((unsigned char *)this + 265) != 2)
  {
    if (*((unsigned char *)this + 265)) {
      goto LABEL_8;
    }
    if (*(unsigned __int16 *)(*((void *)this + 26) + 528) >= 0x100u)
    {
      if (!*(_WORD *)(*((void *)this + 26) + 528)) {
        goto LABEL_8;
      }
    }
    else if (!WebKit::doesAppHaveTrackingPreventionEnabled(this))
    {
      goto LABEL_8;
    }
  }
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 0x8000000000000000) == 0 || v4 == -1)
  {
LABEL_8:
    uint64_t v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return (unsigned int *)v6(v5);
  }
  uint64_t v8 = WebKit::WebsiteDataStore::networkProcess(this);
  char v9 = (unsigned int *)(v8 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
  WebKit::NetworkProcessProxy::isResourceLoadStatisticsEphemeral(v8, *((void *)this + 3), a2);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
}

unsigned int *WebKit::WebsiteDataStore::setPrivateClickMeasurementDebugMode(WebKit::WebsiteDataStore *this, char a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess(this);
  uint64_t v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  WebKit::NetworkProcessProxy::setPrivateClickMeasurementDebugMode(v4, *((void *)this + 3), a2);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::storePrivateClickMeasurement(WebKit::WebsiteDataStore *this, const WebCore::PrivateClickMeasurement *a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess(this);
  uint64_t v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  uint64_t v7 = *((void *)this + 3);
  v8[0] = &v7;
  v8[1] = a2;
  WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::StorePrivateClickMeasurement>(v4, (uint64_t)v8, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::StorePrivateClickMeasurement>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 510;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::PrivateClickMeasurement,void>::encode(v8, *(void *)(a2 + 8));
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unsigned int *WebKit::WebsiteDataStore::setStorageSiteValidationEnabled(unsigned int *this, int a2)
{
  if (*((unsigned __int8 *)this + 488) != a2)
  {
    double v2 = this;
    *((unsigned char *)this + 488) = a2;
    this = (unsigned int *)*((void *)this + 50);
    if (this)
    {
      uint64_t v3 = this + 4;
      atomic_fetch_add((atomic_uint *volatile)this + 4, 1u);
      uint64_t v4 = *((void *)v2 + 3);
      char v5 = *((unsigned char *)v2 + 488);
      uint64_t v6 = v4;
      uint64_t v7 = &v6;
      char v8 = v5;
      WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetStorageSiteValidationEnabled>((uint64_t)this, (uint64_t)&v7, 0, 0);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
    }
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetStorageSiteValidationEnabled>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 494;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,BOOL>,0ul,1ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

WTF::StringImpl **WebKit::WebsiteDataStore::setPersistedSiteURLs(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 496);
  uint64_t v4 = *(void *)a2;
  *(void *)a2 = 0;
  char v5 = *(WTF::StringImpl ***)(a1 + 496);
  *(void *)(a1 + 496) = v4;
  if (v5) {
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(v5, a2);
  }
  char v17 = 0;
  uint64_t v6 = WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::begin(v3);
  char v8 = (const WTF::URL *)v6;
  char v9 = v7;
  if (*v3) {
    uint64_t v10 = *v3 + 40 * *(unsigned int *)(*v3 - 4);
  }
  else {
    uint64_t v10 = 0;
  }
  if ((WTF **)v10 != v6)
  {
    do
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v16, v8);
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v17, &v16, (uint64_t)v15);
      uint64_t v11 = v16;
      uint64_t v16 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v7);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      while (1)
      {
        char v8 = (const WTF::URL *)((char *)v8 + 40);
        if (v8 == v9) {
          break;
        }
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v8) & 1) == 0
          && *(void *)v8 != -1)
        {
          goto LABEL_16;
        }
      }
      char v8 = v9;
LABEL_16:
      ;
    }
    while (v8 != (const WTF::URL *)v10);
  }
  uint64_t v12 = *(void *)(a1 + 400);
  if (v12)
  {
    uint64_t v13 = (unsigned int *)(v12 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v12 + 16), 1u);
    uint64_t v16 = *(WTF::StringImpl **)(a1 + 24);
    v15[0] = (uint64_t *)&v16;
    v15[1] = (uint64_t *)&v17;
    WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetPersistedDomains>(v12, v15, 0, 0);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
  }
  uint64_t result = v17;
  if (v17) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v7);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetPersistedDomains>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 473;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *a2);
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unsigned int *WebKit::WebsiteDataStore::closeDatabases(WebKit::WebsiteDataStore *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v4 = 1;
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(a1);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  uint64_t v7 = (uint64_t *)((char *)a1 + 24);
  atomic_fetch_add((atomic_uint *volatile)v4, 1u);
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 385;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v27 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, v7);
  char v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9E6488;
  v9[1] = v4;
  char v24 = v9;
  uint64_t v25 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v26 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v27, 0, (uint64_t)&v24, 1);
  if (v26)
  {
    uint64_t v11 = v24;
    char v24 = 0;
    if (v11) {
      (*(void (**)(void *))(*v11 + 8))(v11);
    }
  }
  uint64_t v12 = v27;
  uint64_t v27 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v20, v21);
  }
  atomic_fetch_add((atomic_uint *volatile)v4, 1u);
  uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v13 = 384;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  uint64_t v27 = v13;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v13, v7);
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9E64B0;
  v14[1] = v4;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v24 = v14;
  uint64_t v25 = v15;
  char v26 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v27, 0, (uint64_t)&v24, 1);
  if (v26)
  {
    char v17 = v24;
    char v24 = 0;
    if (v17) {
      (*(void (**)(void *))(*v17 + 8))(v17);
    }
  }
  uint64_t v18 = v27;
  uint64_t v27 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v16);
    WTF::fastFree(v22, v23);
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v4);
}

uint64_t WebKit::WebProcessPool::sendToAllProcessesForSession<Messages::WebProcess::ClearResourceLoadStatistics>(unsigned int *a1, uint64_t a2, uint64_t a3, char a4)
{
  char v10 = a4;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v7 = &unk_1EE9E64D8;
  v7[1] = &v10;
  void v7[2] = a2;
  char v9 = v7;
  WebKit::WebProcessPool::forEachProcessForSession(a1, a3, (uint64_t)&v9);
  return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
}

uint64_t WebKit::WebsiteDataStore::setUserAgentStringQuirkForTesting(int a1, WebCore::RegistrableDomain *this, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  {
    qword_1EB35A578 = 0;
    WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance = 0u;
    unk_1EB35A568 = 0u;
  }
  WebCore::RegistrableDomain::uncheckedCreateFromHost(this, &v14);
  uint64_t v6 = v14;
  uint64_t v14 = 0;
  uint64_t v16 = v6;
  uint64_t v7 = *a3;
  if (*a3) {
    *(_DWORD *)v7 += 2;
  }
  char v17 = v7;
  WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashMap((uint64_t *)&v15, (uint64_t)&v16, 1);
  WebKit::StorageAccessUserAgentStringQuirkController::setCachedQuirksForTesting((uint64_t)&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance, (WTF::StringImpl *)&v15);
  if (v15) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v15, v8);
  }
  char v9 = v17;
  char v17 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  char v10 = v16;
  uint64_t v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v14;
  uint64_t v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v8);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
  return (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
}

unsigned int *WebKit::WebsiteDataStore::setPrivateTokenIPCForTesting(WebKit::WebsiteDataStore *this, char a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess(this);
  uint64_t v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  uint64_t v7 = *((void *)this + 3);
  char v8 = &v7;
  char v9 = a2;
  WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetShouldSendPrivateTokenIPCForTesting>(v4, (uint64_t)&v8, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetShouldSendPrivateTokenIPCForTesting>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 493;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,BOOL>,0ul,1ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::WebsiteDataStore::setCacheModelSynchronouslyForTesting(uint64_t a1, char a2)
{
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v8);
  if (v9)
  {
    uint64_t v4 = v8;
    uint64_t v5 = 8 * v9;
    do
    {
      uint64_t v6 = *v4++;
      CFRetain(*(CFTypeRef *)(v6 + 8));
      WebKit::WebProcessPool::setCacheModelSynchronouslyForTesting(v6, a2);
      CFRelease(*(CFTypeRef *)(v6 + 8));
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v3);
}

uint64_t *WebKit::WebsiteDataStore::addSecKeyProxyStore(uint64_t a1, unint64_t a2)
{
  double v2 = (uint64_t *)a2;
  uint64_t result = (uint64_t *)(a1 + 336);
  uint64_t v5 = *(unsigned int *)(a1 + 348);
  if (v5 == *(_DWORD *)(a1 + 344))
  {
    uint64_t result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, a2);
    double v2 = result;
    uint64_t v5 = *(unsigned int *)(a1 + 348);
    uint64_t v6 = (void *)(*(void *)(a1 + 336) + 8 * v5);
  }
  else
  {
    uint64_t v6 = (void *)(*result + 8 * v5);
  }
  uint64_t v7 = *v2;
  *double v2 = 0;
  void *v6 = v7;
  *(_DWORD *)(a1 + 348) = v5 + 1;
  return result;
}

WTF *WebKit::WebsiteDataStore::setMockWebAuthenticationConfiguration(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 352) + 32))(*(void *)(a1 + 352)))
  {
    uint64_t v4 = *(void *)(a1 + 352);
    return WebKit::MockAuthenticatorManager::setTestConfiguration(v4, a2);
  }
  else
  {
    uint64_t v6 = WTF::fastMalloc((WTF *)0x3F8);
    WebKit::MockAuthenticatorManager::MockAuthenticatorManager(v6, a2);
    uint64_t result = *(WTF **)(a1 + 352);
    *(void *)(a1 + 352) = v6;
    if (result)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (WTF *)v7();
    }
  }
  return result;
}

uint64_t WebKit::WebsiteDataStore::virtualAuthenticatorManager(WebKit::WebsiteDataStore *this)
{
  if (((*(uint64_t (**)(void))(**((void **)this + 44) + 40))(*((void *)this + 44)) & 1) == 0)
  {
    double v2 = (WebKit::AuthenticatorManager *)WTF::fastMalloc((WTF *)0x368);
    uint64_t v3 = WebKit::AuthenticatorManager::AuthenticatorManager(v2);
    *(void *)uint64_t v3 = &unk_1EE9F9D90;
    *((void *)v3 + 2) = &unk_1EE9F9E38;
    *(_OWORD *)((char *)v3 + 856) = 0u;
    uint64_t v4 = *((void *)this + 44);
    *((void *)this + 44) = v2;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  return *((void *)this + 44);
}

unsigned int *WebKit::WebsiteDataStore::resetQuota(WebKit::WebsiteDataStore *a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess(a1);
  uint64_t v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  uint64_t v6 = *((void *)a1 + 3);
  char v8 = &v9;
  uint64_t v9 = v6;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ResetQuota,WTF::CompletionHandler<void ()(void)>>(v4, &v8, a2, 0, 0, 1);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::resetStoragePersistedState(WebKit::WebsiteDataStore *a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess(a1);
  uint64_t v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  uint64_t v6 = *((void *)a1 + 3);
  char v8 = &v9;
  uint64_t v9 = v6;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ResetStoragePersistedState,WTF::CompletionHandler<void ()(void)>>(v4, &v8, a2, 0, 0, 1);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::renameOriginInWebsiteData(WebKit::WebsiteDataStore *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v10 = WebKit::WebsiteDataStore::networkProcess(a1);
  uint64_t v11 = (unsigned int *)(v10 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v10 + 16), 1u);
  uint64_t v15 = *((void *)a1 + 3);
  int v14 = a4;
  v13[0] = &v15;
  v13[1] = a2;
  uint64_t v13[2] = a3;
  v13[3] = &v14;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::RenameOriginInWebsiteData,WTF::CompletionHandler<void ()(void)>>(v10, (uint64_t)v13, a5, 0, 0, 1);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
}

unsigned int *WebKit::WebsiteDataStore::originDirectoryForTesting(WebKit::WebsiteDataStore *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v8 = WebKit::WebsiteDataStore::networkProcess(a1);
  uint64_t v9 = (unsigned int *)(v8 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
  uint64_t v13 = *((void *)a1 + 3);
  int v12 = a3;
  v11[0] = &v13;
  v11[1] = a2;
  void v11[2] = &v12;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::WebsiteDataOriginDirectoryForTesting,WTF::CompletionHandler<void ()(WTF::String const&)>>(v8, (uint64_t)v11, a4, 0, 0, 1);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
}

unsigned int *WebKit::WebsiteDataStore::hasAppBoundSession(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  WebKit::NetworkProcessProxy::hasAppBoundSession(v4, a1[3], a2);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::clearAppBoundSession(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  WebKit::NetworkProcessProxy::clearAppBoundSession(v4, a1[3], a2);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::forwardAppBoundDomainsToITPIfInitialized(uint64_t *a1)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v2 = 1;
  uint64_t v3 = *a1;
  *a1 = 0;
  *(void *)(v2 + 8) = v3;
  WebKit::WebsiteDataStore::appBoundDomainsIfInitialized((uint64_t *)&v16);
  if (!v17) {
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v2);
  }
  atomic_fetch_add((atomic_uint *volatile)v2, 1u);
  uint64_t v15 = (atomic_uint *)v2;
  unint64_t v4 = (unint64_t)&qword_1EB35A000;
    goto LABEL_23;
  if (WebKit::globalDefaultDataStore(void)::globalDefaultDataStore) {
    uint64_t v5 = *(WebKit::WebsiteDataStore **)(WebKit::globalDefaultDataStore(void)::globalDefaultDataStore + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  while (1)
  {
    unint64_t v4 = v17;
    if (v17) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    uint64_t v5 = 0;
    WebKit::globalDefaultDataStore(void)::globalDefaultDataStore = 0;
    *(unsigned char *)(v4 + 2224) = 1;
  }
  uint64_t v6 = (WebKit *)WebKit::WebsiteDataStore::forwardAppBoundDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(&v15, v5, (uint64_t *)&v16);
  WebKit::allDataStores(v6);
  uint64_t v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)&WebKit::allDataStores(void)::map);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  if (WebKit::allDataStores(void)::map) {
    uint64_t v11 = WebKit::allDataStores(void)::map + 16 * *(unsigned int *)(WebKit::allDataStores(void)::map - 4);
  }
  else {
    uint64_t v11 = 0;
  }
  if ((void *)v11 != v7)
  {
    do
    {
      int v12 = *(CFTypeRef **)(v8[1] + 8);
      CFRetain(v12[1]);
      unint64_t v4 = v17;
      if (!v17) {
        goto LABEL_22;
      }
      WebKit::WebsiteDataStore::forwardAppBoundDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(&v15, (WebKit::WebsiteDataStore *)v12, (uint64_t *)&v16);
      CFRelease(v12[1]);
      while (1)
      {
        v8 += 2;
        if (v8 == v10) {
          break;
        }
        if ((unint64_t)(*v8 + 1) > 1) {
          goto LABEL_17;
        }
      }
      uint64_t v8 = v10;
LABEL_17:
      ;
    }
    while (v8 != (void *)v11);
  }
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v2);
  if (v17 && v16) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v16, v13);
  }
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v2);
}

atomic_uint *volatile *WebKit::WebsiteDataStore::forwardAppBoundDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(atomic_uint *volatile *result, WebKit::WebsiteDataStore *this, uint64_t *a3)
{
  if (this)
  {
    uint64_t v5 = result;
    if (WebKit::WebsiteDataStore::thirdPartyCookieBlockingMode(this) != 1)
    {
      atomic_uint *volatile v6 = *v5;
      atomic_fetch_add(*v5, 1u);
      uint64_t v7 = (atomic_uint *volatile *)WTF::fastMalloc((WTF *)0x10);
      atomic_uint *volatile *v7 = (atomic_uint *volatile)&unk_1EE9E5BE0;
      *((void *)v7 + 1) = v6;
      uint64_t v10 = v7;
      WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode((uint64_t)this, 1, (uint64_t *)&v10);
      if (v10) {
        (*((void (**)(atomic_uint *volatile *))*v10 + 1))(v10);
      }
    }
    uint64_t v8 = *v5;
    atomic_fetch_add(v8, 1u);
    uint64_t v9 = (atomic_uint *volatile *)WTF::fastMalloc((WTF *)0x10);
    atomic_uint *volatile *v9 = (atomic_uint *volatile)&unk_1EE9E5C08;
    *((void *)v9 + 1) = v8;
    uint64_t v10 = v9;
    WebKit::WebsiteDataStore::setAppBoundDomainsForITP((uint64_t *)this, a3, (uint64_t *)&v10);
    uint64_t result = v10;
    if (v10) {
      return (atomic_uint *volatile *)(*((uint64_t (**)(atomic_uint *volatile *))*v10 + 1))(v10);
    }
  }
  return result;
}

unsigned int *WebKit::WebsiteDataStore::setAppBoundDomainsForITP(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v7 = (unsigned int *)(v6 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  WebKit::NetworkProcessProxy::setAppBoundDomainsForResourceLoadStatistics(v6, a1[3], a2, a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

atomic_uint *volatile *WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(atomic_uint *volatile *result, WebKit::WebsiteDataStore *this, uint64_t *a3)
{
  if (this)
  {
    uint64_t v5 = result;
    if (WebKit::WebsiteDataStore::thirdPartyCookieBlockingMode(this) != 1
      && WebKit::WebsiteDataStore::thirdPartyCookieBlockingMode(this) != 2)
    {
      atomic_uint *volatile v6 = *v5;
      atomic_fetch_add(*v5, 1u);
      uint64_t v7 = (atomic_uint *volatile *)WTF::fastMalloc((WTF *)0x10);
      atomic_uint *volatile *v7 = (atomic_uint *volatile)&unk_1EE9E5C30;
      *((void *)v7 + 1) = v6;
      int v12 = v7;
      WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode((uint64_t)this, 2, (uint64_t *)&v12);
      if (v12) {
        (*((void (**)(atomic_uint *volatile *))*v12 + 1))(v12);
      }
    }
    uint64_t v8 = *v5;
    atomic_fetch_add(v8, 1u);
    uint64_t v9 = (atomic_uint *volatile *)WTF::fastMalloc((WTF *)0x10);
    atomic_uint *volatile *v9 = (atomic_uint *volatile)&unk_1EE9E5C58;
    *((void *)v9 + 1) = v8;
    int v12 = v9;
    uint64_t v10 = WebKit::WebsiteDataStore::networkProcess(this);
    uint64_t v11 = (unsigned int *)(v10 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v10 + 16), 1u);
    WebKit::NetworkProcessProxy::setManagedDomainsForResourceLoadStatistics(v10, *((void *)this + 3), a3, (uint64_t *)&v12);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
    uint64_t result = v12;
    if (v12) {
      return (atomic_uint *volatile *)(*((uint64_t (**)(atomic_uint *volatile *))*v12 + 1))(v12);
    }
  }
  return result;
}

unsigned int *WebKit::WebsiteDataStore::updateBundleIdentifierInNetworkProcess(WebKit::WebsiteDataStore *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = WebKit::WebsiteDataStore::networkProcess(a1);
  atomic_uint *volatile v6 = (unsigned int *)(v5 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v5 + 16), 1u);
  uint64_t v8 = a2;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::UpdateBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(v5, &v8, a3, 0, 0, 1);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
}

unsigned int *WebKit::WebsiteDataStore::clearBundleIdentifierInNetworkProcess(WebKit::WebsiteDataStore *a1, uint64_t *a2)
{
  uint64_t v3 = WebKit::WebsiteDataStore::networkProcess(a1);
  unint64_t v4 = (unsigned int *)(v3 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
  char v6 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(v3, (uint64_t)&v6, a2, 0, 0, 1);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
}

unsigned int *WebKit::WebsiteDataStore::countNonDefaultSessionSets(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  uint64_t v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  uint64_t v7 = a1 + 3;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::CountNonDefaultSessionSets,WTF::CompletionHandler<void ()(unsigned long)>>(v4, &v7, a2, 0, 0, 1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::CountNonDefaultSessionSets,WTF::CompletionHandler<void ()(unsigned long)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  int v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v12 = 386;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E6500;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint16x8_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::WebsiteDataStore::showPersistentNotification(WebKit::WebsiteDataStore *this, atomic_uchar **a2, WTF::StringImpl **a3)
{
  char v6 = (WebKit::WebNotificationManagerProxy *)(*(uint64_t (**)(void, WTF::StringImpl **))(**((void **)this + 48) + 48))(*((void *)this + 48), a3);
  if (v6) {
    return 1;
  }
  uint64_t v8 = WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(v6);
  int v12 = 0;
  uint64_t v7 = WebKit::WebNotificationManagerProxy::showPersistent((uint64_t)v8, (uint64_t)this, a2, a3, (uint64_t)&v12);
  uint64_t v10 = v12;
  int v12 = 0;
  if (v10) {
    WTF::ThreadSafeRefCounted<WebCore::NotificationResources,(WTF::DestructionThread)0>::deref(v10, v9);
  }
  return v7;
}

WTF *WebKit::WebsiteDataStore::clearServiceWorkerNotification(WebKit::WebsiteDataStore *this, const WTF::UUID *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  long long v8 = *(_OWORD *)a2;
  uint64_t v2 = WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v6, &v8, 1uLL);
  uint64_t v3 = WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager((WebKit::WebNotificationManagerProxy *)v2);
  WebKit::WebNotificationManagerProxy::clearNotifications(v3, 0, (uint64_t)&v6);
  uint64_t result = v6;
  if (v6)
  {
    char v6 = 0;
    int v7 = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

uint64_t WebKit::WebsiteDataStore::openWindowFromServiceWorker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  *a4 = 0;
  uint64_t v7 = *(void *)(a1 + 384);
  long long v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v8 = &unk_1EE9E6528;
  v8[1] = v6;
  uint64_t v10 = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v7 + 32))(v7, a2, a3, &v10);
  uint64_t result = (uint64_t)v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebsiteDataStore::getNotifications(uint64_t a1, WebCore::SecurityOriginData *this, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 384);
  WebCore::SecurityOriginData::fromURL(v7, this, this);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v4 + 72))(v4, v7, a3);
  if (v8 != -1) {
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v8])(&v6, v7);
  }
  return result;
}

unsigned int *WebKit::WebsiteDataStore::createDownloadProxy@<X0>(WebKit::WebsiteDataStore *a1@<X0>, uint64_t *a2@<X1>, const String *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = WebKit::WebsiteDataStore::networkProcess(a1);
  uint64_t v13 = (unsigned int *)(v12 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v12 + 16), 1u);
  WebKit::NetworkProcessProxy::createDownloadProxy((WebKit::DownloadProxyMap **)v12, (uint64_t)a1, a2, a3, a5, a4, a6);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
}

void WebKit::WebsiteDataStore::download(WebKit::WebsiteDataStore *this, const String *a2, const WTF::String *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  __int16 v36 = 256;
  char v6 = (WebCore::ResourceRequestBase *)&a2[9];
  WebCore::ResourceRequest::ResourceRequest(v34, a2 + 9);
  v38[0] = 0;
  char v40 = 0;
  m_ptr = a2[36].m_impl.m_ptr;
  if (m_ptr && (uint64_t v8 = *((void *)m_ptr + 1)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v8 - 8));
    __int16 v36 = *(_WORD *)(v8 + 1314);
    WTF::URL::URL((uint64_t)v32, (WTF::StringImpl **)(*(void *)(v8 + 16) + 1032));
    WebCore::ResourceRequestBase::setFirstPartyForCookies((WebCore::ResourceRequestBase *)v34, (const WTF::URL *)v32);
    uint64_t v9 = (WTF::URL *)WebCore::ResourceRequestBase::url(v6);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v37, (const WTF::URL *)v32);
    uint64_t v10 = WTF::URL::host(v9);
    WebCore::RegistrableDomain::matches(&v37, v10, v11);
    uint64_t v13 = v37;
    unsigned int v37 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    WebCore::ResourceRequestBase::setIsSameSite((WebCore::ResourceRequestBase *)v34);
    std::optional<WebCore::SecurityOriginData>::operator=[abi:sn180100]<WebCore::SecurityOriginData const&,void>((uint64_t)v38, *(void *)(v8 + 16) + 1040);
    if ((WebCore::ResourceRequestBase::hasHTTPHeaderField() & 1) == 0)
    {
      WebCore::ResourceRequestBase::url(v6);
      uint16x8_t v19 = *(IPC::Encoder **)(v8 + 336);
      if (v19) {
        *(_DWORD *)v19 += 2;
      }
      unsigned int v37 = v19;
      WebCore::ResourceRequestBase::setHTTPUserAgent((WebCore::ResourceRequestBase *)v34, (const WTF::String *)&v37);
      uint16x8_t v20 = v37;
      unsigned int v37 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v18);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    uint64_t v22 = v32[0];
    v32[0] = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v18);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    CFRelease(*(CFTypeRef *)(v8 - 8));
  }
  else
  {
    v32[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v32);
    WebCore::ResourceRequestBase::setFirstPartyForCookies((WebCore::ResourceRequestBase *)v34, (const WTF::URL *)v32);
    uint64_t v15 = v32[0];
    v32[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    WebCore::ResourceRequestBase::setIsSameSite((WebCore::ResourceRequestBase *)v34);
    if ((WebCore::ResourceRequestBase::hasHTTPHeaderField() & 1) == 0)
    {
      unsigned int v37 = 0;
      WebCore::standardUserAgentWithApplicationName();
      WebCore::ResourceRequestBase::setHTTPUserAgent((WebCore::ResourceRequestBase *)v34, (const WTF::String *)v32);
      int v17 = v32[0];
      v32[0] = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v16);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      uint16x8_t v21 = v37;
      unsigned int v37 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v16);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
    }
  }
  WebCore::ResourceRequestBase::setIsTopSite((WebCore::ResourceRequestBase *)v34);
  uint64_t v23 = WebKit::WebsiteDataStore::networkProcess(this);
  atomic_fetch_add((atomic_uint *volatile)(v23 + 16), 1u);
  uint64_t v31 = a2[7].m_impl.m_ptr;
  char v24 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v24 = 397;
  *((void *)v24 + 1) = 0;
  *((void *)v24 + 66) = (char *)v24 + 16;
  *((void *)v24 + 67) = 512;
  *((void *)v24 + 68) = 0;
  *((void *)v24 + 70) = 0;
  *((void *)v24 + 69) = 0;
  IPC::Encoder::encodeHeader(v24);
  unsigned int v37 = v24;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v24, (uint64_t *)this + 3);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v24, (uint64_t *)&v31);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v24, (WebCore::ResourceRequest *)v34);
  IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v24, (uint64_t)v38);
  IPC::ArgumentCoder<std::optional<WebKit::NavigatingToAppBoundDomain>,void>::encode<IPC::Encoder,std::optional<WebKit::NavigatingToAppBoundDomain> const&>(v24, (char *)&v36);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v24, (uint64_t *)a3);
  LOBYTE(v32[0]) = 0;
  char v33 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v23, &v37, 0, (uint64_t)v32, 1);
  if (v33)
  {
    char v26 = v32[0];
    v32[0] = 0;
    if (v26) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v26 + 8))(v26);
    }
  }
  uint64_t v27 = v37;
  unsigned int v37 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v25);
    WTF::fastFree(v29, v30);
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v23 + 16));
  if (v40 && v39 != -1) {
    ((void (*)(WTF::StringImpl **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v39])(v32, v38);
  }
  CFTypeRef v28 = cf;
  CFTypeRef cf = 0;
  if (v28) {
    CFRelease(v28);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v34);
}

void WebKit::WebsiteDataStore::resumeDownload(const char **a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v27 = 0;
  if (*(void *)a4)
  {
    if (*(_DWORD *)(*(void *)a4 + 4))
    {
      WebKit::SandboxExtension::createHandle(1, (uint64_t)&v20);
      if ((_BYTE)v21)
      {
        uint64_t v10 = v20;
        uint16x8_t v20 = 0;
        uint64_t v27 = v10;
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v20);
      }
    }
  }
  activityAccessToken(&v20);
  uint64_t v11 = (WTF *)v20;
  uint64_t v12 = HIDWORD(v21);
  uint64_t v13 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  int v14 = (unsigned int *)(v13 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v13 + 16), 1u);
  uint64_t v15 = *(void *)(a2 + 56);
  long long v18 = *(_OWORD *)(a3 + 16);
  v17[0] = v11;
  v17[1] = v12;
  uint64_t v19 = v15;
  uint16x8_t v20 = a1 + 3;
  uint16x8_t v21 = &v19;
  uint64_t v22 = &v18;
  uint64_t v23 = a4;
  char v24 = &v27;
  char v25 = a5;
  char v26 = v17;
  WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ResumeDownload>(v13, (uint64_t)&v20, 0, 0);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v14);
  if (v11) {
    WTF::fastFree(v11, v16);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v27);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ResumeDownload>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 451;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  long long v18 = v8;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::span<unsigned char const,18446744073709551615ul> const&,WTF::String const&,WebKit::SandboxExtensionHandle &&,WebKit::CallDownloadDidStart,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,WebKit::CallDownloadDidStart,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(v8, a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  long long v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

BOOL WebKit::WebsiteDataStore::hasActivePages(WebKit::WebsiteDataStore *this)
{
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v9);
  if (v10)
  {
    uint64_t v3 = v9;
    uint64_t v4 = 8 * v10 - 8;
    do
    {
      uint64_t v5 = *v3++;
      BOOL hasPagesUsingWebsiteDataStore = WebKit::WebProcessPool::hasPagesUsingWebsiteDataStore(v5, this);
      if (hasPagesUsingWebsiteDataStore) {
        break;
      }
      uint64_t v7 = v4;
      v4 -= 8;
    }
    while (v7);
  }
  else
  {
    BOOL hasPagesUsingWebsiteDataStore = 0;
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v2);
  return hasPagesUsingWebsiteDataStore;
}

unsigned int *WebKit::WebsiteDataStore::clearProxyConfigData(WebKit::WebsiteDataStore *this)
{
  uint64_t v2 = WebKit::WebsiteDataStore::networkProcess(this);
  uint64_t v3 = (unsigned int *)(v2 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 1u);
  uint64_t v5 = (uint64_t *)((char *)this + 24);
  WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ClearProxyConfigData>(v2, &v5, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ClearProxyConfigData>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 379;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  long long v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *a2);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  long long v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::WebsiteDataStore::setProxyConfigData(WebKit::WebsiteDataStore *this, _DWORD *a2)
{
  uint64_t v4 = (char *)this + 464;
  if (*((unsigned char *)this + 480))
  {
    WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 464, a2);
    *((unsigned char *)this + 480) = 0;
  }
  uint64_t v5 = WebKit::WebsiteDataStore::networkProcess(this);
  char v6 = (unsigned int *)(v5 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v5 + 16), 1u);
  v8[0] = (uint64_t *)((char *)this + 24);
  v8[1] = (uint64_t *)a2;
  WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetProxyConfigData>(v5, v8, 0, 0);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
  return std::optional<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)v4, a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetProxyConfigData>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 483;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  long long v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *a2);
  IPC::VectorArgumentCoder<false,std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v8, a2[1]);
  LOBYTE(v++*(_DWORD *)(this + 16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  long long v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t std::optional<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(uint64_t a1, _DWORD *a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 12);
    if (v4)
    {
      uint64_t v5 = *(void *)a1;
      uint64_t v6 = 32 * v4;
      do
      {
        uint64_t v7 = *(WTF **)v5;
        if (*(void *)v5)
        {
          *(void *)uint64_t v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
          WTF::fastFree(v7, a2);
        }
        v5 += 32;
        v6 -= 32;
      }
      while (v6);
    }
    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1, a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v8 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)a1 = v8;
    LODWORD(v8) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(a1 + 8) = v8;
    LODWORD(v8) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(a1 + 12) = v8;
    *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = 1;
  }
  return a1;
}

uint64_t WebKit::WebsiteDataStore::setCompletionHandlerForRemovalFromNetworkProcess(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 440))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v4 = *(void *)(a1 + 440);
    *(void *)(a1 + 4++*(_DWORD *)(this + 40) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v4 + 16))(v4, &v9);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    uint64_t v6 = v9;
    uint64_t v9 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  uint64_t v7 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 440);
  *(void *)(a1 + 4++*(_DWORD *)(this + 40) = v7;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

unsigned int *WebKit::WebsiteDataStore::setOriginQuotaRatioEnabledForTesting(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 400);
  if (v4)
  {
    uint64_t v5 = (unsigned int *)(v4 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
    uint64_t v9 = a1 + 24;
    char v10 = a2;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetOriginQuotaRatioEnabledForTesting,WTF::CompletionHandler<void ()(void)>>(v4, (uint64_t)&v9, a3, 0, 0, 1);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
  }
  else
  {
    uint64_t v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return (unsigned int *)v8(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetOriginQuotaRatioEnabledForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 471;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  char v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,BOOL>,0ul,1ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E6578;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  char v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

unsigned int *WebKit::WebsiteDataStore::getAppBadgeForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 400);
  if (v3)
  {
    uint64_t v4 = (unsigned int *)(v3 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
    uint64_t v8 = (uint64_t *)(a1 + 24);
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetAppBadgeForTesting,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)>>(v3, &v8, a2, 0, 0, 1);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
  }
  else
  {
    uint64_t v6 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void, void))(*(void *)v6 + 16))(v6, 0, 0);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return (unsigned int *)v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetAppBadgeForTesting,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 404;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  char v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9E65A0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  char v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::WebsiteDataStore::processPushMessage(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v6 = *(unsigned char *)(a2 + 208);
  uint64_t v27 = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v28 = a1;
  char v29 = v6;
  LOBYTE(v30) = 0;
  char v32 = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v7 = (WTF *)*(unsigned int *)(a2 + 12);
    int v30 = 0;
    LODWORD(v31) = 0;
    HIDWORD(v31) = v7;
    if (v7)
    {
      LODWORD(v31) = v7;
      int v30 = (void *)WTF::fastMalloc(v7);
      memcpy(v30, *(const void **)a2, *(unsigned int *)(a2 + 12));
    }
    char v32 = 1;
  }
  uint64_t v8 = *(_DWORD **)(a2 + 24);
  if (v8) {
    *v8 += 2;
  }
  char v33 = v8;
  uint64_t v9 = *(_DWORD **)(a2 + 32);
  if (v9) {
    *v9 += 2;
  }
  int v34 = v9;
  long long v10 = *(_OWORD *)(a2 + 56);
  long long v35 = *(_OWORD *)(a2 + 40);
  long long v36 = v10;
  v37[0] = 0;
  char v38 = 0;
  if (*(unsigned char *)(a2 + 208))
  {
    std::construct_at[abi:sn180100]<WebCore::NotificationPayload,WebCore::NotificationPayload const&,WebCore::NotificationPayload*>((uint64_t)v37, a2 + 72);
    char v38 = 1;
    int v11 = *(unsigned __int8 *)(a2 + 208);
    uint64_t v12 = *a3;
    *a3 = 0;
    uint64_t v39 = v12;
    if (v11 && !*(unsigned char *)(a2 + 200) && *(unsigned char *)(*(void *)(a1 + 208) + 475))
    {
      WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()((uint64_t)&v27, 1, a2 + 72);
      return WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((uint64_t)&v27, v13);
    }
  }
  else
  {
    uint64_t v14 = *a3;
    *a3 = 0;
    uint64_t v39 = v14;
  }
  uint64_t v15 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v26) = 0;
    _os_log_impl(&dword_1985F2000, v15, OS_LOG_TYPE_DEFAULT, "Sending push message to network process to handle", (uint8_t *)&v26, 2u);
  }
  uint64_t v16 = (atomic_uint *)WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  atomic_fetch_add(v16 + 4, 1u);
  int v17 = *(WTF::StringImpl **)(a1 + 24);
  uint64_t v18 = WTF::fastMalloc((WTF *)0x100);
  uint64_t v19 = v18;
  *(void *)uint64_t v18 = &unk_1EE9E65C8;
  *(void *)(v18 + 8) = v27;
  uint64_t v20 = v28;
  uint64_t v28 = 0;
  *(void *)(v18 + ++*(_DWORD *)(this + 16) = v20;
  *(unsigned char *)(v18 + 24) = v29;
  *(unsigned char *)(v18 + 32) = 0;
  *(unsigned char *)(v18 + 48) = 0;
  if (v32)
  {
    *(void *)(v18 + 32) = v30;
    uint64_t v21 = v31;
    int v30 = 0;
    uint64_t v31 = 0;
    *(void *)(v18 + ++*(_DWORD *)(this + 40) = v21;
    *(unsigned char *)(v18 + 48) = 1;
  }
  uint64_t v22 = v33;
  char v33 = 0;
  *(void *)(v18 + 56) = v22;
  WTF::URL::URL(v18 + 64, (uint64_t *)&v34);
  std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](v19 + 104, (uint64_t)v37);
  uint64_t v23 = v39;
  uint64_t v39 = 0;
  *(void *)(v19 + 248) = v23;
  uint64_t v26 = v19;
  WebKit::NetworkProcessProxy::processPushMessage((WebCore::DeprecatedGlobalSettings *)v16, v17, a2, &v26);
  uint64_t v24 = v26;
  uint64_t v26 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v16 + 4);
  return WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((uint64_t)&v27, v13);
}

uint64_t WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v4 = *(WebKit::WebsiteDataStore **)a1;
    if (*(unsigned char *)(*(void *)(*(void *)a1 + 208) + 475))
    {
      if (*(unsigned char *)(a3 + 136))
      {
        uint64_t v6 = a1 + 96;
        if (*(unsigned char *)(a1 + 232))
        {
          WTF::URL::operator=(v6, a3);
          WTF::String::operator=((uint64_t *)(a1 + 136), (uint64_t *)(a3 + 40));
          char v7 = *(unsigned char *)(a3 + 56);
          *(void *)(a1 + 144) = *(void *)(a3 + 48);
          *(unsigned char *)(a1 + 152) = v7;
          std::__optional_storage_base<WebCore::NotificationOptionsPayload,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::NotificationOptionsPayload,false>>((WebCore::ApplePayInstallmentItem *)(a1 + 160), a3 + 64);
          char v9 = *(unsigned char *)(a3 + 128);
        }
        else
        {
          WTF::URL::URL(v6, (uint64_t *)a3);
          uint64_t v13 = *(void *)(a3 + 40);
          *(void *)(a3 + ++*(_DWORD *)(this + 40) = 0;
          *(void *)(a1 + 136) = v13;
          *(_OWORD *)(a1 + 144) = *(_OWORD *)(a3 + 48);
          std::__optional_copy_assign_base<WebCore::NotificationOptionsPayload,false>::__optional_copy_assign_base[abi:sn180100](a1 + 160, a3 + 64);
          char v9 = *(unsigned char *)(a3 + 128);
          *(unsigned char *)(a1 + 232) = 1;
        }
        *(unsigned char *)(a1 + 224) = v9;
        WebKit::WebPushMessage::notificationPayloadToCoreData((WebKit::WebPushMessage *)(a1 + 24), v8, (uint64_t)v20);
        uint64_t v14 = WebKit::WebsiteDataStore::showPersistentNotification(v4, 0, v20);
        WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v20, v15);
        if (*(unsigned char *)(a1 + 232))
        {
          if (!*(unsigned char *)(a1 + 152))
          {
LABEL_16:
            uint64_t v18 = *(void *)(a1 + 240);
            *(void *)(a1 + 2++*(_DWORD *)(this + 40) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v14);
            return (*(uint64_t (**)(uint64_t))(*(void *)v18 + 8))(v18);
          }
          uint64_t v17 = *((void *)v4 + 48);
          WebCore::SecurityOriginData::fromURL((uint64_t *)v20, (WebCore::SecurityOriginData *)(a1 + 56), v16);
          if (*(unsigned char *)(a1 + 232) && *(unsigned char *)(a1 + 152))
          {
            (*(void (**)(uint64_t, WTF::StringImpl **, void, uint64_t))(*(void *)v17 + 80))(v17, v20, *(void *)(a1 + 144), 1);
            if (v21 != -1) {
              ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v21])(&v19, v20);
            }
            goto LABEL_16;
          }
        }
      }
      else
      {
        __break(0xC471u);
      }
      __break(1u);
    }
  }
  uint64_t v10 = *(void *)(a1 + 240);
  *(void *)(a1 + 2++*(_DWORD *)(this + 40) = 0;
  (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
  int v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);

  return v11(v10);
}

uint64_t WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 240);
  *(void *)(a1 + 2++*(_DWORD *)(this + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](a1 + 96, a2);
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  if (*(unsigned char *)(a1 + 40))
  {
    char v9 = *(WTF **)(a1 + 24);
    if (v9)
    {
      *(void *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v9, v4);
    }
  }
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  return a1;
}

uint64_t WebKit::WebsiteDataStore::openerTypeForDomain(WebKit::WebsiteDataStore *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2 = *((void *)this + 57);
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    uint64_t v4 = (uint64_t *)((char *)this + 456);
    uint64_t v5 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 57, a2);
    uint64_t v6 = *v4;
    if (*v4) {
      v6 += 16 * *(unsigned int *)(v6 - 4);
    }
    if (v6 == v5) {
      return 0;
    }
    else {
      return *(unsigned __int8 *)(v5 + 8);
    }
  }
  else
  {
    {
      uint64_t v7 = (const WebCore::RegistrableDomain *)a2;
      WebKit::RestrictedOpenerDomainsController::RestrictedOpenerDomainsController((WebKit::RestrictedOpenerDomainsController *)&WebKit::RestrictedOpenerDomainsController::shared(void)::sharedInstance);
      a2 = (WTF::ASCIICaseInsensitiveHash **)v7;
    }
    return WebKit::RestrictedOpenerDomainsController::lookup((WebKit::RestrictedOpenerDomainsController *)&WebKit::RestrictedOpenerDomainsController::shared(void)::sharedInstance, a2);
  }
}

uint64_t WebKit::WebsiteDataStore::setRestrictedOpenerTypeForDomainForTesting(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, char a3)
{
  char v7 = a3;
  uint64_t result = (uint64_t)*a2;
  if (*a2 && *(_DWORD *)(result + 4))
  {
    uint64_t result = MEMORY[0x19972E990]();
    if ((result & 1) == 0) {
      return WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::inlineSet<WebCore::RegistrableDomain const&,WebKit::RestrictedOpenerType&>((uint64_t *)(a1 + 456), a2, &v7, (uint64_t)&v6);
    }
  }
  return result;
}

WebKit::WebsiteDataStoreConfiguration *WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration(WebKit::WebsiteDataStoreConfiguration *this, const WTF::UUID *a2)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9E5B78;
  *((_WORD *)this + 8) = 513;
  *((_OWORD *)this + 2) = *(_OWORD *)a2;
  WebKit::WebsiteDataStore::defaultWebsiteDataStoreDirectory(a2, v4);
  WebKit::WebsiteDataStore::defaultWebsiteDataStoreDirectory(a2, v5);
  uint64_t v6 = (WebKit *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((void *)this + 8) = v13;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 27) = 1048576000;
  isFullWebBrowserOrRunningTest = (WebKit *)WebKit::isFullWebBrowserOrRunningTest(v6);
  uint64_t v8 = 0x3FC3333333333333;
  if (isFullWebBrowserOrRunningTest) {
    uint64_t v8 = 0x3FE3333333333333;
  }
  *((void *)this + 28) = v8;
  *((void *)this + 29) = 1;
  int v9 = WebKit::isFullWebBrowserOrRunningTest(isFullWebBrowserOrRunningTest);
  uint64_t v10 = 0x3FC999999999999ALL;
  if (v9) {
    uint64_t v10 = 0x3FE999999999999ALL;
  }
  *((void *)this + 30) = v10;
  *(_OWORD *)((char *)this + 248) = xmmword_1994F76C0;
  *((unsigned char *)this + 264) = 1;
  *((unsigned char *)this + 272) = 0;
  *((unsigned char *)this + 280) = 0;
  *((_WORD *)this + 144) = 256;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((void *)this + 41) = 0;
  WTF::URL::invalidate((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 328));
  *((void *)this + 46) = 0;
  WTF::URL::invalidate((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 368));
  *((void *)this + 51) = 0x10001010000;
  *((unsigned char *)this + 4++*(_DWORD *)(this + 16) = 1;
  *((unsigned char *)this + 424) = 0;
  *(_DWORD *)((char *)this + 417) = 0;
  *((_DWORD *)this + 107) = 1;
  *((void *)this + 54) = 0;
  WTF::URL::invalidate((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 432));
  *((_DWORD *)this + 118) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((void *)this + 60) = v13;
  *(_OWORD *)((char *)this + 514) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  WebKit::WebsiteDataStoreConfiguration::initializePaths(this, v11);
  return this;
}

WebKit::WebsiteDataStoreConfiguration *WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration(WebKit::WebsiteDataStoreConfiguration *this, const WTF::String *a2, const WTF::String *a3)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9E5B78;
  *((_WORD *)this + 8) = 513;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  uint64_t v6 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v6 += 2;
  }
  *((void *)this + 6) = v6;
  char v7 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v7 += 2;
  }
  *((void *)this + 7) = v7;
  uint64_t v8 = (WebKit *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((void *)this + 8) = v15;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 27) = 1048576000;
  isFullWebBrowserOrRunningTest = (WebKit *)WebKit::isFullWebBrowserOrRunningTest(v8);
  uint64_t v10 = 0x3FC3333333333333;
  if (isFullWebBrowserOrRunningTest) {
    uint64_t v10 = 0x3FE3333333333333;
  }
  *((void *)this + 28) = v10;
  *((void *)this + 29) = 1;
  int v11 = WebKit::isFullWebBrowserOrRunningTest(isFullWebBrowserOrRunningTest);
  uint64_t v12 = 0x3FC999999999999ALL;
  if (v11) {
    uint64_t v12 = 0x3FE999999999999ALL;
  }
  *((void *)this + 30) = v12;
  *(_OWORD *)((char *)this + 248) = xmmword_1994F76C0;
  *((unsigned char *)this + 264) = 1;
  *((unsigned char *)this + 272) = 0;
  *((unsigned char *)this + 280) = 0;
  *((_WORD *)this + 144) = 256;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((void *)this + 41) = 0;
  WTF::URL::invalidate((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 328));
  *((void *)this + 46) = 0;
  WTF::URL::invalidate((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 368));
  *((void *)this + 51) = 0x10001010000;
  *((unsigned char *)this + 4++*(_DWORD *)(this + 16) = 1;
  *((unsigned char *)this + 424) = 0;
  *(_DWORD *)((char *)this + 417) = 0;
  *((_DWORD *)this + 107) = 1;
  *((void *)this + 54) = 0;
  WTF::URL::invalidate((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 432));
  *((_DWORD *)this + 118) = 0;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_WORD *)this + 264) = 0;
  WebKit::WebsiteDataStoreConfiguration::initializePaths(this, v13);
  return this;
}

void WebKit::U2fAuthenticator::~U2fAuthenticator(WebKit::U2fAuthenticator *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 102);
  if (v3)
  {
    *((void *)this + 102) = 0;
    *((_DWORD *)this + 206) = 0;
    WTF::fastFree(v3, a2);
  }
  *((void *)this + 98) = &unk_1EE9B3390;
  uint64_t v4 = *((void *)this + 101);
  *((void *)this + 101) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::U2fAuthenticator *)((char *)this + 784));

  WebKit::FidoAuthenticator::~FidoAuthenticator(this);
}

{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  uint64_t vars8;

  uint64_t v3 = (WTF *)*((void *)this + 102);
  if (v3)
  {
    *((void *)this + 102) = 0;
    *((_DWORD *)this + 206) = 0;
    WTF::fastFree(v3, a2);
  }
  *((void *)this + 98) = &unk_1EE9B3390;
  uint64_t v4 = *((void *)this + 101);
  *((void *)this + 101) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::U2fAuthenticator *)((char *)this + 784));
  WebKit::FidoAuthenticator::~FidoAuthenticator(this);

  WTF::fastFree(v5, v6);
}

uint64_t API::ObjectImpl<(API::Object::Type)124>::type()
{
  return 124;
}

uint64_t API::ObjectImpl<(API::Object::Type)125>::type()
{
  return 125;
}

uint64_t WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)uint64_t v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  char v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    for (uint64_t i = a1; ; i += 40)
    {
      uint64_t v5 = *(unsigned int *)(i + 24);
      if (v5) {
        break;
      }
      if (*(void *)i != -1) {
        goto LABEL_5;
      }
LABEL_6:
      if (!--v3) {
        return WTF::fastFree((WTF *)(a1 - 16), a2);
      }
    }
    if (v5 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::fastFree((WTF *)(a1 - 16), a2);
    }
LABEL_5:
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v5])(&v7, i);
    *(_DWORD *)(i + 24) = -1;
    goto LABEL_6;
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14NetworkProcess38SetServiceWorkerFetchTimeoutForTestingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14NetworkProcess40ResetServiceWorkerFetchTimeoutForTestingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

uint64_t std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>::pair[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (WTF *)*(unsigned int *)(a2 + 12);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v4;
  if (v4)
  {
    uint64_t v5 = (void *)WTF::fastMalloc(v4);
    *(_DWORD *)(a1 + 8) = v4;
    *(void *)a1 = v5;
    memcpy(v5, *(const void **)a2, *(unsigned int *)(a2 + 12));
  }
  *(_OWORD *)(a1 + ++*(_DWORD *)(this + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::forwardAppBoundDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator() const(WebKit::WebsiteDataStore*,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E5BE0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::forwardAppBoundDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator() const(WebKit::WebsiteDataStore*,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E5BE0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::forwardAppBoundDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator() const(WebKit::WebsiteDataStore*,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&)::{lambda(void)#2},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E5C08;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::forwardAppBoundDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator() const(WebKit::WebsiteDataStore*,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E5C08;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator() const(WebKit::WebsiteDataStore*,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E5C30;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator() const(WebKit::WebsiteDataStore*,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E5C30;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator() const(WebKit::WebsiteDataStore*,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&)::{lambda(void)#2},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E5C58;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator() const(WebKit::WebsiteDataStore*,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E5C58;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void std::__optional_storage_base<WebCore::NotificationOptionsPayload,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::NotificationOptionsPayload,false>>(WebCore::ApplePayInstallmentItem *this, uint64_t a2)
{
  if (*((unsigned __int8 *)this + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*((unsigned char *)this + 56))
    {
      *(unsigned char *)this = *(unsigned char *)a2;
      WTF::String::operator=((uint64_t *)this + 1, (uint64_t *)(a2 + 8));
      WTF::String::operator=((uint64_t *)this + 2, (uint64_t *)(a2 + 16));
      WTF::String::operator=((uint64_t *)this + 3, (uint64_t *)(a2 + 24));
      WTF::String::operator=((uint64_t *)this + 4, (uint64_t *)(a2 + 32));
      WTF::String::operator=((uint64_t *)this + 5, (uint64_t *)(a2 + 40));
      *((_WORD *)this + 24) = *(_WORD *)(a2 + 48);
    }
  }
  else if (*((unsigned char *)this + 56))
  {
    WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(this, (WTF::StringImpl *)a2);
    *((unsigned char *)this + 56) = 0;
  }
  else
  {
    *(unsigned char *)this = *(unsigned char *)a2;
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *((void *)this + 1) = v4;
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a2 + ++*(_DWORD *)(this + 16) = 0;
    *((void *)this + 2) = v5;
    uint64_t v6 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    *((void *)this + 3) = v6;
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *((void *)this + 4) = v7;
    uint64_t v8 = *(void *)(a2 + 40);
    *(void *)(a2 + ++*(_DWORD *)(this + 40) = 0;
    *((void *)this + 5) = v8;
    *((_WORD *)this + 24) = *(_WORD *)(a2 + 48);
    *((unsigned char *)this + 56) = 1;
  }
}

void *WTF::Detail::CallableWrapper<WebKit::FidoService::getInfo(std::unique_ptr<WebKit::CtapDriver> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E5C80;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FidoService::getInfo(std::unique_ptr<WebKit::CtapDriver> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E5C80;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::FidoService::getInfo(std::unique_ptr<WebKit::CtapDriver> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = result[1];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = result[2];
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          uint64_t result = (uint64_t *)(v3 + 24);
          uint64_t v6 = *(void *)(v3 + 24);
          if (v6)
          {
            unsigned int v8 = *(_DWORD *)(v6 - 8);
            unint64_t v9 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
            unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
            unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
            uint64_t v12 = v8 & ((v11 >> 31) ^ v11);
            uint64_t v13 = *(void *)(v6 + 8 * v12);
            if (v13 != v5)
            {
              int v14 = 1;
              while (v13)
              {
                uint64_t v12 = (v12 + v14) & v8;
                uint64_t v13 = *(void *)(v6 + 8 * v12);
                ++v14;
                if (v13 == v5) {
                  goto LABEL_12;
                }
              }
              uint64_t v12 = *(unsigned int *)(v6 - 4);
            }
LABEL_12:
            if (v12 != *(_DWORD *)(v6 - 4))
            {
              uint64_t v15 = (_DWORD **)(v6 + 8 * v12);
              uint64_t v16 = *v15;
              *uint64_t v15 = 0;
              uint64_t v55 = v16;
              uint64_t v17 = *result;
              if (!*result || (v17 += 8 * *(unsigned int *)(v17 - 4), (_DWORD **)v17 != v15))
              {
                if ((_DWORD **)v17 != v15)
                {
                  *uint64_t v15 = (_DWORD *)-1;
                  ++*(_DWORD *)(*result - 16);
                  uint64_t v18 = *result;
                  int v19 = *result ? *(_DWORD *)(v18 - 12) - 1 : -1;
                  *(_DWORD *)(v18 - 12) = v19;
                  uint64_t v20 = *result;
                  if (*result)
                  {
                    unsigned int v21 = 6 * *(_DWORD *)(v20 - 12);
                    unsigned int v22 = *(_DWORD *)(v20 - 4);
                    if (v21 < v22 && v22 >= 9) {
                      uint64_t result = WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::rehash(result, v22 >> 1, 0);
                    }
                  }
                }
              }
              if (v16)
              {
                uint64_t v24 = *(void *)(v3 + 16);
                if (!v24 || !*(void *)(v24 + 8) || !*(_DWORD *)(a2 + 12))
                {
                  uint64_t v55 = 0;
                  return (uint64_t *)(*(uint64_t (**)(_DWORD *))(*(void *)v16 + 8))(v16);
                }
                fido::readCTAPGetInfoResponse();
                if (!v54) {
                  goto LABEL_41;
                }
                char v25 = v44[0];
                if (!v44[0]) {
                  goto LABEL_41;
                }
                uint64_t v26 = v44;
                do
                {
                  uint64_t v27 = v25;
                  uint64_t v28 = v26;
                  int v29 = *((_DWORD *)v25 + 7);
                  int v30 = (WTF **)((char *)v25 + 8);
                  if (v29 >= 0)
                  {
                    int v30 = (WTF **)v27;
                    uint64_t v26 = (WTF **)v27;
                  }
                  char v25 = *v30;
                }
                while (v25);
                if (v26 != v44 && (v29 >= 0 ? (uint64_t v31 = (int *)v27) : (uint64_t v31 = (int *)v28), v31[7] <= 0))
                {
                  uint64_t v39 = *(void *)(v3 + 16);
                  if (v39) {
                    uint64_t v33 = *(void *)(v39 + 8);
                  }
                  else {
                    uint64_t v33 = 0;
                  }
                  uint64_t v41 = WTF::fastMalloc((WTF *)0x3D0);
                  uint64_t v35 = WebKit::CtapAuthenticator::CtapAuthenticator(v41, (uint64_t *)&v55, &v43);
                }
                else
                {
LABEL_41:
                  void v16[4] = 1;
                  uint64_t v32 = *(void *)(v3 + 16);
                  if (v32) {
                    uint64_t v33 = *(void *)(v32 + 8);
                  }
                  else {
                    uint64_t v33 = 0;
                  }
                  uint64_t v34 = WTF::fastMalloc((WTF *)0x358);
                  uint64_t v35 = WebKit::U2fAuthenticator::U2fAuthenticator(v34, (uint64_t *)&v55);
                }
                uint64_t v42 = (uint64_t *)v35;
                (*(void (**)(uint64_t, uint64_t **))(*(void *)v33 + 16))(v33, &v42);
                uint64_t result = v42;
                uint64_t v42 = 0;
                if (result)
                {
                  if (*((_DWORD *)result + 2) == 1) {
                    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
                  }
                  else {
                    --*((_DWORD *)result + 2);
                  }
                }
                if (v54)
                {
                  if (v53)
                  {
                    unsigned int v37 = v51;
                    if (v51)
                    {
                      uint64_t v51 = 0;
                      int v52 = 0;
                      WTF::fastFree(v37, v36);
                    }
                  }
                  if (v50[16]) {
                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v50, v36);
                  }
                  if (v49)
                  {
                    char v40 = v47;
                    if (v47)
                    {
                      uint64_t v47 = 0;
                      int v48 = 0;
                      WTF::fastFree(v40, v36);
                    }
                  }
                  char v38 = v45;
                  if (v45)
                  {
                    uint64_t v45 = 0;
                    int v46 = 0;
                    WTF::fastFree(v38, v36);
                  }
                  uint64_t result = (uint64_t *)std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy((uint64_t)&v43, v44[0]);
                }
                uint64_t v16 = v55;
                uint64_t v55 = 0;
                if (v16) {
                  return (uint64_t *)(*(uint64_t (**)(_DWORD *))(*(void *)v16 + 8))(v16);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (uint64_t result = WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::expand(result, 0), (v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = *a2;
  unint64_t v10 = ~(*a2 << 32) + *a2;
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  int v14 = (uint64_t *)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if (v7) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = *(unsigned int *)(v6 - 4);
        }
        char v25 = 0;
        uint64_t v26 = v6 + 8 * v20;
        goto LABEL_31;
      }
      if (v15 == -1) {
        uint64_t v16 = v14;
      }
      unsigned int v13 = (v13 + v17) & v8;
      int v14 = (uint64_t *)(v6 + 8 * v13);
      uint64_t v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      uint64_t *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      uint64_t v9 = *a2;
      int v14 = v16;
    }
  }
  *a2 = 0;
  uint64_t result = (uint64_t *)*v14;
  *int v14 = v9;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  uint64_t v18 = *v4;
  if (*v4) {
    int v19 = *(_DWORD *)(v18 - 12) + 1;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(v18 - 12) = v19;
  uint64_t v21 = *v4;
  if (*v4) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_24:
      uint64_t result = WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::expand(v4, v14);
      int v14 = result;
      uint64_t v21 = *v4;
      if (*v4) {
        unint64_t v24 = *(unsigned int *)(v21 - 4);
      }
      else {
        unint64_t v24 = 0;
      }
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_24;
  }
  uint64_t v26 = v21 + 8 * v24;
  char v25 = 1;
LABEL_31:
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v26;
  *(unsigned char *)(a3 + ++*(_DWORD *)(this + 16) = v25;
  return result;
}

void *WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unsigned int v13 = (uint64_t *)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 8 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          unint64_t v24 = (void *)(v15 + 8 * v22);
          void *v24 = 0;
          uint64_t v25 = *v13;
          uint64_t *v13 = 0;
          void *v24 = v25;
          uint64_t v26 = *v13;
          uint64_t *v13 = 0;
          if (v26) {
            (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
          }
          if (v13 == a3) {
            unint64_t v12 = v24;
          }
        }
        else
        {
          uint64_t *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::U2fAuthenticator::*&)(void),WebKit::U2fAuthenticator*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::U2fAuthenticator::issueCommand(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::U2fAuthenticator::CommandType)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E5CD0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::U2fAuthenticator::issueCommand(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::U2fAuthenticator::CommandType)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E5CD0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::U2fAuthenticator::issueCommand(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::U2fAuthenticator::CommandType)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&>::call(uint64_t result)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(result + 8);
  if (!v1) {
    return result;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return result;
  }
  int v3 = *(unsigned __int8 *)(result + 16);
  apdu::ApduResponse::createFromMessage();
  int v4 = qword_1EB3587D0;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT);
  if (!v62)
  {
    if (result)
    {
      WebCore::toString();
      WTF::String::utf8();
      if (v63) {
        int v8 = (char *)v63 + 16;
      }
      else {
        int v8 = 0;
      }
      WTF::base64EncodeToString();
      WTF::String::utf8();
      if (v59) {
        uint64_t v9 = (char *)v59 + 16;
      }
      else {
        uint64_t v9 = 0;
      }
      *(_DWORD *)long long buf = 134218498;
      *(void *)&uint8_t buf[4] = v2;
      *(_WORD *)&uint8_t buf[12] = 2080;
      *(void *)&buf[14] = v8;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v67 = v9;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::responseReceived: Failed to parse response: %s", buf, 0x20u);
      if (v59)
      {
        if (*(_DWORD *)v59 == 1) {
          WTF::fastFree(v59, v10);
        }
        else {
          --*(_DWORD *)v59;
        }
      }
      if (v58)
      {
        if (*(_DWORD *)v58 == 2) {
          WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v10);
        }
        else {
          *(_DWORD *)v58 -= 2;
        }
      }
      uint64_t v32 = v63;
      int v63 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1) {
          WTF::fastFree(v32, v10);
        }
        else {
          --*(_DWORD *)v32;
        }
      }
      uint64_t v33 = v65;
      int v65 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2) {
          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v10);
        }
        else {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    goto LABEL_75;
  }
  if (result)
  {
    WebCore::toString();
    WTF::String::utf8();
    if (v63) {
      uint64_t v6 = (char *)v63 + 16;
    }
    else {
      uint64_t v6 = 0;
    }
    *(_DWORD *)long long buf = 134218498;
    *(void *)&uint8_t buf[4] = v2;
    *(_WORD *)&uint8_t buf[12] = 2080;
    *(void *)&buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 1024;
    LODWORD(v67) = v3;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::responseReceived: Got response for command type: %hhu", buf, 0x1Cu);
    int v7 = v63;
    int v63 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1) {
        WTF::fastFree(v7, v5);
      }
      else {
        --*(_DWORD *)v7;
      }
    }
    uint64_t result = (uint64_t)v65;
    int v65 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  switch(v3)
  {
    case 0:
      uint64_t v11 = qword_1EB3587D0;
      if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::toString();
        WTF::String::utf8();
        if (v63) {
          unint64_t v12 = (char *)v63 + 16;
        }
        else {
          unint64_t v12 = 0;
        }
        *(_DWORD *)long long buf = 134218498;
        *(void *)&uint8_t buf[4] = v2;
        *(_WORD *)&uint8_t buf[12] = 2080;
        *(void *)&buf[14] = v12;
        *(_WORD *)&unsigned char buf[22] = 1024;
        LODWORD(v67) = v61;
        _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::continueRegisterCommandAfterResponseReceived: Status %hu", buf, 0x1Cu);
        uint64_t v14 = v63;
        int v63 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1) {
            WTF::fastFree(v14, v13);
          }
          else {
            --*(_DWORD *)v14;
          }
        }
        uint64_t v41 = v65;
        int v65 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2) {
            WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v13);
          }
          else {
            *(_DWORD *)v41 -= 2;
          }
        }
      }
      if (v61 == 27013) {
        goto LABEL_141;
      }
      if (v61 != 36864)
      {
        LOBYTE(v63) = 24;
        *(void *)long long buf = "Unknown internal error. Error code: ";
        *(void *)&uint8_t buf[8] = 37;
        LODWORD(v65) = v61;
        WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t *)buf, (unsigned int *)&v65, &v64);
        uint64_t v43 = v64;
        if (v64)
        {
LABEL_143:
          buf[0] = (_BYTE)v63;
          int v64 = 0;
          *(void *)&uint8_t buf[8] = v43;
          int v51 = 1;
          *(_DWORD *)&uint8_t buf[16] = 1;
          uint64_t v52 = *(void *)(v2 + 24);
          if (!v52
            || (uint64_t v53 = *(void *)(v52 + 8)) == 0
            || ((*(void (**)(uint64_t, unsigned char *))(*(void *)v53 + 16))(v53, buf),
                int v51 = *(_DWORD *)&buf[16],
                *(_DWORD *)&buf[16] != -1))
          {
            ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9E5B90[v51])(&v65, buf);
          }
          *(_DWORD *)&uint8_t buf[16] = -1;
          uint64_t result = (uint64_t)v64;
          int v64 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v5);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
          goto LABEL_162;
        }
LABEL_181:
        __break(0xC471u);
        JUMPOUT(0x198FEA800);
      }
      if (*(_DWORD *)(v2 + 352))
      {
LABEL_180:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_181;
      }
      if (!*(unsigned char *)(v2 + 80)) {
LABEL_179:
      }
        __break(1u);
      LOBYTE(v65) = *(unsigned char *)(*(void *)(v2 + 776) + 20);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((unsigned int *)buf, (uint64_t)&v65, 1);
      fido::readU2fRegisterResponse();
      uint64_t v47 = *(WTF **)buf;
      if (*(void *)buf)
      {
        *(void *)long long buf = 0;
        *(_DWORD *)&uint8_t buf[8] = 0;
        WTF::fastFree(v47, v46);
      }
      int v48 = v63;
      if (v63)
      {
        int v63 = 0;
        *(void *)long long buf = v48;
        *(_DWORD *)&uint8_t buf[16] = 0;
        uint64_t v49 = *(void *)(v2 + 24);
        if (!v49)
        {
LABEL_160:
          ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9E5B90[v49])(&v65, buf);
          goto LABEL_161;
        }
        uint64_t v50 = *(void *)(v49 + 8);
        if (!v50)
        {
          LODWORD(v49) = 0;
          goto LABEL_160;
        }
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        buf[0] = 24;
        LODWORD(v49) = 1;
        *(_DWORD *)&uint8_t buf[16] = 1;
        uint64_t v55 = *(void *)(v2 + 24);
        if (!v55) {
          goto LABEL_160;
        }
        uint64_t v50 = *(void *)(v55 + 8);
        if (!v50) {
          goto LABEL_160;
        }
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v50 + 16))(v50, buf);
      LODWORD(v49) = *(_DWORD *)&buf[16];
      if (*(_DWORD *)&buf[16] != -1) {
        goto LABEL_160;
      }
LABEL_161:
      uint64_t result = (uint64_t)v63;
      int v63 = 0;
LABEL_162:
      if (v62)
      {
        uint64_t result = (uint64_t)v60;
        if (v60) {
          return WTF::fastFree(v60, v5);
        }
      }
      return result;
    case 1:
      uint64_t v27 = qword_1EB3587D0;
      uint64_t v28 = (WTF::StringImpl *)os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT);
      if (v28)
      {
        WebCore::toString();
        WTF::String::utf8();
        if (v63) {
          int v29 = (char *)v63 + 16;
        }
        else {
          int v29 = 0;
        }
        *(_DWORD *)long long buf = 134218498;
        *(void *)&uint8_t buf[4] = v2;
        *(_WORD *)&uint8_t buf[12] = 2080;
        *(void *)&buf[14] = v29;
        *(_WORD *)&unsigned char buf[22] = 1024;
        LODWORD(v67) = v61;
        _os_log_impl(&dword_1985F2000, v27, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::continueCheckOnlyCommandAfterResponseReceived: Status %hu", buf, 0x1Cu);
        uint64_t v31 = v63;
        int v63 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 1) {
            WTF::fastFree(v31, v30);
          }
          else {
            --*(_DWORD *)v31;
          }
        }
        uint64_t v28 = v65;
        int v65 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2) {
            uint64_t v28 = (WTF::StringImpl *)WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v30);
          }
          else {
            *(_DWORD *)v28 -= 2;
          }
        }
      }
      if (v61 == 36864 || v61 == 27013)
      {
        fido::constructBogusU2fRegistrationCommand((uint64_t *)buf, v28);
        WebKit::U2fAuthenticator::issueNewCommand(v2, (uint64_t *)buf, 2);
        uint64_t result = *(void *)buf;
        if (*(void *)buf)
        {
          *(void *)long long buf = 0;
          *(_DWORD *)&uint8_t buf[8] = 0;
          uint64_t result = WTF::fastFree((WTF *)result, v5);
        }
      }
      else
      {
        unint64_t v54 = *(void *)(v2 + 840);
        *(void *)(v2 + 8++*(_DWORD *)(this + 40) = v54 + 1;
        uint64_t result = (uint64_t)WebKit::U2fAuthenticator::checkExcludeList((WebKit::U2fAuthenticator *)v2, v54);
      }
      goto LABEL_162;
    case 2:
      unint64_t v19 = qword_1EB3587D0;
      if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::toString();
        WTF::String::utf8();
        if (v63) {
          unsigned int v20 = (char *)v63 + 16;
        }
        else {
          unsigned int v20 = 0;
        }
        *(_DWORD *)long long buf = 134218498;
        *(void *)&uint8_t buf[4] = v2;
        *(_WORD *)&uint8_t buf[12] = 2080;
        *(void *)&buf[14] = v20;
        *(_WORD *)&unsigned char buf[22] = 1024;
        LODWORD(v67) = v61;
        _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::continueBogusCommandExcludeCredentialsMatchAfterResponseReceived: Status %hu", buf, 0x1Cu);
        unsigned int v22 = v63;
        int v63 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 1) {
            WTF::fastFree(v22, v21);
          }
          else {
            --*(_DWORD *)v22;
          }
        }
        uint64_t v39 = v65;
        int v65 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2) {
            WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v21);
          }
          else {
            *(_DWORD *)v39 -= 2;
          }
        }
      }
      if (v61 == 27013) {
        goto LABEL_141;
      }
      if (v61 == 36864)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        char v34 = 8;
        goto LABEL_76;
      }
      LOBYTE(v63) = 24;
      *(void *)long long buf = "Unknown internal error. Error code: ";
      *(void *)&uint8_t buf[8] = 37;
      LODWORD(v65) = v61;
      WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t *)buf, (unsigned int *)&v65, &v64);
      uint64_t v43 = v64;
      if (!v64)
      {
        __break(0xC471u);
        JUMPOUT(0x198FEA33CLL);
      }
      goto LABEL_143;
    case 3:
      uint64_t v23 = qword_1EB3587D0;
      if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::toString();
        WTF::String::utf8();
        if (v63) {
          unint64_t v24 = (char *)v63 + 16;
        }
        else {
          unint64_t v24 = 0;
        }
        *(_DWORD *)long long buf = 134218498;
        *(void *)&uint8_t buf[4] = v2;
        *(_WORD *)&uint8_t buf[12] = 2080;
        *(void *)&buf[14] = v24;
        *(_WORD *)&unsigned char buf[22] = 1024;
        LODWORD(v67) = v61;
        _os_log_impl(&dword_1985F2000, v23, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::continueBogusCommandNoCredentialsAfterResponseReceived: Status %hu", buf, 0x1Cu);
        uint64_t v26 = v63;
        int v63 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 1) {
            WTF::fastFree(v26, v25);
          }
          else {
            --*(_DWORD *)v26;
          }
        }
        char v40 = v65;
        int v65 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2) {
            WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v25);
          }
          else {
            *(_DWORD *)v40 -= 2;
          }
        }
      }
      if (v61 == 27013) {
        goto LABEL_141;
      }
      if (v61 == 36864)
      {
        uint64_t v44 = *(void *)(v2 + 24);
        if (v44)
        {
          uint64_t v45 = *(void *)(v44 + 8);
          if (v45) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 32))(v45, 1);
          }
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        char v34 = 31;
        goto LABEL_76;
      }
      LOBYTE(v63) = 24;
      *(void *)long long buf = "Unknown internal error. Error code: ";
      *(void *)&uint8_t buf[8] = 37;
      LODWORD(v65) = v61;
      WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t *)buf, (unsigned int *)&v65, &v64);
      uint64_t v43 = v64;
      if (!v64)
      {
        __break(0xC471u);
        JUMPOUT(0x198FEA3F0);
      }
      goto LABEL_143;
    case 4:
      uint64_t v15 = qword_1EB3587D0;
      if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::toString();
        WTF::String::utf8();
        if (v63) {
          int v16 = (char *)v63 + 16;
        }
        else {
          int v16 = 0;
        }
        *(_DWORD *)long long buf = 134218498;
        *(void *)&uint8_t buf[4] = v2;
        *(_WORD *)&uint8_t buf[12] = 2080;
        *(void *)&buf[14] = v16;
        *(_WORD *)&unsigned char buf[22] = 1024;
        LODWORD(v67) = v61;
        _os_log_impl(&dword_1985F2000, v15, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::continueSignCommandAfterResponseReceived: Status %hu", buf, 0x1Cu);
        unint64_t v18 = v63;
        int v63 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 1) {
            WTF::fastFree(v18, v17);
          }
          else {
            --*(_DWORD *)v18;
          }
        }
        char v38 = v65;
        int v65 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2) {
            WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v17);
          }
          else {
            *(_DWORD *)v38 -= 2;
          }
        }
      }
      if (*(_DWORD *)(v2 + 352) != 1) {
        goto LABEL_180;
      }
      switch(v61)
      {
        case 0x6985u:
LABEL_141:
          uint64_t result = WTF::RunLoop::TimerBase::start();
          goto LABEL_162;
        case 0x6A80u:
          if (*(unsigned char *)(v2 + 256) && *(void *)(v2 + 112))
          {
            if (!*(unsigned char *)(v2 + 848))
            {
              *(unsigned char *)(v2 + 848) = 1;
              unint64_t v42 = *(void *)(v2 + 840) - 1;
              goto LABEL_114;
            }
            *(unsigned char *)(v2 + 848) = 0;
          }
          break;
        case 0x9000u:
          if (*(unsigned char *)(v2 + 848))
          {
            if (!*(unsigned char *)(v2 + 256)) {
              goto LABEL_179;
            }
            if (*(void *)(v2 + 840) - 1 >= (unint64_t)*(unsigned int *)(v2 + 100))
            {
              __break(0xC471u);
              JUMPOUT(0x198FEA808);
            }
          }
          else if (*(void *)(v2 + 840) - 1 >= (unint64_t)*(unsigned int *)(v2 + 100))
          {
            __break(0xC471u);
            JUMPOUT(0x198FEA810);
          }
          fido::readU2fSignResponse();
          uint64_t v56 = *(void *)buf;
          if (*(void *)buf)
          {
            if (*(unsigned char *)(v2 + 848))
            {
              *(_DWORD *)long long buf = 257;
              uint8_t buf[8] = 0;
              char v68 = 0;
              char v69 = 0;
              char v71 = 0;
              WebCore::AuthenticatorResponse::setExtensions();
              if (v71) {
                std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v70);
              }
              if (v68)
              {
                unsigned int v57 = *(WTF::DeferrableRefCountedBase **)&buf[16];
                *(void *)&uint8_t buf[16] = 0;
                if (v57) {
                  WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v57);
                }
              }
            }
            *(void *)long long buf = v56;
            *(_DWORD *)&uint8_t buf[16] = 0;
            uint64_t v35 = *(void *)(v2 + 24);
            if (!v35) {
              goto LABEL_79;
            }
            uint64_t v37 = *(void *)(v35 + 8);
            if (!v37)
            {
              LODWORD(v35) = 0;
LABEL_79:
              uint64_t result = ((uint64_t (*)(WTF **, unsigned char *))off_1EE9E5B90[v35])(&v63, buf);
              goto LABEL_162;
            }
LABEL_78:
            uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v37 + 16))(v37, buf);
            LODWORD(v35) = *(_DWORD *)&buf[16];
            if (*(_DWORD *)&buf[16] == -1) {
              goto LABEL_162;
            }
            goto LABEL_79;
          }
LABEL_75:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          char v34 = 24;
LABEL_76:
          buf[0] = v34;
          LODWORD(v35) = 1;
          *(_DWORD *)&uint8_t buf[16] = 1;
          uint64_t v36 = *(void *)(v2 + 24);
          if (!v36) {
            goto LABEL_79;
          }
          uint64_t v37 = *(void *)(v36 + 8);
          if (!v37) {
            goto LABEL_79;
          }
          goto LABEL_78;
      }
      unint64_t v42 = *(void *)(v2 + 840);
      *(void *)(v2 + 8++*(_DWORD *)(this + 40) = v42 + 1;
LABEL_114:
      uint64_t result = WebKit::U2fAuthenticator::issueSignCommand((WebKit::U2fAuthenticator *)v2, v42);
      goto LABEL_162;
    default:
      goto LABEL_162;
  }
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(a1, v5, a2);
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 48 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = v5;
    while (1)
    {
      uint64_t v14 = v4 + 48 * v11;
      int v15 = *(_DWORD *)(v14 + 24);
      if (v15) {
        break;
      }
      if (*(void *)v14 != -1) {
        goto LABEL_10;
      }
LABEL_25:
      if (++v11 == v13) {
        goto LABEL_30;
      }
    }
    if (v15 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_29;
    }
LABEL_10:
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v4 + 48 * v11));
    if (v17)
    {
      WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 48 * v11 + 32, v16);
      uint64_t v18 = *(unsigned int *)(v14 + 24);
      if (v18 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v18])(&v41, v4 + 48 * v11);
      }
      *(_DWORD *)(v14 + 24) = -1;
    }
    else
    {
      uint64_t v19 = *a1;
      char v40 = v12;
      if (*a1) {
        int v20 = *(_DWORD *)(v19 - 8);
      }
      else {
        int v20 = 0;
      }
      int v44 = -1640531527;
      __int16 v45 = 0;
      char v46 = 0;
      WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v44, v4 + 48 * v11);
      unsigned int v21 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v44);
      int v22 = 0;
      do
      {
        unsigned int v23 = v21 & v20;
        unint64_t v24 = (unsigned int *)(v19 + 48 * (v21 & v20));
        WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v24);
        int v27 = v26;
        unsigned int v21 = ++v22 + v23;
      }
      while (!v27);
      uint64_t v28 = (void *)(v19 + 48 * v23 + 32);
      WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v25);
      uint64_t v29 = v24[6];
      if (v29 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v29])(&v42, v19 + 48 * v23);
      }
      *(unsigned char *)unint64_t v24 = 0;
      v24[6] = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v19 + 48 * v23, v4 + 48 * v11);
      uint64_t v30 = v4 + 48 * v11;
      void *v28 = 0;
      *(void *)(v19 + 48 * v23 + ++*(_DWORD *)(this + 40) = 0;
      uint64_t v31 = *(void *)(v30 + 32);
      v30 += 32;
      *(void *)uint64_t v30 = 0;
      void *v28 = v31;
      int v32 = *(_DWORD *)(v30 + 8);
      *(_DWORD *)(v30 + 8) = 0;
      uint64_t v33 = v19 + 48 * v23;
      *(_DWORD *)(v33 + ++*(_DWORD *)(this + 40) = v32;
      int v34 = *(_DWORD *)(v30 + 12);
      *(_DWORD *)(v30 + 12) = 0;
      *(_DWORD *)(v33 + 44) = v34;
      WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30, v35);
      uint64_t v36 = *(unsigned int *)(v14 + 24);
      if (v36 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v36])(&v43, v4 + 48 * v11);
      }
      *(_DWORD *)(v14 + 24) = -1;
      unint64_t v12 = v40;
      if (v14 == a3) {
        unint64_t v12 = v24;
      }
    }
    goto LABEL_25;
  }
LABEL_29:
  unint64_t v12 = 0;
  uint64_t result = 0;
  if (v4)
  {
LABEL_30:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

unint64_t WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = v2;
      *(void *)unint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = result;
        uint64_t v8 = 8 * v5;
        unint64_t v9 = (unsigned int **)v4;
        do
        {
          unint64_t v10 = *v9;
          char *v9 = 0;
          *(void *)unint64_t v7 = v10;
          uint64_t result = *v9;
          char *v9 = 0;
          if (result) {
            uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
          }
          v7 += 2;
          ++v9;
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebDeviceOrientationAndMotionAccessController::shouldAllowAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,BOOL,WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)> &&)::$_1,void,BOOL>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9E5CF8;
  uint64_t v3 = *(unsigned int *)(a1 + 48);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v3])(&v6, a1 + 24);
  }
  *(_DWORD *)(a1 + 48) = -1;
  uint64_t v4 = *(unsigned int **)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebDeviceOrientationAndMotionAccessController::shouldAllowAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,BOOL,WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)> &&)::$_1,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E5CF8;
  uint64_t v3 = *((unsigned int *)this + 12);
  if (v3 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v3])(&v6, (char *)this + 24);
  }
  *((_DWORD *)this + 12) = -1;
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebDeviceOrientationAndMotionAccessController::shouldAllowAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,BOOL,WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)> &&)::$_1,void,BOOL>::call(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (!v2 || !*(void *)(v2 + 8)) {
    return result;
  }
  LODWORD(v3) = a2;
  uint64_t v44 = *(void *)(result + 8);
  uint64_t v4 = v44 + 8;
  uint64_t v5 = *(void *)(v44 + 8);
  uint64_t v6 = result + 24;
  if (v5
    || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand((uint64_t *)(v44 + 8)),
        (uint64_t v5 = *(void *)v4) != 0))
  {
    unsigned int v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
LABEL_52:
    unsigned int v7 = 0;
  }
  LODWORD(v47[0]) = -1640531527;
  WORD2(v47[0]) = 0;
  BYTE6(v47[0]) = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v47, v6);
  uint64_t v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v47) & v7;
  uint64_t v9 = v5 + 40 * v8;
  WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9);
  if ((v10 & 1) == 0)
  {
    uint64_t v11 = 0;
    int v12 = 1;
    while (1)
    {
      int v13 = *(_DWORD *)(v9 + 24);
      if (v13) {
        break;
      }
      if (*(void *)v9 != -1) {
        goto LABEL_10;
      }
      uint64_t v11 = v9;
LABEL_13:
      uint64_t v8 = (v8 + v12) & v7;
      uint64_t v9 = v5 + 40 * v8;
      WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9);
      ++v12;
      if (v15)
      {
        if (v11)
        {
          *(unsigned char *)(v11 + 32) = 0;
          *(_OWORD *)uint64_t v11 = 0u;
          *(_OWORD *)(v11 + ++*(_DWORD *)(this + 16) = 0u;
          --*(_DWORD *)(*(void *)v4 - 16);
          uint64_t v9 = v11;
        }
        goto LABEL_19;
      }
    }
    if (v13 != 1)
    {
LABEL_51:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_52;
    }
LABEL_10:
    if (WebCore::operator==())
    {
      int v22 = (int)v3;
      *(unsigned char *)(v5 + 40 * v8 + 32) = (_BYTE)v3;
      uint64_t v23 = v44;
      goto LABEL_28;
    }
    goto LABEL_13;
  }
LABEL_19:
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v9, v6);
  int v22 = (int)v3;
  *(unsigned char *)(v9 + 32) = (_BYTE)v3;
  uint64_t v16 = *(void *)v4;
  if (*(void *)v4) {
    int v17 = *(_DWORD *)(v16 - 12) + 1;
  }
  else {
    int v17 = 1;
  }
  uint64_t v23 = v44;
  *(_DWORD *)(v16 - 12) = v17;
  uint64_t v18 = *(void *)v4;
  if (*(void *)v4) {
    int v19 = *(_DWORD *)(v18 - 12);
  }
  else {
    int v19 = 0;
  }
  uint64_t v20 = (*(_DWORD *)(v18 - 16) + v19);
  unint64_t v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (3 * v21 <= 4 * v20) {
LABEL_27:
  }
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand((uint64_t *)v4);
LABEL_28:
  uint64_t v25 = *(void *)(v23 + 16);
  uint64_t v3 = (uint64_t *)(v23 + 16);
  uint64_t v24 = v25;
  if (!v25) {
    goto LABEL_41;
  }
  uint64_t v5 = *(unsigned int *)(v24 - 8);
  LODWORD(v47[0]) = -1640531527;
  WORD2(v47[0]) = 0;
  BYTE6(v47[0]) = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v47, v6);
  unsigned int v26 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v47) & v5;
  uint64_t v4 = v24 + 48 * v26;
  WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v4);
  if (v27)
  {
LABEL_30:
    uint64_t v28 = *v3;
    if (*v3)
    {
      uint64_t v4 = v28 + 48 * *(unsigned int *)(v28 - 4);
LABEL_32:
      v28 += 48 * *(unsigned int *)(v28 - 4);
      goto LABEL_33;
    }
    goto LABEL_41;
  }
  int v36 = 1;
  while (1)
  {
    int v37 = *(_DWORD *)(v4 + 24);
    if (v37) {
      break;
    }
    if (*(void *)v4 != -1) {
      goto LABEL_47;
    }
LABEL_48:
    unsigned int v26 = (v26 + v36) & v5;
    uint64_t v4 = v24 + 48 * v26;
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v4);
    ++v36;
    if (v38) {
      goto LABEL_30;
    }
  }
  if (v37 != 1) {
    goto LABEL_51;
  }
LABEL_47:
  if ((WebCore::operator==() & 1) == 0) {
    goto LABEL_48;
  }
  uint64_t v28 = *v3;
  if (*v3) {
    goto LABEL_32;
  }
LABEL_33:
  if (v28 == v4)
  {
LABEL_41:
    v47[0] = 0;
    __int16 v45 = 0;
    v47[1] = 0;
    unint64_t v46 = 0;
    WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v14);
    return WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v14);
  }
  uint64_t v29 = *(void **)(v4 + 32);
  __int16 v45 = v29;
  unsigned int v30 = *(_DWORD *)(v4 + 40);
  uint64_t v31 = *(unsigned int *)(v4 + 44);
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + ++*(_DWORD *)(this + 40) = 0;
  unint64_t v46 = __PAIR64__(v31, v30);
  uint64_t v32 = *v3;
  if (!*v3 || (v32 += 48 * *(unsigned int *)(v32 - 4), v32 != v4))
  {
    if (v32 != v4)
    {
      uint64_t v33 = *(unsigned int *)(v4 + 24);
      if (v33 != -1) {
        ((void (*)(void *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v33])(v47, v4);
      }
      *(void *)uint64_t v4 = -1;
      *(void *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + ++*(_DWORD *)(this + 16) = 0;
      *(_DWORD *)(v4 + 24) = 0;
      WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 32, v14);
      ++*(_DWORD *)(*v3 - 16);
      uint64_t v34 = *v3;
      if (*v3) {
        int v35 = *(_DWORD *)(v34 - 12) - 1;
      }
      else {
        int v35 = -1;
      }
      *(_DWORD *)(v34 - 12) = v35;
      uint64_t v39 = *v3;
      if (*v3)
      {
        unsigned int v40 = 6 * *(_DWORD *)(v39 - 12);
        unsigned int v41 = *(_DWORD *)(v39 - 4);
        if (v40 < v41 && v41 >= 9) {
          WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v3, v41 >> 1, 0);
        }
      }
    }
  }
  if (v31)
  {
    uint64_t v42 = 8 * v31;
    do
    {
      uint64_t v43 = *v29;
      *v29++ = 0;
      (*(void (**)(uint64_t, void))(*(void *)v43 + 16))(v43, v22 ^ 1u);
      (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
      v42 -= 8;
    }
    while (v42);
  }
  return WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v14);
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 - 4);
    int v3 = *(_DWORD *)(v1 - 12);
    if (v2)
    {
      unsigned int v4 = v2 << (6 * v3 >= (2 * v2));
      goto LABEL_6;
    }
  }
  else
  {
    LODWORD(v2) = 0;
    int v3 = 0;
  }
  unsigned int v4 = 8;
LABEL_6:
  uint64_t result = WTF::fastMalloc((WTF *)(40 * v4 + 16));
  if (v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = result + 16;
    do
    {
      *(unsigned char *)(v8 + 32) = 0;
      *(_OWORD *)uint64_t v8 = 0uLL;
      *(_OWORD *)(v8 + ++*(_DWORD *)(this + 16) = 0uLL;
      v8 += 40;
      --v7;
    }
    while (v7);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v3;
  if (v2)
  {
    uint64_t v9 = 0;
    uint64_t v2 = v2;
    uint64_t v25 = v1;
    uint64_t v26 = v2;
    while (1)
    {
      uint64_t v10 = v1 + 40 * v9;
      int v11 = *(_DWORD *)(v10 + 24);
      if (v11) {
        break;
      }
      if (*(void *)v10 != -1) {
        goto LABEL_13;
      }
LABEL_27:
      if (++v9 == v2) {
        return WTF::fastFree((WTF *)(v1 - 16), v6);
      }
    }
    if (v11 != 1)
    {
      uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_31;
    }
LABEL_13:
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v1 + 40 * v9));
    if (v12)
    {
      uint64_t v13 = *(unsigned int *)(v10 + 24);
      if (v13 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v13])(&v28, v1 + 40 * v9);
      }
      *(_DWORD *)(v10 + 24) = -1;
    }
    else
    {
      uint64_t v14 = *a1;
      if (*a1) {
        int v15 = *(_DWORD *)(v14 - 8);
      }
      else {
        int v15 = 0;
      }
      int v31 = -1640531527;
      __int16 v32 = 0;
      char v33 = 0;
      WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v31, v1 + 40 * v9);
      unsigned int v16 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31);
      int v17 = 0;
      do
      {
        unsigned int v18 = v16 & v15;
        int v19 = (unsigned int *)(v14 + 40 * (v16 & v15));
        WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v19);
        int v21 = v20;
        unsigned int v16 = ++v17 + v18;
      }
      while (!v21);
      uint64_t v22 = v19[6];
      if (v22 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v22])(&v29, v14 + 40 * v18);
      }
      *(unsigned char *)int v19 = 0;
      v19[6] = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v14 + 40 * v18, v10);
      uint64_t v23 = v14 + 40 * v18;
      uint64_t v1 = v25;
      *(unsigned char *)(v23 + 32) = *(unsigned char *)(v25 + 40 * v9 + 32);
      uint64_t v24 = *(unsigned int *)(v10 + 24);
      if (v24 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v24])(&v30, v10);
      }
      *(_DWORD *)(v10 + 24) = -1;
      uint64_t v2 = v26;
    }
    goto LABEL_27;
  }
LABEL_31:
  if (v1) {
    return WTF::fastFree((WTF *)(v1 - 16), v6);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v4 = *(_DWORD *)(v2 - 8);
  int v12 = -1640531527;
  __int16 v13 = 0;
  char v14 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v12, a2);
  unsigned int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v12) & v4;
  uint64_t v6 = (WebCore::SecurityOriginData *)(v2 + 40 * v5);
  WebCore::SecurityOriginData::isNull(v6);
  if (v7)
  {
LABEL_3:
    if (!*a1) {
      return 0;
    }
    return *a1 + 40 * *(unsigned int *)(*a1 - 4);
  }
  int v8 = 1;
  while (1)
  {
    int v9 = *((_DWORD *)v6 + 6);
    if (v9) {
      break;
    }
    if (*(void *)v6 != -1) {
      goto LABEL_9;
    }
LABEL_10:
    unsigned int v5 = (v5 + v8) & v4;
    uint64_t v6 = (WebCore::SecurityOriginData *)(v2 + 40 * v5);
    WebCore::SecurityOriginData::isNull(v6);
    ++v8;
    if (v10) {
      goto LABEL_3;
    }
  }
  if (v9 == 1)
  {
LABEL_9:
    if (WebCore::operator==()) {
      return (uint64_t)v6;
    }
    goto LABEL_10;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  return 0;
}

uint64_t WebKit::WebsiteDataStoreClient::requestStorageSpace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, void, void))(*(void *)v7 + 16))(v7, 0, 0);
  int v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v8(v7);
}

WTF::StringImpl *WebKit::WebsiteDataStoreClient::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 464);
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v7);
  CFTypeRef cf = 0;
  WebKit::AuthenticationDecisionListener::completeChallenge(v2);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  unsigned int v5 = v8;
  int v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebsiteDataStoreClient::openWindowFromServiceWorker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
  unsigned int v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t WebKit::WebsiteDataStoreClient::showNotification(WebKit::WebsiteDataStoreClient *this, const NotificationData *a2)
{
  return 0;
}

void WebKit::WebsiteDataStoreClient::notificationPermissions(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::WebsiteDataStoreClient::hasGetDisplayedNotifications(WebKit::WebsiteDataStoreClient *this)
{
  return 0;
}

uint64_t WebKit::WebsiteDataStoreClient::getDisplayedNotifications(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 16))(v3, v6);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  return WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v4);
}

uint64_t WebKit::WebsiteDataStoreClient::requestBackgroundFetchPermission(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
  unsigned int v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

WTF *WebKit::WebsiteDataStoreClient::webCryptoMasterKey(uint64_t a1, uint64_t *a2)
{
  LOBYTE(v5) = 0;
  char v7 = 0;
  uint64_t v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v2 + 16))(v2, &v5);
  uint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v7)
  {
    uint64_t result = v5;
    if (v5)
    {
      unsigned int v5 = 0;
      int v6 = 0;
      return (WTF *)WTF::fastFree(result, v4);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::~WebsiteDataStore()::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E5DC0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::~WebsiteDataStore()::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E5DC0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::~WebsiteDataStore()::$_0,void>::call(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::resolveDirectoriesAsynchronously(void)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9E5DE8;
  WebKit::WebsiteDataStoreConfiguration::Directories::~Directories((WebKit::WebsiteDataStoreConfiguration::Directories *)(a1 + 3), a2);
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::resolveDirectoriesAsynchronously(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E5E10;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::handleResolvedDirectoriesAsynchronously(WebKit::WebsiteDataStoreConfiguration::Directories const&,BOOL)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E5E38;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unsigned int v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

WTF::WorkQueue *WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(WTF::WorkQueue *result)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (WTF *)*((void *)result + 1);
  if (!v1) {
    return result;
  }
  char v62 = 0;
  uint64_t v63 = 0;
  uint64_t v2 = *((void *)v1 + 3);
  if (!v2)
  {
    unsigned int v7 = 0;
    unsigned int v6 = 0;
    unsigned int v5 = 0;
    goto LABEL_80;
  }
  uint64_t v3 = *(unsigned int *)(v2 - 12);
  if (v3)
  {
    if (v3 >= 0x3333334)
    {
      __break(0xC471u);
      return result;
    }
    int v4 = 80 * v3;
    uint64_t result = (WTF::WorkQueue *)WTF::fastMalloc((WTF *)(80 * v3));
    unsigned int v5 = result;
    unsigned int v6 = (v4 & 0xFFFFFFF0) / 0x50;
    LODWORD(v63) = v6;
    char v62 = result;
    uint64_t v2 = *((void *)v1 + 3);
    if (!v2) {
      goto LABEL_79;
    }
  }
  else
  {
    unsigned int v5 = 0;
    unsigned int v6 = 0;
  }
  if (!*(_DWORD *)(v2 - 12)) {
    goto LABEL_79;
  }
  unsigned int v8 = *(_DWORD *)(v2 - 4);
  uint64_t v9 = v2;
  if (v8)
  {
    uint64_t v10 = 88 * v8;
    uint64_t v9 = v2;
    while ((unint64_t)(*(void *)v9 + 1) <= 1)
    {
      v9 += 88;
      v10 -= 88;
      if (!v10) {
        goto LABEL_79;
      }
    }
  }
  uint64_t v11 = v2 + 88 * v8;
  if (v11 == v9)
  {
LABEL_79:
    unsigned int v7 = 0;
    goto LABEL_80;
  }
  unsigned int v7 = 0;
LABEL_17:
  uint64_t v12 = *((void *)v1 + 1);
  if (v12 == WTF::WorkQueue::main(result))
  {
    int v17 = *(WTF::StringImpl **)(v9 + 8);
    *(void *)(v9 + 8) = 0;
    int v18 = *(_DWORD *)(v9 + 16);
    LODWORD(v65) = v18;
    LOBYTE(v66) = 0;
    char v68 = 0;
    if (*(unsigned char *)(v9 + 40))
    {
      uint64_t v19 = *(void *)(v9 + 24);
      uint64_t v20 = *(void *)(v9 + 32);
      *(void *)(v9 + 32) = 0;
      uint64_t v66 = v19;
      uint64_t v67 = v20;
      char v68 = 1;
    }
    long long v21 = *(_OWORD *)(v9 + 48);
    long long v22 = *(_OWORD *)(v9 + 64);
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    long long v69 = v21;
    long long v70 = v22;
    uint64_t v23 = *(WTF::StringImpl ***)(v9 + 80);
    *(void *)(v9 + 80) = 0;
    char v71 = v23;
    goto LABEL_56;
  }
  WTF::String::isolatedCopy();
  LODWORD(v65) = *(_DWORD *)(v9 + 16);
  LOBYTE(v66) = 0;
  char v68 = 0;
  if (*(unsigned char *)(v9 + 40))
  {
    uint64_t v66 = *(void *)(v9 + 24);
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::HashTable(&v67, (_DWORD **)(v9 + 32));
    char v68 = 1;
  }
  int v15 = (WebCore::SecurityOriginData **)(v9 + 48);
  uint64_t v14 = *(void *)(v9 + 48);
  *(void *)&long long v69 = 0;
  if (v14) {
    unsigned int v16 = *(_DWORD *)(v14 - 12);
  }
  else {
    unsigned int v16 = 0;
  }
  WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::reserveInitialCapacity(&v69, v16);
  while (*v15 && *((_DWORD *)*v15 - 3))
  {
    uint64_t v24 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)(v9 + 48));
    uint64_t v25 = v24;
    uint64_t v26 = *v15;
    if (*v15) {
      uint64_t v26 = (WebCore::SecurityOriginData *)((char *)v26 + 32 * *((unsigned int *)v26 - 1));
    }
    if (v26 == v24)
    {
      long long v75 = 0u;
      long long v76 = 0u;
      v73[0] = 0;
      int v74 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v73, (uint64_t)&v75);
      if (DWORD2(v76) != -1) {
        ((void (*)(unsigned char *, long long *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[DWORD2(v76)])(v72, &v75);
      }
    }
    else
    {
      v73[0] = 0;
      int v74 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v73, (uint64_t)v24);
      if (*v15)
      {
        uint64_t v27 = (uint64_t)*v15 + 32 * *((unsigned int *)*v15 - 1);
        if ((WebCore::SecurityOriginData *)v27 == v25) {
          goto LABEL_51;
        }
      }
      else
      {
        if (!v25) {
          goto LABEL_51;
        }
        uint64_t v27 = 0;
      }
      if ((WebCore::SecurityOriginData *)v27 != v25)
      {
        uint64_t v28 = *((unsigned int *)v25 + 6);
        if (v28 != -1) {
          ((void (*)(long long *, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v28])(&v75, v25);
        }
        *(void *)uint64_t v25 = -1;
        *((void *)v25 + 1) = 0;
        *((_DWORD *)v25 + 4) = 0;
        *((_DWORD *)v25 + 6) = 0;
        ++*((_DWORD *)*v15 - 4);
        char v29 = *v15;
        if (*v15) {
          int v30 = *((_DWORD *)v29 - 3) - 1;
        }
        else {
          int v30 = -1;
        }
        *((_DWORD *)v29 - 3) = v30;
        int v31 = *v15;
        if (*v15)
        {
          unsigned int v32 = 6 * *((_DWORD *)v31 - 3);
          unsigned int v33 = *((_DWORD *)v31 - 1);
          if (v32 < v33 && v33 >= 9) {
            WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash((uint64_t *)(v9 + 48), v33 >> 1, 0);
          }
        }
      }
    }
LABEL_51:
    WebCore::SecurityOriginData::isolatedCopy();
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)&v69, (uint64_t)&v75, (uint64_t)v72);
    if (DWORD2(v76) != -1) {
      ((void (*)(unsigned char *, long long *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[DWORD2(v76)])(v72, &v75);
    }
    DWORD2(v76) = -1;
    if (v74 != -1) {
      ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v74])(v72, v73);
    }
  }
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy((uint64_t *)(v9 + 56), (uint64_t *)&v69 + 1);
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy((uint64_t *)(v9 + 64), (uint64_t *)&v70);
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy((uint64_t *)(v9 + 72), (uint64_t *)&v70 + 1);
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy((uint64_t *)(v9 + 80), (uint64_t *)&v71);
  unsigned int v7 = HIDWORD(v63);
  unsigned int v5 = v62;
  int v17 = v64;
  int v18 = v65;
LABEL_56:
  int v35 = (char *)v5 + 80 * v7;
  int v64 = 0;
  *(void *)int v35 = v17;
  *((_DWORD *)v35 + 2) = v18;
  v35[16] = 0;
  int v36 = v35 + 16;
  v35[32] = 0;
  int v37 = v35 + 32;
  if (v68)
  {
    *int v36 = v66;
    int v38 = (char *)v5 + 80 * v7;
    *((void *)v38 + 3) = 0;
    uint64_t v39 = v67;
    uint64_t v67 = 0;
    *((void *)v38 + 3) = v39;
    unsigned char *v37 = 1;
  }
  unsigned int v40 = (void *)((char *)v5 + 80 * v7);
  v40[5] = 0;
  uint64_t v41 = v69;
  *(void *)&long long v69 = 0;
  v40[5] = v41;
  v40[6] = 0;
  uint64_t v42 = *((void *)&v69 + 1);
  *((void *)&v69 + 1) = 0;
  v40[6] = v42;
  v40[7] = 0;
  uint64_t v43 = v70;
  *(void *)&long long v70 = 0;
  v40[7] = v43;
  v40[8] = 0;
  uint64_t v44 = *((void *)&v70 + 1);
  *((void *)&v70 + 1) = 0;
  v40[8] = v44;
  v40[9] = 0;
  __int16 v45 = v71;
  char v71 = 0;
  v40[9] = v45;
  unsigned int v7 = ++HIDWORD(v63);
  if (v71) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v71, v13);
  }
  if (*((void *)&v70 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v70 + 1), v13);
  }
  if ((void)v70) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v70, v13);
  }
  if (*((void *)&v69 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v69 + 1), v13);
  }
  if ((void)v69) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v69, v13);
  }
  if (v68 && v67) {
    WTF::fastFree((WTF *)(v67 - 16), v13);
  }
  uint64_t result = v64;
  int v64 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::WorkQueue *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  while (1)
  {
    v9 += 88;
    if (v9 == v11) {
      break;
    }
    if ((unint64_t)(*(void *)v9 + 1) > 1)
    {
      if (v9 != v11) {
        goto LABEL_17;
      }
      break;
    }
  }
  unsigned int v5 = v62;
  unsigned int v6 = v63;
LABEL_80:
  uint64_t v46 = *((void *)v1 + 1);
  (*(void (**)(uint64_t))(*(void *)v46 + 48))(v46);
  uint64_t v47 = *((void *)v1 + 2);
  *((void *)v1 + 2) = 0;
  char v62 = 0;
  uint64_t v63 = 0;
  uint64_t v67 = *(void *)(*((void *)v1 + 4) + 24);
  uint64_t v48 = v67;
  uint64_t v49 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v49 = &unk_1EE9E5E88;
  *(void *)(v49 + 8) = v47;
  int v64 = 0;
  uint64_t v65 = 0;
  *(void *)(v49 + ++*(_DWORD *)(this + 16) = v5;
  uint64_t v66 = 0;
  *(_DWORD *)(v49 + 24) = v6;
  *(_DWORD *)(v49 + 28) = v7;
  *(void *)(v49 + 32) = v48;
  *(void *)&long long v75 = v49;
  (*(void (**)(uint64_t, long long *))(*(void *)v46 + 32))(v46, &v75);
  uint64_t v51 = v75;
  *(void *)&long long v75 = 0;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v50);
  uint64_t v52 = v64;
  int v64 = 0;
  if (v52) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v52 + 8))(v52);
  }
  (*(void (**)(uint64_t))(*(void *)v46 + 56))(v46);
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v53);
  uint64_t v55 = *((void *)v1 + 4);
  *((void *)v1 + 4) = 0;
  if (v55) {
    CFRelease(*(CFTypeRef *)(v55 + 8));
  }
  uint64_t v56 = *((void *)v1 + 3);
  if (v56)
  {
    uint64_t v57 = *(unsigned int *)(v56 - 4);
    if (v57)
    {
      uint64_t v58 = (WebKit::WebsiteDataRecord *)(v56 + 8);
      do
      {
        if (*((void *)v58 - 1) != -1)
        {
          WebKit::WebsiteDataRecord::~WebsiteDataRecord(v58, v54);
          uint64_t v59 = (WTF::StringImpl *)*((void *)v58 - 1);
          *((void *)v58 - 1) = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2) {
              WTF::StringImpl::destroy(v59, v54);
            }
            else {
              *(_DWORD *)v59 -= 2;
            }
          }
        }
        uint64_t v58 = (WebKit::WebsiteDataRecord *)((char *)v58 + 88);
        --v57;
      }
      while (v57);
    }
    WTF::fastFree((WTF *)(v56 - 16), v54);
  }
  uint64_t v60 = *((void *)v1 + 2);
  *((void *)v1 + 2) = 0;
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
  }
  uint64_t v61 = *((void *)v1 + 1);
  *((void *)v1 + 1) = 0;
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 56))(v61);
  }
  return (WTF::WorkQueue *)WTF::fastFree(v1, v54);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9E5E88;
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9E5E88;
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  uint64_t v4 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::call(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 1;
  uint64_t v2 = a1[1];
  uint64_t v3 = v4[1];
  a1[2] = 0;
  v10[0] = 0;
  *(void *)&long long buf = v3;
  v10[1] = 0;
  uint64_t v5 = a1[3];
  a1[3] = 0;
  *((void *)&buf + 1) = v5;
  (*(void (**)(uint64_t, long long *))(*(void *)v2 + 16))(v2, &buf);
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v6);
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v7);
  unsigned int v8 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = a1[4];
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v9;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "WebsiteDataStore::fetchDataAndApply finished fetching data for session %llu", (uint8_t *)&buf, 0xCu);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E5EB0;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 16));
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9E5EB0;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 16));
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree((WTF *)a1, v2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = 0;
  *(_OWORD *)uint64_t v23 = 0u;
  long long v24 = 0u;
  uint64_t result = MEMORY[0x1997331D0](&v22, a1 + 8);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  if (v22 && (uint64_t v3 = *(unsigned int *)(v22 - 12), v3))
  {
    if (v3 >= 0x5555556)
    {
      __break(0xC471u);
      return result;
    }
    int v4 = 48 * v3;
    uint64_t v5 = WTF::fastMalloc((WTF *)(48 * v3));
    LODWORD(v21) = (v4 & 0xFFFFFFF0) / 0x30;
    uint64_t v20 = (WTF *)v5;
  }
  else
  {
    uint64_t v5 = 0;
  }
  unsigned int v6 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(&v22);
  unsigned int v8 = v6;
  uint64_t v9 = v7;
  if (v22) {
    uint64_t v10 = (WebCore::SecurityOriginData *)(v22 + 32 * *(unsigned int *)(v22 - 4));
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10 == v6)
  {
    unsigned int v11 = 0;
  }
  else
  {
    uint64_t v19 = v1;
    unsigned int v11 = 0;
    do
    {
      v30[0] = 0;
      int v31 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v30, (uint64_t)v8);
      v27[0] = 0;
      int v28 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v27, (uint64_t)v30);
      LODWORD(v29) = 2;
      *((void *)&v29 + 1) = 0;
      if (v31 != -1) {
        ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v31])(&v26, v30);
      }
      uint64_t v12 = v5 + 48 * v11;
      *(unsigned char *)uint64_t v12 = 0;
      *(_DWORD *)(v12 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v12, (uint64_t)v27);
      *(_OWORD *)(v12 + 32) = v29;
      if (v28 != -1) {
        ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v28])(v30, v27);
      }
      while (1)
      {
        unsigned int v8 = (WebCore::SecurityOriginData *)((char *)v8 + 32);
        if (v8 == v9) {
          break;
        }
        if (!WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v8)) {
          goto LABEL_18;
        }
      }
      unsigned int v8 = v9;
LABEL_18:
      ++v11;
    }
    while (v8 != v10);
    __int16 v13 = v23[0];
    if (HIDWORD(v23[1]))
    {
      uint64_t v14 = 48 * HIDWORD(v23[1]);
      int v15 = v23[0];
      do
      {
        uint64_t v16 = *((unsigned int *)v15 + 6);
        if (v16 != -1) {
          ((void (*)(unsigned char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v16])(v27, v15);
        }
        *((_DWORD *)v15 + 6) = -1;
        int v15 = (WTF *)((char *)v15 + 48);
        v14 -= 48;
      }
      while (v14);
    }
    if (v13) {
      WTF::fastFree(v13, v7);
    }
    uint64_t v1 = v19;
  }
  v23[0] = v20;
  unsigned int v17 = v21;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  v23[1] = (WTF *)__PAIR64__(v11, v17);
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v7);
  WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(*(void *)(v1 + 16), (uint64_t)v23);
  if (v22) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v22, v18);
  }
  if (v25) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v25, (WTF::StringImpl *)v18);
  }
  if (*((void *)&v24 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v24 + 1), (WTF::StringImpl *)v18);
  }
  if ((void)v24) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v24, (WTF::StringImpl *)v18);
  }
  return (void *)WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v18);
}

unsigned int **WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(uint64_t a1, uint64_t a2)
{
  int v4 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  uint64_t isCurrent = WTF::RunLoop::isCurrent(v4);
  if (isCurrent)
  {
    uint64_t v100 = a2;
    unsigned int v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = *(void *)a2 + 48 * v6;
      a2 = 0xFFFFFFFFLL;
      do
      {
        int v9 = *(_DWORD *)(v7 + 24);
        uint64_t v10 = (void *)v7;
        if (v9)
        {
          if (v9 != 1) {
            goto LABEL_119;
          }
          uint64_t v10 = (void *)MEMORY[0x1E4F30980];
        }
        if (MEMORY[0x19972E990](*v10, "file", 4))
        {
          WebCore::localizedString((uint64_t *)v101, (WebCore *)@"Local documents on your computer", v11);
        }
        else
        {
          uint64_t v12 = MEMORY[0x19972E990](*v10, "http", 4);
          if ((v12 & 1) == 0)
          {
            uint64_t v12 = MEMORY[0x19972E990](*v10, "https", 5);
            if (!v12)
            {
              v101[0] = 0;
              goto LABEL_16;
            }
          }
          WebCore::PublicSuffixStore::singleton((WebCore::PublicSuffixStore *)v12);
          if (*(_DWORD *)(v7 + 24) > 1u) {
            goto LABEL_119;
          }
          WebCore::PublicSuffixStore::topPrivatelyControlledDomain();
        }
        if (v101[0]) {
          goto LABEL_60;
        }
LABEL_16:
        if (WebKit::allowsWebsiteDataRecordsForAllOrigins == 1)
        {
          int v13 = *(_DWORD *)(v7 + 24);
          if (v13)
          {
            uint64_t v14 = (uint64_t *)MEMORY[0x1E4F30980];
            if (v13 != 1)
            {
LABEL_119:
              uint64_t isCurrent = std::__throw_bad_variant_access[abi:sn180100]();
              goto LABEL_120;
            }
          }
          else
          {
            uint64_t v14 = (uint64_t *)(v7 + 8);
          }
          uint64_t v15 = *v14;
          if (v15 && *(_DWORD *)(v15 + 4))
          {
            if (v13) {
              uint64_t v16 = (WTF::StringImpl **)MEMORY[0x1E4F30980];
            }
            else {
              uint64_t v16 = (WTF::StringImpl **)(v7 + 8);
            }
            unsigned int v17 = *v16;
            if (*v16) {
              *(_DWORD *)v17 += 2;
            }
            LOBYTE(v108[0]) = 32;
            v102[0] = v17;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)v108, (uint64_t *)v102, (uint64_t *)v110);
            if (!v110[0]) {
              goto LABEL_234;
            }
            if (v17)
            {
              if (*(_DWORD *)v17 == 2) {
                WTF::StringImpl::destroy(v17, v18);
              }
              else {
                *(_DWORD *)v17 -= 2;
              }
            }
          }
          else
          {
            uint64_t v19 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
            if (*MEMORY[0x1E4F30980]) {
              *(_DWORD *)v19 += 2;
            }
            v110[0] = v19;
          }
          int v20 = *(_DWORD *)(v7 + 24);
          uint64_t v21 = (WTF::StringImpl **)v7;
          if (v20)
          {
            if (v20 != 1) {
              goto LABEL_119;
            }
            uint64_t v21 = (WTF::StringImpl **)MEMORY[0x1E4F30980];
          }
          uint64_t v22 = *v21;
          if (*v21) {
            *(_DWORD *)v22 += 2;
          }
          uint64_t v23 = v110[0];
          if (v110[0]) {
            *(_DWORD *)v110[0] += 2;
          }
          v102[0] = v22;
          v108[0] = (uint64_t)v23;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)v102, v108, &v109);
          uint64_t v25 = v109;
          if (!v109)
          {
LABEL_234:
            __break(0xC471u);
            JUMPOUT(0x198FED538);
          }
          unsigned int v109 = 0;
          char v26 = v101[0];
          v101[0] = v25;
          if (v26)
          {
            if (*(_DWORD *)v26 != 2)
            {
              *(_DWORD *)v26 -= 2;
              unsigned int v109 = 0;
              if (!v23) {
                goto LABEL_52;
              }
LABEL_49:
              if (*(_DWORD *)v23 == 2) {
                WTF::StringImpl::destroy(v23, v24);
              }
              else {
                *(_DWORD *)v23 -= 2;
              }
              goto LABEL_52;
            }
            WTF::StringImpl::destroy(v26, v24);
            uint64_t v27 = v109;
            unsigned int v109 = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
              {
                WTF::StringImpl::destroy(v27, v24);
                if (!v23) {
                  goto LABEL_52;
                }
                goto LABEL_49;
              }
              *(_DWORD *)v27 -= 2;
            }
          }
          if (v23) {
            goto LABEL_49;
          }
LABEL_52:
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v24);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          int v28 = v110[0];
          v110[0] = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v24);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
LABEL_60:
          v102[0] = 0;
          LODWORD(v102[1]) = 0;
          LOBYTE(v103) = 0;
          BYTE8(v104) = 0;
          long long v105 = 0u;
          long long v106 = 0u;
          uint64_t v107 = 0;
          WTF::HashMap<WTF::String,WebKit::WebsiteDataRecord,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebsiteDataRecord>,WTF::HashTableTraits>::add<WebKit::WebsiteDataRecord>((uint64_t)v108, (uint64_t *)(a1 + 24), v101, (uint64_t)v102);
          uint64_t v30 = v108[0];
          if (v107) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v107, v29);
          }
          if (*((void *)&v106 + 1)) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v106 + 1), v29);
          }
          if ((void)v106) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v106, v29);
          }
          if (*((void *)&v105 + 1)) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v105 + 1), v29);
          }
          if ((void)v105) {
            WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v105, v29);
          }
          if (BYTE8(v104) && (void)v104) {
            WTF::fastFree((WTF *)(v104 - 16), v29);
          }
          if (v102[0])
          {
            if (*(_DWORD *)v102[0] == 2) {
              WTF::StringImpl::destroy(v102[0], v29);
            }
            else {
              *(_DWORD *)v102[0] -= 2;
            }
          }
          if (!*(void *)(v30 + 8))
          {
            int v31 = v101[0];
            v101[0] = 0;
            *(void *)(v30 + 8) = v31;
          }
          *(_DWORD *)(v30 + 16) |= *(_DWORD *)(v7 + 32);
          WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)(v30 + 48), v7, (uint64_t)v102);
          if (*(unsigned char *)(a1 + 4))
          {
            if (!*(unsigned char *)(v30 + 40))
            {
              *(void *)(v30 + 24) = 0;
              *(void *)(v30 + 32) = 0;
              *(unsigned char *)(v30 + ++*(_DWORD *)(this + 40) = 1;
              uint64_t v36 = *(void *)(v7 + 40);
              *(void *)(v30 + 24) = v36;
              uint64_t v34 = (uint64_t *)(v30 + 32);
              int v37 = *(_DWORD *)(v7 + 32);
              goto LABEL_84;
            }
            uint64_t v35 = *(void *)(v30 + 32);
            uint64_t v34 = (uint64_t *)(v30 + 32);
            uint64_t v33 = v35;
            uint64_t v36 = *(void *)(v7 + 40);
            *(v34 - 1) += v36;
            int v37 = *(_DWORD *)(v7 + 32);
            if (v35)
            {
LABEL_85:
              int v38 = *(_DWORD *)(v33 - 8);
            }
            else
            {
LABEL_84:
              WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(v34, 0);
              uint64_t v33 = *v34;
              if (*v34) {
                goto LABEL_85;
              }
              int v38 = 0;
            }
            unsigned int v39 = 9 * ((v37 + ~(v37 << 15)) ^ ((v37 + ~(v37 << 15)) >> 10));
            unsigned int v40 = (v39 ^ (v39 >> 6)) + ~((v39 ^ (v39 >> 6)) << 11);
            unsigned int v41 = v38 & (v40 ^ HIWORD(v40));
            uint64_t v32 = (_OWORD *)(v33 + 16 * v41);
            int v42 = *(_DWORD *)v32;
            if (!*(_DWORD *)v32)
            {
LABEL_95:
              *(_DWORD *)uint64_t v32 = v37;
              *((void *)v32 + 1) = 0;
              uint64_t v45 = *v34;
              if (*v34) {
                int v46 = *(_DWORD *)(v45 - 12) + 1;
              }
              else {
                int v46 = 1;
              }
              *(_DWORD *)(v45 - 12) = v46;
              uint64_t v47 = *v34;
              if (*v34) {
                int v48 = *(_DWORD *)(v47 - 12);
              }
              else {
                int v48 = 0;
              }
              uint64_t v49 = (*(_DWORD *)(v47 - 16) + v48);
              unint64_t v50 = *(unsigned int *)(v47 - 4);
              if (v50 > 0x400)
              {
                if (v50 > 2 * v49) {
                  goto LABEL_104;
                }
              }
              else if (3 * v50 > 4 * v49)
              {
                goto LABEL_104;
              }
              uint64_t v32 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(v34, v32);
              goto LABEL_104;
            }
            uint64_t v43 = 0;
            int v44 = 1;
            while (v42 != v37)
            {
              if (v42 == -1) {
                uint64_t v43 = v32;
              }
              unsigned int v41 = (v41 + v44) & v38;
              uint64_t v32 = (_OWORD *)(v33 + 16 * v41);
              int v42 = *(_DWORD *)v32;
              ++v44;
              if (!*(_DWORD *)v32)
              {
                if (v43)
                {
                  *uint64_t v43 = 0;
                  v43[1] = 0;
                  --*(_DWORD *)(*v34 - 16);
                  uint64_t v32 = v43;
                }
                goto LABEL_95;
              }
            }
LABEL_104:
            *((void *)v32 + 1) += v36;
          }
          uint64_t v51 = v101[0];
          v101[0] = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2) {
              WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v32);
            }
            else {
              *(_DWORD *)v51 -= 2;
            }
          }
        }
        v7 += 48;
      }
      while (v7 != v8);
    }
    uint64_t v60 = (WTF **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)(v100 + 16));
    uint64_t v61 = v60;
    uint64_t v63 = v62;
    uint64_t v64 = *(void *)(v100 + 16);
    if (v64) {
      uint64_t v65 = (WTF **)(v64 + 8 * *(unsigned int *)(v64 - 4));
    }
    else {
      uint64_t v65 = 0;
    }
    if (v65 != v60)
    {
      uint64_t v66 = *MEMORY[0x1E4F18F80];
      while (1)
      {
        MEMORY[0x19972EAD0](v102, v66);
        int v69 = WTF::equal(*v61, v102[0], v67);
        long long v70 = v102[0];
        v102[0] = 0;
        if (!v70) {
          goto LABEL_136;
        }
        if (*(_DWORD *)v70 != 2) {
          break;
        }
        WTF::StringImpl::destroy(v70, v68);
        if (!v69)
        {
LABEL_139:
          WebKit::WebsiteDataRecord::displayNameForHostName((WebKit::WebsiteDataRecord *)v101, (const WTF::String *)v61);
          goto LABEL_140;
        }
LABEL_137:
        WebCore::localizedString((uint64_t *)v101, (WebCore *)@"Local documents on your computer", (const __CFString *)v68);
LABEL_140:
        if (v101[0])
        {
          v102[0] = 0;
          LODWORD(v102[1]) = 0;
          LOBYTE(v103) = 0;
          BYTE8(v104) = 0;
          long long v105 = 0u;
          long long v106 = 0u;
          uint64_t v107 = 0;
          WTF::HashMap<WTF::String,WebKit::WebsiteDataRecord,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebsiteDataRecord>,WTF::HashTableTraits>::add<WebKit::WebsiteDataRecord>((uint64_t)v108, (uint64_t *)(a1 + 24), v101, (uint64_t)v102);
          uint64_t v73 = v108[0];
          if (v107) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v107, v71);
          }
          if (*((void *)&v106 + 1)) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v106 + 1), v71);
          }
          if ((void)v106) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v106, v71);
          }
          if (*((void *)&v105 + 1)) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v105 + 1), v71);
          }
          if ((void)v105) {
            WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v105, v71);
          }
          if (BYTE8(v104) && (void)v104) {
            WTF::fastFree((WTF *)(v104 - 16), v71);
          }
          if (v102[0])
          {
            if (*(_DWORD *)v102[0] == 2) {
              WTF::StringImpl::destroy(v102[0], v71);
            }
            else {
              *(_DWORD *)v102[0] -= 2;
            }
          }
          if (!*(void *)(v73 + 8))
          {
            int v74 = v101[0];
            v101[0] = 0;
            *(void *)(v73 + 8) = v74;
          }
          *(_DWORD *)(v73 + 16) |= 1u;
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v73 + 56), v61, v72, (uint64_t)v102);
          long long v76 = v101[0];
          v101[0] = 0;
          if (v76)
          {
            if (*(_DWORD *)v76 == 2) {
              WTF::StringImpl::destroy(v76, v75);
            }
            else {
              *(_DWORD *)v76 -= 2;
            }
          }
        }
        while (++v61 != v63)
        {
          if ((unint64_t)*v61 + 1 > 1) {
            goto LABEL_168;
          }
        }
        uint64_t v61 = v63;
LABEL_168:
        if (v61 == v65) {
          goto LABEL_169;
        }
      }
      *(_DWORD *)v70 -= 2;
LABEL_136:
      if (!v69) {
        goto LABEL_139;
      }
      goto LABEL_137;
    }
LABEL_169:
    uint64_t v77 = (const WTF::String *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)(v100 + 24));
    uint64_t v80 = v77;
    uint64_t v81 = v78;
    uint64_t v82 = *(void *)(v100 + 24);
    if (v82) {
      uint64_t v83 = (const WTF::String *)(v82 + 8 * *(unsigned int *)(v82 - 4));
    }
    else {
      uint64_t v83 = 0;
    }
    if (v83 != v77)
    {
      do
      {
        WebKit::WebsiteDataRecord::displayNameForHostName((WebKit::WebsiteDataRecord *)v101, v80);
        if (v101[0])
        {
          v102[0] = 0;
          LODWORD(v102[1]) = 0;
          LOBYTE(v103) = 0;
          BYTE8(v104) = 0;
          long long v105 = 0u;
          long long v106 = 0u;
          uint64_t v107 = 0;
          WTF::HashMap<WTF::String,WebKit::WebsiteDataRecord,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebsiteDataRecord>,WTF::HashTableTraits>::add<WebKit::WebsiteDataRecord>((uint64_t)v108, (uint64_t *)(a1 + 24), v101, (uint64_t)v102);
          uint64_t v86 = v108[0];
          if (v107) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v107, v84);
          }
          if (*((void *)&v106 + 1)) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v106 + 1), v84);
          }
          if ((void)v106) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v106, v84);
          }
          if (*((void *)&v105 + 1)) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v105 + 1), v84);
          }
          if ((void)v105) {
            WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v105, v84);
          }
          if (BYTE8(v104) && (void)v104) {
            WTF::fastFree((WTF *)(v104 - 16), v84);
          }
          if (v102[0])
          {
            if (*(_DWORD *)v102[0] == 2) {
              WTF::StringImpl::destroy(v102[0], v84);
            }
            else {
              *(_DWORD *)v102[0] -= 2;
            }
          }
          if (!*(void *)(v86 + 8))
          {
            double v87 = v101[0];
            v101[0] = 0;
            *(void *)(v86 + 8) = v87;
          }
          *(_DWORD *)(v86 + 16) |= 0x200u;
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v86 + 64), (WTF::StringImpl **)v80, v85, (uint64_t)v102);
          uint64_t v88 = v101[0];
          v101[0] = 0;
          if (v88)
          {
            if (*(_DWORD *)v88 == 2) {
              WTF::StringImpl::destroy(v88, v78);
            }
            else {
              *(_DWORD *)v88 -= 2;
            }
          }
        }
        while (1)
        {
          uint64_t v80 = (const WTF::String *)((char *)v80 + 8);
          if (v80 == v81) {
            break;
          }
          if ((unint64_t)(*(void *)v80 + 1) > 1) {
            goto LABEL_200;
          }
        }
        uint64_t v80 = v81;
LABEL_200:
        ;
      }
      while (v80 != v83);
    }
    uint64_t result = (unsigned int **)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(v100 + 32), (uint64_t)v78, v79);
    uint64_t v89 = (const WTF::String *)result;
    v101[0] = (WTF::StringImpl *)result;
    v101[1] = v90;
    uint64_t v91 = *(void *)(v100 + 32);
    if (v91) {
      uint64_t v92 = (WTF::StringImpl *)(v91 + 8 * *(unsigned int *)(v91 - 4));
    }
    else {
      uint64_t v92 = 0;
    }
    if (v92 != (WTF::StringImpl *)result)
    {
      uint64_t v93 = (uint64_t *)(a1 + 24);
      do
      {
        WebKit::WebsiteDataRecord::displayNameForHostName((WebKit::WebsiteDataRecord *)v110, v89);
        if (v110[0])
        {
          v102[0] = 0;
          LODWORD(v102[1]) = 0;
          LOBYTE(v103) = 0;
          BYTE8(v104) = 0;
          long long v105 = 0u;
          long long v106 = 0u;
          uint64_t v107 = 0;
          WTF::HashMap<WTF::String,WebKit::WebsiteDataRecord,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebsiteDataRecord>,WTF::HashTableTraits>::add<WebKit::WebsiteDataRecord>((uint64_t)v108, v93, v110, (uint64_t)v102);
          uint64_t v97 = v108[0];
          if (v107) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v107, v96);
          }
          if (*((void *)&v106 + 1)) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v106 + 1), v96);
          }
          if ((void)v106) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v106, v96);
          }
          if (*((void *)&v105 + 1)) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v105 + 1), v96);
          }
          if ((void)v105) {
            WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v105, v96);
          }
          if (BYTE8(v104) && (void)v104) {
            WTF::fastFree((WTF *)(v104 - 16), v96);
          }
          if (v102[0])
          {
            if (*(_DWORD *)v102[0] == 2) {
              WTF::StringImpl::destroy(v102[0], v96);
            }
            else {
              *(_DWORD *)v102[0] -= 2;
            }
          }
          if (!*(void *)(v97 + 8))
          {
            uint64_t v98 = v110[0];
            v110[0] = 0;
            *(void *)(v97 + 8) = v98;
          }
          *(_DWORD *)(v97 + 16) |= 0x1000u;
          WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(v97 + 80), (WTF::StringImpl **)v89, (uint64_t)v102);
          uint64_t v99 = v110[0];
          v110[0] = 0;
          if (v99)
          {
            if (*(_DWORD *)v99 == 2) {
              WTF::StringImpl::destroy(v99, v94);
            }
            else {
              *(_DWORD *)v99 -= 2;
            }
          }
        }
        v101[0] = (WTF::StringImpl *)((char *)v101[0] + 8);
        uint64_t result = (unsigned int **)WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v101, (uint64_t)v94, v95);
        uint64_t v89 = v101[0];
      }
      while (v101[0] != v92);
    }
  }
  else
  {
LABEL_120:
    WTF::RunLoop::main((WTF::RunLoop *)isCurrent);
    atomic_fetch_add((atomic_uint *volatile)a1, 1u);
    v102[0] = (WTF::StringImpl *)a1;
    WebKit::WebsiteData::isolatedCopy(a2, (uint64_t *)&v102[1]);
    uint64_t v52 = WTF::fastMalloc((WTF *)0x38);
    *(void *)uint64_t v52 = &unk_1EE9E5ED8;
    *(WTF::StringImpl **)(v52 + 8) = v102[0];
    uint64_t v53 = v102[1];
    *(_OWORD *)uint64_t v102 = 0u;
    *(void *)(v52 + ++*(_DWORD *)(this + 16) = v53;
    uint64_t v54 = v103;
    uint64_t v103 = 0;
    *(void *)(v52 + 24) = v54;
    *(void *)(v52 + 32) = v104;
    uint64_t v55 = *((void *)&v104 + 1);
    long long v104 = 0u;
    *(void *)(v52 + ++*(_DWORD *)(this + 40) = v55;
    uint64_t v56 = v105;
    *(void *)&long long v105 = 0;
    *(void *)(v52 + 48) = v56;
    v108[0] = v52;
    WTF::RunLoop::dispatch();
    uint64_t v58 = v108[0];
    v108[0] = 0;
    if (v58) {
      (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
    }
    if ((void)v105) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v105, v57);
    }
    if (*((void *)&v104 + 1)) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v104 + 1), v57);
    }
    if ((void)v104) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v104, v57);
    }
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v102[1], v57);
    return WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)v102);
  }
  return result;
}

WTF::StringImpl **WTF::HashMap<WTF::String,WebKit::WebsiteDataRecord,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebsiteDataRecord>,WTF::HashTableTraits>::add<WebKit::WebsiteDataRecord>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebsiteDataRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebsiteDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebsiteDataRecord,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebsiteDataRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a3 + 4);
  uint64_t v52 = a1;
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a3);
  }
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v14 = (WTF::StringImpl *)(v11 & v9);
    uint64_t v15 = (WTF::StringImpl **)(v8 + 88 * v14);
    uint64_t v16 = *v15;
    if (*v15 != (WTF::StringImpl *)-1) {
      break;
    }
    uint64_t v12 = v8 + 88 * v14;
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *(void *)(v12 + 80) = 0;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + ++*(_DWORD *)(this + 16) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)uint64_t v12 = 0u;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v15 = (WTF::StringImpl **)v12;
    }
    WTF::String::operator=((uint64_t *)v15, a3);
    uint64_t v19 = *(WTF::StringImpl **)a4;
    *(void *)a4 = 0;
    int v51 = *(unsigned __int8 *)(a4 + 32);
    if (*(unsigned char *)(a4 + 32))
    {
      int v20 = *(WTF::StringImpl **)(a4 + 16);
      uint64_t v14 = *(WTF::StringImpl **)(a4 + 24);
      int v21 = 1;
      *(void *)(a4 + 24) = 0;
    }
    else
    {
      int v21 = 0;
      int v20 = 0;
    }
    int v24 = *(_DWORD *)(a4 + 8);
    uint64_t v25 = *(WTF::StringImpl **)(a4 + 40);
    char v26 = *(WTF::StringImpl **)(a4 + 48);
    *(_OWORD *)(a4 + ++*(_DWORD *)(this + 40) = 0u;
    uint64_t v27 = *(WTF::StringImpl **)(a4 + 56);
    unint64_t v50 = *(WTF::StringImpl **)(a4 + 64);
    *(_OWORD *)(a4 + 56) = 0u;
    int v28 = *(WTF::StringImpl **)(a4 + 72);
    *(void *)(a4 + 72) = 0;
    long long v29 = v15[1];
    v15[1] = v19;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        uint64_t v33 = v25;
        uint64_t v34 = v20;
        WTF::StringImpl::destroy(v29, v18);
        int v20 = v34;
        uint64_t v25 = v33;
      }
      else
      {
        *(_DWORD *)v29 -= 2;
      }
    }
    *((_DWORD *)v15 + 4) = v24;
    uint64_t v35 = v14;
    if (*((unsigned __int8 *)v15 + 40) == v21)
    {
      if (!*((unsigned char *)v15 + 40)) {
        goto LABEL_38;
      }
      uint64_t v36 = v15[4];
      v15[3] = v20;
      v15[4] = v14;
      if (v36)
      {
        int v37 = v25;
        WTF::fastFree((WTF::StringImpl *)((char *)v36 - 16), v18);
        uint64_t v25 = v37;
      }
    }
    else
    {
      if (*((unsigned char *)v15 + 40))
      {
        int v38 = v15[4];
        if (v38)
        {
          unsigned int v39 = v25;
          WTF::fastFree((WTF::StringImpl *)((char *)v38 - 16), v18);
          uint64_t v25 = v39;
        }
        *((unsigned char *)v15 + ++*(_DWORD *)(this + 40) = 0;
LABEL_38:
        uint64_t v30 = v52;
        uint64_t v40 = (uint64_t)v15[6];
        v15[6] = v25;
        if (v40) {
          WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v40, v18);
        }
        unsigned int v41 = (WTF::StringImpl **)v15[7];
        v15[7] = v26;
        if (v41) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v41, v18);
        }
        int v42 = (WTF::StringImpl **)v15[8];
        v15[8] = v27;
        if (v42) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v42, v18);
        }
        uint64_t v43 = (WTF::StringImpl **)v15[9];
        v15[9] = v50;
        if (v43) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v43, v18);
        }
        uint64_t result = (WTF::StringImpl **)v15[10];
        v15[10] = v28;
        if (result)
        {
          uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v18);
          if (!v51) {
            goto LABEL_50;
          }
        }
        else if (!v51)
        {
          goto LABEL_50;
        }
        if (v35) {
          uint64_t result = (WTF::StringImpl **)WTF::fastFree((WTF::StringImpl *)((char *)v35 - 16), v18);
        }
LABEL_50:
        uint64_t v44 = *a2;
        if (*a2) {
          int v45 = *(_DWORD *)(v44 - 12) + 1;
        }
        else {
          int v45 = 1;
        }
        *(_DWORD *)(v44 - 12) = v45;
        uint64_t v46 = *a2;
        if (*a2) {
          int v47 = *(_DWORD *)(v46 - 12);
        }
        else {
          int v47 = 0;
        }
        uint64_t v48 = (*(_DWORD *)(v46 - 16) + v47);
        unint64_t v49 = *(unsigned int *)(v46 - 4);
        if (v49 > 0x400)
        {
          if (v49 <= 2 * v48)
          {
LABEL_58:
            uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebsiteDataRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebsiteDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebsiteDataRecord,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebsiteDataRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, v15);
            uint64_t v15 = result;
            uint64_t v46 = *a2;
            if (*a2) {
              LODWORD(v49) = *(_DWORD *)(v46 - 4);
            }
            else {
              LODWORD(v49) = 0;
            }
          }
        }
        else if (3 * v49 <= 4 * v48)
        {
          goto LABEL_58;
        }
        uint64_t v32 = v46 + 88 * v49;
        char v31 = 1;
        goto LABEL_62;
      }
      v15[3] = v20;
      v15[4] = v14;
      *((unsigned char *)v15 + ++*(_DWORD *)(this + 40) = 1;
    }
    uint64_t v35 = 0;
    goto LABEL_38;
  }
  uint64_t result = (WTF::StringImpl **)WTF::equal(v16, *a3, (const WTF::StringImpl *)a3);
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v22 = *a2;
  if (*a2) {
    unsigned int v23 = *(_DWORD *)(v22 - 4);
  }
  else {
    unsigned int v23 = 0;
  }
  uint64_t v30 = v52;
  char v31 = 0;
  uint64_t v32 = v22 + 88 * v23;
LABEL_62:
  *(void *)uint64_t v30 = v15;
  *(void *)(v30 + 8) = v32;
  *(unsigned char *)(v30 + ++*(_DWORD *)(this + 16) = v31;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(WebKit::WebsiteData &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9E5ED8;
  uint64_t v3 = *(WTF::StringImpl ***)(a1 + 48);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  int v4 = *(WTF::StringImpl ***)(a1 + 40);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *(WTF::StringImpl ***)(a1 + 32);
  if (v5) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  }
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  void *v6;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9E5ED8;
  uint64_t v3 = *(WTF::StringImpl ***)(a1 + 48);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  int v4 = *(WTF::StringImpl ***)(a1 + 40);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *(WTF::StringImpl ***)(a1 + 32);
  if (v5) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  }
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v6);
}

unsigned int **WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(WebKit::WebsiteData &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(*(void *)(a1 + 8), a1 + 16);
}

char *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(char *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = *a2;
  if (!*a2)
  {
    uint64_t v6 = 1;
    int v7 = 1;
    return (char *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v6, v7, *result, v3, a3);
  }
  int v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 0x80000000) == 0)
  {
    BOOL v5 = __OFADD__(v4, 1);
    uint64_t v6 = (v4 + 1);
    if (!v5)
    {
      int v7 = (*(unsigned __int8 *)(v3 + 16) >> 2) & 1;
      return (char *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v6, v7, *result, v3, a3);
    }
  }
  *a3 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  int v7 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        uint64_t v9 = v10;
        if (v10)
        {
          *(unsigned char *)(v10 + 20) = a3;
          *(_DWORD *)uint64_t v9 = 2;
          *(_DWORD *)(v9 + 4) = v7;
          *(void *)(v9 + 8) = v9 + 20;
          *(_DWORD *)(v9 + ++*(_DWORD *)(this + 16) = 4;
          uint64_t v10 = a4;
          uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v10, (char *)(v9 + 21));
        }
        goto LABEL_12;
      }
LABEL_8:
      uint64_t v9 = 0;
      goto LABEL_12;
    }
LABEL_9:
    uint64_t v9 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_12;
  }
  if (!result) {
    goto LABEL_9;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_8;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  uint64_t v9 = v10;
  if (v10)
  {
    *(_DWORD *)uint64_t v10 = 2;
    *(_DWORD *)(v9 + 4) = v7;
    *(_WORD *)(v9 + 20) = a3;
    *(void *)(v9 + 8) = v9 + 20;
    *(_DWORD *)(v9 + ++*(_DWORD *)(this + 16) = 0;
    uint64_t v10 = a4;
    uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v10, (char *)(v9 + 22));
  }
LABEL_12:
  *a5 = v9;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebsiteDataRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebsiteDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebsiteDataRecord,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebsiteDataRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = WTF::fastMalloc((WTF *)(88 * v5 + 16));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (v5) {
    bzero((void *)(v6 + 16), 88 * v5);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v3;
    do
    {
      int v13 = (WTF::StringImpl **)(v2 + 88 * v10);
      uint64_t v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            unsigned int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v18 = *((_DWORD *)v14 + 4);
          if (v18 >= 0x100) {
            int v19 = v18 >> 8;
          }
          else {
            int v19 = WTF::StringImpl::hashSlowCase(v14);
          }
          int v20 = 0;
          do
          {
            unsigned int v21 = v19 & v17;
            uint64_t v22 = (WTF::StringImpl **)(v16 + 88 * (v19 & v17));
            int v19 = ++v20 + (v19 & v17);
          }
          while (*v22);
          WebKit::WebsiteDataRecord::~WebsiteDataRecord((WebKit::WebsiteDataRecord *)(v16 + 88 * v21 + 8), v7);
          int v24 = *v22;
          *uint64_t v22 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, v23);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          uint64_t v25 = *v13;
          WTF *v13 = 0;
          *uint64_t v22 = v25;
          uint64_t v26 = v2 + 88 * v10;
          uint64_t v28 = *(void *)(v26 + 8);
          uint64_t v27 = v26 + 8;
          *(void *)uint64_t v27 = 0;
          uint64_t v29 = v16 + 88 * v21;
          int v30 = *(_DWORD *)(v27 + 8);
          *(unsigned char *)(v29 + 24) = 0;
          uint64_t v31 = v29 + 24;
          *(void *)(v16 + 88 * v21 + 8) = v28;
          *(_DWORD *)(v31 - 8) = v30;
          *(unsigned char *)(v31 + ++*(_DWORD *)(this + 16) = 0;
          uint64_t v32 = (unsigned char *)(v31 + 16);
          if (*(unsigned char *)(v27 + 32))
          {
            uint64_t v33 = v2 + 88 * v10;
            *(void *)uint64_t v31 = *(void *)(v33 + 24);
            uint64_t v34 = v16 + 88 * v21;
            *(void *)(v34 + 32) = 0;
            uint64_t v35 = *(void *)(v33 + 32);
            *(void *)(v33 + 32) = 0;
            *(void *)(v34 + 32) = v35;
            *uint64_t v32 = 1;
          }
          uint64_t v36 = (void *)(v16 + 88 * v21);
          int v37 = (void *)(v2 + 88 * v10);
          void v36[6] = 0;
          uint64_t v38 = v37[6];
          v37[6] = 0;
          void v36[6] = v38;
          v36[7] = 0;
          uint64_t v39 = v37[7];
          v37[7] = 0;
          v36[7] = v39;
          v36[8] = 0;
          uint64_t v40 = v37[8];
          v37[8] = 0;
          v36[8] = v40;
          v36[9] = 0;
          uint64_t v41 = v37[9];
          v37[9] = 0;
          v36[9] = v41;
          v36[10] = 0;
          uint64_t v42 = v37[10];
          v37[10] = 0;
          v36[10] = v42;
          WebKit::WebsiteDataRecord::~WebsiteDataRecord((WebKit::WebsiteDataRecord *)v27, v23);
          uint64_t v43 = *v13;
          WTF *v13 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2) {
              WTF::StringImpl::destroy(v43, v7);
            }
            else {
              *(_DWORD *)v43 -= 2;
            }
          }
          if (v13 == a2) {
            uint64_t v11 = v16 + 88 * v21;
          }
        }
        else
        {
          WebKit::WebsiteDataRecord::~WebsiteDataRecord((WebKit::WebsiteDataRecord *)(v2 + 88 * v10 + 8), v7);
          uint64_t v15 = *v13;
          WTF *v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v7);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v2) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v11;
}

_OWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = (_DWORD *)(v4 + 16 * v10);
      if ((*v12 + 1) >= 2)
      {
        uint64_t v13 = *a1;
        if (*a1) {
          int v14 = *(_DWORD *)(v13 - 8);
        }
        else {
          int v14 = 0;
        }
        int v15 = 0;
        unsigned int v16 = 9 * ((*v12 + ~(*v12 << 15)) ^ ((*v12 + ~(*v12 << 15)) >> 10));
        unsigned int v17 = ((v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11)) ^ (((v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11)) >> 16);
        do
        {
          uint64_t v18 = v17 & v14;
          unsigned int v17 = ++v15 + v18;
        }
        while (*(_DWORD *)(v13 + 16 * v18));
        int v19 = (_OWORD *)(v13 + 16 * v18);
        _OWORD *v19 = *(_OWORD *)v12;
        if (v12 == a2) {
          uint64_t v11 = v19;
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_2,void,WebKit::WebsiteData>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E5F00;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_2,void,WebKit::WebsiteData>::~CallableWrapper(unsigned int **a1)
{
  *a1 = (unsigned int *)&unk_1EE9E5F00;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_2,void,WebKit::WebsiteData>::call(uint64_t a1, uint64_t a2)
{
  v7[0] = *(void *)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  v7[1] = v2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + ++*(_DWORD *)(this + 16) = 0;
  *(void *)(a2 + 24) = 0;
  long long v8 = v3;
  uint64_t v4 = *(WTF::StringImpl ***)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v9 = v4;
  WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(*(void *)(a1 + 8), (uint64_t)v7);
  if (v9) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v5);
  }
  if (*((void *)&v8 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v8 + 1), v5);
  }
  if ((void)v8) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v8, v5);
  }
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_3,void,WebKit::WebsiteData>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E5F28;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_3,void,WebKit::WebsiteData>::~CallableWrapper(unsigned int **a1)
{
  *a1 = (unsigned int *)&unk_1EE9E5F28;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_3,void,WebKit::WebsiteData>::call(uint64_t a1, uint64_t a2)
{
  v7[0] = *(void *)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  v7[1] = v2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + ++*(_DWORD *)(this + 16) = 0;
  *(void *)(a2 + 24) = 0;
  long long v8 = v3;
  uint64_t v4 = *(WTF::StringImpl ***)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v9 = v4;
  WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(*(void *)(a1 + 8), (uint64_t)v7);
  if (v9) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v5);
  }
  if (*((void *)&v8 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v8 + 1), v5);
  }
  if ((void)v8) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v8, v5);
  }
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_4,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::HashSet>,WTF::HashTraits<WTF::HashSet>,WTF::HashTableTraits> &&>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E5F50;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_4,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::HashSet>,WTF::HashTraits<WTF::HashSet>,WTF::HashTableTraits> &&>::~CallableWrapper(unsigned int **a1)
{
  *a1 = (unsigned int *)&unk_1EE9E5F50;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_4,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::HashSet>,WTF::HashTraits<WTF::HashSet>,WTF::HashTableTraits> &&>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = 0;
  *(_OWORD *)unsigned int v23 = 0u;
  long long v24 = 0u;
  unsigned int v21 = 0;
  uint64_t v22 = 0;
  if (*a2 && (uint64_t v4 = *(unsigned int *)(*a2 - 12), v4))
  {
    if (v4 >= 0x5555556)
    {
      __break(0xC471u);
      return result;
    }
    int v5 = 48 * v4;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * v4));
    LODWORD(v22) = (v5 & 0xFFFFFFF0) / 0x30;
    unsigned int v21 = (WTF *)v6;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unsigned int v7 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(a2);
  uint64_t v9 = v7;
  uint64_t v10 = v8;
  if (*a2) {
    uint64_t v11 = *a2 + 32 * *(unsigned int *)(*a2 - 4);
  }
  else {
    uint64_t v11 = 0;
  }
  if ((WebCore::SecurityOriginData *)v11 == v7)
  {
    unsigned int v12 = 0;
  }
  else
  {
    uint64_t v20 = v3;
    unsigned int v12 = 0;
    do
    {
      v30[0] = 0;
      int v31 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v30, (uint64_t)v9);
      v27[0] = 0;
      int v28 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v27, (uint64_t)v30);
      LODWORD(v29) = 0x10000;
      *((void *)&v29 + 1) = 0;
      if (v31 != -1) {
        ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v31])(&v26, v30);
      }
      uint64_t v13 = v6 + 48 * v12;
      *(unsigned char *)uint64_t v13 = 0;
      *(_DWORD *)(v13 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v13, (uint64_t)v27);
      *(_OWORD *)(v13 + 32) = v29;
      if (v28 != -1) {
        ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v28])(v30, v27);
      }
      while (1)
      {
        uint64_t v9 = (WebCore::SecurityOriginData *)((char *)v9 + 32);
        if (v9 == v10) {
          break;
        }
        if (!WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v9)) {
          goto LABEL_18;
        }
      }
      uint64_t v9 = v10;
LABEL_18:
      ++v12;
    }
    while (v9 != (WebCore::SecurityOriginData *)v11);
    int v14 = v23[0];
    if (HIDWORD(v23[1]))
    {
      uint64_t v15 = 48 * HIDWORD(v23[1]);
      unsigned int v16 = v23[0];
      do
      {
        uint64_t v17 = *((unsigned int *)v16 + 6);
        if (v17 != -1) {
          ((void (*)(unsigned char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v17])(v27, v16);
        }
        *((_DWORD *)v16 + 6) = -1;
        unsigned int v16 = (WTF *)((char *)v16 + 48);
        v15 -= 48;
      }
      while (v15);
    }
    if (v14) {
      WTF::fastFree(v14, v8);
    }
    uint64_t v3 = v20;
  }
  v23[0] = v21;
  unsigned int v18 = v22;
  unsigned int v21 = 0;
  uint64_t v22 = 0;
  v23[1] = (WTF *)__PAIR64__(v12, v18);
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v8);
  WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(*(void *)(v3 + 8), (uint64_t)v23);
  if (v25) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v25, v19);
  }
  if (*((void *)&v24 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v24 + 1), v19);
  }
  if ((void)v24) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v24, v19);
  }
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v19);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E5F78;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 16));
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9E5F78;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 16));
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_1,void>::call(uint64_t a1, const WTF::String *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v28 = 0;
  long long v29 = 0;
  int v30 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  WTF::FileSystemImpl::listDirectory(&v34, (WTF::FileSystemImpl *)(a1 + 8), a2);
  if (v35)
  {
    uint64_t v4 = v34;
    uint64_t v5 = 8 * v35;
    do
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      WebKit::computeMediaKeyFile((WebKit *)&v32, v33);
      if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v32, v6))
      {
        WTF::FileSystemImpl::pathByAppendingComponent();
        WebCore::StorageUtilities::readOriginFromFile(v37, (WebCore::StorageUtilities *)&v31, v7);
        if (v40)
        {
          if (HIDWORD(v24) == v24)
          {
            WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData&>((uint64_t)&v23, (unint64_t)v39);
          }
          else
          {
            uint64_t v8 = v23 + 32 * HIDWORD(v24);
            *(unsigned char *)uint64_t v8 = 0;
            *(_DWORD *)(v8 + 24) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v8, (uint64_t)v39);
            ++HIDWORD(v24);
          }
        }
        std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v37);
        uint64_t v9 = v31;
        int v31 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2) {
            WTF::StringImpl::destroy(v9, v3);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
        }
      }
      uint64_t v10 = v32;
      uint64_t v32 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v3);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      uint64_t v11 = v33;
      uint64_t v33 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v3);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      v4 += 8;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v3);
  if (HIDWORD(v24))
  {
    if (HIDWORD(v24) >= 0x5555556)
    {
      __break(0xC471u);
      return result;
    }
    int v14 = 48 * HIDWORD(v24);
    uint64_t v15 = WTF::fastMalloc((WTF *)(48 * HIDWORD(v24)));
    uint64_t v16 = v15;
    unsigned int v17 = (v14 & 0xFFFFFFF0) / 0x30;
    if (HIDWORD(v24))
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      uint64_t v20 = v15;
      do
      {
        LOBYTE(v34) = 0;
        int v36 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v34, v23 + v18);
        LOBYTE(v37[0]) = 0;
        int v38 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v37, (uint64_t)&v34);
        LODWORD(v39[0]) = 256;
        *((void *)&v39[0] + 1) = 0;
        if (v36 != -1) {
          ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v36])(&v33, &v34);
        }
        *(unsigned char *)uint64_t v20 = 0;
        *(_DWORD *)(v20 + 24) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v20, (uint64_t)v37);
        *(_OWORD *)(v20 + 32) = v39[0];
        if (v38 != -1) {
          ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v38])(&v34, v37);
        }
        ++v19;
        v20 += 48;
        v18 += 32;
      }
      while (v19 < HIDWORD(v24));
    }
    else
    {
      LODWORD(v19) = 0;
    }
  }
  else
  {
    LODWORD(v19) = 0;
    unsigned int v17 = 0;
    uint64_t v16 = 0;
  }
  v37[0] = 0;
  v37[1] = 0;
  uint64_t v25 = v16;
  unsigned int v26 = v17;
  int v27 = v19;
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v13);
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v21);
  WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(*(void *)(a1 + 16), (uint64_t)&v25);
  if (v30) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v22);
  }
  if (v29) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v29, v22);
  }
  if (v28) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v28, v22);
  }
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v22);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WebKit::WebsiteDataRecord>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E5FA0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WebKit::WebsiteDataRecord>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9E5FA0;
  uint64_t v3 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WebKit::WebsiteDataRecord>::call(uint64_t isEmptyOrDeletedBucket, uint64_t a2)
{
  uint64_t v2 = (void *)isEmptyOrDeletedBucket;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v79 = 0;
  unsigned int v3 = *(_DWORD *)(a2 + 12);
  if (!v3) {
    goto LABEL_75;
  }
  unint64_t v4 = *(void *)a2;
  uint64_t v75 = *(void *)a2 + 80 * v3;
  do
  {
    uint64_t v5 = *((unsigned int *)v2 + 5);
    if (!v5) {
      goto LABEL_74;
    }
    uint64_t v6 = (uint64_t *)v2[1];
    unsigned int v7 = &v6[v5];
    uint64_t v8 = (void *)(v4 + 48);
    uint64_t v9 = (void *)(v4 + 40);
    while (1)
    {
      isEmptyOrDeletedBucket = *v6;
      if (!*v6) {
        goto LABEL_59;
      }
      if (!*(_DWORD *)(isEmptyOrDeletedBucket + 4)) {
        goto LABEL_59;
      }
      isEmptyOrDeletedBucket = MEMORY[0x19972E990]();
      if (isEmptyOrDeletedBucket) {
        goto LABEL_59;
      }
      if (*(unsigned char *)(v4 + 8))
      {
        uint64_t v10 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)(v4 + 48));
        uint64_t v11 = v10;
        uint64_t v13 = v12;
        uint64_t v14 = *v8 ? *v8 + 8 * *(unsigned int *)(*v8 - 4) : 0;
        if ((uint64_t *)v14 != v10) {
          break;
        }
      }
LABEL_32:
      isEmptyOrDeletedBucket = (uint64_t)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)(v4 + 40));
      uint64_t v22 = (uint64_t *)isEmptyOrDeletedBucket;
      uint64_t v24 = v23;
      if (*v9) {
        uint64_t v25 = *v9 + 32 * *(unsigned int *)(*v9 - 4);
      }
      else {
        uint64_t v25 = 0;
      }
      if (v25 != isEmptyOrDeletedBucket)
      {
        while (1)
        {
          int v26 = *((_DWORD *)v22 + 6);
          if (v26)
          {
            int v27 = (uint64_t *)MEMORY[0x1E4F30980];
            if (v26 != 1)
            {
              uint64_t v73 = std::__throw_bad_variant_access[abi:sn180100]();
              return _ZN3WTF6Detail15CallableWrapperIZZN6WebKit16WebsiteDataStore30fetchDataForRegistrableDomainsENS_9OptionSetINS2_15WebsiteDataTypeEEENS4_INS2_22WebsiteDataFetchOptionEEEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_INS2_17WebsiteDataRecordELm0ESC_Lm16ESD_EEONS_7HashSetISB_NS_11DefaultHashISB_EENS_10HashTraitsISB_EENS_15HashTableTraitsEEEEEEEN3__0clISI_EEDaOT_EUlvE_vJEED1Ev(v73);
            }
          }
          else
          {
            int v27 = v22 + 1;
          }
          uint64_t v28 = *v27;
          if (*v27)
          {
            unint64_t v29 = *(unsigned int *)(v28 + 16);
            uint64_t v30 = *(void *)(v28 + 8);
            uint64_t v28 = *(unsigned int *)(v28 + 4);
            uint64_t v31 = (v29 >> 2) & 1;
          }
          else
          {
            uint64_t v30 = 0;
            uint64_t v31 = 1;
          }
          int v32 = *v6 ? *(_DWORD *)(*v6 + 4) : 0;
          uint64_t v76 = v30;
          v77[0] = v28 | (v31 << 32);
          isEmptyOrDeletedBucket = WTF::StringView::endsWithIgnoringASCIICase();
          if (isEmptyOrDeletedBucket) {
            break;
          }
LABEL_49:
          while (1)
          {
            v22 += 4;
            if (v22 == v24) {
              break;
            }
            isEmptyOrDeletedBucket = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket((WebCore::SecurityOriginData *)v22);
            if (!isEmptyOrDeletedBucket) {
              goto LABEL_53;
            }
          }
          uint64_t v22 = v24;
LABEL_53:
          if (v22 == (uint64_t *)v25) {
            goto LABEL_59;
          }
        }
        if (LODWORD(v77[0]) == v32) {
          goto LABEL_63;
        }
        unsigned int v33 = LODWORD(v77[0]) + ~v32;
        if (BYTE4(v77[0]))
        {
          if (LODWORD(v77[0]) <= v33) {
            goto LABEL_81;
          }
          int v34 = *(unsigned __int8 *)(v76 + v33);
        }
        else
        {
          if (LODWORD(v77[0]) <= v33) {
            goto LABEL_81;
          }
          int v34 = *(unsigned __int16 *)(v76 + 2 * v33);
        }
        if (v34 != 46) {
          goto LABEL_49;
        }
        goto LABEL_63;
      }
LABEL_59:
      if (++v6 == v7) {
        goto LABEL_74;
      }
    }
    while (1)
    {
      uint64_t v15 = *v11;
      if (*v11)
      {
        unint64_t v16 = *(unsigned int *)(v15 + 16);
        uint64_t v17 = *(void *)(v15 + 8);
        uint64_t v15 = *(unsigned int *)(v15 + 4);
        uint64_t v18 = (v16 >> 2) & 1;
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v18 = 1;
      }
      int v19 = *v6 ? *(_DWORD *)(*v6 + 4) : 0;
      uint64_t v76 = v17;
      v77[0] = v15 | (v18 << 32);
      isEmptyOrDeletedBucket = WTF::StringView::endsWithIgnoringASCIICase();
      if (isEmptyOrDeletedBucket) {
        break;
      }
LABEL_24:
      while (++v11 != v13)
      {
        if ((unint64_t)(*v11 + 1) > 1) {
          goto LABEL_28;
        }
      }
      uint64_t v11 = v13;
LABEL_28:
      if (v11 == (uint64_t *)v14) {
        goto LABEL_32;
      }
    }
    if (LODWORD(v77[0]) == v19) {
      goto LABEL_63;
    }
    unsigned int v20 = LODWORD(v77[0]) + ~v19;
    if (!BYTE4(v77[0]))
    {
      if (LODWORD(v77[0]) > v20)
      {
        int v21 = *(unsigned __int16 *)(v76 + 2 * v20);
        goto LABEL_23;
      }
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    if (LODWORD(v77[0]) <= v20) {
      goto LABEL_81;
    }
    int v21 = *(unsigned __int8 *)(v76 + v20);
LABEL_23:
    if (v21 != 46) {
      goto LABEL_24;
    }
LABEL_63:
    unsigned int v35 = HIDWORD(v81);
    if (HIDWORD(v81) == v81)
    {
      unint64_t v36 = WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v80, HIDWORD(v81) + 1, v4);
      unsigned int v37 = HIDWORD(v81);
      uint64_t v38 = v80;
      uint64_t v39 = v80 + 80 * HIDWORD(v81);
      uint64_t v40 = *(void *)v36;
      *(void *)unint64_t v36 = 0;
      *(void *)uint64_t v39 = v40;
      *(_DWORD *)(v39 + 8) = *(_DWORD *)(v36 + 8);
      *(unsigned char *)(v39 + ++*(_DWORD *)(this + 16) = 0;
      uint64_t v41 = (void *)(v39 + 16);
      *(unsigned char *)(v39 + 32) = 0;
      uint64_t v42 = (unsigned char *)(v39 + 32);
      if (*(unsigned char *)(v36 + 32))
      {
        *uint64_t v41 = *(void *)(v36 + 16);
        uint64_t v43 = v38 + 80 * v37;
        *(void *)(v43 + 24) = 0;
        uint64_t v44 = *(void *)(v36 + 24);
        *(void *)(v36 + 24) = 0;
        *(void *)(v43 + 24) = v44;
        *uint64_t v42 = 1;
      }
      int v45 = (void *)(v38 + 80 * v37);
      v45[5] = 0;
      uint64_t v46 = *(void *)(v36 + 40);
      *(void *)(v36 + ++*(_DWORD *)(this + 40) = 0;
      v45[5] = v46;
      v45[6] = 0;
      uint64_t v47 = *(void *)(v36 + 48);
      *(void *)(v36 + 48) = 0;
      v45[6] = v47;
      v45[7] = 0;
      uint64_t v48 = *(void *)(v36 + 56);
      *(void *)(v36 + 56) = 0;
      v45[7] = v48;
      v45[8] = 0;
      uint64_t v49 = *(void *)(v36 + 64);
      *(void *)(v36 + 64) = 0;
      v45[8] = v49;
      unint64_t v50 = v45 + 9;
    }
    else
    {
      uint64_t v51 = v80;
      uint64_t v52 = v80 + 80 * HIDWORD(v81);
      uint64_t v53 = *(void *)v4;
      *(void *)unint64_t v4 = 0;
      *(void *)uint64_t v52 = v53;
      *(_DWORD *)(v52 + 8) = *(_DWORD *)(v4 + 8);
      *(unsigned char *)(v52 + ++*(_DWORD *)(this + 16) = 0;
      uint64_t v54 = (void *)(v52 + 16);
      *(unsigned char *)(v52 + 32) = 0;
      uint64_t v55 = (unsigned char *)(v52 + 32);
      if (*(unsigned char *)(v4 + 32))
      {
        void *v54 = *(void *)(v4 + 16);
        uint64_t v56 = v51 + 80 * v35;
        *(void *)(v56 + 24) = 0;
        uint64_t v57 = *(void *)(v4 + 24);
        *(void *)(v4 + 24) = 0;
        *(void *)(v56 + 24) = v57;
        unsigned char *v55 = 1;
      }
      uint64_t v58 = (void *)(v51 + 80 * v35);
      v58[5] = 0;
      uint64_t v59 = *(void *)(v4 + 40);
      *(void *)(v4 + ++*(_DWORD *)(this + 40) = 0;
      v58[5] = v59;
      v58[6] = 0;
      uint64_t v60 = *(void *)(v4 + 48);
      *(void *)(v4 + 48) = 0;
      v58[6] = v60;
      v58[7] = 0;
      uint64_t v61 = *(void *)(v4 + 56);
      *(void *)(v4 + 56) = 0;
      v58[7] = v61;
      v58[8] = 0;
      uint64_t v62 = *(void *)(v4 + 64);
      *(void *)(v4 + 64) = 0;
      v58[8] = v62;
      unint64_t v50 = v58 + 9;
      unint64_t v36 = v4;
    }
    *unint64_t v50 = 0;
    uint64_t v63 = *(void *)(v36 + 72);
    *(void *)(v36 + 72) = 0;
    *unint64_t v50 = v63;
    ++HIDWORD(v81);
    WebCore::RegistrableDomain::isolatedCopy(&v78);
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v79, &v78, (uint64_t)&v76);
    isEmptyOrDeletedBucket = (uint64_t)v78;
    size_t v78 = 0;
    if (isEmptyOrDeletedBucket)
    {
      if (*(_DWORD *)isEmptyOrDeletedBucket == 2) {
        isEmptyOrDeletedBucket = WTF::StringImpl::destroy((WTF::StringImpl *)isEmptyOrDeletedBucket, v64);
      }
      else {
        *(_DWORD *)isEmptyOrDeletedBucket -= 2;
      }
    }
LABEL_74:
    v4 += 80;
  }
  while (v4 != v75);
LABEL_75:
  WTF::RunLoop::main((WTF::RunLoop *)isEmptyOrDeletedBucket);
  uint64_t v65 = v2[3];
  v2[3] = 0;
  uint64_t v2 = v77;
  uint64_t v67 = v79;
  uint64_t v66 = v80;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  uint64_t v68 = v81;
  uint64_t v81 = 0;
  int v69 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
  *(void *)int v69 = &unk_1EE9E5FC8;
  *((void *)v69 + 1) = v65;
  uint64_t v76 = 0;
  v77[0] = 0;
  *((void *)v69 + 2) = v66;
  v77[1] = 0;
  *((void *)v69 + 3) = v68;
  v77[2] = 0;
  size_t v78 = v69;
  *((void *)v69 + 4) = v67;
  WTF::RunLoop::dispatch();
  isEmptyOrDeletedBucket = (uint64_t)v78;
  size_t v78 = 0;
  if (isEmptyOrDeletedBucket) {
LABEL_82:
  }
    (*(void (**)(uint64_t))(*(void *)isEmptyOrDeletedBucket + 8))(isEmptyOrDeletedBucket);
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2, v70);
  uint64_t v72 = v76;
  uint64_t v76 = 0;
  if (v72) {
    (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
  }
  if (v79) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v79, v71);
  }
  return WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v80, v71);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit16WebsiteDataStore30fetchDataForRegistrableDomainsENS_9OptionSetINS2_15WebsiteDataTypeEEENS4_INS2_22WebsiteDataFetchOptionEEEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_INS2_17WebsiteDataRecordELm0ESC_Lm16ESD_EEONS_7HashSetISB_NS_11DefaultHashISB_EENS_10HashTraitsISB_EENS_15HashTableTraitsEEEEEEEN3__0clISI_EEDaOT_EUlvE_vJEED1Ev(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9E5FC8;
  unsigned int v3 = (WTF::StringImpl **)a1[4];
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit16WebsiteDataStore30fetchDataForRegistrableDomainsENS_9OptionSetINS2_15WebsiteDataTypeEEENS4_INS2_22WebsiteDataFetchOptionEEEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_INS2_17WebsiteDataRecordELm0ESC_Lm16ESD_EEONS_7HashSetISB_NS_11DefaultHashISB_EENS_10HashTraitsISB_EENS_15HashTableTraitsEEEEEEEN3__0clISI_EEDaOT_EUlvE_vJEED0Ev(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9E5FC8;
  unsigned int v3 = (WTF::StringImpl **)*((void *)a1 + 4);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  uint64_t v5 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(a1, v4);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit16WebsiteDataStore30fetchDataForRegistrableDomainsENS_9OptionSetINS2_15WebsiteDataTypeEEENS4_INS2_22WebsiteDataFetchOptionEEEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_INS2_17WebsiteDataRecordELm0ESC_Lm16ESD_EEONS_7HashSetISB_NS_11DefaultHashISB_EENS_10HashTraitsISB_EENS_15HashTableTraitsEEEEEEEN3__0clISI_EEDaOT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 16, a1 + 32);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E5FF0;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E5FF0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    int v5 = 134217984;
    uint64_t v6 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "WebsiteDataStore::removeData finished deleting modified data for session %llu", (uint8_t *)&v5, 0xCu);
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_1,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9E6018;
  uint64_t v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9E6018;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_1,void>::call(uint64_t a1)
{
  return MEMORY[0x1F416E758](a1 + 16, *(double *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_2,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E6040;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E6040;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_3,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E6068;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_3,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E6068;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_4,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E6090;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_4,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E6090;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_5,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9E60B8;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_5,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9E60B8;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_5,void>::call(uint64_t a1, const WTF::String *a2)
{
  double v2 = *(double *)(a1 + 24);
  WTF::FileSystemImpl::listDirectory(&v17, (WTF::FileSystemImpl *)(a1 + 8), a2);
  if (v18)
  {
    uint64_t v4 = v17;
    uint64_t v5 = 8 * v18;
    do
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      WebKit::computeMediaKeyFile((WebKit *)&v15, v16);
      double v7 = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)&v15, v6));
      if ((_BYTE)v3 && v2 <= v7)
      {
        WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v15, v3);
        WTF::FileSystemImpl::pathByAppendingComponent();
        WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v14, v8);
        uint64_t v10 = v14;
        uint64_t v14 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v9);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
        WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v16, v9);
      }
      uint64_t v11 = v15;
      uint64_t v15 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v3);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      unsigned int v12 = v16;
      unint64_t v16 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v3);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      v4 += 8;
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v3);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_6,void>::~CallableWrapper(void *a1)
{
  double v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E60E0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_6,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E60E0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_7,void>::~CallableWrapper(void *a1)
{
  double v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E6108;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_7,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E6108;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_8,void>::~CallableWrapper(void *a1)
{
  double v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E6130;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_8,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E6130;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E6158;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E6158;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    int v5 = 134217984;
    uint64_t v6 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "WebsiteDataStore::removeData finished deleting data for session %llu", (uint8_t *)&v5, 0xCu);
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_1,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9E6180;
  uint64_t v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[1];
  if (v5) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9E6180;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v5, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_1,void>::call(uint64_t a1)
{
  return MEMORY[0x1F416E7A8](a1 + 16, a1 + 8);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_2,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E61A8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E61A8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v4);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_3,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E61D0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_3,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E61D0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_4,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E61F8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_4,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E61F8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_5,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E6220;
  uint64_t v3 = a1[4];
  if (v3) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_5,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E6220;
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_5,void>::call(uint64_t a1)
{
  uint64_t result = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)(a1 + 32));
  uint64_t v3 = result;
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    uint64_t v7 = (WebCore::SecurityOriginData *)(v6 + 32 * *(unsigned int *)(v6 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != result)
  {
    do
    {
      WebCore::StorageUtilities::encodeSecurityOriginForFileName();
      WTF::FileSystemImpl::pathByAppendingComponent();
      WebKit::computeMediaKeyFile((WebKit *)&v16, v17);
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v16, v8);
      WTF::FileSystemImpl::pathByAppendingComponent();
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v15, v9);
      uint64_t v11 = v15;
      uint64_t v15 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v17, v10);
      uint64_t v13 = v16;
      unint64_t v16 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      uint64_t v14 = v17;
      uint64_t v17 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      uint64_t result = v18;
      unsigned int v18 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      while (1)
      {
        uint64_t v3 = (WebCore::SecurityOriginData *)((char *)v3 + 32);
        if (v3 == v5) {
          break;
        }
        uint64_t result = (WTF::StringImpl *)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v3);
        if (!result) {
          goto LABEL_24;
        }
      }
      uint64_t v3 = v5;
LABEL_24:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::NetworkProcess::SetServiceWorkerFetchTimeoutForTesting>@<X0>(uint64_t a1@<X0>, double **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v22 = 0;
  IPC::Connection::createSyncMessageEncoder(3622, a3, &v22, &v21);
  uint64_t v11 = v21;
  if (a4)
  {
    **((unsigned char **)v21 + 66) |= 4u;
    *(unsigned char *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v11, **a2);
  IPC::Connection::sendSyncMessage(a1, v22, (uint64_t *)&v21, a4, (uint64_t)&v19, a6);
  uint64_t v12 = v20;
  if (v20)
  {
    if (v20 != 1)
    {
      uint64_t v18 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::Connection::sendSync<Messages::NetworkProcess::ResetServiceWorkerFetchTimeoutForTesting>(v18);
    }
    *(unsigned char *)a5 = v19;
  }
  else
  {
    uint64_t v13 = v19;
    uint64_t v19 = 0;
    *(void *)a5 = v13;
  }
  *(_DWORD *)(a5 + ++*(_DWORD *)(this + 16) = v12;
  ((void (*)(char *, uint64_t *))off_1EE9E6238[v12])(&v23, &v19);
  uint64_t result = v21;
  int v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::NetworkProcess::ResetServiceWorkerFetchTimeoutForTesting>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v19 = 0;
  IPC::Connection::createSyncMessageEncoder(3620, a2, &v19, &v18);
  if (a3)
  {
    **((unsigned char **)v18 + 66) |= 4u;
    *(unsigned char *)(a1 + 96) = 1;
  }
  IPC::Connection::sendSyncMessage(a1, v19, (uint64_t *)&v18, a3, (uint64_t)&v16, a5);
  uint64_t v9 = v17;
  if (v17)
  {
    if (v17 != 1)
    {
      uint64_t v15 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String const&)>,void,WTF::String>::~CallableWrapper(v15);
    }
    *(unsigned char *)a4 = v16;
  }
  else
  {
    uint64_t v10 = v16;
    uint64_t v16 = 0;
    *(void *)a4 = v10;
  }
  *(_DWORD *)(a4 + ++*(_DWORD *)(this + 16) = v9;
  ((void (*)(char *, uint64_t *))off_1EE9E6238[v9])(&v20, &v16);
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String const&)>,void,WTF::String>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E6258;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String const&)>,void,WTF::String>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E6258;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String const&)>,void,WTF::String>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator() const(void)::{lambda(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},void,WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E62A8;
  WTF::Ref<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::LocalCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref((WTF **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator() const(void)::{lambda(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},void,WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF **a1)
{
  *a1 = (WTF *)&unk_1EE9E62A8;
  WTF::Ref<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::LocalCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator() const(void)::{lambda(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},void,WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(uint64_t result, uint64_t **a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *((unsigned int *)a2 + 3);
  unint64_t v5 = *(unsigned int *)(v3 + 24);
  unint64_t v6 = v4 + *(unsigned int *)(v3 + 28);
  if (v6 > v5)
  {
    unint64_t v7 = v5 + (v5 >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 <= v6) {
      unint64_t v9 = v4 + *(unsigned int *)(v3 + 28);
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t result = WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v3 + 16, v9);
    LODWORD(v4) = *((_DWORD *)a2 + 3);
  }
  if (v4)
  {
    uint64_t v10 = *a2;
    uint64_t v11 = (uint64_t)&(*a2)[3 * v4];
    unsigned int v12 = *(_DWORD *)(v3 + 28);
    do
    {
      uint64_t v13 = *(void *)(v3 + 16) + 24 * v12;
      uint64_t v14 = *v10;
      uint64_t *v10 = 0;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + ++*(_DWORD *)(this + 16) = 0;
      *(void *)uint64_t v13 = v14;
      uint64_t v15 = v10[1];
      v10[1] = 0;
      *(void *)(v13 + 8) = v15;
      LODWORD(v15) = *((_DWORD *)v10 + 4);
      *((_DWORD *)v10 + 4) = 0;
      *(_DWORD *)(v13 + ++*(_DWORD *)(this + 16) = v15;
      LODWORD(v15) = *((_DWORD *)v10 + 5);
      *((_DWORD *)v10 + 5) = 0;
      *(_DWORD *)(v13 + 20) = v15;
      unsigned int v12 = *(_DWORD *)(v3 + 28) + 1;
      *(_DWORD *)(v3 + 28) = v12;
      v10 += 3;
    }
    while (v10 != (uint64_t *)v11);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E62D0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

_DWORD *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RegistrableDomain const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RegistrableDomain const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, *(void *)(a2 + 8));
  uint64_t v4 = *(uint64_t **)(a2 + 16);

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GrantStorageAccessForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E62F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GrantStorageAccessForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E62F8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GrantStorageAccessForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E6320;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E6320;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode(WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E6348;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode(WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E6348;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode(WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9E6370;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode(WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E6370;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SyncLocalStorage,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E6398;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SyncLocalStorage,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E6398;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SyncLocalStorage,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::StoreServiceWorkerRegistrations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E63C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::StoreServiceWorkerRegistrations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E63C0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::StoreServiceWorkerRegistrations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&,WebKit::WebsiteDataStore::ShouldRetryOnFailure)::$_0,void,WebKit::NetworkProcessConnectionInfo &>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E63E8;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  unint64_t v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  unint64_t v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&,WebKit::WebsiteDataStore::ShouldRetryOnFailure)::$_0::operator()(WebKit::NetworkProcessConnectionInfo &)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E6410;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  unint64_t v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  unint64_t v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&,WebKit::WebsiteDataStore::ShouldRetryOnFailure)::$_0::operator()(WebKit::NetworkProcessConnectionInfo &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E6410;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  unint64_t v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  unint64_t v6 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&,WebKit::WebsiteDataStore::ShouldRetryOnFailure)::$_0::operator()(WebKit::NetworkProcessConnectionInfo &)::{lambda(void)#1},void>::call(void *a1)
{
  uint64_t v2 = a1[1];
  if (!v2)
  {
    uint64_t v11 = a1[3];
    if (v11)
    {
      uint64_t v6 = *(void *)(v11 + 8);
      BOOL v4 = 1;
      uint64_t v3 = 0;
      if (v6)
      {
        char v7 = 0;
        atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v6 = 0;
      BOOL v4 = 1;
    }
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  BOOL v4 = v3 == 0;
  if (v3) {
    CFRetain(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v5 = a1[3];
  if (!v5)
  {
    uint64_t v6 = 0;
LABEL_20:
    char v7 = 1;
    goto LABEL_21;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  char v7 = 1;
  if (v6)
  {
    atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
    if (v3)
    {
      uint64_t v8 = a1[2];
      if (v8)
      {
        uint64_t v9 = *(void *)(v8 + 8);
        if (v9)
        {
          if (*(void *)(v3 + 400) == v9) {
            WebKit::WebsiteDataStore::terminateNetworkProcess((unsigned int *)v3);
          }
        }
      }
      uint64_t v10 = qword_1EB358960;
      if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v14) = 0;
        _os_log_error_impl(&dword_1985F2000, v10, OS_LOG_TYPE_ERROR, "getNetworkProcessConnection: Failed to get connection to network process, will retry ...", (uint8_t *)&v14, 2u);
      }
      WebKit::WebsiteDataStore::getNetworkProcessConnection((unsigned int *)v3, v6, a1 + 4, 0);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
LABEL_26:
      CFRelease(*(CFTypeRef *)(v3 + 8));
      return;
    }
    char v7 = 0;
    BOOL v4 = 1;
  }
LABEL_21:
  unsigned int v12 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v14) = 0;
    _os_log_error_impl(&dword_1985F2000, v12, OS_LOG_TYPE_ERROR, "getNetworkProcessConnection: Failed to get connection to network process, will reply invalid identifier ...", (uint8_t *)&v14, 2u);
  }
  int v14 = 0;
  char v15 = 0;
  char v16 = 0;
  char v17 = 0;
  uint64_t v13 = a1[4];
  a1[4] = 0;
  (*(void (**)(uint64_t, int *))(*(void *)v13 + 16))(v13, &v14);
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v14);
  if ((v7 & 1) == 0) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  }
  if (!v4) {
    goto LABEL_26;
  }
}