void sub_1992D4810(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,void *a43,int a44,int a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,WTF::StringImpl *a55,WTF::StringImpl *a56,WTF::StringImpl *a57,WTF::StringImpl *a58)
{
  WTF::StringImpl *v58;
  void *v59;
  void *v60;
  uint64_t v62;
  char *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;

  v62 = 400;
  while (1)
  {
    v63 = (char *)&STACK[0x370] + v62;
    v64 = *(WTF::StringImpl **)((char *)&STACK[0x370] + v62 - 8);
    *(unint64_t *)((char *)&STACK[0x370] + v62 - 8) = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2) {
        WTF::StringImpl::destroy(v64, a2);
      }
      else {
        *(_DWORD *)v64 -= 2;
      }
    }
    v65 = (WTF::StringImpl *)*((void *)v63 - 2);
    *((void *)v63 - 2) = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2) {
        WTF::StringImpl::destroy(v65, a2);
      }
      else {
        *(_DWORD *)v65 -= 2;
      }
    }
    v62 -= 16;
    if (!v62)
    {

      if (a55)
      {
        if (*(_DWORD *)a55 == 2) {
          WTF::StringImpl::destroy(a55, v66);
        }
        else {
          *(_DWORD *)a55 -= 2;
        }
      }

      if (a58)
      {
        if (*(_DWORD *)a58 == 2) {
          WTF::StringImpl::destroy(a58, v67);
        }
        else {
          *(_DWORD *)a58 -= 2;
        }
      }
      if (a57)
      {
        if (*(_DWORD *)a57 == 2) {
          WTF::StringImpl::destroy(a57, v67);
        }
        else {
          *(_DWORD *)a57 -= 2;
        }
      }
      if (a56)
      {
        if (*(_DWORD *)a56 == 2) {
          WTF::StringImpl::destroy(a56, v67);
        }
        else {
          *(_DWORD *)a56 -= 2;
        }
      }

      if (a45 && v58)
      {
        if (*(_DWORD *)v58 == 2) {
          WTF::StringImpl::destroy(v58, v68);
        }
        else {
          *(_DWORD *)v58 -= 2;
        }
      }

      _Unwind_Resume(a1);
    }
  }
}

void WebKit::WebExtension::populateDeclarativeNetRequestPropertiesIfNeeded(WebKit::WebExtension *this)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  BOOL v2 = WebKit::WebExtension::manifestParsedSuccessfully(this);
  if (!v2 || (*((_WORD *)this + 176) & 0x2000) != 0) {
    return;
  }
  v101 = this;
  *((_WORD *)this + 176) |= 0x2000u;
  WebKit::WebExtension::supportedPermissions((WebKit::WebExtension *)v2);
  v3 = (WTF *)MEMORY[0x19972EAD0](&v103, @"declarativeNetRequest");
  uint64_t v5 = qword_1E93CF998;
  if (qword_1E93CF998)
  {
    int v83 = *(_DWORD *)(qword_1E93CF998 - 8);
    unsigned int v84 = *((_DWORD *)v103 + 4);
    if (v84 >= 0x100) {
      unsigned int v85 = v84 >> 8;
    }
    else {
      unsigned int v85 = WTF::StringImpl::hashSlowCase(v103);
    }
    for (i = 0; ; unsigned int v85 = i + v90)
    {
      int v90 = v85 & v83;
      v3 = *(WTF **)(v5 + 8 * (v85 & v83));
      if (v3 != (WTF *)-1)
      {
        if (!v3) {
          goto LABEL_4;
        }
        if (WTF::equal(v3, v103, v4)) {
          break;
        }
      }
      ++i;
    }
    int v10 = 0;
  }
  else
  {
LABEL_4:
    WebKit::WebExtension::supportedPermissions(v3);
    MEMORY[0x19972EAD0](&v119, @"declarativeNetRequestWithHostAccess");
    uint64_t v8 = qword_1E93CF998;
    v9 = (WTF::StringImpl *)v119;
    if (qword_1E93CF998)
    {
      int v86 = *(_DWORD *)(qword_1E93CF998 - 8);
      unsigned int data = v119->data;
      if (data >= 0x100) {
        unsigned int v88 = data >> 8;
      }
      else {
        unsigned int v88 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v119);
      }
      for (j = 0; ; unsigned int v88 = j + v92)
      {
        int v92 = v88 & v86;
        v93 = *(WTF **)(v8 + 8 * (v88 & v86));
        if (v93 != (WTF *)-1)
        {
          if (!v93)
          {
            int v10 = 1;
            goto LABEL_147;
          }
          if (WTF::equal(v93, (const WTF::StringImpl *)v119, v7)) {
            break;
          }
        }
        ++j;
      }
      int v10 = 0;
LABEL_147:
      v9 = (WTF::StringImpl *)v119;
    }
    else
    {
      int v10 = 1;
    }
    v119 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v6);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  v11 = v103;
  v103 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v6);
      if (v10) {
        goto LABEL_14;
      }
LABEL_20:
      v16 = (id *)((char *)v101 + 152);
      v95 = WebKit::objectForKey<NSDictionary>((id *)v101 + 19, @"declarative_net_request", 1, 0);
      if (v95)
      {
        uint64_t v17 = objc_opt_class();
        v18 = WebKit::objectForKey<NSArray>(v95, @"rule_resources", 0, v17);
        v94 = v18;
        if (v18)
        {
          if ((unint64_t)[v18 count] >= 0x65)
          {
            id v20 = v103 ? (id)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
            WebKit::WebExtension::createError((id *)v101, 13, v20, 0);
            v21 = (NSError *)objc_claimAutoreleasedReturnValue();
            WebKit::WebExtension::recordError((const void **)v101, v21);

            v23 = v103;
            v103 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2) {
                WTF::StringImpl::destroy(v23, v22);
              }
              else {
                *(_DWORD *)v23 -= 2;
              }
            }
          }
          v111 = 0;
          long long v107 = 0u;
          long long v108 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          v32 = v94;
          obint j = v32;
          uint64_t v33 = [(NSError *)v32 countByEnumeratingWithState:&v107 objects:v116 count:16];
          if (v33)
          {
            unint64_t v34 = 0;
            uint64_t v98 = 0;
            char v97 = 0;
            uint64_t v100 = *(void *)v108;
            v96 = (uint64_t *)((char *)v101 + 72);
            do
            {
              uint64_t v102 = v33;
              for (uint64_t k = 0; k != v102; ++k)
              {
                if (*(void *)v108 != v100) {
                  objc_enumerationMutation(obj);
                }
                if (v34 <= 0x63)
                {
                  id v36 = *(id *)(*((void *)&v107 + 1) + 8 * k);
                  v119 = @"id";
                  v120 = @"enabled";
                  v121 = @"path";
                  v37 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v119 count:3];
                  v117[0] = @"id";
                  v118[0] = objc_opt_class();
                  v117[1] = @"enabled";
                  v118[1] = objc_opt_class();
                  v117[2] = @"path";
                  v118[2] = objc_opt_class();
                  v38 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v118 forKeys:v117 count:3];
                  id v115 = 0;
                  BOOL v39 = WebKit::validateDictionary(v36, 0, v37, v38, &v115);
                  id v40 = v115;
                  if (v39)
                  {
                    v41 = WebKit::objectForKey<NSString>(v36, @"id", 1);
                    if ([v41 length])
                    {
                      v43 = WebKit::objectForKey<NSString>(v36, @"path", 1);
                      if ([v43 length])
                      {
                        MEMORY[0x19972EAD0](&v112, v41);
                        v45 = WebKit::objectForKey<NSNumber>(v36, @"enabled");
                        unsigned __int8 v113 = [v45 BOOLValue];
                        MEMORY[0x19972EAD0](&v114, v43);

                        id v46 = 0;
                        v103 = v112;
                        unsigned __int8 v104 = v113;
                        v105 = v114;
                        char v106 = 1;
                      }
                      else
                      {
                        if (v112) {
                          v50 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
                        }
                        else {
                          v50 = &stru_1EEA10550;
                        }
                        WebKit::WebExtension::createError((id *)v101, 13, v50, 0);
                        id v46 = (id)objc_claimAutoreleasedReturnValue();

                        v52 = v112;
                        v112 = 0;
                        if (v52)
                        {
                          if (*(_DWORD *)v52 == 2) {
                            WTF::StringImpl::destroy(v52, v51);
                          }
                          else {
                            *(_DWORD *)v52 -= 2;
                          }
                        }
                        LOBYTE(v103) = 0;
                        char v106 = 0;
                      }
                    }
                    else
                    {
                      if (v112) {
                        v47 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
                      }
                      else {
                        v47 = &stru_1EEA10550;
                      }
                      WebKit::WebExtension::createError((id *)v101, 13, v47, 0);
                      id v46 = (id)objc_claimAutoreleasedReturnValue();

                      v49 = v112;
                      v112 = 0;
                      if (v49)
                      {
                        if (*(_DWORD *)v49 == 2) {
                          WTF::StringImpl::destroy(v49, v48);
                        }
                        else {
                          *(_DWORD *)v49 -= 2;
                        }
                      }
                      LOBYTE(v103) = 0;
                      char v106 = 0;
                    }
                  }
                  else
                  {
                    WebKit::WebExtension::createError((id *)v101, 13, v40, 0);
                    id v46 = (id)objc_claimAutoreleasedReturnValue();
                    LOBYTE(v103) = 0;
                    char v106 = 0;
                  }

                  id v55 = v46;
                  if (v106)
                  {
                    v56 = v103;
                    if (v103) {
                      *(_DWORD *)v103 += 2;
                    }
                    v119 = (__CFString *)v56;
                    int v57 = v104;
                    LOBYTE(v120) = v104;
                    v58 = v105;
                    if (v105) {
                      LODWORD(v105->isa) += 2;
                    }
                    v121 = v58;
                    v59 = v111;
                    if (v111)
                    {
                      int v71 = *((_DWORD *)v111 - 2);
                      unsigned int v72 = *((_DWORD *)v56 + 4);
                      if (v72 >= 0x100) {
                        unsigned int v73 = v72 >> 8;
                      }
                      else {
                        unsigned int v73 = WTF::StringImpl::hashSlowCase(v56);
                      }
                      for (m = 0; ; unsigned int v73 = m + v75)
                      {
                        int v75 = v73 & v71;
                        v76 = v59[v73 & v71];
                        if (v76 != (WTF *)-1)
                        {
                          if (!v76)
                          {
                            if ((_BYTE)v120) {
                              goto LABEL_69;
                            }
                            goto LABEL_70;
                          }
                          if (WTF::equal(v76, (const WTF::StringImpl *)v119, v54))
                          {
                            if (v119) {
                              v77 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
                            }
                            else {
                              v77 = &stru_1EEA10550;
                            }
                            if (v118[0]) {
                              v78 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
                            }
                            else {
                              v78 = &stru_1EEA10550;
                            }
                            WebKit::WebExtension::createError((id *)v101, 13, v78, 0);
                            v79 = (NSError *)objc_claimAutoreleasedReturnValue();
                            WebKit::WebExtension::recordError((const void **)v101, v79);

                            v81 = (WTF::StringImpl *)v118[0];
                            v118[0] = 0;
                            if (v81)
                            {
                              if (*(_DWORD *)v81 == 2) {
                                WTF::StringImpl::destroy(v81, v80);
                              }
                              else {
                                *(_DWORD *)v81 -= 2;
                              }
                            }

                            goto LABEL_86;
                          }
                        }
                        ++m;
                      }
                    }
                    if (!v57) {
                      goto LABEL_70;
                    }
LABEL_69:
                    if (((unint64_t)++v98 < 0x33) | v97 & 1)
                    {
LABEL_70:
                      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v111, (WTF::StringImpl **)&v119, v54, (uint64_t)v118);
                      unsigned int v61 = *((_DWORD *)v101 + 21);
                      if (v61 == *((_DWORD *)v101 + 20))
                      {
                        WTF::Vector<WebKit::WebExtension::DeclarativeNetRequestRulesetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::DeclarativeNetRequestRulesetData&>((uint64_t)v96, (unint64_t)&v119);
                      }
                      else
                      {
                        uint64_t v63 = *v96;
                        v64 = v119;
                        if (v119) {
                          LODWORD(v119->isa) += 2;
                        }
                        *(void *)(v63 + 24 * v61) = v64;
                        *(unsigned char *)(v63 + 24 * v61 + 8) = (_BYTE)v120;
                        v65 = v121;
                        if (v121) {
                          LODWORD(v121->isa) += 2;
                        }
                        *(void *)(v63 + 24 * v61 + 16) = v65;
                        *((_DWORD *)v101 + 21) = v61 + 1;
                      }
                      ++v34;
                    }
                    else
                    {
                      if (v118[0]) {
                        v66 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
                      }
                      else {
                        v66 = &stru_1EEA10550;
                      }
                      WebKit::WebExtension::createError((id *)v101, 13, v66, 0);
                      v67 = (NSError *)objc_claimAutoreleasedReturnValue();
                      WebKit::WebExtension::recordError((const void **)v101, v67);

                      v68 = (WTF::StringImpl *)v118[0];
                      v118[0] = 0;
                      if (v68)
                      {
                        if (*(_DWORD *)v68 == 2) {
                          WTF::StringImpl::destroy(v68, v60);
                        }
                        else {
                          *(_DWORD *)v68 -= 2;
                        }
                      }
                      char v97 = 1;
                    }
LABEL_86:
                    v69 = (WTF::StringImpl *)v121;
                    v121 = 0;
                    if (v69)
                    {
                      if (*(_DWORD *)v69 == 2) {
                        WTF::StringImpl::destroy(v69, v60);
                      }
                      else {
                        *(_DWORD *)v69 -= 2;
                      }
                    }
                    v70 = (WTF::StringImpl *)v119;
                    v119 = 0;
                    if (v70)
                    {
                      if (*(_DWORD *)v70 == 2) {
                        WTF::StringImpl::destroy(v70, v60);
                      }
                      else {
                        *(_DWORD *)v70 -= 2;
                      }
                    }
                  }
                  else
                  {
                    WebKit::WebExtension::createError((id *)v101, 13, 0, v55);
                    v62 = (NSError *)objc_claimAutoreleasedReturnValue();
                    WebKit::WebExtension::recordError((const void **)v101, v62);
                  }
                  std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v103, v60);
                }
              }
              v32 = obj;
              uint64_t v33 = [(NSError *)obj countByEnumeratingWithState:&v107 objects:v116 count:16];
            }
            while (v33);
          }

          if (v111) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v111, v82);
          }
          v27 = obj;
        }
        else
        {
          v28 = WTF::RetainPtr<NSSet>::get(v16);
          v29 = [v28 objectForKey:@"declarative_net_request"];
          BOOL v30 = v29 == 0;

          if (!v30)
          {
            WebKit::WebExtension::createError((id *)v101, 13, 0, 0);
            v31 = (NSError *)objc_claimAutoreleasedReturnValue();
            WebKit::WebExtension::recordError((const void **)v101, v31);
          }
          v27 = 0;
        }
      }
      else
      {
        v24 = WTF::RetainPtr<NSSet>::get(v16);
        v25 = [v24 objectForKey:@"declarative_net_request"];
        BOOL v26 = v25 == 0;

        if (v26)
        {
LABEL_126:

          return;
        }
        WebKit::WebExtension::createError((id *)v101, 13, 0, 0);
        v27 = (NSError *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((const void **)v101, v27);
      }

      goto LABEL_126;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (!v10) {
    goto LABEL_20;
  }
LABEL_14:
  if (v103) {
    v12 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    v12 = &stru_1EEA10550;
  }
  WebKit::WebExtension::createError((id *)v101, 13, v12, 0);
  v13 = (NSError *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtension::recordError((const void **)v101, v13);

  v15 = v103;
  v103 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
}

void sub_1992D5AFC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,WTF::StringImpl *a34)
{
  id v36 = *(WTF::StringImpl **)(v34 - 120);
  *(void *)(v34 - 120) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, a2);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, a2);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtension::populateExternallyConnectableIfNeeded(WebKit::WebExtension *this)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (WebKit::WebExtension::manifestParsedSuccessfully(this) && (*((_WORD *)this + 176) & 0x4000) == 0)
  {
    *((_WORD *)this + 176) |= 0x4000u;
    BOOL v2 = WebKit::objectForKey<NSDictionary>((id *)this + 19, @"externally_connectable", 0, 0);
    v3 = v2;
    if (v2)
    {
      if ([v2 count])
      {
        v32 = 0;
        uint64_t v4 = objc_opt_class();
        WebKit::objectForKey<NSArray>(v3, @"matches", 1, v4);
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        id v5 = (id)objc_claimAutoreleasedReturnValue();
        char v6 = 0;
        uint64_t v7 = [v5 countByEnumeratingWithState:&v28 objects:v33 count:16];
        if (v7)
        {
          uint64_t v8 = *(void *)v29;
          do
          {
            for (uint64_t i = 0; i != v7; ++i)
            {
              if (*(void *)v29 != v8) {
                objc_enumerationMutation(v5);
              }
              int v10 = *(void **)(*((void *)&v28 + 1) + 8 * i);
              if ([v10 length])
              {
                MEMORY[0x19972EAD0](v25, v10);
                WebKit::WebExtensionMatchPattern::getOrCreate(v25, v11, (uint64_t *)&v27);
                v13 = v25[0];
                v25[0] = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 2) {
                    WTF::StringImpl::destroy(v13, v12);
                  }
                  else {
                    *(_DWORD *)v13 -= 2;
                  }
                }
                v14 = v27;
                if (v27)
                {
                  if (*((unsigned char *)v27 + 48))
                  {
                    v27 = 0;
                    char v6 = 1;
LABEL_25:
                    CFRelease(*((CFTypeRef *)v14 + 1));
                    continue;
                  }
                  char isSupported = WebKit::WebExtensionMatchPattern::isSupported(v27);
                  v14 = v27;
                  if ((isSupported & 1) != 0
                    && (char IsPublicSuffix = WebKit::WebExtensionMatchPattern::hostIsPublicSuffix(v27),
                        v14 = v27,
                        (IsPublicSuffix & 1) == 0))
                  {
                    BOOL v26 = v27;
                    v27 = 0;
                    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v32, (uint64_t *)&v26, (uint64_t)v25);
                    uint64_t v17 = (uint64_t)v26;
                    BOOL v26 = 0;
                    if (v17) {
                      CFRelease(*(CFTypeRef *)(v17 + 8));
                    }
                    v14 = v27;
                  }
                  else
                  {
                    char v6 = 1;
                  }
                  v27 = 0;
                  if (v14) {
                    goto LABEL_25;
                  }
                }
              }
            }
            uint64_t v7 = [v5 countByEnumeratingWithState:&v28 objects:v33 count:16];
          }
          while (v7);
        }

        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::operator=((uint64_t **)this + 15, &v32);
        uint64_t v18 = objc_opt_class();
        CFStringRef v19 = WebKit::objectForKey<NSArray>(v3, @"ids", 1, v18);
        id v20 = WebKit::filterObjects<NSArray>(v19, &__block_literal_global_341);

        v21 = v20;
        if ((v6 & 1) != 0 || (!v32 || !*((_DWORD *)v32 - 3)) && ![v20 count])
        {
          WebKit::WebExtension::createError((id *)this, 15, 0, 0);
          v22 = (NSError *)objc_claimAutoreleasedReturnValue();
          WebKit::WebExtension::recordError((const void **)this, v22);
        }
        if (v32) {
          WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v32, v24);
        }
      }
      else
      {
        WebKit::WebExtension::createError((id *)this, 15, 0, 0);
        v23 = (NSError *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((const void **)this, v23);
      }
    }
  }
}

void sub_1992D6150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtension::localization(id *this)
{
  if (WebKit::WebExtension::manifestParsedSuccessfully((WebKit::WebExtension *)this))
  {
    BOOL v2 = WTF::RetainPtr<NSSet>::get(this + 22);
  }
  else
  {
    BOOL v2 = 0;
  }

  return v2;
}

id WebKit::WebExtension::defaultLocale(id *this)
{
  if (WebKit::WebExtension::manifestParsedSuccessfully((WebKit::WebExtension *)this))
  {
    BOOL v2 = WTF::RetainPtr<NSSet>::get(this + 21);
  }
  else
  {
    BOOL v2 = 0;
  }

  return v2;
}

id WebKit::objectForKey<NSDictionary>(id *a1, void *a2, int a3, uint64_t a4)
{
  id v7 = a2;
  uint64_t v8 = WTF::RetainPtr<NSSet>::get(a1);
  v9 = WebKit::objectForKey<NSDictionary>(v8, (uint64_t)v7, a3, a4);

  return v9;
}

void sub_1992D6340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZN6WebKit12WebExtension37populateExternallyConnectableIfNeededEv_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 length] != 0;
}

id WebKit::WebExtension::icon(WebKit::WebExtension *this, CGSize a2)
{
  double height = a2.height;
  double width = a2.width;
  if (WebKit::WebExtension::manifestParsedSuccessfully(this))
  {
    id v5 = WTF::RetainPtr<NSSet>::get((id *)this + 19);
    char v6 = [v5 objectForKeyedSubscript:@"icon_variants"];

    if (v6)
    {
      if (v19) {
        uint64_t v8 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v8 = &stru_1EEA10550;
      }
      int v10 = v8;
      v11 = v19;
      CFStringRef v19 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v9);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      v16 = WTF::RetainPtr<NSSet>::get((id *)this + 19);
      uint64_t v17 = WebKit::WebExtension::bestImageForIconVariantsManifestKey((id *)this, v16, (const void **)this + 29, 16, v10, width, height);
    }
    else
    {
      if (v19) {
        v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        v13 = &stru_1EEA10550;
      }
      int v10 = v13;
      v15 = v19;
      CFStringRef v19 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v14);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      v16 = WTF::RetainPtr<NSSet>::get((id *)this + 19);
      uint64_t v17 = WebKit::WebExtension::bestImageForIconsDictionaryManifestKey((id *)this, v16, @"icons", (const void **)this + 29, 16, v10, width, height);
    }
    v12 = (void *)v17;
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_1992D6550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtension::bestImageForIconVariantsManifestKey(id *a1, void *a2, const void **a3, int a4, void *a5, double a6, double a7)
{
  id v13 = a2;
  v14 = @"icon_variants";
  uint64_t v33 = a5;
  v15 = WebKit::availableScreenScales(v33);
  v16 = WTF::RetainPtr<__IOHIDDevice *>::get();
  WTF::RetainPtr<NSDictionary>::RetainPtr(&cf, v16);

  uint64_t v17 = WebKit::objectForKey<NSSet>((id *)&cf);
  int v18 = a4;
  CFTypeRef v19 = cf;
  CFTypeRef cf = 0;
  if (v19) {
    CFRelease(v19);
  }
  if (!*a3 || (objc_msgSend(v15, "isEqualToSet:", v17, v33) & 1) == 0)
  {
    id v20 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithObject:forKey:", v15, @"scales", v33);
    WTF::RetainPtr<NSMutableDictionary>::operator=(a3, v20);
  }
  *(double *)uint64_t v34 = a6;
  *(double *)&v34[1] = a7;
  v21 = [MEMORY[0x1E4F29238] valueWithBytes:v34 objCType:"{CGSize=dd}"];
  v22 = WTF::RetainPtr<__IOHIDDevice *>::get();
  v23 = [v22 objectForKeyedSubscript:v21];

  if (v23)
  {
    objc_opt_class();
    v24 = WTF::dynamic_objc_cast<UIImage>(v23);
  }
  else
  {
    uint64_t v25 = objc_opt_class();
    v23 = WebKit::objectForKey<NSArray>(v13, @"icon_variants", 0, v25);
    BOOL v26 = (void *)WTF::fastMalloc((WTF *)0x10);
    *BOOL v26 = &unk_1EE9FD870;
    v26[1] = a1;
    CFTypeRef cf = v26;
    v24 = WebKit::WebExtension::bestImageForIconVariants((uint64_t)a1, v23, (uint64_t)&cf, a6, a7);
    CFTypeRef v27 = cf;
    CFTypeRef cf = 0;
    if (v27) {
      (*(void (**)(CFTypeRef))(*(void *)v27 + 8))(v27);
    }
    long long v28 = v24;
    if (!v24)
    {
      long long v28 = [MEMORY[0x1E4F1CA98] null];
    }
    long long v29 = WTF::RetainPtr<__IOHIDDevice *>::get();
    [v29 setObject:v28 forKeyedSubscript:v21];

    if (!v24)
    {

      if ([v23 count])
      {
        WebKit::WebExtension::createError(a1, v18, v33, 0);
        long long v30 = (NSError *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((const void **)a1, v30);
      }
      else
      {
        if (!v23 || [v23 count])
        {
          long long v31 = [v13 objectForKeyedSubscript:@"icon_variants"];

          if (!v31) {
            goto LABEL_20;
          }
        }
        WebKit::WebExtension::createError(a1, v18, 0, 0);
        long long v30 = (NSError *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtension::recordError((const void **)a1, v30);
      }
    }
  }
LABEL_20:

  return v24;
}

void sub_1992D68E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtension::bestImageForIconsDictionaryManifestKey(id *a1, void *a2, void *a3, const void **a4, int a5, void *a6, double a7, double a8)
{
  id v34 = a2;
  id v15 = a3;
  v16 = a6;
  uint64_t v17 = WebKit::availableScreenScales(v16);
  int v18 = WTF::RetainPtr<__IOHIDDevice *>::get();
  WTF::RetainPtr<NSDictionary>::RetainPtr(&cf, v18);

  CFTypeRef v19 = WebKit::objectForKey<NSSet>((id *)&cf);
  CFTypeRef v20 = cf;
  CFTypeRef cf = 0;
  if (v20) {
    CFRelease(v20);
  }
  if (!*a4 || ([v17 isEqualToSet:v19] & 1) == 0)
  {
    v21 = [MEMORY[0x1E4F1CA60] dictionaryWithObject:v17 forKey:@"scales"];
    WTF::RetainPtr<NSMutableDictionary>::operator=(a4, v21);
  }
  *(double *)v35 = a7;
  *(double *)&v35[1] = a8;
  v22 = [MEMORY[0x1E4F29238] valueWithBytes:v35 objCType:"{CGSize=dd}"];
  v23 = WTF::RetainPtr<__IOHIDDevice *>::get();
  v24 = [v23 objectForKeyedSubscript:v22];

  if (v24)
  {
    objc_opt_class();
    uint64_t v25 = WTF::dynamic_objc_cast<UIImage>(v24);
    goto LABEL_21;
  }
  uint64_t v33 = v16;
  v24 = WebKit::objectForKey<NSDictionary>(v34, (uint64_t)v15, 1, 0);
  BOOL v26 = (void *)WTF::fastMalloc((WTF *)0x10);
  *BOOL v26 = &unk_1EE9FD848;
  v26[1] = a1;
  CFTypeRef cf = v26;
  uint64_t v25 = WebKit::WebExtension::bestImageInIconsDictionary((uint64_t)a1, v24, (uint64_t)&cf, a7, a8);
  CFTypeRef v27 = cf;
  CFTypeRef cf = 0;
  if (v27) {
    (*(void (**)(CFTypeRef))(*(void *)v27 + 8))(v27);
  }
  long long v28 = v25;
  if (!v25)
  {
    long long v28 = [MEMORY[0x1E4F1CA98] null];
  }
  long long v29 = WTF::RetainPtr<__IOHIDDevice *>::get();
  [v29 setObject:v28 forKeyedSubscript:v22];

  if (v25) {
    goto LABEL_13;
  }

  if ([v24 count])
  {
    WebKit::WebExtension::createError(a1, a5, v33, 0);
    long long v30 = (NSError *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::recordError((const void **)a1, v30);
  }
  else
  {
    if (!v24 || [v24 count])
    {
      long long v31 = [v34 objectForKeyedSubscript:v15];

      if (!v31)
      {
LABEL_13:
        v16 = v33;
        goto LABEL_21;
      }
    }
    WebKit::WebExtension::createError(a1, a5, 0, 0);
    long long v30 = (NSError *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtension::recordError((const void **)a1, v30);
  }
  v16 = v33;

LABEL_21:

  return v25;
}

void sub_1992D6D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtension::actionIcon(WebKit::WebExtension *this, CGSize a2)
{
  double height = a2.height;
  double width = a2.width;
  if (!WebKit::WebExtension::manifestParsedSuccessfully(this))
  {
    id v5 = 0;
    goto LABEL_25;
  }
  WebKit::WebExtension::populateActionPropertiesIfNeeded(this);
  if (*((void *)this + 32))
  {
    id v5 = WTF::RetainPtr<NSSet>::get((id *)this + 32);
    goto LABEL_25;
  }
  char v6 = WTF::RetainPtr<NSSet>::get((id *)this + 30);
  CFStringRef v7 = [v6 objectForKeyedSubscript:@"icon_variants"];

  if (v7)
  {
    if (v19) {
      v9 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      v9 = &stru_1EEA10550;
    }
    v11 = v9;
    v12 = v19;
    CFTypeRef v19 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    v16 = WTF::RetainPtr<NSSet>::get((id *)this + 30);
    id v5 = WebKit::WebExtension::bestImageForIconVariantsManifestKey((id *)this, v16, (const void **)this + 31, 7, v11, width, height);

    if (v5) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (WebKit::WebExtension::manifestVersion(this) >= 3.0)
  {
    if (v19) {
      goto LABEL_15;
    }
LABEL_29:
    v11 = &stru_1EEA10550;
    goto LABEL_22;
  }
  if (!v19) {
    goto LABEL_29;
  }
LABEL_15:
  v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  id v15 = v19;
  CFTypeRef v19 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
LABEL_22:
  uint64_t v17 = WTF::RetainPtr<NSSet>::get((id *)this + 30);
  id v5 = WebKit::WebExtension::bestImageForIconsDictionaryManifestKey((id *)this, v17, @"default_icon", (const void **)this + 31, 7, v11, width, height);

  if (!v5)
  {
LABEL_23:
    v21.double width = width;
    v21.double height = height;
    id v5 = WebKit::WebExtension::icon(this, v21);
  }
LABEL_24:

LABEL_25:

  return v5;
}

void sub_1992D709C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtension::hasAction(id *this)
{
  if (WebKit::WebExtension::manifestVersion((WebKit::WebExtension *)this) < 3.0) {
    return 0;
  }
  v3 = WebKit::objectForKey<NSDictionary>(this + 19, @"action", 0, 0);
  BOOL v2 = v3 != 0;

  return v2;
}

BOOL WebKit::WebExtension::hasBrowserAction(id *this)
{
  if (WebKit::WebExtension::manifestVersion((WebKit::WebExtension *)this) >= 3.0) {
    return 0;
  }
  BOOL v2 = WebKit::objectForKey<NSDictionary>(this + 19, @"browser_action", 0, 0);
  BOOL v3 = v2 != 0;

  return v3;
}

BOOL WebKit::WebExtension::hasPageAction(id *this)
{
  if (WebKit::WebExtension::manifestVersion((WebKit::WebExtension *)this) >= 3.0) {
    return 0;
  }
  BOOL v2 = WebKit::objectForKey<NSDictionary>(this + 19, @"page_action", 0, 0);
  BOOL v3 = v2 != 0;

  return v3;
}

id WebKit::WebExtension::imageForPath(WebKit::WebExtension *a1, void *a2, void *a3, double a4, double a5)
{
  id v9 = a2;
  WebKit::WebExtension::resourceDataForPath((uint64_t)a1, v9, a3, 0, 0);
  CFDataRef v10 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  if (!v10)
  {
    v14 = 0;
    goto LABEL_26;
  }
  id v11 = v9;
  if ([v11 hasPrefix:@"data:"])
  {
    uint64_t v12 = [v11 rangeOfString:@";"];
    if (v12 == 0x7FFFFFFFFFFFFFFFLL)
    {
      id v13 = 0;
      goto LABEL_15;
    }
    id v15 = objc_msgSend(v11, "substringWithRange:", 5, v12 - 5);
    uint64_t v16 = [MEMORY[0x1E4F442D8] typeWithMIMEType:v15];
  }
  else
  {
    id v15 = [v11 pathExtension];
    if (![v15 length])
    {
      uint64_t v17 = WebKit::WebExtension::resourceFileURLForPath(a1, (NSString *)v11);
      int v18 = v17;
      if (v17)
      {
        id v29 = 0;
        [v17 getResourceValue:&v29 forKey:*MEMORY[0x1E4F1C538] error:0];
        id v13 = v29;
      }
      else
      {
        id v13 = 0;
      }

      goto LABEL_14;
    }
    uint64_t v16 = [MEMORY[0x1E4F442D8] typeWithFilenameExtension:v15];
  }
  id v13 = (id)v16;
LABEL_14:

LABEL_15:
  CFTypeRef v19 = [v13 identifier];
  CFTypeRef v20 = [(id)*MEMORY[0x1E4F444C0] identifier];
  int v21 = [v19 isEqualToString:v20];

  if (!v21)
  {
LABEL_18:
    v24 = (void *)[objc_alloc(MEMORY[0x1E4F42A80]) initWithData:v10];
LABEL_19:
    v14 = [v24 _rasterizedImage];

    if (a4 != *MEMORY[0x1E4F1DB30] || a5 != *(double *)(MEMORY[0x1E4F1DB30] + 8))
    {
      [v14 size];
      if (v26 != a4 || v25 != a5)
      {
        uint64_t v27 = objc_msgSend(v14, "imageByPreparingThumbnailOfSize:", a4, a5);

        v14 = (void *)v27;
      }
    }
    goto LABEL_25;
  }
  v22 = (WebKit *)_MergedGlobals_34(v10, 0);
  uint64_t v23 = (uint64_t)v22;
  if (v22)
  {
    v24 = [MEMORY[0x1E4F42A80] _imageWithCGSVGDocument:v22 scale:0 orientation:WebKit::largestDisplayScale(v22)];
    off_1EB3531C0(v23);
    if (v24) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v14 = 0;
LABEL_25:

LABEL_26:

  return v14;
}

void sub_1992D7518(_Unwind_Exception *a1)
{
  char v6 = v5;

  _Unwind_Resume(a1);
}

unint64_t WebKit::WebExtension::bestSizeInIconsDictionary(WebKit::WebExtension *this, NSDictionary *a2)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  BOOL v3 = this;
  if ([(WebKit::WebExtension *)v3 count])
  {
    uint64_t v4 = [(WebKit::WebExtension *)v3 objectForKeyedSubscript:@"any"];

    if (v4)
    {
      unint64_t v5 = -1;
    }
    else
    {
      char v6 = [NSNumber numberWithUnsignedLong:a2];
      CFStringRef v7 = [v6 stringValue];

      CFStringRef v8 = [(WebKit::WebExtension *)v3 objectForKeyedSubscript:v7];

      if (v8)
      {
        unint64_t v5 = (unint64_t)a2;
      }
      else
      {
        id v9 = [(WebKit::WebExtension *)v3 allKeys];
        CFDataRef v10 = WebKit::filterObjects<NSArray>(v9, &__block_literal_global_370);

        if ([v10 count])
        {
          id v11 = (void *)[objc_alloc(MEMORY[0x1E4F29008]) initWithKey:@"self" ascending:1 selector:sel_localizedStandardCompare_];
          v24[0] = v11;
          uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v24 count:1];
          id v13 = [v10 sortedArrayUsingDescriptors:v12];

          long long v21 = 0u;
          long long v22 = 0u;
          long long v19 = 0u;
          long long v20 = 0u;
          id v14 = v13;
          uint64_t v15 = [v14 countByEnumeratingWithState:&v19 objects:v23 count:16];
          if (v15)
          {
            uint64_t v16 = *(void *)v20;
LABEL_10:
            uint64_t v17 = 0;
            while (1)
            {
              if (*(void *)v20 != v16) {
                objc_enumerationMutation(v14);
              }
              unint64_t v5 = objc_msgSend(*(id *)(*((void *)&v19 + 1) + 8 * v17), "integerValue", (void)v19);
              if (v5 >= (unint64_t)a2) {
                break;
              }
              if (v15 == ++v17)
              {
                uint64_t v15 = [v14 countByEnumeratingWithState:&v19 objects:v23 count:16];
                if (v15) {
                  goto LABEL_10;
                }
                break;
              }
            }
          }
          else
          {
            unint64_t v5 = 0;
          }
        }
        else
        {
          unint64_t v5 = 0;
        }
      }
    }
  }
  else
  {
    unint64_t v5 = 0;
  }

  return v5;
}

void sub_1992D77E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZN6WebKit12WebExtension25bestSizeInIconsDictionaryEP12NSDictionarym_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  objc_opt_class();
  uint64_t v4 = WTF::dynamic_objc_cast<NSString>(v3);
  BOOL v5 = [v4 integerValue] > 0;

  return v5;
}

void sub_1992D78CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtension::bestImageInIconsDictionary(uint64_t a1, void *a2, uint64_t a3, double a4, double a5)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  CFDataRef v10 = (WebKit *)[v9 count];
  if (v10)
  {
    if (a4 <= a5) {
      double v11 = a5;
    }
    else {
      double v11 = a4;
    }
    id v36 = WebKit::availableScreenScales(v10);
    v38 = [MEMORY[0x1E4F1CA80] set];
    uint64_t v34 = a1;
    uint64_t v35 = a3;
    v37 = [MEMORY[0x1E4F1CA60] dictionary];
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    id v12 = v36;
    uint64_t v13 = [v12 countByEnumeratingWithState:&v42 objects:v46 count:16];
    if (v13)
    {
      uint64_t v14 = *(void *)v43;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v43 != v14) {
            objc_enumerationMutation(v12);
          }
          uint64_t v16 = *(void **)(*((void *)&v42 + 1) + 8 * i);
          [v16 doubleValue];
          int v18 = (NSDictionary *)(v11 * v17);
          long long v19 = (WebKit::WebExtension *)v9;
          unint64_t v20 = WebKit::WebExtension::bestSizeInIconsDictionary(v19, v18);
          if (v20 == -1)
          {
            long long v21 = [(WebKit::WebExtension *)v19 objectForKeyedSubscript:@"any"];
          }
          else
          {
            if (!v20)
            {

              long long v21 = 0;
              goto LABEL_17;
            }
            long long v22 = [NSNumber numberWithUnsignedLong:v20];
            uint64_t v23 = [v22 stringValue];
            long long v21 = [(WebKit::WebExtension *)v19 objectForKeyedSubscript:v23];
          }
          if (v21)
          {
            [v38 addObject:v21];
            [v37 setObject:v21 forKeyedSubscript:v16];
          }
LABEL_17:
        }
        uint64_t v13 = [v12 countByEnumeratingWithState:&v42 objects:v46 count:16];
      }
      while (v13);
    }

    if ([v38 count])
    {
      if ([v38 count] == 1)
      {
        [v37 removeAllObjects];
        v24 = [v38 anyObject];
        [v37 setObject:v24 forKeyedSubscript:&unk_1EEA52F48];
      }
      v41[0] = MEMORY[0x1E4F143A8];
      v41[1] = 3221225472;
      v41[2] = ___ZN6WebKit12WebExtension26bestImageInIconsDictionaryEP12NSDictionary6CGSizeRKN3WTF8FunctionIFvP7NSErrorEEE_block_invoke;
      v41[3] = &__block_descriptor_64_e31__24__0__NSNumber_8__NSString_16l;
      v41[4] = v34;
      *(double *)&v41[5] = a4;
      *(double *)&v41[6] = a5;
      v41[7] = v35;
      double v25 = WebKit::mapObjects<NSDictionary>(v37, v41);
      if ([v25 count] == 1)
      {
        double v26 = [v25 allValues];
        uint64_t v27 = [v26 firstObject];
      }
      else
      {
        long long v28 = (void *)MEMORY[0x1E4F42A88];
        id v29 = [MEMORY[0x1E4F29128] UUID];
        long long v30 = [v29 UUIDString];
        v39[0] = MEMORY[0x1E4F143A8];
        v39[1] = 3221225472;
        v39[2] = ___ZN6WebKit12WebExtension26bestImageInIconsDictionaryEP12NSDictionary6CGSizeRKN3WTF8FunctionIFvP7NSErrorEEE_block_invoke_2;
        v39[3] = &unk_1E5813C78;
        id v40 = v25;
        long long v31 = [v28 _dynamicAssetNamed:v30 generator:v39];

        v32 = [MEMORY[0x1E4F42F80] currentTraitCollection];
        uint64_t v27 = [v31 imageWithTraitCollection:v32];

        double v26 = v40;
      }
    }
    else
    {
      uint64_t v27 = 0;
    }
  }
  else
  {
    uint64_t v27 = 0;
  }

  return v27;
}

void sub_1992D7CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

id ___ZN6WebKit12WebExtension26bestImageInIconsDictionaryEP12NSDictionary6CGSizeRKN3WTF8FunctionIFvP7NSErrorEEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  CFStringRef v7 = *(WebKit::WebExtension **)(a1 + 32);
  id v13 = 0;
  CFStringRef v8 = WebKit::WebExtension::imageForPath(v7, v6, &v13, *(double *)(a1 + 40), *(double *)(a1 + 48));
  id v9 = v13;
  if (!v8)
  {
    uint64_t v10 = **(void **)(a1 + 56);
    if (v10 && v9 != 0) {
      (*(void (**)(uint64_t, id))(*(void *)v10 + 16))(v10, v9);
    }
  }

  return v8;
}

void sub_1992D7ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ___ZN6WebKit12WebExtension26bestImageInIconsDictionaryEP12NSDictionary6CGSizeRKN3WTF8FunctionIFvP7NSErrorEEE_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = NSNumber;
  id v6 = [a3 traitCollection];
  [v6 displayScale];
  CFStringRef v7 = objc_msgSend(v5, "numberWithDouble:");
  CFStringRef v8 = [v4 objectForKeyedSubscript:v7];
  id v9 = v8;
  if (v8)
  {
    id v10 = v8;
  }
  else
  {
    id v10 = [*(id *)(a1 + 32) objectForKeyedSubscript:&unk_1EEA52F48];
  }
  double v11 = v10;

  return v11;
}

void sub_1992D7FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::objectForKey<NSSet>(id *a1)
{
  BOOL v2 = @"scales";
  id v3 = WTF::RetainPtr<NSSet>::get(a1);
  uint64_t v4 = WebKit::objectForKey<NSSet>(v3, @"scales", 1, 0);

  return v4;
}

void sub_1992D803C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<UIImage>(void *a1)
{
  id v1 = a1;
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1992D80BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtension::iconsDictionaryForBestIconVariant(void *a1, NSDictionary *a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v22 = a1;
  if ([v22 count])
  {
    if ([v22 count] == 1)
    {
      id v4 = [v22 firstObject];
      goto LABEL_35;
    }
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    obint j = v22;
    id v5 = 0;
    uint64_t v6 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (v6)
    {
      double v25 = 0;
      char v26 = 0;
      unint64_t v7 = 0;
      unint64_t v23 = 0;
      uint64_t v8 = *(void *)v29;
LABEL_7:
      uint64_t v9 = 0;
      while (1)
      {
        if (*(void *)v29 != v8) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v28 + 1) + 8 * v9);
        id v11 = [v10 objectForKeyedSubscript:@"color_schemes"];
        if (v11)
        {
          objc_opt_class();
          id v12 = WTF::dynamic_objc_cast<NSArray>(v11);
          int v13 = [v12 containsObject:@"light"];
          if ([v12 containsObject:@"dark"]) {
            v13 |= 2u;
          }
        }
        else
        {
          int v13 = 3;
        }

        unint64_t v14 = WebKit::WebExtension::bestSizeInIconsDictionary((WebKit::WebExtension *)v10, a2);
        if ((v13 & a3) != 0) {
          break;
        }
        if (!(v26 & 1 | (v14 < (unint64_t)a2)))
        {
          char v26 = 1;
LABEL_23:
          uint64_t v15 = v25;
          uint64_t v16 = v5;
          double v25 = v10;
          unint64_t v17 = v7;
          unint64_t v23 = v14;
LABEL_24:
          id v18 = v10;

          id v5 = v16;
          unint64_t v7 = v17;
          goto LABEL_25;
        }
        if (!(v26 & 1 | (v14 <= v23)))
        {
          char v26 = 0;
          goto LABEL_23;
        }
LABEL_25:
        if (v6 == ++v9)
        {
          uint64_t v6 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
          if (v6) {
            goto LABEL_7;
          }
          goto LABEL_30;
        }
      }
      if (v14 >= (unint64_t)a2)
      {
        id v4 = v10;

        long long v19 = v25;
        goto LABEL_34;
      }
      uint64_t v15 = v5;
      uint64_t v16 = v10;
      unint64_t v17 = v14;
      if (v14 <= v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    double v25 = 0;
LABEL_30:

    long long v19 = v25;
    if (v5) {
      unint64_t v20 = v5;
    }
    else {
      unint64_t v20 = v25;
    }
    id v4 = v20;
LABEL_34:
  }
  else
  {
    id v4 = 0;
  }
LABEL_35:

  return v4;
}

void sub_1992D838C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtension::bestImageForIconVariants(uint64_t a1, void *a2, uint64_t a3, double a4, double a5)
{
  id v9 = a2;
  id v10 = v9;
  if (a4 <= a5) {
    double v11 = a5;
  }
  else {
    double v11 = a4;
  }
  id v12 = (NSDictionary *)v11;
  int v13 = WebKit::WebExtension::iconsDictionaryForBestIconVariant(v9, (NSDictionary *)v11, 1);
  uint64_t v14 = WebKit::WebExtension::iconsDictionaryForBestIconVariant(v10, v12, 2);
  uint64_t v15 = (void *)v14;
  if (v13) {
    BOOL v16 = v14 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16 || [v13 isEqualToDictionary:v14])
  {
    if (v13) {
      unint64_t v17 = v13;
    }
    else {
      unint64_t v17 = v15;
    }
    WebKit::WebExtension::bestImageInIconsDictionary(a1, v17, a3, a4, a5);
    id v18 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    long long v19 = WebKit::WebExtension::bestImageInIconsDictionary(a1, v13, a3, a4, a5);
    uint64_t v20 = WebKit::WebExtension::bestImageInIconsDictionary(a1, v15, a3, a4, a5);
    long long v21 = (void *)v20;
    if (v19) {
      BOOL v22 = v20 == 0;
    }
    else {
      BOOL v22 = 1;
    }
    if (v22)
    {
      if (v19) {
        unint64_t v23 = v19;
      }
      else {
        unint64_t v23 = (void *)v20;
      }
      id v18 = v23;
    }
    else
    {
      v24 = (void *)MEMORY[0x1E4F42A88];
      double v25 = [MEMORY[0x1E4F29128] UUID];
      char v26 = [v25 UUIDString];
      uint64_t v30 = MEMORY[0x1E4F143A8];
      uint64_t v31 = 3221225472;
      v32 = ___ZN6WebKit12WebExtension24bestImageForIconVariantsEP7NSArray6CGSizeRKN3WTF8FunctionIFvP7NSErrorEEE_block_invoke;
      uint64_t v33 = &unk_1E5813CA0;
      id v34 = v21;
      id v35 = v19;
      uint64_t v27 = [v24 _dynamicAssetNamed:v26 generator:&v30];

      long long v28 = objc_msgSend(MEMORY[0x1E4F42F80], "currentTraitCollection", v30, v31, v32, v33);
      id v18 = [v27 imageWithTraitCollection:v28];
    }
  }

  return v18;
}

void sub_1992D8640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

id ___ZN6WebKit12WebExtension24bestImageForIconVariantsEP7NSArray6CGSizeRKN3WTF8FunctionIFvP7NSErrorEEE_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 traitCollection];
  uint64_t v5 = [v4 userInterfaceStyle];
  uint64_t v6 = 40;
  if (v5 == 2) {
    uint64_t v6 = 32;
  }
  id v7 = *(id *)(a1 + v6);

  return v7;
}

void sub_1992D872C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtension::hasBackgroundContent(id *this)
{
  WebKit::WebExtension::populateBackgroundPropertiesIfNeeded(this);
  id v2 = std::to_address[abi:sn180100]<char const>();
  BOOL v3 = [v2 count] || this[37] || this[38] != 0;

  return v3;
}

void sub_1992D879C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtension::backgroundContentIsPersistent(id *this)
{
  WebKit::WebExtension::populateBackgroundPropertiesIfNeeded(this);
  BOOL result = WebKit::WebExtension::hasBackgroundContent(this);
  if (result) {
    return (_WORD)this[44] & 1;
  }
  return result;
}

BOOL WebKit::WebExtension::backgroundContentUsesModules(id *this)
{
  WebKit::WebExtension::populateBackgroundPropertiesIfNeeded(this);
  BOOL result = WebKit::WebExtension::hasBackgroundContent(this);
  if (result) {
    return (*((unsigned __int16 *)this + 176) >> 1) & 1;
  }
  return result;
}

__CFString *WebKit::WebExtension::backgroundContentPath(id *this)
{
  WebKit::WebExtension::populateBackgroundPropertiesIfNeeded(this);
  if (this[38]) {
    goto LABEL_2;
  }
  BOOL v3 = std::to_address[abi:sn180100]<char const>();
  uint64_t v4 = [v3 count];

  if (v4)
  {
    WebKit::WebExtension::populateBackgroundPropertiesIfNeeded(this);
    if (*((unsigned char *)this + 320)) {
      uint64_t v5 = @"_generated_service_worker.js";
    }
    else {
      uint64_t v5 = @"_generated_background_page.html";
    }
    id v2 = v5;
    goto LABEL_8;
  }
  if (this[37])
  {
LABEL_2:
    WTF::RetainPtr<__IOHIDDevice *>::get();
    id v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v2 = 0;
  }
LABEL_8:

  return v2;
}

void sub_1992D88D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ___ZN6WebKit12WebExtension26generatedBackgroundContentEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = @"<script src=\"%@\"></script>";
  uint64_t v8 = @"import \"./%@\";";
  if (*(unsigned char *)(a1 + 33)) {
    id v7 = @"<script type=\"module\" src=\"%@\"></script>";
  }
  else {
    uint64_t v8 = @"importScripts(\"%@\");";
  }
  if (*(unsigned char *)(a1 + 32)) {
    id v9 = v8;
  }
  else {
    id v9 = v7;
  }
  id v10 = objc_msgSend(NSString, "stringWithFormat:", v9, v6);

  return v10;
}

void sub_1992D8994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZN6WebKit12WebExtension36populateBackgroundPropertiesIfNeededEv_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 length] != 0;
}

uint64_t ___ZN6WebKit12WebExtension36populateBackgroundPropertiesIfNeededEv_block_invoke_2()
{
  return objc_msgSend((id)qword_1E93CF990, "containsObject:");
}

uint64_t *WebKit::WebExtension::supportedPermissions(WebKit::WebExtension *this)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  if ((byte_1E93CF989 & 1) == 0)
  {
    MEMORY[0x19972EAD0](&v5, @"activeTab");
    MEMORY[0x19972EAD0](&v6, @"alarms");
    MEMORY[0x19972EAD0](&v7, @"clipboardWrite");
    MEMORY[0x19972EAD0](&v8, @"contextMenus");
    MEMORY[0x19972EAD0](&v9, @"cookies");
    MEMORY[0x19972EAD0](&v10, @"declarativeNetRequest");
    MEMORY[0x19972EAD0](&v11, @"declarativeNetRequestFeedback");
    MEMORY[0x19972EAD0](&v12, @"declarativeNetRequestWithHostAccess");
    MEMORY[0x19972EAD0](&v13, @"menus");
    MEMORY[0x19972EAD0](&v14, @"nativeMessaging");
    MEMORY[0x19972EAD0](&v15, @"notifications");
    MEMORY[0x19972EAD0](&v16, @"scripting");
    MEMORY[0x19972EAD0](&v17, @"storage");
    MEMORY[0x19972EAD0](&v18, @"tabs");
    MEMORY[0x19972EAD0](&v19, @"unlimitedStorage");
    MEMORY[0x19972EAD0](&v20, @"webNavigation");
    MEMORY[0x19972EAD0](v21, @"webRequest");
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashSet(&qword_1E93CF998, &v5, (const WTF::StringImpl *)0x11);
    for (uint64_t i = 128; i != -8; i -= 8)
    {
      uint64_t v4 = *(WTF::StringImpl **)((char *)&v5 + i);
      *(WTF::StringImpl **)((char *)&v5 + i) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, v2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
    }
    byte_1E93CF989 = 1;
  }
  return &qword_1E93CF998;
}

void sub_1992D8C54(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = 128;
  while (1)
  {
    id v5 = *(WTF::StringImpl **)(v2 + v4);
    *(void *)(v2 + v4) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    v4 -= 8;
    if (v4 == -8) {
      _Unwind_Resume(exception_object);
    }
  }
}

void WebKit::WebExtension::declarativeNetRequestRuleset(WebKit::WebExtension *this@<X0>, const WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  WebKit::WebExtension::populateDeclarativeNetRequestPropertiesIfNeeded(this);
  uint64_t v7 = *((unsigned int *)this + 21);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 9);
    uint64_t v9 = 24 * v7;
    while (!WTF::equal(*(WTF **)v8, *a2, v6))
    {
      v8 += 24;
      v9 -= 24;
      if (!v9) {
        goto LABEL_5;
      }
    }
    uint64_t v11 = *(WTF **)v8;
    if (*(void *)v8) {
      *(_DWORD *)v11 += 2;
    }
    *(void *)a3 = v11;
    *(unsigned char *)(a3 + 8) = *(unsigned char *)(v8 + 8);
    uint64_t v12 = *(_DWORD **)(v8 + 16);
    if (v12) {
      *v12 += 2;
    }
    *(void *)(a3 + 16) = v12;
    char v10 = 1;
  }
  else
  {
LABEL_5:
    char v10 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 24) = v10;
}

id WebKit::WebExtension::InjectedContentData::expandedExcludeMatchPatternStrings(WebKit::WebExtension::InjectedContentData *this)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA48] array];
  BOOL v3 = (void *)((char *)this + 8);
  uint64_t v4 = (WebKit::WebExtensionMatchPattern **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)this + 1);
  id v5 = v4;
  uint64_t v7 = v6;
  if (*v3) {
    uint64_t v8 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  if ((WebKit::WebExtensionMatchPattern **)v8 != v4)
  {
    do
    {
      uint64_t v9 = WebKit::WebExtensionMatchPattern::expandedStrings(*v5);
      [v2 addObjectsFromArray:v9];

      while (++v5 != v7)
      {
        if ((unint64_t)*v5 + 1 > 1) {
          goto LABEL_10;
        }
      }
      id v5 = v7;
LABEL_10:
      ;
    }
    while (v5 != (WebKit::WebExtensionMatchPattern **)v8);
  }
  char v10 = (void *)[v2 copy];

  return v10;
}

void sub_1992D8E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN6WebKit12WebExtension39populateContentScriptPropertiesIfNeededEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  v112 = 0;
  uint64_t v5 = objc_opt_class();
  WebKit::objectForKey<NSArray>(v3, @"matches", 1, v5);
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = [v6 countByEnumeratingWithState:&v108 objects:v114 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v109;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v109 != v8) {
          objc_enumerationMutation(v6);
        }
        char v10 = *(void **)(*((void *)&v108 + 1) + 8 * i);
        if ([v10 length])
        {
          MEMORY[0x19972EAD0](&v91, v10);
          WebKit::WebExtensionMatchPattern::getOrCreate(&v91, v11, (uint64_t *)&v107);
          uint64_t v13 = v91;
          v91 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, v12);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
          if (v107)
          {
            if (WebKit::WebExtensionMatchPattern::isSupported(v107))
            {
              char v106 = v107;
              long long v107 = 0;
              WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v112, (uint64_t *)&v106, (uint64_t)&v91);
              uint64_t v14 = v106;
              char v106 = 0;
              if (v14) {
                CFRelease(*((CFTypeRef *)v14 + 1));
              }
            }
            uint64_t v15 = v107;
            long long v107 = 0;
            if (v15) {
              CFRelease(*((CFTypeRef *)v15 + 1));
            }
          }
        }
      }
      uint64_t v7 = [v6 countByEnumeratingWithState:&v108 objects:v114 count:16];
    }
    while (v7);
  }

  if (v112 && *((_DWORD *)v112 - 3))
  {
    uint64_t v17 = objc_opt_class();
    uint64_t v18 = WebKit::objectForKey<NSArray>(v3, @"js", 1, v17);
    v89 = WebKit::filterObjects<NSArray>(v18, &__block_literal_global_495);

    uint64_t v19 = objc_opt_class();
    uint64_t v20 = WebKit::objectForKey<NSArray>(v3, @"css", 1, v19);
    int v90 = WebKit::filterObjects<NSArray>(v20, &__block_literal_global_497);

    if (![v89 count] && !objc_msgSend(v90, "count"))
    {
      if (v91) {
        v50 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        v50 = &stru_1EEA10550;
      }
      WebKit::WebExtension::createError((id *)v4, 11, v50, 0);
      v51 = (NSError *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((const void **)v4, v51);

      CFStringRef v53 = v91;
      v91 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2) {
          WTF::StringImpl::destroy(v53, v52);
        }
        else {
          *(_DWORD *)v53 -= 2;
        }
      }
      goto LABEL_108;
    }
    BOOL v22 = WebKit::objectForKey<NSNumber>(v3, @"match_about_blank");
    char v85 = [v22 BOOLValue];

    long long v107 = 0;
    uint64_t v23 = objc_opt_class();
    v24 = WebKit::objectForKey<NSArray>(v3, @"exclude_matches", 1, v23);
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    id v25 = v24;
    uint64_t v26 = [v25 countByEnumeratingWithState:&v102 objects:v113 count:16];
    if (v26)
    {
      uint64_t v27 = *(void *)v103;
      do
      {
        for (uint64_t j = 0; j != v26; ++j)
        {
          if (*(void *)v103 != v27) {
            objc_enumerationMutation(v25);
          }
          long long v29 = *(void **)(*((void *)&v102 + 1) + 8 * j);
          if ([v29 length])
          {
            MEMORY[0x19972EAD0](&v91, v29);
            WebKit::WebExtensionMatchPattern::getOrCreate(&v91, v30, (uint64_t *)&v106);
            v32 = v91;
            v91 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2) {
                WTF::StringImpl::destroy(v32, v31);
              }
              else {
                *(_DWORD *)v32 -= 2;
              }
            }
            if (v106)
            {
              if (WebKit::WebExtensionMatchPattern::isSupported(v106))
              {
                v101 = v106;
                char v106 = 0;
                WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v107, (uint64_t *)&v101, (uint64_t)&v91);
                uint64_t v33 = (uint64_t)v101;
                v101 = 0;
                if (v33) {
                  CFRelease(*(CFTypeRef *)(v33 + 8));
                }
              }
              id v34 = v106;
              char v106 = 0;
              if (v34) {
                CFRelease(*((CFTypeRef *)v34 + 1));
              }
            }
          }
        }
        uint64_t v26 = [v25 countByEnumeratingWithState:&v102 objects:v113 count:16];
      }
      while (v26);
    }

    uint64_t v35 = objc_opt_class();
    id v36 = WebKit::objectForKey<NSArray>(v3, @"include_globs", 1, v35);
    unsigned int v88 = WebKit::filterObjects<NSArray>(v36, &__block_literal_global_502);

    uint64_t v37 = objc_opt_class();
    v38 = WebKit::objectForKey<NSArray>(v3, @"exclude_globs", 1, v37);
    v87 = WebKit::filterObjects<NSArray>(v38, &__block_literal_global_504);

    BOOL v39 = WebKit::objectForKey<NSNumber>(v3, @"all_frames");
    char v84 = [v39 BOOLValue];

    id v40 = WebKit::objectForKey<NSString>(v3, @"run_at", 1);
    int v86 = v40;
    if (v40 && ([v40 isEqualToString:@"document_idle"] & 1) == 0)
    {
      if ([v86 isEqualToString:@"document_start"])
      {
        char v41 = 1;
        goto LABEL_44;
      }
      if ([v86 isEqualToString:@"document_end"])
      {
        char v41 = 2;
        goto LABEL_44;
      }
      if (v91) {
        v59 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        v59 = &stru_1EEA10550;
      }
      WebKit::WebExtension::createError((id *)v4, 11, v59, 0);
      v60 = (NSError *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((const void **)v4, v60);

      v62 = v91;
      v91 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2) {
          WTF::StringImpl::destroy(v62, v61);
        }
        else {
          *(_DWORD *)v62 -= 2;
        }
      }
    }
    char v41 = 0;
LABEL_44:
    long long v42 = WebKit::objectForKey<NSString>(v3, @"world", 1);
    long long v43 = v42;
    if (v42 && ([v42 isEqualToString:@"ISOLATED"] & 1) == 0)
    {
      if ([v43 isEqualToString:@"MAIN"])
      {
        char v45 = 0;
LABEL_76:
        uint64_t v63 = WebKit::objectForKey<NSString>(v3, @"css_origin", 1);
        v64 = [v63 lowercaseString];

        if (v64 && ([v64 isEqualToString:@"author"] & 1) == 0)
        {
          if ([v64 isEqualToString:@"user"])
          {
            char v66 = 0;
LABEL_87:
            int v71 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
            *MEMORY[0x1E4F30960] += 2;
            v94 = v71;
            *(_OWORD *)v99 = 0u;
            *(_OWORD *)CFTypeRef cf = 0u;
            unsigned int v72 = v112;
            v112 = 0;
            unsigned int v73 = (uint64_t *)v107;
            long long v107 = 0;
            v91 = v72;
            int v92 = v73;
            char v93 = v41;
            char v95 = v85;
            char v96 = v84;
            char v97 = v45;
            char v98 = v66;
            WTF::RetainPtr<NSArray>::operator=(v99, v89);
            WTF::RetainPtr<NSArray>::operator=(&v99[1], v90);
            WTF::RetainPtr<NSArray>::operator=(cf, v88);
            WTF::RetainPtr<NSArray>::operator=(&cf[1], v87);
            v74 = (void *)(v4 + 24);
            unsigned int v75 = *(_DWORD *)(v4 + 36);
            if (v75 == *(_DWORD *)(v4 + 32))
            {
              WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::InjectedContentData>((uint64_t)v74, (unint64_t)&v91);
            }
            else
            {
              WebKit::WebExtension::InjectedContentData::InjectedContentData(*v74 + 72 * v75, (uint64_t *)&v91);
              ++*(_DWORD *)(v4 + 36);
            }
            CFTypeRef v77 = cf[1];
            cf[1] = 0;
            if (v77) {
              CFRelease(v77);
            }
            CFTypeRef v78 = cf[0];
            cf[0] = 0;
            if (v78) {
              CFRelease(v78);
            }
            CFTypeRef v79 = v99[1];
            v99[1] = 0;
            if (v79) {
              CFRelease(v79);
            }
            CFTypeRef v80 = v99[0];
            v99[0] = 0;
            if (v80) {
              CFRelease(v80);
            }
            v81 = v94;
            v94 = 0;
            if (v81)
            {
              if (*(_DWORD *)v81 == 2) {
                WTF::StringImpl::destroy(v81, v76);
              }
              else {
                *(_DWORD *)v81 -= 2;
              }
            }
            if (v92) {
              WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v92, v76);
            }
            if (v91) {
              WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)v91, v76);
            }

            if (v107) {
              WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)v107, v82);
            }
LABEL_108:

            goto LABEL_109;
          }
          if (v91) {
            v67 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          }
          else {
            v67 = &stru_1EEA10550;
          }
          WebKit::WebExtension::createError((id *)v4, 11, v67, 0);
          v68 = (NSError *)objc_claimAutoreleasedReturnValue();
          WebKit::WebExtension::recordError((const void **)v4, v68);

          v70 = v91;
          v91 = 0;
          if (v70)
          {
            if (*(_DWORD *)v70 == 2) {
              WTF::StringImpl::destroy(v70, v69);
            }
            else {
              *(_DWORD *)v70 -= 2;
            }
          }
        }
        char v66 = 1;
        goto LABEL_87;
      }
      if (v91) {
        id v55 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        id v55 = &stru_1EEA10550;
      }
      WebKit::WebExtension::createError((id *)v4, 11, v55, 0);
      v56 = (NSError *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::recordError((const void **)v4, v56);

      v58 = v91;
      v91 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2) {
          WTF::StringImpl::destroy(v58, v57);
        }
        else {
          *(_DWORD *)v58 -= 2;
        }
      }
    }
    char v45 = 1;
    goto LABEL_76;
  }
  if (v91) {
    id v46 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    id v46 = &stru_1EEA10550;
  }
  WebKit::WebExtension::createError((id *)v4, 11, v46, 0);
  uint64_t v47 = (NSError *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtension::recordError((const void **)v4, v47);

  v49 = v91;
  v91 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2) {
      WTF::StringImpl::destroy(v49, v48);
    }
    else {
      *(_DWORD *)v49 -= 2;
    }
  }
LABEL_109:

  if (v112) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)v112, v83);
  }
}

void sub_1992D989C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, CFTypeRef a20,CFTypeRef a21,CFTypeRef a22,CFTypeRef cf,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t *a44)
{
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, v50);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }

  if (a34) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a34, v51);
  }

  if (a44) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a44, v52);
  }

  _Unwind_Resume(a1);
}

BOOL ___ZN6WebKit12WebExtension39populateContentScriptPropertiesIfNeededEv_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 length] != 0;
}

BOOL ___ZN6WebKit12WebExtension39populateContentScriptPropertiesIfNeededEv_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 length] != 0;
}

BOOL ___ZN6WebKit12WebExtension39populateContentScriptPropertiesIfNeededEv_block_invoke_4(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 length] != 0;
}

BOOL ___ZN6WebKit12WebExtension39populateContentScriptPropertiesIfNeededEv_block_invoke_5(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 length] != 0;
}

void WebKit::WebExtension::allRequestedMatchPatterns(WebKit::WebExtension *this@<X0>, uint64_t *a2@<X8>)
{
  WebKit::WebExtension::populatePermissionsPropertiesIfNeeded(this);
  WebKit::WebExtension::populateContentScriptPropertiesIfNeeded(this);
  WebKit::WebExtension::populateExternallyConnectableIfNeeded(this);
  *a2 = 0;
  uint64_t v4 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)this + 11);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = *((void *)this + 11);
  if (v8) {
    uint64_t v9 = (uint64_t *)(v8 + 8 * *(unsigned int *)(v8 - 4));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != v4)
  {
    do
    {
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(a2, v5, (uint64_t)v24);
      while (++v5 != v7)
      {
        if ((unint64_t)(*v5 + 1) > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v5 = v7;
LABEL_10:
      ;
    }
    while (v5 != v9);
  }
  char v10 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)this + 15);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = *((void *)this + 15);
  if (v14) {
    uint64_t v15 = (uint64_t *)(v14 + 8 * *(unsigned int *)(v14 - 4));
  }
  else {
    uint64_t v15 = 0;
  }
  if (v15 != v10)
  {
    do
    {
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(a2, v11, (uint64_t)v24);
      while (++v11 != v13)
      {
        if ((unint64_t)(*v11 + 1) > 1) {
          goto LABEL_20;
        }
      }
      uint64_t v11 = v13;
LABEL_20:
      ;
    }
    while (v11 != v15);
  }
  unsigned int v16 = *((_DWORD *)this + 9);
  if (v16)
  {
    uint64_t v17 = (void **)*((void *)this + 3);
    uint64_t v18 = &v17[9 * v16];
    do
    {
      uint64_t v19 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(v17);
      uint64_t v20 = v19;
      BOOL v22 = v21;
      if (*v17) {
        uint64_t v23 = (uint64_t)&(*v17)[*((unsigned int *)*v17 - 1)];
      }
      else {
        uint64_t v23 = 0;
      }
      if ((uint64_t *)v23 != v19)
      {
        do
        {
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(a2, v20, (uint64_t)v24);
          while (++v20 != v22)
          {
            if ((unint64_t)(*v20 + 1) > 1) {
              goto LABEL_32;
            }
          }
          uint64_t v20 = v22;
LABEL_32:
          ;
        }
        while (v20 != (uint64_t *)v23);
      }
      v17 += 9;
    }
    while (v17 != v18);
  }
}

void sub_1992D9EF4(_Unwind_Exception *exception_object, void *a2)
{
  if (*v2) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtension::~WebExtension(WebKit::WebExtension *this, void *a2)
{
  WebKit::WebExtension::~WebExtension(this, a2);

  JUMPOUT(0x199740C10);
}

{
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  uint64_t *v30;
  WTF::StringImpl **v31;
  WTF::StringImpl **v32;
  uint64_t *v33;
  uint64_t *v34;
  WTF::StringImpl *v35;
  void *v36;
  WTF::StringImpl *v37;
  void *v38;

  *(void *)this = &unk_1EE9FD6C0;
  id v3 = (const void *)*((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v5) {
    CFRelease(v5);
  }
  id v6 = (const void *)*((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)*((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)*((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v9) {
    CFRelease(v9);
  }
  char v10 = (const void *)*((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = (const void *)*((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = (const void *)*((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = (const void *)*((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = (const void *)*((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = (const void *)*((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v15) {
    CFRelease(v15);
  }
  unsigned int v16 = (const void *)*((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = (const void *)*((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = (const void *)*((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = (const void *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = (const void *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v20) {
    CFRelease(v20);
  }
  CFStringRef v21 = (const void *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v21) {
    CFRelease(v21);
  }
  BOOL v22 = (const void *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v23 = (const void *)*((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v23) {
    CFRelease(v23);
  }
  v24 = (const void *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v24) {
    CFRelease(v24);
  }
  id v25 = (const void *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v25) {
    CFRelease(v25);
  }
  uint64_t v26 = (const void *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v26) {
    CFRelease(v26);
  }
  uint64_t v27 = (const void *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v27) {
    CFRelease(v27);
  }
  long long v28 = (const void *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v28) {
    CFRelease(v28);
  }
  long long v29 = (const void *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v29) {
    CFRelease(v29);
  }
  uint64_t v30 = (uint64_t *)*((void *)this + 15);
  if (v30) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v30, a2);
  }
  uint64_t v31 = (WTF::StringImpl **)*((void *)this + 14);
  if (v31) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v31, (WTF::StringImpl *)a2);
  }
  v32 = (WTF::StringImpl **)*((void *)this + 13);
  if (v32) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v32, (WTF::StringImpl *)a2);
  }
  uint64_t v33 = (uint64_t *)*((void *)this + 12);
  if (v33) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v33, a2);
  }
  id v34 = (uint64_t *)*((void *)this + 11);
  if (v34) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v34, a2);
  }
  WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, a2);
  WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 14, v35);
  WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v36);
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, v37);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v38);
}

uint64_t API::ObjectImpl<(API::Object::Type)110>::type()
{
  return 110;
}

uint64_t **WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::operator=(uint64_t **a1, void **a2)
{
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v6, a2);
  uint64_t v4 = *a1;
  *a1 = v6;
  id v6 = v4;
  if (v4) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v4, v3);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable(uint64_t *a1, void **a2)
{
  *a1 = 0;
  id v3 = *a2;
  if (*a2)
  {
    int v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      unsigned int v6 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(8 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      uint64_t v8 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a2);
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      uint64_t v12 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
      if ((uint64_t *)v12 != v8)
      {
        do
        {
          uint64_t v23 = v9;
          uint64_t v13 = *a1;
          if (*a1) {
            int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            int v14 = 0;
          }
          unint64_t v15 = ~(*v9 << 32) + *v9;
          unint64_t v16 = (v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13);
          unint64_t v17 = (9 * (v16 ^ (v16 >> 8))) ^ ((9 * (v16 ^ (v16 >> 8))) >> 15);
          unsigned int v18 = v14 & (((v17 + ~(v17 << 27)) >> 31) ^ (v17 + ~(v17 << 27)));
          int v19 = 1;
          do
          {
            unsigned int v20 = v18;
            uint64_t v21 = *(void *)(v13 + 8 * v18);
            unsigned int v18 = (v18 + v19++) & v14;
          }
          while (v21);
          WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::translate<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>> const&)::{lambda(void)#1}>((uint64_t *)(v13 + 8 * v20), (uint64_t)v9, &v23);
          while (++v9 != v11)
          {
            if ((unint64_t)(*v9 + 1) > 1) {
              goto LABEL_17;
            }
          }
          uint64_t v9 = v11;
LABEL_17:
          ;
        }
        while (v9 != (uint64_t *)v12);
      }
    }
  }
  return a1;
}

uint64_t initCGSVGDocumentCreateFromData(const __CFData *a1, const __CFDictionary *a2)
{
  if (byte_1E93CF98A == 1)
  {
    int v4 = (void *)qword_1E93CF9A0;
  }
  else
  {
    int v4 = (void *)___ZL14CoreSVGLibraryv_block_invoke();
    qword_1E93CF9A0 = (uint64_t)v4;
    byte_1E93CF98A = 1;
  }
  uint64_t v5 = (uint64_t (*)(const __CFData *, const __CFDictionary *))dlsym(v4, "CGSVGDocumentCreateFromData");
  _MergedGlobals_34 = v5;
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x1992DA1B0);
  }

  return v5(a1, a2);
}

uint64_t ___ZL14CoreSVGLibraryv_block_invoke()
{
  uint64_t result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreSVG.framework/CoreSVG", 2);
  if (!result)
  {
    uint64_t result = 64;
    __break(0xC471u);
  }
  return result;
}

uint64_t initCGSVGDocumentRelease(uint64_t a1)
{
  if (byte_1E93CF98A == 1)
  {
    uint64_t v2 = (void *)qword_1E93CF9A0;
  }
  else
  {
    uint64_t v2 = (void *)___ZL14CoreSVGLibraryv_block_invoke();
    qword_1E93CF9A0 = (uint64_t)v2;
    byte_1E93CF98A = 1;
  }
  id v3 = (uint64_t (*)())dlsym(v2, "CGSVGDocumentRelease");
  off_1EB3531C0 = v3;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1992DA29CLL);
  }

  return ((uint64_t (*)(uint64_t))v3)(a1);
}

uint64_t WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtension::ModifierFlags>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v6 = MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v6 = v8;
    }
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = *a4;
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(unsigned int a1)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  uint64_t result = v2 + 16;
  if (a1)
  {
    uint64_t v4 = a1;
    uint64_t v5 = (_DWORD *)(v2 + 24);
    do
    {
      *((void *)v5 - 1) = 0;
      *uint64_t v5 = 0;
      v5 += 4;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(v5);
  *a1 = result;
  *(_DWORD *)(result - 4) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v9 = (WTF::StringImpl **)(v2 + 16 * i);
      char v10 = *v9;
      if (*v9 != (WTF::StringImpl *)-1)
      {
        if (v10)
        {
          uint64_t v11 = *a1;
          if (*a1) {
            int v12 = *(_DWORD *)(v11 - 8);
          }
          else {
            int v12 = 0;
          }
          unsigned int v13 = *((_DWORD *)v10 + 4);
          if (v13 >= 0x100) {
            unsigned int v14 = v13 >> 8;
          }
          else {
            unsigned int v14 = WTF::StringImpl::hashSlowCase(v10);
          }
          int v15 = 0;
          do
          {
            uint64_t v16 = v14 & v12;
            unsigned int v14 = ++v15 + v16;
          }
          while (*(void *)(v11 + 16 * v16));
          uint64_t v17 = v11 + 16 * v16;
          *(void *)uint64_t v17 = 0;
          unsigned int v18 = *v9;
          uint64_t *v9 = 0;
          *(void *)uint64_t v17 = v18;
          *(_DWORD *)(v17 + 8) = *(_DWORD *)(v2 + 16 * i + 8);
          int v19 = *v9;
          uint64_t *v9 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v7);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
        }
        else
        {
          uint64_t *v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

void *WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    if (v5 == 1)
    {
      uint64_t v6 = MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v6 = v10;
    }
    *a1 = v6;
  }
  else
  {
    *a1 = 0;
  }
  uint64_t v7 = *(void *)(a3 + 8);
  if (v7)
  {
    if (v7 == 1)
    {
      uint64_t v8 = MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v8 = v10;
    }
    a1[1] = v8;
  }
  else
  {
    a1[1] = 0;
  }
  return a1;
}

void sub_1992DA5F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  int v4 = *v2;
  *uint64_t v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,NSString * {__strong}>(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v6 = MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v6 = v8;
    }
    *a1 = v6;
  }
  else
  {
    *a1 = 0;
  }
  MEMORY[0x19972EAD0](a1 + 1, *a4);
  return a1;
}

void sub_1992DA6A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  int v4 = *v2;
  *uint64_t v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashMap(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reserveInitialCapacity(a1, a3);
  if (a3)
  {
    uint64_t v6 = a2 + 16 * a3;
    do
    {
      uint64_t v7 = a2 + 8;
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a1, (WTF::StringImpl **)a2, (void *)(a2 + 8), (uint64_t)v9);
      a2 += 16;
    }
    while (v7 + 8 != v6);
  }
  return a1;
}

void sub_1992DA744(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*v2) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::ModifierFlags>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebExtension::ModifierFlags,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::ModifierFlags>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(const WTF::StringImpl **a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = qword_1E93CF9A8;
  if (!qword_1E93CF9A8) {
    return 0;
  }
  int v5 = *(_DWORD *)(qword_1E93CF9A8 - 8);
  uint64_t v6 = *a1;
  unsigned int v7 = *((_DWORD *)v6 + 4);
  if (v7 >= 0x100) {
    unsigned int v8 = v7 >> 8;
  }
  else {
    unsigned int v8 = WTF::StringImpl::hashSlowCase(v6);
  }
  for (i = 0; ; unsigned int v8 = i + v11)
  {
    int v11 = v8 & v5;
    uint64_t result = *(WTF **)(v3 + 16 * (v8 & v5));
    if (result != (WTF *)-1)
    {
      if (!result) {
        return result;
      }
      if (WTF::equal(result, *a1, a3)) {
        break;
      }
    }
    ++i;
  }
  return (WTF *)1;
}

void WebKit::WebExtension::InjectedContentData::~InjectedContentData(WebKit::WebExtension::InjectedContentData *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  int v4 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4) {
    CFRelease(v4);
  }
  int v5 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6) {
    CFRelease(v6);
  }
  unsigned int v7 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  unsigned int v8 = (uint64_t *)*((void *)this + 1);
  if (v8) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v8, a2);
  }
  if (*(void *)this) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(*(uint64_t **)this, a2);
  }
}

uint64_t WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    int v4 = *(WebKit::WebExtension::InjectedContentData **)a1;
    uint64_t v5 = 72 * v3;
    do
    {
      WebKit::WebExtension::InjectedContentData::~InjectedContentData(v4, a2);
      int v4 = (WebKit::WebExtension::InjectedContentData *)(v6 + 72);
      v5 -= 72;
    }
    while (v5);
  }
  unsigned int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    uint64_t v5 = *(void *)a1 + 8;
    do
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      uint64_t v6 = *(uint64_t **)(v5 - 8);
      if (v6) {
        WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v6, a2);
      }
      v5 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  unsigned int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unsigned int *WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = 32 * v3;
    uint64_t v5 = (WTF::StringImpl **)(*(void *)a1 + 16);
    do
    {
      uint64_t v6 = *v5;
      *uint64_t v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      unsigned int v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, a2);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      unsigned int v8 = *(v5 - 2);
      *(v5 - 2) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, a2);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
  }
  uint64_t v9 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::WebAccessibleResourceData>(uint64_t a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 12);
  *(void *)uint64_t v4 = 0;
  uint64_t v5 = *(void *)result;
  *(void *)unint64_t result = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = v5;
  uint64_t v6 = *(void *)(result + 8);
  *(void *)(result + 8) = 0;
  *(void *)(v4 + 8) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 20);
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(v4 + 20) = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtension::WebAccessibleResourceData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = *(WTF **)result;
      unsigned int v4 = *(_DWORD *)(result + 12);
      int v5 = 24 * a2;
      unint64_t result = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        uint64_t v7 = result;
        unint64_t v8 = (char *)v3 + 24 * v4;
        uint64_t v9 = (uint64_t)v3 + 8;
        do
        {
          *(void *)uint64_t v7 = 0;
          uint64_t v11 = v9 - 8;
          uint64_t v10 = *(void *)(v9 - 8);
          *(void *)(v9 - 8) = 0;
          *(void *)(v7 + 8) = 0;
          *(void *)(v7 + 16) = 0;
          *(void *)uint64_t v7 = v10;
          uint64_t v12 = *(void *)v9;
          *(void *)uint64_t v9 = 0;
          *(void *)(v7 + 8) = v12;
          LODWORD(v12) = *(_DWORD *)(v9 + 8);
          *(_DWORD *)(v9 + 8) = 0;
          *(_DWORD *)(v7 + 16) = v12;
          LODWORD(v12) = *(_DWORD *)(v9 + 12);
          *(_DWORD *)(v9 + 12) = 0;
          *(_DWORD *)(v7 + 20) = v12;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9, v6);
          unint64_t result = *(void *)(v9 - 8);
          if (result) {
            unint64_t result = WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)result, v6);
          }
          v9 += 24;
          v7 += 24;
        }
        while ((char *)(v11 + 24) != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::WebExtension::bestImageForIconsDictionaryManifestKey(NSDictionary *,NSString *,CGSize,WTF::RetainPtr<NSMutableDictionary> &,WebKit::WebExtension::Error,NSString *)::$_0,void,NSError * {__strong}>::call(uint64_t a1, NSError *a2)
{
}

void WTF::Detail::CallableWrapper<WebKit::WebExtension::bestImageForIconVariantsManifestKey(NSDictionary *,NSString *,CGSize,WTF::RetainPtr<NSMutableDictionary> &,WebKit::WebExtension::Error,NSString *)::$_0,void,NSError * {__strong}>::call(uint64_t a1, NSError *a2)
{
}

unint64_t WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::CommandData>(unsigned int *a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = *(void *)a1 + 32 * a1[3];
  uint64_t v5 = *(void *)result;
  *(void *)unint64_t result = 0;
  *(void *)uint64_t v4 = v5;
  uint64_t v6 = *(void *)(result + 8);
  *(void *)(result + 8) = 0;
  *(void *)(v4 + 8) = v6;
  uint64_t v7 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  *(void *)(v4 + 16) = v7;
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(result + 24);
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebKit::WebExtension::CommandData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      unint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(32 * a2));
      v3[2] = v2;
      *(void *)unint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = result;
        unint64_t v8 = (WTF *)((char *)v4 + 32 * v5);
        unint64_t v9 = v4;
        do
        {
          unint64_t v10 = *(unsigned int **)v9;
          *(void *)unint64_t v9 = 0;
          *(void *)unint64_t v7 = v10;
          uint64_t v11 = *((void *)v9 + 1);
          *((void *)v9 + 1) = 0;
          *((void *)v7 + 1) = v11;
          uint64_t v12 = *((void *)v9 + 2);
          *((void *)v9 + 2) = 0;
          *((void *)v7 + 2) = v12;
          v7[6] = *((_DWORD *)v9 + 6);
          unsigned int v13 = (WTF::StringImpl *)*((void *)v9 + 2);
          *((void *)v9 + 2) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, v6);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
          unsigned int v14 = (WTF::StringImpl *)*((void *)v9 + 1);
          *((void *)v9 + 1) = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v6);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
          unint64_t result = *(unsigned int **)v9;
          *(void *)unint64_t v9 = 0;
          if (result)
          {
            if (*result == 2) {
              unint64_t result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            }
            else {
              *result -= 2;
            }
          }
          unint64_t v9 = (WTF *)((char *)v9 + 32);
          v7 += 8;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtension::DeclarativeNetRequestRulesetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::DeclarativeNetRequestRulesetData&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::WebExtension::DeclarativeNetRequestRulesetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = (void *)(*(void *)a1 + 24 * v4);
  unint64_t v7 = *(_DWORD **)v3;
  if (*(void *)v3) {
    *v7 += 2;
  }
  void *v6 = v7;
  *(unsigned char *)(v5 + 24 * v4 + 8) = *(unsigned char *)(v3 + 8);
  unint64_t v8 = *(_DWORD **)(v3 + 16);
  if (v8) {
    *v8 += 2;
  }
  *(void *)(v5 + 24 * v4 + 16) = v8;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<WebKit::WebExtension::DeclarativeNetRequestRulesetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebExtension::DeclarativeNetRequestRulesetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebExtension::DeclarativeNetRequestRulesetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtension::DeclarativeNetRequestRulesetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0xAAAAAAB)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    unsigned int v4 = (WTF::StringImpl *)(*(void *)result + 24 * *(unsigned int *)(result + 12));
    int v5 = 24 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)uint64_t v2 = v6;
    WTF::VectorMover<false,WebCore::WebLockManagerSnapshot::Info>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::InjectedContentData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = (uint64_t *)WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebKit::WebExtension::InjectedContentData::InjectedContentData(*(void *)a1 + 72 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WebKit::WebExtension::InjectedContentData::InjectedContentData(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = a2[1];
  a2[1] = 0;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  uint64_t v6 = a2[3];
  a2[3] = 0;
  *(void *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr((void *)(a1 + 40), a2 + 5);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr((void *)(a1 + 48), a2 + 6);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr((void *)(a1 + 56), a2 + 7);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr((void *)(a1 + 64), a2 + 8);
  return a1;
}

void sub_1992DB234(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  unint64_t v7 = *v5;
  *uint64_t v5 = 0;
  if (v7) {
    CFRelease(v7);
  }
  unint64_t v8 = *v4;
  WTF::StringImpl *v4 = 0;
  if (v8) {
    CFRelease(v8);
  }
  unint64_t v9 = *v3;
  uint64_t *v3 = 0;
  if (v9) {
    CFRelease(v9);
  }
  unint64_t v10 = *(WTF::StringImpl **)(v2 + 24);
  *(void *)(v2 + 24) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = *(uint64_t **)(v2 + 8);
  if (v11) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v11, a2);
  }
  if (*(void *)v2) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(*(uint64_t **)v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 72 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x38E38E4)
    {
      __break(0xC471u);
      JUMPOUT(0x1992DB41CLL);
    }
    unint64_t v3 = *(uint64_t **)a1;
    uint64_t v4 = (uint64_t *)(*(void *)a1 + 72 * *(unsigned int *)(a1 + 12));
    int v5 = 72 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(72 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebExtension::InjectedContentData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(uint64_t **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebKit::WebExtension::InjectedContentData>::move(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    int v5 = a1;
    do
    {
      WebKit::WebExtension::InjectedContentData::InjectedContentData(a3, v5);
      WebKit::WebExtension::InjectedContentData::~InjectedContentData((WebKit::WebExtension::InjectedContentData *)v5, v6);
      a3 += 72;
      v5 += 9;
    }
    while (v5 != a2);
  }
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WebKit::WebExtensionMatchPattern const*>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  for (int i = 1; ; ++i)
  {
    uint64_t v9 = *(void *)(v2 + 8 * v7);
    if (v9 != -1)
    {
      if (!v9) {
        return 0;
      }
      if (v9 == *a2) {
        break;
      }
    }
    unsigned int v7 = (v7 + i) & v3;
  }
  return 1;
}

uint64_t WebKit::WebExtensionCommand::WebExtensionCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE9FD898;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  unint64_t v6 = *(atomic_uint **)(a2 + 24);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  *(void *)(a1 + 24) = v6;
  unsigned int v7 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v7 += 2;
  }
  *(void *)(a1 + 32) = v7;
  unint64_t v8 = *(_DWORD **)(a3 + 8);
  if (v8) {
    *v8 += 2;
  }
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = *(_DWORD **)(a3 + 16);
  if (v9) {
    *v9 += 2;
  }
  *(void *)(a1 + 48) = v9;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a3 + 24);
  *(void *)(a1 + 64) = 0;
  return a1;
}

uint64_t WebKit::WebExtensionCommand::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      uint64_t v3 = v4 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6) {
      uint64_t v5 = v6 - 16;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  if (v3 == v5) {
    return WTF::equal(*(WTF **)(a1 + 32), *(const WTF::StringImpl **)(a2 + 32), a3);
  }
  else {
    return 0;
  }
}

uint64_t WebKit::WebExtensionCommand::isActionCommand(WebKit::WebExtensionCommand *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      double v4 = WebKit::WebExtension::manifestVersion(*(WebKit::WebExtension **)(v2 + 48));
      uint64_t v5 = *((void *)this + 4);
      if (v4 >= 3.0)
      {
        unsigned int v7 = "_execute_action";
        uint64_t v8 = 15;
      }
      else
      {
        if (MEMORY[0x19972E990](v5, "_execute_browser_action", 23))
        {
          uint64_t v6 = 1;
LABEL_10:
          CFRelease(*(CFTypeRef *)(v2 - 8));
          return v6;
        }
        uint64_t v5 = *((void *)this + 4);
        unsigned int v7 = "_execute_page_action";
        uint64_t v8 = 20;
      }
      uint64_t v6 = MEMORY[0x19972E990](v5, v7, v8);
      goto LABEL_10;
    }
  }
  return 0;
}

WTF::StringImpl *WebKit::WebExtensionCommand::parameters@<X0>(WebKit::WebExtensionCommand *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 4);
  if (v3) {
    *v3 += 2;
  }
  *(void *)a3 = v3;
  double v4 = (_DWORD *)*((void *)this + 5);
  if (v4) {
    *v4 += 2;
  }
  *(void *)(a3 + 8) = v4;
  return WebKit::WebExtensionCommand::shortcutString(this, a2, (WTF::StringImpl **)(a3 + 16));
}

void WebKit::WebExtensionCommand::~WebExtensionCommand(WebKit::WebExtensionCommand *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionCommand::~WebExtensionCommand(this, a2);

  JUMPOUT(0x199740C10);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;

  *(void *)this = &unk_1EE9FD898;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  double v4 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  unsigned int v7 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, a2);
  }
  uint64_t v8 = *((void *)this + 2);
  if (v8)
  {
    *(void *)(v8 + 8) = 0;
    uint64_t v9 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v9)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

uint64_t API::ObjectImpl<(API::Object::Type)112>::type()
{
  return 112;
}

void sub_1992DBCAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(CFTypeRef *this, WTF::StringImpl *a2)
{
  if (!this[8])
  {
    WebKit::WebExtensionCommand::shortcutString((WebKit::WebExtensionCommand *)this, a2, &v8);
    double v4 = (WTF::StringImpl *)this[8];
    this[8] = v8;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    CFRetain(this[1]);
    uint64_t v5 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v5 = MEMORY[0x1E4F14398];
    v5[1] = 50331650;
    v5[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(void)::$_0>(WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(void)::$_0)::{lambda(void *)#1}::__invoke;
    v5[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(void)::$_0>(WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(void)::$_0)::descriptor;
    v5[4] = this;
    v5[5] = this;
    aBlocuint64_t k = _Block_copy(v5);

    uint64_t v6 = _Block_copy(aBlock);
    dispatch_async(MEMORY[0x1E4F14428], v6);
  }
}

void sub_1992DBDF8(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionCommand::shortcutString@<X0>(WebKit::WebExtensionCommand *this@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  v93[2] = *MEMORY[0x1E4F143B8];
  double v4 = (WTF::StringImpl **)((char *)this + 48);
  uint64_t v5 = *((void *)this + 6);
  if (v5 && *(_DWORD *)(v5 + 4)) {
    int v6 = *((_DWORD *)this + 14);
  }
  else {
    int v6 = 0;
  }
  if (!*((_DWORD *)this + 14)) {
    double v4 = (WTF::StringImpl **)MEMORY[0x1E4F30978];
  }
  unint64_t result = *v4;
  if (*v4 && (*(_DWORD *)result += 2, v67 = result, v6) && *((_DWORD *)result + 1))
  {
    if ((_MergedGlobals_127 & 1) == 0)
    {
      int v37 = v6;
      v65[0] = (WTF::StringImpl *)",";
      v65[1] = (WTF::StringImpl *)2;
      v64[0] = (WTF::StringImpl *)"Comma";
      v64[1] = (WTF::StringImpl *)6;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v68, (uint64_t)v65, (uint64_t)v64);
      v63[0] = ".";
      v63[1] = 2;
      v62[0] = "Period";
      v62[1] = 7;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v70, (uint64_t)v63, (uint64_t)v62);
      v61[0] = " ";
      v61[1] = 2;
      v60[0] = "Space";
      v60[1] = 6;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v71, (uint64_t)v61, (uint64_t)v60);
      v59[0] = "F1";
      v59[1] = 3;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v72, @"", (uint64_t)v59);
      v58[0] = "F2";
      v58[1] = 3;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v73, @"", (uint64_t)v58);
      v57[0] = "F3";
      v57[1] = 3;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v74, @"", (uint64_t)v57);
      v56[0] = "F4";
      v56[1] = 3;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v75, @"", (uint64_t)v56);
      v55[0] = "F5";
      v55[1] = 3;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v76, @"", (uint64_t)v55);
      v54[0] = "F6";
      v54[1] = 3;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v77, @"", (uint64_t)v54);
      v53[0] = "F7";
      v53[1] = 3;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v78, @"", (uint64_t)v53);
      v52[0] = "F8";
      v52[1] = 3;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v79, @"", (uint64_t)v52);
      v51[0] = "F9";
      v51[1] = 3;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v80, @"", (uint64_t)v51);
      v50[0] = "F10";
      v50[1] = 4;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v81, @"", (uint64_t)v50);
      v49[0] = "F11";
      v49[1] = 4;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v82, @"", (uint64_t)v49);
      v48[0] = "F12";
      v48[1] = 4;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v83, @"", (uint64_t)v48);
      v47[0] = "Insert";
      v47[1] = 7;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v84, @"", (uint64_t)v47);
      v46[0] = "Delete";
      v46[1] = 7;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v85, @"", (uint64_t)v46);
      v45[0] = "Home";
      v45[1] = 5;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v86, @"", (uint64_t)v45);
      v44[0] = "End";
      v44[1] = 4;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v87, @"", (uint64_t)v44);
      v43[0] = "PageUp";
      v43[1] = 7;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v88, @"", (uint64_t)v43);
      v42[0] = "PageDown";
      v42[1] = 9;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v89, @"", (uint64_t)v42);
      v41[0] = "Up";
      v41[1] = 3;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v90, @"", (uint64_t)v41);
      v40[0] = "Down";
      v40[1] = 5;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v91, @"", (uint64_t)v40);
      v39[0] = "Left";
      v39[1] = 5;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v92, @"", (uint64_t)v39);
      v38[0] = "Right";
      v38[1] = 6;
      WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)v93, @"", (uint64_t)v38);
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashMap(&v66, (uint64_t)&v68, 25);
      uint64_t v32 = v66;
      uint64_t v66 = 0;
      qword_1EB35A1B8 = v32;
      uint64_t v33 = 400;
      do
      {
        id v34 = (char *)&v68 + v33;
        uint64_t v35 = *(WTF::StringImpl **)((char *)&v67 + v33);
        *(WTF::StringImpl **)((char *)&v67 + v33) = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2) {
            WTF::StringImpl::destroy(v35, v31);
          }
          else {
            *(_DWORD *)v35 -= 2;
          }
        }
        id v36 = (WTF::StringImpl *)*((void *)v34 - 2);
        *((void *)v34 - 2) = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2) {
            WTF::StringImpl::destroy(v36, v31);
          }
          else {
            *(_DWORD *)v36 -= 2;
          }
        }
        v33 -= 16;
      }
      while (v33);

      _MergedGlobals_127 = 1;
      int v6 = v37;
    }
    v68 = 0;
    v69 = 0;
    LODWORD(v70) = 0;
    BYTE4(v70) = 1;
    if ((v6 & 0x40000) != 0) {
      WTF::StringBuilder::append();
    }
    if ((v6 & 0x80000) != 0)
    {
      uint64_t v8 = v70;
      if (v70)
      {
        LOBYTE(v65[0]) = 43;
        if (!v69 || v70 >= *((_DWORD *)v69 + 1) || v68)
        {
          WTF::StringBuilder::append();
        }
        else
        {
          int v9 = *((_DWORD *)v69 + 4);
          uint64_t v10 = *((void *)v69 + 1);
          LODWORD(v70) = v70 + 1;
          if ((v9 & 4) != 0) {
            *(unsigned char *)(v10 + v8) = 43;
          }
          else {
            *(_WORD *)(v10 + 2 * v8) = 43;
          }
        }
      }
      WTF::StringBuilder::append();
    }
    if ((v6 & 0x20000) != 0)
    {
      uint64_t v11 = v70;
      if (v70)
      {
        LOBYTE(v65[0]) = 43;
        if (!v69 || v70 >= *((_DWORD *)v69 + 1) || v68)
        {
          WTF::StringBuilder::append();
        }
        else
        {
          int v12 = *((_DWORD *)v69 + 4);
          uint64_t v13 = *((void *)v69 + 1);
          LODWORD(v70) = v70 + 1;
          if ((v12 & 4) != 0) {
            *(unsigned char *)(v13 + v11) = 43;
          }
          else {
            *(_WORD *)(v13 + 2 * v11) = 43;
          }
        }
      }
      WTF::StringBuilder::append();
    }
    if ((v6 & 0x100000) != 0)
    {
      uint64_t v14 = v70;
      if (v70)
      {
        LOBYTE(v65[0]) = 43;
        if (!v69 || v70 >= *((_DWORD *)v69 + 1) || v68)
        {
          WTF::StringBuilder::append();
        }
        else
        {
          int v15 = *((_DWORD *)v69 + 4);
          uint64_t v16 = *((void *)v69 + 1);
          LODWORD(v70) = v70 + 1;
          if ((v15 & 4) != 0) {
            *(unsigned char *)(v16 + v14) = 43;
          }
          else {
            *(_WORD *)(v16 + 2 * v14) = 43;
          }
        }
      }
      WTF::StringBuilder::append();
    }
    uint64_t v17 = v70;
    if (v70)
    {
      LOBYTE(v65[0]) = 43;
      if (!v69 || v70 >= *((_DWORD *)v69 + 1) || v68)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        int v18 = *((_DWORD *)v69 + 4);
        uint64_t v19 = *((void *)v69 + 1);
        LODWORD(v70) = v70 + 1;
        if ((v18 & 4) != 0) {
          *(unsigned char *)(v19 + v17) = 43;
        }
        else {
          *(_WORD *)(v19 + 2 * v17) = 43;
        }
      }
    }
    WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WTF *)v65, qword_1EB35A1B8, &v67);
    if (v65[0] && (uint64_t v20 = *((unsigned int *)v65[0] + 1), v20))
    {
      if (v70 || v69)
      {
        WTF::StringBuilder::append((uint64_t)&v68, *((void *)v65[0] + 1), v20 | ((unint64_t)((*((_DWORD *)v65[0] + 4) >> 2) & 1) << 32));
      }
      else
      {
        WTF::String::operator=((uint64_t *)&v68, v65);
        int v21 = (int)v65[0];
        if (v65[0]) {
          int v21 = *((_DWORD *)v65[0] + 1);
        }
        LODWORD(v70) = v21;
      }
    }
    else
    {
      WTF::String::convertToASCIIUppercase((uint64_t *)v64, (WTF::String *)&v67);
      if (v70 || v69)
      {
        if (v64[0])
        {
          uint64_t v29 = *((void *)v64[0] + 1);
          unint64_t v30 = *((unsigned int *)v64[0] + 1) | ((unint64_t)((*((_DWORD *)v64[0] + 4) >> 2) & 1) << 32);
        }
        else
        {
          uint64_t v29 = 0;
          unint64_t v30 = 0x100000000;
        }
        WTF::StringBuilder::append((uint64_t)&v68, v29, v30);
        uint64_t v23 = v64[0];
      }
      else
      {
        WTF::String::operator=((uint64_t *)&v68, v64);
        uint64_t v23 = v64[0];
        if (v64[0]) {
          int v24 = *((_DWORD *)v64[0] + 1);
        }
        else {
          int v24 = 0;
        }
        LODWORD(v70) = v24;
      }
      v64[0] = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, a2);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
    }
    id v25 = v65[0];
    v65[0] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, a2);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    uint64_t v26 = v68;
    if (v68
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v68),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v68),
          (uint64_t v26 = v68) != 0))
    {
      *(_DWORD *)v26 += 2;
    }
    *a3 = v26;
    uint64_t v27 = v69;
    v69 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, a2);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    long long v28 = v68;
    v68 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, a2);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
    unint64_t result = v67;
  }
  else
  {
    BOOL v22 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *(_DWORD *)v22 += 2;
    }
    *a3 = v22;
  }
  v67 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1992DC8A8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,WTF::StringImpl *a62,uint64_t a63)
{
  uint64_t v69 = 400;
  while (1)
  {
    uint64_t v70 = v67 + v69;
    uint64_t v71 = *(WTF::StringImpl **)(v67 + v69 - 8);
    *(void *)(v67 + v69 - 8) = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2) {
        WTF::StringImpl::destroy(v71, a2);
      }
      else {
        *(_DWORD *)v71 -= 2;
      }
    }
    uint64_t v72 = *(WTF::StringImpl **)(v70 - 16);
    *(void *)(v70 - 16) = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2) {
        WTF::StringImpl::destroy(v72, a2);
      }
      else {
        *(_DWORD *)v72 -= 2;
      }
    }
    v69 -= 16;
    if (!v69)
    {

      if (a67)
      {
        if (*(_DWORD *)a67 == 2) {
          WTF::StringImpl::destroy(a67, v73);
        }
        else {
          *(_DWORD *)a67 -= 2;
        }
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t WebKit::WebExtensionCommand::setActivationKey(uint64_t a1, WTF::String *a2)
{
  if (!*(void *)a2) {
    goto LABEL_4;
  }
  int v3 = *(_DWORD *)(*(void *)a2 + 4);
  if (v3 == 1)
  {
    if (qword_1EB35A1B0 != -1) {
      dispatch_once(&qword_1EB35A1B0, &__block_literal_global_36);
    }
    if (*(void *)a2) {
      int v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v6 = &stru_1EEA10550;
    }
    uint64_t v7 = [(__CFString *)v6 rangeOfCharacterFromSet:qword_1EB35A1A8];

    if (v7 == 0x7FFFFFFFFFFFFFFFLL)
    {
      WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded((CFTypeRef *)a1, v8);
      WTF::String::convertToASCIILowercase((uint64_t *)&v14, a2);
      uint64_t v10 = v14;
      uint64_t v14 = 0;
      uint64_t v11 = *(WTF::StringImpl **)(a1 + 48);
      *(void *)(a1 + 48) = v10;
      if (v11)
      {
        int v12 = *(_DWORD *)v11 - 2;
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::destroy(v11, v9);
          uint64_t v11 = v14;
          uint64_t v14 = 0;
          if (!v11) {
            return 1;
          }
          int v12 = *(_DWORD *)v11 - 2;
          if (*(_DWORD *)v11 == 2)
          {
            WTF::StringImpl::destroy(v11, v13);
            return 1;
          }
        }
        *(_DWORD *)uint64_t v11 = v12;
      }
      return 1;
    }
  }
  else if (!v3)
  {
LABEL_4:
    WTF::String::operator=((uint64_t *)(a1 + 48), MEMORY[0x1E4F30978]);
    return 1;
  }
  return 0;
}

void sub_1992DCDB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN6WebKit19WebExtensionCommand16setActivationKeyEN3WTF6StringE_block_invoke()
{
  id v2 = [MEMORY[0x1E4F28E58] alphanumericCharacterSet];
  objc_msgSend(v2, "addCharactersInRange:", 63236, 12);
  objc_msgSend(v2, "addCharactersInRange:", 63271, 3);
  objc_msgSend(v2, "addCharactersInRange:", 63275, 3);
  objc_msgSend(v2, "addCharactersInRange:", 63232, 4);
  [v2 addCharactersInString:@",. "];
  uint64_t v0 = [v2 invertedSet];
  uint64_t v1 = (void *)qword_1EB35A1A8;
  qword_1EB35A1A8 = v0;
}

void sub_1992DCE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionCommand::userVisibleShortcut@<X0>(WebKit::WebExtensionCommand *this@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  v101[2] = *MEMORY[0x1E4F143B8];
  double v4 = (WTF::StringImpl **)((char *)this + 48);
  uint64_t v5 = *((void *)this + 6);
  if (v5 && *(_DWORD *)(v5 + 4)) {
    int v6 = *((_DWORD *)this + 14);
  }
  else {
    int v6 = 0;
  }
  if (!*((_DWORD *)this + 14)) {
    double v4 = (WTF::StringImpl **)MEMORY[0x1E4F30978];
  }
  unint64_t result = *v4;
  if (*v4)
  {
    *(_DWORD *)result += 2;
    uint64_t v75 = result;
    if (v6)
    {
      if (*((_DWORD *)result + 1))
      {
        if ((byte_1EB35A1A1 & 1) == 0)
        {
          int v45 = v6;
          v73[0] = (WTF::StringImpl *)",";
          v73[1] = (WTF::StringImpl *)2;
          v72[0] = (WTF::StringImpl *)",";
          v72[1] = (WTF::StringImpl *)2;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v76, (uint64_t)v73, (uint64_t)v72);
          v71[0] = ".";
          v71[1] = 2;
          v70[0] = ".";
          v70[1] = 2;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v78, (uint64_t)v71, (uint64_t)v70);
          v69[0] = " ";
          v69[1] = 2;
          v68[0] = "Space";
          v68[1] = 6;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v79, (uint64_t)v69, (uint64_t)v68);
          v67[0] = "F1";
          v67[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v80, @"", (uint64_t)v67);
          v66[0] = "F2";
          v66[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v81, @"", (uint64_t)v66);
          v65[0] = "F3";
          v65[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v82, @"", (uint64_t)v65);
          v64[0] = "F4";
          v64[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v83, @"", (uint64_t)v64);
          v63[0] = "F5";
          v63[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v84, @"", (uint64_t)v63);
          v62[0] = "F6";
          v62[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v85, @"", (uint64_t)v62);
          v61[0] = "F7";
          v61[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v86, @"", (uint64_t)v61);
          v60[0] = "F8";
          v60[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v87, @"", (uint64_t)v60);
          v59[0] = "F9";
          v59[1] = 3;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v88, @"", (uint64_t)v59);
          v58[0] = "F10";
          v58[1] = 4;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v89, @"", (uint64_t)v58);
          v57[0] = "F11";
          v57[1] = 4;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v90, @"", (uint64_t)v57);
          v56[0] = "F12";
          v56[1] = 4;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v91, @"", (uint64_t)v56);
          v55[0] = "Ins";
          v55[1] = 4;
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>((uint64_t)&v92, @"", (uint64_t)v55);
          CFStringRef v54 = @"⌫";
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},NSString * {__strong}>((uint64_t)&v93, @"", &v54);
          CFStringRef v53 = @"↖︎";
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},NSString * {__strong}>((uint64_t)&v94, @"", &v53);
          v52 = @"↘︎";
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},NSString * {__strong}>((uint64_t)&v95, @"", &v52);
          v51 = @"⇞";
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},NSString * {__strong}>((uint64_t)&v96, @"", &v51);
          v50 = @"⇟";
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},NSString * {__strong}>((uint64_t)&v97, @"", &v50);
          v49 = @"↑";
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},NSString * {__strong}>((uint64_t)&v98, @"", &v49);
          v48 = @"↓";
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},NSString * {__strong}>((uint64_t)&v99, @"", &v48);
          uint64_t v47 = @"←";
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},NSString * {__strong}>((uint64_t)&v100, @"", &v47);
          id v46 = @"→";
          WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},NSString * {__strong}>((uint64_t)v101, @"", &v46);
          WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashMap(&v74, (uint64_t)&v76, 25);
          uint64_t v40 = v74;
          uint64_t v74 = 0;
          qword_1EB35A1C0 = v40;
          uint64_t v41 = 400;
          do
          {
            long long v42 = (char *)&v76 + v41;
            long long v43 = *(WTF::StringImpl **)((char *)&v75 + v41);
            *(WTF::StringImpl **)((char *)&v75 + v41) = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 2) {
                WTF::StringImpl::destroy(v43, v39);
              }
              else {
                *(_DWORD *)v43 -= 2;
              }
            }
            CFStringRef v44 = (WTF::StringImpl *)*((void *)v42 - 2);
            *((void *)v42 - 2) = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2) {
                WTF::StringImpl::destroy(v44, v39);
              }
              else {
                *(_DWORD *)v44 -= 2;
              }
            }
            v41 -= 16;
          }
          while (v41);

          byte_1EB35A1A1 = 1;
          int v6 = v45;
        }
        uint64_t v76 = 0;
        uint64_t v77 = 0;
        LODWORD(v78) = 0;
        BYTE4(v78) = 1;
        if ((v6 & 0x40000) != 0)
        {
          MEMORY[0x19972EAD0](v73, @"⌃");
          if (v78 || v77)
          {
            if (v73[0])
            {
              uint64_t v31 = *((void *)v73[0] + 1);
              unint64_t v32 = *((unsigned int *)v73[0] + 1) | ((unint64_t)((*((_DWORD *)v73[0] + 4) >> 2) & 1) << 32);
            }
            else
            {
              uint64_t v31 = 0;
              unint64_t v32 = 0x100000000;
            }
            WTF::StringBuilder::append((uint64_t)&v76, v31, v32);
            int v9 = v73[0];
          }
          else
          {
            WTF::String::operator=((uint64_t *)&v76, v73);
            int v9 = v73[0];
            int v10 = v73[0] ? *((_DWORD *)v73[0] + 1) : 0;
            LODWORD(v78) = v10;
          }
          v73[0] = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
            {
              WTF::StringImpl::destroy(v9, v8);
              if ((v6 & 0x80000) == 0) {
                goto LABEL_21;
              }
              goto LABEL_27;
            }
            *(_DWORD *)v9 -= 2;
          }
        }
        if ((v6 & 0x80000) == 0) {
          goto LABEL_21;
        }
LABEL_27:
        MEMORY[0x19972EAD0](v73, @"⌥");
        if (v78 || v77)
        {
          if (v73[0])
          {
            uint64_t v33 = *((void *)v73[0] + 1);
            unint64_t v34 = *((unsigned int *)v73[0] + 1) | ((unint64_t)((*((_DWORD *)v73[0] + 4) >> 2) & 1) << 32);
          }
          else
          {
            uint64_t v33 = 0;
            unint64_t v34 = 0x100000000;
          }
          WTF::StringBuilder::append((uint64_t)&v76, v33, v34);
          uint64_t v13 = v73[0];
        }
        else
        {
          WTF::String::operator=((uint64_t *)&v76, v73);
          uint64_t v13 = v73[0];
          if (v73[0]) {
            int v14 = *((_DWORD *)v73[0] + 1);
          }
          else {
            int v14 = 0;
          }
          LODWORD(v78) = v14;
        }
        v73[0] = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
          {
            WTF::StringImpl::destroy(v13, v12);
            if ((v6 & 0x20000) == 0) {
              goto LABEL_37;
            }
          }
          else
          {
            *(_DWORD *)v13 -= 2;
            if ((v6 & 0x20000) == 0) {
              goto LABEL_37;
            }
          }
LABEL_39:
          MEMORY[0x19972EAD0](v73, @"⇧");
          if (v78 || v77)
          {
            if (v73[0])
            {
              uint64_t v35 = *((void *)v73[0] + 1);
              unint64_t v36 = *((unsigned int *)v73[0] + 1) | ((unint64_t)((*((_DWORD *)v73[0] + 4) >> 2) & 1) << 32);
            }
            else
            {
              uint64_t v35 = 0;
              unint64_t v36 = 0x100000000;
            }
            WTF::StringBuilder::append((uint64_t)&v76, v35, v36);
            uint64_t v16 = v73[0];
          }
          else
          {
            WTF::String::operator=((uint64_t *)&v76, v73);
            uint64_t v16 = v73[0];
            if (v73[0]) {
              int v17 = *((_DWORD *)v73[0] + 1);
            }
            else {
              int v17 = 0;
            }
            LODWORD(v78) = v17;
          }
          v73[0] = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
            {
              WTF::StringImpl::destroy(v16, v15);
              if ((v6 & 0x100000) == 0) {
                goto LABEL_58;
              }
            }
            else
            {
              *(_DWORD *)v16 -= 2;
              if ((v6 & 0x100000) == 0)
              {
LABEL_58:
                WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WTF *)v73, qword_1EB35A1C0, &v75);
                if (v73[0] && (uint64_t v21 = *((unsigned int *)v73[0] + 1), v21))
                {
                  if (v78 || v77)
                  {
                    WTF::StringBuilder::append((uint64_t)&v76, *((void *)v73[0] + 1), v21 | ((unint64_t)((*((_DWORD *)v73[0] + 4) >> 2) & 1) << 32));
                  }
                  else
                  {
                    WTF::String::operator=((uint64_t *)&v76, v73);
                    int v22 = (int)v73[0];
                    if (v73[0]) {
                      int v22 = *((_DWORD *)v73[0] + 1);
                    }
                    LODWORD(v78) = v22;
                  }
                }
                else
                {
                  WTF::String::convertToASCIIUppercase((uint64_t *)v72, (WTF::String *)&v75);
                  if (v78 || v77)
                  {
                    if (v72[0])
                    {
                      uint64_t v29 = *((void *)v72[0] + 1);
                      unint64_t v30 = *((unsigned int *)v72[0] + 1) | ((unint64_t)((*((_DWORD *)v72[0] + 4) >> 2) & 1) << 32);
                    }
                    else
                    {
                      uint64_t v29 = 0;
                      unint64_t v30 = 0x100000000;
                    }
                    WTF::StringBuilder::append((uint64_t)&v76, v29, v30);
                    uint64_t v23 = v72[0];
                  }
                  else
                  {
                    WTF::String::operator=((uint64_t *)&v76, v72);
                    uint64_t v23 = v72[0];
                    if (v72[0]) {
                      int v24 = *((_DWORD *)v72[0] + 1);
                    }
                    else {
                      int v24 = 0;
                    }
                    LODWORD(v78) = v24;
                  }
                  v72[0] = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2) {
                      WTF::StringImpl::destroy(v23, a2);
                    }
                    else {
                      *(_DWORD *)v23 -= 2;
                    }
                  }
                }
                id v25 = v73[0];
                v73[0] = 0;
                if (v25)
                {
                  if (*(_DWORD *)v25 == 2) {
                    WTF::StringImpl::destroy(v25, a2);
                  }
                  else {
                    *(_DWORD *)v25 -= 2;
                  }
                }
                uint64_t v26 = v76;
                if (v76
                  || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v76),
                      WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v76),
                      (uint64_t v26 = v76) != 0))
                {
                  *(_DWORD *)v26 += 2;
                }
                *a3 = v26;
                uint64_t v27 = v77;
                uint64_t v77 = 0;
                if (v27)
                {
                  if (*(_DWORD *)v27 == 2) {
                    WTF::StringImpl::destroy(v27, a2);
                  }
                  else {
                    *(_DWORD *)v27 -= 2;
                  }
                }
                long long v28 = v76;
                uint64_t v76 = 0;
                if (v28)
                {
                  if (*(_DWORD *)v28 == 2) {
                    WTF::StringImpl::destroy(v28, a2);
                  }
                  else {
                    *(_DWORD *)v28 -= 2;
                  }
                }
                unint64_t result = v75;
                goto LABEL_90;
              }
            }
LABEL_49:
            MEMORY[0x19972EAD0](v73, @"⌘");
            if (v78 || v77)
            {
              if (v73[0])
              {
                uint64_t v37 = *((void *)v73[0] + 1);
                unint64_t v38 = *((unsigned int *)v73[0] + 1) | ((unint64_t)((*((_DWORD *)v73[0] + 4) >> 2) & 1) << 32);
              }
              else
              {
                uint64_t v37 = 0;
                unint64_t v38 = 0x100000000;
              }
              WTF::StringBuilder::append((uint64_t)&v76, v37, v38);
              uint64_t v19 = v73[0];
            }
            else
            {
              WTF::String::operator=((uint64_t *)&v76, v73);
              uint64_t v19 = v73[0];
              if (v73[0]) {
                int v20 = *((_DWORD *)v73[0] + 1);
              }
              else {
                int v20 = 0;
              }
              LODWORD(v78) = v20;
            }
            v73[0] = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2) {
                WTF::StringImpl::destroy(v19, v18);
              }
              else {
                *(_DWORD *)v19 -= 2;
              }
            }
            goto LABEL_58;
          }
LABEL_37:
          if ((v6 & 0x100000) == 0) {
            goto LABEL_58;
          }
          goto LABEL_49;
        }
LABEL_21:
        if ((v6 & 0x20000) == 0) {
          goto LABEL_37;
        }
        goto LABEL_39;
      }
    }
  }
  uint64_t v11 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *(_DWORD *)v11 += 2;
  }
  *a3 = v11;
LABEL_90:
  uint64_t v75 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1992DD9F4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,WTF::StringImpl *a54,uint64_t a55,WTF::StringImpl *a56,uint64_t a57,uint64_t a58,WTF::StringImpl *a59,WTF::StringImpl *a60,WTF::StringImpl *a61)
{
  uint64_t v63 = 400;
  while (1)
  {
    uint64_t v64 = v61 + v63;
    CFStringRef v65 = *(WTF::StringImpl **)(v61 + v63 - 8);
    *(void *)(v61 + v63 - 8) = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2) {
        WTF::StringImpl::destroy(v65, a2);
      }
      else {
        *(_DWORD *)v65 -= 2;
      }
    }
    uint64_t v66 = *(WTF::StringImpl **)(v64 - 16);
    *(void *)(v64 - 16) = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2) {
        WTF::StringImpl::destroy(v66, a2);
      }
      else {
        *(_DWORD *)v66 -= 2;
      }
    }
    v63 -= 16;
    if (!v63)
    {

      if (a59)
      {
        if (*(_DWORD *)a59 == 2) {
          WTF::StringImpl::destroy(a59, v67);
        }
        else {
          *(_DWORD *)a59 -= 2;
        }
      }
      _Unwind_Resume(a1);
    }
  }
}

id WebKit::WebExtensionCommand::platformMenuItem(WebKit::WebExtensionCommand *this)
{
  id v2 = (void *)MEMORY[0x1E4F426E8];
  if (*((void *)this + 5)) {
    int v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    int v3 = &stru_1EEA10550;
  }
  CFRetain(*((CFTypeRef *)this + 1));
  double v4 = malloc_type_malloc(0x30uLL, 0x10E0040719E0AAAuLL);
  void *v4 = MEMORY[0x1E4F14398];
  v4[1] = 50331650;
  v4[2] = WTF::BlockPtrArc<void ()(UIAction *)>::fromCallable<WebKit::WebExtensionCommand::platformMenuItem(void)::$_0>(WebKit::WebExtensionCommand::platformMenuItem(void)::$_0)::{lambda(void *,UIAction *)#1}::__invoke;
  v4[3] = &WTF::BlockPtrArc<void ()(UIAction *)>::fromCallable<WebKit::WebExtensionCommand::platformMenuItem(void)::$_0>(WebKit::WebExtensionCommand::platformMenuItem(void)::$_0)::descriptor;
  v4[4] = this;
  v4[5] = this;
  uint64_t v5 = _Block_copy(v4);

  int v6 = _Block_copy(v5);
  uint64_t v7 = [v2 actionWithTitle:v3 image:0 identifier:0 handler:v6];

  return v7;
}

void sub_1992DDF6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionCommand::keyCommand(WebKit::WebExtensionCommand *this)
{
  int v1 = *((_DWORD *)this + 14);
  id v2 = (char *)this + 48;
  int v3 = (void *)MEMORY[0x1E4F30978];
  if (v1) {
    double v4 = (uint64_t *)((char *)this + 48);
  }
  else {
    double v4 = (uint64_t *)MEMORY[0x1E4F30978];
  }
  uint64_t v5 = *v4;
  if (v5 && *(_DWORD *)(v5 + 4))
  {
    if (*((void *)this + 5))
    {
      uint64_t v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      int v1 = *((_DWORD *)this + 14);
    }
    else
    {
      uint64_t v7 = &stru_1EEA10550;
    }
    if (v1) {
      uint64_t v8 = v2;
    }
    else {
      uint64_t v8 = v3;
    }
    if (*v8) {
      int v9 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v9 = &stru_1EEA10550;
    }
    if (*(void *)v2 && *(_DWORD *)(*(void *)v2 + 4)) {
      uint64_t v10 = *((unsigned int *)this + 14);
    }
    else {
      uint64_t v10 = 0;
    }
    if (*((void *)this + 4)) {
      int v12 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v12 = &stru_1EEA10550;
    }
    uint64_t v11 = +[_WKWebExtensionKeyCommand commandWithTitle:v7 image:0 input:v9 modifierFlags:v10 identifier:v12];
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

void sub_1992DE0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionCommand::matchesKeyCommand(WebKit::WebExtensionCommand *this, UIKeyCommand *a2)
{
  int v3 = a2;
  uint64_t v4 = [(UIKeyCommand *)v3 modifierFlags];
  uint64_t v5 = *((void *)this + 6);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 4)) {
      uint64_t v5 = *((unsigned int *)this + 14);
    }
    else {
      uint64_t v5 = 0;
    }
  }
  if (v4 == v5)
  {
    int v6 = [(UIKeyCommand *)v3 input];
    if (*((_DWORD *)this + 14)) {
      uint64_t v7 = (void *)((char *)this + 48);
    }
    else {
      uint64_t v7 = (void *)MEMORY[0x1E4F30978];
    }
    if (*v7) {
      uint64_t v8 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v8 = &stru_1EEA10550;
    }
    if ([v6 isEqual:v8])
    {
      int v9 = [(UIKeyCommand *)v3 propertyList];
      uint64_t v10 = [v9 objectForKeyedSubscript:@"identifier"];
      if (*((void *)this + 4)) {
        uint64_t v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v11 = &stru_1EEA10550;
      }
      uint64_t v12 = [v10 isEqual:v11];
    }
    else
    {
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_1992DE23C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(void)::$_0>(WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(void)::$_0>(WebKit::WebExtensionCommand::dispatchChangedEventSoonIfNeeded(void)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      WebKit::WebExtensionContext::fireCommandChangedEventIfNeeded((CFTypeRef *)(v3 - 16), (CFTypeRef *)v1, (WTF::StringImpl **)(v1 + 64));
      WTF::String::operator=((uint64_t *)(v1 + 64), MEMORY[0x1E4F30978]);
      uint64_t v4 = *(const void **)(v3 - 8);
      CFRelease(v4);
    }
  }
}

void sub_1992DE330(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(UIAction *)>::fromCallable<WebKit::WebExtensionCommand::platformMenuItem(void)::$_0>(WebKit::WebExtensionCommand::platformMenuItem(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
}

void WTF::BlockPtrArc<void ()(UIAction *)>::fromCallable<WebKit::WebExtensionCommand::platformMenuItem(void)::$_0>(WebKit::WebExtensionCommand::platformMenuItem(void)::$_0)::{lambda(void *,UIAction *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(WebKit::WebExtensionCommand **)(a1 + 32);
  uint64_t v2 = *((void *)v1 + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      WebKit::WebExtensionContext::performCommand(v3 - 16, v1, 1);
      uint64_t v4 = *(const void **)(v3 - 8);
      CFRelease(v4);
    }
  }
}

void sub_1992DE3D4(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},WTF::ASCIILiteral>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x19972EAD0]();
  uint64_t v5 = *(void *)(a3 + 8);
  if (v5)
  {
    if (v5 == 1)
    {
      uint64_t v6 = MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v6 = v8;
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1992DE460(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(WTF *result, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v3 = result;
  if (a2)
  {
    int v6 = *(_DWORD *)(a2 - 8);
    unsigned int v7 = *((_DWORD *)*a3 + 4);
    if (v7 >= 0x100) {
      unsigned int v8 = v7 >> 8;
    }
    else {
      unsigned int v8 = WTF::StringImpl::hashSlowCase(*a3);
    }
    for (i = 0; ; unsigned int v8 = i + v10)
    {
      uint64_t v10 = v8 & v6;
      unint64_t result = *(WTF **)(a2 + 16 * v10);
      if (result != (WTF *)-1)
      {
        if (!result) {
          goto LABEL_10;
        }
        unint64_t result = (WTF *)WTF::equal(result, *a3, (const WTF::StringImpl *)a3);
        if (result) {
          break;
        }
      }
      ++i;
    }
    uint64_t v11 = *(_DWORD **)(a2 + 16 * v10 + 8);
    if (v11) {
      *v11 += 2;
    }
  }
  else
  {
LABEL_10:
    uint64_t v11 = 0;
  }
  void *v3 = v11;
  return result;
}

uint64_t WTF::KeyValuePair<WTF::String,WTF::String>::KeyValuePair<NSString * {__strong},NSString * {__strong}>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = MEMORY[0x19972EAD0]();
  MEMORY[0x19972EAD0](v5 + 8, *a3);
  return a1;
}

void sub_1992DE57C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::isActionMessageAllowed(WebKit::WebExtensionContext *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (!v1 || !*(void *)(v1 + 8)) {
    return 0;
  }
  if (WebKit::WebExtension::hasAction(*((id **)this + 8)) || WebKit::WebExtension::hasBrowserAction(*((id **)this + 8))) {
    return 1;
  }
  uint64_t v4 = (id *)*((void *)this + 8);

  return WebKit::WebExtension::hasPageAction(v4);
}

WTF::StringImpl *WebKit::WebExtensionContext::actionGetTitle(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t *a6)
{
  WebKit::getActionWithIdentifiers((uint64_t)&v14, a2, a3, a4, a5, a1, @"action.getTitle()");
  if (v15)
  {
    if (v15 != 1)
    {
      unint64_t result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    unsigned int v7 = v14;
    if (v14) {
      *(_DWORD *)v14 += 2;
    }
    uint64_t v12 = v7;
    int v13 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(a6);
    unint64_t result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WebKit::WebExtensionAction **))off_1EE9FD910[v13])(&v11, &v12);
  }
  else
  {
    WebKit::WebExtensionAction::label(v14, 0, &v11);
    int v9 = v11;
    uint64_t v11 = 0;
    uint64_t v12 = v9;
    int v13 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(a6);
    if (v13 != -1) {
      ((void (*)(char *, WebKit::WebExtensionAction **))off_1EE9FD910[v13])(&v16, &v12);
    }
    int v13 = -1;
    unint64_t result = v11;
    uint64_t v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v15 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(WebKit::WebExtensionAction **, WebKit::WebExtensionAction **))off_1EE9FD920[v15])(&v12, &v14);
  }
  return result;
}

void sub_1992DE764(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, char a14, int a15, int a16)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FD910[a12])(v16 - 17, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a16 != -1) {
    ((void (*)(char *, char *))off_1EE9FD920[a16])(&a10, &a14);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::getActionWithIdentifiers(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, WebKit::WebExtensionContext *a6, void *a7)
{
  int v13 = a7;
  if (a3)
  {
    WebKit::WebExtensionContext::getWindow((uint64_t)a6, a2, 0, 0, 0, (uint64_t *)&v20);
    if (v20)
    {
      WebKit::WebExtensionContext::getAction(a6, v20, &v19);
      *(void *)a1 = v19;
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WebKit::toWebExtensionError<>(v13, 0, &cfstr_WindowNotFound.isa, v14, &v19);
      *(void *)a1 = v19;
      *(_DWORD *)(a1 + 8) = 1;
    }
    uint64_t v16 = v20;
    int v20 = 0;
    if (v16) {
      WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v16);
    }
  }
  else if (a5)
  {
    WebKit::WebExtensionContext::getTab((uint64_t *)a6, a4, 0, &v20);
    if (v20)
    {
      WebKit::WebExtensionContext::getAction(a6, v20, &v19);
      *(void *)a1 = v19;
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WebKit::toWebExtensionError<>(v13, 0, &cfstr_TabNotFound.isa, v15, &v19);
      *(void *)a1 = v19;
      *(_DWORD *)(a1 + 8) = 1;
    }
    int v18 = v20;
    int v20 = 0;
    if (v18) {
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v18);
    }
  }
  else
  {
    uint64_t v17 = WebKit::WebExtensionContext::defaultAction(a6);
    CFRetain(*(CFTypeRef *)(v17 + 8));
    *(void *)a1 = v17;
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1992DE990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a10);
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1992DEA60(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::actionSetTitle(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, uint64_t a4, char a5, WTF::StringImpl **a6, uint64_t *a7)
{
  WebKit::getOrCreateActionWithIdentifiers((uint64_t)&v20, a2, a3, a4, a5, a1, @"action.setTitle()");
  if (v21)
  {
    if (v21 != 1)
    {
      unint64_t result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    uint64_t v10 = v20;
    if (v20) {
      *(_DWORD *)v20 += 2;
    }
    int v18 = v10;
    char v19 = 1;
    unint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a7);
  }
  else
  {
    uint64_t v13 = (uint64_t)v20;
    int v14 = *a6;
    if (*a6) {
      *(_DWORD *)v14 += 2;
    }
    uint64_t v17 = v14;
    WebKit::WebExtensionAction::setLabel(v13, &v17, v9);
    uint64_t v16 = v17;
    uint64_t v17 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    LOBYTE(v18) = 0;
    char v19 = 0;
    unint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a7);
  }
  if (v19)
  {
    unint64_t result = v18;
    int v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v21 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9FD920[v21])(&v18, &v20);
  }
  return result;
}

void sub_1992DEBC8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, int a18)
{
  if (a12)
  {
    char v19 = a11;
    a11 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, a2);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
  if (a18 != -1) {
    ((void (*)(WTF::StringImpl **, __int16 *))off_1EE9FD920[a18])(&a11, &a14);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::getOrCreateActionWithIdentifiers(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, WebKit::WebExtensionContext *a6, void *a7)
{
  uint64_t v13 = a7;
  if (a3)
  {
    WebKit::WebExtensionContext::getWindow((uint64_t)a6, a2, 0, 0, 0, (uint64_t *)&v20);
    if (v20)
    {
      WebKit::WebExtensionContext::getOrCreateAction(a6, v20, &v19);
      *(void *)a1 = v19;
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WebKit::toWebExtensionError<>(v13, 0, &cfstr_WindowNotFound.isa, v14, &v19);
      *(void *)a1 = v19;
      *(_DWORD *)(a1 + 8) = 1;
    }
    uint64_t v16 = v20;
    int v20 = 0;
    if (v16) {
      WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v16);
    }
  }
  else if (a5)
  {
    WebKit::WebExtensionContext::getTab((uint64_t *)a6, a4, 0, &v20);
    if (v20)
    {
      WebKit::WebExtensionContext::getOrCreateAction(a6, v20, &v19);
      *(void *)a1 = v19;
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WebKit::toWebExtensionError<>(v13, 0, &cfstr_TabNotFound.isa, v15, &v19);
      *(void *)a1 = v19;
      *(_DWORD *)(a1 + 8) = 1;
    }
    int v18 = v20;
    int v20 = 0;
    if (v18) {
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v18);
    }
  }
  else
  {
    uint64_t v17 = WebKit::WebExtensionContext::defaultAction(a6);
    CFRetain(*(CFTypeRef *)(v17 + 8));
    *(void *)a1 = v17;
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1992DEDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a10);
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1992DEE88(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::actionSetIcon(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, uint64_t a4, char a5, void *a6, uint64_t *a7)
{
  WebKit::getOrCreateActionWithIdentifiers((uint64_t)&v18, a2, a3, a4, a5, a1, @"action.setIcon()");
  if (v19)
  {
    if (v19 == 1)
    {
      int v9 = v18;
      if (v18) {
        *(_DWORD *)v18 += 2;
      }
      uint64_t v16 = v9;
      char v17 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a7);
      uint64_t v11 = v16;
      uint64_t v16 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      goto LABEL_22;
    }
LABEL_26:
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return;
  }
  if (*a6) {
    uint64_t v12 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v12 = &stru_1EEA10550;
  }
  uint64_t v13 = WebKit::parseJSON(v12, 1, 0);

  objc_opt_class();
  WTF::dynamic_objc_cast<NSDictionary>(v13);
  int v14 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    if (v19) {
      goto LABEL_26;
    }
    WebKit::WebExtensionAction::setIcons((id *)v18, v14);
  }
  else
  {
    objc_opt_class();
    WTF::dynamic_objc_cast<NSArray>(v13);
    int v15 = (NSArray *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {
      if (v19) {
        goto LABEL_26;
      }
      WebKit::WebExtensionAction::setIconVariants(v18, v15);
    }
    else
    {
      if (v19) {
        goto LABEL_26;
      }
      WebKit::WebExtensionAction::setIcons((id *)v18, 0);
      if (v19) {
        goto LABEL_26;
      }
      WebKit::WebExtensionAction::setIconVariants(v18, 0);
    }
  }
  LOBYTE(v16) = 0;
  char v17 = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a7);

LABEL_22:
  if (v19 != -1) {
    ((void (*)(WTF::StringImpl **, WebKit::WebExtensionAction **))off_1EE9FD920[v19])(&v16, &v18);
  }
}

void sub_1992DF0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, int a16)
{
  if (a16 != -1) {
    ((void (*)(WTF::StringImpl **, __int16 *))off_1EE9FD920[a16])(&a9, &a12);
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::actionGetPopup(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t *a6)
{
  WebKit::getActionWithIdentifiers((uint64_t)&v14, a2, a3, a4, a5, a1, @"action.getPopup()");
  if (v15)
  {
    if (v15 != 1)
    {
      unint64_t result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    unsigned int v7 = v14;
    if (v14) {
      *(_DWORD *)v14 += 2;
    }
    uint64_t v12 = v7;
    int v13 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(a6);
    unint64_t result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WebKit::WebExtensionAction **))off_1EE9FD910[v13])(&v11, &v12);
  }
  else
  {
    WebKit::WebExtensionAction::popupPath(v14, &v11);
    int v9 = v11;
    uint64_t v11 = 0;
    uint64_t v12 = v9;
    int v13 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(a6);
    if (v13 != -1) {
      ((void (*)(char *, WebKit::WebExtensionAction **))off_1EE9FD910[v13])(&v16, &v12);
    }
    int v13 = -1;
    unint64_t result = v11;
    uint64_t v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v15 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(WebKit::WebExtensionAction **, WebKit::WebExtensionAction **))off_1EE9FD920[v15])(&v12, &v14);
  }
  return result;
}

void sub_1992DF2E0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, char a14, int a15, int a16)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FD910[a12])(v16 - 17, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a16 != -1) {
    ((void (*)(char *, char *))off_1EE9FD920[a16])(&a10, &a14);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionContext::actionSetPopup(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, uint64_t a4, char a5, WTF::StringImpl **a6, uint64_t *a7)
{
  WebKit::getOrCreateActionWithIdentifiers((uint64_t)&v20, a2, a3, a4, a5, a1, @"action.setPopup()");
  if (v21)
  {
    if (v21 != 1)
    {
      unint64_t result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    uint64_t v10 = v20;
    if (v20) {
      *(_DWORD *)v20 += 2;
    }
    int v18 = v10;
    char v19 = 1;
    unint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a7);
  }
  else
  {
    uint64_t v13 = (uint64_t)v20;
    int v14 = *a6;
    if (*a6) {
      *(_DWORD *)v14 += 2;
    }
    char v17 = v14;
    WebKit::WebExtensionAction::setPopupPath(v13, &v17, v9);
    uint64_t v16 = v17;
    char v17 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    LOBYTE(v18) = 0;
    char v19 = 0;
    unint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a7);
  }
  if (v19)
  {
    unint64_t result = v18;
    int v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v21 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9FD920[v21])(&v18, &v20);
  }
  return result;
}

void sub_1992DF4CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, int a18)
{
  if (a12)
  {
    char v19 = a11;
    a11 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, a2);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
  if (a18 != -1) {
    ((void (*)(WTF::StringImpl **, __int16 *))off_1EE9FD920[a18])(&a11, &a14);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionContext::actionOpenPopup(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v13 = (WebKit::WebExtensionAction *)WebKit::WebExtensionContext::defaultAction((WebKit::WebExtensionContext *)a1);
  if (WebKit::WebExtensionAction::canProgrammaticallyPresentPopup(v13))
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v15) {
      uint64_t v16 = v15 - 16;
    }
    else {
      uint64_t v16 = 0;
    }
    if (*(unsigned char *)(v16 + 177))
    {
      WebKit::toWebExtensionError<>((WebKit *)@"action.openPopup()", 0, &cfstr_AnotherPopupIs.isa, v14, &v42);
      char v17 = v42;
      long long v42 = 0;
      long long v43 = v17;
      char v44 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a7);
      goto LABEL_8;
    }
    if (a4)
    {
      WebKit::WebExtensionContext::getWindow(a1, a3, 0, 0, 0, (uint64_t *)&v43);
      uint64_t v23 = v43;
      if (v43)
      {
        WebKit::WebExtensionWindow::activeTab((uint64_t)v43, 0, (uint64_t *)&v43);
        id v25 = v43;
        if (v43)
        {
          if (!a6) {
            goto LABEL_29;
          }
          goto LABEL_24;
        }
LABEL_38:
        WebKit::toWebExtensionError<>((WebKit *)@"action.openPopup()", 0, &cfstr_ActiveTabNotFo.isa, v24, &v42);
        unint64_t v34 = v42;
        long long v42 = 0;
        long long v43 = v34;
        char v44 = 1;
        WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a7);
        if (v44)
        {
          unint64_t v36 = v43;
          long long v43 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2) {
              WTF::StringImpl::destroy(v36, v35);
            }
            else {
              *(_DWORD *)v36 -= 2;
            }
          }
        }
        uint64_t v41 = v42;
        long long v42 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2) {
            WTF::StringImpl::destroy(v41, v35);
          }
          else {
            *(_DWORD *)v41 -= 2;
          }
        }
        return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v23);
      }
      WebKit::toWebExtensionError<>((WebKit *)@"action.openPopup()", 0, &cfstr_WindowNotFound.isa, v22, &v42);
      uint64_t v33 = v42;
      long long v42 = 0;
      long long v43 = v33;
      char v44 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a7);
    }
    else
    {
      if (a6)
      {
        uint64_t v23 = 0;
        id v25 = 0;
LABEL_24:
        WebKit::WebExtensionContext::getTab((uint64_t *)a1, a5, 0, &v43);
        uint64_t v27 = v43;
        long long v43 = 0;
        if (v25)
        {
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v25);
          long long v28 = v43;
          long long v43 = 0;
          if (v28) {
            WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v28);
          }
        }
        if (!v27)
        {
          WebKit::toWebExtensionError<>((WebKit *)@"action.openPopup()", 0, &cfstr_TabNotFound.isa, v26, &v42);
          uint64_t v37 = v42;
          long long v42 = 0;
          long long v43 = v37;
          char v44 = 1;
          WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a7);
          if (v44)
          {
            BOOL v39 = v43;
            long long v43 = 0;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2) {
                WTF::StringImpl::destroy(v39, v38);
              }
              else {
                *(_DWORD *)v39 -= 2;
              }
            }
          }
          unint64_t result = v42;
          long long v42 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
LABEL_63:
          if (!v23) {
            return result;
          }
          return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v23);
        }
        id v25 = v27;
LABEL_29:
        WebKit::WebExtensionContext::getOrCreateAction((WebKit::WebExtensionContext *)a1, v25, (uint64_t *)&v43);
        BOOL v29 = WebKit::WebExtensionAction::presentsPopup(v43);
        unint64_t v30 = v43;
        long long v43 = 0;
        if (v30) {
          CFRelease(*((CFTypeRef *)v30 + 1));
        }
        if (v29) {
          WebKit::WebExtensionContext::performAction((WebKit::WebExtensionContext *)a1, v25, 0);
        }
        LOBYTE(v43) = 0;
        char v44 = 0;
        WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a7);
        if (v44)
        {
          unint64_t v32 = v43;
          long long v43 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2) {
              WTF::StringImpl::destroy(v32, v31);
            }
            else {
              *(_DWORD *)v32 -= 2;
            }
          }
        }
        unint64_t result = (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v25);
        goto LABEL_63;
      }
      if (*(_DWORD *)(a1 + 540))
      {
        WebKit::WebExtensionContext::getWindow(a1, **(void **)(a1 + 528), 0, 0, 0, (uint64_t *)&v43);
        uint64_t v23 = v43;
        if (v43)
        {
          WebKit::WebExtensionWindow::activeTab((uint64_t)v43, 0, (uint64_t *)&v43);
          id v25 = v43;
          if (v43) {
            goto LABEL_29;
          }
          goto LABEL_38;
        }
      }
      WebKit::toWebExtensionError<>((WebKit *)@"action.openPopup()", 0, &cfstr_NoWindowsOpen.isa, v14, &v42);
      uint64_t v40 = v42;
      long long v42 = 0;
      long long v43 = v40;
      char v44 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a7);
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"action.openPopup()", 0, &cfstr_ItIsNotImpleme.isa, v14, &v42);
    char v19 = v42;
    long long v42 = 0;
    long long v43 = v19;
    char v44 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a7);
  }
LABEL_8:
  if (v44)
  {
    int v20 = v43;
    long long v43 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v18);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
  }
  unint64_t result = v42;
  long long v42 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1992DF9D0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v12);
  _Unwind_Resume(a1);
}

void WebKit::toWebExtensionError<>(WebKit *a1@<X0>, NSString *a2@<X1>, NSString *a3@<X2>, NSString *a4@<X3>, void *a5@<X8>)
{
  int v6 = WebKit::toErrorString(a1, a2, a3, a4);
  MEMORY[0x19972EAD0](&v7, v6);
  *a5 = v7;
  uint64_t v7 = 0;
}

void sub_1992DFBE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::actionGetBadgeText(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t *a6)
{
  WebKit::getActionWithIdentifiers((uint64_t)&v14, a2, a3, a4, a5, a1, @"action.getBadgeText()");
  if (v15)
  {
    if (v15 != 1)
    {
      unint64_t result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    uint64_t v7 = v14;
    if (v14) {
      *(_DWORD *)v14 += 2;
    }
    uint64_t v12 = v7;
    int v13 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(a6);
    unint64_t result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WebKit::WebExtensionAction **))off_1EE9FD910[v13])(&v11, &v12);
  }
  else
  {
    WebKit::WebExtensionAction::badgeText(v14, &v11);
    int v9 = v11;
    uint64_t v11 = 0;
    uint64_t v12 = v9;
    int v13 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(a6);
    if (v13 != -1) {
      ((void (*)(char *, WebKit::WebExtensionAction **))off_1EE9FD910[v13])(&v16, &v12);
    }
    int v13 = -1;
    unint64_t result = v11;
    uint64_t v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v15 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(WebKit::WebExtensionAction **, WebKit::WebExtensionAction **))off_1EE9FD920[v15])(&v12, &v14);
  }
  return result;
}

void sub_1992DFD30(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, char a14, int a15, int a16)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FD910[a12])(v16 - 17, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a16 != -1) {
    ((void (*)(char *, char *))off_1EE9FD920[a16])(&a10, &a14);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionContext::actionSetBadgeText(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, uint64_t a4, char a5, WTF::StringImpl **a6, uint64_t *a7)
{
  WebKit::getOrCreateActionWithIdentifiers((uint64_t)&v20, a2, a3, a4, a5, a1, @"action.setBadgeText()");
  if (v21)
  {
    if (v21 != 1)
    {
      unint64_t result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    uint64_t v10 = v20;
    if (v20) {
      *(_DWORD *)v20 += 2;
    }
    int v18 = v10;
    char v19 = 1;
    unint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a7);
  }
  else
  {
    uint64_t v13 = (uint64_t)v20;
    int v14 = *a6;
    if (*a6) {
      *(_DWORD *)v14 += 2;
    }
    char v17 = v14;
    WebKit::WebExtensionAction::setBadgeText(v13, &v17, v9);
    uint64_t v16 = v17;
    char v17 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    LOBYTE(v18) = 0;
    char v19 = 0;
    unint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a7);
  }
  if (v19)
  {
    unint64_t result = v18;
    int v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v21 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9FD920[v21])(&v18, &v20);
  }
  return result;
}

void sub_1992DFF1C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, int a18)
{
  if (a12)
  {
    char v19 = a11;
    a11 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, a2);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
  if (a18 != -1) {
    ((void (*)(WTF::StringImpl **, __int16 *))off_1EE9FD920[a18])(&a11, &a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::actionGetEnabled(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t *a6)
{
  WebKit::getActionWithIdentifiers((uint64_t)&v11, a2, a3, a4, a5, a1, @"action.isEnabled()");
  if (v12)
  {
    if (v12 != 1)
    {
      uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    uint64_t v7 = v11;
    if (v11) {
      *(_DWORD *)v11 += 2;
    }
    int v9 = v7;
    int v10 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WTF::String> &&)>::operator()(a6);
  }
  else
  {
    LOBYTE(v9) = WebKit::WebExtensionAction::isEnabled(v11);
    int v10 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WTF::String> &&)>::operator()(a6);
  }
  uint64_t result = ((uint64_t (*)(char *, WebKit::WebExtensionAction **))off_1EE9FD930[v10])(&v13, &v9);
  if (v12 != -1) {
    return ((uint64_t (*)(WebKit::WebExtensionAction **, WebKit::WebExtensionAction **))off_1EE9FD920[v12])(&v9, &v11);
  }
  return result;
}

void sub_1992E0080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, int a15, int a16)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FD930[a12])(v16 - 17, &a10);
  }
  if (a16 != -1) {
    ((void (*)(char *, char *))off_1EE9FD920[a16])(&a10, &a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1992E0164(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::actionSetEnabled(WebKit::WebExtensionContext *a1, uint64_t a2, char a3, int a4, uint64_t *a5)
{
  __int16 v6 = a4;
  if (a4) {
    uint64_t v7 = @"action.enable()";
  }
  else {
    uint64_t v7 = @"action.disable()";
  }
  WebKit::getOrCreateActionWithIdentifiers((uint64_t)&v13, 0, 0, a2, a3, a1, v7);
  if (v14)
  {
    if (v14 != 1)
    {
      uint64_t result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    unsigned int v8 = (WTF::StringImpl *)v13;
    if (v13) {
      *(_DWORD *)v13 += 2;
    }
    uint64_t v11 = v8;
    char v12 = 1;
    uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a5);
  }
  else
  {
    WebKit::WebExtensionAction::setEnabled(v13, v6 | 0x100);
    LOBYTE(v11) = 0;
    char v12 = 0;
    uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a5);
  }
  if (v12)
  {
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v14 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, CFTypeRef **))off_1EE9FD920[v14])(&v11, &v13);
  }
  return result;
}

void sub_1992E02B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, int a16)
{
  if (a10)
  {
    char v17 = a9;
    a9 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, a2);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  if (a16 != -1) {
    ((void (*)(WTF::StringImpl **, __int16 *))off_1EE9FD920[a16])(&a9, &a12);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::WebExtensionContext::fireActionClickedEventIfNeeded(CFTypeRef *this, WebKit::WebExtensionTab *a2)
{
  char v8 = 1;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v9, &v8, 1);
  CFRetain(this[1]);
  if (a2) {
    ++*(_DWORD *)a2;
  }
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v4 = &unk_1EE9FD950;
  v4[1] = this;
  v4[2] = this;
  v4[3] = a2;
  uint64_t v7 = v4;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)this, &v9, (uint64_t *)&v7);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  if (v9) {
    return (void *)WTF::fastFree((WTF *)(v9 - 16), v5);
  }
  return result;
}

void sub_1992E03FC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12) {
    WTF::fastFree((WTF *)(a12 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN6WebKit18WebExtensionActionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN6WebKit18WebExtensionActionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet(uint64_t *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = 0;
  if (a3)
  {
    uint64_t v4 = a3;
    do
    {
      WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::add(a1, a2++, (uint64_t)v7);
      --v4;
    }
    while (v4);
  }
  return a1;
}

void sub_1992E050C(_Unwind_Exception *exception_object, void *a2)
{
  if (*v2) {
    WTF::fastFree((WTF *)(*v2 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::add@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::expand(result, 0), (uint64_t v6 = *v4) != 0))
  {
    char v7 = 0;
    unsigned int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    unsigned int v8 = 0;
    char v7 = 1;
  }
  int v9 = *a2;
  unsigned int v10 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
  unsigned int v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  int v12 = v11 ^ HIWORD(v11);
  unsigned int v13 = v8;
  uint64_t v14 = v12 & v8;
  int v15 = (unsigned __int8 *)(v6 + v14);
  int v16 = *(unsigned __int8 *)(v6 + v14);
  if (v16 != 255)
  {
    char v17 = 0;
    int v18 = 1;
    do
    {
      if (v16 == v9)
      {
        if (v7) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = *(unsigned int *)(v6 - 4);
        }
        char v27 = 0;
        unint64_t v26 = v6 + v25;
        goto LABEL_29;
      }
      if (v16 == 254) {
        char v17 = v15;
      }
      uint64_t v14 = (v14 + v18) & v13;
      int v15 = (unsigned __int8 *)(v6 + v14);
      int v16 = *(unsigned __int8 *)(v6 + v14);
      ++v18;
    }
    while (v16 != 255);
    if (v17)
    {
      *char v17 = -1;
      --*(_DWORD *)(*v4 - 16);
      LOBYTE(v9) = *a2;
      int v15 = v17;
    }
  }
  unsigned __int8 *v15 = v9;
  uint64_t v19 = *v4;
  if (*v4) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v21 = *v4;
  if (*v4) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_20:
      uint64_t result = (uint64_t *)WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::expand(v4, v15);
      int v15 = (unsigned __int8 *)result;
      uint64_t v21 = *v4;
      if (*v4) {
        unint64_t v24 = *(unsigned int *)(v21 - 4);
      }
      else {
        unint64_t v24 = 0;
      }
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_20;
  }
  unint64_t v26 = v21 + v24;
  char v27 = 1;
LABEL_29:
  *(void *)a3 = v15;
  *(void *)(a3 + 8) = v26;
  *(unsigned char *)(a3 + 16) = v27;
  return result;
}

unsigned char *WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::rehash(a1, v5, a2);
}

unsigned char *WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    memset((void *)(v9 + 16), 255, a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  unsigned int v13 = 0;
  if (v7)
  {
    uint64_t v14 = v7;
    int v15 = (unsigned __int8 *)v6;
    do
    {
      if (*v15 <= 0xFDu)
      {
        int v16 = (unsigned char *)WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::lookupForReinsert(a1, v15);
        unsigned char *v16 = *v15;
        if (v15 == a3) {
          unsigned int v13 = v16;
        }
      }
      ++v15;
      --v14;
    }
    while (v14);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

uint64_t WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::lookupForReinsert(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  int v4 = 0;
  unsigned int v5 = 9 * ((~(*a2 << 15) + *a2) ^ ((~(*a2 << 15) + *a2) >> 10));
  unsigned int v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    uint64_t v7 = v6 & v3;
    unsigned int v6 = ++v4 + (v6 & v3);
  }
  while (*(unsigned __int8 *)(v2 + v7) != 255);
  return v2 + v7;
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireActionClickedEventIfNeeded(WebKit::WebExtensionTab *)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FD950;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireActionClickedEventIfNeeded(WebKit::WebExtensionTab *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FD950;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireActionClickedEventIfNeeded(WebKit::WebExtensionTab *)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    WebKit::WebExtensionTab::parameters(*(WebKit::WebExtensionTab **)(a1 + 24), (uint64_t)v18);
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)v23, (uint64_t)v18);
  }
  else
  {
    v23[0] = 0;
    v23[176] = 0;
  }
  WebKit::WebExtensionContext::processes(v1, 1, 0, (uint64_t *)&v24);
  uint64_t v4 = v1[9];
  if (v4 && *(void *)(v4 + 8))
  {
    unsigned int v5 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v24);
    unsigned int v6 = v5;
    uint64_t v7 = v3;
    int v8 = v24 ? &v24[*((unsigned int *)v24 - 1)] : 0;
    if (v8 != v5)
    {
      do
      {
        uint64_t v9 = *v6;
        uint64_t v10 = v1[4];
        uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v11 = 1599;
        *((void *)v11 + 1) = v10;
        *((void *)v11 + 66) = (char *)v11 + 16;
        *((void *)v11 + 67) = 512;
        *((void *)v11 + 68) = 0;
        *((void *)v11 + 70) = 0;
        *((void *)v11 + 69) = 0;
        IPC::Encoder::encodeHeader(v11);
        char v27 = v11;
        IPC::ArgumentCoder<std::optional<WebKit::WebExtensionTabParameters>,void>::encode<IPC::Encoder,std::optional<WebKit::WebExtensionTabParameters> const&>(v11, (uint64_t)v23);
        LOBYTE(v25) = 0;
        char v26 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v27, 0, (uint64_t)&v25, 1);
        if (v26)
        {
          uint64_t v12 = v25;
          uint64_t v25 = 0;
          if (v12) {
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
          }
        }
        unsigned int v13 = v27;
        char v27 = 0;
        if (v13)
        {
          IPC::Encoder::~Encoder(v13, v3);
          WTF::fastFree(v14, v15);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_19;
          }
        }
        unsigned int v6 = v7;
LABEL_19:
        ;
      }
      while (v6 != v8);
    }
  }
  if (v24) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v24, v3);
  }
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23);
  if (v2)
  {
    if (v22)
    {
      uint64_t result = v21;
      uint64_t v21 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    if (v20)
    {
      uint64_t result = v19;
      uint64_t v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void sub_1992E0B78(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, WTF::StringImpl *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v35 = *(uint64_t **)(v33 - 128);
  if (v35) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v35, a2);
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a32);
  if (v32)
  {
    if (a19 && a18)
    {
      if (*(_DWORD *)a18 == 2) {
        WTF::StringImpl::destroy(a18, v36);
      }
      else {
        *(_DWORD *)a18 -= 2;
      }
    }
    if (a17 && a12)
    {
      if (*(_DWORD *)a12 == 2) {
        WTF::StringImpl::destroy(a12, v36);
      }
      else {
        *(_DWORD *)a12 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::processes@<X0>(void *a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  char v9 = a2;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v10, &v9, 1);
  uint64_t result = WebKit::WebExtensionContext::processes(a1, &v10, a3, a4);
  if (v10) {
    return (void *)WTF::fastFree((WTF *)(v10 - 16), v8);
  }
  return result;
}

void sub_1992E0CD4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::fastFree((WTF *)(a10 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::WebExtensionContext::processes@<X0>(void *a1@<X0>, unsigned __int8 **a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  char v9 = a3;
  WTF::HashSet<WebKit::WebExtensionContentWorldType,WTF::DefaultHash<WebKit::WebExtensionContentWorldType>,WTF::HashTraits<WebKit::WebExtensionContentWorldType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v10, &v9, 1);
  uint64_t result = WebKit::WebExtensionContext::processes(a1, a2, &v10, a4);
  if (v10) {
    return (void *)WTF::fastFree((WTF *)(v10 - 16), v8);
  }
  return result;
}

void sub_1992E0D60(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::fastFree((WTF *)(a10 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashSet<WebKit::WebExtensionContentWorldType,WTF::DefaultHash<WebKit::WebExtensionContentWorldType>,WTF::HashTraits<WebKit::WebExtensionContentWorldType>,WTF::HashTableTraits>::HashSet(uint64_t *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = 0;
  if (a3)
  {
    uint64_t v4 = a3;
    do
    {
      WTF::HashTable<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionEventListenerType,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::add(a1, a2++, (uint64_t)v7);
      --v4;
    }
    while (v4);
  }
  return a1;
}

void sub_1992E0DDC(_Unwind_Exception *exception_object, void *a2)
{
  if (*v2) {
    WTF::fastFree((WTF *)(*v2 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != -1)
      {
        uint64_t *v4 = 0;
        if (v5) {
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 16));
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

BOOL WebKit::WebExtensionContext::isAlarmsMessageAllowed(WebKit::WebExtensionContext *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (!v1 || !*(void *)(v1 + 8)) {
    return 0;
  }
  MEMORY[0x19972EAD0](&v7, @"alarms");
  BOOL v4 = (WebKit::WebExtensionContext::permissionState(this, &v7, 0, 2) & 0xFFFFFFFE) == 2;
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v4;
}

void sub_1992E0F04(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *WebKit::WebExtensionContext::alarmsCreate(uint64_t a1, WTF::StringImpl **a2, double a3, double a4)
{
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v8 = WTF::fastMalloc((WTF *)0x40);
  char v9 = *a2;
  if (*a2) {
    *(_DWORD *)v9 += 2;
  }
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v10 = &unk_1EE9FD978;
  v10[1] = a1;
  v10[2] = a1;
  *(_DWORD *)uint64_t v8 = 1;
  if (v9) {
    *(_DWORD *)v9 += 2;
  }
  *(void *)(v8 + 8) = v9;
  *(double *)(v8 + 16) = a3;
  *(double *)(v8 + 24) = a4;
  *(void *)(v8 + 32) = 0x7FF8000000000000;
  *(void *)(v8 + 40) = v10;
  *(void *)(v8 + 48) = 0;
  *(unsigned char *)(v8 + 56) = 0;
  WebKit::WebExtensionAlarm::schedule((WebKit::WebExtensionAlarm *)v8);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v11);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  unsigned int v13 = (uint64_t *)(a1 + 440);
  uint64_t v14 = *(void *)(a1 + 440);
  if (v14
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(a1 + 440)),
        (uint64_t v14 = *v13) != 0))
  {
    int v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    int v15 = 0;
  }
  unsigned int v16 = *((_DWORD *)*a2 + 4);
  if (v16 >= 0x100) {
    unsigned int v17 = v16 >> 8;
  }
  else {
    unsigned int v17 = WTF::StringImpl::hashSlowCase(*a2);
  }
  int v18 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v20 = v17 & v15;
    uint64_t v21 = (uint64_t *)(v14 + 16 * v20);
    char v22 = (WTF *)*v21;
    if (*v21 == -1)
    {
      int v18 = (uint64_t *)(v14 + 16 * v20);
      goto LABEL_21;
    }
    if (!v22) {
      break;
    }
    if (WTF::equal(v22, *a2, v12))
    {
      uint64_t v28 = v14 + 16 * v20;
      uint64_t result = *(WTF **)(v28 + 8);
      *(void *)(v28 + 8) = v8;
      if (result)
      {
        return WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(result, v23);
      }
      return result;
    }
LABEL_21:
    unsigned int v17 = i + v20;
  }
  if (v18)
  {
    uint64_t *v18 = 0;
    v18[1] = 0;
    --*(_DWORD *)(*v13 - 16);
    uint64_t v21 = v18;
  }
  WTF::String::operator=(v21, a2);
  uint64_t result = (WTF *)v21[1];
  v21[1] = v8;
  if (result) {
    uint64_t result = WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(result, v24);
  }
  uint64_t v26 = *v13;
  if (*v13) {
    int v27 = *(_DWORD *)(v26 - 12) + 1;
  }
  else {
    int v27 = 1;
  }
  *(_DWORD *)(v26 - 12) = v27;
  uint64_t v29 = *v13;
  if (*v13) {
    int v30 = *(_DWORD *)(v29 - 12);
  }
  else {
    int v30 = 0;
  }
  uint64_t v31 = (*(_DWORD *)(v29 - 16) + v30);
  unint64_t v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 > 2 * v31) {
      return result;
    }
  }
  else if (3 * v32 > 4 * v31)
  {
    return result;
  }

  return (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v13);
}

void sub_1992E11C0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v5 = *((void *)v2 + 6);
  *((void *)v2 + 6) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)v2 + 5);
  *((void *)v2 + 5) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)v2 + 1);
  *((void *)v2 + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WTF *WebKit::WebExtensionContext::alarmsGet(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 440);
  if (!v4) {
    return (WTF *)WTF::CompletionHandler<void ()(std::optional<WebKit::WebExtensionAlarmParameters> &&)>::operator()(a3);
  }
  unsigned int v6 = *(_DWORD *)(v4 - 8);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  int v8 = v7 >= 0x100 ? v7 >> 8 : WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; int v8 = ++i + v10)
  {
    uint64_t v10 = v8 & v6;
    uint64_t v11 = *(WTF **)(v4 + 16 * v10);
    if (v11 != (WTF *)-1)
    {
      if (!v11) {
        return (WTF *)WTF::CompletionHandler<void ()(std::optional<WebKit::WebExtensionAlarmParameters> &&)>::operator()(a3);
      }
      if (WTF::equal(v11, *a2, (const WTF::StringImpl *)a3)) {
        break;
      }
    }
  }
  uint64_t v12 = *(WTF **)(v4 + 16 * v10 + 8);
  if (!v12) {
    return (WTF *)WTF::CompletionHandler<void ()(std::optional<WebKit::WebExtensionAlarmParameters> &&)>::operator()(a3);
  }
  ++*(_DWORD *)v12;
  unsigned int v13 = (WTF::StringImpl *)*((void *)v12 + 1);
  if (v13) {
    *(_DWORD *)v13 += 2;
  }
  unsigned int v16 = v13;
  WTF::CompletionHandler<void ()(std::optional<WebKit::WebExtensionAlarmParameters> &&)>::operator()(a3);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v14);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  return WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(v12, v14);
}

void sub_1992E1414(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(v14, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebKit::WebExtensionAlarmParameters> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1992E1508(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::alarmsClear(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = *(void *)(a1 + 440);
  if (v4)
  {
    int v7 = *(_DWORD *)(v4 - 8);
    unsigned int v8 = *((_DWORD *)*a2 + 4);
    if (v8 >= 0x100) {
      unsigned int v9 = v8 >> 8;
    }
    else {
      unsigned int v9 = WTF::StringImpl::hashSlowCase(*a2);
    }
    int v10 = 0;
    uint64_t v11 = (uint64_t *)(a1 + 440);
    while (1)
    {
      uint64_t v12 = v9 & v7;
      unsigned int v13 = *(WTF **)(v4 + 16 * v12);
      if (v13 != (WTF *)-1)
      {
        if (!v13)
        {
          uint64_t v14 = *v11;
          if (!*v11) {
            goto LABEL_27;
          }
          int v15 = (WTF::StringImpl **)(v14 + 16 * *(unsigned int *)(v14 - 4));
          goto LABEL_13;
        }
        if (WTF::equal(v13, *a2, a3)) {
          break;
        }
      }
      unsigned int v9 = ++v10 + v12;
    }
    int v15 = (WTF::StringImpl **)(v4 + 16 * v12);
    uint64_t v14 = *v11;
    if (!*v11) {
      goto LABEL_14;
    }
LABEL_13:
    v14 += 16 * *(unsigned int *)(v14 - 4);
    if ((WTF::StringImpl **)v14 == v15) {
      goto LABEL_27;
    }
LABEL_14:
    if ((WTF::StringImpl **)v14 != v15)
    {
      WTF::HashTraits<WTF::String>::customDeleteBucket(v15, (WTF::StringImpl *)a2);
      unsigned int v17 = v15[1];
      v15[1] = 0;
      if (v17) {
        WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(v17, v16);
      }
      ++*(_DWORD *)(*v11 - 16);
      uint64_t v18 = *v11;
      if (*v11) {
        int v19 = *(_DWORD *)(v18 - 12) - 1;
      }
      else {
        int v19 = -1;
      }
      *(_DWORD *)(v18 - 12) = v19;
      uint64_t v20 = *v11;
      if (*v11)
      {
        unsigned int v21 = 6 * *(_DWORD *)(v20 - 12);
        unsigned int v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v11, v22 >> 1);
        }
      }
    }
  }
LABEL_27:

  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)a3);
}

uint64_t WebKit::WebExtensionContext::alarmsGetAll(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *(void *)(result + 440);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = (void *)(v3 + 16 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      unsigned int v6 = *(void **)(result + 440);
      if (v4)
      {
        uint64_t v7 = 16 * v4;
        unsigned int v6 = *(void **)(result + 440);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            unsigned int v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    unsigned int v6 = (void *)(v3 + 16 * v4);
  }
  else
  {
    unsigned int v6 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v5 = (void *)(v3 + 16 * v4);
  if (!v3)
  {
    unsigned int v8 = 0;
    uint64_t v10 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    goto LABEL_16;
  }
LABEL_8:
  unsigned int v8 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v9 = *(unsigned int *)(v3 - 12);
  if (v9)
  {
    if (v9 >> 27)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v10 = WTF::fastMalloc((WTF *)(32 * v9));
    LODWORD(v21) = v9;
    uint64_t v20 = v10;
  }
  else
  {
    uint64_t v10 = 0;
  }
LABEL_16:
  if (v8 != v6)
  {
    unsigned int v11 = 0;
    do
    {
      uint64_t v12 = v6[1];
      unsigned int v13 = *(_DWORD **)(v12 + 8);
      if (v13) {
        *v13 += 2;
      }
      uint64_t v14 = *(void *)(v12 + 32);
      long long v15 = *(_OWORD *)(v12 + 16);
      uint64_t v16 = v10 + 32 * v11;
      *(void *)uint64_t v16 = v13;
      *(_OWORD *)(v16 + 8) = v15;
      *(void *)(v16 + 24) = v14;
      unsigned int v17 = v6 + 2;
      unsigned int v6 = v5;
      if (v17 != v5)
      {
        unsigned int v6 = v17;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          if (v6 == v5)
          {
            unsigned int v6 = v5;
            break;
          }
        }
      }
      ++v11;
    }
    while (v6 != v8);
    HIDWORD(v21) = v11;
  }
  uint64_t v18 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v18 + 16))(v18, &v20);
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  return WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v19);
}

void sub_1992E1870(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WebKit::WebExtensionContext::alarmsClearAll(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4 = *(WTF::StringImpl ***)(a1 + 440);
  if (v4)
  {
    *(void *)(a1 + 440) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }

  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)a2);
}

WTF *WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v2 = this;
  if (*(_DWORD *)this == 1)
  {
    uint64_t v3 = *((void *)this + 6);
    *((void *)v2 + 6) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *((void *)v2 + 5);
    *((void *)v2 + 5) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = (WTF::StringImpl *)*((void *)v2 + 1);
    *((void *)v2 + 1) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::alarmsCreate(WTF::String const&,WTF::Seconds,WTF::Seconds)::$_0,void,WebKit::WebExtensionAlarm &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FD978;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::alarmsCreate(WTF::String const&,WTF::Seconds,WTF::Seconds)::$_0,void,WebKit::WebExtensionAlarm &>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FD978;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::alarmsCreate(WTF::String const&,WTF::Seconds,WTF::Seconds)::$_0,void,WebKit::WebExtensionAlarm &>::call(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  char v8 = 2;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v9, &v8, 1);
  CFRetain(*(CFTypeRef *)(v3 + 8));
  ++*a2;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v4 = &unk_1EE9FD9A0;
  v4[1] = v3;
  v4[2] = v3;
  v4[3] = a2;
  uint64_t v7 = v4;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(v3, &v9, (uint64_t *)&v7);
  uint64_t result = (uint64_t)v7;
  uint64_t v7 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v9) {
    return WTF::fastFree((WTF *)(v9 - 16), v5);
  }
  return result;
}

void sub_1992E1B68(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12) {
    WTF::fastFree((WTF *)(a12 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      unsigned int v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unsigned int v16 = *((_DWORD *)v11 + 4);
          if (v16 >= 0x100) {
            unsigned int v17 = v16 >> 8;
          }
          else {
            unsigned int v17 = WTF::StringImpl::hashSlowCase(v11);
          }
          int v18 = 0;
          do
          {
            uint64_t v19 = v17 & v15;
            unsigned int v17 = ++v18 + v19;
          }
          while (*(void *)(v14 + 16 * v19));
          uint64_t v20 = (WTF::StringImpl **)(v14 + 16 * v19);
          uint64_t v21 = v20[1];
          v20[1] = 0;
          if (v21)
          {
            WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(v21, v8);
            unsigned int v22 = *v20;
            *uint64_t v20 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2) {
                WTF::StringImpl::destroy(v22, v8);
              }
              else {
                *(_DWORD *)v22 -= 2;
              }
            }
          }
          else
          {
            *uint64_t v20 = 0;
          }
          uint64_t v23 = *v10;
          *uint64_t v10 = 0;
          *uint64_t v20 = v23;
          uint64_t v24 = v4 + 16 * v9;
          uint64_t v25 = *(WTF::StringImpl **)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          v20[1] = v25;
          uint64_t v26 = *(WTF **)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          if (v26) {
            WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(v26, v8);
          }
          unsigned int v11 = *v10;
          *uint64_t v10 = 0;
          if (!v11) {
            goto LABEL_34;
          }
          if (*(_DWORD *)v11 == 2) {
            goto LABEL_33;
          }
          *(_DWORD *)v11 -= 2;
        }
        else
        {
          uint64_t v12 = v4 + 16 * v9;
          unsigned int v13 = *(WTF **)(v12 + 8);
          *(void *)(v12 + 8) = 0;
          if (v13)
          {
            WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(v13, v8);
            unsigned int v11 = *v10;
          }
          *uint64_t v10 = 0;
          if (!v11) {
            goto LABEL_34;
          }
          if (*(_DWORD *)v11 == 2)
          {
LABEL_33:
            WTF::StringImpl::destroy(v11, v8);
            goto LABEL_34;
          }
          *(_DWORD *)v11 -= 2;
        }
      }
LABEL_34:
      if (++v9 == v5) {
        goto LABEL_37;
      }
    }
  }
  if (v4)
  {
LABEL_37:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      int v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        int v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(v6, a2);
          int v5 = *v4;
        }
        void *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireAlarmsEventIfNeeded(WebKit::WebExtensionAlarm const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FD9A0;
  uint64_t v3 = (WTF *)a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(v3, a2);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireAlarmsEventIfNeeded(WebKit::WebExtensionAlarm const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FD9A0;
  uint64_t v3 = (WTF *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionAlarm>::deref(v3, a2);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireAlarmsEventIfNeeded(WebKit::WebExtensionAlarm const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 24);
  WebKit::WebExtensionContext::processes(v1, 2, 0, (uint64_t *)&v18);
  uint64_t v4 = v1[9];
  if (v4 && *(void *)(v4 + 8))
  {
    int v5 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v18);
    int v6 = v5;
    uint64_t v7 = v3;
    char v8 = v18 ? &v18[*((unsigned int *)v18 - 1)] : 0;
    if (v8 != v5)
    {
      uint64_t v9 = v2 + 8;
      do
      {
        uint64_t v10 = *v6;
        uint64_t v11 = v1[4];
        uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v12 = 1600;
        *((void *)v12 + 1) = v11;
        *((void *)v12 + 66) = (char *)v12 + 16;
        *((void *)v12 + 67) = 512;
        *((void *)v12 + 68) = 0;
        *((void *)v12 + 70) = 0;
        *((void *)v12 + 69) = 0;
        IPC::Encoder::encodeHeader(v12);
        uint64_t v21 = v12;
        IPC::ArgumentCoder<WebKit::WebExtensionAlarmParameters,void>::encode(v12, v9);
        LOBYTE(v19) = 0;
        char v20 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v21, 0, (uint64_t)&v19, 1);
        if (v20)
        {
          uint64_t v13 = v19;
          uint64_t v19 = 0;
          if (v13) {
            (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
          }
        }
        uint64_t v14 = v21;
        uint64_t v21 = 0;
        if (v14)
        {
          IPC::Encoder::~Encoder(v14, v3);
          WTF::fastFree(v15, v16);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_17;
          }
        }
        int v6 = v7;
LABEL_17:
        ;
      }
      while (v6 != v8);
    }
  }
  uint64_t result = v18;
  if (v18) {
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v18, v3);
  }
  return result;
}

void sub_1992E2144(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a10) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::commandsGetAll(WebKit::WebExtensionContext *a1, uint64_t *a2)
{
  WebKit::WebExtensionContext::commands(a1);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v4 = *((unsigned int *)v3 + 3);
  if (!v4)
  {
    LODWORD(v10) = 0;
    uint64_t v7 = 0;
LABEL_9:
    v19[1] = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v14 = *a2;
    *a2 = 0;
    v19[0] = 0;
    v25[0] = 0;
    uint64_t v22 = v7;
    v25[1] = 0;
    unint64_t v23 = __PAIR64__(v10, v4);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 16))(v14, &v22);
    WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v15);
    WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v16);
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v17);
    WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v18);
    return;
  }
  if (v4 < 0xAAAAAAB)
  {
    int v5 = v3;
    unsigned int v6 = 24 * v4;
    uint64_t v7 = WTF::fastMalloc((WTF *)(24 * v4));
    LODWORD(v4) = v6 / 0x18;
    LODWORD(v21) = v6 / 0x18;
    uint64_t v20 = v7;
    uint64_t v9 = *((unsigned int *)v5 + 3);
    if (v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = *v5;
      uint64_t v12 = (void *)(v7 + 16);
      uint64_t v13 = 8 * v9;
      do
      {
        WebKit::WebExtensionCommand::parameters(*(WebKit::WebExtensionCommand **)(v11 + 8 * v10++), v8, (uint64_t)&v22);
        *(v12 - 2) = v22;
        *(v12 - 1) = v23;
        void *v12 = v24;
        v12 += 3;
        v13 -= 8;
      }
      while (v13);
      uint64_t v7 = v20;
      LODWORD(v4) = v21;
    }
    else
    {
      LODWORD(v10) = HIDWORD(v21);
    }
    goto LABEL_9;
  }
  __break(0xC471u);
}

void sub_1992E234C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::fireCommandEventIfNeeded(CFTypeRef *this, CFTypeRef *a2, WebKit::WebExtensionTab *a3)
{
  char v10 = 4;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v11, &v10, 1);
  CFRetain(this[1]);
  CFRetain(a2[1]);
  if (a3) {
    ++*(_DWORD *)a3;
  }
  unsigned int v6 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v6 = &unk_1EE9FD9C8;
  v6[1] = this;
  v6[2] = this;
  v6[3] = a2;
  v6[4] = a3;
  uint64_t v9 = v6;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)this, &v11, (uint64_t *)&v9);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result) {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  if (v11) {
    return (void *)WTF::fastFree((WTF *)(v11 - 16), v7);
  }
  return result;
}

void sub_1992E249C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12) {
    WTF::fastFree((WTF *)(a12 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::WebExtensionContext::fireCommandChangedEventIfNeeded(CFTypeRef *this, CFTypeRef *a2, WTF::StringImpl **a3)
{
  char v11 = 3;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v12, &v11, 1);
  CFRetain(this[1]);
  CFRetain(a2[1]);
  unsigned int v6 = *a3;
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v7 = &unk_1EE9FD9F0;
  v7[1] = this;
  v7[2] = this;
  v7[3] = a2;
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  v7[4] = v6;
  char v10 = v7;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)this, &v12, (uint64_t *)&v10);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    if (v6)
    {
LABEL_7:
      if (*(_DWORD *)v6 == 2) {
        uint64_t result = (void *)WTF::StringImpl::destroy(v6, v8);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  else if (v6)
  {
    goto LABEL_7;
  }
  if (v12) {
    return (void *)WTF::fastFree((WTF *)(v12 - 16), v8);
  }
  return result;
}

void sub_1992E264C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (a12) {
    WTF::fastFree((WTF *)(a12 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCommandEventIfNeeded(WebKit::WebExtensionCommand const&,WebKit::WebExtensionTab *)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FD9C8;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v2);
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCommandEventIfNeeded(WebKit::WebExtensionCommand const&,WebKit::WebExtensionTab *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FD9C8;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCommandEventIfNeeded(WebKit::WebExtensionCommand const&,WebKit::WebExtensionTab *)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    WebKit::WebExtensionTab::parameters(*(WebKit::WebExtensionTab **)(a1 + 32), (uint64_t)v21);
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)v26, (uint64_t)v21);
  }
  else
  {
    v26[0] = 0;
    v26[176] = 0;
  }
  uint64_t v20 = v2;
  WebKit::WebExtensionContext::processes(v1, 4, 0, (uint64_t *)&v27);
  uint64_t v5 = v1[9];
  if (v5 && *(void *)(v5 + 8))
  {
    unsigned int v6 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v27);
    uint64_t v7 = v6;
    char v8 = v4;
    uint64_t v9 = v27 ? &v27[*((unsigned int *)v27 - 1)] : 0;
    if (v9 != v6)
    {
      char v10 = (uint64_t *)(v3 + 32);
      do
      {
        uint64_t v11 = *v7;
        uint64_t v12 = v1[4];
        uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v13 = 1602;
        *((void *)v13 + 1) = v12;
        *((void *)v13 + 66) = (char *)v13 + 16;
        *((void *)v13 + 67) = 512;
        *((void *)v13 + 68) = 0;
        *((void *)v13 + 70) = 0;
        *((void *)v13 + 69) = 0;
        IPC::Encoder::encodeHeader(v13);
        int v30 = v13;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, v10);
        IPC::ArgumentCoder<std::optional<WebKit::WebExtensionTabParameters>,void>::encode<IPC::Encoder,std::optional<WebKit::WebExtensionTabParameters> const&>(v13, (uint64_t)v26);
        LOBYTE(v28) = 0;
        char v29 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v30, 0, (uint64_t)&v28, 1);
        if (v29)
        {
          uint64_t v14 = v28;
          uint64_t v28 = 0;
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
          }
        }
        int v15 = v30;
        int v30 = 0;
        if (v15)
        {
          IPC::Encoder::~Encoder(v15, v4);
          WTF::fastFree(v16, v17);
        }
        while (++v7 != v8)
        {
          if ((unint64_t)(*v7 + 1) > 1) {
            goto LABEL_20;
          }
        }
        uint64_t v7 = v8;
LABEL_20:
        ;
      }
      while (v7 != v9);
    }
  }
  if (v27) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v27, v4);
  }
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v26);
  if (v20)
  {
    if (v25)
    {
      uint64_t result = v24;
      uint64_t v24 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    if (v23)
    {
      uint64_t result = v22;
      uint64_t v22 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void sub_1992E2A38(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, WTF::StringImpl *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  unint64_t v34 = *(uint64_t **)(v32 - 128);
  if (v34) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v34, a2);
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a32);
  if (a9)
  {
    if (a19 && a18)
    {
      if (*(_DWORD *)a18 == 2) {
        WTF::StringImpl::destroy(a18, v35);
      }
      else {
        *(_DWORD *)a18 -= 2;
      }
    }
    if (a17 && a12)
    {
      if (*(_DWORD *)a12 == 2) {
        WTF::StringImpl::destroy(a12, v35);
      }
      else {
        *(_DWORD *)a12 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCommandChangedEventIfNeeded(WebKit::WebExtensionCommand const&,WTF::String const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FD9F0;
  uint64_t v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCommandChangedEventIfNeeded(WebKit::WebExtensionCommand const&,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FD9F0;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCommandChangedEventIfNeeded(WebKit::WebExtensionCommand const&,WTF::String const&)::$_0,void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(WebKit::WebExtensionCommand **)(a1 + 24);
  WebKit::WebExtensionCommand::shortcutString(v4, a2, &v21);
  WebKit::WebExtensionContext::processes(v3, 3, 0, (uint64_t *)&v22);
  uint64_t v6 = v3[9];
  if (v6 && *(void *)(v6 + 8))
  {
    uint64_t v7 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v22);
    char v8 = v7;
    uint64_t v9 = v5;
    char v10 = v22 ? &v22[*((unsigned int *)v22 - 1)] : 0;
    if (v10 != v7)
    {
      uint64_t v11 = (uint64_t *)((char *)v4 + 32);
      uint64_t v12 = (uint64_t *)(a1 + 32);
      do
      {
        uint64_t v13 = *v8;
        v23[0] = v11;
        v23[1] = v12;
        v23[2] = (uint64_t *)&v21;
        uint64_t v14 = v3[4];
        int v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)int v15 = 1601;
        *((void *)v15 + 1) = v14;
        *((void *)v15 + 66) = (char *)v15 + 16;
        *((void *)v15 + 67) = 512;
        *((void *)v15 + 68) = 0;
        *((void *)v15 + 70) = 0;
        *((void *)v15 + 69) = 0;
        IPC::Encoder::encodeHeader(v15);
        uint64_t v26 = v15;
        IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&>,0ul,1ul,2ul>(v15, v23);
        LOBYTE(v24) = 0;
        char v25 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v13, &v26, 0, (uint64_t)&v24, 1);
        if (v25)
        {
          uint64_t v16 = v24;
          uint64_t v24 = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
        unsigned int v17 = v26;
        uint64_t v26 = 0;
        if (v17)
        {
          IPC::Encoder::~Encoder(v17, v5);
          WTF::fastFree(v18, v19);
        }
        while (++v8 != v9)
        {
          if ((unint64_t)(*v8 + 1) > 1) {
            goto LABEL_17;
          }
        }
        char v8 = v9;
LABEL_17:
        ;
      }
      while (v8 != v10);
    }
  }
  if (v22) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v22, v5);
  }
  uint64_t result = v21;
  uint64_t v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1992E2E38(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, IPC::Encoder *a18)
{
  if (a11) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a11, a2);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::isCookiesMessageAllowed(WebKit::WebExtensionContext *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (!v1 || !*(void *)(v1 + 8)) {
    return 0;
  }
  MEMORY[0x19972EAD0](&v7, @"cookies");
  BOOL v4 = (WebKit::WebExtensionContext::permissionState(this, &v7, 0, 2) & 0xFFFFFFFE) == 2;
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v4;
}

void sub_1992E2F78(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::fetchCookies(uint64_t a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if ((*(unsigned char *)(a3 + 8) & 1) != 0
    && (WebKit::WebExtensionContext::permissionState(a1, (URL *)a3, 0, 3) & 0xFFFFFFFE) != 2)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    LODWORD(v24) = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()(a5);
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1EE9FDA08[v24])(v21, &v22);
  }
  else
  {
    uint64_t v22 = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v10 = *a5;
    *a5 = 0;
    uint64_t v23 = a1;
    uint64_t v24 = v10;
    LOBYTE(v25) = 0;
    char v26 = 0;
    if (*(unsigned char *)(a4 + 8))
    {
      uint64_t v11 = *(WTF::StringImpl **)a4;
      if (*(void *)a4) {
        *(_DWORD *)v11 += 2;
      }
      char v25 = v11;
      char v26 = 1;
    }
    LOBYTE(v27) = 0;
    char v28 = 0;
    if (*(unsigned char *)(a4 + 24))
    {
      uint64_t v12 = *(WTF::StringImpl **)(a4 + 16);
      if (v12) {
        *(_DWORD *)v12 += 2;
      }
      int v27 = v12;
      char v28 = 1;
    }
    LOBYTE(v29) = 0;
    char v30 = 0;
    if (*(unsigned char *)(a4 + 40))
    {
      uint64_t v13 = *(WTF::StringImpl **)(a4 + 32);
      if (v13) {
        *(_DWORD *)v13 += 2;
      }
      char v29 = v13;
      char v30 = 1;
    }
    int v31 = *(_DWORD *)(a4 + 48);
    CFRetain(a2[1]);
    uint64_t v32 = a2;
    int v14 = *(_DWORD *)(a3 + 8);
    int v15 = WebKit::WebsiteDataStore::cookieStore((WebKit::WebsiteDataStore *)a2);
    if (v14)
    {
      WTF::URL::isolatedCopy();
      WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler<WebKit::WebExtensionContext::fetchCookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebsiteDataStore &,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void>(&v20, &v22);
      API::HTTPCookieStore::cookiesForURL((uint64_t)v15, (uint64_t *)v21, &v20);
      uint64_t v18 = v20;
      uint64_t v20 = 0;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
      uint64_t v19 = v21[0];
      v21[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v16);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
    }
    else
    {
      WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler<WebKit::WebExtensionContext::fetchCookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebsiteDataStore &,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void>((uint64_t *)v21, &v22);
      API::HTTPCookieStore::cookies((uint64_t)v15, (uint64_t *)v21);
      unsigned int v17 = v21[0];
      v21[0] = 0;
      if (v17) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v17 + 8))(v17);
      }
    }
    if (v32) {
      CFRelease(v32[1]);
    }
    if (v30 && v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v16);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    if (v28 && v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, v16);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    if (v26 && v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v16);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
    if (v23) {
      CFRelease(*(CFTypeRef *)(v23 + 8));
    }
  }
}

void sub_1992E32B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,char a24,uint64_t a25,uint64_t a26)
{
  if (a18 != -1) {
    ((void (*)(WTF::StringImpl **, char *))off_1EE9FDA08[a18])(&a11, &a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1992E3574(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t *WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler<WebKit::WebExtensionContext::fetchCookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebsiteDataStore &,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x60);
  uint64_t v5 = *a2;
  *(void *)uint64_t v4 = &unk_1EE9FDA48;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = a2[1];
  a2[1] = 0;
  *(void *)(v4 + 16) = v6;
  uint64_t v7 = a2[2];
  a2[2] = 0;
  *(void *)(v4 + 24) = v7;
  *(unsigned char *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 40) = 0;
  if (*((unsigned char *)a2 + 32))
  {
    char v8 = (_DWORD *)a2[3];
    if (v8) {
      *v8 += 2;
    }
    *(void *)(v4 + 32) = v8;
    *(unsigned char *)(v4 + 40) = 1;
  }
  *(unsigned char *)(v4 + 48) = 0;
  *(unsigned char *)(v4 + 56) = 0;
  if (*((unsigned char *)a2 + 48))
  {
    uint64_t v9 = (_DWORD *)a2[5];
    if (v9) {
      *v9 += 2;
    }
    *(void *)(v4 + 48) = v9;
    *(unsigned char *)(v4 + 56) = 1;
  }
  *(unsigned char *)(v4 + 64) = 0;
  *(unsigned char *)(v4 + 72) = 0;
  if (*((unsigned char *)a2 + 64))
  {
    uint64_t v10 = (_DWORD *)a2[7];
    if (v10) {
      *v10 += 2;
    }
    *(void *)(v4 + 64) = v10;
    *(unsigned char *)(v4 + 72) = 1;
  }
  *(_DWORD *)(v4 + 80) = *((_DWORD *)a2 + 18);
  uint64_t v11 = a2[10];
  a2[10] = 0;
  *(void *)(v4 + 88) = v11;
  *a1 = v4;
  return a1;
}

void WebKit::WebExtensionContext::cookiesGet(uint64_t a1, const void *a2, char a3, WTF::StringImpl **a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::WebExtensionContext::websiteDataStore(a1, a2, a3);
  if (v10)
  {
    uint64_t v12 = v10;
    CFRetain(v10[1]);
    LOBYTE(v44) = 0;
    char v45 = 0;
    LOBYTE(v46) = 0;
    char v47 = 0;
    LOBYTE(v48) = 0;
    char v49 = 0;
    int v50 = 0;
    std::optional<WTF::String>::operator=[abi:sn180100]<WTF::String const&,void>((uint64_t)&v44, a4);
    uint64_t v13 = *(WTF::StringImpl **)a5;
    if (*(void *)a5) {
      *(_DWORD *)v13 += 2;
    }
    v51 = v13;
    long long v52 = *(_OWORD *)(a5 + 8);
    long long v53 = *(_OWORD *)(a5 + 24);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v43, (uint64_t)&v51, 1uLL);
    long long v42 = 0;
    uint64_t v54 = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v55 = a1;
    CFRetain(v12[1]);
    v56 = v12;
    int v14 = *a4;
    if (*a4) {
      *(_DWORD *)v14 += 2;
    }
    int v57 = v14;
    int v15 = *(WTF::StringImpl **)a5;
    if (*(void *)a5) {
      *(_DWORD *)v15 += 2;
    }
    v58 = v15;
    long long v16 = *(_OWORD *)(a5 + 24);
    long long v59 = *(_OWORD *)(a5 + 8);
    long long v60 = v16;
    LOBYTE(v61) = 0;
    char v62 = 0;
    if (v45)
    {
      unsigned int v17 = v44;
      char v44 = 0;
      uint64_t v61 = v17;
      char v62 = 1;
    }
    LOBYTE(v63) = 0;
    char v64 = 0;
    if (v47)
    {
      uint64_t v18 = v46;
      id v46 = 0;
      uint64_t v63 = v18;
      char v64 = 1;
    }
    LOBYTE(v65) = 0;
    char v66 = 0;
    if (v49)
    {
      uint64_t v19 = v48;
      v48 = 0;
      CFStringRef v65 = v19;
      char v66 = 1;
    }
    int v67 = v50;
    uint64_t v20 = *a6;
    *a6 = 0;
    uint64_t v68 = v20;
    uint64_t v21 = WTF::fastMalloc((WTF *)0x90);
    *(void *)uint64_t v21 = &unk_1EE9FDA70;
    *(void *)(v21 + 8) = v54;
    *(void *)(v21 + 16) = v55;
    uint64_t v22 = v56;
    uint64_t v55 = 0;
    v56 = 0;
    *(void *)(v21 + 24) = v22;
    uint64_t v23 = v57;
    if (v57) {
      *(_DWORD *)v57 += 2;
    }
    *(void *)(v21 + 32) = v23;
    uint64_t v24 = v58;
    if (v58) {
      *(_DWORD *)v58 += 2;
    }
    *(void *)(v21 + 40) = v24;
    long long v25 = v60;
    *(_OWORD *)(v21 + 48) = v59;
    *(_OWORD *)(v21 + 64) = v25;
    *(unsigned char *)(v21 + 80) = 0;
    *(unsigned char *)(v21 + 88) = 0;
    if (v62)
    {
      char v26 = v61;
      uint64_t v61 = 0;
      *(void *)(v21 + 80) = v26;
      *(unsigned char *)(v21 + 88) = 1;
    }
    *(unsigned char *)(v21 + 96) = 0;
    *(unsigned char *)(v21 + 104) = 0;
    if (v64)
    {
      int v27 = v63;
      uint64_t v63 = 0;
      *(void *)(v21 + 96) = v27;
      *(unsigned char *)(v21 + 104) = 1;
    }
    *(unsigned char *)(v21 + 112) = 0;
    *(unsigned char *)(v21 + 120) = 0;
    if (v66)
    {
      char v28 = v65;
      CFStringRef v65 = 0;
      *(void *)(v21 + 112) = v28;
      *(unsigned char *)(v21 + 120) = 1;
    }
    *(_DWORD *)(v21 + 128) = v67;
    uint64_t v29 = v68;
    uint64_t v68 = 0;
    *(void *)(v21 + 136) = v29;
    uint64_t v41 = v21;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v43, &v42, &v41, 1, 1);
    uint64_t v30 = v41;
    uint64_t v41 = 0;
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
    WebKit::WebExtensionContext::cookiesGet(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0::~$_0(&v54);
    uint64_t v32 = v42;
    long long v42 = 0;
    if (v32) {
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v32);
    }
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v31);
    unint64_t v34 = v51;
    v51 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v33);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
    if (v49)
    {
      uint64_t v35 = v48;
      v48 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2) {
          WTF::StringImpl::destroy(v35, v33);
        }
        else {
          *(_DWORD *)v35 -= 2;
        }
      }
    }
    if (v47)
    {
      unint64_t v36 = v46;
      id v46 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2) {
          WTF::StringImpl::destroy(v36, v33);
        }
        else {
          *(_DWORD *)v36 -= 2;
        }
      }
    }
    if (v45)
    {
      uint64_t v37 = v44;
      char v44 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2) {
          WTF::StringImpl::destroy(v37, v33);
        }
        else {
          *(_DWORD *)v37 -= 2;
        }
      }
    }
    CFRelease(v12[1]);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"cookies.get()", 0, &cfstr_CookieStoreNot.isa, v11, &v44);
    unint64_t v38 = v44;
    char v44 = 0;
    uint64_t v55 = (uint64_t)v38;
    int v69 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)>::operator()(a6);
    if (v69 != -1) {
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1EE9FDA18[v69])(&v51, &v55);
    }
    int v69 = -1;
    uint64_t v40 = v44;
    char v44 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, v39);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
  }
}

void sub_1992E3B38(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16, char a17, WTF::StringImpl *a18, char a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47)
{
  if (a47 != -1) {
    ((void (*)(WTF::StringImpl **, uint64_t))off_1EE9FDA18[a47])(&a21, v47);
  }
  a47 = -1;
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1992E3D60(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::optional<WTF::String>::operator=[abi:sn180100]<WTF::String const&,void>(uint64_t a1, WTF::StringImpl **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    WTF::String::operator=((uint64_t *)a1, a2);
  }
  else
  {
    uint64_t v3 = *a2;
    if (*a2) {
      *(_DWORD *)v3 += 2;
    }
    *(void *)a1 = v3;
    *(unsigned char *)(a1 + 8) = 1;
  }
  return a1;
}

void *WebKit::WebExtensionContext::cookiesGet(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0::~$_0(void *a1)
{
  uint64_t v2 = a1[16];
  a1[16] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 13));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 11));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 9));
  uint64_t v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[2];
  a1[2] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  uint64_t v7 = a1[1];
  a1[1] = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  return a1;
}

void WebKit::WebExtensionContext::cookiesGetAll(uint64_t a1, const void *a2, char a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::WebExtensionContext::websiteDataStore(a1, a2, a3);
  if (v10)
  {
    uint64_t v12 = v10;
    CFRetain(v10[1]);
    uint64_t v13 = *(WTF::StringImpl **)a4;
    if (*(void *)a4) {
      *(_DWORD *)v13 += 2;
    }
    uint64_t v41 = v13;
    long long v42 = *(_OWORD *)(a4 + 8);
    long long v43 = *(_OWORD *)(a4 + 24);
    uint64_t v35 = v12;
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v40, (uint64_t)&v41, 1uLL);
    BOOL v39 = 0;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    CFRetain(v12[1]);
    int v14 = (_OWORD *)(a4 + 8);
    int v15 = *(WTF::StringImpl **)a4;
    if (v15) {
      *(_DWORD *)v15 += 2;
    }
    long long v16 = v14[1];
    *(_OWORD *)unint64_t v36 = *v14;
    long long v37 = v16;
    int v34 = *(unsigned __int8 *)(a5 + 8);
    if (*(unsigned char *)(a5 + 8))
    {
      unsigned int v17 = *(WTF::StringImpl **)a5;
      if (*(void *)a5) {
        *(_DWORD *)v17 += 2;
      }
    }
    else
    {
      unsigned int v17 = 0;
    }
    int v18 = *(unsigned __int8 *)(a5 + 24);
    if (*(unsigned char *)(a5 + 24))
    {
      uint64_t v19 = *(WTF::StringImpl **)(a5 + 16);
      if (v19) {
        *(_DWORD *)v19 += 2;
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    int v20 = *(unsigned __int8 *)(a5 + 40);
    if (*(unsigned char *)(a5 + 40))
    {
      uint64_t v21 = *(WTF::StringImpl **)(a5 + 32);
      if (v21) {
        *(_DWORD *)v21 += 2;
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    int v22 = *(_DWORD *)(a5 + 48);
    uint64_t v23 = *a6;
    *a6 = 0;
    uint64_t v24 = WTF::fastMalloc((WTF *)0x88);
    *(void *)uint64_t v24 = &unk_1EE9FDAC0;
    *(void *)(v24 + 8) = a1;
    *(void *)(v24 + 16) = a1;
    *(void *)(v24 + 24) = v35;
    if (v15) {
      *(_DWORD *)v15 += 2;
    }
    *(void *)(v24 + 32) = v15;
    long long v25 = v37;
    *(_OWORD *)(v24 + 40) = *(_OWORD *)v36;
    *(_OWORD *)(v24 + 56) = v25;
    *(unsigned char *)(v24 + 72) = 0;
    *(unsigned char *)(v24 + 80) = 0;
    if (v34)
    {
      if (v17) {
        *(_DWORD *)v17 += 2;
      }
      *(void *)(v24 + 72) = v17;
      *(unsigned char *)(v24 + 80) = 1;
    }
    *(unsigned char *)(v24 + 88) = 0;
    *(unsigned char *)(v24 + 96) = 0;
    if (v18)
    {
      if (v19) {
        *(_DWORD *)v19 += 2;
      }
      *(void *)(v24 + 88) = v19;
      *(unsigned char *)(v24 + 96) = 1;
    }
    *(unsigned char *)(v24 + 104) = 0;
    *(unsigned char *)(v24 + 112) = 0;
    if (v20)
    {
      if (v21) {
        *(_DWORD *)v21 += 2;
      }
      *(void *)(v24 + 104) = v21;
      *(unsigned char *)(v24 + 112) = 1;
    }
    *(_DWORD *)(v24 + 120) = v22;
    *(void *)(v24 + 128) = v23;
    uint64_t v38 = v24;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v40, &v39, &v38, 1, 1);
    uint64_t v27 = v38;
    uint64_t v38 = 0;
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
    if (v20 && v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v26);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    if (v18 && v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v26);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v34 && v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v26);
        if (!v15)
        {
LABEL_51:
          char v28 = v39;
          BOOL v39 = 0;
          if (v28) {
            WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v28);
          }
          WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v26);
          uint64_t v30 = v41;
          uint64_t v41 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2) {
              WTF::StringImpl::destroy(v30, v29);
            }
            else {
              *(_DWORD *)v30 -= 2;
            }
          }
          CFRelease(v35[1]);
          return;
        }
LABEL_48:
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v26);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
        goto LABEL_51;
      }
      *(_DWORD *)v17 -= 2;
    }
    if (!v15) {
      goto LABEL_51;
    }
    goto LABEL_48;
  }
  WebKit::toWebExtensionError<>((WebKit *)@"cookies.getAll()", 0, &cfstr_CookieStoreNot.isa, v11, v36);
  int v31 = v36[0];
  v36[0] = 0;
  uint64_t v41 = v31;
  DWORD2(v42) = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()(a6);
  if (DWORD2(v42) != -1) {
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1EE9FDA08[DWORD2(v42)])(v40, &v41);
  }
  DWORD2(v42) = -1;
  uint64_t v33 = v36[0];
  v36[0] = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v32);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
}

void sub_1992E42D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,int a22)
{
  if (a22 != -1) {
    ((void (*)(char *, WTF::StringImpl **))off_1EE9FDA08[a22])(&a18, &a20);
  }
  a22 = -1;
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::cookiesSet(uint64_t a1, const void *a2, char a3, long long *a4, uint64_t *a5)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  char v8 = WebKit::WebExtensionContext::websiteDataStore(a1, a2, a3);
  if (v8)
  {
    uint64_t v10 = v8;
    CFRetain(v8[1]);
    WebKit::toURL((WebKit *)&v34, (const WebCore::Cookie *)(a4 + 1));
    uint64_t v11 = v34;
    if (v34) {
      *(_DWORD *)v34 += 2;
    }
    uint64_t v47 = v11;
    long long v48 = v35;
    long long v49 = v36;
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v33, (uint64_t)&v47, 1uLL);
    uint64_t v32 = 0;
    uint64_t v37 = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v38 = a1;
    CFRetain(v10[1]);
    BOOL v39 = v10;
    uint64_t v12 = v34;
    if (v34) {
      *(_DWORD *)v34 += 2;
    }
    uint64_t v40 = v12;
    long long v41 = v35;
    long long v42 = v36;
    long long v43 = *a4;
    WebCore::Cookie::Cookie((WebCore::Cookie *)v44, (const WebCore::Cookie *)(a4 + 1));
    uint64_t v13 = *a5;
    *a5 = 0;
    uint64_t v46 = v13;
    uint64_t v14 = WTF::fastMalloc((WTF *)0xE8);
    *(void *)uint64_t v14 = &unk_1EE9FDAE8;
    *(void *)(v14 + 8) = v37;
    *(void *)(v14 + 16) = v38;
    int v15 = v39;
    uint64_t v38 = 0;
    BOOL v39 = 0;
    *(void *)(v14 + 24) = v15;
    WTF::URL::URL(v14 + 32, (uint64_t *)&v40);
    *(_OWORD *)(v14 + 72) = v43;
    WebCore::Cookie::Cookie((WebCore::Cookie *)(v14 + 88), (const WebCore::Cookie *)v44);
    uint64_t v16 = v46;
    uint64_t v46 = 0;
    *(void *)(v14 + 224) = v16;
    uint64_t v31 = v14;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v33, &v32, &v31, 1, 1);
    uint64_t v18 = v31;
    uint64_t v31 = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    uint64_t v19 = v46;
    uint64_t v46 = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v44, v17);
    uint64_t v21 = v40;
    uint64_t v40 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v20);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    int v22 = v39;
    BOOL v39 = 0;
    if (v22) {
      CFRelease(v22[1]);
    }
    uint64_t v23 = v38;
    uint64_t v38 = 0;
    if (v23) {
      CFRelease(*(CFTypeRef *)(v23 + 8));
    }
    uint64_t v24 = v32;
    uint64_t v32 = 0;
    if (v24) {
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v24);
    }
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v20);
    char v26 = v47;
    uint64_t v47 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v25);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    uint64_t v27 = v34;
    int v34 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, v25);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    CFRelease(v10[1]);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"cookies.set()", 0, &cfstr_CookieStoreNot.isa, v9, &v34);
    char v28 = v34;
    int v34 = 0;
    uint64_t v38 = (uint64_t)v28;
    int v45 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)>::operator()(a5);
    if (v45 != -1) {
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1EE9FDA18[v45])(&v47, &v38);
    }
    int v45 = -1;
    uint64_t v30 = v34;
    int v34 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v29);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
  }
}

void sub_1992E484C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (a40 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE9FDA18[a40])(v47 - 112, v46);
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::toURL(WebKit *this, const WebCore::Cookie *a2)
{
  if (!*((void *)a2 + 2))
  {
LABEL_5:
    uint64_t v8 = 0;
    if (*((unsigned char *)a2 + 57)) {
      uint64_t v9 = "https";
    }
    else {
      uint64_t v9 = "http";
    }
    uint64_t v10 = 5;
    if (*((unsigned char *)a2 + 57)) {
      uint64_t v10 = 6;
    }
    char v11 = 1;
    goto LABEL_41;
  }
  int v4 = WTF::StringImpl::startsWith();
  uint64_t v8 = *((void *)a2 + 2);
  if (v4)
  {
    if (!v8) {
      goto LABEL_5;
    }
    WTF::StringImpl::substring(*((WTF::StringImpl **)a2 + 2));
    uint64_t v8 = v55;
    if (!v55) {
      goto LABEL_5;
    }
  }
  else
  {
    if (!v8) {
      goto LABEL_5;
    }
    *(_DWORD *)v8 += 2;
  }
  if (WTF::StringImpl::find(v8, 0x3Au, 0, v5, v6, v7) != -1)
  {
    int v12 = *(_DWORD *)(v8 + 4);
    *(_DWORD *)v8 += 2;
    if ((v12 & 0x80000000) == 0)
    {
      BOOL v13 = __OFADD__(v12, 1);
      int v14 = v12 + 1;
      if (!v13)
      {
        uint64_t v15 = (v14 + 1);
        if (!__OFADD__(v14, 1))
        {
          if ((*(unsigned char *)(v8 + 16) & 4) != 0)
          {
            WTF::tryFastCompactMalloc((WTF *)(v15 + 20));
            uint64_t v16 = v55;
            if (v55)
            {
              *(unsigned char *)(v55 + 20) = 91;
              *(_DWORD *)uint64_t v16 = 2;
              *(_DWORD *)(v16 + 4) = v15;
              *(void *)(v16 + 8) = v16 + 20;
              *(_DWORD *)(v16 + 16) = 4;
              uint64_t v55 = v8;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v55, (char *)(v16 + 21));
              uint64_t v19 = v55;
              if (v55) {
                uint64_t v19 = *(unsigned int *)(v55 + 4);
              }
              *(unsigned char *)(v16 + 21 + v19) = 93;
              goto LABEL_28;
            }
          }
          else if (v15 <= 0x7FFFFFEF)
          {
            WTF::tryFastCompactMalloc((WTF *)(2 * (v14 + 1) + 20));
            uint64_t v16 = v55;
            if (v55)
            {
              *(_DWORD *)uint64_t v55 = 2;
              *(_DWORD *)(v16 + 4) = v15;
              *(_WORD *)(v16 + 20) = 91;
              *(void *)(v16 + 8) = v16 + 20;
              *(_DWORD *)(v16 + 16) = 0;
              uint64_t v55 = v8;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v55, (char *)(v16 + 22));
              uint64_t v18 = v55;
              if (v55) {
                uint64_t v18 = *(unsigned int *)(v55 + 4);
              }
              *(_WORD *)(v16 + 22 + 2 * v18) = 93;
LABEL_28:
              int v20 = *(_DWORD *)v8 - 2;
              if (*(_DWORD *)v8 == 2)
              {
                WTF::StringImpl::destroy((WTF::StringImpl *)v8, v17);
                int v20 = *(_DWORD *)v8;
              }
              else
              {
                *(_DWORD *)uint64_t v8 = v20;
              }
              int v21 = v20 - 2;
              if (v21) {
                *(_DWORD *)uint64_t v8 = v21;
              }
              else {
                WTF::StringImpl::destroy((WTF::StringImpl *)v8, v17);
              }
              uint64_t v8 = v16;
              goto LABEL_35;
            }
          }
        }
      }
    }
    __break(0xC471u);
LABEL_110:
    JUMPOUT(0x1992E4F98);
  }
  uint64_t v16 = v8;
LABEL_35:
  char v11 = 0;
  if (*((unsigned char *)a2 + 57)) {
    uint64_t v9 = "https";
  }
  else {
    uint64_t v9 = "http";
  }
  uint64_t v10 = 5;
  if (*((unsigned char *)a2 + 57)) {
    uint64_t v10 = 6;
  }
  *(_DWORD *)v16 += 2;
LABEL_41:
  uint64_t v22 = *((void *)a2 + 3);
  if (v22) {
    *(_DWORD *)v22 += 2;
  }
  BOOL v23 = v10 != 0;
  size_t v24 = v10 - 1;
  if (v23) {
    size_t v25 = v24;
  }
  else {
    size_t v25 = 0;
  }
  if (v25 >> 31)
  {
    __break(0xC471u);
    goto LABEL_110;
  }
  if (!v8)
  {
    int v26 = 0;
    if (v22) {
      goto LABEL_49;
    }
LABEL_107:
    int v27 = 0;
    goto LABEL_50;
  }
  int v26 = *(_DWORD *)(v8 + 4);
  if (!v22) {
    goto LABEL_107;
  }
LABEL_49:
  int v27 = *(_DWORD *)(v22 + 4);
LABEL_50:
  if ((v27 | v26) < 0) {
    goto LABEL_105;
  }
  BOOL v13 = __OFADD__(v26, v27);
  int v28 = v26 + v27;
  if (v13) {
    goto LABEL_105;
  }
  BOOL v13 = __OFADD__(v28, 3);
  int v29 = v28 + 3;
  if (v13) {
    goto LABEL_105;
  }
  unsigned int v30 = v25 + v29;
  if (__OFADD__(v25, v29)) {
    goto LABEL_105;
  }
  if (v8)
  {
    int v31 = *(_DWORD *)(v8 + 16);
    if (!v22 || (v31 & 4) == 0)
    {
      uint64_t v32 = v30;
      BOOL v33 = v30 == 0;
      if ((v31 & 4) == 0)
      {
LABEL_58:
        if (v33)
        {
LABEL_59:
          uint64_t v34 = MEMORY[0x1E4F30960];
          *MEMORY[0x1E4F30960] += 2;
          goto LABEL_81;
        }
        if (v30 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v32 + 20));
          uint64_t v34 = v55;
          if (v55)
          {
            uint64_t v38 = (char *)(v55 + 20);
            *(_DWORD *)uint64_t v55 = 2;
            *(_DWORD *)(v34 + 4) = v30;
            *(void *)(v34 + 8) = v34 + 20;
            *(_DWORD *)(v34 + 16) = 0;
            uint64_t v39 = v34 + 20 + 2 * v25;
            if ((v25 & 0xFFFFFFC0) != 0)
            {
              uint64_t v40 = &v38[2 * (v25 & 0xFFFFFFC0)];
              long long v41 = 0uLL;
              do
              {
                v56.val[0] = *(int8x16_t *)v9;
                int8x16_t v42 = *((int8x16_t *)v9 + 1);
                v57.val[0] = (int8x16_t)*((_OWORD *)v9 + 2);
                long long v43 = *((_OWORD *)v9 + 3);
                v9 += 64;
                long long v44 = v43;
                v57.val[1] = 0uLL;
                v58.val[0] = v42;
                v56.val[1] = 0uLL;
                int v45 = v38;
                vst2q_s8(v45, v56);
                v45 += 32;
                v58.val[1] = 0uLL;
                vst2q_s8(v45, v58);
                uint64_t v46 = v38 + 64;
                vst2q_s8(v46, v57);
                uint64_t v47 = v38 + 96;
                vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
                v38 += 128;
              }
              while (v38 != v40);
              uint64_t v38 = v40;
            }
            while (v38 != (char *)v39)
            {
              __int16 v48 = *(unsigned __int8 *)v9++;
              *(_WORD *)uint64_t v38 = v48;
              v38 += 2;
            }
            *(_DWORD *)uint64_t v39 = 3080250;
            *(_WORD *)(v39 + 4) = 47;
            uint64_t v49 = v39 + 6;
            uint64_t v54 = v8;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v54, (char *)(v39 + 6));
            uint64_t v50 = v54;
            if (v54) {
              uint64_t v50 = *(unsigned int *)(v54 + 4);
            }
            uint64_t v55 = v22;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v55, (char *)(v49 + 2 * v50));
            goto LABEL_81;
          }
        }
LABEL_105:
        __break(0xC471u);
        JUMPOUT(0x1992E4FB0);
      }
      goto LABEL_61;
    }
  }
  else if (!v22)
  {
    if (!v30) {
      goto LABEL_59;
    }
    uint64_t v32 = v30;
    if ((v30 & 0x80000000) != 0) {
      goto LABEL_105;
    }
    goto LABEL_63;
  }
  uint64_t v32 = v30;
  BOOL v33 = v30 == 0;
  if ((*(unsigned char *)(v22 + 16) & 4) == 0) {
    goto LABEL_58;
  }
LABEL_61:
  if (v33) {
    goto LABEL_59;
  }
  if ((v30 & 0x80000000) != 0) {
    goto LABEL_105;
  }
LABEL_63:
  WTF::tryFastCompactMalloc((WTF *)(v32 + 20));
  uint64_t v34 = v55;
  if (!v55) {
    goto LABEL_105;
  }
  long long v35 = (char *)(v55 + 20);
  *(_DWORD *)uint64_t v55 = 2;
  *(_DWORD *)(v34 + 4) = v30;
  *(void *)(v34 + 8) = v34 + 20;
  *(_DWORD *)(v34 + 16) = 4;
  if (v25)
  {
    if (v25 == 1) {
      *long long v35 = *v9;
    }
    else {
      memcpy((void *)(v34 + 20), v9, v25);
    }
  }
  long long v36 = &v35[v25];
  v36[2] = 47;
  *(_WORD *)long long v36 = 12090;
  uint64_t v54 = v8;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v54, &v35[v25 + 3]);
  uint64_t v37 = v54;
  if (v54) {
    uint64_t v37 = *(unsigned int *)(v54 + 4);
  }
  uint64_t v55 = v22;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v55, &v35[v25 + 3 + v37]);
LABEL_81:
  long long v53 = (WTF::StringImpl *)v34;
  MEMORY[0x19972E890](this, &v53, 0);
  uint64_t result = v53;
  long long v53 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v51);
      if (!v22) {
        goto LABEL_89;
      }
      goto LABEL_87;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v22)
  {
LABEL_89:
    if (!v8) {
      goto LABEL_94;
    }
    goto LABEL_92;
  }
LABEL_87:
  if (*(_DWORD *)v22 != 2)
  {
    *(_DWORD *)v22 -= 2;
    goto LABEL_89;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v22, v51);
  if (!v8) {
    goto LABEL_94;
  }
LABEL_92:
  if (*(_DWORD *)v8 == 2)
  {
    uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v8, v51);
    if (v11) {
      return result;
    }
    goto LABEL_97;
  }
  *(_DWORD *)v8 -= 2;
LABEL_94:
  if (v11) {
    return result;
  }
LABEL_97:
  if (*(_DWORD *)v8 == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v8, v51);
  }
  *(_DWORD *)v8 -= 2;
  return result;
}

void sub_1992E4FD8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(_DWORD *)v11 == 2) {
    WTF::StringImpl::destroy(v11, a2);
  }
  else {
    *(_DWORD *)v11 -= 2;
  }
  if (*(_DWORD *)v10 == 2) {
    WTF::StringImpl::destroy(v10, a2);
  }
  else {
    *(_DWORD *)v10 -= 2;
  }
  if (*(_DWORD *)v10 == 2) {
    WTF::StringImpl::destroy(v10, a2);
  }
  else {
    *(_DWORD *)v10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::cookiesRemove(uint64_t a1, const void *a2, char a3, WTF::StringImpl **a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::WebExtensionContext::websiteDataStore(a1, a2, a3);
  if (v10)
  {
    int v12 = v10;
    CFRetain(v10[1]);
    BOOL v13 = *(WTF::StringImpl **)a5;
    if (*(void *)a5) {
      *(_DWORD *)v13 += 2;
    }
    long long v35 = v13;
    long long v14 = *(_OWORD *)(a5 + 24);
    v36[0] = *(_OWORD *)(a5 + 8);
    v36[1] = v14;
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v34, (uint64_t)&v35, 1uLL);
    BOOL v33 = 0;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    CFRetain(v12[1]);
    uint64_t v15 = *a4;
    if (v15) {
      *(_DWORD *)v15 += 2;
    }
    uint64_t v16 = (_OWORD *)(a5 + 8);
    unsigned int v17 = *(WTF::StringImpl **)a5;
    if (v17) {
      *(_DWORD *)v17 += 2;
    }
    long long v18 = v16[1];
    *(_OWORD *)unsigned int v30 = *v16;
    long long v31 = v18;
    uint64_t v19 = *a6;
    *a6 = 0;
    uint64_t v20 = WTF::fastMalloc((WTF *)0x58);
    *(void *)uint64_t v20 = &unk_1EE9FDB38;
    *(void *)(v20 + 8) = a1;
    *(void *)(v20 + 16) = a1;
    *(void *)(v20 + 24) = v12;
    if (v15) {
      *(_DWORD *)v15 += 2;
    }
    *(void *)(v20 + 32) = v15;
    if (v17) {
      *(_DWORD *)v17 += 2;
    }
    *(void *)(v20 + 40) = v17;
    long long v21 = v31;
    *(_OWORD *)(v20 + 48) = *(_OWORD *)v30;
    *(_OWORD *)(v20 + 64) = v21;
    *(void *)(v20 + 80) = v19;
    uint64_t v32 = v20;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v34, &v33, &v32, 1, 1);
    uint64_t v23 = v32;
    uint64_t v32 = 0;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v22);
        if (!v15)
        {
LABEL_23:
          size_t v24 = v33;
          BOOL v33 = 0;
          if (v24) {
            WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v24);
          }
          WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v22);
          int v26 = v35;
          long long v35 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2) {
              WTF::StringImpl::destroy(v26, v25);
            }
            else {
              *(_DWORD *)v26 -= 2;
            }
          }
          CFRelease(v12[1]);
          return;
        }
LABEL_20:
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v22);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
        goto LABEL_23;
      }
      *(_DWORD *)v17 -= 2;
    }
    if (!v15) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  WebKit::toWebExtensionError<>((WebKit *)@"cookies.remove()", 0, &cfstr_CookieStoreNot.isa, v11, v30);
  int v27 = v30[0];
  v30[0] = 0;
  *(void *)&v36[0] = v27;
  int v37 = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)>::operator()(a6);
  if (v37 != -1) {
    ((void (*)(uint64_t *, _OWORD *))off_1EE9FDA18[v37])(v34, v36);
  }
  int v37 = -1;
  int v29 = v30[0];
  v30[0] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v28);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
}

void sub_1992E53A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39)
{
  if (a39 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FDA18[a39])(&a16, v39);
  }
  a39 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::cookiesGetAllCookieStores(uint64_t a1, uint64_t *a2)
{
  uint64_t v60 = 0;
  uint64_t v4 = *(void *)(*(void *)(a1 + 72) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFTypeRef v6 = WebKit::WebExtensionControllerConfiguration::defaultWebsiteDataStore(*(WebKit::WebExtensionControllerConfiguration **)(v5 + 40))[3];
  WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(&v60, 0);
  uint64_t v8 = v60;
  if (v60) {
    int v9 = *(_DWORD *)(v60 - 8);
  }
  else {
    int v9 = 0;
  }
  unint64_t v10 = ((unint64_t)v6 + ~((void)v6 << 32)) ^ (((unint64_t)v6 + ~((void)v6 << 32)) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v9 & ((v12 >> 31) ^ v12);
  uint64_t v14 = v60 + 24 * v13;
  CFTypeRef v15 = *(CFTypeRef *)v14;
  if (!*(void *)v14)
  {
LABEL_15:
    *(void *)uint64_t v14 = v6;
    long long v18 = *(WTF **)(v14 + 8);
    if (v18)
    {
      *(void *)(v14 + 8) = 0;
      *(_DWORD *)(v14 + 16) = 0;
      WTF::fastFree(v18, v7);
    }
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = 0;
    if (v60) {
      int v19 = *(_DWORD *)(v60 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v60 - 12) = v19;
    if (v60) {
      int v21 = *(_DWORD *)(v60 - 12);
    }
    else {
      int v21 = 0;
    }
    uint64_t v22 = (*(_DWORD *)(v60 - 16) + v21);
    unint64_t v23 = *(unsigned int *)(v60 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22) {
        goto LABEL_29;
      }
    }
    else if (3 * v23 > 4 * v22)
    {
      goto LABEL_29;
    }
    WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(&v60, v14);
    goto LABEL_29;
  }
  uint64_t v16 = 0;
  int v17 = 1;
  while (v15 != v6)
  {
    if (v15 == (CFTypeRef)-1) {
      uint64_t v16 = (void *)v14;
    }
    unsigned int v13 = (v13 + v17) & v9;
    uint64_t v14 = v60 + 24 * v13;
    CFTypeRef v15 = *(CFTypeRef *)v14;
    ++v17;
    if (!*(void *)v14)
    {
      if (v16)
      {
        void *v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
        --*(_DWORD *)(v8 - 16);
        uint64_t v14 = (uint64_t)v16;
      }
      goto LABEL_15;
    }
  }
  uint64_t v20 = *(WTF **)(v14 + 8);
  if (v20)
  {
    *(void *)(v14 + 8) = 0;
    *(_DWORD *)(v14 + 16) = 0;
    WTF::fastFree(v20, v7);
  }
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 16) = 0;
LABEL_29:
  WebKit::WebExtensionContext::openTabs(a1, 0, (uint64_t)&v57);
  if (v59)
  {
    size_t v25 = v57;
    int v26 = &v57[v59];
    while (1)
    {
      int v27 = *v25;
      *(_DWORD *)int v27 = *(_DWORD *)*v25 + 1;
      int v28 = WebKit::WebExtensionTab::webView(v27);
      int v29 = v28;
      if (v28) {
        break;
      }
LABEL_58:

      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v27);
      if (++v25 == v26) {
        goto LABEL_63;
      }
    }
    unsigned int v30 = [v28 configuration];
    long long v31 = [v30 websiteDataStore];
    uint64_t v32 = v31[4];

    uint64_t v34 = v60;
    if (v60
      || (WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(&v60, 0), (uint64_t v34 = v60) != 0))
    {
      int v35 = *(_DWORD *)(v34 - 8);
    }
    else
    {
      int v35 = 0;
    }
    unint64_t v36 = (v32 + ~(v32 << 32)) ^ ((unint64_t)(v32 + ~(v32 << 32)) >> 22);
    unint64_t v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
    unint64_t v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
    unsigned int v39 = v35 & ((v38 >> 31) ^ v38);
    uint64_t v40 = (void *)(v34 + 24 * v39);
    uint64_t v41 = *v40;
    if (*v40)
    {
      int8x16_t v42 = 0;
      int v43 = 1;
      while (v41 != v32)
      {
        if (v41 == -1) {
          int8x16_t v42 = v40;
        }
        unsigned int v39 = (v39 + v43) & v35;
        uint64_t v40 = (void *)(v34 + 24 * v39);
        uint64_t v41 = *v40;
        ++v43;
        if (!*v40)
        {
          if (v42)
          {
            *int8x16_t v42 = 0;
            v42[1] = 0;
            void v42[2] = 0;
            --*(_DWORD *)(v34 - 16);
            uint64_t v40 = v42;
          }
          goto LABEL_43;
        }
      }
      goto LABEL_54;
    }
LABEL_43:
    *uint64_t v40 = v32;
    long long v44 = (WTF *)v40[1];
    if (v44)
    {
      v40[1] = 0;
      *((_DWORD *)v40 + 4) = 0;
      WTF::fastFree(v44, v33);
    }
    v40[1] = 0;
    uint64_t v40[2] = 0;
    if (v60) {
      int v45 = *(_DWORD *)(v60 - 12) + 1;
    }
    else {
      int v45 = 1;
    }
    *(_DWORD *)(v60 - 12) = v45;
    if (v60) {
      int v46 = *(_DWORD *)(v60 - 12);
    }
    else {
      int v46 = 0;
    }
    uint64_t v47 = (*(_DWORD *)(v60 - 16) + v46);
    unint64_t v48 = *(unsigned int *)(v60 - 4);
    if (v48 > 0x400)
    {
      if (v48 > 2 * v47) {
        goto LABEL_54;
      }
    }
    else if (3 * v48 > 4 * v47)
    {
LABEL_54:
      uint64_t v49 = v40 + 1;
      uint64_t v50 = *((void *)v27 + 2);
      uint64_t v56 = v50;
      uint64_t v51 = *((unsigned int *)v40 + 5);
      if (v51 == *((_DWORD *)v40 + 4)) {
        *(void *)(v40[1] + 8 * *((unsigned int *)v40 + 5)) = *(void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v51 + 1, (unint64_t)&v56);
      }
      else {
        *(void *)(*v49 + 8 * v51) = v50;
      }
      ++*((_DWORD *)v40 + 5);
      goto LABEL_58;
    }
    uint64_t v40 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(&v60, (uint64_t)v40);
    goto LABEL_54;
  }
LABEL_63:
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v24);
  uint64_t v52 = v60;
  uint64_t v60 = 0;
  int8x16x2_t v57 = (WebKit::WebExtensionTab **)v52;
  int v58 = 0;
  uint64_t v53 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WebKit::WebExtensionTab ***))(*(void *)v53 + 16))(v53, &v57);
  (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  if (v58 != -1) {
    ((void (*)(uint64_t *, WebKit::WebExtensionTab ***))off_1EE9FDA28[v58])(&v56, &v57);
  }
  uint64_t result = v60;
  if (v60) {
    return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::deallocateTable(v60, v54);
  }
  return result;
}

void sub_1992E59BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, uint64_t a13)
{
  if (a13) {
    WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::deallocateTable(a13, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::WebExtensionContext::fireCookiesChangedEventIfNeeded(CFTypeRef *this)
{
  char v6 = 5;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v7, &v6, 1);
  CFRetain(this[1]);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v2 = &unk_1EE9FDBB0;
  v2[1] = this;
  v2[2] = this;
  uint64_t v5 = v2;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)this, &v7, (uint64_t *)&v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  if (v7) {
    return (void *)WTF::fastFree((WTF *)(v7 - 16), v3);
  }
  return result;
}

void sub_1992E5B30(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12) {
    WTF::fastFree((WTF *)(a12 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fetchCookies(WebKit::WebsiteDataStore &,WTF::URL const&,WebKit::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FDA48;
  uint64_t v2 = a1[11];
  a1[11] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 8));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 6));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 4));
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fetchCookies(WebKit::WebsiteDataStore &,WTF::URL const&,WebKit::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9FDA48;
  uint64_t v2 = *((void *)a1 + 11);
  *((void *)a1 + 11) = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 64);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 48);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 32);
  uint64_t v4 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(a1, v3);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fetchCookies(WebKit::WebsiteDataStore &,WTF::URL const&,WebKit::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  unsigned int v4 = *((_DWORD *)a2 + 3);
  if (v4)
  {
    if (v4 >= 0x1AF286C)
    {
      __break(0xC471u);
LABEL_51:
      JUMPOUT(0x1992E6118);
    }
    LODWORD(v36) = 152 * v4 / 0x98;
    uint64_t v35 = WTF::fastMalloc((WTF *)(152 * v4));
    uint64_t v7 = *((unsigned int *)a2 + 3);
    if (v7)
    {
      uint64_t v8 = *a2;
      for (uint64_t i = 136 * v7; i; i -= 136)
      {
        if (!*(unsigned char *)(a1 + 40) || WTF::equal(*(WTF **)v8, *(const WTF::StringImpl **)(a1 + 32), v6))
        {
          if (!*(unsigned char *)(a1 + 56)) {
            goto LABEL_25;
          }
          uint64_t v10 = *(void *)(v8 + 16);
          if (v10)
          {
            unint64_t v11 = *(unsigned int *)(v10 + 16);
            unint64_t v12 = *(StringImpl **)(v10 + 8);
            uint64_t v10 = *(unsigned int *)(v10 + 4);
            uint64_t v13 = (v11 >> 2) & 1;
          }
          else
          {
            unint64_t v12 = 0;
            uint64_t v13 = 1;
          }
          uint64_t v14 = *(void *)(a1 + 48);
          if (v14)
          {
            CFTypeRef v15 = *(unsigned __int8 **)(v14 + 8);
            unsigned int v16 = *(_DWORD *)(v14 + 4);
            unint64_t v17 = ((unint64_t)*(unsigned int *)(v14 + 16) >> 2) & 1;
          }
          else
          {
            CFTypeRef v15 = 0;
            unsigned int v16 = 0;
            unint64_t v17 = 1;
          }
          uint64_t v41 = v12;
          uint64_t v42 = v10 | (v13 << 32);
          v40.m_string.m_impl.m_ptr = v12;
          *((void *)&v40 + 1) = v42;
          long long v18 = (unsigned __int8 *)(v16 | (v17 << 32));
          v43[0] = v15;
          v43[1] = v18;
          if (WTF::equalIgnoringASCIICaseCommon<WTF::StringView,WTF::StringView>((unsigned __int16 **)&v40, v43))
          {
LABEL_25:
            if ((!*(unsigned char *)(a1 + 72)
               || WTF::equal(*(WTF **)(v8 + 24), *(const WTF::StringImpl **)(a1 + 64), v6))
              && (!*(unsigned char *)(a1 + 81) || *(unsigned __int8 *)(v8 + 57) == *(unsigned __int8 *)(a1 + 80))
              && (!*(unsigned char *)(a1 + 83) || *(unsigned __int8 *)(v8 + 58) == *(unsigned __int8 *)(a1 + 82)))
            {
              WebKit::toURL((WebKit *)&v40, (const WebCore::Cookie *)v8);
              int v26 = WebKit::WebExtensionContext::permissionState(v3, &v40, 0, 3);
              m_ptr = v40.m_string.m_impl.m_ptr;
              v40.m_string.m_impl.m_ptr = 0;
              if (m_ptr)
              {
                if (*(_DWORD *)m_ptr == 2) {
                  WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v25);
                }
                else {
                  *(_DWORD *)m_ptr -= 2;
                }
              }
              if ((v26 & 0xFFFFFFFE) == 2)
              {
                v40.m_string.m_impl.m_ptr = *(StringImpl **)(*(void *)(a1 + 88) + 24);
                *((unsigned char *)&v40 + 8) = 1;
                WebCore::Cookie::Cookie((WebCore::Cookie *)&v40.m_userEnd, (const WebCore::Cookie *)v8);
                long long v37 = *(_OWORD *)&v40.m_string.m_impl.m_ptr;
                WebCore::Cookie::Cookie((uint64_t)v38, (uint64_t *)&v40.m_userEnd);
                char v39 = 1;
                WebCore::Cookie::~Cookie((WebCore::Cookie *)&v40.m_userEnd, v28);
                if (v39)
                {
                  *(_OWORD *)&v40.m_string.m_impl.m_ptr = v37;
                  WebCore::Cookie::Cookie((uint64_t)&v40.m_userEnd, v38);
                  if (HIDWORD(v36) == v36)
                  {
                    WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionCookieParameters>((uint64_t)&v35, (unint64_t)&v40);
                  }
                  else
                  {
                    unsigned int v30 = (_OWORD *)(v35 + 152 * HIDWORD(v36));
                    *unsigned int v30 = *(_OWORD *)&v40.m_string.m_impl.m_ptr;
                    WebCore::Cookie::Cookie((uint64_t)(v30 + 1), (uint64_t *)&v40.m_userEnd);
                    ++HIDWORD(v36);
                  }
                  WebCore::Cookie::~Cookie((WebCore::Cookie *)&v40.m_userEnd, v29);
                  if (v39) {
                    WebCore::Cookie::~Cookie((WebCore::Cookie *)v38, v31);
                  }
                }
              }
            }
            goto LABEL_42;
          }
          if ((v16 & 0x80000000) != 0 || (BOOL v19 = __OFADD__(v16, 1), v20 = v16 + 1, v19))
          {
LABEL_49:
            __break(0xC471u);
            goto LABEL_51;
          }
          if (v17)
          {
            WTF::tryFastCompactMalloc((WTF *)(v20 + 20));
            int v21 = v40.m_string.m_impl.m_ptr;
            if (!v40.m_string.m_impl.m_ptr) {
              goto LABEL_49;
            }
            *((unsigned char *)v40.m_string.m_impl.m_ptr + 20) = 46;
            *(_DWORD *)int v21 = 2;
            *((_DWORD *)v21 + 1) = v20;
            *((void *)v21 + 1) = (char *)v21 + 20;
            *((_DWORD *)v21 + 4) = 4;
            v40.m_string.m_impl.m_ptr = (StringImpl *)v15;
            *((void *)&v40 + 1) = v18;
            WTF::StringView::getCharacters<unsigned char>(&v40, (char *)v21 + 21);
          }
          else
          {
            if (v20 > 0x7FFFFFEF) {
              goto LABEL_49;
            }
            WTF::tryFastCompactMalloc((WTF *)(2 * v20 + 20));
            int v21 = v40.m_string.m_impl.m_ptr;
            if (!v40.m_string.m_impl.m_ptr) {
              goto LABEL_49;
            }
            *((_WORD *)v40.m_string.m_impl.m_ptr + 10) = 46;
            *(_DWORD *)int v21 = 2;
            *((_DWORD *)v21 + 1) = v20;
            *((void *)v21 + 1) = (char *)v21 + 20;
            *((_DWORD *)v21 + 4) = 0;
            v40.m_string.m_impl.m_ptr = (StringImpl *)v15;
            *((void *)&v40 + 1) = v18;
            WTF::StringTypeAdapter<WTF::StringView,void>::writeTo<char16_t>(&v40, (char *)v21 + 22);
          }
          int v22 = WTF::StringView::endsWith();
          int v24 = v22;
          if (*(_DWORD *)v21 == 2)
          {
            WTF::StringImpl::destroy((WTF::StringImpl *)v21, v23);
            if (v24) {
              goto LABEL_25;
            }
          }
          else
          {
            *(_DWORD *)v21 -= 2;
            if (v22) {
              goto LABEL_25;
            }
          }
        }
LABEL_42:
        v8 += 136;
      }
    }
  }
  WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v35, HIDWORD(v36));
  *(void *)&long long v37 = v35;
  uint64_t v32 = v36;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  *((void *)&v37 + 1) = v32;
  LODWORD(v38[0]) = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 24));
  if (LODWORD(v38[0]) != -1) {
    ((void (*)(URL *, long long *))off_1EE9FDA08[LODWORD(v38[0])])(&v40, &v37);
  }
  return WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v35, v33);
}

void sub_1992E6124(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31)
{
  WebCore::Cookie::~Cookie(v32, a2);
  if (a30) {
    WebCore::Cookie::~Cookie(v31, v34);
  }
  WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&a9, v34);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesGet(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FDA70;
  WebKit::WebExtensionContext::cookiesGet(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0::~$_0(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesGet(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9FDA70;
  WebKit::WebExtensionContext::cookiesGet(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0::~$_0((void *)a1 + 1);

  return WTF::fastFree(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesGet(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (CFTypeRef *)a1[3];
  uint64_t v4 = a1[17];
  a1[17] = 0;
  if (v3) {
    CFRetain(v3[1]);
  }
  uint64_t v5 = (WTF::StringImpl *)a1[4];
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  char v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v6 = &unk_1EE9FDA98;
  v6[1] = v4;
  v6[2] = v3;
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  v6[3] = v5;
  int v9 = v6;
  WebKit::WebExtensionContext::fetchCookies(v2, v3, (uint64_t)(a1 + 5), (uint64_t)(a1 + 10), (uint64_t *)&v9);
  uint64_t result = (uint64_t)v9;
  if (v9) {
    uint64_t result = (*(uint64_t (**)(void *))(*v9 + 8))(v9);
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      return WTF::StringImpl::destroy(v5, v7);
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  return result;
}

void sub_1992E63B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext10cookiesGetENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_vJS1B_EED1Ev(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FDA98;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext10cookiesGetENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_vJS1B_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FDA98;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext10cookiesGetENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_vJS1B_EE4callES1B_(uint64_t a1, long long **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)(a1 + 8);
  int v4 = *((_DWORD *)a2 + 4);
  if (v4)
  {
    if (v4 != 1)
    {
      uint64_t v8 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      if (v15 != -1) {
        ((void (*)(long long *, uint64_t))off_1EE9FDA18[v15])(&v9, v2);
      }
      _Unwind_Resume(v8);
    }
    uint64_t v5 = (uint64_t *)*a2;
    if (*a2) {
      *(_DWORD *)v5 += 2;
    }
    v13[0] = v5;
    int v15 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 8));
    goto LABEL_6;
  }
  if (!*((_DWORD *)a2 + 3))
  {
    LOBYTE(v13[0]) = 0;
    char v14 = 0;
    int v15 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 8));
LABEL_6:
    ((void (*)(long long *, void *))off_1EE9FDA18[v15])(&v9, v13);
    return;
  }
  char v6 = (uint64_t *)*a2;
  long long v9 = **a2;
  WebCore::Cookie::Cookie((uint64_t)v10, v6 + 2);
  char v11 = 1;
  std::__optional_move_base<WebKit::WebExtensionCookieParameters,false>::__optional_move_base[abi:sn180100](v13, (uint64_t)&v9);
  int v15 = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)>::operator()(v3);
  if (v15 != -1) {
    ((void (*)(char *, void *))off_1EE9FDA18[v15])(&v12, v13);
  }
  int v15 = -1;
  if (v11) {
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v10, v7);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesGetAll(std::optional<PAL::SessionID>,WTF::URL const&,WebKit::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FDAC0;
  uint64_t v2 = a1[16];
  a1[16] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 13));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 11));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 9));
  int v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[3];
  a1[3] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t v6 = a1[2];
  a1[2] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesGetAll(std::optional<PAL::SessionID>,WTF::URL const&,WebKit::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1)
{
  uint64_t v1 = (WTF *)WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesGetAll(std::optional<PAL::SessionID>,WTF::URL const&,WebKit::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(a1);

  return WTF::fastFree(v1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesGetAll(std::optional<PAL::SessionID>,WTF::URL const&,WebKit::WebExtensionCookieFilterParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9FDAE8;
  uint64_t v3 = a1[28];
  a1[28] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebCore::Cookie::~Cookie((WebCore::Cookie *)(a1 + 11), a2);
  uint64_t v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[3];
  a1[3] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  uint64_t v7 = a1[2];
  a1[2] = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9FDAE8;
  uint64_t v3 = a1[28];
  a1[28] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebCore::Cookie::~Cookie((WebCore::Cookie *)(a1 + 11), a2);
  uint64_t v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[3];
  a1[3] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  uint64_t v7 = a1[2];
  a1[2] = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }

  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::cookiesSet(std::optional<PAL::SessionID>,WebKit::WebExtensionCookieParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if ((WebKit::WebExtensionContext::permissionState(*(void *)(a1 + 8), (URL *)(a1 + 32), 0, 3) & 0xFFFFFFFE) == 2)
  {
    uint64_t v3 = WebKit::WebsiteDataStore::cookieStore(*(WebKit::WebsiteDataStore **)(a1 + 24));
    WebCore::Cookie::Cookie((WebCore::Cookie *)v17, (const WebCore::Cookie *)(a1 + 88));
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v16, (const WebCore::Cookie *)v17, 1uLL);
    uint64_t v4 = *(void *)(a1 + 224);
    *(void *)(a1 + 224) = 0;
    uint64_t v5 = *(WTF::StringImpl **)(*(void *)(a1 + 24) + 24);
    uint64_t v18 = v4;
    BOOL v19 = v5;
    WebCore::Cookie::Cookie((WebCore::Cookie *)v20, (const WebCore::Cookie *)(a1 + 88));
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0xA0);
    void *v6 = &unk_1EE9FDB10;
    uint64_t v7 = v18;
    uint64_t v18 = 0;
    v6[1] = v7;
    v6[2] = v19;
    WebCore::Cookie::Cookie((uint64_t)(v6 + 3), v20);
    int v15 = v6;
    API::HTTPCookieStore::setCookies((uint64_t)v3, v16, (uint64_t *)&v15);
    if (v15) {
      (*(void (**)(void *))(*v15 + 8))(v15);
    }
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v20, v8);
    uint64_t v10 = v18;
    uint64_t v18 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v9);
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v17, v11);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"cookies.set()", 0, &cfstr_HostPermission_0.isa, v2, v17);
    char v12 = v17[0];
    v17[0] = 0;
    BOOL v19 = v12;
    int v21 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 224));
    if (v21 != -1) {
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1EE9FDA18[v21])(v16, &v19);
    }
    int v21 = -1;
    char v14 = v17[0];
    v17[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
}

void sub_1992E6CB0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51)
{
  if (a51 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FDA18[a51])(&a11, v51);
  }
  a51 = -1;
  uint64_t v53 = a13;
  a13 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2) {
      WTF::StringImpl::destroy(v53, a2);
    }
    else {
      *(_DWORD *)v53 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext10cookiesSetENSt3__18optionalIN3PAL9SessionIDEEERKNS2_28WebExtensionCookieParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_IS9_EENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISQ_EENS_10HashTraitsISQ_EENS_15HashTableTraitsEEESW_NS_8WallTimeEEEDaOT_OT0_T1_EUlvE_vJEED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9FDB10;
  WebCore::Cookie::~Cookie((WebCore::Cookie *)(a1 + 3), a2);
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext10cookiesSetENSt3__18optionalIN3PAL9SessionIDEEERKNS2_28WebExtensionCookieParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_IS9_EENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISQ_EENS_10HashTraitsISQ_EENS_15HashTableTraitsEEESW_NS_8WallTimeEEEDaOT_OT0_T1_EUlvE_vJEED0Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9FDB10;
  WebCore::Cookie::~Cookie((WebCore::Cookie *)(a1 + 3), a2);
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext10cookiesSetENSt3__18optionalIN3PAL9SessionIDEEERKNS2_28WebExtensionCookieParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_IS9_EENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISQ_EENS_10HashTraitsISQ_EENS_15HashTableTraitsEEESW_NS_8WallTimeEEEDaOT_OT0_T1_EUlvE_vJEE4callEv(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v3 = a1[2];
  BYTE8(v3) = 1;
  WebCore::Cookie::Cookie((uint64_t)v4, a1 + 3);
  long long v5 = v3;
  WebCore::Cookie::Cookie((uint64_t)v6, v4);
  char v7 = 1;
  std::__optional_move_base<WebKit::WebExtensionCookieParameters,false>::__optional_move_base[abi:sn180100](v9, (uint64_t)&v5);
  int v10 = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)>::operator()(a1 + 1);
  if (v10 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9FDA18[v10])(&v8, v9);
  }
  int v10 = -1;
  if (v7) {
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v6, v2);
  }
  WebCore::Cookie::~Cookie((WebCore::Cookie *)v4, v2);
}

void sub_1992E6FC4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v53 = *(unsigned int *)(v51 - 64);
  if (v53 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE9FDA18[v53])(v51 - 233, v50);
  }
  *(_DWORD *)(v51 - 64) = -1;
  if (a48) {
    WebCore::Cookie::~Cookie(v49, a2);
  }
  WebCore::Cookie::~Cookie(v48, a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesRemove(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FDB38;
  uint64_t v3 = a1[10];
  a1[10] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  long long v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[3];
  a1[3] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  uint64_t v7 = a1[2];
  a1[2] = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesRemove(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FDB38;
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  long long v5 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::cookiesRemove(std::optional<PAL::SessionID>,WTF::String const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = a1 + 40;
  if ((WebKit::WebExtensionContext::permissionState(v2, (URL *)(a1 + 40), 0, 3) & 0xFFFFFFFE) == 2)
  {
    LOBYTE(v13) = 0;
    LOBYTE(v14) = 0;
    LOBYTE(v15) = 0;
    char v16 = 0;
    LOBYTE(v17) = 0;
    char v18 = 0;
    int v19 = 0;
    std::optional<WTF::String>::operator=[abi:sn180100]<WTF::String const&,void>((uint64_t)&v13, (WTF::StringImpl **)(a1 + 32));
    long long v5 = *(CFTypeRef **)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = 0;
    if (v5) {
      CFRetain(v5[1]);
    }
    uint64_t v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v7 = &unk_1EE9FDB60;
    *((void *)v7 + 1) = v6;
    *((void *)v7 + 2) = v5;
    uint64_t v11 = v7;
    WebKit::WebExtensionContext::fetchCookies(v2, v5, v3, (uint64_t)&v13, (uint64_t *)&v11);
    uint64_t result = v11;
    if (v11) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)v11 + 8))(v11);
    }
    if (v18)
    {
      uint64_t result = v17;
      unint64_t v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    if (v16)
    {
      uint64_t result = v15;
      int v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    if ((_BYTE)v14)
    {
      uint64_t result = v13;
      uint64_t v13 = 0;
      if (result)
      {
LABEL_22:
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"cookies.remove()", 0, &cfstr_HostPermission_0.isa, v4, &v11);
    uint64_t v10 = (uint64_t)v11;
    uint64_t v11 = 0;
    uint64_t v14 = v10;
    int v20 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 80));
    if (v20 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9FDA18[v20])(&v12, &v14);
    }
    int v20 = -1;
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result) {
      goto LABEL_22;
    }
  }
  return result;
}

void sub_1992E743C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, WTF::StringImpl *a15, char a16, WTF::StringImpl *a17, char a18, WTF::StringImpl *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext13cookiesRemoveENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_vJS1B_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9FDB60;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext13cookiesRemoveENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_vJS1B_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FDB60;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext13cookiesRemoveENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_vJS1B_EE4callES1B_(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)(a1 + 8);
  int v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    if (v4 != 1)
    {
      int v15 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      if (v21 != -1) {
        ((void (*)(uint64_t *, uint64_t))off_1EE9FDA18[v21])(&v16, a1);
      }
      _Unwind_Resume(v15);
    }
    long long v5 = *(long long **)a2;
    if (*(void *)a2) {
      *(_DWORD *)v5 += 2;
    }
    *(void *)&long long v18 = v5;
    int v21 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)>::operator()(v3);
    return ((uint64_t (*)(uint64_t *, long long *))off_1EE9FDA18[v21])(&v16, &v18);
  }
  if (!*(_DWORD *)(a2 + 12))
  {
    LOBYTE(v18) = 0;
    char v20 = 0;
    int v21 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)>::operator()(v3);
    return ((uint64_t (*)(uint64_t *, long long *))off_1EE9FDA18[v21])(&v16, &v18);
  }
  uint64_t v7 = *(long long **)a2;
  char v8 = WebKit::WebsiteDataStore::cookieStore(*(WebKit::WebsiteDataStore **)(a1 + 16));
  uint64_t v9 = (uint64_t)(v7 + 1);
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = v10;
  long long v18 = *v7;
  WebCore::Cookie::Cookie((WebCore::Cookie *)v19, (const WebCore::Cookie *)(v7 + 1));
  uint64_t v11 = WTF::fastMalloc((WTF *)0xA8);
  *(void *)uint64_t v11 = &unk_1EE9FDB88;
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  *(void *)(v11 + 8) = v12;
  *(_OWORD *)(v11 + 16) = v18;
  WebCore::Cookie::Cookie(v11 + 32, v19);
  uint64_t v16 = v11;
  API::HTTPCookieStore::deleteCookie((uint64_t)v8, v9, &v16);
  uint64_t v14 = v16;
  uint64_t v16 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  WebCore::Cookie::~Cookie((WebCore::Cookie *)v19, v13);
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit19WebExtensionContext13cookiesRemoveENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_ENUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_clES1B_EUlvE_vJEED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9FDB88;
  WebCore::Cookie::~Cookie((WebCore::Cookie *)(a1 + 4), a2);
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit19WebExtensionContext13cookiesRemoveENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_ENUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_clES1B_EUlvE_vJEED0Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9FDB88;
  WebCore::Cookie::~Cookie((WebCore::Cookie *)(a1 + 4), a2);
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

void _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit19WebExtensionContext13cookiesRemoveENSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS5_INS2_28WebExtensionCookieParametersEEES9_EEEEEEN3__0clINS_7HashSetISC_NS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_ENUlONSI_INS_6VectorISJ_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEES9_EEE_clES1B_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  long long v3 = *(_OWORD *)(a1 + 16);
  WebCore::Cookie::Cookie((uint64_t)v4, (uint64_t *)(a1 + 32));
  char v5 = 1;
  std::__optional_move_base<WebKit::WebExtensionCookieParameters,false>::__optional_move_base[abi:sn180100](v7, (uint64_t)&v3);
  int v8 = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 8));
  if (v8 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9FDA18[v8])(&v6, v7);
  }
  int v8 = -1;
  if (v5) {
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v4, v2);
  }
}

void sub_1992E7B40(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,int a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55)
{
  if (a55 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FDA18[a55])(&a33, v56);
  }
  a55 = -1;
  if (a28) {
    WebCore::Cookie::~Cookie(v55, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      uint64_t *v4 = 0;
      if (v6) {
        WTF::RefCounted<WebKit::WebExtensionTab>::deref(v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCookiesChangedEventIfNeeded(void)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FDBB0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCookiesChangedEventIfNeeded(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FDBB0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireCookiesChangedEventIfNeeded(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  WebKit::WebExtensionContext::processes(v1, 5, 0, (uint64_t *)&v16);
  uint64_t v3 = v1[9];
  if (v3 && *(void *)(v3 + 8))
  {
    uint64_t v4 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v16);
    uint64_t v5 = v4;
    uint64_t v6 = v2;
    uint64_t v7 = v16 ? &v16[*((unsigned int *)v16 - 1)] : 0;
    if (v7 != v4)
    {
      do
      {
        uint64_t v8 = *v5;
        uint64_t v9 = v1[4];
        uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v10 = 1603;
        *((void *)v10 + 1) = v9;
        *((void *)v10 + 66) = (char *)v10 + 16;
        *((void *)v10 + 67) = 512;
        *((void *)v10 + 68) = 0;
        *((void *)v10 + 70) = 0;
        *((void *)v10 + 69) = 0;
        IPC::Encoder::encodeHeader(v10);
        int v19 = v10;
        LOBYTE(v17) = 0;
        char v18 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v19, 0, (uint64_t)&v17, 1);
        if (v18)
        {
          uint64_t v11 = v17;
          uint64_t v17 = 0;
          if (v11) {
            (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
          }
        }
        uint64_t v12 = v19;
        int v19 = 0;
        if (v12)
        {
          IPC::Encoder::~Encoder(v12, v2);
          WTF::fastFree(v13, v14);
        }
        while (++v5 != v6)
        {
          if ((unint64_t)(*v5 + 1) > 1) {
            goto LABEL_16;
          }
        }
        uint64_t v5 = v6;
LABEL_16:
        ;
      }
      while (v5 != v7);
    }
  }
  uint64_t result = v16;
  if (v16) {
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v16, v2);
  }
  return result;
}

void sub_1992E7E4C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a10) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed(WebKit::WebExtensionContext *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (!v1 || !*(void *)(v1 + 8)) {
    return 0;
  }
  MEMORY[0x19972EAD0](&v9, @"declarativeNetRequest");
  if ((WebKit::WebExtensionContext::permissionState(this, &v9, 0, 2) & 0xFFFFFFFE) == 2)
  {
    BOOL v4 = 1;
  }
  else
  {
    MEMORY[0x19972EAD0](&v8, @"declarativeNetRequestWithHostAccess");
    BOOL v4 = (WebKit::WebExtensionContext::permissionState(this, &v8, 0, 2) & 0xFFFFFFFE) == 2;
    uint64_t v5 = v8;
    uint64_t v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  uint64_t v6 = v9;
  uint64_t v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return v4;
}

void sub_1992E7FBC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::declarativeNetRequestGetEnabledRulesets(uint64_t a1, uint64_t *a2)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v3 = (void *)(a1 + 672);
  BOOL v4 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 672));
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  if (*v3) {
    uint64_t v8 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  if ((void *)v8 != v4)
  {
    do
    {
      uint64_t v9 = HIDWORD(v15);
      if (HIDWORD(v15) == v15)
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v14, (unint64_t)v5);
      }
      else
      {
        uint64_t v10 = v14;
        uint64_t v11 = (_DWORD *)*v5;
        if (*v5) {
          *v11 += 2;
        }
        *(void *)(v10 + 8 * v9) = v11;
        HIDWORD(v15) = v9 + 1;
      }
      while (++v5 != v7)
      {
        if ((unint64_t)(*v5 + 1) > 1) {
          goto LABEL_13;
        }
      }
      uint64_t v5 = v7;
LABEL_13:
      ;
    }
    while (v5 != (void *)v8);
  }
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a2);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v12);
}

void sub_1992E8104(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void WebKit::WebExtensionContext::loadDeclarativeNetRequestRulesetStateFromStorage(WebKit::WebExtensionContext *this, WTF::StringImpl *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)((char *)this + 672);
  BOOL v4 = (WTF::StringImpl **)*((void *)this + 84);
  if (v4)
  {
    uint64_t *v3 = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = WTF::RetainPtr<__IOHIDDevice *>::get();
  WTF::RetainPtr<NSDictionary>::RetainPtr(cf, v5);

  uint64_t v6 = WebKit::objectForKey<NSDictionary>((id *)cf, @"DeclarativeNetRequestRulesetState", 1, 0);
  CFTypeRef v7 = cf[0];
  cf[0] = 0;
  if (v7) {
    CFRelease(v7);
  }
  if ([v6 count])
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v8 = v6;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v33 objects:v37 count:16];
    if (!v9) {
      goto LABEL_32;
    }
    uint64_t v10 = *(void *)v34;
    while (1)
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v34 != v10) {
          objc_enumerationMutation(v8);
        }
        uint64_t v12 = *(void *)(*((void *)&v33 + 1) + 8 * v11);
        uint64_t v13 = (WebKit::WebExtension *)*((void *)this + 8);
        MEMORY[0x19972EAD0](v29, v12);
        WebKit::WebExtension::declarativeNetRequestRuleset(v13, v29, (uint64_t)cf);
        uint64_t v15 = v29[0];
        v29[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v14);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
        if (v32)
        {
          uint64_t v16 = WebKit::objectForKey<NSNumber>(v8, v12);
          int v17 = [v16 BOOLValue];

          if (v17)
          {
            MEMORY[0x19972EAD0](&v30, v12);
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v3, &v30, v18, (uint64_t)v29);
            int v19 = v30;
            unsigned int v30 = 0;
            if (!v19) {
              goto LABEL_27;
            }
            goto LABEL_24;
          }
          MEMORY[0x19972EAD0](v29, v12);
          int v21 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(v3, v29, v20);
          uint64_t v14 = (WTF::StringImpl *)v21;
          if (*v3)
          {
            uint64_t v22 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
            if ((WTF::StringImpl **)v22 != v21)
            {
LABEL_21:
              if ((WTF::StringImpl **)v22 != v21) {
                WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(v3, v21);
              }
            }
          }
          else if (v21)
          {
            uint64_t v22 = 0;
            goto LABEL_21;
          }
          int v19 = v29[0];
          v29[0] = 0;
          if (!v19) {
            goto LABEL_27;
          }
LABEL_24:
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v14);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
LABEL_27:
        std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)cf, v14);
        ++v11;
      }
      while (v9 != v11);
      uint64_t v23 = [v8 countByEnumeratingWithState:&v33 objects:v37 count:16];
      uint64_t v9 = v23;
      if (!v23)
      {
LABEL_32:

        goto LABEL_38;
      }
    }
  }
  uint64_t v24 = *((void *)this + 8);
  WebKit::WebExtension::populateDeclarativeNetRequestPropertiesIfNeeded((WebKit::WebExtension *)v24);
  uint64_t v26 = *(unsigned int *)(v24 + 84);
  if (v26)
  {
    uint64_t v27 = *(void *)(v24 + 72);
    uint64_t v28 = 24 * v26;
    do
    {
      if (*(unsigned char *)(v27 + 8)) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v3, (WTF::StringImpl **)v27, v25, (uint64_t)cf);
      }
      v27 += 24;
      v28 -= 24;
    }
    while (v28);
  }
LABEL_38:
}

void sub_1992E83FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  _Unwind_Resume(a1);
}

WTF::StringImpl **WebKit::WebExtensionContext::clearDeclarativeNetRequestRulesetState(WebKit::WebExtensionContext *this)
{
  uint64_t v2 = WTF::RetainPtr<__IOHIDDevice *>::get();
  [v2 removeObjectForKey:@"DeclarativeNetRequestRulesetState"];

  uint64_t result = (WTF::StringImpl **)*((void *)this + 84);
  if (result)
  {
    *((void *)this + 84) = 0;
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v3);
  }
  return result;
}

void sub_1992E8550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::declarativeNetRequestValidateRulesetIdentifiers(uint64_t a1, WebKit::WebExtension **a2, const WTF::StringImpl **a3, unsigned int a4)
{
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  if (a4)
  {
    uint64_t v7 = 8 * a4;
    while (1)
    {
      WebKit::WebExtension::declarativeNetRequestRuleset(a2[8], a3, (uint64_t)&v20);
      if (!v23) {
        break;
      }
      unsigned int v9 = HIDWORD(v25);
      if (HIDWORD(v25) == v25)
      {
        WTF::Vector<WebKit::WebExtension::DeclarativeNetRequestRulesetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::DeclarativeNetRequestRulesetData&>((uint64_t)&v24, (unint64_t)&v20);
      }
      else
      {
        uint64_t v10 = v24;
        uint64_t v11 = v20;
        if (v20) {
          *v20 += 2;
        }
        *(void *)(v10 + 24 * v9) = v11;
        *(unsigned char *)(v10 + 24 * v9 + 8) = v21;
        uint64_t v12 = v22;
        if (v22) {
          *v22 += 2;
        }
        *(void *)(v10 + 24 * v9 + 16) = v12;
        HIDWORD(v25) = v9 + 1;
      }
      std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v8);
      ++a3;
      v7 -= 8;
      if (!v7)
      {
        uint64_t v13 = v24;
        uint64_t v14 = v25;
        goto LABEL_14;
      }
    }
    if (*a3) {
      uint64_t v15 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v15 = &stru_1EEA10550;
    }
    char v18 = v15;
    WebKit::toWebExtensionError<NSString * {__strong}>((WebKit *)@"declarativeNetRequest.updateEnabledRulesets()", 0, &cfstr_FailedToApplyR.isa, (NSString *)&v18, &v19);
    *(void *)a1 = v19;
    *(_DWORD *)(a1 + 16) = 1;
    uint64_t v19 = 0;

    std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v16);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
LABEL_14:
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v14;
    *(_DWORD *)(a1 + 16) = 0;
  }
  return WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, a2);
}

void sub_1992E86E0(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);

  std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, v4);
  WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v5);
  _Unwind_Resume(a1);
}

void WebKit::toWebExtensionError<NSString * {__strong}>(WebKit *a1@<X0>, NSString *a2@<X1>, NSString *a3@<X2>, NSString *a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = WebKit::toErrorString(a1, a2, a3, a4, *a4);
  MEMORY[0x19972EAD0](&v7, v6);
  *a5 = v7;
  uint64_t v7 = 0;
}

void sub_1992E8770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::declarativeNetRequestToggleRulesets(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = *(unsigned int *)(a2 + 12);
  if (v8)
  {
    uint64_t v9 = *(const WTF::StringImpl ***)a2;
    uint64_t v10 = (void *)(a1 + 672);
    uint64_t v11 = 8 * v8;
    while (1)
    {
      WebKit::WebExtension::declarativeNetRequestRuleset(*(WebKit::WebExtension **)(a1 + 64), v9, (uint64_t)v19);
      if (v19[24]) {
        break;
      }
LABEL_13:
      std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v12);
      ++v9;
      v11 -= 8;
      if (!v11) {
        goto LABEL_18;
      }
    }
    if (a3)
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(a1 + 672), v9, v13, (uint64_t)v18);
LABEL_10:
      uint64_t v16 = [NSNumber numberWithBool:a3];
      if (*v9) {
        int v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        int v17 = &stru_1EEA10550;
      }
      [v7 setObject:v16 forKey:v17];

      goto LABEL_13;
    }
    uint64_t v14 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 672), v9, v13);
    if (*v10)
    {
      uint64_t v15 = *v10 + 8 * *(unsigned int *)(*v10 - 4);
      if ((WTF::StringImpl **)v15 == v14) {
        goto LABEL_10;
      }
    }
    else
    {
      if (!v14) {
        goto LABEL_10;
      }
      uint64_t v15 = 0;
    }
    if ((WTF::StringImpl **)v15 != v14) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(a1 + 672), v14);
    }
    goto LABEL_10;
  }
LABEL_18:
}

void sub_1992E88D0(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::declarativeNetRequestUpdateEnabledRulesets(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (!(v5 | *(_DWORD *)(a3 + 12)))
  {
    LOBYTE(v33) = 0;
    LOBYTE(v34) = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a4);
    return;
  }
  WebKit::WebExtensionContext::declarativeNetRequestValidateRulesetIdentifiers((uint64_t)v41, (WebKit::WebExtension **)a1, *(const WTF::StringImpl ***)a2, v5);
  if (!v42)
  {
    WebKit::WebExtensionContext::declarativeNetRequestValidateRulesetIdentifiers((uint64_t)v39, (WebKit::WebExtension **)a1, *(const WTF::StringImpl ***)a3, *(_DWORD *)(a3 + 12));
    if (v40)
    {
      if (v40 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_42;
      }
      uint64_t v13 = (WTF::StringImpl *)v39[0];
      if (v39[0]) {
        *(_DWORD *)v39[0] += 2;
      }
      long long v33 = v13;
      LOBYTE(v34) = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a4);
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 672);
      if (v15) {
        uint64_t v15 = *(unsigned int *)(v15 - 12);
      }
      if (v15 - *(unsigned int *)(a3 + 12) + (unint64_t)*(unsigned int *)(a2 + 12) < 0x33)
      {
        uint64_t v19 = [MEMORY[0x1E4F1CA60] dictionary];
        WebKit::WebExtensionContext::declarativeNetRequestToggleRulesets(a1, a3, 0, v19);
        WebKit::WebExtensionContext::declarativeNetRequestToggleRulesets(a1, a2, 1, v19);
        long long v33 = (WTF::StringImpl *)a1;
        CFRetain(*(CFTypeRef *)(a1 + 8));
        uint64_t v20 = *a4;
        *a4 = 0;
        uint64_t v34 = a1;
        uint64_t v35 = v20;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v36, a2);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v37, a3);
        id v21 = v19;
        uint64_t v22 = v21;
        CFTypeRef cf = v21;
        if (v21) {
          CFRetain(v21);
        }

        char v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x48);
        *(void *)char v23 = &unk_1EE9FDD38;
        *((void *)v23 + 1) = v33;
        *((void *)v23 + 2) = v34;
        uint64_t v24 = v35;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        *((void *)v23 + 3) = v24;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v23 + 32, (uint64_t)v36);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v23 + 48, (uint64_t)v37);
        uint64_t v25 = (void *)cf;
        CFTypeRef cf = 0;
        id v26 = v25;

        *((void *)v23 + 8) = v26;
        int v43 = v23;
        WebKit::WebExtensionContext::loadDeclarativeNetRequestRules((CFTypeRef *)a1, (uint64_t *)&v43);
        uint64_t v28 = (uint64_t)v43;
        int v43 = 0;
        if (v28) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
        CFTypeRef v29 = cf;
        CFTypeRef cf = 0;
        if (v29) {
          CFRelease(v29);
        }
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v27);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v36, v30);
        uint64_t v31 = v35;
        uint64_t v35 = 0;
        if (v31) {
          (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
        }
        uint64_t v32 = v34;
        uint64_t v34 = 0;
        if (v32) {
          CFRelease(*(CFTypeRef *)(v32 + 8));
        }

        goto LABEL_35;
      }
      uint64_t v16 = WebKit::toErrorString((WebKit *)@"declarativeNetRequest.updateEnabledRulesets()", 0, &cfstr_TheNumberOfEna.isa, v12, 50);
      MEMORY[0x19972EAD0](&v43, v16);
      int v17 = v43;
      int v43 = 0;

      long long v33 = v17;
      LOBYTE(v34) = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a4);
    }
    char v18 = v33;
    long long v33 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v14);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
LABEL_35:
    if (v40 != -1) {
      ((void (*)(WTF::StringImpl **, void *))off_1EE9FDBC8[v40])(&v33, v39);
    }
    goto LABEL_37;
  }
  if (v42 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_42:
    __break(1u);
    return;
  }
  uint64_t v9 = (WTF::StringImpl *)v41[0];
  if (v41[0]) {
    *(_DWORD *)v41[0] += 2;
  }
  long long v33 = v9;
  LOBYTE(v34) = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a4);
  uint64_t v11 = v33;
  long long v33 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
LABEL_37:
  if (v42 != -1) {
    ((void (*)(WTF::StringImpl **, void *))off_1EE9FDBC8[v42])(&v33, v41);
  }
}

void sub_1992E8D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18, uint64_t a19, int a20,int a21,char a22,uint64_t a23,int a24)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v26, v29);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25, v30);
  uint64_t v31 = a12;
  a12 = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = a11;
  a11 = 0;
  if (v32) {
    CFRelease(*(CFTypeRef *)(v32 + 8));
  }

  if (a20 != -1) {
    ((void (*)(WTF::StringImpl **, char *))off_1EE9FDBC8[a20])(&a10, &a18);
  }
  if (a24 != -1) {
    ((void (*)(WTF::StringImpl **, char *))off_1EE9FDBC8[a24])(&a10, &a22);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::shouldDisplayBlockedResourceCountAsBadgeText(WebKit::WebExtensionContext *this)
{
  uint64_t v1 = WTF::RetainPtr<__IOHIDDevice *>::get();
  WTF::RetainPtr<NSDictionary>::RetainPtr(&cf, v1);

  uint64_t v2 = WebKit::objectForKey<NSNumber>((id *)&cf, @"DisplayBlockedResourceCountAsBadgeText");
  uint64_t v3 = [v2 BOOLValue];

  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  return v3;
}

void sub_1992E9008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

id WebKit::objectForKey<NSNumber>(id *a1, void *a2)
{
  id v3 = a2;
  CFTypeRef v4 = WTF::RetainPtr<NSSet>::get(a1);
  unsigned int v5 = WebKit::objectForKey<NSNumber>(v4, (uint64_t)v3);

  return v5;
}

void sub_1992E90BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::incrementActionCountForTab(WebKit::WebExtensionContext *this, WebKit::WebExtensionTab *a2, uint64_t a3)
{
  if (WebKit::WebExtensionContext::shouldDisplayBlockedResourceCountAsBadgeText(this))
  {
    WebKit::WebExtensionContext::getOrCreateAction(this, a2, (uint64_t *)&v7);
    uint64_t v6 = v7;
    WebKit::WebExtensionAction::incrementBlockedResourceCount(v7, a3);
    if (v6) {
      CFRelease(*((CFTypeRef *)v6 + 1));
    }
  }
}

void sub_1992E9144(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionContext::declarativeNetRequestDisplayActionCountAsBadgeText(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  if (WebKit::WebExtensionContext::shouldDisplayBlockedResourceCountAsBadgeText((WebKit::WebExtensionContext *)a1) == a2)
  {
    LOBYTE(v26) = 0;
    LOBYTE(v27) = 0;
    uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
  }
  else
  {
    uint64_t v6 = WTF::RetainPtr<__IOHIDDevice *>::get();
    id v7 = [NSNumber numberWithBool:a2];
    [v6 setObject:v7 forKey:@"DisplayBlockedResourceCountAsBadgeText"];

    WebKit::WebExtensionContext::writeStateToStorage((WebKit::WebExtensionContext *)a1);
    if ((a2 & 1) == 0)
    {
      uint64_t v10 = a1 + 58;
      uint64_t v26 = (WTF::StringImpl *)(a1 + 58);
      uint64_t v27 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)a1 + 58);
      uint64_t v28 = v11;
      uint64_t v12 = a1[58];
      if (v12)
      {
        uint64_t v13 = *(unsigned int *)(v12 - 4);
        uint64_t v14 = v12 + 16 * v13;
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v13 = 0;
      }
      uint64_t v29 = v14;
      uint64_t v30 = v12 + 16 * v13;
      int v31 = 0;
      WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v26);
      uint64_t v15 = *v10;
      if (*v10)
      {
        uint64_t v16 = *(unsigned int *)(v15 - 4);
        int v17 = (void *)(v15 + 16 * v16);
      }
      else
      {
        int v17 = 0;
        uint64_t v16 = 0;
      }
      uint64_t v20 = a1 + 58;
      id v21 = v17;
      uint64_t v22 = v17;
      char v23 = v17;
      uint64_t v24 = v15 + 16 * v16;
      int v25 = 0;
      WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v20);
      while (v27 != v21)
      {
        uint64_t v18 = v27[1];
        *(void *)(v18 + 168) = 0;
        WebKit::WebExtensionAction::propertiesDidChange((CFTypeRef *)v18);
        uint64_t v19 = v27;
        do
        {
          v19 += 2;
          uint64_t v27 = v19;
        }
        while (v19 != v28 && (unint64_t)(*v19 + 1) <= 1);
        ++v31;
        WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v26);
        ++*((_DWORD *)v26 + 2);
      }
    }
    LOBYTE(v26) = 0;
    LOBYTE(v27) = 0;
    uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
  }
  if ((_BYTE)v27)
  {
    uint64_t result = v26;
    uint64_t v26 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1992E9334(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16)
{
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::declarativeNetRequestIncrementActionCount(uint64_t *a1, uint64_t a2, uint64_t *a3, double a4)
{
  WebKit::WebExtensionContext::getTab(a1, a2, 0, &v16);
  if (v16)
  {
    WebKit::WebExtensionContext::incrementActionCountForTab((WebKit::WebExtensionContext *)a1, v16, (uint64_t)a4);
    LOBYTE(v14) = 0;
    char v15 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"declarativeNetRequest.setExtensionActionOptions()", 0, &cfstr_TabNotFound.isa, v7, &v13);
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    uint64_t v14 = v8;
    char v15 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
    if (v15)
    {
      uint64_t v10 = v14;
      uint64_t v14 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result) {
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  }
  return result;
}

void sub_1992E94A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a12) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v11 = a3;
  if (a3)
  {
    WebKit::WebExtensionContext::getTab((uint64_t *)a1, a2, 0, &v70);
    if (!v70)
    {
      WebKit::toWebExtensionError<>((WebKit *)@"declarativeNetRequest.getMatchedRules()", 0, &cfstr_TabNotFound.isa, v12, &v68);
      uint64_t v13 = v68;
      uint64_t v68 = 0;
      int v59 = v13;
      LODWORD(v61) = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()(a6);
LABEL_50:
      if (v61 != -1) {
        ((void (*)(uint64_t *, WTF::StringImpl **))off_1EE9FDBD8[v61])(&v66, &v59);
      }
      LODWORD(v61) = -1;
      int v58 = v68;
      uint64_t v68 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2) {
          WTF::StringImpl::destroy(v58, v14);
        }
        else {
          *(_DWORD *)v58 -= 2;
        }
      }
      goto LABEL_56;
    }
  }
  else
  {
    uint64_t v70 = 0;
  }
  MEMORY[0x19972EAD0](&v59, @"declarativeNetRequestFeedback");
  int v16 = WebKit::WebExtensionContext::permissionState((WTF::StringImpl *)a1, &v59, 0, 2) & 0xFFFFFFFE;
  uint64_t result = (uint64_t)v59;
  int v59 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v15);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v16 != 2)
  {
    uint64_t result = WebKit::WebExtensionTab::extensionHasTemporaryPermission(v70);
    if ((result & 1) == 0)
    {
      WebKit::toWebExtensionError<>((WebKit *)@"declarativeNetRequest.getMatchedRules()", 0, &cfstr_TheActivetabPe.isa, v18, &v68);
      int8x16x2_t v57 = v68;
      uint64_t v68 = 0;
      int v59 = v57;
      LODWORD(v61) = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()(a6);
      goto LABEL_50;
    }
  }
  if (a5) {
    double v19 = *(double *)&a4;
  }
  else {
    double v19 = NAN;
  }
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v20 = *(unsigned int *)(a1 + 652);
  int v59 = 0;
  LODWORD(v60) = 0;
  HIDWORD(v60) = v20;
  if (v20)
  {
    if (v20 >= 0x4924925)
    {
      __break(0xC471u);
      return result;
    }
    unsigned int v21 = 56 * v20;
    uint64_t v22 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(56 * v20));
    unint64_t v23 = (unint64_t)v22;
    LODWORD(v60) = v21 / 0x38;
    int v59 = v22;
    unsigned int v24 = *(_DWORD *)(a1 + 652);
    if (v24)
    {
      uint64_t v25 = *(void *)(a1 + 640);
      uint64_t v26 = v25 + 56 * v24;
      uint64_t v27 = v22;
      do
      {
        uint64_t v28 = *(_DWORD **)v25;
        if (*(void *)v25) {
          *v28 += 2;
        }
        *(void *)uint64_t v27 = v28;
        long long v29 = *(_OWORD *)(v25 + 8);
        *(_OWORD *)((char *)v27 + 24) = *(_OWORD *)(v25 + 24);
        *(_OWORD *)((char *)v27 + 8) = v29;
        *(_OWORD *)((char *)v27 + 40) = *(_OWORD *)(v25 + 40);
        v25 += 56;
        uint64_t v27 = (WTF::StringImpl *)((char *)v27 + 56);
      }
      while (v25 != v26);
    }
    if (HIDWORD(v60))
    {
      uint64_t v30 = 56 * HIDWORD(v60);
      do
      {
        if ((!v11 || *(void *)(v23 + 48) == a2) && *(double *)(v23 + 40) > v19)
        {
          unsigned int v31 = HIDWORD(v69);
          if (HIDWORD(v69) == v69)
          {
            WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMatchedRuleParameters&>((uint64_t)&v68, v23);
          }
          else
          {
            uint64_t v32 = v68;
            long long v33 = *(_DWORD **)v23;
            if (*(void *)v23) {
              *v33 += 2;
            }
            uint64_t v34 = (char *)v32 + 56 * v31;
            *(void *)uint64_t v34 = v33;
            long long v35 = *(_OWORD *)(v23 + 8);
            *(_OWORD *)(v34 + 24) = *(_OWORD *)(v23 + 24);
            *(_OWORD *)(v34 + 8) = v35;
            *(_OWORD *)(v34 + 40) = *(_OWORD *)(v23 + 40);
            ++HIDWORD(v69);
          }
          unsigned int v36 = HIDWORD(v67);
          if (HIDWORD(v67) == v67)
          {
            unint64_t v37 = WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v66, HIDWORD(v67) + 1, v23);
            unsigned int v36 = HIDWORD(v67);
            uint64_t v38 = v66;
            char v39 = *(_DWORD **)v37;
            if (*(void *)v37) {
              *v39 += 2;
            }
            int v40 = (void *)(v38 + 40 * v36);
            *int v40 = v39;
            uint64_t v41 = v40 + 1;
          }
          else
          {
            uint64_t v42 = v66;
            int v43 = *(_DWORD **)v23;
            if (*(void *)v23) {
              *v43 += 2;
            }
            *(void *)(v42 + 40 * v36) = v43;
            uint64_t v41 = (_OWORD *)(v42 + 40 * v36 + 8);
            unint64_t v37 = v23;
          }
          long long v44 = *(_OWORD *)(v37 + 24);
          _OWORD *v41 = *(_OWORD *)(v37 + 8);
          v41[1] = v44;
          HIDWORD(v67) = v36 + 1;
        }
        v23 += 56;
        v30 -= 56;
      }
      while (v30);
    }
  }
  WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v15);
  CFStringRef v65 = 0;
  int v59 = (WTF::StringImpl *)a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v60 = a1;
  uint64_t v61 = v68;
  uint64_t v45 = v69;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v62 = v45;
  uint64_t v46 = *a6;
  *a6 = 0;
  uint64_t v63 = v46;
  uint64_t v47 = (void *)WTF::fastMalloc((WTF *)0x30);
  void *v47 = &unk_1EE9FDD60;
  v47[1] = v59;
  void v47[2] = v60;
  unint64_t v48 = v61;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  v47[3] = v48;
  v47[4] = v62;
  uint64_t v49 = v63;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  v47[5] = v49;
  char v64 = v47;
  WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, &v66, &v65, (uint64_t *)&v64, 1, 1);
  uint64_t v51 = (uint64_t)v64;
  char v64 = 0;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }
  uint64_t v52 = v63;
  uint64_t v63 = 0;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v50);
  uint64_t v54 = v60;
  uint64_t v60 = 0;
  if (v54) {
    CFRelease(*(CFTypeRef *)(v54 + 8));
  }
  uint64_t v55 = v65;
  CFStringRef v65 = 0;
  if (v55) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v55);
  }
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v53);
  WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v56);
LABEL_56:
  uint64_t result = (uint64_t)v70;
  uint64_t v70 = 0;
  if (result) {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  }
  return result;
}

void sub_1992E9A3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20)
{
  if (a11 != -1) {
    ((void (*)(char *, WTF::StringImpl **))off_1EE9FDBD8[a11])(&a16, &a9);
  }
  a11 = -1;
  unsigned int v21 = a18;
  a18 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, a2);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  uint64_t v22 = a20;
  a20 = 0;
  if (v22) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1992E9C20(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionContext::declarativeNetRequestDynamicRulesStore(WebKit::WebExtensionContext *this)
{
  uint64_t v2 = (void *)*((void *)this + 82);
  if (!v2)
  {
    id v3 = [_WKWebExtensionDeclarativeNetRequestSQLiteStore alloc];
    if (*((void *)this + 15)) {
      CFTypeRef v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      CFTypeRef v4 = &stru_1EEA10550;
    }
    if (*((void *)this + 5))
    {
      unsigned int v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      uint64_t v6 = *((void *)this + 5);
      if (v6) {
        BOOL v7 = *(_DWORD *)(v6 + 4) == 0;
      }
      else {
        BOOL v7 = 1;
      }
    }
    else
    {
      BOOL v7 = 1;
      unsigned int v5 = &stru_1EEA10550;
    }
    uint64_t v8 = [(_WKWebExtensionDeclarativeNetRequestSQLiteStore *)v3 initWithUniqueIdentifier:v4 storageType:0 directory:v5 usesInMemoryDatabase:v7];
    uint64_t v9 = (const void **)((char *)this + 656);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator=(v9, v8);

    uint64_t v2 = (void *)*v9;
  }

  return WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v2);
}

void sub_1992E9D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const void **WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator=(const void **a1, void *a2)
{
  id v3 = a2;
  CFTypeRef v4 = v3;
  if (v3) {
    CFRetain(v3);
  }

  unsigned int v5 = *a1;
  *a1 = v4;
  if (v5) {
    CFRelease(v5);
  }

  return a1;
}

void sub_1992E9DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionContext::declarativeNetRequestSessionRulesStore(WebKit::WebExtensionContext *this)
{
  uint64_t v2 = (void *)*((void *)this + 83);
  if (!v2)
  {
    id v3 = [_WKWebExtensionDeclarativeNetRequestSQLiteStore alloc];
    if (*((void *)this + 15)) {
      CFTypeRef v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      CFTypeRef v4 = &stru_1EEA10550;
    }
    if (*((void *)this + 5)) {
      unsigned int v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      unsigned int v5 = &stru_1EEA10550;
    }
    uint64_t v6 = [(_WKWebExtensionDeclarativeNetRequestSQLiteStore *)v3 initWithUniqueIdentifier:v4 storageType:1 directory:v5 usesInMemoryDatabase:1];
    BOOL v7 = (const void **)((char *)this + 664);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator=(v7, v6);

    uint64_t v2 = (void *)*v7;
  }

  return WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v2);
}

void sub_1992E9EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t *a7)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v18 = *a7;
  *a7 = 0;
  id v26 = v13;
  id v19 = v14;
  id v20 = v15;
  id v21 = v16;
  id v22 = v17;
  unint64_t v23 = malloc_type_malloc(0x60uLL, 0x10E004037C2C730uLL);
  void *v23 = MEMORY[0x1E4F14398];
  v23[1] = 50331650;
  v23[2] = WTF::BlockPtrArc<void ()(NSUUID *,NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSUUID *,NSString *)#1}::__invoke;
  v23[3] = &WTF::BlockPtrArc<void ()(NSUUID *,NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
  v23[4] = a1;
  v23[5] = a1;
  v23[6] = v18;
  v23[7] = v26;
  v23[8] = v19;
  v23[9] = v20;
  v23[10] = v21;
  v23[11] = v22;
  unsigned int v24 = _Block_copy(v23);

  uint64_t v25 = _Block_copy(v24);
  [v26 createSavepointWithCompletionHandler:v25];
}

void sub_1992EA05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(CFTypeRef *a1, uint64_t *a2)
{
  WebKit::WebExtensionContext::declarativeNetRequestDynamicRulesStore((WebKit::WebExtensionContext *)a1);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  CFRetain(a1[1]);
  uint64_t v4 = *a2;
  *a2 = 0;
  unsigned int v5 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
  *unsigned int v5 = MEMORY[0x1E4F14398];
  v5[1] = 50331650;
  v5[2] = WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSArray *,NSString *)#1}::__invoke;
  v5[3] = &WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::descriptor;
  v5[4] = a1;
  v5[5] = v4;
  uint64_t v6 = _Block_copy(v5);

  BOOL v7 = _Block_copy(v6);
  [v8 getRulesWithCompletionHandler:v7];
}

void sub_1992EA1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::declarativeNetRequestUpdateDynamicRules(WebKit::WebExtensionContext *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  id v8 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a3 + 12)];
  uint64_t v9 = v8;
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }

  uint64_t v10 = *(unsigned int *)(a3 + 12);
  if (v10)
  {
    uint64_t v11 = *(uint64_t **)a3;
    uint64_t v12 = 8 * v10;
    do
    {
      WTF::RetainPtr<NSSet>::get((id *)&cf);
      id v13 = (WTF *)objc_claimAutoreleasedReturnValue();
      uint64_t v14 = *v11;
      if (WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<double>,WTF::DefaultHash<double>>,double>(*((void *)a1 + 86), *v11))
      {
        id v15 = [NSNumber numberWithDouble:*(double *)&v14];
      }
      else
      {
        id v15 = 0;
      }
      id v16 = v15;
      WTF::addUnlessNil(v13, v16, v17);

      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  uint64_t v18 = WTF::RetainPtr<NSSet>::get((id *)&cf);
  CFTypeRef v19 = cf;
  CFTypeRef cf = 0;
  if (v19) {
    CFRelease(v19);
  }
  if (*a2) {
    id v20 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    id v20 = &stru_1EEA10550;
  }
  id v21 = WebKit::parseJSON(v20, 1, 0);
  objc_opt_class();
  uint64_t v22 = WTF::dynamic_objc_cast<NSArray>(v21);
  unint64_t v23 = (void *)v22;
  unsigned int v24 = (void *)MEMORY[0x1E4F1CBF0];
  if (v22) {
    unsigned int v24 = (void *)v22;
  }
  id v25 = v24;

  if ([v18 count] || objc_msgSend(v25, "count"))
  {
    uint64_t v26 = *((void *)a1 + 86);
    if (v26) {
      unsigned int v27 = *(_DWORD *)(v26 - 12);
    }
    else {
      unsigned int v27 = 0;
    }
    uint64_t v28 = [v25 count];
    uint64_t v29 = [v18 count];
    uint64_t v31 = *((void *)a1 + 85);
    if (v31) {
      LODWORD(v31) = *(_DWORD *)(v31 - 12);
    }
    if (v28 + v27 - v29 + (unint64_t)v31 < 0x7531)
    {
      long long v35 = WebKit::WebExtensionContext::declarativeNetRequestDynamicRulesStore(a1);
      WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage((uint64_t)a1, v35, @"dynamic", @"declarativeNetRequest.updateDynamicRules()", v25, v18, a4);

      goto LABEL_36;
    }
    WebKit::toWebExtensionError<>((WebKit *)@"declarativeNetRequest.updateDynamicRules()", 0, &cfstr_FailedToAddDyn.isa, v30, &v37);
    uint64_t v32 = v37;
    unint64_t v37 = 0;
    CFTypeRef cf = v32;
    char v39 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a4);
    if (v39)
    {
      uint64_t v34 = (WTF::StringImpl *)cf;
      CFTypeRef cf = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, v33);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    unsigned int v36 = v37;
    unint64_t v37 = 0;
    if (v36) {
      goto LABEL_33;
    }
  }
  else
  {
    LOBYTE(cf) = 0;
    char v39 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a4);
    if (v39)
    {
      unsigned int v36 = (WTF::StringImpl *)cf;
      CFTypeRef cf = 0;
      if (v36)
      {
LABEL_33:
        if (*(_DWORD *)v36 == 2) {
          WTF::StringImpl::destroy(v36, v33);
        }
        else {
          *(_DWORD *)v36 -= 2;
        }
      }
    }
  }
LABEL_36:
}

void sub_1992EA544(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *cf, char a12)
{
  if (a12 && cf)
  {
    if (*(_DWORD *)cf == 2) {
      WTF::StringImpl::destroy(cf, a2);
    }
    else {
      *(_DWORD *)cf -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(CFTypeRef *a1, uint64_t *a2)
{
  WebKit::WebExtensionContext::declarativeNetRequestSessionRulesStore((WebKit::WebExtensionContext *)a1);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  CFRetain(a1[1]);
  uint64_t v4 = *a2;
  *a2 = 0;
  unsigned int v5 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
  *unsigned int v5 = MEMORY[0x1E4F14398];
  v5[1] = 50331650;
  v5[2] = WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSArray *,NSString *)#1}::__invoke;
  v5[3] = &WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::descriptor;
  v5[4] = a1;
  v5[5] = v4;
  uint64_t v6 = _Block_copy(v5);

  BOOL v7 = _Block_copy(v6);
  [v8 getRulesWithCompletionHandler:v7];
}

void sub_1992EA73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::declarativeNetRequestUpdateSessionRules(uint64_t *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  id v8 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a3 + 12)];
  uint64_t v9 = v8;
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }

  uint64_t v10 = *(unsigned int *)(a3 + 12);
  if (v10)
  {
    uint64_t v11 = *(uint64_t **)a3;
    uint64_t v12 = 8 * v10;
    do
    {
      WTF::RetainPtr<NSSet>::get((id *)&cf);
      id v13 = (WTF *)objc_claimAutoreleasedReturnValue();
      uint64_t v14 = *v11;
      if (WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<double>,WTF::DefaultHash<double>>,double>(a1[85], *v11))
      {
        id v15 = [NSNumber numberWithDouble:*(double *)&v14];
      }
      else
      {
        id v15 = 0;
      }
      id v16 = v15;
      WTF::addUnlessNil(v13, v16, v17);

      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  uint64_t v18 = WTF::RetainPtr<NSSet>::get((id *)&cf);
  CFTypeRef v19 = cf;
  CFTypeRef cf = 0;
  if (v19) {
    CFRelease(v19);
  }
  if (*a2) {
    id v20 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    id v20 = &stru_1EEA10550;
  }
  id v21 = WebKit::parseJSON(v20, 1, 0);
  objc_opt_class();
  uint64_t v22 = WTF::dynamic_objc_cast<NSArray>(v21);
  unint64_t v23 = (void *)v22;
  unsigned int v24 = (void *)MEMORY[0x1E4F1CBF0];
  if (v22) {
    unsigned int v24 = (void *)v22;
  }
  id v25 = v24;

  if ([v18 count] || objc_msgSend(v25, "count"))
  {
    uint64_t v26 = a1[85];
    if (v26) {
      unsigned int v27 = *(_DWORD *)(v26 - 12);
    }
    else {
      unsigned int v27 = 0;
    }
    uint64_t v28 = [v25 count];
    uint64_t v29 = [v18 count];
    uint64_t v31 = a1[86];
    if (v31) {
      LODWORD(v31) = *(_DWORD *)(v31 - 12);
    }
    if (v28 + v27 - v29 + (unint64_t)v31 < 0x7531)
    {
      long long v35 = WebKit::WebExtensionContext::declarativeNetRequestSessionRulesStore((WebKit::WebExtensionContext *)a1);
      WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage((uint64_t)a1, v35, @"session", @"declarativeNetRequest.updateSessionRules()", v25, v18, a4);

      goto LABEL_36;
    }
    WebKit::toWebExtensionError<>((WebKit *)@"declarativeNetRequest.updateSessionRules()", 0, &cfstr_FailedToAddSes.isa, v30, &v37);
    uint64_t v32 = v37;
    unint64_t v37 = 0;
    CFTypeRef cf = v32;
    char v39 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a4);
    if (v39)
    {
      uint64_t v34 = (WTF::StringImpl *)cf;
      CFTypeRef cf = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, v33);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    unsigned int v36 = v37;
    unint64_t v37 = 0;
    if (v36) {
      goto LABEL_33;
    }
  }
  else
  {
    LOBYTE(cf) = 0;
    char v39 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a4);
    if (v39)
    {
      unsigned int v36 = (WTF::StringImpl *)cf;
      CFTypeRef cf = 0;
      if (v36)
      {
LABEL_33:
        if (*(_DWORD *)v36 == 2) {
          WTF::StringImpl::destroy(v36, v33);
        }
        else {
          *(_DWORD *)v36 -= 2;
        }
      }
    }
  }
LABEL_36:
}

void sub_1992EAAA8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *cf, char a12)
{
  if (a12 && cf)
  {
    if (*(_DWORD *)cf == 2) {
      WTF::StringImpl::destroy(cf, a2);
    }
    else {
      *(_DWORD *)cf -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit12WebExtension32DeclarativeNetRequestRulesetDataELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit12WebExtension32DeclarativeNetRequestRulesetDataELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSUUID *,NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

void WTF::BlockPtrArc<void ()(NSUUID *,NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSUUID *,NSString *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v27 = a2;
  unsigned int v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v5)
  {
    BOOL v7 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)(a1 + 64);
      if (*(void *)(v6 + 120)) {
        id v25 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        id v25 = &stru_1EEA10550;
      }
      *(_DWORD *)buf = 138543875;
      *(void *)&buf[4] = v24;
      __int16 v30 = 2113;
      uint64_t v31 = v25;
      __int16 v32 = 2114;
      long long v33 = v5;
      _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "Unable to create %{public}@ rules savepoint for extension %{private}@. Error: %{public}@", buf, 0x20u);
    }
  }
  if ([(NSString *)v5 length])
  {
    WebKit::toWebExtensionError<>(*(WebKit **)(a1 + 72), 0, v5, v8, &v28);
    uint64_t v9 = v28;
    uint64_t v28 = 0;
    *(void *)buf = v9;
    buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 48));
    if (buf[8])
    {
      uint64_t v11 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
    unint64_t v23 = v28;
    uint64_t v28 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v10);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
  }
  else
  {
    uint64_t v12 = *(void **)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 80);
    uint64_t v26 = *(void *)(a1 + 88);
    CFRetain(*(CFTypeRef *)(v6 + 8));
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v14 = *(void **)(a1 + 56);
    *(void *)(a1 + 48) = 0;
    id v16 = v14;
    id v17 = *(id *)(a1 + 64);
    id v18 = *(id *)(a1 + 72);
    id v19 = v27;
    id v20 = malloc_type_malloc(0x58uLL, 0x10E0040DE5BC9B3uLL);
    *id v20 = MEMORY[0x1E4F14398];
    v20[1] = 50331650;
    v20[2] = WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1})::{lambda(void *,NSString *)#1}::__invoke;
    v20[3] = &WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1})::descriptor;
    v20[4] = v6;
    v20[5] = v6;
    v20[6] = v15;
    v20[7] = v16;
    v20[8] = v17;
    v20[9] = v18;
    v20[10] = v19;
    id v21 = _Block_copy(v20);

    uint64_t v22 = _Block_copy(v21);
    [v12 updateRulesByRemovingIDs:v26 addRules:v13 completionHandler:v22];
  }
}

void sub_1992EAF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, char a14)
{
  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1})::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    unsigned int v5 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)(a1 + 64);
      if (*(void *)(v4 + 120)) {
        unint64_t v23 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        unint64_t v23 = &stru_1EEA10550;
      }
      *(_DWORD *)uint64_t v24 = 138543875;
      *(void *)&v24[4] = v22;
      __int16 v25 = 2113;
      uint64_t v26 = v23;
      __int16 v27 = 2114;
      id v28 = v3;
      _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "Unable to update %{public}@ rules for extension %{private}@. Error: %{public}@", v24, 0x20u);
    }
  }
  if ([v3 length])
  {
    uint64_t v6 = *(void **)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 80);
    CFRetain(*(CFTypeRef *)(v4 + 8));
    uint64_t v8 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    id v9 = *(id *)(a1 + 64);
    id v10 = *(id *)(a1 + 72);
    id v11 = v3;
    uint64_t v12 = malloc_type_malloc(0x50uLL, 0x10E0040ACABC250uLL);
    void *v12 = MEMORY[0x1E4F14398];
    v12[1] = 50331650;
    v12[2] = WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(NSString *)#1})::{lambda(void *,NSString *)#1}::__invoke;
    v12[3] = &WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(NSString *)#1})::descriptor;
    v12[4] = v4;
    v12[5] = v4;
    v12[6] = v8;
    v12[7] = v9;
    v12[8] = v10;
    v12[9] = v11;
    uint64_t v13 = _Block_copy(v12);

    uint64_t v14 = _Block_copy(v13);
    [v6 rollbackToSavepoint:v7 completionHandler:v14];
  }
  else
  {
    CFRetain(*(CFTypeRef *)(v4 + 8));
    uint64_t v15 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    id v16 = *(id *)(a1 + 64);
    id v17 = *(id *)(a1 + 72);
    id v18 = *(id *)(a1 + 56);
    id v19 = *(id *)(a1 + 80);
    id v20 = (void *)WTF::fastMalloc((WTF *)0x40);
    *id v20 = &unk_1EE9FDC58;
    v20[1] = v4;
    v20[2] = v4;
    v20[3] = v15;
    v20[4] = v16;
    v20[5] = v17;
    v20[6] = v18;
    v20[7] = v19;
    *(void *)uint64_t v24 = v20;
    WebKit::WebExtensionContext::loadDeclarativeNetRequestRules((CFTypeRef *)v4, (uint64_t *)v24);
    uint64_t v21 = *(void *)v24;
    *(void *)uint64_t v24 = 0;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
  }
}

void sub_1992EB364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(NSString *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(NSString *)#1})::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 56);
      if (*(void *)(v5 + 120)) {
        uint64_t v12 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v12 = &stru_1EEA10550;
      }
      *(_DWORD *)buf = 138543875;
      *(void *)&buf[4] = v11;
      __int16 v15 = 2113;
      id v16 = v12;
      __int16 v17 = 2114;
      id v18 = v4;
      _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, "Unable to rollback to %{public}@ rules savepoint for extension %{private}@. Error: %{public}@", buf, 0x20u);
    }
  }
  WebKit::toWebExtensionError<>(*(WebKit **)(a1 + 64), 0, *(NSString **)(a1 + 72), v3, &v13);
  uint64_t v7 = v13;
  uint64_t v13 = 0;
  *(void *)buf = v7;
  buf[8] = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 48));
  if (buf[8])
  {
    id v9 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  id v10 = v13;
  uint64_t v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
}

void sub_1992EB6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FDC58;

  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9FDC58;

  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  id v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::updateDeclarativeNetRequestRulesInStorage(_WKWebExtensionDeclarativeNetRequestSQLiteStore *,NSString *,NSString *,NSArray *,NSArray *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSUUID *,NSString *)::{lambda(NSString *)#1}::operator()(NSString *)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  CFRetain(*(CFTypeRef *)(v4 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v7 = *(void **)(a1 + 32);
  *(void *)(a1 + 24) = 0;
  id v9 = v7;
  if (a2)
  {
    id v10 = malloc_type_malloc(0x40uLL, 0x10E0040DE8A80A3uLL);
    *id v10 = MEMORY[0x1E4F14398];
    v10[1] = 50331650;
    v10[2] = _ZZN3WTF11BlockPtrArcIFvP8NSStringEE12fromCallableIZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreS2_S2_P7NSArraySB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS2_ENUlS2_E_clES2_ENUlbE_clEbEUlS2_E0_EES4_T_ENUlPvS2_E_8__invokeEST_S2_;
    v10[3] = &_ZZN3WTF11BlockPtrArcIFvP8NSStringEE12fromCallableIZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreS2_S2_P7NSArraySB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS2_ENUlS2_E_clES2_ENUlbE_clEbEUlS2_E0_EES4_T_E10descriptor;
    v10[4] = v4;
    v10[5] = v4;
    v10[6] = v8;
    v10[7] = v9;
    aBlocuint64_t k = _Block_copy(v10);

    uint64_t v11 = _Block_copy(aBlock);
    [v5 commitSavepoint:v6 completionHandler:v11];
  }
  else
  {
    id v12 = *(id *)(a1 + 40);
    uint64_t v13 = malloc_type_malloc(0x48uLL, 0x10E0040E47E7148uLL);
    void *v13 = MEMORY[0x1E4F14398];
    v13[1] = 50331650;
    v13[2] = _ZZN3WTF11BlockPtrArcIFvP8NSStringEE12fromCallableIZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreS2_S2_P7NSArraySB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS2_ENUlS2_E_clES2_ENUlbE_clEbEUlS2_E_EES4_T_ENUlPvS2_E_8__invokeEST_S2_;
    v13[3] = &_ZZN3WTF11BlockPtrArcIFvP8NSStringEE12fromCallableIZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreS2_S2_P7NSArraySB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS2_ENUlS2_E_clES2_ENUlbE_clEbEUlS2_E_EES4_T_E10descriptor;
    v13[4] = v4;
    v13[5] = v4;
    v13[6] = v8;
    v13[7] = v9;
    v13[8] = v12;
    aBlocuint64_t k = _Block_copy(v13);

    uint64_t v11 = _Block_copy(aBlock);
    [v5 rollbackToSavepoint:v6 completionHandler:v11];
  }
}

void sub_1992EBA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _ZZN3WTF11BlockPtrArcIFvP8NSStringEE12fromCallableIZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreS2_S2_P7NSArraySB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS2_ENUlS2_E_clES2_ENUlbE_clEbEUlS2_E_EES4_T_ENUlPKvE_8__invokeESU_(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

void _ZZN3WTF11BlockPtrArcIFvP8NSStringEE12fromCallableIZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreS2_S2_P7NSArraySB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS2_ENUlS2_E_clES2_ENUlbE_clEbEUlS2_E_EES4_T_ENUlPvS2_E_8__invokeEST_S2_(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 56);
      if (*(void *)(v4 + 120)) {
        uint64_t v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v11 = &stru_1EEA10550;
      }
      *(_DWORD *)id v12 = 138543875;
      *(void *)&v12[4] = v10;
      __int16 v13 = 2113;
      uint64_t v14 = v11;
      __int16 v15 = 2114;
      id v16 = v3;
      _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "Unable to rollback to %{public}@ rules savepoint for extension %{private}@. Error: %{public}@", v12, 0x20u);
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  id v7 = *(id *)(a1 + 64);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v8 = &unk_1EE9FDCA0;
  v8[1] = v6;
  v8[2] = v7;
  *(void *)id v12 = v8;
  WebKit::WebExtensionContext::loadDeclarativeNetRequestRules((CFTypeRef *)v4, (uint64_t *)v12);
  uint64_t v9 = *(void *)v12;
  *(void *)id v12 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
}

void sub_1992EBCA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreP8NSStringS7_P7NSArrayS9_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS7_ENUlS7_E_clES7_ENUlbE_clEbENUlS7_E_clES7_EUlbE_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FDCA0;

  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreP8NSStringS7_P7NSArrayS9_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS7_ENUlS7_E_clES7_ENUlbE_clEbENUlS7_E_clES7_EUlbE_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FDCA0;

  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreP8NSStringS7_P7NSArrayS9_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS7_ENUlS7_E_clES7_ENUlbE_clEbENUlS7_E_clES7_EUlbE_vJbEE4callEb(uint64_t a1, char a2, uint64_t a3, NSString *a4)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  if (a2)
  {
    LOBYTE(v10) = 0;
    char v11 = 0;
    return (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 8));
  }
  else
  {
    WebKit::toWebExtensionError<>(*(WebKit **)(a1 + 16), 0, &cfstr_UnableToLoadDe.isa, a4, &v9);
    uint64_t v6 = v9;
    uint64_t v9 = 0;
    uint64_t v10 = v6;
    char v11 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(v4);
    if (v11)
    {
      uint64_t v8 = v10;
      uint64_t v10 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
    }
    uint64_t result = v9;
    uint64_t v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1992EBF10(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void _ZZN3WTF11BlockPtrArcIFvP8NSStringEE12fromCallableIZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreS2_S2_P7NSArraySB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS2_ENUlS2_E_clES2_ENUlbE_clEbEUlS2_E0_EES4_T_ENUlPKvE_8__invokeESU_(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

void _ZZN3WTF11BlockPtrArcIFvP8NSStringEE12fromCallableIZZZZN6WebKit19WebExtensionContext41updateDeclarativeNetRequestRulesInStorageEP47_WKWebExtensionDeclarativeNetRequestSQLiteStoreS2_S2_P7NSArraySB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEN3__0clEP6NSUUIDS2_ENUlS2_E_clES2_ENUlbE_clEbEUlS2_E0_EES4_T_ENUlPvS2_E_8__invokeEST_S2_(void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = a1[7];
      if (*(void *)(v4 + 120)) {
        uint64_t v9 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v9 = &stru_1EEA10550;
      }
      *(_DWORD *)uint64_t v10 = 138543875;
      *(void *)&v10[4] = v8;
      __int16 v11 = 2113;
      id v12 = v9;
      __int16 v13 = 2114;
      id v14 = v3;
      _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "Unable to commit %{public}@ rules savepoint for extension %{private}@. Error: %{public}@", v10, 0x20u);
    }
  }
  v10[0] = 0;
  v10[8] = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a1 + 6);
  if (v10[8])
  {
    id v7 = *(WTF::StringImpl **)v10;
    *(void *)uint64_t v10 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
}

void sub_1992EC15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSArray *,NSString *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (v7)
  {
    WebKit::toWebExtensionError<>((WebKit *)@"declarativeNetRequest.getDynamicRules()", 0, v7, v6, &v15);
    uint64_t v8 = v15;
    uint64_t v15 = 0;
    id v16 = v8;
    int v17 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (v17 != -1) {
      ((void (*)(char *, WTF::StringImpl **))off_1EE9FDCF8[v17])(&v18, &v16);
    }
    int v17 = -1;
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  else
  {
    __int16 v11 = WebKit::encodeJSONString(v5, 1, 0);
    MEMORY[0x19972EAD0](&v15, v11);
    id v12 = v15;
    uint64_t v15 = 0;
    id v16 = v12;
    int v17 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (v17 != -1) {
      ((void (*)(char *, WTF::StringImpl **))off_1EE9FDCF8[v17])(&v18, &v16);
    }
    int v17 = -1;
    id v14 = v15;
    uint64_t v15 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
}

void sub_1992EC390(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  if (a12 != -1) {
    ((void (*)(char *, char *))off_1EE9FDCF8[a12])(&a17, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSArray *,NSString *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (v7)
  {
    WebKit::toWebExtensionError<>((WebKit *)@"declarativeNetRequest.getSessionRules()", 0, v7, v6, &v15);
    uint64_t v8 = v15;
    uint64_t v15 = 0;
    id v16 = v8;
    int v17 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (v17 != -1) {
      ((void (*)(char *, WTF::StringImpl **))off_1EE9FDCF8[v17])(&v18, &v16);
    }
    int v17 = -1;
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  else
  {
    __int16 v11 = WebKit::encodeJSONString(v5, 1, 0);
    MEMORY[0x19972EAD0](&v15, v11);
    id v12 = v15;
    uint64_t v15 = 0;
    id v16 = v12;
    int v17 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (v17 != -1) {
      ((void (*)(char *, WTF::StringImpl **))off_1EE9FDCF8[v17])(&v18, &v16);
    }
    int v17 = -1;
    id v14 = v15;
    uint64_t v15 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
}

void sub_1992EC648(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  if (a12 != -1) {
    ((void (*)(char *, char *))off_1EE9FDCF8[a12])(&a17, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::declarativeNetRequestUpdateEnabledRulesets(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9FDD38;
  uint64_t v3 = (const void *)a1[8];
  a1[8] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 6), a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), v4);
  uint64_t v5 = a1[3];
  a1[3] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[2];
  a1[2] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::declarativeNetRequestUpdateEnabledRulesets(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9FDD38;
  uint64_t v3 = (const void *)*((void *)a1 + 8);
  *((void *)a1 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 48, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, v4);
  uint64_t v6 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }

  return WTF::fastFree(a1, v5);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::declarativeNetRequestUpdateEnabledRulesets(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3 = *(WebKit::WebExtensionContext **)(a1 + 8);
  if (a2)
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v5 = WTF::RetainPtr<__IOHIDDevice *>::get();
    WTF::RetainPtr<NSDictionary>::RetainPtr(&cf, v5);

    uint64_t v6 = WebKit::objectForKey<NSDictionary>((id *)&cf, @"DeclarativeNetRequestRulesetState", 1, 0);
    CFTypeRef v7 = cf;
    CFTypeRef cf = 0;
    if (v7) {
      CFRelease(v7);
    }
    if (v6)
    {
      uint64_t v8 = (void *)[v6 mutableCopy];
    }
    else
    {
      uint64_t v8 = [MEMORY[0x1E4F1CA60] dictionary];
    }
    uint64_t v15 = v8;
    [v8 addEntriesFromDictionary:v4];
    id v16 = WTF::RetainPtr<__IOHIDDevice *>::get();
    int v17 = (void *)[v15 copy];
    [v16 setObject:v17 forKey:@"DeclarativeNetRequestRulesetState"];

    WebKit::WebExtensionContext::writeStateToStorage(v3);
    LOBYTE(cf) = 0;
    char v21 = 0;
    uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 24));
    if (!v21) {
      return result;
    }
    uint64_t result = (WTF::StringImpl *)cf;
    CFTypeRef cf = 0;
    if (!result) {
      return result;
    }
LABEL_16:
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    *(_DWORD *)result -= 2;
    return result;
  }
  uint64_t v9 = WTF::RetainPtr<__IOHIDDevice *>::get();
  WebKit::WebExtensionContext::declarativeNetRequestToggleRulesets((uint64_t)v3, a1 + 48, 1, v9);

  uint64_t v10 = WTF::RetainPtr<__IOHIDDevice *>::get();
  WebKit::WebExtensionContext::declarativeNetRequestToggleRulesets((uint64_t)v3, a1 + 32, 0, v10);

  WebKit::toWebExtensionError<>((WebKit *)@"declarativeNetRequest.updateEnabledRulesets()", 0, &cfstr_FailedToApplyR_0.isa, v11, &v19);
  id v12 = v19;
  uint64_t v19 = 0;
  CFTypeRef cf = v12;
  char v21 = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 24));
  if (v21)
  {
    id v14 = (WTF::StringImpl *)cf;
    CFTypeRef cf = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result) {
    goto LABEL_16;
  }
  return result;
}

void sub_1992ECAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, CFTypeRef cf, char a12)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMatchedRuleParameters&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(_DWORD **)v3;
  if (*(void *)v3) {
    *v6 += 2;
  }
  uint64_t v7 = v5 + 56 * v4;
  *(void *)uint64_t v7 = v6;
  long long v8 = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v7 + 8) = v8;
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(v3 + 40);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9FDD60;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9FDD60;
  uint64_t v3 = *((void *)a1 + 5);
  *((void *)a1 + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  uint64_t v5 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::WallTime>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  int v17 = 0;
  uint64_t v18 = 0;
  uint64_t v3 = *(unsigned int *)(result + 36);
  if (!v3) {
    goto LABEL_17;
  }
  if (v3 >= 0x4924925)
  {
    __break(0xC471u);
    return result;
  }
  LODWORD(v18) = 56 * (int)v3 / 0x38u;
  int v17 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(56 * v3));
  uint64_t v4 = *(unsigned int *)(v1 + 36);
  if (v4)
  {
    uint64_t v5 = *(void *)(v1 + 24);
    uint64_t v6 = 56 * v4;
    do
    {
      if ((WebKit::WebExtensionContext::permissionState(v2, (URL *)v5, 0, 3) & 0xFFFFFFFE) == 2)
      {
        uint64_t v7 = *(WTF::StringImpl **)v5;
        if (*(void *)v5) {
          *(_DWORD *)v7 += 2;
        }
        long long v23 = *(_OWORD *)(v5 + 40);
        long long v8 = *(_OWORD *)(v5 + 8);
        long long v9 = *(_OWORD *)(v5 + 24);
        uint64_t v19 = v7;
        long long v20 = v8;
        long long v21 = v9;
        long long v22 = v23;
        unsigned int v10 = HIDWORD(v18);
        if (HIDWORD(v18) == v18)
        {
          WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMatchedRuleParameters>((uint64_t)&v17, (unint64_t)&v19);
        }
        else
        {
          id v12 = v17;
          WTF::URL::URL((uint64_t)v17 + 56 * HIDWORD(v18), (uint64_t *)&v19);
          *(_OWORD *)((char *)v12 + 56 * v10 + 40) = v22;
          ++HIDWORD(v18);
        }
        __int16 v13 = v19;
        uint64_t v19 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, v11);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
      }
      v5 += 56;
      v6 -= 56;
    }
    while (v6);
    unint64_t v14 = HIDWORD(v18);
  }
  else
  {
LABEL_17:
    unint64_t v14 = 0;
  }
  WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v17, v14);
  uint64_t v19 = v17;
  uint64_t v15 = v18;
  int v17 = 0;
  uint64_t v18 = 0;
  *(void *)&long long v20 = v15;
  DWORD2(v20) = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()((uint64_t *)(v1 + 40));
  if (DWORD2(v20) != -1) {
    ((void (*)(long long *, WTF::StringImpl **))off_1EE9FDBD8[DWORD2(v20)])(&v23, &v19);
  }
  return WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v16);
}

void sub_1992ECF20(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 != -1) {
    ((void (*)(char *, WTF::StringImpl **))off_1EE9FDBD8[a14])(&a19, &a12);
  }
  WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<double>,WTF::DefaultHash<double>>,double>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 - 8);
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  double v7 = *(double *)(a1 + 8 * v6);
  if (*(void *)&v7 == a2) {
    return 1;
  }
  int v9 = 1;
  do
  {
    BOOL v8 = v7 != INFINITY;
    if (v7 == INFINITY) {
      break;
    }
    unsigned int v6 = (v6 + v9) & v2;
    double v7 = *(double *)(a1 + 8 * v6);
    ++v9;
  }
  while (*(void *)&v7 != a2);
  return v8;
}

void WebKit::WebExtensionContext::addListener(uint64_t a1, uint64_t a2, int a3, uint8_t a4)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  WebKit::WebProcessProxy::webPage(a2, &v76);
  if (!v76) {
    return;
  }
  BOOL v8 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v73 = v77;
    if (v77) {
      uint64_t v74 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v74 = &stru_1EEA10550;
    }
    *(_DWORD *)buf = 67240450;
    *(_DWORD *)&buf[4] = a3;
    LOWORD(v79) = 2114;
    *(void *)((char *)&v79 + 2) = v74;
    _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Registered event listener for type %{public}hhu in %{public}@ world", buf, 0x12u);
    if (v73)
    {
      if (*(_DWORD *)v73 == 2) {
        WTF::StringImpl::destroy(v73, v75);
      }
      else {
        *(_DWORD *)v73 -= 2;
      }
    }
  }
  if (!WebKit::WebExtension::backgroundContentIsPersistent(*(id **)(a1 + 64))
    && WebKit::WebExtensionContext::isBackgroundPage(a1, a2))
  {
    int v9 = (uint64_t *)(a1 + 296);
    uint64_t v10 = *(void *)(a1 + 296);
    if (v10
      || (WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::expand((uint64_t *)(a1 + 296), 0), (uint64_t v10 = *v9) != 0))
    {
      int v11 = *(_DWORD *)(v10 - 8);
    }
    else
    {
      int v11 = 0;
    }
    unsigned int v12 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
    unsigned int v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
    unsigned int v14 = v11 & (v13 ^ HIWORD(v13));
    uint64_t v15 = (void *)(v10 + 8 * v14);
    int v16 = *(unsigned __int8 *)v15;
    if (v16 != 255)
    {
      int v17 = 0;
      int v18 = 1;
      while (v16 != a3)
      {
        if (v16 == 254) {
          int v17 = v15;
        }
        unsigned int v14 = (v14 + v18) & v11;
        uint64_t v15 = (void *)(v10 + 8 * v14);
        int v16 = *(unsigned __int8 *)v15;
        ++v18;
        if (v16 == 255)
        {
          if (v17)
          {
            *(unsigned char *)int v17 = -1;
            *((_DWORD *)v17 + 1) = 0;
            --*(_DWORD *)(*v9 - 16);
            uint64_t v15 = v17;
          }
          goto LABEL_16;
        }
      }
      goto LABEL_25;
    }
LABEL_16:
    *(unsigned char *)uint64_t v15 = a3;
    *((_DWORD *)v15 + 1) = 0;
    uint64_t v19 = *v9;
    if (*v9) {
      int v20 = *(_DWORD *)(v19 - 12) + 1;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(v19 - 12) = v20;
    uint64_t v21 = *v9;
    if (*v9) {
      int v22 = *(_DWORD *)(v21 - 12);
    }
    else {
      int v22 = 0;
    }
    uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
    unint64_t v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 > 2 * v23) {
        goto LABEL_25;
      }
    }
    else if (3 * v24 > 4 * v23)
    {
LABEL_25:
      ++*((_DWORD *)v15 + 1);
      goto LABEL_26;
    }
    uint64_t v15 = WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::expand((uint64_t *)(a1 + 296), (unsigned __int8 *)v15);
    goto LABEL_25;
  }
LABEL_26:
  buf[0] = a3;
  buf[1] = a4;
  __int16 v25 = (uint64_t *)(a1 + 304);
  uint64_t v26 = *(void *)(a1 + 304);
  if (v26
    || (WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::expand((uint64_t *)(a1 + 304), 0), (uint64_t v26 = *v25) != 0))
  {
    int v27 = *(_DWORD *)(v26 - 8);
  }
  else
  {
    int v27 = 0;
  }
  unsigned int v29 = WTF::PairHash<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>::hash(buf) & v27;
  __int16 v30 = (unsigned __int8 *)(v26 + 24 * v29);
  int v31 = *v30;
  int v32 = v30[1];
  uint8_t v33 = buf[0];
  uint8_t v34 = buf[1];
  if (v31 != 255 || v32 != 255)
  {
    long long v35 = 0;
    int v36 = 1;
    while (v31 != buf[0] || v32 != buf[1])
    {
      if (v31 == 254) {
        long long v35 = v30;
      }
      unsigned int v29 = (v29 + v36) & v27;
      __int16 v30 = (unsigned __int8 *)(v26 + 24 * v29);
      int v31 = *v30;
      int v32 = v30[1];
      ++v36;
      if (v31 == 255 && v32 == 255)
      {
        if (v35)
        {
          *(_WORD *)long long v35 = -1;
          *((void *)v35 + 1) = 0;
          *((void *)v35 + 2) = 0;
          --*(_DWORD *)(*v25 - 16);
          uint8_t v33 = buf[0];
          uint8_t v34 = buf[1];
          __int16 v30 = v35;
        }
        goto LABEL_40;
      }
    }
    goto LABEL_51;
  }
LABEL_40:
  *__int16 v30 = v33;
  v30[1] = v34;
  unint64_t v37 = (unsigned int **)*((void *)v30 + 1);
  *((void *)v30 + 1) = 0;
  if (v37) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v37, v28);
  }
  *((void *)v30 + 2) = 0;
  uint64_t v38 = *v25;
  if (*v25) {
    int v39 = *(_DWORD *)(v38 - 12) + 1;
  }
  else {
    int v39 = 1;
  }
  *(_DWORD *)(v38 - 12) = v39;
  uint64_t v40 = *v25;
  if (*v25) {
    int v41 = *(_DWORD *)(v40 - 12);
  }
  else {
    int v41 = 0;
  }
  uint64_t v42 = (*(_DWORD *)(v40 - 16) + v41);
  unint64_t v43 = *(unsigned int *)(v40 - 4);
  if (v43 > 0x400)
  {
    if (v43 > 2 * v42) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (3 * v43 <= 4 * v42) {
LABEL_50:
  }
    __int16 v30 = (unsigned __int8 *)WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::expand(v25, v30);
LABEL_51:
  uint64_t v44 = v76;
  uint64_t v45 = (uint64_t *)(v30 + 8);
  unsigned int v46 = *((_DWORD *)v30 + 4);
  unsigned int v47 = *((_DWORD *)v30 + 5);
  *((_DWORD *)v30 + 4) = v46 + 1;
  if (v46 > v47) {
    WTF::WeakHashMap<WebKit::WebPageProxy,unsigned int,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)(v30 + 8), v28);
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v44 + 24), v44 + 16);
  uint64_t v49 = *(atomic_uint **)(v44 + 24);
  atomic_fetch_add(v49, 1u);
  atomic_fetch_add(v49, 1u);
  if (v49 && atomic_fetch_add(v49, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v49);
    WTF::fastFree((WTF *)v49, v48);
  }
  uint64_t v50 = *v45;
  if (*v45
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v45, 0), (uint64_t v50 = *v45) != 0))
  {
    char v51 = 0;
    int v52 = *(_DWORD *)(v50 - 8);
  }
  else
  {
    int v52 = 0;
    char v51 = 1;
  }
  uint64_t v53 = 0;
  unint64_t v54 = ((unint64_t)v49 + ~((void)v49 << 32)) ^ (((unint64_t)v49 + ~((void)v49 << 32)) >> 22);
  unint64_t v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
  unint64_t v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
  unsigned int v57 = (v56 >> 31) ^ v56;
  for (int i = 1; ; ++i)
  {
    unsigned int v59 = v57 & v52;
    uint64_t v60 = (atomic_uint **)(v50 + 16 * v59);
    uint64_t v61 = *v60;
    if (*v60 != (atomic_uint *)-1) {
      break;
    }
    uint64_t v53 = v50 + 16 * v59;
LABEL_65:
    unsigned int v57 = i + v59;
  }
  if (!v61)
  {
    if (v53)
    {
      *(void *)uint64_t v53 = 0;
      *(void *)(v53 + 8) = 0;
      --*(_DWORD *)(*v45 - 16);
      *(void *)uint64_t v53 = v49;
    }
    else
    {
      NSError *v60 = v49;
      uint64_t v53 = v50 + 16 * v59;
    }
    *(_DWORD *)(v53 + 8) = 0;
    uint64_t v64 = *v45;
    if (*v45) {
      int v65 = *(_DWORD *)(v64 - 12) + 1;
    }
    else {
      int v65 = 1;
    }
    *(_DWORD *)(v64 - 12) = v65;
    uint64_t v66 = *v45;
    if (*v45) {
      int v67 = *(_DWORD *)(v66 - 12);
    }
    else {
      int v67 = 0;
    }
    uint64_t v68 = (*(_DWORD *)(v66 - 16) + v67);
    unint64_t v69 = *(unsigned int *)(v66 - 4);
    if (v69 > 0x400)
    {
      if (v69 <= 2 * v68)
      {
LABEL_83:
        uint64_t v53 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v45, (unsigned int **)v53);
        uint64_t v66 = *v45;
        if (*v45) {
          unint64_t v69 = *(unsigned int *)(v66 - 4);
        }
        else {
          unint64_t v69 = 0;
        }
      }
    }
    else if (3 * v69 <= 4 * v68)
    {
      goto LABEL_83;
    }
    uint64_t v63 = v66 + 16 * v69;
    uint64_t v60 = (atomic_uint **)v53;
    goto LABEL_89;
  }
  if (v61 != v49) {
    goto LABEL_65;
  }
  if (v51) {
    uint64_t v62 = 0;
  }
  else {
    uint64_t v62 = *(unsigned int *)(v50 - 4);
  }
  uint64_t v63 = v50 + 16 * v62;
  if (v49 && atomic_fetch_add(v49, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v49);
    WTF::fastFree((WTF *)v49, (void *)v53);
  }
LABEL_89:
  *(void *)buf = v45;
  *(void *)&long long v79 = v60;
  *((void *)&v79 + 1) = v63;
  uint64_t v70 = *v45;
  if (*v45)
  {
    uint64_t v71 = *(unsigned int *)(v70 - 4);
    uint64_t v72 = v70 + 16 * v71;
  }
  else
  {
    uint64_t v72 = 0;
    uint64_t v71 = 0;
  }
  uint64_t v80 = v72;
  uint64_t v81 = v70 + 16 * v71;
  int v82 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(buf);
  ++*(_DWORD *)(v79 + 8);
  if (v76) {
    CFRelease(*(CFTypeRef *)(v76 + 8));
  }
}

void sub_1992ED700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::removeListener(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  WebKit::WebProcessProxy::webPage(a2, &v86);
  if (v86)
  {
    uint64_t v10 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v77 = v87;
      if (v87) {
        uint64_t v78 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v78 = &stru_1EEA10550;
      }
      *(_DWORD *)buf = 134349570;
      *(void *)&buf[4] = a5;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&buf[14] = a3;
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v78;
      _os_log_debug_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEBUG, "Unregistered %{public}zu event listener(s) for type %{public}hhu in %{public}@ world", buf, 0x1Cu);
      if (v77)
      {
        if (*(_DWORD *)v77 == 2) {
          WTF::StringImpl::destroy(v77, v79);
        }
        else {
          *(_DWORD *)v77 -= 2;
        }
      }
    }
    if (!WebKit::WebExtension::backgroundContentIsPersistent(*(id **)(a1 + 64)))
    {
      BOOL v11 = !WebKit::WebExtensionContext::isBackgroundPage(a1, a2);
      if (!a5) {
        LOBYTE(v11) = 1;
      }
      if (!v11)
      {
        uint64_t v12 = 0;
        unsigned int v13 = (uint64_t *)(a1 + 296);
        unsigned int v14 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
        unsigned int v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
        int v16 = v15 ^ HIWORD(v15);
        do
        {
          uint64_t v17 = *v13;
          if (*v13)
          {
            unsigned int v18 = *(_DWORD *)(v17 - 8);
            uint64_t v19 = v18 & v16;
            int v20 = *(unsigned __int8 *)(v17 + 8 * v19);
            if (v20 != a3)
            {
              int v21 = 1;
              while (v20 != 255)
              {
                uint64_t v19 = (v19 + v21) & v18;
                int v20 = *(unsigned __int8 *)(v17 + 8 * v19);
                ++v21;
                if (v20 == a3) {
                  goto LABEL_15;
                }
              }
              uint64_t v19 = *(unsigned int *)(v17 - 4);
            }
LABEL_15:
            if (v19 != *(_DWORD *)(v17 - 4))
            {
              uint64_t v22 = v17 + 8 * v19;
              if (*(_DWORD *)(v22 + 4) == 1)
              {
                *(unsigned char *)uint64_t v22 = -2;
                ++*(_DWORD *)(*v13 - 16);
                uint64_t v23 = *v13;
                if (*v13) {
                  int v24 = *(_DWORD *)(v23 - 12) - 1;
                }
                else {
                  int v24 = -1;
                }
                *(_DWORD *)(v23 - 12) = v24;
                uint64_t v25 = *v13;
                if (*v13)
                {
                  unsigned int v26 = 6 * *(_DWORD *)(v25 - 12);
                  unsigned int v27 = *(_DWORD *)(v25 - 4);
                  if (v26 < v27 && v27 >= 9) {
                    WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::rehash((uint64_t *)(a1 + 296), v27 >> 1, 0);
                  }
                }
              }
              else
              {
                --*(_DWORD *)(v22 + 4);
              }
            }
          }
          ++v12;
        }
        while (v12 != a5);
      }
    }
    buf[0] = a3;
    buf[1] = a4;
    uint64_t v29 = *(void *)(a1 + 304);
    if (!v29) {
      goto LABEL_127;
    }
    int v30 = *(_DWORD *)(v29 - 8);
    int v31 = (uint64_t *)(a1 + 304);
    unsigned int v33 = WTF::PairHash<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>::hash(buf) & v30;
    uint8_t v34 = (unsigned __int8 *)(v29 + 24 * v33);
    int v35 = *v34;
    int v36 = v34[1];
    if (v35 == buf[0] && v36 == buf[1])
    {
LABEL_43:
      uint64_t v40 = *v31;
      if (!*v31)
      {
LABEL_48:
        if ((unsigned __int8 *)v40 != v34)
        {
          if (a5)
          {
            uint64_t v41 = 0;
            uint64_t v42 = (uint64_t *)(v34 + 8);
            while (1)
            {
              uint64_t v43 = *(void *)(v86 + 24);
              ++*((_DWORD *)v34 + 4);
              if (!v43) {
                break;
              }
              uint64_t v44 = *v42;
              if (!*(void *)(v43 + 8)) {
                goto LABEL_60;
              }
              if (v44)
              {
                int v45 = *(_DWORD *)(v44 - 8);
                unint64_t v46 = (~(v43 << 32) + v43) ^ ((unint64_t)(~(v43 << 32) + v43) >> 22);
                unint64_t v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
                unint64_t v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
                unsigned int v49 = v45 & ((v48 >> 31) ^ v48);
                for (int i = 1; ; ++i)
                {
                  uint64_t v51 = v49;
                  uint64_t v52 = *(void *)(v44 + 16 * v49);
                  if (v52 != -1)
                  {
                    if (!v52)
                    {
                      uint64_t v56 = *(unsigned int *)(v44 - 4);
                      unsigned int v57 = (unsigned int **)(v44 + 16 * v56);
                      int v58 = v57;
                      goto LABEL_67;
                    }
                    if (v52 == v43) {
                      break;
                    }
                  }
                  unsigned int v49 = (v51 + i) & v45;
                }
                unsigned int v57 = (unsigned int **)(v44 + 16 * v51);
                uint64_t v56 = *(unsigned int *)(v44 - 4);
                int v58 = (unsigned int **)(v44 + 16 * v56);
LABEL_67:
                uint64_t v87 = (WTF::StringImpl *)(v34 + 8);
                uint64_t v88 = v57;
                unint64_t v54 = (unsigned int **)(v44 + 16 * v56);
                uint64_t v89 = v58;
              }
              else
              {
                unint64_t v54 = 0;
                uint64_t v56 = 0;
                uint64_t v87 = (WTF::StringImpl *)(v34 + 8);
                uint64_t v88 = 0;
                uint64_t v89 = 0;
              }
              unint64_t v55 = (unsigned int **)(v44 + 16 * v56);
LABEL_69:
              uint64_t v90 = v54;
              uint64_t v91 = v55;
              int v92 = 0;
              WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v87);
              if (v44)
              {
                uint64_t v59 = *(unsigned int *)(v44 - 4);
                uint64_t v60 = v44 + 16 * v59;
              }
              else
              {
                uint64_t v60 = 0;
                uint64_t v59 = 0;
              }
              *(void *)buf = v34 + 8;
              *(void *)&uint8_t buf[8] = v60;
              *(void *)&buf[16] = v60;
              *(void *)&buf[24] = v60;
              uint64_t v94 = v44 + 16 * v59;
              int v95 = 0;
              WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(buf);
              uint64_t v61 = v88;
              if (v88 != *(unsigned int ***)&buf[8])
              {
                if (*((_DWORD *)v88 + 2) == 1)
                {
                  if (v44)
                  {
                    uint64_t v62 = (unsigned int **)(v44 + 16 * *(unsigned int *)(v44 - 4));
                    if (v62 == v88)
                    {
LABEL_88:
                      unsigned int v69 = *((_DWORD *)v34 + 4);
                      unsigned int v70 = *((_DWORD *)v34 + 5);
                      *((_DWORD *)v34 + 4) = v69 + 1;
                      if (v69 > v70) {
                        WTF::WeakHashMap<WebKit::WebPageProxy,unsigned int,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)(v34 + 8), v32);
                      }
                      goto LABEL_90;
                    }
                  }
                  else
                  {
                    uint64_t v62 = 0;
                  }
                  if (v62 != v88)
                  {
                    uint64_t v63 = *v88;
                    *uint64_t v88 = 0;
                    if (v63 && atomic_fetch_add((atomic_uint *volatile)v63, 0xFFFFFFFF) == 1)
                    {
                      atomic_store(1u, v63);
                      WTF::fastFree((WTF *)v63, v32);
                    }
                    *uint64_t v61 = (unsigned int *)-1;
                    ++*(_DWORD *)(*v42 - 16);
                    uint64_t v64 = *v42;
                    if (*v42) {
                      int v65 = *(_DWORD *)(v64 - 12) - 1;
                    }
                    else {
                      int v65 = -1;
                    }
                    *(_DWORD *)(v64 - 12) = v65;
                    uint64_t v66 = *v42;
                    if (*v42)
                    {
                      unsigned int v67 = 6 * *(_DWORD *)(v66 - 12);
                      unsigned int v68 = *(_DWORD *)(v66 - 4);
                      if (v67 < v68 && v68 >= 9) {
                        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v34 + 1, v68 >> 1, 0);
                      }
                    }
                  }
                  goto LABEL_88;
                }
                --*((_DWORD *)v88 + 2);
              }
LABEL_90:
              if (++v41 == a5) {
                goto LABEL_94;
              }
            }
            uint64_t v44 = *v42;
LABEL_60:
            if (v44)
            {
              uint64_t v53 = *(unsigned int *)(v44 - 4);
              unint64_t v54 = (unsigned int **)(v44 + 16 * v53);
            }
            else
            {
              unint64_t v54 = 0;
              uint64_t v53 = 0;
            }
            uint64_t v87 = (WTF::StringImpl *)(v34 + 8);
            uint64_t v88 = v54;
            unint64_t v55 = (unsigned int **)(v44 + 16 * v53);
            uint64_t v89 = v54;
            goto LABEL_69;
          }
LABEL_94:
          uint64_t v72 = (unsigned int ***)(v34 + 8);
          uint64_t v71 = (unsigned int **)*((void *)v34 + 1);
          if (!v71 || !*((_DWORD *)v71 - 3)) {
            goto LABEL_115;
          }
          WTF::WeakHashMap<WebKit::WebPageProxy,unsigned int,WTF::DefaultWeakPtrImpl>::begin((void **)v34 + 1, (uint64_t)buf);
          uint64_t v73 = *v72;
          if (*v72)
          {
            uint64_t v74 = *((unsigned int *)v73 - 1);
            uint64_t v75 = &v73[2 * v74];
          }
          else
          {
            uint64_t v75 = 0;
            uint64_t v74 = 0;
          }
          uint64_t v87 = (WTF::StringImpl *)(v34 + 8);
          uint64_t v88 = v75;
          uint64_t v89 = v75;
          uint64_t v90 = v75;
          uint64_t v91 = &v73[2 * v74];
          int v92 = 0;
          WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v87);
          if (*(unsigned int ***)&buf[8] == v88)
          {
            uint64_t v71 = *v72;
            if (*v72)
            {
              *uint64_t v72 = 0;
              WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v71, v32);
              uint64_t v71 = (unsigned int **)*((void *)v34 + 1);
              *((_DWORD *)v34 + 4) = 0;
              if (v71)
              {
                unsigned int v76 = *((_DWORD *)v71 - 3);
                if (v76 > 0x7FFFFFFE) {
                  unsigned int v76 = 0x7FFFFFFF;
                }
              }
              else
              {
                unsigned int v76 = 0;
              }
            }
            else
            {
              unsigned int v76 = 0;
              *((_DWORD *)v34 + 4) = 0;
            }
            *((_DWORD *)v34 + 5) = 2 * v76;
LABEL_115:
            uint64_t v80 = (unsigned __int8 *)*v31;
            if (!*v31 || (v80 += 24 * *((unsigned int *)v80 - 1), v80 != v34))
            {
              if (v80 != v34)
              {
                *uint8_t v34 = -2;
                if (v71) {
                  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v71, v32);
                }
                ++*(_DWORD *)(*v31 - 16);
                uint64_t v81 = *v31;
                if (*v31) {
                  int v82 = *(_DWORD *)(v81 - 12) - 1;
                }
                else {
                  int v82 = -1;
                }
                *(_DWORD *)(v81 - 12) = v82;
                uint64_t v83 = *v31;
                if (*v31)
                {
                  unsigned int v84 = 6 * *(_DWORD *)(v83 - 12);
                  unsigned int v85 = *(_DWORD *)(v83 - 4);
                  if (v84 < v85 && v85 >= 9) {
                    WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::rehash(v31, v85 >> 1, 0);
                  }
                }
              }
            }
          }
        }
LABEL_127:
        if (v86) {
          CFRelease(*(CFTypeRef *)(v86 + 8));
        }
        return;
      }
    }
    else
    {
      int v38 = 1;
      while (v35 != 255 || v36 != 255)
      {
        unsigned int v33 = (v33 + v38) & v30;
        uint8_t v34 = (unsigned __int8 *)(v29 + 24 * v33);
        int v35 = *v34;
        int v36 = v34[1];
        ++v38;
        if (v35 == buf[0] && v36 == buf[1]) {
          goto LABEL_43;
        }
      }
      uint64_t v40 = *v31;
      if (!*v31) {
        goto LABEL_127;
      }
      uint8_t v34 = (unsigned __int8 *)(v40 + 24 * *(unsigned int *)(v40 - 4));
    }
    v40 += 24 * *(unsigned int *)(v40 - 4);
    goto LABEL_48;
  }
}

void sub_1992EDF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

void *WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t Table = WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  BOOL v11 = 0;
  if (v7)
  {
    uint64_t v7 = v7;
    uint64_t v12 = (unsigned __int8 *)v6;
    do
    {
      if (*v12 <= 0xFDu)
      {
        unsigned int v13 = (void *)WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::lookupForReinsert(a1, v12);
        void *v13 = *(void *)v12;
        if (v12 == a3) {
          BOOL v11 = v13;
        }
      }
      v12 += 8;
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::allocateTable(unsigned int a1)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)(8 * a1 + 16));
  uint64_t result = v2 + 16;
  if (a1)
  {
    uint64_t v4 = a1;
    unsigned int v5 = (_DWORD *)(v2 + 20);
    do
    {
      *((unsigned char *)v5 - 4) = -1;
      *unsigned int v5 = 0;
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::lookupForReinsert(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  int v4 = 0;
  unsigned int v5 = 9 * ((~(*a2 << 15) + *a2) ^ ((~(*a2 << 15) + *a2) >> 10));
  unsigned int v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    uint64_t v7 = v6 & v3;
    unsigned int v6 = ++v4 + v7;
  }
  while (*(unsigned __int8 *)(v2 + 8 * v7) != 255);
  return v2 + 8 * v7;
}

uint64_t WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    uint64_t v9 = a2;
    uint64_t v10 = (void *)(v7 + 24);
    do
    {
      *((_WORD *)v10 - 4) = -1;
      *uint64_t v10 = 0;
      v10[1] = 0;
      v10 += 3;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      unsigned int v13 = (unsigned __int8 *)(v4 + 24 * v11);
      int v14 = *v13;
      if (v14 != 254)
      {
        if (v14 == 255 && v13[1] == 255)
        {
          unsigned int v15 = *(unsigned int ***)(v4 + 24 * v11 + 8);
          if (v15) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v15, v8);
          }
        }
        else
        {
          uint64_t v16 = *a1;
          if (*a1) {
            unsigned int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            unsigned int v17 = 0;
          }
          int v18 = WTF::PairHash<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>::hash((unsigned __int8 *)(v4 + 24 * v11));
          int v19 = 0;
          do
          {
            do
            {
              unsigned int v20 = v18 & v17;
              int v21 = (unsigned __int8 *)(v16 + 24 * (v18 & v17));
              int v18 = ++v19 + (v18 & v17);
            }
            while (*v21 != 255);
          }
          while (v21[1] != 255);
          uint64_t v22 = v16 + 24 * v20;
          uint64_t v25 = *(unsigned int ***)(v22 + 8);
          int v24 = (void *)(v22 + 8);
          uint64_t v23 = v25;
          if (v25) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v23, v8);
          }
          *(_WORD *)int v21 = *(_WORD *)v13;
          uint64_t v26 = v4 + 24 * v11;
          void *v24 = 0;
          uint64_t v27 = *(void *)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          void *v24 = v27;
          *(void *)(v16 + 24 * v20 + 16) = *(void *)(v26 + 16);
          id v28 = *(unsigned int ***)(v26 + 8);
          if (v28) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v28, v8);
          }
          if (v13 == a3) {
            uint64_t v12 = v16 + 24 * v20;
          }
        }
      }
      ++v11;
    }
    while (v11 != v5);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::WeakHashMap<WebKit::WebPageProxy,unsigned int,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)result;
  if (*(void *)result)
  {
    int v4 = *(_DWORD *)(v3 - 4);
    if (!v4) {
      goto LABEL_21;
    }
    int v5 = 0;
    unsigned int v6 = v4 - 1;
    do
    {
      uint64_t v7 = (uint64_t *)(v3 + 16 * v6);
      uint64_t result = *v7;
      if ((unint64_t)(*v7 + 1) >= 2 && !*(void *)(result + 8))
      {
        uint64_t *v7 = 0;
        if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)result);
          uint64_t result = WTF::fastFree((WTF *)result, a2);
        }
        uint64_t *v7 = -1;
        ++v5;
      }
    }
    while ((unint64_t)v6--);
    uint64_t v3 = *(void *)v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      uint64_t v9 = *(void *)v2;
      if (*(void *)v2) {
        int v10 = *(_DWORD *)(v9 - 12);
      }
      else {
        int v10 = 0;
      }
      *(_DWORD *)(v9 - 12) = v10 - v5;
      uint64_t v3 = *(void *)v2;
    }
    if (v3)
    {
      unsigned int v11 = *(_DWORD *)(v3 - 4);
      uint64_t v12 = *(unsigned int *)(v3 - 12);
      if (v11 >= 9 && 6 * (int)v12 < v11)
      {
        unsigned int v16 = (v12 - 1) | ((v12 - 1) >> 1) | (((v12 - 1) | ((v12 - 1) >> 1)) >> 2);
        unsigned int v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
        unint64_t v18 = (v17 | HIWORD(v17)) + 1;
        if (v18 > 0x400)
        {
          if (v18 > 2 * v12) {
            goto LABEL_32;
          }
        }
        else if (3 * v18 > 4 * v12)
        {
LABEL_30:
          double v19 = (double)v12;
          double v20 = (double)v18;
          double v21 = 0.604166667;
          goto LABEL_33;
        }
        LODWORD(v18) = 2 * v18;
        if (v18 <= 0x400) {
          goto LABEL_30;
        }
LABEL_32:
        double v19 = (double)v12;
        double v20 = (double)v18;
        double v21 = 0.416666667;
LABEL_33:
        if (v20 * v21 <= v19) {
          LODWORD(v18) = 2 * v18;
        }
        if (v18 <= 8) {
          unsigned int v22 = 8;
        }
        else {
          unsigned int v22 = v18;
        }
        uint64_t result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v2, v22, 0);
        uint64_t v3 = *(void *)v2;
        *(_DWORD *)(v2 + 8) = 0;
        if (!v3)
        {
          unsigned int v14 = 0;
          goto LABEL_25;
        }
LABEL_22:
        unsigned int v14 = *(_DWORD *)(v3 - 12);
        int v15 = 0x7FFFFFFF;
        if (v14 >= 0x7FFFFFFF) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
LABEL_21:
      *(_DWORD *)(v2 + 8) = 0;
      goto LABEL_22;
    }
  }
  unsigned int v14 = 0;
  *(_DWORD *)(v2 + 8) = 0;
LABEL_25:
  int v15 = v14;
LABEL_26:
  *(_DWORD *)(v2 + 12) = 2 * v15;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      unsigned int v13 = (unsigned int **)(v6 + 16 * v11);
      unsigned int v14 = *v13;
      if (*v13 != (unsigned int *)-1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = ((unint64_t)v14 + ~((void)v14 << 32)) ^ (((unint64_t)v14 + ~((void)v14 << 32)) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 16 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          uint64_t v24 = v15 + 16 * v22;
          *(void *)uint64_t v24 = 0;
          uint64_t v25 = *v13;
          unsigned __int8 *v13 = 0;
          *(void *)uint64_t v24 = v25;
          *(_DWORD *)(v24 + 8) = *(_DWORD *)(v6 + 16 * v11 + 8);
          uint64_t v26 = *v13;
          unsigned __int8 *v13 = 0;
          if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v26);
            WTF::fastFree((WTF *)v26, v10);
          }
          if (v13 == a3) {
            uint64_t v12 = v24;
          }
        }
        else
        {
          unsigned __int8 *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

uint64_t WebKit::WebExtensionContext::extensionIsAllowedIncognitoAccess(uint64_t a1, uint64_t *a2)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a2);
}

BOOL WebKit::WebExtensionContext::isMenusMessageAllowed(WebKit::WebExtensionContext *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (!v1 || !*(void *)(v1 + 8)) {
    return 0;
  }
  MEMORY[0x19972EAD0](&v9, @"contextMenus");
  if ((WebKit::WebExtensionContext::permissionState(this, &v9, 0, 2) & 0xFFFFFFFE) == 2)
  {
    BOOL v4 = 1;
  }
  else
  {
    MEMORY[0x19972EAD0](&v8, @"menus");
    BOOL v4 = (WebKit::WebExtensionContext::permissionState(this, &v8, 0, 2) & 0xFFFFFFFE) == 2;
    unsigned int v5 = v8;
    int v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  uint64_t v6 = v9;
  uint64_t v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return v4;
}

void sub_1992EE830(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionMenuItem *WebKit::WebExtensionContext::menusCreate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(*(WTF **)(a1 + 696), (WTF::StringImpl **)a2, (const WTF::StringImpl *)a3))
  {
    WebKit::toWebExtensionError<>((WebKit *)@"menus.create()", 0, &cfstr_IdentifierIsAl.isa, v7, &v49);
    int v8 = v49;
    unsigned int v49 = 0;
    uint64_t v50 = v8;
    char v51 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
    goto LABEL_14;
  }
  int v10 = (WTF **)(a1 + 696);
  if (*(unsigned char *)(a2 + 16))
  {
    if ((WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(*v10, (WTF::StringImpl **)(a2 + 8), v6) & 1) == 0)
    {
      WebKit::toWebExtensionError<>((WebKit *)@"menus.create()", 0, &cfstr_ParentMenuItem.isa, v11, &v49);
      unsigned int v20 = v49;
      unsigned int v49 = 0;
      uint64_t v50 = v20;
      char v51 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
LABEL_14:
      if (v51)
      {
        int v21 = v50;
        uint64_t v50 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v9);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
      }
      uint64_t result = v49;
      unsigned int v49 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WebKit::WebExtensionMenuItem *)WTF::StringImpl::destroy(result, v9);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      return result;
    }
    if (*(unsigned char *)(a2 + 16)
      && WebKit::isAncestorOrSelf((WebKit *)a1, (WTF **)(a2 + 8), (const WTF::StringImpl **)a2, (const WTF::String *)v11))
    {
      WebKit::toWebExtensionError<>((WebKit *)@"menus.create()", 0, &cfstr_ParentMenuItem_0.isa, v12, &v49);
      unsigned int v13 = v49;
      unsigned int v49 = 0;
      uint64_t v50 = v13;
      char v51 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
      goto LABEL_14;
    }
  }
  unsigned int v14 = (WebKit::WebExtensionMenuItem *)WTF::fastMalloc((WTF *)0xA0);
  WebKit::WebExtensionMenuItem::WebExtensionMenuItem(v14, (WebKit::WebExtensionContext *)a1, (const WebKit::WebExtensionMenuItemParameters *)a2);
  unsigned int v49 = v14;
  int v16 = *v10;
  if (*v10
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(a1 + 696)),
        (int v16 = *v10) != 0))
  {
    int v17 = *((_DWORD *)v16 - 2);
  }
  else
  {
    int v17 = 0;
  }
  unsigned int v18 = *(_DWORD *)(*(void *)a2 + 16);
  unint64_t v48 = a3;
  if (v18 >= 0x100) {
    unsigned int v19 = v18 >> 8;
  }
  else {
    unsigned int v19 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a2);
  }
  uint64_t v23 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v25 = v19 & v17;
    uint64_t v26 = (uint64_t *)((char *)v16 + 16 * v25);
    uint64_t v27 = (WTF *)*v26;
    if (*v26 == -1)
    {
      uint64_t v23 = (uint64_t *)((char *)v16 + 16 * v25);
      goto LABEL_30;
    }
    if (!v27)
    {
      if (v23)
      {
        uint64_t *v23 = 0;
        v23[1] = 0;
        --*((_DWORD *)*v10 - 4);
        uint64_t v26 = v23;
      }
      WTF::String::operator=(v26, (WTF::StringImpl **)a2);
      int v30 = v48;
      int v31 = v49;
      ++*(_DWORD *)v49;
      int v32 = (WebKit::WebExtensionMenuItem *)v26[1];
      v26[1] = (uint64_t)v31;
      if (v32) {
        WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v32, v29);
      }
      unsigned int v33 = *v10;
      if (*v10) {
        int v34 = *((_DWORD *)v33 - 3) + 1;
      }
      else {
        int v34 = 1;
      }
      *((_DWORD *)v33 - 3) = v34;
      unint64_t v37 = *v10;
      if (*v10) {
        int v38 = *((_DWORD *)v37 - 3);
      }
      else {
        int v38 = 0;
      }
      uint64_t v39 = (*((_DWORD *)v37 - 4) + v38);
      unint64_t v40 = *((unsigned int *)v37 - 1);
      if (v40 > 0x400)
      {
        if (v40 > 2 * v39) {
          goto LABEL_46;
        }
      }
      else if (3 * v40 > 4 * v39)
      {
        goto LABEL_46;
      }
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(a1 + 696));
      goto LABEL_46;
    }
    if (WTF::equal(v27, *(const WTF::StringImpl **)a2, v15)) {
      break;
    }
LABEL_30:
    unsigned int v19 = i + v25;
  }
  int v35 = (char *)v16 + 16 * v25;
  ++*(_DWORD *)v14;
  int v36 = (WebKit::WebExtensionMenuItem *)*((void *)v35 + 1);
  *((void *)v35 + 1) = v14;
  int v30 = v48;
  if (v36) {
    WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v36, v28);
  }
LABEL_46:
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v41 = (uint64_t *)(a1 + 704);
    uint64_t v42 = *(unsigned int *)(a1 + 716);
    if (v42 == *(_DWORD *)(a1 + 712))
    {
      uint64_t v43 = (WTF::StringImpl **)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v49);
      uint64_t v42 = *(unsigned int *)(a1 + 716);
      uint64_t v44 = *(void *)(a1 + 704);
      int v45 = *v43;
      ++*(_DWORD *)*v43;
    }
    else
    {
      uint64_t v44 = *v41;
      int v45 = v49;
      ++*(_DWORD *)v49;
    }
    *(void *)(v44 + 8 * v42) = v45;
    *(_DWORD *)(a1 + 716) = v42 + 1;
  }
  LOBYTE(v50) = 0;
  char v51 = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(v30);
  if (v51)
  {
    unint64_t v47 = v50;
    uint64_t v50 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2) {
        WTF::StringImpl::destroy(v47, v46);
      }
      else {
        *(_DWORD *)v47 -= 2;
      }
    }
  }
  uint64_t result = v49;
  unsigned int v49 = 0;
  if (result) {
    return WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(result, v46);
  }
  return result;
}

void sub_1992EEC64(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::isAncestorOrSelf(WebKit *this, WTF **a2, const WTF::StringImpl **a3, const WTF::String *a4)
{
  if (WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3)) {
    return 1;
  }
  if (!*a3) {
    return 0;
  }
  if (!*((_DWORD *)*a3 + 1)) {
    return 0;
  }
  uint64_t v9 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 87, a3, v7);
  if (!v9) {
    return 0;
  }
  uint64_t v12 = v9;
  ++*(_DWORD *)v9;
  uint64_t v13 = *((void *)v9 + 17);
  if (v13)
  {
    while (1)
    {
      uint64_t v14 = *(void *)(v13 + 8);
      if (!v14) {
        break;
      }
      ++*(_DWORD *)v14;
      if (WTF::equal(*(WTF **)(v14 + 32), *a2, v11))
      {
        WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref((WebKit::WebExtensionMenuItem *)v14, v15);
        uint64_t v8 = 1;
        goto LABEL_14;
      }
      ++*(_DWORD *)v14;
      WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v12, v15);
      WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref((WebKit::WebExtensionMenuItem *)v14, v16);
      uint64_t v13 = *(void *)(v14 + 136);
      uint64_t v12 = (WebKit::WebExtensionMenuItem *)v14;
      if (!v13)
      {
        uint64_t v8 = 0;
        uint64_t v12 = (WebKit::WebExtensionMenuItem *)v14;
        goto LABEL_14;
      }
    }
  }
  uint64_t v8 = 0;
LABEL_14:
  WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v12, v10);
  return v8;
}

void sub_1992EEE2C(_Unwind_Exception *a1, void *a2)
{
  WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v3, a2);
  WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v2, v5);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionMenuItem *WebKit::WebExtensionContext::menusUpdate(uint64_t *a1, WTF::StringImpl **a2, uint64_t a3, NSString *a4)
{
  BOOL v4 = (uint64_t *)a4;
  if (!*a2
    || !*((_DWORD *)*a2 + 1)
    || (uint64_t v8 = a1 + 87,
        (uint64_t v9 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1 + 87, a2, (const WTF::StringImpl *)a3)) == 0))
  {
    WebKit::toWebExtensionError<>((WebKit *)@"menus.update()", 0, &cfstr_MenuItemNotFou.isa, a4, &v52);
    unsigned int v19 = v52;
    uint64_t v52 = 0;
    uint64_t v53 = v19;
    char v54 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(v4);
    if (v54)
    {
      int v21 = v53;
      uint64_t v53 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v20);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
    }
    uint64_t result = v52;
    uint64_t v52 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WebKit::WebExtensionMenuItem *)WTF::StringImpl::destroy(result, v20);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  uint64_t v14 = v9;
  ++*(_DWORD *)v9;
  uint64_t v15 = *(const WTF::StringImpl **)a3;
  if (!*(void *)a3 || !*((_DWORD *)v15 + 1) || (WTF::equal(*a2, v15, v10) & 1) != 0) {
    goto LABEL_51;
  }
  int v16 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v8, a2, v10);
  uint64_t v17 = *v8;
  char v51 = v14;
  if (*v8)
  {
    unsigned int v18 = (WTF::StringImpl **)(v17 + 16 * *(unsigned int *)(v17 - 4));
    if (v18 == v16) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  if (v16)
  {
    unsigned int v18 = 0;
LABEL_21:
    if (v18 != v16)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v8, v16);
      uint64_t v17 = *v8;
    }
    if (v17) {
      goto LABEL_25;
    }
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v8);
  uint64_t v17 = *v8;
  if (!*v8)
  {
    int v23 = 0;
    goto LABEL_26;
  }
LABEL_25:
  int v23 = *(_DWORD *)(v17 - 8);
LABEL_26:
  unsigned int v24 = *(_DWORD *)(*(void *)a3 + 16);
  uint64_t v50 = v4;
  if (v24 >= 0x100) {
    unsigned int v25 = v24 >> 8;
  }
  else {
    unsigned int v25 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a3);
  }
  uint64_t v26 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v28 = v25 & v23;
    uint64_t v29 = (uint64_t *)(v17 + 16 * v28);
    int v30 = (WTF *)*v29;
    if (*v29 == -1)
    {
      uint64_t v26 = (uint64_t *)(v17 + 16 * v28);
      goto LABEL_35;
    }
    if (!v30)
    {
      if (v26)
      {
        *uint64_t v26 = 0;
        v26[1] = 0;
        --*(_DWORD *)(*v8 - 16);
        uint64_t v29 = v26;
      }
      uint64_t v14 = v51;
      WTF::String::operator=(v29, (WTF::StringImpl **)a3);
      BOOL v4 = v50;
      ++*(_DWORD *)v51;
      unsigned int v33 = (WebKit::WebExtensionMenuItem *)v29[1];
      v29[1] = (uint64_t)v51;
      if (v33) {
        WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v33, v32);
      }
      uint64_t v34 = *v8;
      if (*v8) {
        int v35 = *(_DWORD *)(v34 - 12) + 1;
      }
      else {
        int v35 = 1;
      }
      *(_DWORD *)(v34 - 12) = v35;
      uint64_t v38 = *v8;
      if (*v8) {
        int v39 = *(_DWORD *)(v38 - 12);
      }
      else {
        int v39 = 0;
      }
      uint64_t v40 = (*(_DWORD *)(v38 - 16) + v39);
      unint64_t v41 = *(unsigned int *)(v38 - 4);
      if (v41 > 0x400)
      {
        if (v41 > 2 * v40) {
          goto LABEL_51;
        }
      }
      else if (3 * v41 > 4 * v40)
      {
        goto LABEL_51;
      }
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v8);
      goto LABEL_51;
    }
    if (WTF::equal(v30, *(const WTF::StringImpl **)a3, v10)) {
      break;
    }
LABEL_35:
    unsigned int v25 = i + v28;
  }
  uint64_t v36 = v17 + 16 * v28;
  BOOL v4 = v50;
  uint64_t v14 = v51;
  ++*(_DWORD *)v51;
  unint64_t v37 = *(WebKit::WebExtensionMenuItem **)(v36 + 8);
  *(void *)(v36 + 8) = v51;
  if (v37) {
    WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v37, v31);
  }
  if (!*(unsigned char *)(a3 + 16)) {
    goto LABEL_59;
  }
LABEL_51:
  if ((WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WTF *)*v8, (WTF::StringImpl **)(a3 + 8), v10) & 1) == 0)
  {
    WebKit::toWebExtensionError<>((WebKit *)@"menus.update()", 0, &cfstr_ParentMenuItem.isa, v42, &v52);
    unint64_t v47 = v52;
    uint64_t v52 = 0;
    uint64_t v53 = v47;
    char v54 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(v4);
    goto LABEL_61;
  }
  if (!*(unsigned char *)(a3 + 16)) {
    goto LABEL_59;
  }
  if (!*(void *)a3 || (uint64_t v43 = (const WTF::StringImpl **)a3, !*(_DWORD *)(*(void *)a3 + 4))) {
    uint64_t v43 = a2;
  }
  if (WebKit::isAncestorOrSelf((WebKit *)a1, (WTF **)(a3 + 8), v43, (const WTF::String *)v42))
  {
    WebKit::toWebExtensionError<>((WebKit *)@"menus.update()", 0, &cfstr_ParentMenuItem_1.isa, v44, &v52);
    int v45 = v52;
    uint64_t v52 = 0;
    uint64_t v53 = v45;
    char v54 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(v4);
LABEL_61:
    if (v54)
    {
      unint64_t v48 = v53;
      uint64_t v53 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2) {
          WTF::StringImpl::destroy(v48, v46);
        }
        else {
          *(_DWORD *)v48 -= 2;
        }
      }
    }
    unsigned int v49 = v52;
    uint64_t v52 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2) {
        WTF::StringImpl::destroy(v49, v46);
      }
      else {
        *(_DWORD *)v49 -= 2;
      }
    }
  }
  else
  {
LABEL_59:
    WebKit::WebExtensionMenuItem::update(v14, (const WebKit::WebExtensionMenuItemParameters *)a3, v10, v11, v12, v13);
    LOBYTE(v53) = 0;
    char v54 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(v4);
  }
  return WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v14, v46);
}

void sub_1992EF270(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13, char a14)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v14, a2);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionMenuItem *WebKit::WebExtensionContext::menusRemove(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3, NSString *a4)
{
  if (*a2
    && *((_DWORD *)*a2 + 1)
    && (uint64_t v6 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 696), a2, (const WTF::StringImpl *)a3)) != 0)
  {
    int v7 = v6;
    ++*(_DWORD *)v6;
    uint64_t v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v8 = &unk_1EE9FDD88;
    *((void *)v8 + 1) = &v17;
    *((void *)v8 + 2) = a1;
    uint64_t v17 = v8;
    WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::menusRemove(WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,WebKit::WebExtensionMenuItem &>::call((uint64_t)v8, (uint64_t)v7, v9);
    LOBYTE(v18) = 0;
    char v19 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
    if (v19)
    {
      double v11 = v18;
      unsigned int v18 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
    int v16 = v17;
    uint64_t v17 = 0;
    if (v16) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v16 + 8))(v16);
    }
    return WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v7, v10);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"menus.remove()", 0, &cfstr_MenuItemNotFou.isa, a4, &v17);
    double v12 = v17;
    uint64_t v17 = 0;
    unsigned int v18 = v12;
    char v19 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
    if (v19)
    {
      uint64_t v14 = v18;
      unsigned int v18 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    uint64_t result = v17;
    uint64_t v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WebKit::WebExtensionMenuItem *)WTF::StringImpl::destroy(result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1992EF518(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10) {
    (*(void (**)(WTF::StringImpl *))(*(void *)a10 + 8))(a10);
  }
  WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v12, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::menusRemoveAll(uint64_t a1, void *a2)
{
  BOOL v4 = *(WTF::StringImpl ***)(a1 + 696);
  if (v4)
  {
    *(void *)(a1 + 696) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(a1 + 704), 0);
  return WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)a2);
}

void sub_1992EF67C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::fireMenusClickedEventIfNeeded(WebKit::WebExtensionContext *this, const WebKit::WebExtensionMenuItem *a2, char a3, const WebKit::WebExtensionMenuItemContextParameters *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a4 + 16)) {
    WebKit::WebExtensionContext::getTab((uint64_t *)this, *((void *)a4 + 1), 0, &v30);
  }
  else {
    int v30 = 0;
  }
  char v28 = 18;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v29, &v28, 1);
  CFRetain(*((CFTypeRef *)this + 1));
  ++*(_DWORD *)a2;
  long long v8 = *((_OWORD *)a4 + 1);
  long long v31 = *(_OWORD *)a4;
  long long v32 = v8;
  char v33 = *((unsigned char *)a4 + 32);
  uint64_t v9 = (WTF::StringImpl *)*((void *)a4 + 5);
  if (v9) {
    *(_DWORD *)v9 += 2;
  }
  long long v25 = *((_OWORD *)a4 + 3);
  long long v26 = *((_OWORD *)a4 + 4);
  int v10 = (WTF::StringImpl *)*((void *)a4 + 10);
  if (v10) {
    *(_DWORD *)v10 += 2;
  }
  double v11 = (WTF::StringImpl *)*((void *)a4 + 11);
  if (v11) {
    *(_DWORD *)v11 += 2;
  }
  long long v23 = *((_OWORD *)a4 + 6);
  long long v24 = *((_OWORD *)a4 + 7);
  double v12 = (WTF::StringImpl *)*((void *)a4 + 16);
  if (v12) {
    *(_DWORD *)v12 += 2;
  }
  long long v21 = *(_OWORD *)((char *)a4 + 136);
  long long v22 = *(_OWORD *)((char *)a4 + 152);
  float v13 = (WTF::StringImpl *)*((void *)a4 + 21);
  if (v13) {
    *(_DWORD *)v13 += 2;
  }
  char v14 = *((unsigned char *)a4 + 176);
  uint64_t v15 = v30;
  if (v30) {
    ++*(_DWORD *)v30;
  }
  uint64_t v16 = WTF::fastMalloc((WTF *)0xE8);
  long long v17 = v32;
  *(_OWORD *)(v16 + 40) = v31;
  *(void *)uint64_t v16 = &unk_1EE9FDDB0;
  *(void *)(v16 + 8) = this;
  *(void *)(v16 + 16) = this;
  *(void *)(v16 + 24) = a2;
  *(unsigned char *)(v16 + 32) = a3;
  *(_OWORD *)(v16 + 56) = v17;
  *(unsigned char *)(v16 + 72) = v33;
  if (v9) {
    *(_DWORD *)v9 += 2;
  }
  *(void *)(v16 + 80) = v9;
  *(_OWORD *)(v16 + 88) = v25;
  *(_OWORD *)(v16 + 104) = v26;
  if (v10) {
    *(_DWORD *)v10 += 2;
  }
  *(void *)(v16 + 120) = v10;
  if (v11) {
    *(_DWORD *)v11 += 2;
  }
  *(void *)(v16 + 128) = v11;
  *(_OWORD *)(v16 + 136) = v23;
  *(_OWORD *)(v16 + 152) = v24;
  if (v12) {
    *(_DWORD *)v12 += 2;
  }
  *(void *)(v16 + 168) = v12;
  *(_OWORD *)(v16 + 176) = v21;
  *(_OWORD *)(v16 + 192) = v22;
  if (v13) {
    *(_DWORD *)v13 += 2;
  }
  *(void *)(v16 + 208) = v13;
  *(unsigned char *)(v16 + 216) = v14;
  *(void *)(v16 + 224) = v15;
  uint64_t v27 = v16;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)this, &v29, &v27);
  uint64_t v19 = v27;
  uint64_t v27 = 0;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    if (!v13) {
      goto LABEL_31;
    }
  }
  else if (!v13)
  {
    goto LABEL_31;
  }
  if (*(_DWORD *)v13 == 2) {
    WTF::StringImpl::destroy(v13, v18);
  }
  else {
    *(_DWORD *)v13 -= 2;
  }
LABEL_31:
  if (!v12) {
    goto LABEL_34;
  }
  if (*(_DWORD *)v12 != 2)
  {
    *(_DWORD *)v12 -= 2;
LABEL_34:
    if (!v11) {
      goto LABEL_39;
    }
    goto LABEL_37;
  }
  WTF::StringImpl::destroy(v12, v18);
  if (!v11) {
    goto LABEL_39;
  }
LABEL_37:
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::destroy(v11, v18);
    if (!v10) {
      goto LABEL_44;
    }
    goto LABEL_42;
  }
  *(_DWORD *)v11 -= 2;
LABEL_39:
  if (!v10)
  {
LABEL_44:
    if (!v9) {
      goto LABEL_50;
    }
    goto LABEL_47;
  }
LABEL_42:
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_44;
  }
  WTF::StringImpl::destroy(v10, v18);
  if (!v9) {
    goto LABEL_50;
  }
LABEL_47:
  if (*(_DWORD *)v9 == 2) {
    WTF::StringImpl::destroy(v9, v18);
  }
  else {
    *(_DWORD *)v9 -= 2;
  }
LABEL_50:
  if (v29) {
    WTF::fastFree((WTF *)(v29 - 16), v18);
  }
  uint64_t result = v30;
  int v30 = 0;
  if (result) {
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  }
  return result;
}

void sub_1992EFA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
}

void WebKit::WebExtensionMenuItemContextParameters::~WebExtensionMenuItemContextParameters(WebKit::WebExtensionMenuItemContextParameters *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  BOOL v4 = (WTF::StringImpl *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unsigned int v5 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  int v7 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
}

WebKit::WebExtensionMenuItem *WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(WebKit::WebExtensionMenuItem *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::WebExtensionMenuItem::~WebExtensionMenuItem(result, a2);
    return (WebKit::WebExtensionMenuItem *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebKit::WebExtensionMenuItem::~WebExtensionMenuItem(WebKit::WebExtensionMenuItem *this, void *a2)
{
  WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 144, a2);
  BOOL v4 = (unsigned int *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }
  unsigned int v5 = (uint64_t *)*((void *)this + 15);
  if (v5) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v5, v3);
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 14);
  if (v6) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v6, v3);
  }
  int v7 = (const void *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v7) {
    CFRelease(v7);
  }
  long long v8 = (const void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v9) {
    CFRelease(v9);
  }
  int v10 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  double v12 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v3);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  float v13 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v3);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  char v14 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, v3);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

uint64_t WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  BOOL v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)BOOL v4 = 0;
      if (v6) {
        WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref();
      }
      BOOL v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
    BOOL v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(WTF *result, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  if (result)
  {
    BOOL v4 = result;
    int v5 = *((_DWORD *)result - 2);
    unsigned int v6 = *((_DWORD *)*a2 + 4);
    if (v6 >= 0x100) {
      unsigned int v7 = v6 >> 8;
    }
    else {
      unsigned int v7 = WTF::StringImpl::hashSlowCase(*a2);
    }
    for (int i = 0; ; v7 = i + v9)
    {
      int v9 = v7 & v5;
      uint64_t result = (WTF *)*((void *)v4 + 2 * (v7 & v5));
      if (result != (WTF *)-1)
      {
        if (!result) {
          return result;
        }
        if (WTF::equal(result, *a2, a3)) {
          break;
        }
      }
      ++i;
    }
    return (WTF *)1;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      int v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unsigned int v16 = *((_DWORD *)v11 + 4);
          if (v16 >= 0x100) {
            unsigned int v17 = v16 >> 8;
          }
          else {
            unsigned int v17 = WTF::StringImpl::hashSlowCase(v11);
          }
          int v18 = 0;
          do
          {
            uint64_t v19 = v17 & v15;
            unsigned int v17 = ++v18 + v19;
          }
          while (*(void *)(v14 + 16 * v19));
          unsigned int v20 = (WTF::StringImpl **)(v14 + 16 * v19);
          long long v21 = v20[1];
          v20[1] = 0;
          if (v21)
          {
            WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v21, v8);
            long long v22 = *v20;
            *unsigned int v20 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2) {
                WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v8);
              }
              else {
                *(_DWORD *)v22 -= 2;
              }
            }
          }
          else
          {
            *unsigned int v20 = 0;
          }
          long long v23 = *v10;
          *int v10 = 0;
          *unsigned int v20 = v23;
          uint64_t v24 = v4 + 16 * v9;
          long long v25 = *(WTF::StringImpl **)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          v20[1] = v25;
          long long v26 = *(WebKit::WebExtensionMenuItem **)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          if (v26) {
            WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v26, v8);
          }
          uint64_t v11 = *v10;
          *int v10 = 0;
          if (!v11) {
            goto LABEL_34;
          }
          if (*(_DWORD *)v11 == 2) {
            goto LABEL_33;
          }
          *(_DWORD *)v11 -= 2;
        }
        else
        {
          uint64_t v12 = v4 + 16 * v9;
          float v13 = *(WebKit::WebExtensionMenuItem **)(v12 + 8);
          *(void *)(v12 + 8) = 0;
          if (v13)
          {
            WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v13, v8);
            uint64_t v11 = *v10;
          }
          *int v10 = 0;
          if (!v11) {
            goto LABEL_34;
          }
          if (*(_DWORD *)v11 == 2)
          {
LABEL_33:
            WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v8);
            goto LABEL_34;
          }
          *(_DWORD *)v11 -= 2;
        }
      }
LABEL_34:
      if (++v9 == v5) {
        goto LABEL_37;
      }
    }
  }
  if (v4)
  {
LABEL_37:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

WebKit::WebExtensionMenuItem *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  uint64_t result = a2[1];
  a2[1] = 0;
  if (result) {
    uint64_t result = WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(result, v4);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v6 = *a1;
  if (*a1) {
    int v7 = *(_DWORD *)(v6 - 12) - 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v6 - 12) = v7;
  uint64_t v8 = *a1;
  if (*a1)
  {
    unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
    unsigned int v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
    {
      return (WebKit::WebExtensionMenuItem *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v10 >> 1);
    }
  }
  return result;
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::menusRemove(WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,WebKit::WebExtensionMenuItem &>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(unsigned int *)(a2 + 156);
  if (v5)
  {
    int v7 = *(uint64_t **)(a2 + 144);
    uint64_t v8 = 8 * v5;
    do
    {
      uint64_t v9 = *v7++;
      (*(void (**)(void, uint64_t))(***(void ***)(a1 + 8) + 16))(**(void **)(a1 + 8), v9);
      v8 -= 8;
    }
    while (v8);
  }
  uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v4 + 696), (WTF::StringImpl **)(a2 + 32), a3);
  uint64_t v12 = *(void *)(v4 + 696);
  if (v12)
  {
    float v13 = (WTF::StringImpl **)(v12 + 16 * *(unsigned int *)(v12 - 4));
    if (v13 == result) {
      goto LABEL_11;
    }
  }
  else
  {
    if (!result) {
      goto LABEL_11;
    }
    float v13 = 0;
  }
  if (v13 != result) {
    uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(v4 + 696), result);
  }
LABEL_11:
  uint64_t v14 = *(void *)(a2 + 136);
  if (!v14 || !*(void *)(v14 + 8))
  {
    int v15 = *(uint64_t **)(v4 + 704);
    uint64_t v16 = *(unsigned int *)(v4 + 716);
    unsigned int v17 = &v15[v16];
    if (v16)
    {
      int v18 = 0;
      uint64_t v19 = *(void *)(v4 + 704);
      unsigned int v20 = &v15[v16];
      long long v21 = v20;
      do
      {
        uint64_t result = (WTF::StringImpl **)WebKit::WebExtensionMenuItem::operator==(a2, *v15, v11);
        if (result)
        {
          long long v23 = v15;
          if (v21 != (uint64_t *)(*(void *)(v4 + 704) + 8 * *(unsigned int *)(v4 + 716)))
          {
            if (v15 == v20)
            {
              long long v23 = v21;
            }
            else
            {
              memmove(v21, v20, v19 - (void)v20);
              long long v23 = (uint64_t *)((char *)v21 + v19 - (void)v20);
            }
          }
          uint64_t result = (WTF::StringImpl **)*v15;
          uint64_t *v15 = 0;
          unsigned int v20 = v15 + 1;
          if (result) {
            uint64_t result = (WTF::StringImpl **)WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref((WebKit::WebExtensionMenuItem *)result, v22);
          }
          ++v18;
          long long v21 = v23;
        }
        ++v15;
        v19 += 8;
      }
      while (v15 < v17);
      int v15 = *(uint64_t **)(v4 + 704);
      uint64_t v24 = *(unsigned int *)(v4 + 716);
      LODWORD(v16) = *(_DWORD *)(v4 + 716);
      unsigned int v17 = v21;
    }
    else
    {
      uint64_t v24 = 0;
      int v18 = 0;
      unsigned int v20 = &v15[v16];
    }
    long long v25 = &v15[v24];
    if (v20 != v25)
    {
      uint64_t result = (WTF::StringImpl **)memmove(v17, v20, (char *)v25 - (char *)v20);
      LODWORD(v16) = *(_DWORD *)(v4 + 716);
    }
    *(_DWORD *)(v4 + 716) = v16 - v18;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        uint64_t v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v6, a2);
          uint64_t v5 = *v4;
        }
        void *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

unsigned int *WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    uint64_t v3 = result;
    if (result[3] > a2) {
      uint64_t result = WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, (void *)a2);
    }
    uint64_t v4 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        uint64_t result = (unsigned int *)WTF::fastRealloc(v4, (void *)(8 * a2));
        *(void *)uint64_t v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = v3[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v4) {
        uint64_t result = (unsigned int *)memcpy(result, v4, 8 * v5);
      }
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, void *a2)
{
  unsigned int v2 = a2;
  uint64_t v3 = result;
  unint64_t v4 = result[3];
  if ((void *)v4 != a2)
  {
    uint64_t v5 = (unsigned int **)(*(void *)result + 8 * (void)a2);
    uint64_t v6 = 8 * v4 - 8 * (void)a2;
    do
    {
      uint64_t result = *v5;
      *uint64_t v5 = 0;
      if (result) {
        uint64_t result = (unsigned int *)WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref((WebKit::WebExtensionMenuItem *)result, a2);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireMenusClickedEventIfNeeded(WebKit::WebExtensionMenuItem const&,BOOL,WebKit::WebExtensionMenuItemContextParameters const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FDDB0;
  uint64_t v3 = a1[28];
  a1[28] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  }
  WebKit::WebExtensionMenuItemContextParameters::~WebExtensionMenuItemContextParameters((WebKit::WebExtensionMenuItemContextParameters *)(a1 + 5), a2);
  uint64_t v5 = (WebKit::WebExtensionMenuItem *)a1[3];
  a1[3] = 0;
  if (v5) {
    WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v5, v4);
  }
  uint64_t v6 = a1[2];
  a1[2] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireMenusClickedEventIfNeeded(WebKit::WebExtensionMenuItem const&,BOOL,WebKit::WebExtensionMenuItemContextParameters const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FDDB0;
  uint64_t v3 = a1[28];
  a1[28] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  }
  WebKit::WebExtensionMenuItemContextParameters::~WebExtensionMenuItemContextParameters((WebKit::WebExtensionMenuItemContextParameters *)(a1 + 5), a2);
  uint64_t v5 = (WebKit::WebExtensionMenuItem *)a1[3];
  a1[3] = 0;
  if (v5) {
    WTF::RefCounted<WebKit::WebExtensionMenuItem>::deref(v5, v4);
  }
  uint64_t v6 = a1[2];
  a1[2] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }

  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireMenusClickedEventIfNeeded(WebKit::WebExtensionMenuItem const&,BOOL,WebKit::WebExtensionMenuItemContextParameters const&)::$_0,void>::call(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  WebKit::WebExtensionMenuItem::minimalParameters(*(void *)(a1 + 24), (uint64_t)v30);
  char v3 = *(unsigned char *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 224);
  if (v4)
  {
    WebKit::WebExtensionTab::parameters(*(WebKit::WebExtensionTab **)(a1 + 224), (uint64_t)v24);
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)v29, (uint64_t)v24);
  }
  else
  {
    v29[0] = 0;
    v29[176] = 0;
  }
  WebKit::WebExtensionContext::processes(v2, 18, 0, (uint64_t *)&v31);
  uint64_t v6 = v2[9];
  if (v6
    && *(void *)(v6 + 8)
    && ((int v7 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v31),
         uint64_t v8 = v7,
         uint64_t v9 = (uint64_t *)v5,
         !v31)
      ? (unsigned int v10 = 0)
      : (unsigned int v10 = &v31[*((unsigned int *)v31 - 1)]),
        v10 != v7))
  {
    uint64_t v11 = a1 + 40;
    while (1)
    {
      uint64_t v12 = *v8;
      uint64_t v13 = v2[4];
      uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v14 = 1604;
      *((void *)v14 + 1) = v13;
      *((void *)v14 + 66) = (char *)v14 + 16;
      *((void *)v14 + 67) = 512;
      *((void *)v14 + 68) = 0;
      *((void *)v14 + 70) = 0;
      *((void *)v14 + 69) = 0;
      IPC::Encoder::encodeHeader(v14);
      uint64_t v34 = v14;
      IPC::ArgumentCoder<WebKit::WebExtensionMenuItemParameters,void>::encode(v14, (uint64_t)v30);
      int v15 = (unsigned char *)IPC::Encoder::grow(v14, 1uLL, 1);
      if (!v16) {
        break;
      }
      unsigned char *v15 = v3;
      IPC::ArgumentCoder<WebKit::WebExtensionMenuItemContextParameters,void>::encode(v14, v11);
      IPC::ArgumentCoder<std::optional<WebKit::WebExtensionTabParameters>,void>::encode<IPC::Encoder,std::optional<WebKit::WebExtensionTabParameters> const&>(v14, (uint64_t)v29);
      LOBYTE(v32) = 0;
      char v33 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v34, 0, (uint64_t)&v32, 1);
      if (v33)
      {
        uint64_t v17 = v32;
        uint64_t v32 = 0;
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
      }
      int v18 = v34;
      uint64_t v34 = 0;
      if (v18)
      {
        IPC::Encoder::~Encoder(v18, v5);
        WTF::fastFree(v19, v20);
      }
      while (++v8 != v9)
      {
        if ((unint64_t)(*v8 + 1) > 1) {
          goto LABEL_21;
        }
      }
      uint64_t v8 = v9;
LABEL_21:
      if (v8 == v10) {
        goto LABEL_22;
      }
    }
    __break(0xC471u);
  }
  else
  {
LABEL_22:
    if (v31) {
      WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v31, v5);
    }
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29);
    if (v4)
    {
      if (v28)
      {
        long long v22 = v27;
        uint64_t v27 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, v21);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
      }
      if (v26)
      {
        long long v23 = v25;
        long long v25 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2) {
            WTF::StringImpl::destroy(v23, v21);
          }
          else {
            *(_DWORD *)v23 -= 2;
          }
        }
      }
    }
    WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)v30, v21);
  }
}

void sub_1992F0940(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, WTF::StringImpl *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  int v35 = *(uint64_t **)(v33 - 128);
  if (v35) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v35, a2);
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a33);
  if (a10)
  {
    if (a20 && a19)
    {
      if (*(_DWORD *)a19 == 2) {
        WTF::StringImpl::destroy(a19, v36);
      }
      else {
        *(_DWORD *)a19 -= 2;
      }
    }
    if (a18 && a13)
    {
      if (*(_DWORD *)a13 == 2) {
        WTF::StringImpl::destroy(a13, v36);
      }
      else {
        *(_DWORD *)a13 -= 2;
      }
    }
  }
  WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)(v33 - 248), v36);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::permissionsGetAll(WebKit::WebExtensionContext *a1, uint64_t *a2)
{
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  WebKit::WebExtensionContext::currentPermissions(a1, &v26);
  uint64_t v4 = v27;
  uint64_t v5 = v29;
  if (v27 != v29)
  {
    uint64_t v6 = v28;
    do
    {
      uint64_t v7 = HIDWORD(v33);
      if (HIDWORD(v33) == v33)
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v32, (unint64_t)v4);
      }
      else
      {
        uint64_t v8 = v32;
        uint64_t v9 = (_DWORD *)*v4;
        if (*v4) {
          *v9 += 2;
        }
        *(void *)(v8 + 8 * v7) = v9;
        HIDWORD(v33) = v7 + 1;
      }
      while (1)
      {
        v4 += 2;
        if (v4 == v6) {
          break;
        }
        if ((unint64_t)(*v4 + 1) > 1) {
          goto LABEL_12;
        }
      }
      uint64_t v4 = v6;
LABEL_12:
      ;
    }
    while (v4 != v5);
  }
  WebKit::WebExtensionContext::currentPermissionMatchPatterns(a1, &v26);
  unsigned int v10 = (WTF::StringImpl **)v27;
  uint64_t v11 = (WTF::StringImpl **)v29;
  if (v27 != v29)
  {
    uint64_t v12 = (WTF::StringImpl **)v28;
    uint64_t v13 = (WTF::StringImpl **)MEMORY[0x1E4F30978];
    do
    {
      WebKit::WebExtensionMatchPattern::stringWithScheme(*v10, v13, &v25);
      LODWORD(v15) = HIDWORD(v31);
      if (HIDWORD(v31) == v31)
      {
        int v18 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v30, HIDWORD(v31) + 1, (unint64_t)&v25);
        uint64_t v15 = HIDWORD(v31);
        uint64_t v19 = v30;
        uint64_t v20 = *v18;
        uint64_t *v18 = 0;
        *(void *)(v19 + 8 * v15) = v20;
      }
      else
      {
        uint64_t v16 = v25;
        long long v25 = 0;
        *(void *)(v30 + 8 * HIDWORD(v31)) = v16;
      }
      HIDWORD(v31) = v15 + 1;
      uint64_t v17 = v25;
      long long v25 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v14);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      while (1)
      {
        v10 += 2;
        if (v10 == v12) {
          break;
        }
        if ((unint64_t)*v10 + 1 > 1) {
          goto LABEL_25;
        }
      }
      unsigned int v10 = v12;
LABEL_25:
      ;
    }
    while (v10 != v11);
  }
  uint64_t v21 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v21 + 16))(v21, &v32, &v30);
  (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v22);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v23);
}

void sub_1992F0C58(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, v18);
  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::currentPermissions@<X0>(WebKit::WebExtensionContext *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (void **)((char *)this + 168);
  WebKit::WebExtensionContext::removeExpired((uint64_t)this, (uint64_t *)this + 21, (double *)this + 23, @"WKWebExtensionContextGrantedPermissionsWereRemoved");
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v4);
  uint64_t v7 = *((void *)this + 21);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    uint64_t v9 = v7 + 16 * v8;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  *a2 = v4;
  a2[1] = result;
  a2[2] = v6;
  a2[3] = v9;
  a2[4] = v7 + 16 * v8;
  return result;
}

void *WebKit::WebExtensionContext::currentPermissionMatchPatterns@<X0>(WebKit::WebExtensionContext *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (void **)((char *)this + 200);
  WebKit::WebExtensionContext::removeExpired((uint64_t)this, (uint64_t *)this + 25, (double *)this + 27, @"WKWebExtensionContextGrantedPermissionMatchPatternsWereRemoved");
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v4);
  uint64_t v7 = *((void *)this + 25);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    uint64_t v9 = v7 + 16 * v8;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  *a2 = v4;
  a2[1] = result;
  a2[2] = v6;
  a2[3] = v9;
  a2[4] = v7 + 16 * v8;
  return result;
}

WTF::StringImpl **WebKit::WebExtensionContext::permissionsContains(uint64_t *a1, void **a2, void **a3, uint64_t *a4)
{
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v10, a2);
  WebKit::toPatterns(a3, (uint64_t *)&v9);
  WebKit::WebExtensionContext::hasPermissions(a1, &v10, &v9);
  WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
  if (v9) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v9, v7);
  }
  uint64_t result = v10;
  if (v10) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, (WTF::StringImpl *)v7);
  }
  return result;
}

void sub_1992F0E58(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10)
{
  if (a10) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::WebExtensionContext::permissionsRequest(uint64_t a1, void **a2, void **a3, uint64_t *a4)
{
  WebKit::toPatterns(a3, (uint64_t *)&v48);
  if ((!*a2 || !*((_DWORD *)*a2 - 3)) && (!*a3 || !*((_DWORD *)*a3 - 3)))
  {
    WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(a1, 21, a2, &v48);
    goto LABEL_34;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v47, a2);
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v46, &v48);
  int hasPermissions = WebKit::WebExtensionContext::hasPermissions((uint64_t *)a1, &v47, &v46);
  if (v46) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v46, v8);
  }
  if (!v47)
  {
    if (!hasPermissions) {
      goto LABEL_9;
    }
LABEL_34:
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
    goto LABEL_35;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v47, (WTF::StringImpl *)v8);
  if (hasPermissions) {
    goto LABEL_34;
  }
LABEL_9:
  if (WebKit::WebExtensionMatchPattern::patternsMatchAllHosts(&v48) && !*(unsigned char *)(a1 + 272)) {
    *(unsigned char *)(a1 + 272) = 1;
  }
  uint64_t v10 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v10 = 1;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  int v45 = (WTF *)v10;
  unint64_t v41 = (unsigned int *)a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v11 = *a4;
  *a4 = 0;
  *(void *)&long long v42 = a1;
  *((void *)&v42 + 1) = v11;
  uint64_t v12 = v45;
  ++*(_DWORD *)v45;
  *(void *)&long long v43 = v12;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v43 + 1, a2);
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v44, &v48);
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x38);
  void *v13 = &unk_1EE9FDDD8;
  v13[1] = v41;
  v13[2] = v42;
  uint64_t v14 = *((void *)&v42 + 1);
  long long v42 = 0u;
  v13[3] = v14;
  v13[4] = v43;
  uint64_t v15 = *((void *)&v43 + 1);
  long long v43 = 0u;
  v13[5] = v15;
  uint64_t v16 = v44;
  uint64_t v44 = 0;
  v13[6] = v16;
  uint64_t v18 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v18 = 1;
  *(void *)(v18 + 8) = v13;
  if (v44) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v44, v17);
  }
  if (*((void *)&v43 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v43 + 1), (WTF::StringImpl *)v17);
  }
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)&v43, (WTF::StringImpl *)v17);
  uint64_t v19 = *((void *)&v42 + 1);
  *((void *)&v42 + 1) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = v42;
  *(void *)&long long v42 = 0;
  if (v20) {
    CFRelease(*(CFTypeRef *)(v20 + 8));
  }
  uint64_t v40 = 0;
  atomic_fetch_add((atomic_uint *volatile)v18, 1u);
  unint64_t v41 = (unsigned int *)v18;
  uint64_t v21 = v45;
  ++*(_DWORD *)v45;
  *(void *)&long long v42 = v21;
  long long v22 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v22 = &unk_1EE9FDE00;
  v22[1] = v41;
  uint64_t v23 = v42;
  unint64_t v41 = 0;
  *(void *)&long long v42 = 0;
  v22[2] = v23;
  int v39 = v22;
  WebKit::WebExtensionContext::requestPermissionMatchPatterns(a1, &v48, &v40, (uint64_t *)&v39, 0, 4);
  uint64_t v25 = (uint64_t)v39;
  int v39 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)&v42, v24);
  uint64_t v26 = v41;
  unint64_t v41 = 0;
  if (v26) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v26);
  }
  uint64_t v27 = v40;
  uint64_t v40 = 0;
  if (v27) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v27);
  }
  uint64_t v38 = 0;
  atomic_fetch_add((atomic_uint *volatile)v18, 1u);
  unint64_t v41 = (unsigned int *)v18;
  char v28 = v45;
  ++*(_DWORD *)v45;
  *(void *)&long long v42 = v28;
  uint64_t v29 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v29 = &unk_1EE9FDE28;
  v29[1] = v41;
  uint64_t v30 = v42;
  unint64_t v41 = 0;
  *(void *)&long long v42 = 0;
  v29[2] = v30;
  int v39 = v29;
  WebKit::WebExtensionContext::requestPermissions(a1, a2, &v38, (uint64_t *)&v39, 0, 4);
  uint64_t v32 = (uint64_t)v39;
  int v39 = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)&v42, v31);
  uint64_t v33 = v41;
  unint64_t v41 = 0;
  if (v33) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v33);
  }
  uint64_t v34 = v38;
  uint64_t v38 = 0;
  if (v34) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v34);
  }
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v18);
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(&v45, v35);
LABEL_35:
  uint64_t result = v48;
  if (v48) {
    return (uint64_t *)WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v48, v36);
  }
  return result;
}

void sub_1992F12B4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  if (a5) {
    (*(void (**)(uint64_t))(*(void *)a5 + 8))(a5);
  }
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(v13, a2);
  if (a7) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(a7);
  }
  if (a4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a4);
  }
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v12);
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)va, v16);
  uint64_t v18 = *(uint64_t **)(v14 - 56);
  if (v18) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v18, v17);
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl **WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(uint64_t a1, char a2, void **a3, void **a4)
{
  WebKit::toStrings(a4, (uint64_t *)&v17);
  char v15 = a2;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v16, &v15, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v12, a3);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v13, &v17);
  uint64_t v7 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v7 = &unk_1EE9FDE50;
  *(void *)(v7 + 8) = a1;
  *(void *)(v7 + 16) = a1;
  *(unsigned char *)(v7 + 24) = a2;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v7 + 32), &v12);
  uint64_t v8 = v13;
  uint64_t v13 = 0;
  uint64_t v14 = v7;
  *(void *)(v7 + 40) = v8;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v16, &v14);
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (v13) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v9);
  }
  if (v12) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v9);
  }
  if (v16) {
    WTF::fastFree((WTF *)(v16 - 16), v9);
  }
  uint64_t result = v17;
  if (v17) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v9);
  }
  return result;
}

void sub_1992F1610(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl **a13, WTF::StringImpl **a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (a14) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a14, a2);
  }
  if (a13) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a13, a2);
  }
  if (a11) {
    CFRelease(*(CFTypeRef *)(a11 + 8));
  }
  uint64_t v17 = *(void *)(v15 - 48);
  if (v17) {
    WTF::fastFree((WTF *)(v17 - 16), a2);
  }
  uint64_t v18 = *(WTF::StringImpl ***)(v15 - 40);
  if (v18) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v18, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF **WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(WTF **a1, WTF::StringImpl *a2)
{
  char v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      uint64_t v4 = (WTF::StringImpl **)*((void *)v3 + 2);
      if (v4) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
      }
      uint64_t v5 = (uint64_t *)*((void *)v3 + 1);
      if (v5) {
        WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v5, a2);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t *WebKit::WebExtensionContext::permissionsRemove(uint64_t a1, uint64_t *a2, void **a3, uint64_t *a4)
{
  WebKit::toPatterns(a3, (uint64_t *)&v11);
  if (WebKit::WebExtensionMatchPattern::patternsMatchAllHosts(&v11) && *(unsigned char *)(a1 + 272)) {
    *(unsigned char *)(a1 + 272) = 0;
  }
  WebKit::WebExtensionContext::removePermissions(a1, (uint64_t *)(a1 + 168), a2, (double *)(a1 + 184), @"WKWebExtensionContextGrantedPermissionsWereRemoved");
  WebKit::WebExtensionContext::removeGrantedPermissionMatchPatterns(a1, (uint64_t *)&v11, 0);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v10, (void **)a2);
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v9, &v11);
  WebKit::WebExtensionContext::hasPermissions((uint64_t *)a1, &v10, &v9);
  WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
  if (v9) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v9, v7);
  }
  if (v10) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, (WTF::StringImpl *)v7);
  }
  uint64_t result = v11;
  if (v11) {
    return (uint64_t *)WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v11, v7);
  }
  return result;
}

void sub_1992F1834(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl **a11, uint64_t *a12)
{
  if (a11) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a11, a2);
  }
  if (a12) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a12, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9FDDD8;
  char v3 = *(uint64_t **)(a1 + 48);
  if (v3) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *(WTF::StringImpl ***)(a1 + 40);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, (WTF::StringImpl *)a2);
  }
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)(a1 + 32), (WTF::StringImpl *)a2);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  return a1;
}

{
  uint64_t *v3;
  WTF::StringImpl **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9FDDD8;
  char v3 = *(uint64_t **)(a1 + 48);
  if (v3) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *(WTF::StringImpl ***)(a1 + 40);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, (WTF::StringImpl *)a2);
  }
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)(a1 + 32), (WTF::StringImpl *)a2);
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }

  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = a1[4];
  if (*(unsigned char *)(v2 + 4) && *(unsigned char *)(v2 + 5))
  {
    char v3 = (double *)a1[1];
    WebKit::WebExtensionContext::grantPermissionMatchPatterns(v3, (void **)(v2 + 8), 1, *(double *)(v2 + 24));
    WebKit::WebExtensionContext::grantPermissions(v3, (void **)(a1[4] + 16), *(double *)(a1[4] + 32));
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a1 + 3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::DefaultHash<WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::HashTraits<WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::DefaultHash<WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::HashTraits<WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::HashTableTraits>,WTF::WallTime>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9FDE00;
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)(a1 + 16), a2);
  char v3 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }
  return a1;
}

{
  void *v3;
  unsigned int *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9FDE00;
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)(a1 + 16), a2);
  uint64_t v4 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::DefaultHash<WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::HashTraits<WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::DefaultHash<WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::HashTraits<WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::HashTableTraits>,WTF::WallTime>::call(uint64_t a1, uint64_t *a2, uint64_t *a3, double a4)
{
  uint64_t v6 = *a2;
  if (*a2) {
    int v7 = *(_DWORD *)(v6 - 12);
  }
  else {
    int v7 = 0;
  }
  uint64_t v8 = *a3;
  if (*a3) {
    LODWORD(v8) = *(_DWORD *)(v8 - 12);
  }
  BOOL v9 = v7 == v8;
  uint64_t v10 = *(void *)(a1 + 16);
  *(unsigned char *)(v10 + 4) = v9;
  *a2 = 0;
  uint64_t result = *(uint64_t **)(v10 + 8);
  *(void *)(v10 + 8) = v6;
  if (result) {
    uint64_t result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(result, a2);
  }
  *(double *)(*(void *)(a1 + 16) + 32) = a4;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2,void,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2,WTF::WallTime>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9FDE28;
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)(a1 + 16), a2);
  char v3 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }
  return a1;
}

{
  void *v3;
  unsigned int *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9FDE28;
  WTF::Ref<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::ResultHolder,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref((WTF **)(a1 + 16), a2);
  uint64_t v4 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2,void,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WebKit::WebExtensionContext::permissionsRequest(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2,WTF::WallTime>::call(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3, double a4)
{
  uint64_t v6 = *(void *)a2;
  if (*(void *)a2) {
    int v7 = *(_DWORD *)(v6 - 12);
  }
  else {
    int v7 = 0;
  }
  uint64_t v8 = *a3;
  if (*a3) {
    LODWORD(v8) = *(_DWORD *)(v8 - 12);
  }
  BOOL v9 = v7 == v8;
  uint64_t v10 = *(void *)(a1 + 16);
  *(unsigned char *)(v10 + 5) = v9;
  *(void *)a2 = 0;
  uint64_t result = *(WTF::StringImpl ***)(v10 + 16);
  *(void *)(v10 + 16) = v6;
  if (result) {
    uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  }
  *(double *)(*(void *)(a1 + 16) + 24) = a4;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(WebKit::WebExtensionEventListenerType,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FDE50;
  char v3 = (WTF::StringImpl **)a1[5];
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (WTF::StringImpl **)a1[4];
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(WebKit::WebExtensionEventListenerType,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FDE50;
  char v3 = (WTF::StringImpl **)*((void *)this + 5);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (WTF::StringImpl **)*((void *)this + 4);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(WebKit::WebExtensionEventListenerType,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  WebKit::WebExtensionContext::processes(v2, *(unsigned char *)(a1 + 24), 0, (uint64_t *)&v17);
  uint64_t v4 = v2[9];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v5 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v17);
    uint64_t v6 = v5;
    int v7 = v3;
    uint64_t v8 = v17 ? &v17[*((unsigned int *)v17 - 1)] : 0;
    if (v8 != v5)
    {
      do
      {
        uint64_t v9 = *v6;
        uint64_t v10 = v2[4];
        uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v11 = 1605;
        *((void *)v11 + 1) = v10;
        *((void *)v11 + 66) = (char *)v11 + 16;
        *((void *)v11 + 67) = 512;
        *((void *)v11 + 68) = 0;
        *((void *)v11 + 70) = 0;
        *((void *)v11 + 69) = 0;
        IPC::Encoder::encodeHeader(v11);
        uint64_t v20 = v11;
        IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::encode<IPC::Encoder>(v11, *(unsigned char *)(a1 + 24));
        IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v11, (void **)(a1 + 32));
        IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v11, (void **)(a1 + 40));
        LOBYTE(v18) = 0;
        char v19 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v20, 0, (uint64_t)&v18, 1);
        if (v19)
        {
          uint64_t v12 = v18;
          uint64_t v18 = 0;
          if (v12) {
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
          }
        }
        uint64_t v13 = v20;
        uint64_t v20 = 0;
        if (v13)
        {
          IPC::Encoder::~Encoder(v13, v3);
          WTF::fastFree(v14, v15);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_16;
          }
        }
        uint64_t v6 = v7;
LABEL_16:
        ;
      }
      while (v6 != v8);
    }
  }
  uint64_t result = v17;
  if (v17) {
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v17, v3);
  }
  return result;
}

void sub_1992F1F84(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a10) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::portPostMessage(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if ((_BYTE)a5)
  {
    BOOL isBackgroundPage = WebKit::WebExtensionContext::isBackgroundPage((uint64_t)a1, a4);
    if (isBackgroundPage)
    {
      WTF::MonotonicTime::now((WTF::MonotonicTime *)isBackgroundPage);
      a1[47] = v15;
    }
  }
  if (WebKit::WebExtensionContext::isPortConnected((uint64_t)a1, a2, a3, a6))
  {
    WebKit::WebExtensionContext::firePortMessageEventsIfNeeded(a1, a3, a4, a5, a6, a7);
    return;
  }
  uint64_t v16 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v49) {
      unint64_t v47 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      unint64_t v47 = &stru_1EEA10550;
    }
    *(_DWORD *)buf = 134349314;
    *(void *)&buf[4] = a6;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v47;
    _os_log_debug_impl(&dword_1985F2000, v16, OS_LOG_TYPE_DEBUG, "Enqueued message for port channel %{public}llu in %{public}@ world", buf, 0x16u);
    if (v49)
    {
      if (*(_DWORD *)v49 == 2) {
        WTF::StringImpl::destroy(v49, v48);
      }
      else {
        *(_DWORD *)v49 -= 2;
      }
    }
  }
  uint64_t v17 = a1 + 63;
  uint64_t v18 = a1[63];
  if (v18
    || (WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1 + 63, 0), (uint64_t v18 = *v17) != 0))
  {
    unsigned int v19 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    unsigned int v19 = 0;
  }
  uint64_t v21 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(a3, a6) & v19;
  long long v22 = (unsigned __int8 *)(v18 + 32 * v21);
  int v23 = *v22;
  uint64_t v24 = *((void *)v22 + 1);
  if (v23 != 255 || v24 != 0)
  {
    uint64_t v26 = 0;
    int v27 = 1;
    while (a3 != v23 || v24 != a6)
    {
      if (v23 == 254) {
        uint64_t v26 = v22;
      }
      uint64_t v21 = (v21 + v27) & v19;
      long long v22 = (unsigned __int8 *)(v18 + 32 * v21);
      int v23 = *v22;
      uint64_t v24 = *((void *)v22 + 1);
      ++v27;
      if (v23 == 255 && v24 == 0)
      {
        if (v26)
        {
          *(void *)uint64_t v26 = 255;
          *((void *)v26 + 1) = 0;
          *((void *)v26 + 2) = 0;
          *((void *)v26 + 3) = 0;
          --*(_DWORD *)(*v17 - 16);
          long long v22 = v26;
        }
        goto LABEL_28;
      }
    }
    goto LABEL_42;
  }
LABEL_28:
  unsigned __int8 *v22 = a3;
  *((void *)v22 + 1) = a6;
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  unsigned int v29 = *((_DWORD *)v22 + 7);
  if (v29) {
    WTF::VectorDestructor<true,WebKit::ITPThirdPartyDataForSpecificFirstParty>::destruct(*((WTF::StringImpl **)v22 + 2), (WTF::StringImpl *)(*((void *)v22 + 2) + 24 * v29));
  }
  uint64_t v30 = (WTF *)*((void *)v22 + 2);
  if (v30)
  {
    *((void *)v22 + 2) = 0;
    *((_DWORD *)v22 + 6) = 0;
    WTF::fastFree(v30, v20);
    uint64_t v31 = *(void *)buf;
    uint64_t v32 = *(void *)&buf[8];
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
  }
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  *((void *)v22 + 2) = v31;
  *((void *)v22 + 3) = v32;
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v20);
  uint64_t v33 = *v17;
  if (*v17) {
    int v34 = *(_DWORD *)(v33 - 12) + 1;
  }
  else {
    int v34 = 1;
  }
  *(_DWORD *)(v33 - 12) = v34;
  uint64_t v35 = *v17;
  if (*v17) {
    int v36 = *(_DWORD *)(v35 - 12);
  }
  else {
    int v36 = 0;
  }
  uint64_t v37 = (*(_DWORD *)(v35 - 16) + v36);
  unint64_t v38 = *(unsigned int *)(v35 - 4);
  if (v38 > 0x400)
  {
    if (v38 > 2 * v37) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (3 * v38 <= 4 * v37) {
LABEL_41:
  }
    long long v22 = WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(v17, v22);
LABEL_42:
  int v39 = (_DWORD *)*a7;
  if (*a7) {
    *v39 += 2;
  }
  *(void *)buf = v39;
  *(void *)&uint8_t buf[8] = a4;
  *(void *)&buf[16] = a5;
  uint64_t v40 = *((unsigned int *)v22 + 7);
  if (v40 == *((_DWORD *)v22 + 6))
  {
    unint64_t v41 = WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)v22 + 4, v40 + 1, (unint64_t)buf);
    uint64_t v43 = *((void *)v22 + 2) + 24 * *((unsigned int *)v22 + 7);
    uint64_t v44 = *(void *)v41;
    *(void *)unint64_t v41 = 0;
    *(void *)uint64_t v43 = v44;
    *(_OWORD *)(v43 + 8) = *(_OWORD *)(v41 + 8);
    int v45 = *(WTF::StringImpl **)buf;
    ++*((_DWORD *)v22 + 7);
    *(void *)buf = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, v42);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }
  else
  {
    uint64_t v46 = *((void *)v22 + 2) + 24 * v40;
    *(void *)uint64_t v46 = v39;
    *(_OWORD *)(v46 + 8) = *(_OWORD *)&buf[8];
    ++*((_DWORD *)v22 + 7);
  }
}

void sub_1992F2494(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
}

BOOL WebKit::WebExtensionContext::isPortConnected(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(*(void *)(a1 + 488), a2, a4);
  uint64_t v9 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v18) {
      uint64_t v14 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v14 = &stru_1EEA10550;
    }
    *(_DWORD *)buf = 134349570;
    uint64_t v20 = a4;
    __int16 v21 = 1026;
    unsigned int v22 = v8;
    __int16 v23 = 2114;
    uint64_t v24 = v14;
    _os_log_debug_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEBUG, "Port channel %{public}llu has %{public}u port(s) open in %{public}@ world", buf, 0x1Cu);
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v15);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  if (a2 == a3) {
    return v8 > 1;
  }
  unsigned int v11 = WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(*(void *)(a1 + 488), a3, a4);
  uint64_t v12 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v18) {
      uint64_t v16 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v16 = &stru_1EEA10550;
    }
    *(_DWORD *)buf = 134349570;
    uint64_t v20 = a4;
    __int16 v21 = 1026;
    unsigned int v22 = v11;
    __int16 v23 = 2114;
    uint64_t v24 = v16;
    _os_log_debug_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEBUG, "Port channel %{public}llu has %{public}u port(s) open in %{public}@ world", buf, 0x1Cu);
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v17);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  if (v8) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  return !v13;
}

void sub_1992F284C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v3 == 2) {
    WTF::StringImpl::destroy(v3, a2);
  }
  else {
    *(_DWORD *)v3 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::firePortMessageEventsIfNeeded(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  v25[0] = a3;
  v25[1] = a4;
  uint64_t v24 = a5;
  uint64_t v10 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v26) {
      uint64_t v18 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v18 = &stru_1EEA10550;
    }
    *(_DWORD *)buf = 134349314;
    *(void *)&uint8_t buf[4] = a5;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v18;
    _os_log_debug_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEBUG, "Sending message to port channel %{public}llu in %{public}@ world", buf, 0x16u);
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v19);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  switch(a2)
  {
    case 0:
      *(void *)buf = v25;
      *(void *)&uint8_t buf[8] = &v24;
      *(void *)&buf[16] = a6;
      WebKit::WebExtensionContext::processes(a1, 24, 0, (uint64_t *)&v26);
      WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchPortMessageEvent>(a1, (void **)&v26, (uint64_t *)buf);
      goto LABEL_14;
    case 1:
      *(void *)buf = v25;
      *(void *)&uint8_t buf[8] = &v24;
      *(void *)&buf[16] = a6;
      WebKit::WebExtensionContext::processes(a1, 24, 1, (uint64_t *)&v26);
      WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchPortMessageEvent>(a1, (void **)&v26, (uint64_t *)buf);
      goto LABEL_14;
    case 2:
      uint64_t v12 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1[64], v24);
      if (v12)
      {
        BOOL v13 = (id *)v12;
        if (*a6) {
          uint64_t v14 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v14 = &stru_1EEA10550;
        }
        uint64_t v15 = WebKit::parseJSON(v14, 1, 0);
        v20[0] = 0;
        char v23 = 0;
        WebKit::WebExtensionMessagePort::receiveMessage(v13, v15, (uint64_t)v20);
        if (v23)
        {
          if (v22)
          {
            uint64_t v17 = v21;
            __int16 v21 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2) {
                WTF::StringImpl::destroy(v17, v16);
              }
              else {
                *(_DWORD *)v17 -= 2;
              }
            }
          }
        }
      }
      return;
    case 3:
      WebKit::WebExtensionContext::processes(a1, 24, 3, (uint64_t *)&v26);
      *(void *)buf = v25;
      *(void *)&uint8_t buf[8] = &v24;
      *(void *)&buf[16] = a6;
      WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchPortMessageEvent>(a1, (void **)&v26, (uint64_t *)buf);
LABEL_14:
      if (v26) {
        WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable((uint64_t *)v26, v11);
      }
      break;
    default:
      return;
  }
}

void sub_1992F2C00(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::portRemoved(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebExtensionContext::removePort((uint64_t)a1, a2, a3, a5, a4);

  WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(a1, a2, a3, a5);
}

unint64_t WebKit::WebExtensionContext::removePort(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v38) {
      int v36 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v36 = &stru_1EEA10550;
    }
    *(_DWORD *)buf = 134349570;
    *(void *)uint64_t v40 = a4;
    *(_WORD *)&v40[8] = 2114;
    *(void *)&v40[10] = v36;
    __int16 v41 = 2050;
    uint64_t v42 = a5;
    _os_log_debug_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEBUG, "Removed 1 port for channel %{public}llu in %{public}@ world for page %{public}llu", buf, 0x20u);
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, v37);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
  }
  unsigned int v11 = *(unsigned __int8 **)(a1 + 488);
  uint64_t v12 = WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v11, a2, a4);
  if (v11) {
    BOOL v13 = &v11[24 * *((unsigned int *)v11 - 1)];
  }
  else {
    BOOL v13 = 0;
  }
  if (v13 == v12) {
    goto LABEL_16;
  }
  if (*((_DWORD *)v12 + 4) == 1)
  {
    if (v11)
    {
      uint64_t v14 = &v11[24 * *((unsigned int *)v11 - 1)];
      if (v14 == v12) {
        goto LABEL_15;
      }
    }
    else
    {
      if (!v12)
      {
LABEL_15:
        WebKit::WebExtensionContext::clearQueuedPortMessages(a1, a3, a4);
        goto LABEL_16;
      }
      uint64_t v14 = 0;
    }
    if (v14 != v12) {
      WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove((uint64_t *)(a1 + 488), v12);
    }
    goto LABEL_15;
  }
  --*((_DWORD *)v12 + 4);
LABEL_16:
  uint64_t v15 = *(void *)(a1 + 496);
  unint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v15, a5);
  if (v15) {
    uint64_t v17 = v15 + 16 * *(unsigned int *)(v15 - 4);
  }
  else {
    uint64_t v17 = 0;
  }
  if (v17 != result)
  {
    uint64_t v18 = (uint64_t *)(result + 8);
    uint64_t v19 = *(void *)(result + 8);
    buf[0] = a2;
    buf[1] = a3;
    *(void *)&v40[4] = a4;
    if (v19)
    {
      uint64_t v20 = (uint64_t *)(a1 + 496);
      int v21 = *(_DWORD *)(v19 - 8);
      unint64_t result = WTF::TupleHash<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash<0ul>(buf);
      for (int i = 0; ; result = i + (result & v21))
      {
        char v23 = (unsigned __int8 *)(v19 + 24 * (result & v21));
        int v24 = *v23;
        int v25 = v23[1];
        if (v24 == a2 && v25 == a3 && *((void *)v23 + 1) == a4)
        {
          unsigned int v27 = *(_DWORD *)(v19 - 4);
          goto LABEL_33;
        }
        if (v24 == 255 && v25 == 255 && !*((void *)v23 + 1)) {
          break;
        }
        ++i;
      }
      unsigned int v27 = *(_DWORD *)(v19 - 4);
      char v23 = (unsigned __int8 *)(v19 + 24 * v27);
LABEL_33:
      if ((unsigned __int8 *)(v19 + 24 * v27) != v23)
      {
        if (*((_DWORD *)v23 + 4) != 1)
        {
          --*((_DWORD *)v23 + 4);
          return result;
        }
        if ((unsigned __int8 *)(v19 + 24 * *(unsigned int *)(v19 - 4)) != v23)
        {
          unsigned __int8 *v23 = -2;
          ++*(_DWORD *)(*v18 - 16);
          uint64_t v28 = *v18;
          int v29 = *v18 ? *(_DWORD *)(v28 - 12) - 1 : -1;
          *(_DWORD *)(v28 - 12) = v29;
          uint64_t v30 = *v18;
          if (*v18)
          {
            unsigned int v31 = 6 * *(_DWORD *)(v30 - 12);
            unsigned int v32 = *(_DWORD *)(v30 - 4);
            if (v31 < v32 && v32 >= 9) {
              WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(v18, v32 >> 1, 0);
            }
          }
        }
        uint64_t v34 = *v20;
        unint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*v20, a5);
        if (v34)
        {
          uint64_t v35 = v34 + 16 * *(unsigned int *)(v34 - 4);
          if (v35 == result) {
            return result;
          }
        }
        else
        {
          if (!result) {
            return result;
          }
          uint64_t v35 = 0;
        }
        if (v35 != result) {
          return (unint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v20, (void *)result);
        }
      }
    }
  }
  return result;
}

void sub_1992F3108(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v3 == 2) {
    WTF::StringImpl::destroy(v3, a2);
  }
  else {
    *(_DWORD *)v3 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(uint64_t *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a4;
  if (!WebKit::WebExtensionContext::isPortConnected((uint64_t)a1, a2, a3, a4))
  {
    int v7 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      if (v19) {
        uint64_t v12 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v12 = &stru_1EEA10550;
      }
      *(_DWORD *)buf = 134349314;
      *(void *)&uint8_t buf[4] = a4;
      __int16 v21 = 2114;
      char v22 = v12;
      _os_log_debug_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEBUG, "Sending disconnect event for port channel %{public}llu in %{public}@ world", buf, 0x16u);
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v13);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
    }
    switch(a3)
    {
      case 0:
        uint64_t v19 = (WTF::StringImpl *)&v18;
        WebKit::WebExtensionContext::processes(a1, 23, 0, (uint64_t *)buf);
        WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchPortDisconnectEvent>(a1, (void **)buf, (uint64_t **)&v19);
        goto LABEL_13;
      case 1:
        uint64_t v19 = (WTF::StringImpl *)&v18;
        WebKit::WebExtensionContext::processes(a1, 23, 1, (uint64_t *)buf);
        WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchPortDisconnectEvent>(a1, (void **)buf, (uint64_t **)&v19);
        goto LABEL_13;
      case 2:
        uint64_t v9 = (id *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1[64], v18);
        if (v9)
        {
          v14[0] = 0;
          char v17 = 0;
          WebKit::WebExtensionMessagePort::reportDisconnection(v9, (uint64_t)v14);
          if (v17)
          {
            if (v16)
            {
              unsigned int v11 = v15;
              uint64_t v15 = 0;
              if (v11)
              {
                if (*(_DWORD *)v11 == 2) {
                  WTF::StringImpl::destroy(v11, v10);
                }
                else {
                  *(_DWORD *)v11 -= 2;
                }
              }
            }
          }
        }
        return;
      case 3:
        WebKit::WebExtensionContext::processes(a1, 23, 3, (uint64_t *)buf);
        uint64_t v19 = (WTF::StringImpl *)&v18;
        WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchPortDisconnectEvent>(a1, (void **)buf, (uint64_t **)&v19);
LABEL_13:
        if (*(void *)buf) {
          WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(*(uint64_t **)buf, v8);
        }
        break;
      default:
        return;
    }
  }
}

void sub_1992F3420(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::pageHasOpenPorts(WebKit::WebExtensionContext *this, WebKit::WebPageProxy *a2)
{
  uint64_t v5 = *(void *)(*((void *)a2 + 4) + 760);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashCountedSet<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashCountedSet<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashCountedSet<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashCountedSet<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 62, &v5, &v6);
  if (!v6) {
    return 0;
  }
  BOOL v3 = *(_DWORD *)(v6 - 12) != 0;
  WTF::fastFree((WTF *)(v6 - 16), v2);
  return v3;
}

uint64_t *WebKit::WebExtensionContext::disconnectPortsForPage(WebKit::WebExtensionContext *this, WebKit::WebPageProxy *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 62);
  unint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4, *(void *)(*((void *)a2 + 4) + 760));
  uint64_t v6 = result;
  if (v4) {
    int v7 = (uint64_t *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  }
  else {
    int v7 = 0;
  }
  if (v7 == result) {
    return result;
  }
  unint64_t result = (uint64_t *)((char *)this + 496);
  unsigned int v8 = (unsigned __int8 *)v6[1];
  v6[1] = 0;
  uint64_t v9 = *((void *)this + 62);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(v9 + 16 * *(unsigned int *)(v9 - 4));
    if (v10 == v6) {
      goto LABEL_12;
    }
  }
  else
  {
    if (!v6) {
      goto LABEL_12;
    }
    uint64_t v10 = 0;
  }
  if (v10 != v6) {
    unint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(result, v6);
  }
LABEL_12:
  if (v8)
  {
    if (*((_DWORD *)v8 - 3))
    {
      unsigned int v11 = (id)qword_1EB357DF8;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v30 = *(void *)(*((void *)a2 + 4) + 760);
        int v31 = 134349056;
        uint64_t v32 = v30;
        _os_log_debug_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEBUG, "Disconnecting ports for page %{public}llu", (uint8_t *)&v31, 0xCu);
      }

      if (*((_DWORD *)v8 - 3))
      {
        uint64_t v12 = *((unsigned int *)v8 - 1);
        if (v12)
        {
          uint64_t v13 = 24 * v12;
          for (int i = v8; ; i += 24)
          {
            int v15 = *i;
            BOOL v16 = v15 == 255 && i[1] == 255;
            BOOL v17 = v16 && *((void *)i + 1) == 0;
            BOOL v18 = v17;
            if (v15 != 254 && !v18) {
              break;
            }
            v13 -= 24;
            if (!v13) {
              return (uint64_t *)WTF::fastFree((WTF *)(v8 - 16), v6);
            }
          }
        }
        else
        {
          int i = v8;
        }
        uint64_t v20 = &v8[24 * v12];
        if (v20 != i)
        {
LABEL_36:
          int v21 = *i;
          int v22 = i[1];
          uint64_t v23 = *((void *)i + 1);
          if (*((_DWORD *)i + 4))
          {
            unint64_t v24 = 0;
            do
            {
              WebKit::WebExtensionContext::removePort((uint64_t)this, v21, v22, v23, *(void *)(*((void *)a2 + 4) + 760));
              ++v24;
            }
            while (v24 < *((unsigned int *)i + 4));
          }
          WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded((uint64_t *)this, v21, v22, v23);
          while (1)
          {
            i += 24;
            if (i == v20) {
              break;
            }
            int v25 = *i;
            BOOL v28 = v25 == 255 && i[1] == 255 && *((void *)i + 1) == 0;
            if (v25 != 254 && !v28)
            {
              if (i != v20) {
                goto LABEL_36;
              }
              return (uint64_t *)WTF::fastFree((WTF *)(v8 - 16), v6);
            }
          }
        }
      }
    }
    return (uint64_t *)WTF::fastFree((WTF *)(v8 - 16), v6);
  }
  return result;
}

void sub_1992F379C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree((WTF *)(v2 - 16), a2);
  _Unwind_Resume(a1);
}

unint64_t WebKit::WebExtensionContext::addPorts(uint64_t a1, uint8_t a2, uint8_t a3, uint64_t a4, void **a5)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  unint64_t result = (unint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a5);
  unint64_t v8 = result;
  unint64_t v10 = v9;
  if (*a5) {
    uint64_t v11 = (uint64_t)&(*a5)[2 * *((unsigned int *)*a5 - 1)];
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11 != result)
  {
    uint64_t v12 = (uint64_t *)(a1 + 496);
    do
    {
      uint64_t v13 = (id)qword_1EB357DF8;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        int v54 = *(_DWORD *)(v8 + 8);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        unint64_t v55 = (WTF::StringImpl *)v62[0];
        if (v62[0]) {
          uint64_t v56 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v56 = &stru_1EEA10550;
        }
        uint64_t v57 = *(void *)v8;
        *(_DWORD *)buf = 67240962;
        *(_DWORD *)&uint8_t buf[4] = v54;
        *(_WORD *)int v65 = 2050;
        *(void *)&void v65[2] = a4;
        __int16 v66 = 2114;
        unsigned int v67 = v56;
        __int16 v68 = 2050;
        uint64_t v69 = v57;
        _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Added %{public}u port(s) for channel %{public}llu in %{public}@ world for page %{public}llu", buf, 0x26u);
        if (v55)
        {
          if (*(_DWORD *)v55 == 2) {
            WTF::StringImpl::destroy(v55, v58);
          }
          else {
            *(_DWORD *)v55 -= 2;
          }
        }
      }
      BOOL isBackgroundPage = WebKit::WebExtensionContext::isBackgroundPage(a1, *(void *)v8);
      if (isBackgroundPage)
      {
        WTF::MonotonicTime::now((WTF::MonotonicTime *)isBackgroundPage);
        *(void *)(a1 + 376) = v15;
      }
      LOBYTE(v62[0]) = a2;
      v62[1] = a4;
      int v16 = *(_DWORD *)(v8 + 8);
      int v63 = 0;
      WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t)buf, (uint64_t *)(a1 + 488), (unsigned __int8 *)v62, &v63);
      *(_DWORD *)(*(void *)buf + 16) += v16;
      uint64_t v18 = *v12;
      if (*v12
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v12, 0), (uint64_t v18 = *v12) != 0))
      {
        int v19 = *(_DWORD *)(v18 - 8);
      }
      else
      {
        int v19 = 0;
      }
      uint64_t v20 = *(void *)v8;
      unint64_t v21 = *(void *)v8 + ~(*(void *)v8 << 32);
      unint64_t v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
      unint64_t v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
      unsigned int v24 = v19 & (((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~(v23 << 27)));
      int v25 = (uint64_t *)(v18 + 16 * v24);
      uint64_t v26 = *v25;
      if (*v25)
      {
        unsigned int v27 = 0;
        int v28 = 1;
        while (v26 != v20)
        {
          if (v26 == -1) {
            unsigned int v27 = v25;
          }
          unsigned int v24 = (v24 + v28) & v19;
          int v25 = (uint64_t *)(v18 + 16 * v24);
          uint64_t v26 = *v25;
          ++v28;
          if (!*v25)
          {
            if (v27)
            {
              uint64_t *v27 = 0;
              v27[1] = 0;
              --*(_DWORD *)(*v12 - 16);
              uint64_t v20 = *(void *)v8;
              int v25 = v27;
            }
            goto LABEL_20;
          }
        }
      }
      else
      {
LABEL_20:
        uint64_t v29 = v25[1];
        uint64_t *v25 = v20;
        v25[1] = 0;
        if (v29) {
          WTF::fastFree((WTF *)(v29 - 16), v17);
        }
        uint64_t v30 = *v12;
        if (*v12) {
          int v31 = *(_DWORD *)(v30 - 12) + 1;
        }
        else {
          int v31 = 1;
        }
        *(_DWORD *)(v30 - 12) = v31;
        uint64_t v32 = *v12;
        if (*v12) {
          int v33 = *(_DWORD *)(v32 - 12);
        }
        else {
          int v33 = 0;
        }
        uint64_t v34 = (*(_DWORD *)(v32 - 16) + v33);
        unint64_t v35 = *(unsigned int *)(v32 - 4);
        if (v35 <= 0x400)
        {
          if (3 * v35 > 4 * v34) {
            goto LABEL_31;
          }
LABEL_30:
          int v25 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v12, v25);
          goto LABEL_31;
        }
        if (v35 <= 2 * v34) {
          goto LABEL_30;
        }
      }
LABEL_31:
      *(void *)int v65 = a4;
      uint64_t v38 = v25[1];
      uint64_t v37 = v25 + 1;
      uint64_t v36 = v38;
      buf[0] = a2;
      buf[1] = a3;
      if (v38
        || (WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(v37, 0), (uint64_t v36 = *v37) != 0))
      {
        int v39 = *(_DWORD *)(v36 - 8);
      }
      else
      {
        int v39 = 0;
      }
      unint64_t result = WTF::TupleHash<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash<0ul>(buf);
      uint64_t v40 = 0;
      uint8_t v41 = buf[0];
      for (int i = 1; ; ++i)
      {
        unsigned int v43 = result & v39;
        uint64_t v44 = (unsigned __int8 *)(v36 + 24 * (result & v39));
        int v45 = *v44;
        int v46 = v44[1];
        if (v45 == 255 && v46 == 255 && !*((void *)v44 + 1)) {
          break;
        }
        if (v45 == buf[0] && v46 == buf[1] && *((void *)v44 + 1) == *(void *)v65) {
          goto LABEL_57;
        }
        if (v45 == 254) {
          uint64_t v40 = (unsigned __int8 *)(v36 + 24 * v43);
        }
        unint64_t result = i + v43;
      }
      if (v40)
      {
        *(_OWORD *)uint64_t v40 = xmmword_1994F8E50;
        *((_DWORD *)v40 + 4) = 0;
        --*(_DWORD *)(*v37 - 16);
        uint8_t v41 = buf[0];
        uint64_t v44 = v40;
      }
      *uint64_t v44 = v41;
      v44[1] = buf[1];
      *((void *)v44 + 1) = *(void *)v65;
      *((_DWORD *)v44 + 4) = 0;
      uint64_t v48 = *v37;
      if (*v37) {
        int v49 = *(_DWORD *)(v48 - 12) + 1;
      }
      else {
        int v49 = 1;
      }
      *(_DWORD *)(v48 - 12) = v49;
      uint64_t v50 = *v37;
      if (*v37) {
        int v51 = *(_DWORD *)(v50 - 12);
      }
      else {
        int v51 = 0;
      }
      uint64_t v52 = (*(_DWORD *)(v50 - 16) + v51);
      unint64_t v53 = *(unsigned int *)(v50 - 4);
      if (v53 <= 0x400)
      {
        if (3 * v53 > 4 * v52) {
          goto LABEL_57;
        }
LABEL_56:
        unint64_t result = WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(v37, v44);
        uint64_t v44 = (unsigned __int8 *)result;
        goto LABEL_57;
      }
      if (v53 <= 2 * v52) {
        goto LABEL_56;
      }
LABEL_57:
      ++*((_DWORD *)v44 + 4);
      while (1)
      {
        v8 += 16;
        if (v8 == v10) {
          break;
        }
        if ((unint64_t)(*(void *)v8 + 1) > 1) {
          goto LABEL_62;
        }
      }
      unint64_t v8 = v10;
LABEL_62:
      ;
    }
    while (v8 != v11);
  }
  return result;
}

void sub_1992F3D1C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::clearQueuedPortMessages(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 504);
  if (v3)
  {
    unsigned int v7 = *(_DWORD *)(v3 - 8);
    uint64_t v9 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(a2, a3) & v7;
    unint64_t v10 = (unsigned __int8 *)(v3 + 32 * v9);
    int v11 = *v10;
    uint64_t v12 = *((void *)v10 + 1);
    if (v11 != a2 || v12 != a3)
    {
      int v14 = 1;
      while ((_BYTE)v11 != 0xFF || v12 != 0)
      {
        uint64_t v9 = (v9 + v14) & v7;
        unint64_t v10 = (unsigned __int8 *)(v3 + 32 * v9);
        int v11 = *v10;
        uint64_t v12 = *((void *)v10 + 1);
        ++v14;
        if (v11 == a2 && v12 == a3) {
          goto LABEL_18;
        }
      }
      unint64_t v10 = (unsigned __int8 *)(v3 + 32 * *(unsigned int *)(v3 - 4));
    }
LABEL_18:
    if ((unsigned __int8 *)(v3 + 32 * *(unsigned int *)(v3 - 4)) != v10)
    {
      BOOL v17 = (uint64_t *)(a1 + 504);
      *unint64_t v10 = -2;
      WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v10 + 16), v8);
      ++*(_DWORD *)(*v17 - 16);
      uint64_t v18 = *v17;
      if (*v17) {
        int v19 = *(_DWORD *)(v18 - 12) - 1;
      }
      else {
        int v19 = -1;
      }
      *(_DWORD *)(v18 - 12) = v19;
      uint64_t v20 = *v17;
      if (*v17)
      {
        unsigned int v21 = 6 * *(_DWORD *)(v20 - 12);
        unsigned int v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9) {
          WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(v17, v22 >> 1, 0);
        }
      }
      unsigned int v24 = (id)qword_1EB357DF8;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        if (v27) {
          int v25 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          int v25 = &stru_1EEA10550;
        }
        *(_DWORD *)buf = 134349314;
        uint64_t v29 = a3;
        __int16 v30 = 2114;
        int v31 = v25;
        _os_log_debug_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEBUG, "Cleared queued message(s) for port channel %{public}llu in %{public}@ world", buf, 0x16u);
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v26);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
      }
    }
  }
}

void sub_1992F3FFC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v3 == 2) {
    WTF::StringImpl::destroy(v3, a2);
  }
  else {
    *(_DWORD *)v3 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::addNativePort(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(WTF::StringImpl **)(a2 + 32);
  uint64_t v5 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v26[0]) {
      unsigned int v24 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      unsigned int v24 = &stru_1EEA10550;
    }
    *(_DWORD *)buf = 134349314;
    *(void *)&uint8_t buf[4] = v4;
    __int16 v29 = 2114;
    __int16 v30 = v24;
    _os_log_debug_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEBUG, "Added 1 port for channel %{public}llu in %{public}@ world", buf, 0x16u);
    if (v26[0])
    {
      if (*(_DWORD *)v26[0] == 2) {
        WTF::StringImpl::destroy(v26[0], v25);
      }
      else {
        *(_DWORD *)v26[0] -= 2;
      }
    }
  }
  LOBYTE(v26[0]) = 2;
  v26[1] = v4;
  int v27 = 0;
  WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t)buf, (uint64_t *)(a1 + 488), (unsigned __int8 *)v26, &v27);
  ++*(_DWORD *)(*(void *)buf + 16);
  uint64_t v6 = (uint64_t *)(a1 + 512);
  uint64_t v7 = *(void *)(a1 + 512);
  if (v7
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)(a1 + 512)),
        (uint64_t v7 = *v6) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unint64_t v9 = ((unint64_t)v4 + ~((void)v4 << 32)) ^ (((unint64_t)v4 + ~((void)v4 << 32)) >> 22);
  unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  unsigned int v12 = v8 & ((v11 >> 31) ^ v11);
  uint64_t v13 = (WTF::StringImpl **)(v7 + 16 * v12);
  int v14 = *v13;
  if (!*v13)
  {
LABEL_13:
    NSObject *v13 = v4;
    CFRetain(*(CFTypeRef *)(a2 + 8));
    BOOL v17 = v13[1];
    v13[1] = (WTF::StringImpl *)a2;
    if (v17) {
      CFRelease(*((CFTypeRef *)v17 + 1));
    }
    uint64_t v18 = *v6;
    if (*v6) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v20 = *v6;
    if (*v6) {
      int v21 = *(_DWORD *)(v20 - 12);
    }
    else {
      int v21 = 0;
    }
    uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
    unint64_t v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22) {
        return;
      }
    }
    else if (3 * v23 > 4 * v22)
    {
      return;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v6);
    return;
  }
  uint64_t v15 = 0;
  int v16 = 1;
  while (v14 != v4)
  {
    if (v14 == (WTF::StringImpl *)-1) {
      uint64_t v15 = v13;
    }
    unsigned int v12 = (v12 + v16) & v8;
    uint64_t v13 = (WTF::StringImpl **)(v7 + 16 * v12);
    int v14 = *v13;
    ++v16;
    if (!*v13)
    {
      if (v15)
      {
        WTF::StringImpl *v15 = 0;
        v15[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        uint64_t v13 = v15;
      }
      goto LABEL_13;
    }
  }
}

void sub_1992F42F0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v3 == 2) {
    WTF::StringImpl::destroy(v3, a2);
  }
  else {
    *(_DWORD *)v3 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::removeNativePort(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v28) {
      uint64_t v26 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v26 = &stru_1EEA10550;
    }
    *(_DWORD *)buf = 134349314;
    uint64_t v30 = v3;
    __int16 v31 = 2114;
    uint64_t v32 = v26;
    _os_log_debug_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEBUG, "Removed 1 port for channel %{public}llu in %{public}@ world", buf, 0x16u);
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, v27);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
  }
  WebKit::WebExtensionContext::clearQueuedPortMessages(a1, 0, v3);
  uint64_t v5 = *(unsigned __int8 **)(a1 + 488);
  uint64_t v6 = WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v5, 2u, v3);
  if (v5) {
    uint64_t v7 = &v5[24 * *((unsigned int *)v5 - 1)];
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != v6)
  {
    if (*((_DWORD *)v6 + 4) != 1)
    {
      --*((_DWORD *)v6 + 4);
      goto LABEL_8;
    }
    if (v5)
    {
      int v16 = &v5[24 * *((unsigned int *)v5 - 1)];
      if (v16 == v6) {
        goto LABEL_8;
      }
    }
    else
    {
      if (!v6) {
        goto LABEL_8;
      }
      int v16 = 0;
    }
    if (v16 != v6) {
      WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove((uint64_t *)(a1 + 488), v6);
    }
  }
LABEL_8:
  uint64_t v8 = *(void *)(a1 + 512);
  if (v8)
  {
    unsigned int v9 = *(_DWORD *)(v8 - 8);
    unint64_t v10 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
    unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    uint64_t v13 = v9 & ((v12 >> 31) ^ v12);
    uint64_t v14 = *(void *)(v8 + 16 * v13);
    if (v14 != v3)
    {
      int v15 = 1;
      while (v14)
      {
        uint64_t v13 = (v13 + v15) & v9;
        uint64_t v14 = *(void *)(v8 + 16 * v13);
        ++v15;
        if (v14 == v3) {
          goto LABEL_18;
        }
      }
      uint64_t v13 = *(unsigned int *)(v8 - 4);
    }
LABEL_18:
    if (v13 != *(_DWORD *)(v8 - 4))
    {
      BOOL v17 = (uint64_t *)(a1 + 512);
      uint64_t v18 = (void *)(v8 + 16 * v13);
      uint64_t v19 = v18[1];
      void *v18 = -1;
      v18[1] = 0;
      if (v19) {
        CFRelease(*(CFTypeRef *)(v19 + 8));
      }
      ++*(_DWORD *)(*v17 - 16);
      uint64_t v20 = *v17;
      if (*v17) {
        int v21 = *(_DWORD *)(v20 - 12) - 1;
      }
      else {
        int v21 = -1;
      }
      *(_DWORD *)(v20 - 12) = v21;
      uint64_t v22 = *v17;
      if (*v17)
      {
        unsigned int v23 = 6 * *(_DWORD *)(v22 - 12);
        unsigned int v24 = *(_DWORD *)(v22 - 4);
        if (v23 < v24 && v24 >= 9) {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(v17, v24 >> 1);
        }
      }
    }
  }
}

void sub_1992F45F0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v3 == 2) {
    WTF::StringImpl::destroy(v3, a2);
  }
  else {
    *(_DWORD *)v3 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchPortMessageEvent>(uint64_t *result, void **a2, uint64_t *a3)
{
  uint64_t v20 = result;
  uint64_t v3 = result[9];
  if (v3 && *(void *)(v3 + 8))
  {
    unint64_t result = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a2);
    uint64_t v6 = result;
    uint64_t v8 = v7;
    uint64_t v9 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
    if ((uint64_t *)v9 != result)
    {
      do
      {
        uint64_t v10 = *v6;
        uint64_t v12 = *a3;
        unint64_t v11 = (uint64_t *)a3[1];
        uint64_t v13 = (uint64_t *)a3[2];
        uint64_t v14 = v20[4];
        int v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)int v15 = 1607;
        *((void *)v15 + 1) = v14;
        *((void *)v15 + 66) = (char *)v15 + 16;
        *((void *)v15 + 67) = 512;
        *((void *)v15 + 68) = 0;
        *((void *)v15 + 70) = 0;
        *((void *)v15 + 69) = 0;
        IPC::Encoder::encodeHeader(v15);
        unsigned int v23 = v15;
        IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(v15, v12);
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v15, v11);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v15, v13);
        LOBYTE(v21) = 0;
        char v22 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v23, 0, (uint64_t)&v21, 1);
        if (v22)
        {
          uint64_t v17 = v21;
          uint64_t v21 = 0;
          if (v17) {
            (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          }
        }
        unint64_t result = (uint64_t *)v23;
        unsigned int v23 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)result, v16);
          unint64_t result = (uint64_t *)WTF::fastFree(v18, v19);
        }
        while (++v6 != v8)
        {
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_16;
          }
        }
        uint64_t v6 = v8;
LABEL_16:
        ;
      }
      while (v6 != (uint64_t *)v9);
    }
  }
  return result;
}

void sub_1992F47D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)&v15, *(char **)(a1 + 504), a2, a3);
  uint64_t v7 = v16;
  if (v16)
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v12 = v17;
      if (v17) {
        uint64_t v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v13 = &stru_1EEA10550;
      }
      *(_DWORD *)buf = 134349570;
      uint64_t v19 = v7;
      __int16 v20 = 2050;
      uint64_t v21 = a3;
      __int16 v22 = 2114;
      unsigned int v23 = v13;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Sending %{public}zu queued message(s) to port channel %{public}llu in %{public}@ world", buf, 0x20u);
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v14);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    if (v16)
    {
      uint64_t v9 = v15;
      uint64_t v10 = 24 * v16;
      do
      {
        WebKit::WebExtensionContext::firePortMessageEventsIfNeeded((uint64_t *)a1, a2, v9[1], v9[2], a3, v9);
        v9 += 3;
        v10 -= 24;
      }
      while (v10);
    }
  }
  return WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v6);
}

void sub_1992F4A40(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(_DWORD *)v11 == 2) {
    WTF::StringImpl::destroy(v11, a2);
  }
  else {
    *(_DWORD *)v11 -= 2;
  }

  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v13);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::sendQueuedNativePortMessagesIfNeeded(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)&v16, *(char **)(a1 + 504), 2u, a2);
  uint64_t v5 = v17;
  if (v17)
  {
    uint64_t v6 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 512), a2);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = qword_1EB357DF8;
      if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(void *)&uint8_t buf[4] = v5;
        __int16 v19 = 2050;
        uint64_t v20 = a2;
        _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Sending %{public}zu queued message(s) to port channel %{public}llu in native world", buf, 0x16u);
        if (!v17) {
          return WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v4);
        }
        uint64_t v9 = v16;
        uint64_t v10 = &v16[3 * v17];
      }
      else
      {
        uint64_t v9 = v16;
        uint64_t v10 = &v16[3 * v5];
      }
      do
      {
        if (*v9) {
          unint64_t v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          unint64_t v11 = &stru_1EEA10550;
        }
        uint64_t v12 = WebKit::parseJSON(v11, 1, 0);

        uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v13 = &unk_1EE9FDE78;
        v13[1] = v7;
        *(void *)buf = v13;
        WebKit::WebExtensionMessagePort::sendMessage(v7, v12, (uint64_t *)buf);
        uint64_t v14 = *(void *)buf;
        *(void *)buf = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }

        v9 += 3;
      }
      while (v9 != v10);
    }
  }
  return WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v4);
}

void sub_1992F4C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13 = a11;
  a11 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }

  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v14);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchPortDisconnectEvent>(uint64_t *result, void **a2, uint64_t **a3)
{
  uint64_t v3 = result[9];
  if (v3 && *(void *)(v3 + 8))
  {
    uint64_t v6 = result;
    unint64_t result = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a2);
    uint64_t v7 = result;
    uint64_t v9 = v8;
    uint64_t v10 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
    if ((uint64_t *)v10 != result)
    {
      do
      {
        uint64_t v11 = *v7;
        uint64_t v12 = *a3;
        uint64_t v13 = v6[4];
        uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v14 = 1606;
        *((void *)v14 + 1) = v13;
        *((void *)v14 + 66) = (char *)v14 + 16;
        *((void *)v14 + 67) = 512;
        *((void *)v14 + 68) = 0;
        *((void *)v14 + 70) = 0;
        *((void *)v14 + 69) = 0;
        IPC::Encoder::encodeHeader(v14);
        uint64_t v21 = v14;
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, v12);
        LOBYTE(v19) = 0;
        char v20 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v21, 0, (uint64_t)&v19, 1);
        if (v20)
        {
          uint64_t v16 = v19;
          uint64_t v19 = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
        unint64_t result = (uint64_t *)v21;
        uint64_t v21 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)result, v15);
          unint64_t result = (uint64_t *)WTF::fastFree(v17, v18);
        }
        while (++v7 != v9)
        {
          if ((unint64_t)(*v7 + 1) > 1) {
            goto LABEL_16;
          }
        }
        uint64_t v7 = v9;
LABEL_16:
        ;
      }
      while (v7 != (uint64_t *)v10);
    }
  }
  return result;
}

void sub_1992F4E68(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

unsigned __int8 *WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = a2;
  uint64_t v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    uint64_t v12 = (void *)(v10 + 24);
    do
    {
      *(v12 - 1) = 255;
      void *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      v12 += 4;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      int v15 = (unsigned __int8 *)(v6 + 32 * v13);
      int v16 = *v15;
      if (v16 != 254)
      {
        unsigned int v17 = (void *)*((void *)v15 + 1);
        if (v16 == 255 && v17 == 0)
        {
          WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6 + 32 * v13 + 16, v17);
        }
        else
        {
          uint64_t v19 = *a1;
          if (*a1) {
            unsigned int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            unsigned int v20 = 0;
          }
          int v21 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(v16, (uint64_t)v17);
          int v23 = 0;
          do
          {
            uint64_t v24 = v21 & v20;
            int v25 = (unsigned __int8 *)(v19 + 32 * v24);
            int v21 = ++v23 + v24;
          }
          while (*v25 != 255 || *((void *)v25 + 1) != 0);
          WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v25 + 16), v22);
          *(_OWORD *)int v25 = *(_OWORD *)v15;
          uint64_t v27 = v6 + 32 * v13;
          *((void *)v25 + 2) = 0;
          *((void *)v25 + 3) = 0;
          uint64_t v28 = *(void *)(v27 + 16);
          v27 += 16;
          *(void *)uint64_t v27 = 0;
          *((void *)v25 + 2) = v28;
          int v29 = *(_DWORD *)(v27 + 8);
          *(_DWORD *)(v27 + 8) = 0;
          *((_DWORD *)v25 + 6) = v29;
          int v30 = *(_DWORD *)(v27 + 12);
          *(_DWORD *)(v27 + 12) = 0;
          *((_DWORD *)v25 + 7) = v30;
          WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27, v31);
          if (v15 == a3) {
            uint64_t v14 = v25;
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v11);
  return v14;
}

unint64_t WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = *(WTF **)result;
      unsigned int v4 = result[3];
      int v5 = 24 * a2;
      unint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        unint64_t v7 = result;
        unint64_t v8 = (WTF *)((char *)v3 + 24 * v4);
        unint64_t v9 = v3;
        do
        {
          unint64_t v10 = *(unsigned int **)v9;
          *(void *)unint64_t v9 = 0;
          *(void *)unint64_t v7 = v10;
          *(_OWORD *)(v7 + 2) = *(_OWORD *)((char *)v9 + 8);
          unint64_t result = *(unsigned int **)v9;
          *(void *)unint64_t v9 = 0;
          if (result)
          {
            if (*result == 2) {
              unint64_t result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            }
            else {
              *result -= 2;
            }
          }
          unint64_t v9 = (WTF *)((char *)v9 + 24);
          v7 += 6;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashCountedSet<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashCountedSet<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashCountedSet<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashCountedSet<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>@<X0>(uint64_t *result@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = *result;
  if (*result)
  {
    unsigned int v4 = *(_DWORD *)(v3 - 8);
    unint64_t v5 = *a2 + ~(*a2 << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    uint64_t v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    uint64_t v9 = *(void *)(v3 + 16 * v8);
    if (v9 == *a2) {
      return WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::HashTable(a3, (unsigned __int8 **)(v3 + 16 * v8 + 8));
    }
    int v10 = 1;
    while (v9)
    {
      uint64_t v8 = (v8 + v10) & v4;
      uint64_t v9 = *(void *)(v3 + 16 * v8);
      ++v10;
      if (v9 == *a2) {
        return WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::HashTable(a3, (unsigned __int8 **)(v3 + 16 * v8 + 8));
      }
    }
  }
  *a3 = 0;
  return result;
}

uint64_t *WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::HashTable(uint64_t *a1, unsigned __int8 **a2)
{
  *a1 = 0;
  if (!*a2) {
    return a1;
  }
  uint64_t v3 = *((unsigned int *)*a2 - 3);
  if (!v3) {
    return a1;
  }
  unsigned int v5 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  unint64_t v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3) {
      goto LABEL_8;
    }
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    double v8 = (double)v3;
    double v9 = (double)v7;
    double v10 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400) {
    goto LABEL_6;
  }
LABEL_8:
  double v8 = (double)v3;
  double v9 = (double)v7;
  double v10 = 0.416666667;
LABEL_9:
  if (v9 * v10 <= v8) {
    LODWORD(v7) = 2 * v7;
  }
  if (v7 <= 8) {
    unsigned int v11 = 8;
  }
  else {
    unsigned int v11 = v7;
  }
  uint64_t Table = WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::allocateTable(v11);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  uint64_t v13 = *a2;
  if (*a2)
  {
    uint64_t v14 = *((unsigned int *)v13 - 1);
    int v15 = &v13[24 * v14];
    if (*((_DWORD *)v13 - 3))
    {
      int v16 = *a2;
      if (v14)
      {
        uint64_t v17 = 24 * v14;
        int v16 = v13;
        while (1)
        {
          int v18 = *v16;
          BOOL v19 = v18 == 255 && v16[1] == 255;
          BOOL v20 = v19 && *((void *)v16 + 1) == 0;
          BOOL v21 = v20;
          if (v18 != 254 && !v21) {
            break;
          }
          v16 += 24;
          v17 -= 24;
          if (!v17)
          {
            int v16 = v15;
            goto LABEL_36;
          }
        }
      }
      goto LABEL_36;
    }
    int v16 = &v13[24 * v14];
  }
  else
  {
    int v16 = 0;
    LODWORD(v14) = 0;
  }
  int v15 = &v13[24 * v14];
LABEL_36:
  if (v13) {
    int v23 = &v13[24 * *((unsigned int *)v13 - 1)];
  }
  else {
    int v23 = 0;
  }
  while (v16 != v23)
  {
    uint64_t v24 = *a1;
    if (*a1) {
      unsigned int v25 = *(_DWORD *)(v24 - 8);
    }
    else {
      unsigned int v25 = 0;
    }
    int v26 = WTF::TupleHash<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash<0ul>(v16);
    for (i = 0; ; int v26 = i + v28)
    {
      unsigned int v28 = v26 & v25;
      int v29 = (unsigned __int8 *)(v24 + 24 * (v26 & v25));
      if (*v29 == 255 && v29[1] == 255 && !*((void *)v29 + 1)) {
        break;
      }
      ++i;
    }
    uint64_t v30 = *((void *)v16 + 1);
    int v31 = *((_DWORD *)v16 + 4);
    *(_WORD *)int v29 = *(_WORD *)v16;
    *((void *)v29 + 1) = v30;
    *(_DWORD *)(v24 + 24 * v28 + 16) = v31;
    uint64_t v32 = v16 + 24;
    int v16 = v15;
    if (v32 != v15)
    {
      int v16 = v32;
      while (1)
      {
        int v33 = *v16;
        BOOL v34 = v33 == 255 && v16[1] == 255;
        BOOL v35 = v34 && *((void *)v16 + 1) == 0;
        BOOL v36 = v35;
        if (v33 != 254 && !v36) {
          break;
        }
        v16 += 24;
        if (v16 == v15)
        {
          int v16 = v15;
          break;
        }
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::allocateTable(unsigned int a1)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)(24 * a1 + 16));
  uint64_t result = v2 + 16;
  if (a1)
  {
    uint64_t v4 = a1;
    unsigned int v5 = (_DWORD *)(v2 + 32);
    do
    {
      *((_OWORD *)v5 - 1) = xmmword_1994F8E50;
      *unsigned int v5 = 0;
      v5 += 6;
      --v4;
    }
    while (v4);
  }
  return result;
}

unint64_t WTF::TupleHash<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash<0ul>(unsigned __int8 *a1)
{
  unsigned int v1 = ~(*a1 << 15) + *a1;
  unsigned int v2 = (9 * (v1 ^ (v1 >> 10))) ^ ((9 * (v1 ^ (v1 >> 10))) >> 6);
  unsigned int v3 = ~(a1[1] << 15) + a1[1];
  unsigned int v4 = (9 * (v3 ^ (v3 >> 10))) ^ ((9 * (v3 ^ (v3 >> 10))) >> 6);
  unint64_t v5 = *((void *)a1 + 1) + ~(*((void *)a1 + 1) << 32);
  unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  return (0xD7862706ELL
        * (unint64_t)(277951225 * ((v2 + ~(v2 << 11)) ^ ((v2 + ~(v2 << 11)) >> 16))
                           + 95187966
                           * ((0xD7862706ELL
                                           * (unint64_t)(277951225
                                                              * ((v4 + ~(v4 << 11)) ^ ((v4 + ~(v4 << 11)) >> 16))
                                                              + 95187966
                                                              * (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27))))) >> 4))) >> 4;
}

unint64_t WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, _DWORD *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  int v10 = *a3;
  uint64_t v11 = *((void *)a3 + 1);
  unint64_t result = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(*a3, v11);
  unsigned int v13 = result & v9;
  uint64_t v14 = (unsigned __int8 *)(v8 + 24 * (result & v9));
  int v15 = *v14;
  uint64_t v16 = *((void *)v14 + 1);
  if (v15 != 255 || v16 != 0)
  {
    int v18 = 0;
    int v19 = 1;
    do
    {
      if (v10 == v15 && v16 == v11)
      {
        char v27 = 0;
        uint64_t v28 = v8 + 24 * *(unsigned int *)(v8 - 4);
        goto LABEL_34;
      }
      if (v15 == 254) {
        int v18 = v14;
      }
      unsigned int v13 = (v13 + v19) & v9;
      uint64_t v14 = (unsigned __int8 *)(v8 + 24 * v13);
      int v15 = *v14;
      uint64_t v16 = *((void *)v14 + 1);
      ++v19;
    }
    while (v15 != 255 || v16 != 0);
    if (v18)
    {
      *(_OWORD *)int v18 = xmmword_1994F8E60;
      *((_DWORD *)v18 + 4) = 0;
      --*(_DWORD *)(*a2 - 16);
      LOBYTE(v10) = *a3;
      uint64_t v14 = v18;
    }
  }
  unsigned __int8 *v14 = v10;
  *((void *)v14 + 1) = *((void *)a3 + 1);
  *((_DWORD *)v14 + 4) = *a4;
  uint64_t v21 = *a2;
  if (*a2) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v23 = *a2;
  if (*a2) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_28:
      unint64_t result = WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a2, v14);
      uint64_t v14 = (unsigned __int8 *)result;
      uint64_t v23 = *a2;
      if (*a2) {
        LODWORD(v26) = *(_DWORD *)(v23 - 4);
      }
      else {
        LODWORD(v26) = 0;
      }
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_28;
  }
  uint64_t v28 = v23 + 24 * v26;
  char v27 = 1;
LABEL_34:
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v28;
  *(unsigned char *)(a1 + 16) = v27;
  return result;
}

uint64_t WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    uint64_t v11 = a2;
    uint64_t v12 = (_DWORD *)(v9 + 32);
    do
    {
      *((_OWORD *)v12 - 1) = xmmword_1994F8E60;
      _DWORD *v12 = 0;
      v12 += 6;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      int v15 = (unsigned __int8 *)(v6 + 24 * v13);
      int v16 = *v15;
      if (v16 != 254)
      {
        int v10 = (void *)*((void *)v15 + 1);
        if (v16 != 255 || v10 != 0)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            unsigned int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            unsigned int v19 = 0;
          }
          int v20 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(v16, (uint64_t)v10);
          int v21 = 0;
          do
          {
            unsigned int v22 = v20 & v19;
            uint64_t v23 = (unsigned __int8 *)(v18 + 24 * (v20 & v19));
            int v20 = ++v21 + (v20 & v19);
          }
          while (*v23 != 255 || *((void *)v23 + 1) != 0);
          long long v25 = *(_OWORD *)v15;
          *((void *)v23 + 2) = *((void *)v15 + 2);
          *(_OWORD *)uint64_t v23 = v25;
          if (v15 == a3) {
            uint64_t v14 = v18 + 24 * v22;
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t Table = WTF::HashTable<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (unsigned __int8 *)(v6 + 24 * v11);
      int v14 = *v13;
      if (v14 != 254 && (v14 != 255 || v13[1] != 255 || *((void *)v13 + 1)))
      {
        uint64_t v15 = *a1;
        if (*a1) {
          unsigned int v16 = *(_DWORD *)(v15 - 8);
        }
        else {
          unsigned int v16 = 0;
        }
        int v17 = WTF::TupleHash<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash<0ul>((unsigned __int8 *)(v6 + 24 * v11));
        for (i = 0; ; int v17 = i + v19)
        {
          unsigned int v19 = v17 & v16;
          int v20 = (unsigned __int8 *)(v15 + 24 * (v17 & v16));
          if (*v20 == 255 && v20[1] == 255 && !*((void *)v20 + 1)) {
            break;
          }
          ++i;
        }
        long long v21 = *(_OWORD *)v13;
        *((void *)v20 + 2) = *((void *)v13 + 2);
        *(_OWORD *)int v20 = v21;
        if (v13 == a3) {
          uint64_t v12 = v15 + 24 * v19;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(uint64_t *result, unsigned char *a2)
{
  *a2 = -2;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return (uint64_t *)WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(unsigned __int8 *result, unsigned __int8 a2, uint64_t a3)
{
  if (result)
  {
    unsigned int v5 = result;
    int v6 = *((_DWORD *)result - 2);
    int v7 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(a2, a3) & v6;
    uint64_t result = &v5[24 * v7];
    int v8 = *result;
    uint64_t v9 = *((void *)result + 1);
    if (v8 != a2 || v9 != a3)
    {
      int v11 = 1;
      while ((_BYTE)v8 != 0xFF || v9 != 0)
      {
        int v7 = (v7 + v11) & v6;
        uint64_t result = &v5[24 * v7];
        int v8 = *result;
        uint64_t v9 = *((void *)result + 1);
        ++v11;
        if (v8 == a2 && v9 == a3) {
          return result;
        }
      }
      return &v5[24 * *((unsigned int *)v5 - 1)];
    }
  }
  return result;
}

uint64_t WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,unsigned int,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t result, unsigned __int8 a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    int v6 = *(_DWORD *)(result - 8);
    unsigned int v7 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(a2, a3) & v6;
    int v8 = (unsigned __int8 *)(v5 + 24 * v7);
    int v9 = *v8;
    uint64_t v10 = *((void *)v8 + 1);
    if (v9 == a2 && v10 == a3)
    {
      return *(unsigned int *)(v5 + 24 * v7 + 16);
    }
    else
    {
      for (int i = 1; (_BYTE)v9 != 0xFF || v10 != 0; ++i)
      {
        unsigned int v7 = (v7 + i) & v6;
        int v14 = (unsigned __int8 *)(v5 + 24 * v7);
        int v9 = *v14;
        uint64_t v10 = *((void *)v14 + 1);
        if (v9 == a2 && v10 == a3) {
          return *(unsigned int *)(v5 + 24 * v7 + 16);
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t a1, char *a2, unsigned __int8 a3, uint64_t a4)
{
  if (!a2)
  {
LABEL_24:
    v27[0] = 0;
    *(void *)a1 = 0;
    v27[1] = 0;
    *(void *)(a1 + 8) = 0;
    return WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, a2);
  }
  unsigned int v8 = *((_DWORD *)a2 - 2);
  uint64_t result = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(a3, a4);
  uint64_t v10 = result & v8;
  int v11 = &a2[32 * v10];
  int v12 = *v11;
  uint64_t v13 = *((void *)v11 + 1);
  if (v12 != a3 || v13 != a4)
  {
    int v15 = 1;
    while ((_BYTE)v12 != 0xFF || v13 != 0)
    {
      uint64_t v10 = (v10 + v15) & v8;
      int v17 = &a2[32 * v10];
      int v12 = *v17;
      uint64_t v13 = *((void *)v17 + 1);
      ++v15;
      if (v12 == a3 && v13 == a4) {
        goto LABEL_16;
      }
    }
    goto LABEL_24;
  }
LABEL_16:
  unsigned int v19 = &a2[32 * v10];
  uint64_t v20 = *((unsigned int *)v19 + 7);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v20;
  if (v20)
  {
    if (v20 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      long long v21 = v19 + 16;
      int v22 = 24 * v20;
      uint64_t result = WTF::fastMalloc((WTF *)(24 * v20));
      *(_DWORD *)(a1 + 8) = (v22 & 0xFFFFFFF8) / 0x18;
      *(void *)a1 = result;
      unsigned int v23 = *((_DWORD *)v21 + 3);
      if (v23)
      {
        uint64_t v24 = *(void *)v21;
        uint64_t v25 = *(void *)v21 + 24 * v23;
        do
        {
          unint64_t v26 = *(_DWORD **)v24;
          if (*(void *)v24) {
            *v26 += 2;
          }
          *(void *)uint64_t result = v26;
          *(_OWORD *)(result + 8) = *(_OWORD *)(v24 + 8);
          v24 += 24;
          result += 24;
        }
        while (v24 != v25);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::sendQueuedNativePortMessagesIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void,std::optional<std::pair<WebKit::WebExtensionMessagePort::ErrorType,std::optional<WTF::String>>>>::call(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    int v2 = *(unsigned __int8 *)(a2 + 16);
    if (*(unsigned char *)(a2 + 16))
    {
      int v3 = *(WTF::StringImpl **)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      uint64_t v4 = *(void *)(result + 8);
      if (v3) {
        *(_DWORD *)v3 += 2;
      }
    }
    else
    {
      int v3 = 0;
      uint64_t v4 = *(void *)(result + 8);
    }
    uint64_t result = WebKit::WebExtensionMessagePort::remove(v4);
    if (v2 && v3)
    {
      if (*(_DWORD *)v3 == 2) {
        uint64_t result = WTF::StringImpl::destroy(v3, v5);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
      if (*(_DWORD *)v3 == 2)
      {
        return WTF::StringImpl::destroy(v3, v5);
      }
      else
      {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  return result;
}

void sub_1992F5FAC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  int v4 = v3;
  if (v4 && v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::runtimeGetBackgroundPage(uint64_t a1, uint64_t *a2)
{
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v5 = &unk_1EE9FDF30;
  v5[1] = a1;
  v5[2] = a1;
  v5[3] = v4;
  unsigned int v7 = v5;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessary(a1, (uint64_t *)&v7);
  uint64_t result = (uint64_t)v7;
  unsigned int v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1992F60AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::runtimeOpenOptionsPage(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionContext::optionsPageURL((WebKit::WebExtensionContext *)a1, (WTF::URL *)&v50);
  char v6 = v51;
  unsigned int v7 = v50;
  uint64_t v50 = 0;
  if (!v7)
  {
LABEL_4:
    if ((v6 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v7, v4);
  if ((v6 & 1) == 0)
  {
LABEL_5:
    WebKit::toWebExtensionError<>((WebKit *)@"runtime.openOptionsPage()", 0, &cfstr_NoOptionsPageI.isa, v5, &v49);
    unsigned int v8 = v49;
    int v49 = 0;
    uint64_t v50 = v8;
    LOBYTE(v51) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a2);
    if ((_BYTE)v51)
    {
      uint64_t v10 = v50;
      uint64_t v50 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    unsigned int v23 = v49;
    int v49 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v9);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    return;
  }
LABEL_10:
  uint64_t v11 = *(void *)(a1 + 72);
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 8);
    if (v12) {
      uint64_t v13 = (id *)(v12 - 16);
    }
    else {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  int v14 = WebKit::WebExtensionController::delegate(v13);
  int v15 = objc_opt_respondsToSelector();
  if ((v15 | objc_opt_respondsToSelector()))
  {
    if (v15)
    {
      uint64_t v17 = *(void *)(a1 + 72);
      if (v17)
      {
        uint64_t v18 = *(void *)(v17 + 8);
        if (v18) {
          unsigned int v19 = (id *)(v18 - 16);
        }
        else {
          unsigned int v19 = 0;
        }
      }
      else
      {
        unsigned int v19 = 0;
      }
      uint64_t v25 = WebKit::WebExtensionAction::wrapper(v19);
      unint64_t v26 = WebKit::WebExtensionAction::wrapper((id *)a1);
      uint64_t v27 = *a2;
      *a2 = 0;
      uint64_t v28 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
      void *v28 = MEMORY[0x1E4F14398];
      v28[1] = 50331650;
      v28[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
      v28[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
      v28[4] = v27;
      int v29 = _Block_copy(v28);

      uint64_t v30 = _Block_copy(v29);
      [v14 webExtensionController:v25 openOptionsPageForExtensionContext:v26 completionHandler:v30];
    }
    else
    {
      if (*(_DWORD *)(a1 + 540)) {
        WebKit::WebExtensionContext::getWindow(a1, **(void **)(a1 + 528), 0, 0, 0, (uint64_t *)&v49);
      }
      else {
        int v49 = 0;
      }
      id v31 = [[WKWebExtensionTabConfiguration alloc] _init];
      [v31 _setShouldBeActive:1];
      [v31 _setShouldAddToSelection:1];
      uint64_t v32 = v49;
      if (v49) {
        id WeakRetained = objc_loadWeakRetained((id *)v49 + 4);
      }
      else {
        id WeakRetained = 0;
      }
      [v31 _setWindow:WeakRetained];
      if (v32)
      {

        WebKit::WebExtensionWindow::tabs((uint64_t)v32, 0, (uint64_t *)&v50);
        uint64_t v34 = v52;
      }
      else
      {
        uint64_t v34 = 0;
      }
      [v31 _setIndex:v34];
      if (v32) {
        WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v35);
      }
      WebKit::WebExtensionContext::optionsPageURL((WebKit::WebExtensionContext *)a1, (WTF::URL *)&v48);
      BOOL v36 = WTF::URL::operator NSURL *();
      [v31 _setURL:v36];

      uint64_t v38 = v48;
      uint64_t v48 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2) {
          WTF::StringImpl::destroy(v38, v37);
        }
        else {
          *(_DWORD *)v38 -= 2;
        }
      }
      uint64_t v39 = *(void *)(a1 + 72);
      if (v39)
      {
        uint64_t v40 = *(void *)(v39 + 8);
        if (v40) {
          uint8_t v41 = (id *)(v40 - 16);
        }
        else {
          uint8_t v41 = 0;
        }
      }
      else
      {
        uint8_t v41 = 0;
      }
      uint64_t v42 = WebKit::WebExtensionAction::wrapper(v41);
      unsigned int v43 = WebKit::WebExtensionAction::wrapper((id *)a1);
      uint64_t v44 = *a2;
      *a2 = 0;
      int v45 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
      void *v45 = MEMORY[0x1E4F14398];
      v45[1] = 50331650;
      void v45[2] = WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1>(WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1)::{lambda(void *,objc_object  {objcproto17WKWebExtensionTab},NSError)#1}::__invoke;
      v45[3] = &WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1>(WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1)::descriptor;
      v45[4] = v44;
      int v46 = _Block_copy(v45);

      unint64_t v47 = _Block_copy(v46);
      [v14 webExtensionController:v42 openNewTabUsingConfiguration:v31 forExtensionContext:v43 completionHandler:v47];

      if (v32) {
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v32);
      }
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"runtime.openOptionsPage()", 0, &cfstr_ItIsNotImpleme.isa, v16, &v49);
    uint64_t v20 = v49;
    int v49 = 0;
    uint64_t v50 = v20;
    LOBYTE(v51) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a2);
    if ((_BYTE)v51)
    {
      int v22 = v50;
      uint64_t v50 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v21);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
    }
    uint64_t v24 = v49;
    int v49 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v21);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
  }
}

void sub_1992F65F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, char a17)
{
  if (a15) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)a15);
  }

  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::runtimeSendMessage(uint64_t a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t *a5)
{
  int v9 = *a2;
  if (v9 && *((_DWORD *)v9 + 1) && (WTF::equal(*(WTF **)(a1 + 120), v9, a3) & 1) == 0)
  {
    WebKit::toWebExtensionError<>((WebKit *)@"runtime.sendMessage()", &cfstr_Extensionid.isa, &cfstr_CrossExtension.isa, v10, &v60);
    int v22 = v60;
    uint64_t v60 = 0;
    uint64_t v44 = (uint64_t)v22;
    LODWORD(v45) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(a5);
    ((void (*)(WebKit::WebExtensionTab **, uint64_t *))off_1EE9FDED8)(&v59, &v44);
    LODWORD(v45) = -1;
LABEL_69:
    uint64_t result = v60;
    uint64_t v60 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  LOBYTE(v60) = 0;
  char v61 = 0;
  if (*(unsigned char *)(a4 + 8))
  {
    uint64_t v11 = *(WTF::StringImpl **)a4;
    if (*(void *)a4) {
      *(_DWORD *)v11 += 2;
    }
    uint64_t v60 = v11;
    char v61 = 1;
  }
  std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](v62, a4 + 16);
  v63[0] = *(_OWORD *)(a4 + 200);
  *(_OWORD *)((char *)v63 + 9) = *(_OWORD *)(a4 + 209);
  uint64_t v12 = *(WTF::StringImpl **)(a4 + 232);
  if (v12) {
    *(_DWORD *)v12 += 2;
  }
  uint64_t v64 = v12;
  long long v13 = *(_OWORD *)(a4 + 256);
  long long v65 = *(_OWORD *)(a4 + 240);
  long long v66 = v13;
  WebKit::WebExtensionContext::getCurrentTab(a1, *(void *)(a4 + 216), 0, 0, &v59);
  int v14 = v59;
  if (v59)
  {
    WebKit::WebExtensionTab::parameters(v59, (uint64_t)&v44);
    std::optional<WebKit::WebExtensionTabParameters>::operator=[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)v62, (uint64_t)&v44);
    if (v52)
    {
      unsigned int v16 = v51;
      int v51 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v15);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    if (v50[8])
    {
      uint64_t v24 = v46;
      int v46 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v15);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
    }
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v14);
    goto LABEL_31;
  }
  if (*(unsigned char *)(a4 + 224) != 1)
  {
LABEL_31:
    char v67 = 28;
    WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v59, &v67, 1);
    uint64_t v44 = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v25 = (WTF::StringImpl *)*a5;
    *a5 = 0;
    uint64_t v45 = a1;
    int v46 = v25;
    unint64_t v26 = *(WTF::StringImpl **)a3;
    if (*(void *)a3) {
      *(_DWORD *)v26 += 2;
    }
    unint64_t v47 = v26;
    LOBYTE(v48) = 0;
    char v49 = 0;
    if (v61)
    {
      uint64_t v27 = v60;
      if (v60) {
        *(_DWORD *)v60 += 2;
      }
      uint64_t v48 = v27;
      char v49 = 1;
    }
    std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](v50, (uint64_t)v62);
    v53[0] = v63[0];
    *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)((char *)v63 + 9);
    uint64_t v28 = v64;
    if (v64) {
      *(_DWORD *)v64 += 2;
    }
    int v54 = v28;
    long long v55 = v65;
    long long v56 = v66;
    char v57 = 0;
    uint64_t v29 = WTF::fastMalloc((WTF *)0x140);
    uint64_t v30 = v29;
    *(void *)uint64_t v29 = &unk_1EE9FDF68;
    *(void *)(v29 + 8) = v44;
    *(void *)(v29 + 16) = v45;
    id v31 = v46;
    uint64_t v45 = 0;
    int v46 = 0;
    *(void *)(v29 + 24) = v31;
    uint64_t v32 = v47;
    if (v47) {
      *(_DWORD *)v47 += 2;
    }
    *(unsigned char *)(v29 + 40) = 0;
    *(void *)(v29 + 32) = v32;
    *(unsigned char *)(v29 + 48) = 0;
    if (v49)
    {
      int v33 = v48;
      uint64_t v48 = 0;
      *(void *)(v29 + 40) = v33;
      *(unsigned char *)(v29 + 48) = 1;
    }
    std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v29 + 56), (uint64_t)v50);
    long long v34 = v53[0];
    *(_OWORD *)(v30 + 249) = *(_OWORD *)((char *)v53 + 9);
    *(_OWORD *)(v30 + 240) = v34;
    WTF::URL::URL(v30 + 272, (uint64_t *)&v54);
    *(unsigned char *)(v30 + 312) = v57;
    int v58 = (WTF::StringImpl *)v30;
    WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, (unsigned __int8 **)&v59, (uint64_t *)&v58);
    BOOL v36 = v58;
    int v58 = 0;
    if (v36) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v36 + 8))(v36);
    }
    uint64_t v37 = v54;
    int v54 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v35);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v50);
    if (v49)
    {
      uint64_t v38 = v48;
      uint64_t v48 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2) {
          WTF::StringImpl::destroy(v38, v20);
        }
        else {
          *(_DWORD *)v38 -= 2;
        }
      }
    }
    uint64_t v39 = v47;
    unint64_t v47 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, v20);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
    uint64_t v40 = v46;
    int v46 = 0;
    if (v40) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v40 + 8))(v40);
    }
    uint64_t v41 = v45;
    uint64_t v45 = 0;
    if (v41) {
      CFRelease(*(CFTypeRef *)(v41 + 8));
    }
    if (v59) {
      WTF::fastFree((WebKit::WebExtensionTab *)((char *)v59 - 16), v20);
    }
    goto LABEL_64;
  }
  uint64_t v17 = qword_1EB357DF8;
  if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v44) = 0;
    _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "Tab not found for message for content script message", (uint8_t *)&v44, 2u);
  }
  WebKit::toWebExtensionError<>((WebKit *)@"runtime.sendMessage()", 0, &cfstr_TabNotFound.isa, v18, &v58);
  unsigned int v19 = v58;
  int v58 = 0;
  uint64_t v44 = (uint64_t)v19;
  LODWORD(v45) = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(a5);
  if (v45 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9FDED0[v45])(&v67, &v44);
  }
  LODWORD(v45) = -1;
  long long v21 = v58;
  int v58 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v20);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
LABEL_64:
  uint64_t v42 = v64;
  uint64_t v64 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, v20);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62);
  if (v61) {
    goto LABEL_69;
  }
  return result;
}

void sub_1992F6DA4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,WTF::StringImpl *a48,uint64_t a49,WTF::StringImpl *a50,char a51)
{
  if (a10 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9FDED0[a10])(v52 - 81, &a9);
  }
  LODWORD(a10) = -1;
  int v54 = a48;
  a48 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2) {
      WTF::StringImpl::destroy(v54, a2);
    }
    else {
      *(_DWORD *)v54 -= 2;
    }
  }
  long long v55 = (WTF::StringImpl *)STACK[0x230];
  STACK[0x230] = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2) {
      WTF::StringImpl::destroy(v55, a2);
    }
    else {
      *(_DWORD *)v55 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v51);
  if (a51)
  {
    char v57 = a50;
    a50 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2) {
        WTF::StringImpl::destroy(v57, v56);
      }
      else {
        *(_DWORD *)v57 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

void sub_1992F70BC()
{
}

uint64_t std::optional<WebKit::WebExtensionTabParameters>::operator=[abi:sn180100]<WebKit::WebExtensionTabParameters,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 176))
  {
    uint64_t v4 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    *(void *)a1 = v4;
    std::__optional_storage_base<WTF::URL,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::URL,false>>((WTF::StringImpl *)(a1 + 16), (unsigned __int8 *)(a2 + 16));
    std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>(a1 + 64, a2 + 64);
    long long v5 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v5;
    long long v6 = *(_OWORD *)(a2 + 112);
    long long v7 = *(_OWORD *)(a2 + 128);
    long long v8 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 154) = *(_OWORD *)(a2 + 154);
    *(_OWORD *)(a1 + 128) = v7;
    *(_OWORD *)(a1 + 144) = v8;
    *(_OWORD *)(a1 + 112) = v6;
  }
  else
  {
    std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters*>(a1, a2);
    *(unsigned char *)(a1 + 176) = 1;
  }
  return a1;
}

WTF::StringImpl *WebKit::WebExtensionContext::runtimeConnect(uint64_t a1, const WTF::StringImpl **a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint8_t v12 = *(unsigned char *)(a5 + 224);
  uint64_t v70 = *(WTF::StringImpl **)(a5 + 216);
  WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::HashCountedSet((uint64_t *)&v52, (uint64_t *)&v70, 1);
  WebKit::WebExtensionContext::addPorts(a1, v12, 0, a3, (void **)&v52);
  if (v52) {
    WTF::fastFree((WTF::StringImpl *)((char *)v52 - 16), v13);
  }
  int v15 = *a2;
  if (*a2 && *((_DWORD *)v15 + 1) && (WTF::equal(*(WTF **)(a1 + 120), v15, v14) & 1) == 0)
  {
    WebKit::toWebExtensionError<>((WebKit *)@"runtime.connect()", &cfstr_Extensionid.isa, &cfstr_CrossExtension.isa, v16, &v70);
    uint64_t v28 = v70;
    uint64_t v70 = 0;
    uint64_t v52 = v28;
    LOBYTE(v53) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a6);
    if ((_BYTE)v53)
    {
      uint64_t v30 = v52;
      uint64_t v52 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2) {
          WTF::StringImpl::destroy(v30, v29);
        }
        else {
          *(_DWORD *)v30 -= 2;
        }
      }
    }
    goto LABEL_79;
  }
  LOBYTE(v70) = 0;
  char v71 = 0;
  if (*(unsigned char *)(a5 + 8))
  {
    uint64_t v17 = *(WTF::StringImpl **)a5;
    if (*(void *)a5) {
      *(_DWORD *)v17 += 2;
    }
    uint64_t v70 = v17;
    char v71 = 1;
  }
  std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](v72, a5 + 16);
  v73[0] = *(_OWORD *)(a5 + 200);
  *(_OWORD *)((char *)v73 + 9) = *(_OWORD *)(a5 + 209);
  uint64_t v18 = *(WTF::StringImpl **)(a5 + 232);
  if (v18) {
    *(_DWORD *)v18 += 2;
  }
  uint64_t v74 = v18;
  long long v19 = *(_OWORD *)(a5 + 256);
  long long v75 = *(_OWORD *)(a5 + 240);
  long long v76 = v19;
  WebKit::WebExtensionContext::getCurrentTab(a1, *(void *)(a5 + 216), 0, 0, &v69);
  uint64_t v20 = v69;
  if (v69)
  {
    WebKit::WebExtensionTab::parameters(v69, (uint64_t)&v52);
    std::optional<WebKit::WebExtensionTabParameters>::operator=[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)v72, (uint64_t)&v52);
    if (v61)
    {
      int v22 = v60;
      uint64_t v60 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v21);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
    }
    if (v59[0])
    {
      id v31 = v54;
      int v54 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, v21);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
      }
    }
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v20);
    goto LABEL_35;
  }
  if (*(unsigned char *)(a5 + 224) != 1)
  {
LABEL_35:
    char v67 = 25;
    WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v69, &v67, 1);
    uint64_t v52 = (WTF::StringImpl *)a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v32 = (WTF::StringImpl *)*a6;
    *a6 = 0;
    uint64_t v53 = a1;
    int v54 = v32;
    uint64_t v55 = a3;
    int v33 = *a4;
    if (*a4) {
      *(_DWORD *)v33 += 2;
    }
    long long v56 = v33;
    LOBYTE(v57) = 0;
    char v58 = 0;
    if (v71)
    {
      long long v34 = v70;
      if (v70) {
        *(_DWORD *)v70 += 2;
      }
      char v57 = v34;
      char v58 = 1;
    }
    std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](v59, (uint64_t)v72);
    v62[0] = v73[0];
    *(_OWORD *)((char *)v62 + 9) = *(_OWORD *)((char *)v73 + 9);
    BOOL v35 = v74;
    if (v74) {
      *(_DWORD *)v74 += 2;
    }
    int v63 = v35;
    long long v64 = v75;
    long long v65 = v76;
    __int16 v66 = v12;
    uint64_t v36 = WTF::fastMalloc((WTF *)0x148);
    uint64_t v37 = v36;
    *(void *)uint64_t v36 = &unk_1EE9FDFF0;
    *(void *)(v36 + 8) = v52;
    *(void *)(v36 + 16) = v53;
    uint64_t v38 = v54;
    uint64_t v53 = 0;
    int v54 = 0;
    *(void *)(v36 + 24) = v38;
    *(void *)(v36 + 32) = v55;
    uint64_t v39 = v56;
    if (v56) {
      *(_DWORD *)v56 += 2;
    }
    *(unsigned char *)(v36 + 48) = 0;
    *(void *)(v36 + 40) = v39;
    *(unsigned char *)(v36 + 56) = 0;
    if (v58)
    {
      uint64_t v40 = v57;
      char v57 = 0;
      *(void *)(v36 + 48) = v40;
      *(unsigned char *)(v36 + 56) = 1;
    }
    std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v36 + 64), (uint64_t)v59);
    long long v41 = v62[0];
    *(_OWORD *)(v37 + 257) = *(_OWORD *)((char *)v62 + 9);
    *(_OWORD *)(v37 + 248) = v41;
    WTF::URL::URL(v37 + 280, (uint64_t *)&v63);
    *(_WORD *)(v37 + 320) = v66;
    __int16 v68 = (WTF::StringImpl *)v37;
    WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, (unsigned __int8 **)&v69, (uint64_t *)&v68);
    unsigned int v43 = v68;
    __int16 v68 = 0;
    if (v43) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v43 + 8))(v43);
    }
    uint64_t v44 = v63;
    int v63 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, v42);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v59);
    if (v58)
    {
      uint64_t v45 = v57;
      char v57 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2) {
          WTF::StringImpl::destroy(v45, v26);
        }
        else {
          *(_DWORD *)v45 -= 2;
        }
      }
    }
    int v46 = v56;
    long long v56 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2) {
        WTF::StringImpl::destroy(v46, v26);
      }
      else {
        *(_DWORD *)v46 -= 2;
      }
    }
    unint64_t v47 = v54;
    int v54 = 0;
    if (v47) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v47 + 8))(v47);
    }
    uint64_t v48 = v53;
    uint64_t v53 = 0;
    if (v48) {
      CFRelease(*(CFTypeRef *)(v48 + 8));
    }
    if (v69) {
      WTF::fastFree((WebKit::WebExtensionTab *)((char *)v69 - 16), v26);
    }
    goto LABEL_74;
  }
  unsigned int v23 = qword_1EB357DF8;
  if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v52) = 0;
    _os_log_error_impl(&dword_1985F2000, v23, OS_LOG_TYPE_ERROR, "Tab not found for message for content script port", (uint8_t *)&v52, 2u);
  }
  WebKit::toWebExtensionError<>((WebKit *)@"runtime.connect()", 0, &cfstr_TabNotFound.isa, v24, &v68);
  uint64_t v25 = v68;
  __int16 v68 = 0;
  uint64_t v52 = v25;
  LOBYTE(v53) = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a6);
  if ((_BYTE)v53)
  {
    uint64_t v27 = v52;
    uint64_t v52 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, v26);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
  char v49 = v68;
  __int16 v68 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2) {
      WTF::StringImpl::destroy(v49, v26);
    }
    else {
      *(_DWORD *)v49 -= 2;
    }
  }
LABEL_74:
  uint64_t v50 = v74;
  uint64_t v74 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2) {
      WTF::StringImpl::destroy(v50, v26);
    }
    else {
      *(_DWORD *)v50 -= 2;
    }
  }
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v72);
  if (v71)
  {
LABEL_79:
    uint64_t result = v70;
    uint64_t v70 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1992F77B0(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,WTF::StringImpl *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,WTF::StringImpl *a50,uint64_t a51,WTF::StringImpl *a52,char a53)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a50)
  {
    if (*(_DWORD *)a50 == 2) {
      WTF::StringImpl::destroy(a50, a2);
    }
    else {
      *(_DWORD *)a50 -= 2;
    }
  }
  uint64_t v55 = (WTF::StringImpl *)STACK[0x240];
  STACK[0x240] = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2) {
      WTF::StringImpl::destroy(v55, a2);
    }
    else {
      *(_DWORD *)v55 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v53);
  if (a53 && a52)
  {
    if (*(_DWORD *)a52 == 2) {
      WTF::StringImpl::destroy(a52, v56);
    }
    else {
      *(_DWORD *)a52 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::runtimeSendNativeMessage(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  if (*a3) {
    long long v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    long long v7 = &stru_1EEA10550;
  }
  long long v8 = WebKit::parseJSON(v7, 1, 0);

  uint64_t v9 = *(void *)(a1 + 72);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 8);
    if (v10) {
      uint64_t v11 = (id *)(v10 - 16);
    }
    else {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint8_t v12 = WebKit::WebExtensionController::delegate(v11);
  if (objc_opt_respondsToSelector())
  {
    if (*a2) {
      id v14 = (id)WTF::StringImpl::operator NSString *();
    }
    else {
      id v14 = 0;
    }
    uint64_t v18 = *(void *)(a1 + 72);
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 8);
      if (v19) {
        uint64_t v20 = (id *)(v19 - 16);
      }
      else {
        uint64_t v20 = 0;
      }
    }
    else
    {
      uint64_t v20 = 0;
    }
    long long v21 = WebKit::WebExtensionAction::wrapper(v20);
    int v22 = WebKit::WebExtensionAction::wrapper((id *)a1);
    uint64_t v23 = *a4;
    *a4 = 0;
    uint64_t v24 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    void *v24 = MEMORY[0x1E4F14398];
    v24[1] = 50331650;
    v24[2] = WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeSendNativeMessage(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeSendNativeMessage(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void *,objc_object *,NSError *)#1}::__invoke;
    void v24[3] = &WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeSendNativeMessage(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeSendNativeMessage(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::descriptor;
    v24[4] = v23;
    uint64_t v25 = _Block_copy(v24);

    unint64_t v26 = _Block_copy(v25);
    [v12 webExtensionController:v21 sendMessage:v8 toApplicationWithIdentifier:v14 forExtensionContext:v22 replyHandler:v26];
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"runtime.sendNativeMessage()", 0, &cfstr_NativeMessagin.isa, v13, &v27);
    int v15 = v27;
    uint64_t v27 = 0;
    uint64_t v28 = v15;
    int v29 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(a4);
    if (v29 != -1) {
      ((void (*)(char *, WTF::StringImpl **))off_1EE9FDED0[v29])(&v30, &v28);
    }
    int v29 = -1;
    uint64_t v17 = v27;
    uint64_t v27 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
}

void sub_1992F7D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_1992F7E28()
{
  JUMPOUT(0x1992F7E20);
}

void WebKit::WebExtensionContext::runtimeConnectNative(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, WTF::StringImpl *a4, uint64_t *a5)
{
  v35[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  v35[0] = a4;
  WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::HashCountedSet((uint64_t *)&v33, (uint64_t *)v35, 1);
  WebKit::WebExtensionContext::addPorts(a1, 0, 2u, a3, (void **)&v33);
  if (v33) {
    WTF::fastFree((WTF::StringImpl *)((char *)v33 - 16), v9);
  }
  uint64_t v10 = (WebKit *)API::Object::newObject(0x28uLL, 118);
  uint64_t v11 = v10;
  uint8_t v12 = *a2;
  if (v12) {
    *(_DWORD *)v12 += 2;
  }
  int v33 = v12;
  WebKit::WebExtensionMessagePort::WebExtensionMessagePort(v10, a1, (_DWORD **)&v33, a3);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v13);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v14 = *(void *)(a1 + 72);
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 8);
    if (v15) {
      unsigned int v16 = (id *)(v15 - 16);
    }
    else {
      unsigned int v16 = 0;
    }
  }
  else
  {
    unsigned int v16 = 0;
  }
  uint64_t v17 = WebKit::WebExtensionController::delegate(v16);
  if (objc_opt_respondsToSelector())
  {
    uint64_t v19 = *(void *)(a1 + 72);
    if (v19)
    {
      uint64_t v20 = *(void *)(v19 + 8);
      if (v20) {
        long long v21 = (id *)(v20 - 16);
      }
      else {
        long long v21 = 0;
      }
    }
    else
    {
      long long v21 = 0;
    }
    uint64_t v25 = WebKit::WebExtensionAction::wrapper(v21);
    unint64_t v26 = WebKit::WebExtensionAction::wrapper((id *)v11);
    uint64_t v27 = WebKit::WebExtensionAction::wrapper((id *)a1);
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v28 = *a5;
    *a5 = 0;
    CFRetain(*((CFTypeRef *)v11 + 1));
    int v29 = malloc_type_malloc(0x48uLL, 0x10E0040B39A8193uLL);
    void *v29 = MEMORY[0x1E4F14398];
    v29[1] = 50331650;
    v29[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeConnectNative(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeConnectNative(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v29[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeConnectNative(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeConnectNative(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    v29[4] = a1;
    v29[5] = a1;
    v29[6] = v28;
    v29[7] = v11;
    v29[8] = a3;
    char v30 = _Block_copy(v29);

    id v31 = _Block_copy(v30);
    [v17 webExtensionController:v25 connectUsingMessagePort:v26 forExtensionContext:v27 completionHandler:v31];

LABEL_31:
    CFRelease(*((CFTypeRef *)v11 + 1));
    return;
  }
  WebKit::toWebExtensionError<>((WebKit *)@"runtime.connectNative()", 0, &cfstr_NativeMessagin.isa, v18, v35);
  int v22 = v35[0];
  v35[0] = 0;
  int v33 = v22;
  char v34 = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a5);
  if (v34)
  {
    uint64_t v24 = v33;
    int v33 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v23);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
  }
  uint64_t v32 = v35[0];
  v35[0] = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v23);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }

  if (v11) {
    goto LABEL_31;
  }
}

void sub_1992F813C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11)
{
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::runtimeWebPageSendMessage(uint64_t a1, const WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, WTF::StringImpl **a5)
{
  uint64_t v9 = *(void *)(a1 + 72);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 8);
    if (v10) {
      uint64_t v11 = (WebKit::WebExtensionController *)(v10 - 16);
    }
    else {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  WebKit::WebExtensionController::extensionContext(v11, a2, &v74);
  WebKit::WebExtensionContext::getCurrentTab(a1, *(void *)(a4 + 216), 0, 0, &v73);
  uint8_t v12 = v73;
  uint64_t v13 = v74;
  if (v74 && v73)
  {
    LOBYTE(v66) = 0;
    char v67 = 0;
    if (*(unsigned char *)(a4 + 8))
    {
      uint64_t v14 = *(WTF::StringImpl **)a4;
      if (*(void *)a4) {
        *(_DWORD *)v14 += 2;
      }
      __int16 v66 = v14;
      char v67 = 1;
    }
    std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](v68, a4 + 16);
    v69[0] = *(_OWORD *)(a4 + 200);
    *(_OWORD *)((char *)v69 + 9) = *(_OWORD *)(a4 + 209);
    uint64_t v15 = *(WTF::StringImpl **)(a4 + 232);
    if (v15) {
      *(_DWORD *)v15 += 2;
    }
    uint64_t v70 = v15;
    long long v16 = *(_OWORD *)(a4 + 256);
    long long v71 = *(_OWORD *)(a4 + 240);
    long long v72 = v16;
    WebKit::WebExtensionTab::parameters(v12, (uint64_t)&v48);
    std::optional<WebKit::WebExtensionTabParameters>::operator=[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)v68, (uint64_t)&v48);
    if (v56)
    {
      uint64_t v18 = v55;
      uint64_t v55 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v17);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
    }
    if (v54[8])
    {
      long long v21 = v50;
      uint64_t v50 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v17);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
    }
    int v22 = (StringImpl *)v70;
    if (v70) {
      *(_DWORD *)v70 += 2;
    }
    v65.m_string.m_impl.m_ptr = v22;
    *(_OWORD *)((char *)&v65 + 8) = v71;
    *(_OWORD *)&v65.m_hostEnd = v72;
    uint64_t v23 = *(WebKit::WebExtension **)(v13 + 64);
    WebKit::WebExtension::populateExternallyConnectableIfNeeded(v23);
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v64, (void **)v23 + 15);
    if ((WebKit::WebExtensionContext::permissionState(a1, &v65, (URL *)v12, 3) & 0xFFFFFFFE) == 2
      && (WebKit::WebExtensionMatchPattern::patternsMatchURL(&v64, (WTF::URL *)&v65) & 1) != 0)
    {
      char v62 = 29;
      WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v63, &v62, 1);
      uint64_t v48 = (void *)a1;
      CFRetain(*(CFTypeRef *)(a1 + 8));
      uint64_t v24 = *a5;
      *a5 = 0;
      uint64_t v49 = a1;
      uint64_t v50 = v24;
      uint64_t v25 = *a3;
      if (*a3) {
        *(_DWORD *)v25 += 2;
      }
      uint64_t v51 = v25;
      LOBYTE(v52) = 0;
      char v53 = 0;
      if (v67)
      {
        unint64_t v26 = v66;
        if (v66) {
          *(_DWORD *)v66 += 2;
        }
        uint64_t v52 = v26;
        char v53 = 1;
      }
      std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](v54, (uint64_t)v68);
      v57[0] = v69[0];
      *(_OWORD *)((char *)v57 + 9) = *(_OWORD *)((char *)v69 + 9);
      uint64_t v27 = v70;
      if (v70) {
        *(_DWORD *)v70 += 2;
      }
      char v58 = v27;
      long long v59 = v71;
      long long v60 = v72;
      uint64_t v28 = WTF::fastMalloc((WTF *)0x138);
      uint64_t v29 = v28;
      *(void *)uint64_t v28 = &unk_1EE9FE090;
      *(void *)(v28 + 8) = v48;
      *(void *)(v28 + 16) = v49;
      char v30 = v50;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      *(void *)(v28 + 24) = v30;
      id v31 = v51;
      if (v51) {
        *(_DWORD *)v51 += 2;
      }
      *(unsigned char *)(v28 + 40) = 0;
      *(void *)(v28 + 32) = v31;
      *(unsigned char *)(v28 + 48) = 0;
      if (v53)
      {
        uint64_t v32 = v52;
        uint64_t v52 = 0;
        *(void *)(v28 + 40) = v32;
        *(unsigned char *)(v28 + 48) = 1;
      }
      std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v28 + 56), (uint64_t)v54);
      long long v33 = v57[0];
      *(_OWORD *)(v29 + 249) = *(_OWORD *)((char *)v57 + 9);
      *(_OWORD *)(v29 + 240) = v33;
      WTF::URL::URL(v29 + 272, (uint64_t *)&v58);
      uint64_t v61 = v29;
      WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v63, &v61);
      uint64_t v35 = v61;
      uint64_t v61 = 0;
      if (v35) {
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
      uint64_t v36 = v58;
      char v58 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2) {
          WTF::StringImpl::destroy(v36, v34);
        }
        else {
          *(_DWORD *)v36 -= 2;
        }
      }
      std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v54);
      if (v53)
      {
        uint64_t v44 = v52;
        uint64_t v52 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2) {
            WTF::StringImpl::destroy(v44, v39);
          }
          else {
            *(_DWORD *)v44 -= 2;
          }
        }
      }
      uint64_t v45 = v51;
      uint64_t v51 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2) {
          WTF::StringImpl::destroy(v45, v39);
        }
        else {
          *(_DWORD *)v45 -= 2;
        }
      }
      int v46 = v50;
      uint64_t v50 = 0;
      if (v46) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v46 + 8))(v46);
      }
      uint64_t v47 = v49;
      uint64_t v49 = 0;
      if (v47) {
        CFRelease(*(CFTypeRef *)(v47 + 8));
      }
      if (v63) {
        WTF::fastFree((WTF *)(v63 - 16), v39);
      }
    }
    else
    {
      uint64_t v37 = *a5;
      *a5 = 0;
      uint64_t v38 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v38 = &unk_1EE9FE068;
      v38[1] = v37;
      uint64_t v48 = v38;
      WebKit::callAfterRandomDelay((uint64_t *)&v48);
      if (v48) {
        (*(void (**)(void *))(*v48 + 8))(v48);
      }
    }
    if (v64) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v64, v39);
    }
    m_ptr = v65.m_string.m_impl.m_ptr;
    v65.m_string.m_impl.m_ptr = 0;
    if (m_ptr)
    {
      if (*(_DWORD *)m_ptr == 2) {
        WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v39);
      }
      else {
        *(_DWORD *)m_ptr -= 2;
      }
    }
    long long v41 = v70;
    uint64_t v70 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2) {
        WTF::StringImpl::destroy(v41, v39);
      }
      else {
        *(_DWORD *)v41 -= 2;
      }
    }
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v68);
    if (v67)
    {
      unsigned int v43 = v66;
      __int16 v66 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2) {
          WTF::StringImpl::destroy(v43, v42);
        }
        else {
          *(_DWORD *)v43 -= 2;
        }
      }
    }
LABEL_66:
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v12);
    goto LABEL_67;
  }
  uint64_t v19 = *a5;
  *a5 = 0;
  uint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v20 = &unk_1EE9FE040;
  v20[1] = v19;
  uint64_t v48 = v20;
  WebKit::callAfterRandomDelay((uint64_t *)&v48);
  if (v48) {
    (*(void (**)(void *))(*v48 + 8))(v48);
  }
  if (v12) {
    goto LABEL_66;
  }
LABEL_67:
  if (v13) {
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
}

void sub_1992F888C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13, char a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t *a50,WTF::StringImpl *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,WTF::StringImpl *a56,char a57)
{
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a42)
  {
    if (*(_DWORD *)a42 == 2) {
      WTF::StringImpl::destroy(a42, a2);
    }
    else {
      *(_DWORD *)a42 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v59);
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, v62);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v62);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  if (a49) {
    WTF::fastFree((WTF *)(a49 - 16), v62);
  }
  if (a50) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a50, v62);
  }
  if (a51)
  {
    if (*(_DWORD *)a51 == 2) {
      WTF::StringImpl::destroy(a51, v62);
    }
    else {
      *(_DWORD *)a51 -= 2;
    }
  }
  int v63 = (WTF::StringImpl *)STACK[0x260];
  STACK[0x260] = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2) {
      WTF::StringImpl::destroy(v63, v62);
    }
    else {
      *(_DWORD *)v63 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v58);
  if (a57 && a56)
  {
    if (*(_DWORD *)a56 == 2) {
      WTF::StringImpl::destroy(a56, v64);
    }
    else {
      *(_DWORD *)a56 -= 2;
    }
  }
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v57);
  if (v60) {
    CFRelease(*(CFTypeRef *)(v60 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_1992F8C1C()
{
  if (!*(void *)(v0 - 96)) {
    JUMPOUT(0x1992F8C14);
  }
  JUMPOUT(0x1992F8C0CLL);
}

void WebKit::WebExtensionContext::runtimeWebPageConnect(uint64_t a1, const WTF::StringImpl **a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5, WTF::StringImpl **a6)
{
  v79[1] = *(unsigned __int8 **)MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)(a1 + 72);
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 8);
    if (v12) {
      uint64_t v13 = (WebKit::WebExtensionController *)(v12 - 16);
    }
    else {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  WebKit::WebExtensionController::extensionContext(v13, a2, &v78);
  WebKit::WebExtensionContext::getCurrentTab(a1, *(void *)(a5 + 216), 0, 0, &v77);
  uint64_t v14 = v77;
  uint64_t v15 = v78;
  if (v78 && v77)
  {
    LOBYTE(v70) = 0;
    char v71 = 0;
    if (*(unsigned char *)(a5 + 8))
    {
      long long v16 = *(WTF::StringImpl **)a5;
      if (*(void *)a5) {
        *(_DWORD *)v16 += 2;
      }
      uint64_t v70 = v16;
      char v71 = 1;
    }
    std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](v72, a5 + 16);
    v73[0] = *(_OWORD *)(a5 + 200);
    *(_OWORD *)((char *)v73 + 9) = *(_OWORD *)(a5 + 209);
    uint64_t v17 = *(WTF::StringImpl **)(a5 + 232);
    if (v17) {
      *(_DWORD *)v17 += 2;
    }
    uint64_t v74 = v17;
    long long v18 = *(_OWORD *)(a5 + 256);
    long long v75 = *(_OWORD *)(a5 + 240);
    long long v76 = v18;
    WebKit::WebExtensionTab::parameters(v14, (uint64_t)&v51);
    std::optional<WebKit::WebExtensionTabParameters>::operator=[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)v72, (uint64_t)&v51);
    if (v60)
    {
      uint64_t v20 = v59;
      uint64_t v59 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v19);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    if (v58[0])
    {
      uint64_t v23 = v53;
      char v53 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v19);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
    }
    uint64_t v24 = (StringImpl *)v74;
    if (v74) {
      *(_DWORD *)v74 += 2;
    }
    v69.m_string.m_impl.m_ptr = v24;
    *(_OWORD *)((char *)&v69 + 8) = v75;
    *(_OWORD *)&v69.m_hostEnd = v76;
    uint64_t v25 = *(WebKit::WebExtension **)(v15 + 64);
    WebKit::WebExtension::populateExternallyConnectableIfNeeded(v25);
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v68, (void **)v25 + 15);
    if ((WebKit::WebExtensionContext::permissionState(a1, &v69, (URL *)v14, 3) & 0xFFFFFFFE) == 2
      && (WebKit::WebExtensionMatchPattern::patternsMatchURL(&v68, (WTF::URL *)&v69) & 1) != 0)
    {
      v79[0] = *(unsigned __int8 **)(a5 + 216);
      WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::HashCountedSet((uint64_t *)&v51, (uint64_t *)v79, 1);
      WebKit::WebExtensionContext::addPorts(a1, 3u, 0, a3, &v51);
      if (v51) {
        WTF::fastFree((WTF *)(v51 - 2), v26);
      }
      char v67 = 26;
      WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)v79, &v67, 1);
      uint64_t v51 = (void *)a1;
      CFRetain(*(CFTypeRef *)(a1 + 8));
      uint64_t v27 = *a6;
      *a6 = 0;
      uint64_t v52 = a1;
      char v53 = v27;
      uint64_t v54 = a3;
      uint64_t v28 = *a4;
      if (*a4) {
        *(_DWORD *)v28 += 2;
      }
      uint64_t v55 = v28;
      LOBYTE(v56) = 0;
      char v57 = 0;
      if (v71)
      {
        uint64_t v29 = v70;
        if (v70) {
          *(_DWORD *)v70 += 2;
        }
        char v56 = v29;
        char v57 = 1;
      }
      std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](v58, (uint64_t)v72);
      v61[0] = v73[0];
      *(_OWORD *)((char *)v61 + 9) = *(_OWORD *)((char *)v73 + 9);
      char v30 = v74;
      if (v74) {
        *(_DWORD *)v74 += 2;
      }
      char v62 = v30;
      long long v63 = v75;
      long long v64 = v76;
      char v65 = 0;
      uint64_t v31 = WTF::fastMalloc((WTF *)0x148);
      uint64_t v32 = v31;
      *(void *)uint64_t v31 = &unk_1EE9FE130;
      *(void *)(v31 + 8) = v51;
      *(void *)(v31 + 16) = v52;
      long long v33 = v53;
      uint64_t v52 = 0;
      char v53 = 0;
      *(void *)(v31 + 24) = v33;
      *(void *)(v31 + 32) = v54;
      char v34 = v55;
      if (v55) {
        *(_DWORD *)v55 += 2;
      }
      *(unsigned char *)(v31 + 48) = 0;
      *(void *)(v31 + 40) = v34;
      *(unsigned char *)(v31 + 56) = 0;
      if (v57)
      {
        uint64_t v35 = v56;
        char v56 = 0;
        *(void *)(v31 + 48) = v35;
        *(unsigned char *)(v31 + 56) = 1;
      }
      std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v31 + 64), (uint64_t)v58);
      long long v36 = v61[0];
      *(_OWORD *)(v32 + 257) = *(_OWORD *)((char *)v61 + 9);
      *(_OWORD *)(v32 + 248) = v36;
      WTF::URL::URL(v32 + 280, (uint64_t *)&v62);
      *(unsigned char *)(v32 + 320) = v65;
      uint64_t v66 = v32;
      WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, v79, &v66);
      uint64_t v38 = v66;
      uint64_t v66 = 0;
      if (v38) {
        (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
      }
      uint64_t v39 = v62;
      char v62 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2) {
          WTF::StringImpl::destroy(v39, v37);
        }
        else {
          *(_DWORD *)v39 -= 2;
        }
      }
      std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v58);
      if (v57)
      {
        uint64_t v47 = v56;
        char v56 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2) {
            WTF::StringImpl::destroy(v47, v42);
          }
          else {
            *(_DWORD *)v47 -= 2;
          }
        }
      }
      uint64_t v48 = v55;
      uint64_t v55 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2) {
          WTF::StringImpl::destroy(v48, v42);
        }
        else {
          *(_DWORD *)v48 -= 2;
        }
      }
      uint64_t v49 = v53;
      char v53 = 0;
      if (v49) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v49 + 8))(v49);
      }
      uint64_t v50 = v52;
      uint64_t v52 = 0;
      if (v50) {
        CFRelease(*(CFTypeRef *)(v50 + 8));
      }
      if (v79[0]) {
        WTF::fastFree((WTF *)(v79[0] - 16), v42);
      }
    }
    else
    {
      CFRetain(*(CFTypeRef *)(a1 + 8));
      uint64_t v40 = *a6;
      *a6 = 0;
      long long v41 = (void *)WTF::fastMalloc((WTF *)0x28);
      void *v41 = &unk_1EE9FE108;
      v41[1] = a1;
      void v41[2] = a1;
      v41[3] = v40;
      v41[4] = a3;
      uint64_t v51 = v41;
      WebKit::callAfterRandomDelay((uint64_t *)&v51);
      if (v51) {
        (*(void (**)(void *))(*v51 + 8))(v51);
      }
    }
    if (v68) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v68, v42);
    }
    m_ptr = v69.m_string.m_impl.m_ptr;
    v69.m_string.m_impl.m_ptr = 0;
    if (m_ptr)
    {
      if (*(_DWORD *)m_ptr == 2) {
        WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v42);
      }
      else {
        *(_DWORD *)m_ptr -= 2;
      }
    }
    uint64_t v44 = v74;
    uint64_t v74 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, v42);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v72);
    if (v71)
    {
      int v46 = v70;
      uint64_t v70 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2) {
          WTF::StringImpl::destroy(v46, v45);
        }
        else {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
LABEL_68:
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v14);
    goto LABEL_69;
  }
  CFRetain(*(CFTypeRef *)(a1 + 8));
  long long v21 = *a6;
  *a6 = 0;
  int v22 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v22 = &unk_1EE9FE0E0;
  v22[1] = a1;
  v22[2] = a1;
  v22[3] = v21;
  v22[4] = a3;
  uint64_t v51 = v22;
  WebKit::callAfterRandomDelay((uint64_t *)&v51);
  if (v51) {
    (*(void (**)(void *))(*v51 + 8))(v51);
  }
  if (v14) {
    goto LABEL_68;
  }
LABEL_69:
  if (v15) {
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
}

void sub_1992F92F0(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, char a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,WTF::StringImpl *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t *a52,WTF::StringImpl *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,WTF::StringImpl *a58,char a59)
{
  if (a50) {
    (*(void (**)(uint64_t))(*(void *)a50 + 8))(a50);
  }
  if (a44)
  {
    if (*(_DWORD *)a44 == 2) {
      WTF::StringImpl::destroy(a44, a2);
    }
    else {
      *(_DWORD *)a44 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v60);
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, v64);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, v64);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a11) {
    CFRelease(*(CFTypeRef *)(a11 + 8));
  }
  uint64_t v65 = *(void *)(v62 - 104);
  if (v65) {
    WTF::fastFree((WTF *)(v65 - 16), v64);
  }
  if (a52) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a52, v64);
  }
  if (a53)
  {
    if (*(_DWORD *)a53 == 2) {
      WTF::StringImpl::destroy(a53, v64);
    }
    else {
      *(_DWORD *)a53 -= 2;
    }
  }
  uint64_t v66 = (WTF::StringImpl *)STACK[0x270];
  STACK[0x270] = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2) {
      WTF::StringImpl::destroy(v66, v64);
    }
    else {
      *(_DWORD *)v66 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](a9);
  if (a59 && a58)
  {
    if (*(_DWORD *)a58 == 2) {
      WTF::StringImpl::destroy(a58, v67);
    }
    else {
      *(_DWORD *)a58 -= 2;
    }
  }
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v59);
  if (v61) {
    CFRelease(*(CFTypeRef *)(v61 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_1992F96B4()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x1992F96ACLL);
  }
  JUMPOUT(0x1992F96A4);
}

void sub_1992F96C4()
{
}

uint64_t *WebKit::WebExtensionContext::fireRuntimeStartupEventIfNeeded(WebKit::WebExtensionContext *this)
{
  int v2 = qword_1EB357DF8;
  if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEBUG, "Firing startup event", buf, 2u);
  }
  WebKit::WebExtensionContext::processes(this, 30, 0, (uint64_t *)&v17);
  uint64_t v4 = *((void *)this + 9);
  if (v4 && *(void *)(v4 + 8))
  {
    long long v5 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v17);
    long long v6 = v5;
    long long v7 = v3;
    long long v8 = v17 ? &v17[*((unsigned int *)v17 - 1)] : 0;
    if (v8 != v5)
    {
      do
      {
        uint64_t v9 = *v6;
        uint64_t v10 = *((void *)this + 4);
        uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v11 = 1611;
        *((void *)v11 + 1) = v10;
        *((void *)v11 + 66) = (char *)v11 + 16;
        *((void *)v11 + 67) = 512;
        *((void *)v11 + 68) = 0;
        *((void *)v11 + 70) = 0;
        *((void *)v11 + 69) = 0;
        IPC::Encoder::encodeHeader(v11);
        uint64_t v20 = v11;
        buf[0] = 0;
        char v19 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v20, 0, (uint64_t)buf, 1);
        if (v19)
        {
          uint64_t v12 = *(void *)buf;
          *(void *)buf = 0;
          if (v12) {
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
          }
        }
        uint64_t v13 = v20;
        uint64_t v20 = 0;
        if (v13)
        {
          IPC::Encoder::~Encoder(v13, v3);
          WTF::fastFree(v14, v15);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_18;
          }
        }
        long long v6 = v7;
LABEL_18:
        ;
      }
      while (v6 != v8);
    }
  }
  uint64_t result = v17;
  if (v17) {
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v17, v3);
  }
  return result;
}

void sub_1992F98A0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a10) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::fireRuntimeInstalledEventIfNeeded(WebKit::WebExtensionContext *this)
{
  int v2 = qword_1EB357DF8;
  if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEBUG, "Firing installed event", buf, 2u);
  }
  char v3 = *((unsigned char *)this + 313);
  WebKit::WebExtensionContext::processes(this, 27, 0, (uint64_t *)&v20);
  uint64_t v5 = *((void *)this + 9);
  if (v5
    && *(void *)(v5 + 8)
    && ((long long v6 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v20),
         long long v7 = v6,
         long long v8 = (uint64_t *)v4,
         !v20)
      ? (uint64_t v9 = 0)
      : (uint64_t v9 = &v20[*((unsigned int *)v20 - 1)]),
        v9 != v6))
  {
    while (1)
    {
      uint64_t v10 = *v7;
      uint64_t v11 = *((void *)this + 4);
      uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v12 = 1609;
      *((void *)v12 + 1) = v11;
      *((void *)v12 + 66) = (char *)v12 + 16;
      *((void *)v12 + 67) = 512;
      *((void *)v12 + 68) = 0;
      *((void *)v12 + 70) = 0;
      *((void *)v12 + 69) = 0;
      IPC::Encoder::encodeHeader(v12);
      uint64_t v23 = v12;
      uint64_t v13 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
      if (!v14) {
        break;
      }
      unsigned char *v13 = v3;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, (uint64_t *)this + 40);
      buf[0] = 0;
      char v22 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v23, 0, (uint64_t)buf, 1);
      if (v22)
      {
        uint64_t v15 = *(void *)buf;
        *(void *)buf = 0;
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
      }
      long long v16 = v23;
      uint64_t v23 = 0;
      if (v16)
      {
        IPC::Encoder::~Encoder(v16, v4);
        WTF::fastFree(v17, v18);
      }
      while (++v7 != v8)
      {
        if ((unint64_t)(*v7 + 1) > 1) {
          goto LABEL_19;
        }
      }
      long long v7 = v8;
LABEL_19:
      if (v7 == v9) {
        goto LABEL_20;
      }
    }
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
LABEL_20:
    uint64_t result = (uint64_t)v20;
    if (v20) {
      return WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v20, v4);
    }
  }
  return result;
}

void sub_1992F9B34(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a10) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v2 = (uint64_t *)(a1 + 32);
  char v3 = a2;
  if (v3)
  {
    uint64_t v4 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = WebKit::privacyPreservingDescription(v3, v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "Error opening options page: %{public}@", buf, 0xCu);
    }
    long long v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"runtime.openOptionsPage()", 0, v6, v7, &v13);
    long long v8 = v13;
    uint64_t v13 = 0;
    *(void *)buf = v8;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(v2);
    if (buf[8])
    {
      uint64_t v10 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(v2);
  }
}

void sub_1992F9D94(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1>(WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1>(WebKit::WebExtensionContext::runtimeOpenOptionsPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1)::{lambda(void *,objc_object  {objcproto17WKWebExtensionTab},NSError)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t *)(a1 + 32);
  id v5 = a2;
  long long v7 = a3;
  if (v7)
  {
    long long v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = WebKit::privacyPreservingDescription(v7, v9);
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_error_impl(&dword_1985F2000, v8, OS_LOG_TYPE_ERROR, "Error opening options page in new tab: %{public}@", buf, 0xCu);
    }
    uint64_t v10 = [(WebKit *)v7 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"runtime.openOptionsPage()", 0, v10, v11, &v21);
    uint64_t v12 = v21;
    long long v21 = 0;
    *(void *)buf = v12;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(v4);
    if (buf[8])
    {
      uint64_t v14 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    uint64_t v15 = v21;
    long long v21 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v13);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
  else if (v5)
  {
    buf[0] = 0;
    uint8_t buf[8] = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(v4);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"runtime.openOptionsPage()", 0, &cfstr_TheOptionsPage.isa, v6, &v21);
    long long v16 = v21;
    long long v21 = 0;
    *(void *)buf = v16;
    uint8_t buf[8] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(v4);
    if (buf[8])
    {
      long long v18 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v17);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
    }
    char v19 = v21;
    long long v21 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v17);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
}

void sub_1992FA0CC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeSendNativeMessage(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeSendNativeMessage(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void WTF::BlockPtrArc<void ()(objc_object *,NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeSendNativeMessage(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeSendNativeMessage(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void *,objc_object *,NSError *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t *)(a1 + 32);
  id v5 = a2;
  id v6 = a3;
  long long v7 = v6;
  if (v6)
  {
    long long v8 = [v6 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"runtime.sendNativeMessage()", 0, v8, v9, &v18);
    uint64_t v10 = v18;
    long long v18 = 0;
    char v19 = v10;
    int v20 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(v4);
LABEL_6:
    if (v20 != -1) {
      ((void (*)(char *, WTF::StringImpl **))off_1EE9FDED0[v20])(&v21, &v19);
    }
    int v20 = -1;
    uint64_t v14 = v18;
    long long v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v11);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }

    goto LABEL_13;
  }
  if (!v5 || (WebKit::isValidJSONObject(v5, 1) & 1) != 0)
  {
    WebKit::encodeJSONString(v5, 1, 0);
    long long v8 = (NSString *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19972EAD0](&v18, v8);
    uint64_t v13 = v18;
    long long v18 = 0;
    char v19 = v13;
    int v20 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(v4);
    goto LABEL_6;
  }
  WebKit::toWebExtensionError<>((WebKit *)@"runtime.sendNativeMessage()", 0, &cfstr_ReplyMessageWa.isa, v12, &v18);
  uint64_t v15 = v18;
  long long v18 = 0;
  char v19 = v15;
  int v20 = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(v4);
  if (v20 != -1) {
    ((void (*)(char *, WTF::StringImpl **))off_1EE9FDED0[v20])(&v21, &v19);
  }
  int v20 = -1;
  uint64_t v17 = v18;
  long long v18 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v16);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
LABEL_13:
}

void sub_1992FA3D0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  if (a12 != -1) {
    ((void (*)(char *, char *))off_1EE9FDED0[a12])(&a17, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeConnectNative(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeConnectNative(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1)
{
  uint64_t v2 = a1[7];
  a1[7] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[5];
  a1[5] = 0;
  if (v4)
  {
    id v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionContext::runtimeConnectNative(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::runtimeConnectNative(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t *a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = v3;
  id v5 = (uint64_t *)a1[4];
  if (v3)
  {
    id v6 = [(WebKit *)v3 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"runtime.connectNative()", 0, v6, v7, &v20);
    long long v8 = v20;
    int v20 = 0;
    long long v16 = v8;
    LOBYTE(v17) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a1 + 6);
    uint64_t v10 = v16;
    long long v16 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    uint64_t v11 = v20;
    int v20 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }

    uint64_t v12 = a1[7];
    WebKit::toWebExtensionMessagePortError(v4, (uint64_t)&v16);
    WebKit::WebExtensionMessagePort::remove(v12);
    if (v19 && v18 && v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v13);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v14 = a1 + 8;
  }
  else
  {
    WebKit::WebExtensionContext::addNativePort(a1[4], a1[7]);
    LOBYTE(v16) = 0;
    LOBYTE(v17) = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a1 + 6);
    uint64_t v15 = a1[8];
    uint64_t v14 = a1 + 8;
    WebKit::WebExtensionContext::sendQueuedNativePortMessagesIfNeeded((uint64_t)v5, v15);
    WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v5, 0, 2, *v14);
  }
  WebKit::WebExtensionContext::clearQueuedPortMessages((uint64_t)v5, 2, *v14);
}

void sub_1992FA6F0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, int a13, __int16 a14, char a15, char a16, WTF::StringImpl *a17)
{
  if ((_BYTE)a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeGetBackgroundPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FDF30;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeGetBackgroundPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FDF30;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeGetBackgroundPage(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v7[0] = WebKit::WebExtensionContext::backgroundPageIdentifier(*(WebKit::WebExtensionContext **)(a1 + 8));
  v7[1] = v2;
  int v8 = 0;
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v6);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v8 != -1) {
    return ((uint64_t (*)(char *, void *))off_1EE9FDF48[v8])(&v5, v7);
  }
  return result;
}

void sub_1992FA9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16)
{
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  if (a16 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FDF48[a16])(&a12, v16);
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FDF68;
  uint64_t v3 = (uint64_t)(a1 + 5);
  uint64_t v4 = (WTF::StringImpl *)a1[34];
  a1[34] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 7));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3);
  id v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = a1[3];
  a1[3] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = a1[2];
  a1[2] = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9FDF68;
  uint64_t v3 = (uint64_t)a1 + 40;
  uint64_t v4 = (WTF::StringImpl *)*((void *)a1 + 34);
  *((void *)a1 + 34) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 56);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3);
  id v6 = (WTF::StringImpl *)*((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }

  return WTF::fastFree(a1, v5);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  char v21 = *(void **)(a1 + 8);
  WebKit::WebExtensionContext::processes(v21, 28, 0, (uint64_t *)&v30);
  if (v30 && *((_DWORD *)v30 - 3))
  {
    uint64_t v27 = 0;
    int v28 = 0;
    WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::create<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>&&)>,void>((uint64_t *)&v29, (uint64_t *)(a1 + 24), (uint64_t)&v27);
    if (v28 != -1) {
      ((void (*)(uint64_t *, uint64_t *))off_1EE9FDED0[v28])(&v23, &v27);
    }
    int v28 = -1;
    uint64_t v2 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v30);
    uint64_t v4 = v2;
    char v5 = v3;
    if (v30) {
      id v6 = &v30[*((unsigned int *)v30 - 1)];
    }
    else {
      id v6 = 0;
    }
    uint64_t v7 = v29;
    if (v6 != v2)
    {
      uint64_t v8 = a1 + 312;
      uint64_t v9 = a1 + 32;
      uint64_t v10 = a1 + 40;
      do
      {
        uint64_t v11 = *v4;
        v22[0] = 0;
        v22[8] = 0;
        uint64_t v23 = v8;
        uint64_t v24 = v9;
        uint64_t v25 = v22;
        uint64_t v26 = v10;
        ++*(_DWORD *)v7;
        uint64_t v12 = v21[4];
        uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v13 = 1610;
        *((void *)v13 + 1) = v12;
        *((void *)v13 + 66) = (char *)v13 + 16;
        *((void *)v13 + 67) = 512;
        *((void *)v13 + 68) = 0;
        *((void *)v13 + 70) = 0;
        *((void *)v13 + 69) = 0;
        IPC::Encoder::encodeHeader(v13);
        long long v33 = v13;
        IPC::ArgumentCoder<std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul>(v13, (uint64_t)&v23);
        uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v14 = &unk_1EE9FDFB8;
        v14[1] = v7;
        uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        v31[0] = v14;
        v31[1] = v15;
        char v32 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v33, 0, (uint64_t)v31, 1);
        if (v32)
        {
          uint64_t v16 = v31[0];
          v31[0] = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
        uint64_t v17 = v33;
        long long v33 = 0;
        if (v17)
        {
          IPC::Encoder::~Encoder(v17, v3);
          WTF::fastFree(v18, v19);
        }
        while (++v4 != v5)
        {
          if ((unint64_t)(*v4 + 1) > 1) {
            goto LABEL_20;
          }
        }
        uint64_t v4 = v5;
LABEL_20:
        ;
      }
      while (v4 != v6);
    }
    if (v7) {
      WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref((uint64_t)v7, v3);
    }
  }
  else
  {
    uint64_t v23 = 0;
    LODWORD(v24) = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()((uint64_t *)(a1 + 24));
    ((void (*)(void *, uint64_t *))off_1EE9FDED0[0])(v31, &v23);
  }
  uint64_t result = v30;
  if (v30) {
    return (void *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v30, v3);
  }
  return result;
}

void sub_1992FAE80(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, int a15, uint64_t a16, uint64_t a17, char a18, int a19, int a20,WTF *a21,uint64_t *a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a21) {
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref((uint64_t)a21, a2);
  }
  if (a22) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a22, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::create<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>&&)>,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v10, a3);
  *(_DWORD *)uint64_t v6 = 1;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v7 = &unk_1EE9FDF90;
  uint64_t v8 = *a2;
  *a2 = 0;
  v7[1] = v8;
  *(void *)(v6 + 8) = v7;
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor(v6 + 16, (uint64_t)v10);
  *a1 = v6;
  if (v11 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9FDED0[v11])(&v12, v10);
  }
  return result;
}

void sub_1992FB070(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v19 = *((void *)v17 + 1);
  *((void *)v17 + 1) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  if (a12 != -1) {
    ((void (*)(char *, char *))off_1EE9FDED0[a12])(&a17, &a10);
  }
  a12 = -1;
  WTF::fastFree(v17, a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FDF90;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FDF90;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()((uint64_t *)(a1 + 8));
}

_DWORD *IPC::ArgumentCoder<std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::encode<IPC::Encoder>(a1, **(unsigned char **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, *(void *)(a2 + 16));
  uint64_t v4 = *(void *)(a2 + 24);

  return IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::encode(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::String&&)#1}>(WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::String&&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::String&&)#1},void,WTF::String&&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9FDFB8;
  a1[1] = 0;
  if (v3) {
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::String&&)#1}>(WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::String&&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::String&&)#1},void,WTF::String&&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FDFB8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::String&&)#1}>(WebKit::WebExtensionContext::runtimeSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::String&&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::String&&)#1},void,WTF::String&&>::call(WTF::StringImpl *result, IPC::Decoder *a2)
{
  if (a2)
  {
    if (*(void *)a2)
    {
      uint64_t v2 = result;
      uint64_t result = IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
      if (v7)
      {
        uint64_t v4 = v6;
        if (v6)
        {
          uint64_t v5 = *((void *)v2 + 1);
          uint64_t v6 = 0;
          uint64_t v8 = v4;
          int v9 = 0;
          uint64_t result = (WTF::StringImpl *)WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::operator()(v5, (uint64_t)&v8);
          if (v9 != -1) {
            uint64_t result = (WTF::StringImpl *)((uint64_t (*)(char *, WTF::StringImpl **))off_1EE9FDED0[v9])(&v10, &v8);
          }
        }
        if (v7)
        {
          uint64_t result = v6;
          uint64_t v6 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1992FB3A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, int a17)
{
  if (a17 != -1) {
    ((void (*)(uint64_t, __int16 *))off_1EE9FDED0[a17])(v17 - 17, &a13);
  }
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(result + 8);
  if (*(void *)(result + 8))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v3, a2);
    uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::operator()(v2, (uint64_t)v3);
    if (v4 != -1) {
      return ((uint64_t (*)(char *, unsigned char *))off_1EE9FDED0[v4])(&v5, v3);
    }
  }
  return result;
}

void sub_1992FB464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FDED0[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v4, a2);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v6, (uint64_t)v4);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v6);
  if (v7 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9FDED0[v7])(&v8, v6);
  }
  if (v5 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_1EE9FDED0[v5])(v6, v4);
  }
  int v5 = -1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

void sub_1992FB578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, int a15, int a16)
{
  if (a16 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FDED0[a16])(v17 - 17, &a14);
  }
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FDED0[a12])(v17 - 17, &a10);
  }
  a12 = -1;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref(uint64_t this, void *a2)
{
  uint64_t v2 = this;
  if (*(_DWORD *)this == 1)
  {
    if (*(void *)(this + 8))
    {
      v6[0] = 0;
      int v7 = -1;
      uint64_t v3 = *(unsigned int *)(this + 24);
      if (v3 != -1)
      {
        ((void (*)(char *, unsigned char *, uint64_t))off_1EE9FDFD0[v3])(&v8, v6, this + 16);
        int v7 = v3;
      }
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::operator()((uint64_t *)(v2 + 8), (uint64_t)v6);
      if (v7 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9FDED0[v7])(&v8, v6);
      }
    }
    uint64_t v4 = *(unsigned int *)(v2 + 24);
    if (v4 != -1) {
      ((void (*)(unsigned char *, uint64_t))off_1EE9FDED0[v4])(v6, v2 + 16);
    }
    *(_DWORD *)(v2 + 24) = -1;
    uint64_t v5 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

void sub_1992FB74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  if (a12 != -1) {
    ((void (*)(char *, char *))off_1EE9FDED0[a12])(&a16, &a10);
  }
  a12 = -1;
  uint64_t v20 = *(unsigned int *)(v17 + 24);
  if (v20 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FDED0[v20])(&a16, v18);
  }
  *(_DWORD *)(v17 + 24) = -1;
  uint64_t v21 = *(void *)(v17 + 8);
  *(void *)(v17 + 8) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringES9_EEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJS9_S9_EEERKSR_EEEDcSJ_DpT0_(uint64_t a1, void *a2, _DWORD **a3)
{
  uint64_t v3 = *a3;
  if (*a3) {
    *v3 += 2;
  }
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringES9_EEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJS9_S9_EEERKSR_EEEDcSJ_DpT0_(uint64_t a1, void *a2, _DWORD **a3)
{
  uint64_t v3 = *a3;
  if (*a3) {
    *v3 += 2;
  }
  *a2 = v3;
}

uint64_t *WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::HashCountedSet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = 0;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      int v8 = 0;
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(a1, a2, &v8, (uint64_t)v7);
      ++*(_DWORD *)(v7[0] + 8);
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_1992FB8BC(_Unwind_Exception *exception_object, void *a2)
{
  if (*v2) {
    WTF::fastFree((WTF *)(*v2 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FDFF0;
  uint64_t v3 = (uint64_t)(a1 + 6);
  uint64_t v4 = (WTF::StringImpl *)a1[35];
  a1[35] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 8));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3);
  uint64_t v6 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = a1[3];
  a1[3] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = a1[2];
  a1[2] = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9FDFF0;
  uint64_t v3 = (uint64_t)a1 + 48;
  uint64_t v4 = (WTF::StringImpl *)*((void *)a1 + 35);
  *((void *)a1 + 35) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 64);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3);
  uint64_t v6 = (WTF::StringImpl *)*((void *)a1 + 5);
  *((void *)a1 + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }

  return WTF::fastFree(a1, v5);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  WebKit::WebExtensionContext::processes((void *)v2, 25, 0, (uint64_t *)&v34);
  if (v34 && (uint64_t v26 = *((unsigned int *)v34 - 3), v26))
  {
    uint64_t v33 = 0;
    uint64_t v4 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v34);
    uint64_t v5 = v4;
    uint64_t v7 = v6;
    if (v34) {
      uint64_t v8 = &v34[*((unsigned int *)v34 - 1)];
    }
    else {
      uint64_t v8 = 0;
    }
    if (v8 != v4)
    {
      do
      {
        uint64_t v13 = *v5;
        v27[0] = 0;
        v27[8] = 0;
        int v28 = (WTF::StringImpl *)(a1 + 321);
        uint64_t v29 = a1 + 32;
        uint64_t v30 = a1 + 40;
        uint64_t v31 = v27;
        uint64_t v32 = a1 + 48;
        CFRetain(*(CFTypeRef *)(v2 + 8));
        char v14 = *(unsigned char *)(a1 + 320);
        uint64_t v15 = *(void *)(a1 + 32);
        uint64_t v16 = *(void *)(v2 + 32);
        uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v17 = 1608;
        *((void *)v17 + 1) = v16;
        *((void *)v17 + 66) = (char *)v17 + 16;
        *((void *)v17 + 67) = 512;
        *((void *)v17 + 68) = 0;
        *((void *)v17 + 70) = 0;
        *((void *)v17 + 69) = 0;
        IPC::Encoder::encodeHeader(v17);
        uint64_t v37 = v17;
        IPC::ArgumentCoder<std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul,4ul>(v17, (uint64_t)&v28);
        uint64_t v18 = WTF::fastMalloc((WTF *)0x38);
        *(void *)uint64_t v18 = &unk_1EE9FE018;
        *(void *)(v18 + 8) = v2;
        *(void *)(v18 + 16) = v2;
        *(void *)(v18 + 24) = &v33;
        *(unsigned char *)(v18 + 32) = v14;
        *(void *)(v18 + 40) = v15;
        *(void *)(v18 + 48) = v26;
        uint64_t v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        v35[0] = v18;
        v35[1] = v19;
        char v36 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v13, &v37, 0, (uint64_t)v35, 1);
        if (v36)
        {
          uint64_t v21 = v35[0];
          v35[0] = 0;
          if (v21) {
            (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
          }
        }
        char v22 = v37;
        uint64_t v37 = 0;
        if (v22)
        {
          IPC::Encoder::~Encoder(v22, v20);
          WTF::fastFree(v23, v24);
        }
        while (++v5 != v7)
        {
          if ((unint64_t)(*v5 + 1) > 1) {
            goto LABEL_22;
          }
        }
        uint64_t v5 = v7;
LABEL_22:
        ;
      }
      while (v5 != v8);
    }
    LOBYTE(v28) = 0;
    LOBYTE(v29) = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 24));
    if ((_BYTE)v29)
    {
      uint64_t v12 = v28;
      int v28 = 0;
      if (v12) {
        goto LABEL_25;
      }
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"runtime.connect()", 0, &cfstr_NoRuntimeOncon.isa, v3, v35);
    int v9 = (WTF::StringImpl *)v35[0];
    v35[0] = 0;
    int v28 = v9;
    LOBYTE(v29) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 24));
    int v11 = v28;
    int v28 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = (WTF::StringImpl *)v35[0];
    v35[0] = 0;
    if (v12)
    {
LABEL_25:
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
  uint64_t result = v34;
  if (v34) {
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v34, v10);
  }
  return result;
}

void sub_1992FBD98(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22,WTF::StringImpl *a23,uint64_t a24,char a25)
{
  if (a17 && a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a22) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a22, a2);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::encode<IPC::Encoder>(a1, **(unsigned char **)a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, *(void *)(a2 + 24));
  uint64_t v4 = *(void *)(a2 + 32);

  return IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::encode(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1},void,WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE018;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1},void,WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE018;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1},void,WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>(a2, (uint64_t)&v5);
    if (v6)
    {
      WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}::operator()(v2, &v5);
      if (v6)
      {
        if (v5) {
          WTF::fastFree((WTF *)(v5 - 2), v3);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(v2);
    }
  }
  else
  {
    uint64_t v4 = a1 + 8;
    IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(v4);
  }
}

void sub_1992FC098(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10)
  {
    if (a9) {
      WTF::fastFree((WTF *)(a9 - 16), a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(uint64_t a1)
{
  uint64_t v2 = 0;
  WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}::operator()(a1, &v2);
  if (v2) {
    WTF::fastFree((WTF *)(v2 - 2), v1);
  }
}

void sub_1992FC0FC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::fastFree((WTF *)(a10 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a1, &v8);
  if (v9)
  {
    *(void *)a2 = v8;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

IPC::Decoder *IPC::Decoder::decode<WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[8])
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1992FC220(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 8))
  {
    if (*(void *)v2) {
      WTF::fastFree((WTF *)(*(void *)v2 - 16), a2);
    }
  }
  _Unwind_Resume(exception_object);
}

IPC::Decoder *IPC::ArgumentCoder<WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = result;
  unint64_t v4 = *((void *)result + 1);
  uint64_t v5 = *(void *)result;
  unint64_t v6 = ((*((void *)result + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)result;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v19 = *((void *)result + 3);
    if (v19)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v19 + 16))(v19, v5, v4);
        uint64_t v18 = *(char **)v2;
        unint64_t v17 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
    goto LABEL_26;
  }
  uint64_t v8 = (int *)(v5 + v6);
  *((void *)result + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v17 = v4;
    uint64_t v18 = 0;
LABEL_26:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)v2 + 3);
    if (result)
    {
      if (v17) {
        uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, char *))(*(void *)result + 16))(result, v18);
      }
    }
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  int v9 = *v8;
  uint64_t v23 = 0;
  if (v9)
  {
    while (1)
    {
      uint64_t result = (IPC::Decoder *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v2);
      v22[0] = (uint64_t)result;
      v22[1] = (uint64_t)v10;
      if (!(_BYTE)v10) {
        break;
      }
      unint64_t v11 = *((void *)v2 + 1);
      char v10 = *(char **)v2;
      unint64_t v12 = ((*((void *)v2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v2;
      if (v11 < v12 || v11 - v12 <= 3)
      {
        *(void *)uint64_t v2 = 0;
        *((void *)v2 + 1) = 0;
        uint64_t result = (IPC::Decoder *)*((void *)v2 + 3);
        if (!result || !v11) {
          break;
        }
        (*(void (**)(IPC::Decoder *))(*(void *)result + 16))(result);
        char v10 = *(char **)v2;
        unint64_t v11 = *((void *)v2 + 1);
LABEL_30:
        uint64_t result = (IPC::Decoder *)*((void *)v2 + 3);
        *(void *)uint64_t v2 = 0;
        *((void *)v2 + 1) = 0;
        if (result && v11) {
          uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, char *))(*(void *)result + 16))(result, v10);
        }
        break;
      }
      char v14 = &v10[v12];
      *((void *)v2 + 2) = v14 + 4;
      if (!v10) {
        goto LABEL_30;
      }
      if ((unint64_t)result - 1 > 0xFFFFFFFFFFFFFFFDLL) {
        break;
      }
      int v15 = *(_DWORD *)v14;
      int v24 = 0;
      uint64_t result = (IPC::Decoder *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&v23, v22, &v24, (uint64_t)&v20);
      *(_DWORD *)(v20 + 8) += v15;
      if (!v21) {
        break;
      }
      if (!--v9)
      {
        uint64_t v16 = v23;
        goto LABEL_20;
      }
    }
    *a2 = 0;
    a2[8] = 0;
    if (v23) {
      return (IPC::Decoder *)WTF::fastFree((WTF *)(v23 - 16), v10);
    }
  }
  else
  {
    uint64_t v16 = 0;
LABEL_20:
    *(void *)a2 = v16;
    a2[8] = 1;
  }
  return result;
}

void sub_1992FC48C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    WTF::fastFree((WTF *)(a15 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::runtimeConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}::operator()(uint64_t a1, void **a2)
{
  uint64_t v3 = *(uint64_t **)a1;
  WebKit::WebExtensionContext::addPorts(*(void *)a1, 0, *(unsigned char *)(a1 + 24), *(void *)(a1 + 32), a2);
  WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded((uint64_t)v3, 0, *(void *)(a1 + 32));
  WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded((uint64_t)v3, *(unsigned __int8 *)(a1 + 24), *(void *)(a1 + 32));
  WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v3, *(unsigned __int8 *)(a1 + 24), 0, *(void *)(a1 + 32));
  unint64_t v4 = *(unint64_t **)(a1 + 16);
  unint64_t v5 = *v4 + 1;
  unint64_t *v4 = v5;
  if (v5 >= *(void *)(a1 + 40))
  {
    WebKit::WebExtensionContext::clearQueuedPortMessages((uint64_t)v3, 0, *(void *)(a1 + 32));
    int v6 = *(unsigned __int8 *)(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 32);
    WebKit::WebExtensionContext::clearQueuedPortMessages((uint64_t)v3, v6, v7);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FE040;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FE040;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = 0;
  int v3 = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()((uint64_t *)(a1 + 8));
  return ((uint64_t (*)(char *, uint64_t *))off_1EE9FDED0[v3])(&v4, &v2);
}

void sub_1992FC6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FDED0[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_1,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FE068;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FE068;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2 = 0;
  int v3 = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()((uint64_t *)(a1 + 8));
  return ((uint64_t (*)(char *, uint64_t *))off_1EE9FDED0[v3])(&v4, &v2);
}

void sub_1992FC82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FDED0[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FE090;
  uint64_t v3 = (uint64_t)(a1 + 5);
  char v4 = (WTF::StringImpl *)a1[34];
  a1[34] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 7));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3);
  int v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = a1[3];
  a1[3] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = a1[2];
  a1[2] = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9FE090;
  uint64_t v3 = (uint64_t)a1 + 40;
  char v4 = (WTF::StringImpl *)*((void *)a1 + 34);
  *((void *)a1 + 34) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 56);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3);
  int v6 = (WTF::StringImpl *)*((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }

  return WTF::fastFree(a1, v5);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  WebKit::WebExtensionContext::processes(v2, 29, 0, (uint64_t *)&v30);
  if (v30 && *((_DWORD *)v30 - 3))
  {
    uint64_t v27 = 0;
    int v28 = 0;
    WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::create<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>&&)>,void>((uint64_t *)&v29, (uint64_t *)(a1 + 24), (uint64_t)&v27);
    if (v28 != -1) {
      ((void (*)(char **, uint64_t *))off_1EE9FDED0[v28])(&v23, &v27);
    }
    int v28 = -1;
    uint64_t v3 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v30);
    unint64_t v5 = v3;
    int v6 = v4;
    if (v30) {
      uint64_t v7 = &v30[*((unsigned int *)v30 - 1)];
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = v29;
    if (v7 != v3)
    {
      uint64_t v9 = a1 + 32;
      uint64_t v10 = a1 + 40;
      do
      {
        uint64_t v11 = *v5;
        char v22 = 0;
        v21[0] = 0;
        v21[8] = 0;
        uint64_t v23 = &v22;
        uint64_t v24 = v9;
        uint64_t v25 = v21;
        uint64_t v26 = v10;
        ++*(_DWORD *)v8;
        uint64_t v12 = v2[4];
        uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v13 = 1610;
        *((void *)v13 + 1) = v12;
        *((void *)v13 + 66) = (char *)v13 + 16;
        *((void *)v13 + 67) = 512;
        *((void *)v13 + 68) = 0;
        *((void *)v13 + 70) = 0;
        *((void *)v13 + 69) = 0;
        IPC::Encoder::encodeHeader(v13);
        uint64_t v33 = v13;
        IPC::ArgumentCoder<std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul>(v13, (uint64_t)&v23);
        char v14 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v14 = &unk_1EE9FE0B8;
        v14[1] = v8;
        uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        v31[0] = v14;
        v31[1] = v15;
        char v32 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v33, 0, (uint64_t)v31, 1);
        if (v32)
        {
          uint64_t v16 = v31[0];
          v31[0] = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
        unint64_t v17 = v33;
        uint64_t v33 = 0;
        if (v17)
        {
          IPC::Encoder::~Encoder(v17, v4);
          WTF::fastFree(v18, v19);
        }
        while (++v5 != v6)
        {
          if ((unint64_t)(*v5 + 1) > 1) {
            goto LABEL_20;
          }
        }
        unint64_t v5 = v6;
LABEL_20:
        ;
      }
      while (v5 != v7);
    }
    if (v8) {
      WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref((uint64_t)v8, v4);
    }
  }
  else
  {
    uint64_t v23 = 0;
    LODWORD(v24) = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()((uint64_t *)(a1 + 24));
    ((void (*)(void *, char **))off_1EE9FDED0[0])(v31, &v23);
  }
  uint64_t result = v30;
  if (v30) {
    return (void *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v30, v4);
  }
  return result;
}

void sub_1992FCCBC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, int a15, uint64_t a16, uint64_t a17, char a18, int a19, int a20,WTF *a21,uint64_t *a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a21) {
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref((uint64_t)a21, a2);
  }
  if (a22) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a22, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::String&&)#1}>(WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::String&&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::String&&)#1},void,WTF::String&&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9FE0B8;
  a1[1] = 0;
  if (v3) {
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::String&&)#1}>(WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::String&&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::String&&)#1},void,WTF::String&&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FE0B8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>>::deref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::String&&)#1}>(WebKit::WebExtensionContext::runtimeWebPageSendMessage(WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::String&&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::String&&)#1},void,WTF::String&&>::call(WTF::StringImpl *result, IPC::Decoder *a2)
{
  if (a2)
  {
    if (*(void *)a2)
    {
      uint64_t v2 = result;
      uint64_t result = IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
      if (v7)
      {
        char v4 = v6;
        if (v6)
        {
          uint64_t v5 = *((void *)v2 + 1);
          int v6 = 0;
          uint64_t v8 = v4;
          int v9 = 0;
          uint64_t result = (WTF::StringImpl *)WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>)>::operator()(v5, (uint64_t)&v8);
          if (v9 != -1) {
            uint64_t result = (WTF::StringImpl *)((uint64_t (*)(char *, WTF::StringImpl **))off_1EE9FDED0[v9])(&v10, &v8);
          }
        }
        if (v7)
        {
          uint64_t result = v6;
          int v6 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1992FCF4C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, int a17)
{
  if (a17 != -1) {
    ((void (*)(uint64_t, __int16 *))off_1EE9FDED0[a17])(v17 - 17, &a13);
  }
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE0E0;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE0E0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a1 + 3);
  WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v2, 3, 0, a1[4]);
  WebKit::WebExtensionContext::clearQueuedPortMessages((uint64_t)v2, 0, a1[4]);
}

void sub_1992FD150(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE108;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE108;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1,void>::call(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a1 + 3);
  WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v2, 3, 0, a1[4]);
  WebKit::WebExtensionContext::clearQueuedPortMessages((uint64_t)v2, 0, a1[4]);
}

void sub_1992FD330(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FE130;
  uint64_t v3 = (uint64_t)(a1 + 6);
  uint64_t v4 = (WTF::StringImpl *)a1[35];
  a1[35] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 8));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3);
  int v6 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = a1[3];
  a1[3] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = a1[2];
  a1[2] = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9FE130;
  uint64_t v3 = (uint64_t)a1 + 48;
  uint64_t v4 = (WTF::StringImpl *)*((void *)a1 + 35);
  *((void *)a1 + 35) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 64);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3);
  int v6 = (WTF::StringImpl *)*((void *)a1 + 5);
  *((void *)a1 + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }

  return WTF::fastFree(a1, v5);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2,void>::call(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  WebKit::WebExtensionContext::processes((void *)v2, 26, 0, (uint64_t *)&v34);
  if (v34 && (uint64_t v26 = *((unsigned int *)v34 - 3), v26))
  {
    uint64_t v33 = 0;
    uint64_t v4 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v34);
    uint64_t v5 = v4;
    uint64_t v7 = v6;
    uint64_t v25 = a1;
    if (v34) {
      uint64_t v8 = &v34[*((unsigned int *)v34 - 1)];
    }
    else {
      uint64_t v8 = 0;
    }
    if (v8 != v4)
    {
      do
      {
        uint64_t v13 = *v5;
        v27[0] = 0;
        v27[8] = 0;
        int v28 = (WTF::StringImpl *)(v25 + 40);
        uint64_t v29 = v25 + 4;
        uint64_t v30 = v25 + 5;
        uint64_t v31 = v27;
        char v32 = v25 + 6;
        CFRetain(*(CFTypeRef *)(v2 + 8));
        uint64_t v14 = v25[4];
        uint64_t v15 = *(void *)(v2 + 32);
        uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v16 = 1608;
        *((void *)v16 + 1) = v15;
        *((void *)v16 + 66) = (char *)v16 + 16;
        *((void *)v16 + 67) = 512;
        *((void *)v16 + 68) = 0;
        *((void *)v16 + 70) = 0;
        *((void *)v16 + 69) = 0;
        IPC::Encoder::encodeHeader(v16);
        uint64_t v37 = v16;
        IPC::ArgumentCoder<std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul,4ul>(v16, (uint64_t)&v28);
        uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x30);
        *uint64_t v17 = &unk_1EE9FE158;
        v17[1] = v2;
        v17[2] = v2;
        v17[3] = &v33;
        v17[4] = v14;
        v17[5] = v26;
        uint64_t v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        v35[0] = v17;
        v35[1] = v18;
        char v36 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v13, &v37, 0, (uint64_t)v35, 1);
        if (v36)
        {
          uint64_t v20 = v35[0];
          v35[0] = 0;
          if (v20) {
            (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          }
        }
        char v21 = v37;
        uint64_t v37 = 0;
        if (v21)
        {
          IPC::Encoder::~Encoder(v21, v19);
          WTF::fastFree(v22, v23);
        }
        while (++v5 != v7)
        {
          if ((unint64_t)(*v5 + 1) > 1) {
            goto LABEL_22;
          }
        }
        uint64_t v5 = v7;
LABEL_22:
        ;
      }
      while (v5 != v8);
    }
    LOBYTE(v28) = 0;
    LOBYTE(v29) = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(v25 + 3);
    if ((_BYTE)v29)
    {
      uint64_t v12 = v28;
      int v28 = 0;
      if (v12) {
        goto LABEL_25;
      }
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"runtime.connect()", 0, &cfstr_NoRuntimeOncon_0.isa, v3, v35);
    int v9 = (WTF::StringImpl *)v35[0];
    v35[0] = 0;
    int v28 = v9;
    LOBYTE(v29) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a1 + 3);
    uint64_t v11 = v28;
    int v28 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = (WTF::StringImpl *)v35[0];
    v35[0] = 0;
    if (v12)
    {
LABEL_25:
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
  uint64_t result = v34;
  if (v34) {
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v34, v10);
  }
  return result;
}

void sub_1992FD820(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22,WTF::StringImpl *a23,uint64_t a24,char a25)
{
  if (a17 && a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a22) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a22, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1},void,WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE158;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1},void,WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE158;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1},void,WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&>::call(void *a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 1;
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>(a2, (uint64_t)&v9);
    if (v10)
    {
      uint64_t v4 = (uint64_t *)a1[1];
      WebKit::WebExtensionContext::addPorts((uint64_t)v4, 0, 3u, a1[4], &v9);
      WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded((uint64_t)v4, 0, a1[4]);
      WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded((uint64_t)v4, 3, a1[4]);
      WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v4, 3, 0, a1[4]);
      int v6 = (unint64_t *)a1[3];
      unint64_t v7 = *v6 + 1;
      unint64_t *v6 = v7;
      if (v7 >= a1[5])
      {
        WebKit::WebExtensionContext::clearQueuedPortMessages((uint64_t)v4, 0, a1[4]);
        WebKit::WebExtensionContext::clearQueuedPortMessages((uint64_t)v4, 3, a1[4]);
      }
      if (v10)
      {
        if (v9) {
          WTF::fastFree((WTF *)(v9 - 2), v5);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(v2);
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
    IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(v8);
  }
}

void sub_1992FDB38(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10)
  {
    if (a9) {
      WTF::fastFree((WTF *)(a9 - 16), a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::runtimeWebPageConnect(WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_2::operator()(void)::{lambda(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::HashCountedSet>,WTF::HashTraits<WTF::HashCountedSet>> &&)#1}>(uint64_t *a1)
{
  int v6 = 0;
  uint64_t v2 = (uint64_t *)*a1;
  WebKit::WebExtensionContext::addPorts(*a1, 0, 3u, a1[3], &v6);
  WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded((uint64_t)v2, 0, a1[3]);
  WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded((uint64_t)v2, 3, a1[3]);
  WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v2, 3, 0, a1[3]);
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v5 = *v4 + 1;
  unint64_t *v4 = v5;
  if (v5 >= a1[4])
  {
    WebKit::WebExtensionContext::clearQueuedPortMessages((uint64_t)v2, 0, a1[3]);
    WebKit::WebExtensionContext::clearQueuedPortMessages((uint64_t)v2, 3, a1[3]);
  }
  if (v6) {
    WTF::fastFree((WTF *)(v6 - 2), v3);
  }
}

void sub_1992FDC24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::fastFree((WTF *)(a10 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::isScriptingMessageAllowed(WebKit::WebExtensionContext *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (!v1 || !*(void *)(v1 + 8)) {
    return 0;
  }
  MEMORY[0x19972EAD0](&v7, @"scripting");
  BOOL v4 = (WebKit::WebExtensionContext::permissionState(this, &v7, 0, 2) & 0xFFFFFFFE) == 2;
  unint64_t v5 = v7;
  unint64_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v4;
}

void sub_1992FDCDC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::scriptingExecuteScript(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v29[5] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a2 + 8)) {
    std::__throw_bad_optional_access[abi:sn180100]();
  }
  WebKit::WebExtensionContext::getTab((uint64_t *)a1, *(void *)a2, 0, &v28);
  if (v28)
  {
    WebKit::WebExtensionTab::url(v28, (uint64_t)v29);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v27, (uint64_t)v29, 1uLL);
    unint64_t v7 = (URL *)v28;
    if (v28) {
      ++*(_DWORD *)v28;
    }
    uint64_t v26 = v7;
    uint64_t v20 = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v21 = a1;
    uint64_t v8 = v28;
    if (v28) {
      ++*(_DWORD *)v28;
    }
    char v22 = v8;
    WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)v23, a2);
    uint64_t v9 = *a3;
    *a3 = 0;
    uint64_t v24 = v9;
    char v10 = (void *)WTF::fastMalloc((WTF *)0xB0);
    *char v10 = &unk_1EE9FE280;
    v10[1] = v20;
    v10[2] = v21;
    uint64_t v11 = v22;
    uint64_t v21 = 0;
    char v22 = 0;
    v10[3] = v11;
    WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)(v10 + 4), (uint64_t)v23);
    uint64_t v12 = v24;
    uint64_t v24 = 0;
    v10[21] = v12;
    uint64_t v25 = v10;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v27, &v26, (uint64_t *)&v25, 1, 1);
    uint64_t v13 = (uint64_t)v25;
    uint64_t v25 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)&v20);
    uint64_t v15 = v26;
    uint64_t v26 = 0;
    if (v15) {
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v15);
    }
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v14);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"scripting.executeScript()", 0, &cfstr_TabNotFound.isa, v6, v29);
    uint64_t v17 = v29[0];
    v29[0] = 0;
    uint64_t v20 = v17;
    LODWORD(v22) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()(a3);
    ((void (*)(uint64_t *, uint64_t *))off_1EE9FE1D0[v22])(v27, &v20);
    LODWORD(v22) = -1;
  }
  uint64_t v18 = (WTF::StringImpl *)v29[0];
  v29[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v16);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  uint64_t result = v28;
  int v28 = 0;
  if (result) {
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  }
  return result;
}

void sub_1992FDF80(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9FE1D0[a11])(v11 - 120, &a9);
  }
  LODWORD(a11) = -1;
  uint64_t v13 = *(WTF::StringImpl **)(v11 - 96);
  *(void *)(v11 - 96) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = *(void *)(v11 - 104);
  *(void *)(v11 - 104) = 0;
  if (v14) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1992FE0CC()
{
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1992FE154(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 136);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 120);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 104);
  if (*(unsigned char *)(a1 + 96))
  {
    BOOL v4 = *(WTF **)(a1 + 80);
    if (v4)
    {
      *(void *)(a1 + 80) = 0;
      *(_DWORD *)(a1 + 88) = 0;
      WTF::fastFree(v4, v3);
    }
  }
  if (*(unsigned char *)(a1 + 72)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, v3);
  }
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v5) {
      CFRelease(*(CFTypeRef *)(v5 + 8));
    }
  }
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v6);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  return a1;
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::scriptingInsertCSS(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v30[5] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a2 + 8)) {
    std::__throw_bad_optional_access[abi:sn180100]();
  }
  WebKit::WebExtensionContext::getTab((uint64_t *)a1, *(void *)a2, 0, &v29);
  if (v29)
  {
    WebKit::WebExtensionTab::url(v29, (uint64_t)v30);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v28, (uint64_t)v30, 1uLL);
    uint64_t v7 = (URL *)v29;
    if (v29) {
      ++*(_DWORD *)v29;
    }
    uint64_t v27 = v7;
    uint64_t v21 = (WTF::StringImpl *)a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v22 = a1;
    uint64_t v8 = v29;
    if (v29) {
      ++*(_DWORD *)v29;
    }
    uint64_t v23 = v8;
    WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)v24, a2);
    uint64_t v9 = *a3;
    *a3 = 0;
    uint64_t v25 = v9;
    char v10 = (void *)WTF::fastMalloc((WTF *)0xB0);
    *char v10 = &unk_1EE9FE2D0;
    v10[1] = v21;
    v10[2] = v22;
    uint64_t v11 = v23;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    v10[3] = v11;
    WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)(v10 + 4), (uint64_t)v24);
    uint64_t v12 = v25;
    uint64_t v25 = 0;
    v10[21] = v12;
    uint64_t v26 = v10;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v28, &v27, (uint64_t *)&v26, 1, 1);
    uint64_t v13 = (uint64_t)v26;
    uint64_t v26 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)&v21);
    uint64_t v15 = v27;
    uint64_t v27 = 0;
    if (v15) {
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v15);
    }
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v14);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"scripting.insertCSS()", 0, &cfstr_TabNotFound.isa, v6, v30);
    uint64_t v17 = (WTF::StringImpl *)v30[0];
    v30[0] = 0;
    uint64_t v21 = v17;
    LOBYTE(v22) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
    uint64_t v18 = v21;
    uint64_t v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v16);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  uint64_t v19 = (WTF::StringImpl *)v30[0];
  v30[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v16);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t result = v29;
  uint64_t v29 = 0;
  if (result) {
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  }
  return result;
}

void sub_1992FE4D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11)
{
  if ((_BYTE)a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  uint64_t v13 = *(WTF::StringImpl **)(v11 - 96);
  *(void *)(v11 - 96) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = *(void *)(v11 - 104);
  *(void *)(v11 - 104) = 0;
  if (v14) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1992FE624()
{
}

uint64_t WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 136);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 120);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 104);
  if (*(unsigned char *)(a1 + 96))
  {
    BOOL v4 = *(WTF **)(a1 + 80);
    if (v4)
    {
      *(void *)(a1 + 80) = 0;
      *(_DWORD *)(a1 + 88) = 0;
      WTF::fastFree(v4, v3);
    }
  }
  if (*(unsigned char *)(a1 + 72)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, v3);
  }
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v5) {
      CFRelease(*(CFTypeRef *)(v5 + 8));
    }
  }
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v6);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  return a1;
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::scriptingRemoveCSS(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 436))
  {
    if (!*(unsigned char *)(a2 + 8))
    {
      uint64_t v22 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
      if (v30)
      {
        uint64_t v23 = v29;
        uint64_t v29 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2) {
            WTF::StringImpl::destroy(v23, v21);
          }
          else {
            *(_DWORD *)v23 -= 2;
          }
        }
      }
      uint64_t v24 = v26;
      uint64_t v26 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v21);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }

      uint64_t v25 = v28;
      int v28 = 0;
      if (v25) {
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v25);
      }
      _Unwind_Resume(v22);
    }
    WebKit::WebExtensionContext::getTab((uint64_t *)a1, *(void *)a2, 0, &v28);
    if (v28)
    {
      uint64_t v9 = WebKit::WebExtensionTab::webView(v28);
      if (v9)
      {
        int v10 = *(unsigned __int8 *)(a2 + 72);
        WebKit::WebExtensionDynamicScripts::getSourcePairsForParameters(a2, a1, (uint64_t)&v29);
        WebKit::WebExtensionDynamicScripts::removeStyleSheets((uint64_t)&v29, v9, v10 != 0, a1);
        LOBYTE(v26) = 0;
        char v27 = 0;
        WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
        WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v18);
      }
      else
      {
        WebKit::toWebExtensionError<>((WebKit *)@"scripting.removeCSS()", 0, &cfstr_CouldNotRemove.isa, v8, &v26);
        uint64_t v15 = v26;
        uint64_t v26 = 0;
        uint64_t v29 = v15;
        char v30 = 1;
        WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
        if (v30)
        {
          uint64_t v17 = v29;
          uint64_t v29 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v16);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
        }
        uint64_t v20 = v26;
        uint64_t v26 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, v16);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
      }
    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)@"scripting.removeCSS()", 0, &cfstr_TabNotFound.isa, v7, &v26);
      uint64_t v12 = v26;
      uint64_t v26 = 0;
      uint64_t v29 = v12;
      char v30 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
      if (v30)
      {
        uint64_t v14 = v29;
        uint64_t v29 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v13);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
      }
      uint64_t v19 = v26;
      uint64_t v26 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v13);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
    }
    uint64_t result = v28;
    int v28 = 0;
    if (result) {
      return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
    }
  }
  else
  {
    LOBYTE(v29) = 0;
    char v30 = 0;
    return (WebKit::WebExtensionTab *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
  }
  return result;
}

void WebKit::WebExtensionContext::scriptingRegisterContentScripts(CFTypeRef *a1, uint64_t a2, uint64_t *a3)
{
  id v35 = 0;
  uint64_t v36 = 0;
  BOOL v6 = WebKit::WebExtensionContext::createInjectedContentForScripts((uint64_t)a1, a2, 1, &v36, @"scripting.registerContentScripts()", &v35);
  id v8 = v35;
  if (v6)
  {
    uint64_t v9 = WebKit::WebExtensionContext::registeredContentScriptsStore((WebKit::WebExtensionContext *)a1);
    int v10 = WebKit::toWebAPI<WebKit::WebExtensionRegisteredScriptParameters>(a2);
    v32[0] = (WTF::StringImpl *)a1;
    CFRetain(a1[1]);
    v32[1] = (WTF::StringImpl *)a1;
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v33, a2);
    uint64_t v11 = v36;
    uint64_t v36 = 0;
    uint64_t v12 = *a3;
    *a3 = 0;
    *(void *)&long long v34 = v11;
    *((void *)&v34 + 1) = v12;
    long long v13 = *(_OWORD *)v32;
    v32[1] = 0;
    *(_OWORD *)uint64_t v37 = v13;
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v38, (uint64_t)v33);
    long long v14 = v34;
    long long v34 = 0uLL;
    long long v39 = v14;
    uint64_t v15 = malloc_type_malloc(0x50uLL, 0x10F20408ACD9A00uLL);
    void *v15 = MEMORY[0x1E4F14398];
    v15[1] = 50331650;
    v15[2] = WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingRegisterContentScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingRegisterContentScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke;
    v15[3] = &WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingRegisterContentScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingRegisterContentScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    long long v16 = *(_OWORD *)v37;
    v37[1] = 0;
    *((_OWORD *)v15 + 2) = v16;
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v15 + 6), (uint64_t)v38);
    long long v17 = v39;
    long long v39 = 0uLL;
    *((_OWORD *)v15 + 4) = v17;
    uint64_t v18 = _Block_copy(v15);

    uint64_t v20 = *((void *)&v39 + 1);
    *((void *)&v39 + 1) = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    if ((void)v39) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v39, v19);
    }
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v38, v19);
    uint64_t v21 = v37[1];
    v37[1] = 0;
    if (v21) {
      CFRelease(*((CFTypeRef *)v21 + 1));
    }
    uint64_t v22 = _Block_copy(v18);
    [v9 addScripts:v10 completionHandler:v22];

    uint64_t v24 = *((void *)&v34 + 1);
    *((void *)&v34 + 1) = 0;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
    if ((void)v34) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v34, v23);
    }
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v23);
    uint64_t v25 = v32[1];
    v32[1] = 0;
    if (v25) {
      CFRelease(*((CFTypeRef *)v25 + 1));
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"scripting.registerContentScripts()", 0, (NSString *)v8, v7, v32);
    uint64_t v26 = v32[0];
    v32[0] = 0;
    v37[0] = v26;
    LOBYTE(v37[1]) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
    if (LOBYTE(v37[1]))
    {
      int v28 = v37[0];
      v37[0] = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, v27);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
      }
    }
    uint64_t v29 = v32[0];
    v32[0] = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v27);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    uint64_t v30 = v36;

    if (v30) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v31);
    }
  }
}

void sub_1992FEDD8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if ((_BYTE)a18 && a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  if (a16) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a16, v24);
  }
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionContext::createInjectedContentForScripts(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, void *a5, void *a6)
{
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  v127 = a5;
  uint64_t v158 = 0;
  uint64_t v157 = 0;
  unsigned int v10 = *(_DWORD *)(a2 + 12);
  if (!v10)
  {
    BOOL v120 = 1;
    goto LABEL_203;
  }
  uint64_t v11 = *(void *)a2;
  uint64_t v124 = *(void *)a2 + 120 * v10;
  do
  {
    uint64_t v12 = *(WTF::StringImpl **)(v11 + 48);
    if (v12) {
      *(_DWORD *)v12 += 2;
    }
    v156 = v12;
    if (a3 == 1)
    {
      if (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(*(WTF **)(a1 + 408), &v156, v9))goto LABEL_7; {
      unsigned int v17 = HIDWORD(v158);
      }
      if (HIDWORD(v158))
      {
        unint64_t v34 = 0;
        while ((WTF::equal(*(WTF **)(v157 + 8 * v34), v156, v13) & 1) == 0)
        {
          ++v34;
          unsigned int v17 = HIDWORD(v158);
          if (v34 >= HIDWORD(v158)) {
            goto LABEL_11;
          }
        }
LABEL_7:
        if (v156) {
          uint64_t v15 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v15 = &stru_1EEA10550;
        }
        WebKit::toErrorString(v127, 0, &cfstr_DuplicateId.isa, v14, v15);
        *a6 = (id)objc_claimAutoreleasedReturnValue();

        int v16 = 1;
        goto LABEL_188;
      }
    }
    else
    {
      unsigned int v17 = HIDWORD(v158);
    }
LABEL_11:
    if (v17 == v158)
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v157, (unint64_t)&v156);
    }
    else
    {
      uint64_t v18 = v157;
      uint64_t v19 = v156;
      if (v156) {
        *(_DWORD *)v156 += 2;
      }
      *(void *)(v18 + 8 * v17) = v19;
      HIDWORD(v158) = v17 + 1;
    }
    v155 = 0;
    if (*(unsigned char *)(v11 + 40))
    {
      WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v11 + 24, (uint64_t *)&cf);
      WTF::RetainPtr<NSSet>::get((id *)&cf);
      id v20 = (id)objc_claimAutoreleasedReturnValue();

      CFTypeRef v21 = cf;
      CFTypeRef cf = 0;
      if (v21) {
        CFRelease(v21);
      }
    }
    else
    {
      id v20 = (id)MEMORY[0x1E4F1CBF0];
    }
    uint64_t v22 = WebKit::filterObjects<NSArray>(v20, &__block_literal_global_70);

    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    uint64_t v23 = v22;
    uint64_t v24 = [(NSError *)v23 countByEnumeratingWithState:&v151 objects:v171 count:16];
    if (v24)
    {
      uint64_t v25 = *(void *)v152;
      do
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          if (*(void *)v152 != v25) {
            objc_enumerationMutation(v23);
          }
          char v27 = *(void **)(*((void *)&v151 + 1) + 8 * i);
          uint64_t v28 = *(void *)(a1 + 64);
          id v150 = 0;
          uint64_t v29 = WebKit::WebExtension::resourceStringForPath(v28, v27, &v150, 0, 1);
          uint64_t v30 = (NSError *)v150;

          if (!v29)
          {
            WebKit::WebExtensionContext::recordError((const void **)a1, v30);
            WebKit::toErrorString(v127, 0, &cfstr_InvalidResourc.isa, v33, v27);
            *a6 = (id)objc_claimAutoreleasedReturnValue();
            int v16 = 1;
            v128 = v23;
            goto LABEL_186;
          }
        }
        uint64_t v24 = [(NSError *)v23 countByEnumeratingWithState:&v151 objects:v171 count:16];
      }
      while (v24);
    }

    if (*(unsigned char *)(v11 + 16))
    {
      WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v11, (uint64_t *)&cf);
      WTF::RetainPtr<NSSet>::get((id *)&cf);
      id v31 = (id)objc_claimAutoreleasedReturnValue();

      CFTypeRef v32 = cf;
      CFTypeRef cf = 0;
      if (v32) {
        CFRelease(v32);
      }
    }
    else
    {
      id v31 = (id)MEMORY[0x1E4F1CBF0];
    }
    id v35 = WebKit::filterObjects<NSArray>(v31, &__block_literal_global_75);

    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    uint64_t v36 = v35;
    v128 = v36;
    uint64_t v37 = [(NSError *)v36 countByEnumeratingWithState:&v146 objects:v170 count:16];
    if (v37)
    {
      uint64_t v38 = *(void *)v147;
      do
      {
        for (uint64_t j = 0; j != v37; ++j)
        {
          if (*(void *)v147 != v38) {
            objc_enumerationMutation(v36);
          }
          uint64_t v40 = *(void **)(*((void *)&v146 + 1) + 8 * j);
          uint64_t v41 = *(void *)(a1 + 64);
          id v145 = 0;
          uint64_t v42 = WebKit::WebExtension::resourceStringForPath(v41, v40, &v145, 0, 1);
          unsigned int v43 = (NSError *)v145;

          if (!v42)
          {
            WebKit::WebExtensionContext::recordError((const void **)a1, v43);
            WebKit::toErrorString(v127, 0, &cfstr_InvalidResourc.isa, v46, v40);
            *a6 = (id)objc_claimAutoreleasedReturnValue();
            int v16 = 1;
            uint64_t v30 = v128;
            goto LABEL_185;
          }

          uint64_t v36 = v128;
        }
        uint64_t v37 = [(NSError *)v128 countByEnumeratingWithState:&v146 objects:v170 count:16];
      }
      while (v37);
    }

    if (*(unsigned char *)(v11 + 104))
    {
      WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v11 + 88, (uint64_t *)&cf);
      WTF::RetainPtr<NSSet>::get((id *)&cf);
      id v44 = (id)objc_claimAutoreleasedReturnValue();

      CFTypeRef v45 = cf;
      CFTypeRef cf = 0;
      if (v45) {
        CFRelease(v45);
      }
    }
    else
    {
      id v44 = (id)MEMORY[0x1E4F1CBF0];
    }
    long long v143 = 0u;
    long long v144 = 0u;
    long long v141 = 0u;
    long long v142 = 0u;
    uint64_t v30 = (NSError *)v44;
    uint64_t v47 = [(NSError *)v30 countByEnumeratingWithState:&v141 objects:v169 count:16];
    if (v47)
    {
      uint64_t v48 = *(void *)v142;
      do
      {
        for (uint64_t k = 0; k != v47; ++k)
        {
          if (*(void *)v142 != v48) {
            objc_enumerationMutation(v30);
          }
          uint64_t v50 = *(void **)(*((void *)&v141 + 1) + 8 * k);
          if (![v50 length])
          {
            if (v156) {
              uint64_t v62 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
            }
            else {
              uint64_t v62 = &stru_1EEA10550;
            }
            WebKit::toErrorString(v127, 0, &cfstr_ScriptWithIdCo.isa, v51, v62);
            *a6 = (id)objc_claimAutoreleasedReturnValue();

LABEL_79:
            int v16 = 1;
            unsigned int v43 = v30;
            goto LABEL_185;
          }
          MEMORY[0x19972EAD0](&cf, v50);
          WebKit::WebExtensionMatchPattern::getOrCreate((WTF::StringImpl **)&cf, v52, (uint64_t *)&v129);
          uint64_t v55 = (WTF::StringImpl *)cf;
          CFTypeRef cf = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2) {
              WTF::StringImpl::destroy(v55, v53);
            }
            else {
              *(_DWORD *)v55 -= 2;
            }
          }
          if (!v129 || (WebKit::WebExtensionMatchPattern::isSupported(v129) & 1) == 0)
          {
            if (v156) {
              uint64_t v60 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
            }
            else {
              uint64_t v60 = &stru_1EEA10550;
            }
            WebKit::toErrorString(v127, 0, &cfstr_ScriptWithIdHa.isa, v54, v60, v50);
            *a6 = (id)objc_claimAutoreleasedReturnValue();

            uint64_t v61 = v129;
            v129 = 0;
            if (v61) {
              CFRelease(*((CFTypeRef *)v61 + 1));
            }
            goto LABEL_79;
          }
          v140 = v129;
          v129 = 0;
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v155, (uint64_t *)&v140, (uint64_t)&cf);
          uint64_t v56 = (uint64_t)v140;
          v140 = 0;
          if (v56) {
            CFRelease(*(CFTypeRef *)(v56 + 8));
          }
          char v57 = v129;
          v129 = 0;
          if (v57) {
            CFRelease(*((CFTypeRef *)v57 + 1));
          }
        }
        uint64_t v47 = [(NSError *)v30 countByEnumeratingWithState:&v141 objects:v169 count:16];
      }
      while (v47);
    }

    if (*(unsigned char *)(v11 + 80))
    {
      WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v11 + 64, (uint64_t *)&cf);
      WTF::RetainPtr<NSSet>::get((id *)&cf);
      id v58 = (id)objc_claimAutoreleasedReturnValue();

      CFTypeRef v59 = cf;
      CFTypeRef cf = 0;
      if (v59) {
        CFRelease(v59);
      }
    }
    else
    {
      id v58 = (id)MEMORY[0x1E4F1CBF0];
    }
    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    unsigned int v43 = (NSError *)v58;
    uint64_t v63 = [(NSError *)v43 countByEnumeratingWithState:&v136 objects:v168 count:16];
    if (v63)
    {
      uint64_t v64 = *(void *)v137;
      do
      {
        for (uint64_t m = 0; m != v63; ++m)
        {
          if (*(void *)v137 != v64) {
            objc_enumerationMutation(v43);
          }
          uint64_t v66 = *(void **)(*((void *)&v136 + 1) + 8 * m);
          if (![v66 length])
          {
            if (v156) {
              uint64_t v83 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
            }
            else {
              uint64_t v83 = &stru_1EEA10550;
            }
            WebKit::toErrorString(v127, 0, &cfstr_ScriptWithIdCo_0.isa, v67, v83);
            *a6 = (id)objc_claimAutoreleasedReturnValue();

LABEL_114:
            int v16 = 1;
            goto LABEL_185;
          }
          MEMORY[0x19972EAD0](&v129, v66);
          WebKit::WebExtensionMatchPattern::getOrCreate(&v129, v68, (uint64_t *)&cf);
          char v71 = v129;
          v129 = 0;
          if (v71)
          {
            if (*(_DWORD *)v71 == 2) {
              WTF::StringImpl::destroy(v71, v69);
            }
            else {
              *(_DWORD *)v71 -= 2;
            }
          }
          if (!cf || (WebKit::WebExtensionMatchPattern::isSupported((WebKit::WebExtensionMatchPattern *)cf) & 1) == 0)
          {
            if (v156) {
              uint64_t v81 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
            }
            else {
              uint64_t v81 = &stru_1EEA10550;
            }
            WebKit::toErrorString(v127, 0, &cfstr_ScriptWithIdHa_0.isa, v70, v81, v66);
            *a6 = (id)objc_claimAutoreleasedReturnValue();

            int v82 = (CFTypeRef *)cf;
            CFTypeRef cf = 0;
            if (v82) {
              CFRelease(v82[1]);
            }
            goto LABEL_114;
          }
          long long v72 = (CFTypeRef *)cf;
          CFTypeRef cf = 0;
          if (v72) {
            CFRelease(v72[1]);
          }
        }
        uint64_t v63 = [(NSError *)v43 countByEnumeratingWithState:&v136 objects:v168 count:16];
      }
      while (v63);
    }

    v129 = 0;
    v130 = 0;
    char v131 = 0;
    uint64_t v73 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    v132 = v73;
    int v133 = 16842752;
    long long v134 = 0u;
    long long v135 = 0u;
    WTF::String::operator=((uint64_t *)&v132, (WTF::StringImpl **)(v11 + 48));
    long long v75 = v155;
    v155 = 0;
    long long v76 = (uint64_t *)v129;
    v129 = v75;
    if (v76) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v76, v74);
    }
    uint64_t v77 = v130;
    v130 = 0;
    if (v77) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v77, v74);
    }
    char v78 = *(unsigned char *)(v11 + 57);
    if (v78) {
      char v78 = *(unsigned char *)(v11 + 56);
    }
    char v131 = v78;
    char v79 = *(unsigned char *)(v11 + 113);
    if (v79) {
      char v79 = *(unsigned char *)(v11 + 112);
    }
    BYTE1(v133) = v79;
    if (*(unsigned char *)(v11 + 117)) {
      char v80 = *(unsigned char *)(v11 + 116);
    }
    else {
      char v80 = 1;
    }
    BYTE2(v133) = v80;
    if (*(unsigned char *)(v11 + 119)) {
      char v84 = *(unsigned char *)(v11 + 118);
    }
    else {
      char v84 = 1;
    }
    HIBYTE(v133) = v84;
    WTF::RetainPtr<NSArray>::operator=((const void **)&v134, v23);
    WTF::RetainPtr<NSArray>::operator=((const void **)&v134 + 1, v128);
    uint64_t v86 = *a4;
    if (*a4
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a4),
          (uint64_t v86 = *a4) != 0))
    {
      int v87 = *(_DWORD *)(v86 - 8);
    }
    else
    {
      int v87 = 0;
    }
    unsigned int v88 = *((_DWORD *)v156 + 4);
    if (v88 >= 0x100) {
      unsigned int v89 = v88 >> 8;
    }
    else {
      unsigned int v89 = WTF::StringImpl::hashSlowCase(v156);
    }
    uint64_t v123 = 0;
    for (int n = 1; ; ++n)
    {
      unsigned int v91 = v89 & v87;
      uint64_t v92 = v86 + 80 * (v89 & v87);
      uint64_t v93 = *(WTF **)v92;
      if (*(void *)v92 == -1)
      {
        uint64_t v123 = v86 + 80 * v91;
        goto LABEL_131;
      }
      if (!v93) {
        break;
      }
      if (WTF::equal(v93, v156, v85)) {
        goto LABEL_168;
      }
LABEL_131:
      unsigned int v89 = n + v91;
    }
    if (v123)
    {
      *(_OWORD *)uint64_t v123 = 0u;
      *(_OWORD *)(v123 + 16) = 0u;
      *(_OWORD *)(v123 + 32) = 0u;
      uint64_t v95 = MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
      *(void *)(v123 + 32) = v95;
      *(_WORD *)(v123 + 42) = 257;
      *(_OWORD *)(v123 + 48) = 0u;
      *(_OWORD *)(v123 + 64) = 0u;
      --*(_DWORD *)(*a4 - 16);
      uint64_t v92 = v123;
    }
    WTF::String::operator=((uint64_t *)v92, &v156);
    WebKit::WebExtension::InjectedContentData::InjectedContentData((uint64_t)&cf, (uint64_t *)&v129);
    CFTypeRef v97 = cf;
    CFTypeRef cf = 0;
    uint64_t v98 = *(uint64_t **)(v92 + 8);
    *(void *)(v92 + 8) = v97;
    if (v98) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v98, v96);
    }
    uint64_t v99 = v160;
    v160 = 0;
    uint64_t v100 = *(uint64_t **)(v92 + 16);
    *(void *)(v92 + 16) = v99;
    if (v100) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v100, v96);
    }
    *(unsigned char *)(v92 + 24) = v161;
    v101 = v162;
    v162 = 0;
    long long v102 = *(WTF::StringImpl **)(v92 + 32);
    *(void *)(v92 + 32) = v101;
    if (v102)
    {
      if (*(_DWORD *)v102 == 2) {
        WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v96);
      }
      else {
        *(_DWORD *)v102 -= 2;
      }
    }
    *(_DWORD *)(v92 + 40) = v163;
    WTF::RetainPtr<NSArray>::operator=((uint64_t *)(v92 + 48), (uint64_t *)&v164);
    WTF::RetainPtr<NSArray>::operator=((uint64_t *)(v92 + 56), (uint64_t *)&v165);
    WTF::RetainPtr<NSArray>::operator=((uint64_t *)(v92 + 64), (uint64_t *)&v166);
    WTF::RetainPtr<NSArray>::operator=((uint64_t *)(v92 + 72), (uint64_t *)&v167);
    CFTypeRef v103 = v167;
    CFTypeRef v167 = 0;
    if (v103) {
      CFRelease(v103);
    }
    CFTypeRef v104 = v166;
    CFTypeRef v166 = 0;
    if (v104) {
      CFRelease(v104);
    }
    CFTypeRef v105 = v165;
    CFTypeRef v165 = 0;
    if (v105) {
      CFRelease(v105);
    }
    CFTypeRef v106 = v164;
    CFTypeRef v164 = 0;
    if (v106) {
      CFRelease(v106);
    }
    long long v107 = v162;
    v162 = 0;
    if (v107)
    {
      if (*(_DWORD *)v107 == 2) {
        WTF::StringImpl::destroy(v107, v94);
      }
      else {
        *(_DWORD *)v107 -= 2;
      }
    }
    if (v160) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v160, v94);
    }
    if (cf) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)cf, v94);
    }
    uint64_t v108 = *a4;
    if (*a4) {
      int v109 = *(_DWORD *)(v108 - 12) + 1;
    }
    else {
      int v109 = 1;
    }
    *(_DWORD *)(v108 - 12) = v109;
    uint64_t v110 = *a4;
    if (*a4) {
      int v111 = *(_DWORD *)(v110 - 12);
    }
    else {
      int v111 = 0;
    }
    uint64_t v112 = (*(_DWORD *)(v110 - 16) + v111);
    unint64_t v113 = *(unsigned int *)(v110 - 4);
    if (v113 > 0x400)
    {
      if (v113 <= 2 * v112) {
LABEL_167:
      }
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a4);
    }
    else if (3 * v113 <= 4 * v112)
    {
      goto LABEL_167;
    }
LABEL_168:
    v114 = (const void *)*((void *)&v135 + 1);
    *((void *)&v135 + 1) = 0;
    if (v114) {
      CFRelease(v114);
    }
    uint64_t v115 = (const void *)v135;
    *(void *)&long long v135 = 0;
    if (v115) {
      CFRelease(v115);
    }
    v116 = (const void *)*((void *)&v134 + 1);
    *((void *)&v134 + 1) = 0;
    if (v116) {
      CFRelease(v116);
    }
    v117 = (const void *)v134;
    *(void *)&long long v134 = 0;
    if (v117) {
      CFRelease(v117);
    }
    v118 = v132;
    v132 = 0;
    if (v118)
    {
      if (*(_DWORD *)v118 == 2) {
        WTF::StringImpl::destroy(v118, v94);
      }
      else {
        *(_DWORD *)v118 -= 2;
      }
    }
    if (v130) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v130, v94);
    }
    if (v129) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)v129, v94);
    }
    int v16 = 0;
LABEL_185:

LABEL_186:
    if (v155) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)v155, v8);
    }
LABEL_188:
    v119 = v156;
    v156 = 0;
    if (v119)
    {
      if (*(_DWORD *)v119 == 2) {
        WTF::StringImpl::destroy(v119, (WTF::StringImpl *)v8);
      }
      else {
        *(_DWORD *)v119 -= 2;
      }
    }
    BOOL v120 = v16 == 0;
    if (v16) {
      break;
    }
    v11 += 120;
  }
  while (v11 != v124);
LABEL_203:
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v157, v8);

  return v120;
}

void sub_1992FFCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27)
{
  if (STACK[0x210]) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)STACK[0x210], v31);
  }
  CFTypeRef v32 = (WTF::StringImpl *)STACK[0x218];
  STACK[0x218] = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v31);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x220], v31);

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 120 * v5;
    while (1)
    {
      WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters((uint64_t)v53, v6);
      uint64_t v9 = v57;
      if (v57) {
        *(_DWORD *)v57 += 2;
      }
      uint64_t v52 = v9;
      unsigned int v10 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 408), &v52, v8);
      uint64_t v11 = v10;
      if (v10)
      {
        ++*(_DWORD *)v10;
        WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::merge((uint64_t)v10, (uint64_t)v53);
        if (HIDWORD(v61) == v61)
        {
          WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionRegisteredScriptParameters&>((uint64_t)&v60, (unint64_t)v53);
        }
        else
        {
          WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters(v60 + 120 * HIDWORD(v61), (uint64_t)v53);
          ++HIDWORD(v61);
        }
        WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v11, v12);
      }
      else
      {
        if (v52) {
          int v16 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          int v16 = &stru_1EEA10550;
        }
        uint64_t v50 = v16;
        WebKit::toWebExtensionError<NSString * {__strong}>((WebKit *)@"scripting.updateContentScripts()", 0, &cfstr_NoExistingScri.isa, (NSString *)&v50, &v51);
        unsigned int v17 = v51;
        uint64_t v51 = 0;
        CFTypeRef v45 = v17;
        LOBYTE(v46) = 1;
        WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
        uint64_t v19 = v45;
        CFTypeRef v45 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v18);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
        id v20 = v51;
        uint64_t v51 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, v18);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
      }
      long long v14 = v52;
      uint64_t v52 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      if (v59[16]) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v59, v13);
      }
      if (v58[16]) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v58, v13);
      }
      uint64_t v15 = v57;
      char v57 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      if (BYTE8(v56)) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v13);
      }
      if ((_BYTE)v54) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v53, v13);
      }
      if (!v11) {
        break;
      }
      v6 += 120;
      v7 -= 120;
      if (!v7) {
        goto LABEL_41;
      }
    }
  }
  else
  {
LABEL_41:
    uint64_t v52 = 0;
    id v49 = 0;
    BOOL v21 = WebKit::WebExtensionContext::createInjectedContentForScripts(a1, (uint64_t)&v60, 0, (uint64_t *)&v52, @"scripting.updateContentScripts()", &v49);
    uint64_t v23 = (NSString *)v49;
    if (v21)
    {
      uint64_t v24 = WebKit::toWebAPI<WebKit::WebExtensionRegisteredScriptParameters>((uint64_t)&v60);
      uint64_t v25 = WebKit::WebExtensionContext::registeredContentScriptsStore((WebKit::WebExtensionContext *)a1);
      CFTypeRef v45 = (WTF::StringImpl *)a1;
      CFRetain(*(CFTypeRef *)(a1 + 8));
      uint64_t v26 = v60;
      uint64_t v60 = 0;
      char v27 = v52;
      uint64_t v28 = *a3;
      *a3 = 0;
      uint64_t v52 = 0;
      v53[0] = v45;
      v53[1] = (WTF::StringImpl *)a1;
      uint64_t v54 = v26;
      long long v46 = 0u;
      uint64_t v47 = 0;
      uint64_t v29 = v61;
      uint64_t v61 = 0;
      uint64_t v55 = v29;
      long long v48 = 0u;
      *(void *)&long long v56 = v27;
      *((void *)&v56 + 1) = v28;
      uint64_t v30 = malloc_type_malloc(0x50uLL, 0x10F20408ACD9A00uLL);
      *uint64_t v30 = MEMORY[0x1E4F14398];
      v30[1] = 50331650;
      v30[2] = WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke;
      v30[3] = &WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
      *((_OWORD *)v30 + 2) = *(_OWORD *)v53;
      uint64_t v31 = v54;
      v53[1] = 0;
      uint64_t v54 = 0;
      void v30[6] = v31;
      v30[7] = v55;
      long long v32 = v56;
      uint64_t v55 = 0;
      *(void *)&long long v56 = 0;
      *((_OWORD *)v30 + 4) = v32;
      uint64_t v33 = _Block_copy(v30);

      *((void *)&v56 + 1) = 0;
      WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v34);
      id v35 = v53[1];
      v53[1] = 0;
      if (v35) {
        CFRelease(*((CFTypeRef *)v35 + 1));
      }
      uint64_t v36 = _Block_copy(v33);
      [v25 updateScripts:v24 completionHandler:v36];

      uint64_t v38 = *((void *)&v48 + 1);
      *((void *)&v48 + 1) = 0;
      if (v38) {
        (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
      }
      if ((void)v48) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v48, v37);
      }
      WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46 + 8, v37);
      uint64_t v39 = v46;
      *(void *)&long long v46 = 0;
      if (v39) {
        CFRelease(*(CFTypeRef *)(v39 + 8));
      }
    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)@"scripting.updateContentScripts()", 0, v23, v22, &v45);
      uint64_t v40 = v45;
      CFTypeRef v45 = 0;
      v53[0] = v40;
      LOBYTE(v53[1]) = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
      if (LOBYTE(v53[1]))
      {
        uint64_t v42 = v53[0];
        v53[0] = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2) {
            WTF::StringImpl::destroy(v42, v41);
          }
          else {
            *(_DWORD *)v42 -= 2;
          }
        }
      }
      unsigned int v43 = v45;
      CFTypeRef v45 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2) {
          WTF::StringImpl::destroy(v43, v41);
        }
        else {
          *(_DWORD *)v43 -= 2;
        }
      }
      if (v52) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v52, v41);
      }
    }
  }
  return WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v13);
}

void sub_199300554(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, WTF::StringImpl *a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32)
{
  if ((_BYTE)a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }

  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, v37);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  if (a32) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v34, v37);
  }
  if (a29) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v33, v37);
  }
  uint64_t v38 = a25;
  a25 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, v37);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  if ((_BYTE)a24) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v32, v37);
  }
  if (a21) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, v37);
  }
  WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v35 - 104, v37);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::scriptingGetRegisteredScripts(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  if (v4)
  {
    uint64_t v5 = *(WTF::StringImpl ***)a2;
    uint64_t v6 = (uint64_t *)(a1 + 408);
    uint64_t v7 = 8 * v4;
    do
    {
      id v8 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v6, v5, a3);
      uint64_t v9 = v8;
      if (v8)
      {
        ++*(_DWORD *)v8;
        WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters((uint64_t)&v76, (uint64_t)v8 + 16);
        unsigned int v11 = HIDWORD(v95);
        if (HIDWORD(v95) == v95)
        {
          WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionRegisteredScriptParameters>((uint64_t)&v94, (unint64_t)&v76);
        }
        else
        {
          uint64_t v12 = v94;
          uint64_t v13 = v94 + 120 * HIDWORD(v95);
          *(unsigned char *)uint64_t v13 = 0;
          *(unsigned char *)(v13 + 16) = 0;
          if ((_BYTE)v78)
          {
            *(void *)uint64_t v13 = 0;
            *(void *)(v13 + 8) = 0;
            uint64_t v14 = v76;
            uint64_t v76 = 0;
            *(void *)uint64_t v13 = v14;
            LODWORD(v14) = v77;
            LODWORD(v77) = 0;
            *(_DWORD *)(v13 + 8) = v14;
            LODWORD(v14) = HIDWORD(v77);
            HIDWORD(v77) = 0;
            *(_DWORD *)(v13 + 12) = v14;
            *(unsigned char *)(v13 + 16) = 1;
          }
          uint64_t v15 = v12 + 120 * v11;
          *(unsigned char *)(v15 + 24) = 0;
          uint64_t v16 = v15 + 24;
          *(unsigned char *)(v16 + 16) = 0;
          unsigned int v17 = (unsigned char *)(v16 + 16);
          if (v82)
          {
            *(void *)uint64_t v16 = 0;
            *(void *)(v16 + 8) = 0;
            uint64_t v18 = v79;
            uint64_t v79 = 0;
            *(void *)uint64_t v16 = v18;
            int v19 = v80;
            int v80 = 0;
            uint64_t v20 = v12 + 120 * v11;
            *(_DWORD *)(v20 + 32) = v19;
            int v21 = v81;
            int v81 = 0;
            *(_DWORD *)(v20 + 36) = v21;
            *unsigned int v17 = 1;
          }
          uint64_t v22 = v12 + 120 * v11;
          uint64_t v23 = v83;
          uint64_t v83 = 0;
          *(void *)(v22 + 48) = v23;
          LOWORD(v23) = v84;
          *(unsigned char *)(v22 + 80) = 0;
          uint64_t v24 = (unsigned char *)(v22 + 80);
          *((_WORD *)v24 - 12) = (_WORD)v23;
          *(v24 - 16) = 0;
          uint64_t v25 = v24 - 16;
          if (v88)
          {
            void *v25 = 0;
            *((void *)v24 - 1) = 0;
            uint64_t v26 = v85;
            uint64_t v85 = 0;
            void *v25 = v26;
            int v27 = v86;
            int v86 = 0;
            uint64_t v28 = v12 + 120 * v11;
            *(_DWORD *)(v28 + 72) = v27;
            int v29 = v87;
            int v87 = 0;
            *(_DWORD *)(v28 + 76) = v29;
            unsigned char *v24 = 1;
          }
          uint64_t v30 = v12 + 120 * v11;
          *(unsigned char *)(v30 + 88) = 0;
          uint64_t v31 = v30 + 88;
          *(unsigned char *)(v31 + 16) = 0;
          uint64_t v32 = (unsigned char *)(v31 + 16);
          if (v92)
          {
            *(void *)uint64_t v31 = 0;
            *(void *)(v31 + 8) = 0;
            uint64_t v33 = v89;
            uint64_t v89 = 0;
            *(void *)uint64_t v31 = v33;
            int v34 = v90;
            int v90 = 0;
            uint64_t v35 = v12 + 120 * v11;
            *(_DWORD *)(v35 + 96) = v34;
            int v36 = v91;
            int v91 = 0;
            *(_DWORD *)(v35 + 100) = v36;
            unsigned char *v32 = 1;
          }
          *(void *)(v12 + 120 * v11 + 112) = v93;
          ++HIDWORD(v95);
        }
        if (v92) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v10);
        }
        if (v88) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v85, v10);
        }
        uint64_t v37 = v83;
        uint64_t v83 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2) {
            WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v10);
          }
          else {
            *(_DWORD *)v37 -= 2;
          }
        }
        if (v82) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v10);
        }
        if ((_BYTE)v78) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v10);
        }
        WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v9, v10);
      }
      ++v5;
      v7 -= 8;
    }
    while (v7);
  }
  else
  {
    uint64_t v38 = *(void **)(a1 + 408);
    uint64_t v39 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v38);
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    if (v38) {
      unsigned int v43 = &v38[2 * *((unsigned int *)v38 - 1)];
    }
    else {
      unsigned int v43 = 0;
    }
    if (v43 != v39)
    {
      do
      {
        WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters((uint64_t)&v76, v40[1] + 16);
        unsigned int v45 = HIDWORD(v95);
        if (HIDWORD(v95) == v95)
        {
          WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionRegisteredScriptParameters>((uint64_t)&v94, (unint64_t)&v76);
        }
        else
        {
          uint64_t v46 = v94;
          uint64_t v47 = v94 + 120 * HIDWORD(v95);
          *(unsigned char *)uint64_t v47 = 0;
          *(unsigned char *)(v47 + 16) = 0;
          if ((_BYTE)v78)
          {
            *(void *)uint64_t v47 = 0;
            *(void *)(v47 + 8) = 0;
            uint64_t v48 = v76;
            uint64_t v76 = 0;
            *(void *)uint64_t v47 = v48;
            LODWORD(v48) = v77;
            LODWORD(v77) = 0;
            *(_DWORD *)(v47 + 8) = v48;
            LODWORD(v48) = HIDWORD(v77);
            HIDWORD(v77) = 0;
            *(_DWORD *)(v47 + 12) = v48;
            *(unsigned char *)(v47 + 16) = 1;
          }
          uint64_t v49 = v46 + 120 * v45;
          *(unsigned char *)(v49 + 24) = 0;
          uint64_t v50 = v49 + 24;
          *(unsigned char *)(v50 + 16) = 0;
          uint64_t v51 = (unsigned char *)(v50 + 16);
          if (v82)
          {
            *(void *)uint64_t v50 = 0;
            *(void *)(v50 + 8) = 0;
            uint64_t v52 = v79;
            uint64_t v79 = 0;
            *(void *)uint64_t v50 = v52;
            int v53 = v80;
            int v80 = 0;
            uint64_t v54 = v46 + 120 * v45;
            *(_DWORD *)(v54 + 32) = v53;
            int v55 = v81;
            int v81 = 0;
            *(_DWORD *)(v54 + 36) = v55;
            unsigned char *v51 = 1;
          }
          uint64_t v56 = v46 + 120 * v45;
          char v57 = v83;
          uint64_t v83 = 0;
          *(void *)(v56 + 48) = v57;
          LOWORD(v57) = v84;
          *(unsigned char *)(v56 + 80) = 0;
          id v58 = (unsigned char *)(v56 + 80);
          *((_WORD *)v58 - 12) = (_WORD)v57;
          *(v58 - 16) = 0;
          CFTypeRef v59 = v58 - 16;
          if (v88)
          {
            void *v59 = 0;
            *((void *)v58 - 1) = 0;
            uint64_t v60 = v85;
            uint64_t v85 = 0;
            void *v59 = v60;
            int v61 = v86;
            int v86 = 0;
            uint64_t v62 = v46 + 120 * v45;
            *(_DWORD *)(v62 + 72) = v61;
            int v63 = v87;
            int v87 = 0;
            *(_DWORD *)(v62 + 76) = v63;
            unsigned char *v58 = 1;
          }
          uint64_t v64 = v46 + 120 * v45;
          *(unsigned char *)(v64 + 88) = 0;
          uint64_t v65 = v64 + 88;
          *(unsigned char *)(v65 + 16) = 0;
          uint64_t v66 = (unsigned char *)(v65 + 16);
          if (v92)
          {
            *(void *)uint64_t v65 = 0;
            *(void *)(v65 + 8) = 0;
            uint64_t v67 = v89;
            uint64_t v89 = 0;
            *(void *)uint64_t v65 = v67;
            int v68 = v90;
            int v90 = 0;
            uint64_t v69 = v46 + 120 * v45;
            *(_DWORD *)(v69 + 96) = v68;
            int v70 = v91;
            int v91 = 0;
            *(_DWORD *)(v69 + 100) = v70;
            unsigned char *v66 = 1;
          }
          *(void *)(v46 + 120 * v45 + 112) = v93;
          ++HIDWORD(v95);
        }
        if (v92) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v44);
        }
        if (v88) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v85, v44);
        }
        char v71 = v83;
        uint64_t v83 = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2) {
            WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v44);
          }
          else {
            *(_DWORD *)v71 -= 2;
          }
        }
        if (v82) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v44);
        }
        if ((_BYTE)v78) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v44);
        }
        while (1)
        {
          v40 += 2;
          if (v40 == v42) {
            break;
          }
          if ((unint64_t)(*v40 + 1) > 1) {
            goto LABEL_61;
          }
        }
        uint64_t v40 = v42;
LABEL_61:
        ;
      }
      while (v40 != v43);
    }
  }
  uint64_t v76 = v94;
  uint64_t v72 = v95;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  uint64_t v77 = v72;
  int v78 = 0;
  uint64_t v73 = *(void *)a3;
  *(void *)a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v73 + 16))(v73, &v76);
  (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
  if (v78 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9FE220[v78])(&v96, &v76);
  }
  return WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v94, v74);
}

void sub_199300D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, char a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  if (a11 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9FE220[a11])(v23 - 81, &a9);
  }
  WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23 - 104, v25);
  _Unwind_Resume(a1);
}

WTF::StringImpl **WebKit::WebExtensionContext::scriptingUnregisterContentScripts(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(_DWORD *)(a2 + 12))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v44, a2);
    uint64_t v6 = v44;
  }
  else
  {
    uint64_t v6 = *(WTF::StringImpl ***)(a1 + 408);
    uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v6);
    id v8 = result;
    unsigned int v10 = v9;
    if (v6)
    {
      unsigned int v11 = &v6[2 * *((unsigned int *)v6 - 1)];
      id v44 = 0;
      uint64_t v45 = 0;
      uint64_t v12 = *((unsigned int *)v6 - 3);
      if (v12)
      {
        if (v12 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        uint64_t v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(8 * v12));
        LODWORD(v45) = v12;
        id v44 = v6;
      }
      else
      {
        uint64_t v6 = 0;
      }
    }
    else
    {
      unsigned int v11 = 0;
      id v44 = 0;
      uint64_t v45 = 0;
    }
    if (v11 != v8)
    {
      int v13 = 0;
      do
      {
        uint64_t v14 = *v8;
        if (*v8) {
          *(_DWORD *)v14 += 2;
        }
        v6[v13] = v14;
        while (1)
        {
          v8 += 2;
          if (v8 == v10) {
            break;
          }
          if ((unint64_t)*v8 + 1 > 1) {
            goto LABEL_17;
          }
        }
        id v8 = v10;
LABEL_17:
        ++v13;
      }
      while (v8 != v11);
      HIDWORD(v45) = v13;
    }
  }
  if (HIDWORD(v45))
  {
    uint64_t v15 = 8 * HIDWORD(v45);
    while ((WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(*(WTF **)(a1 + 408), v6, v5) & 1) != 0)
    {
      ++v6;
      v15 -= 8;
      if (!v15) {
        goto LABEL_23;
      }
    }
    if (*v6) {
      uint64_t v33 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v33 = &stru_1EEA10550;
    }
    unsigned int v43 = v33;
    WebKit::toWebExtensionError<NSString * {__strong}>((WebKit *)@"scripting.unregisterContentScripts()", 0, &cfstr_NoScriptWithId.isa, (NSString *)&v43, v38);
    int v34 = v38[0];
    v38[0] = 0;
    v46[0] = v34;
    LOBYTE(v46[1]) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
    if (LOBYTE(v46[1]))
    {
      int v36 = v46[0];
      v46[0] = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2) {
          WTF::StringImpl::destroy(v36, v35);
        }
        else {
          *(_DWORD *)v36 -= 2;
        }
      }
    }
    uint64_t v37 = v38[0];
    v38[0] = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v35);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
  }
  else
  {
LABEL_23:
    uint64_t v16 = WebKit::WebExtensionContext::registeredContentScriptsStore((WebKit::WebExtensionContext *)a1);
    WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>((uint64_t)&v44, (uint64_t *)&cf);
    unsigned int v17 = WTF::RetainPtr<NSSet>::get((id *)&cf);
    v38[0] = (WTF::StringImpl *)a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v38[1] = (WTF::StringImpl *)a1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v39, (uint64_t)&v44);
    uint64_t v18 = *a3;
    *a3 = 0;
    *(_OWORD *)uint64_t v46 = *(_OWORD *)v38;
    uint64_t v19 = v39;
    v38[1] = 0;
    uint64_t v39 = 0;
    uint64_t v47 = v19;
    uint64_t v20 = v40;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v48 = v20;
    uint64_t v49 = v18;
    int v21 = malloc_type_malloc(0x48uLL, 0x10E00403B2070A5uLL);
    void *v21 = MEMORY[0x1E4F14398];
    v21[1] = 50331650;
    void v21[2] = WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingUnregisterContentScripts(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingUnregisterContentScripts(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke;
    v21[3] = &WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingUnregisterContentScripts(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingUnregisterContentScripts(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
    *((_OWORD *)v21 + 2) = *(_OWORD *)v46;
    uint64_t v22 = v47;
    v46[1] = 0;
    uint64_t v47 = 0;
    v21[6] = v22;
    uint64_t v23 = v48;
    uint64_t v48 = 0;
    v21[7] = v23;
    v21[8] = v49;
    uint64_t v24 = _Block_copy(v21);

    uint64_t v49 = 0;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v25);
    uint64_t v26 = v46[1];
    v46[1] = 0;
    if (v26) {
      CFRelease(*((CFTypeRef *)v26 + 1));
    }
    int v27 = _Block_copy(v24);
    [v16 deleteScriptsWithIDs:v17 completionHandler:v27];

    uint64_t v29 = v41;
    uint64_t v41 = 0;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v28);
    uint64_t v30 = v38[1];
    v38[1] = 0;
    if (v30) {
      CFRelease(*((CFTypeRef *)v30 + 1));
    }

    CFTypeRef v31 = cf;
    CFTypeRef cf = 0;
    if (v31) {
      CFRelease(v31);
    }
  }
  return (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v32);
}

void sub_199301258(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, uint64_t a16, char a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
}

void WebKit::WebExtensionContext::loadRegisteredContentScripts(CFTypeRef *this)
{
  MEMORY[0x19972EAD0](&v9, @"scripting");
  int v3 = WebKit::WebExtensionContext::permissionState((WTF::StringImpl *)this, &v9, 0, 2) & 0xFFFFFFFE;
  uint64_t v4 = v9;
  uint64_t v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  if (v3 == 2)
  {
    uint64_t v5 = WebKit::WebExtensionContext::registeredContentScriptsStore((WebKit::WebExtensionContext *)this);
    CFRetain(this[1]);
    uint64_t v6 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    void *v6 = MEMORY[0x1E4F14398];
    v6[1] = 50331650;
    v6[2] = WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadRegisteredContentScripts(void)::$_0>(WebKit::WebExtensionContext::loadRegisteredContentScripts(void)::$_0)::{lambda(void *,NSArray *,NSString *)#1}::__invoke;
    v6[3] = &WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadRegisteredContentScripts(void)::$_0>(WebKit::WebExtensionContext::loadRegisteredContentScripts(void)::$_0)::descriptor;
    v6[4] = this;
    v6[5] = this;
    uint64_t v7 = _Block_copy(v6);

    id v8 = _Block_copy(v7);
    [v5 getScriptsWithCompletionHandler:v8];
  }
}

void sub_1993014FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::clearRegisteredContentScripts(WebKit::WebExtensionContext *this, void *a2)
{
  int v3 = (WTF::StringImpl **)*((void *)this + 51);
  if (v3)
  {
    *((void *)this + 51) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  WebKit::WebExtensionContext::registeredContentScriptsStore(this);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [v4 deleteDatabaseWithCompletionHandler:&__block_literal_global_37];
}

void sub_1993015C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN6WebKit19WebExtensionContext29clearRegisteredContentScriptsEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    int v3 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138543362;
      id v5 = v2;
      _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "Failed to delete registered content scripts database. Error: %{public}@", (uint8_t *)&v4, 0xCu);
    }
  }
}

BOOL ___ZN6WebKit19WebExtensionContext31createInjectedContentForScriptsERKN3WTF6VectorINS_38WebExtensionRegisteredScriptParametersELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEENS_26WebExtensionDynamicScripts28WebExtensionRegisteredScript21FirstTimeRegistrationERNS1_7HashMapINS1_6StringENS_12WebExtension19InjectedContentDataENS1_11DefaultHashISD_EENS1_10HashTraitsISD_EENSI_ISF_EENS1_15HashTableTraitsEEEP8NSStringPU15__autoreleasingSP__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 length] != 0;
}

BOOL ___ZN6WebKit19WebExtensionContext31createInjectedContentForScriptsERKN3WTF6VectorINS_38WebExtensionRegisteredScriptParametersELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEENS_26WebExtensionDynamicScripts28WebExtensionRegisteredScript21FirstTimeRegistrationERNS1_7HashMapINS1_6StringENS_12WebExtension19InjectedContentDataENS1_11DefaultHashISD_EENS1_10HashTraitsISD_EENSI_ISF_EENS1_15HashTableTraitsEEEP8NSStringPU15__autoreleasingSP__block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 length] != 0;
}

uint64_t WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  std::__optional_copy_base<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(a1 + 16), (unsigned char *)(a2 + 16));
  std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(a1 + 32), a2 + 32);
  std::__optional_copy_base<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100]((unsigned char *)(a1 + 56), a2 + 56);
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    int v4 = *(_DWORD **)(a2 + 80);
    if (v4) {
      *v4 += 2;
    }
    *(void *)(a1 + 80) = v4;
    *(unsigned char *)(a1 + 88) = 1;
  }
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  if (*(unsigned char *)(a2 + 104))
  {
    id v5 = *(_DWORD **)(a2 + 96);
    if (v5) {
      *v5 += 2;
    }
    *(void *)(a1 + 96) = v5;
    *(unsigned char *)(a1 + 104) = 1;
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  if (*(unsigned char *)(a2 + 120))
  {
    uint64_t v6 = *(_DWORD **)(a2 + 112);
    if (v6) {
      *v6 += 2;
    }
    *(void *)(a1 + 112) = v6;
    *(unsigned char *)(a1 + 120) = 1;
  }
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  return a1;
}

void sub_1993017C8(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 48)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
  }
  if (*(unsigned char *)(v2 + 24))
  {
    uint64_t v6 = *v3;
    uint64_t *v3 = 0;
    if (v6) {
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_copy_base<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, unsigned char *a2)
{
  *a1 = 0;
  a1[8] = 0;
  if (a2[8])
  {
    uint64_t v3 = *(void *)a2;
    CFRetain(*(CFTypeRef *)(*(void *)a2 + 8));
    *(void *)a1 = v3;
    a1[8] = 1;
  }
  return a1;
}

void sub_199301858(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 8))
  {
    uint64_t v3 = *v1;
    uint64_t *v1 = 0;
    if (v3) {
      CFRelease(*(CFTypeRef *)(v3 + 8));
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_copy_base<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a1, a2);
    a1[16] = 1;
  }
  return a1;
}

void sub_1993018C8(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    uint64_t v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingRegisterContentScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingRegisterContentScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[8];
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 6), a2);
  uint64_t v5 = a1[5];
  a1[5] = 0;
  if (v5)
  {
    uint64_t v6 = *(const void **)(v5 + 8);
    CFRelease(v6);
  }
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingRegisterContentScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingRegisterContentScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v4 = a2;
  if (v4)
  {
    WebKit::toWebExtensionError<>((WebKit *)@"scripting.registerContentScripts()", 0, v4, v3, v23);
    uint64_t v5 = v23[0];
    v23[0] = 0;
    uint64_t v25 = v5;
    LOBYTE(v26) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 72));
    if ((_BYTE)v26)
    {
      uint64_t v7 = v25;
      uint64_t v25 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v6);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
    }
    uint64_t v22 = v23[0];
    v23[0] = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v6);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v9 = *(unsigned int *)(a1 + 60);
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v11 = 120 * v9;
      do
      {
        WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WebKit::WebExtension::InjectedContentData *)&v25, *(void *)(a1 + 64), (WTF::StringImpl **)(v10 + 48));
        uint64_t v12 = (WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *)WTF::fastMalloc((WTF *)0xE0);
        WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::WebExtensionRegisteredScript((uint64_t)v12, v8, v10, (const WebKit::WebExtension::InjectedContentData *)&v25);
        uint64_t v24 = v12;
        WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>((uint64_t)v23, (uint64_t *)(v8 + 408), (WTF::StringImpl **)(v10 + 48), (uint64_t *)&v24);
        if (v24) {
          WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v24, v13);
        }
        if (HIDWORD(v33) == v33)
        {
          WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::InjectedContentData>((uint64_t)&v32, (unint64_t)&v25);
        }
        else
        {
          WebKit::WebExtension::InjectedContentData::InjectedContentData(v32 + 72 * HIDWORD(v33), (uint64_t *)&v25);
          ++HIDWORD(v33);
        }
        CFTypeRef v15 = cf;
        CFTypeRef cf = 0;
        if (v15) {
          CFRelease(v15);
        }
        CFTypeRef v16 = v30;
        CFTypeRef v30 = 0;
        if (v16) {
          CFRelease(v16);
        }
        CFTypeRef v17 = v29;
        CFTypeRef v29 = 0;
        if (v17) {
          CFRelease(v17);
        }
        CFTypeRef v18 = v28;
        CFTypeRef v28 = 0;
        if (v18) {
          CFRelease(v18);
        }
        uint64_t v19 = v27;
        int v27 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v14);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
        if (v26) {
          WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v26, v14);
        }
        if (v25) {
          WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)v25, v14);
        }
        v10 += 120;
        v11 -= 120;
      }
      while (v11);
    }
    WebKit::WebExtensionContext::addInjectedContent(v8, (uint64_t)&v32);
    LOBYTE(v25) = 0;
    LOBYTE(v26) = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 72));
    if ((_BYTE)v26)
    {
      int v21 = v25;
      uint64_t v25 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v20);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
    }
    WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v20);
  }
}

void sub_199301C04(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, CFTypeRef a19, CFTypeRef a20,CFTypeRef a21,CFTypeRef cf)
{
  if ((_BYTE)a15 && a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23 - 96, a2);

  _Unwind_Resume(a1);
}

WebKit::WebExtension::InjectedContentData *WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(WebKit::WebExtension::InjectedContentData *a1, uint64_t a2, WTF::StringImpl **a3)
{
  if (a2)
  {
    int v6 = *(_DWORD *)(a2 - 8);
    unsigned int v7 = *((_DWORD *)*a3 + 4);
    if (v7 >= 0x100) {
      unsigned int v8 = v7 >> 8;
    }
    else {
      unsigned int v8 = WTF::StringImpl::hashSlowCase(*a3);
    }
    for (i = 0; ; unsigned int v8 = i + v10)
    {
      unsigned int v10 = v8 & v6;
      uint64_t v11 = *(WTF **)(a2 + 80 * (v8 & v6));
      if (v11 != (WTF *)-1)
      {
        if (!v11) {
          goto LABEL_10;
        }
        if (WTF::equal(v11, *a3, (const WTF::StringImpl *)a3)) {
          break;
        }
      }
      ++i;
    }
    return WebKit::WebExtension::InjectedContentData::InjectedContentData(a1, (const WebKit::WebExtension::InjectedContentData *)(a2 + 80 * v10 + 8));
  }
  else
  {
LABEL_10:
    long long v20 = 0u;
    *(_OWORD *)int v21 = 0u;
    uint64_t v12 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    v21[1] = v12;
    uint64_t v22 = 16842752;
    *(_OWORD *)uint64_t v23 = 0u;
    *(_OWORD *)CFTypeRef cf = 0u;
    WebKit::WebExtension::InjectedContentData::InjectedContentData((uint64_t)a1, (uint64_t *)&v20);
    CFTypeRef v14 = cf[1];
    cf[1] = 0;
    if (v14) {
      CFRelease(v14);
    }
    CFTypeRef v15 = cf[0];
    cf[0] = 0;
    if (v15) {
      CFRelease(v15);
    }
    CFTypeRef v16 = v23[1];
    v23[1] = 0;
    if (v16) {
      CFRelease(v16);
    }
    CFTypeRef v17 = v23[0];
    v23[0] = 0;
    if (v17) {
      CFRelease(v17);
    }
    CFTypeRef v18 = v21[1];
    v21[1] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v13);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (*((void *)&v20 + 1)) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(*((uint64_t **)&v20 + 1), v13);
    }
    uint64_t result = (WebKit::WebExtension::InjectedContentData *)v20;
    if ((void)v20) {
      return (WebKit::WebExtension::InjectedContentData *)WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)v20, v13);
    }
  }
  return result;
}

void sub_199301F18(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t *a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, CFTypeRef a14, CFTypeRef a15, CFTypeRef a16, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a16) {
    CFRelease(a16);
  }
  if (a15) {
    CFRelease(a15);
  }
  if (a14) {
    CFRelease(a14);
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a10) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a10, a2);
  }
  if (a9) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtension::InjectedContentData *WebKit::WebExtension::InjectedContentData::InjectedContentData(WebKit::WebExtension::InjectedContentData *this, const WebKit::WebExtension::InjectedContentData *a2)
{
  uint64_t v4 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)this, (void **)a2);
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable(v4 + 1, (void **)a2 + 1);
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  uint64_t v5 = (_DWORD *)*((void *)a2 + 3);
  if (v5) {
    *v5 += 2;
  }
  *((void *)this + 3) = v5;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  WTF::RetainPtr<NSArray>::RetainPtr((void *)this + 5);
  WTF::RetainPtr<NSArray>::RetainPtr((void *)this + 6);
  WTF::RetainPtr<NSArray>::RetainPtr((void *)this + 7);
  WTF::RetainPtr<NSArray>::RetainPtr((void *)this + 8);
  return this;
}

void sub_199302060(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  unsigned int v8 = *v6;
  WTF::StringImpl *v6 = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *v5;
  *uint64_t v5 = 0;
  if (v9) {
    CFRelease(v9);
  }
  unsigned int v10 = *v4;
  uint64_t *v4 = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *(WTF::StringImpl **)(v2 + 24);
  *(void *)(v2 + 24) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  if (*v3) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(*v3, a2);
  }
  if (*(void *)v2) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(*(uint64_t **)v2, a2);
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a3 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a3);
  }
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v14 = v11 & v9;
    CFTypeRef v15 = (uint64_t *)(v8 + 16 * v14);
    CFTypeRef v16 = (WTF *)*v15;
    if (*v15 != -1) {
      break;
    }
    uint64_t v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      uint64_t *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      CFTypeRef v15 = v12;
    }
    WTF::String::operator=(v15, a3);
    uint64_t v19 = *a4;
    *a4 = 0;
    uint64_t result = (WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *)v15[1];
    v15[1] = v19;
    if (result) {
      uint64_t result = WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(result, v18);
    }
    uint64_t v21 = *a2;
    if (*a2) {
      int v22 = *(_DWORD *)(v21 - 12) + 1;
    }
    else {
      int v22 = 1;
    }
    *(_DWORD *)(v21 - 12) = v22;
    uint64_t v25 = *a2;
    if (*a2) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_28:
        uint64_t result = (WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, (WTF::StringImpl **)v15);
        CFTypeRef v15 = (uint64_t *)result;
        uint64_t v25 = *a2;
        if (*a2) {
          unint64_t v28 = *(unsigned int *)(v25 - 4);
        }
        else {
          unint64_t v28 = 0;
        }
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_28;
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v25 + 16 * v28;
    *(unsigned char *)(a1 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a3, (const WTF::StringImpl *)a3)) {
    goto LABEL_13;
  }
  uint64_t v23 = *a2;
  if (*a2) {
    uint64_t v24 = *(unsigned int *)(v23 - 4);
  }
  else {
    uint64_t v24 = 0;
  }
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = v23 + 16 * v24;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v29 = v8 + 16 * v14;
  uint64_t v30 = *a4;
  *a4 = 0;
  uint64_t result = *(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript **)(v29 + 8);
  *(void *)(v29 + 8) = v30;
  if (result)
  {
    return WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(result, v17);
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      int v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unsigned int v19 = *((_DWORD *)v14 + 4);
          if (v19 >= 0x100) {
            unsigned int v20 = v19 >> 8;
          }
          else {
            unsigned int v20 = WTF::StringImpl::hashSlowCase(v14);
          }
          int v21 = 0;
          do
          {
            uint64_t v22 = v20 & v18;
            unsigned int v20 = ++v21 + v22;
          }
          while (*(void *)(v17 + 16 * v22));
          uint64_t v23 = (WTF::StringImpl **)(v17 + 16 * v22);
          uint64_t v24 = v23[1];
          v23[1] = 0;
          if (v24)
          {
            WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v24, v10);
            uint64_t v25 = *v23;
            WTF::StringImpl *v23 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2) {
                WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v10);
              }
              else {
                *(_DWORD *)v25 -= 2;
              }
            }
          }
          else
          {
            WTF::StringImpl *v23 = 0;
          }
          int v26 = *v13;
          WTF::StringImpl *v13 = 0;
          WTF::StringImpl *v23 = v26;
          uint64_t v27 = v6 + 16 * v11;
          unint64_t v28 = *(WTF::StringImpl **)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          v23[1] = v28;
          uint64_t v29 = *(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript **)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          if (v29) {
            WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v29, v10);
          }
          uint64_t v30 = *v13;
          WTF::StringImpl *v13 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2) {
              WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v10);
            }
            else {
              *(_DWORD *)v30 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v12 = v23;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          CFTypeRef v16 = *(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16)
          {
            WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v16, v10);
            uint64_t v14 = *v13;
          }
          WTF::StringImpl *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v10);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::WebExtensionRegisteredScript(uint64_t a1, uint64_t a2, uint64_t a3, const WebKit::WebExtension::InjectedContentData *a4)
{
  *(_DWORD *)a1 = 1;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  int v8 = *(atomic_uint **)(a2 + 24);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  *(void *)(a1 + 8) = v8;
  WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters(a1 + 16, a3);
  WebKit::WebExtension::InjectedContentData::InjectedContentData((WebKit::WebExtension::InjectedContentData *)(a1 + 136), a4);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  return a1;
}

void sub_1993025C0(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 120)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 104, a2);
  }
  if (*(unsigned char *)(v2 + 96)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 80, a2);
  }
  unsigned int v5 = *(WTF::StringImpl **)(v2 + 64);
  *(void *)(v2 + 64) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  if (*(unsigned char *)(v2 + 56)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 40, a2);
  }
  if (*(unsigned char *)(v2 + 32)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  }
  uint64_t v6 = *(unsigned int **)(v2 + 8);
  *(void *)(v2 + 8) = 0;
  if (v6)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 8;
    do
    {
      if (*(void *)(v4 - 8) != -1)
      {
        WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        unsigned int v5 = *(WTF::StringImpl **)(v4 - 8);
        *(void *)(v4 - 8) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::~WebExtensionRegisteredScript(result, a2);
    return (WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::~WebExtensionRegisteredScript(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *this, void *a2)
{
  uint64_t v3 = *((void *)this + 27);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 26);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  WebKit::WebExtension::InjectedContentData::~InjectedContentData((WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *)((char *)this + 136), (WTF::StringImpl *)a2);
  if (*((unsigned char *)this + 120)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 104, v5);
  }
  if (*((unsigned char *)this + 96)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v5);
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  if (*((unsigned char *)this + 56)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v5);
  }
  if (*((unsigned char *)this + 32)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, v5);
  }
  int v7 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v5);
    }
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WebKit::WebExtension::InjectedContentData *)(a1 + 8);
    do
    {
      if (*((void *)v4 - 1) != -1)
      {
        WebKit::WebExtension::InjectedContentData::~InjectedContentData(v4, a2);
        unsigned int v5 = (WTF::StringImpl *)*((void *)v4 - 1);
        *((void *)v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      uint64_t v4 = (WebKit::WebExtension::InjectedContentData *)((char *)v4 + 80);
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[8];
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 6), a2);
  uint64_t v5 = a1[5];
  a1[5] = 0;
  if (v5)
  {
    uint64_t v6 = *(const void **)(v5 + 8);
    CFRelease(v6);
  }
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts(WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v5 = a2;
  if (v5)
  {
    WebKit::toWebExtensionError<>((WebKit *)@"scripting.updateContentScripts()", 0, v5, v4, &v43);
    uint64_t v6 = v43;
    unsigned int v43 = 0;
    uint64_t v33 = v6;
    LOBYTE(v34) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 72));
    int v8 = v33;
    uint64_t v33 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    CFTypeRef v31 = v43;
    unsigned int v43 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v7);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
  else
  {
    uint64_t v32 = *(void *)(a1 + 32);
    unsigned int v43 = 0;
    uint64_t v44 = 0;
    uint64_t v9 = *(unsigned int *)(a1 + 60);
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v11 = 120 * v9;
      do
      {
        uint64_t v12 = *(WTF::StringImpl **)(v10 + 48);
        if (v12) {
          *(_DWORD *)v12 += 2;
        }
        uint64_t v42 = v12;
        int v13 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v32 + 408), &v42, v3);
        uint64_t v15 = v13;
        if (v13)
        {
          ++*(_DWORD *)v13;
          WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::updateParameters((uint64_t)v13, v10);
          WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::removeUserScripts(v15, &v42, v16);
          WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::removeUserStyleSheets(v15, &v42, v17);
          WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WebKit::WebExtension::InjectedContentData *)&v33, *(void *)(a1 + 64), &v42);
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::operator=((uint64_t **)v15 + 17, (void **)&v33);
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::operator=((uint64_t **)v15 + 18, &v34);
          *((unsigned char *)v15 + 152) = v35;
          WTF::String::operator=((uint64_t *)v15 + 20, &v36);
          *((_DWORD *)v15 + 42) = v37;
          WTF::RetainPtr<NSArray>::RetainPtr(&v45);
          int v18 = (const void *)*((void *)v15 + 22);
          *((void *)v15 + 22) = v45;
          uint64_t v45 = 0;
          if (v18) {
            CFRelease(v18);
          }
          WTF::RetainPtr<NSArray>::RetainPtr(&v45);
          unsigned int v19 = (const void *)*((void *)v15 + 23);
          *((void *)v15 + 23) = v45;
          uint64_t v45 = 0;
          if (v19) {
            CFRelease(v19);
          }
          WTF::RetainPtr<NSArray>::RetainPtr(&v45);
          unsigned int v20 = (const void *)*((void *)v15 + 24);
          *((void *)v15 + 24) = v45;
          uint64_t v45 = 0;
          if (v20) {
            CFRelease(v20);
          }
          WTF::RetainPtr<NSArray>::RetainPtr(&v45);
          int v21 = (const void *)*((void *)v15 + 25);
          *((void *)v15 + 25) = v45;
          uint64_t v45 = 0;
          if (v21) {
            CFRelease(v21);
          }
          if (HIDWORD(v44) == v44)
          {
            WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::InjectedContentData>((uint64_t)&v43, (unint64_t)&v33);
          }
          else
          {
            WebKit::WebExtension::InjectedContentData::InjectedContentData((uint64_t)v43 + 72 * HIDWORD(v44), (uint64_t *)&v33);
            ++HIDWORD(v44);
          }
          CFTypeRef v23 = cf;
          CFTypeRef cf = 0;
          if (v23) {
            CFRelease(v23);
          }
          CFTypeRef v24 = v40;
          CFTypeRef v40 = 0;
          if (v24) {
            CFRelease(v24);
          }
          CFTypeRef v25 = v39;
          CFTypeRef v39 = 0;
          if (v25) {
            CFRelease(v25);
          }
          CFTypeRef v26 = v38;
          CFTypeRef v38 = 0;
          if (v26) {
            CFRelease(v26);
          }
          uint64_t v27 = v36;
          int v36 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, v22);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
          if (v34) {
            WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v34, v22);
          }
          if (v33) {
            WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)v33, v22);
          }
          WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v15, v22);
        }
        unint64_t v28 = v42;
        uint64_t v42 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2) {
            WTF::StringImpl::destroy(v28, v14);
          }
          else {
            *(_DWORD *)v28 -= 2;
          }
        }
        v10 += 120;
        v11 -= 120;
      }
      while (v11);
    }
    WebKit::WebExtensionContext::addInjectedContent(v32, (uint64_t)&v43);
    LOBYTE(v33) = 0;
    LOBYTE(v34) = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 72));
    uint64_t v5 = 0;
    if ((_BYTE)v34)
    {
      uint64_t v30 = v33;
      uint64_t v33 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2) {
          WTF::StringImpl::destroy(v30, v29);
        }
        else {
          *(_DWORD *)v30 -= 2;
        }
      }
    }
    WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v29);
  }
}

void sub_199302CE0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef a17, CFTypeRef a18, CFTypeRef a19, CFTypeRef cf,WTF::StringImpl *a21,WTF::StringImpl *a22)
{
  if ((_BYTE)a13 && a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, a2);

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingUnregisterContentScripts(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingUnregisterContentScripts(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 48, a2);
  uint64_t v4 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v4)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::scriptingUnregisterContentScripts(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::scriptingUnregisterContentScripts(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v4 = a2;
  if (v4)
  {
    WebKit::toWebExtensionError<>((WebKit *)@"scripting.unregisterContentScripts()", 0, v4, v3, &v17);
    uint64_t v5 = v17;
    uint64_t v17 = 0;
    aBlocuint64_t k = v5;
    LOBYTE(v21) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 64));
    if ((_BYTE)v21)
    {
      int v7 = aBlock;
      aBlocuint64_t k = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v6);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
    }
    CFTypeRef v16 = v17;
    uint64_t v17 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v6);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    aBlocuint64_t k = (WTF::StringImpl *)MEMORY[0x1E4F143A8];
    uint64_t v21 = 3221225472;
    uint64_t v22 = ___ZZN6WebKit19WebExtensionContext33scriptingUnregisterContentScriptsERKN3WTF6VectorINS1_6StringELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEONS1_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS3_EEEEEEN3__0clEP8NSString_block_invoke;
    CFTypeRef v23 = &__block_descriptor_40_e136_v16__0_String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___8l;
    uint64_t v24 = v8;
    uint64_t v9 = (void (**)(void *, WTF::StringImpl **))_Block_copy(&aBlock);
    uint64_t v10 = *(unsigned int *)(a1 + 60);
    if (v10)
    {
      uint64_t v11 = *(WTF::StringImpl ***)(a1 + 48);
      uint64_t v12 = 8 * v10;
      do
      {
        int v13 = *v11;
        if (*v11) {
          *(_DWORD *)v13 += 2;
        }
        unsigned int v19 = v13;
        v9[2](v9, &v19);
        uint64_t v15 = v19;
        unsigned int v19 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v14);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
    LOBYTE(v17) = 0;
    char v18 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 64));
  }
}

void sub_1993030B4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, WTF::StringImpl *a12, char a13)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *___ZZN6WebKit19WebExtensionContext33scriptingUnregisterContentScriptsERKN3WTF6VectorINS1_6StringELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEONS1_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS3_EEEEEEN3__0clEP8NSString_block_invoke(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *result, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *((void *)result + 4);
  uint64_t v4 = *(void *)(v3 + 408);
  if (v4)
  {
    int v6 = *(_DWORD *)(v4 - 8);
    unsigned int v7 = *((_DWORD *)*a2 + 4);
    if (v7 >= 0x100) {
      unsigned int v8 = v7 >> 8;
    }
    else {
      unsigned int v8 = WTF::StringImpl::hashSlowCase(*a2);
    }
    int v9 = 0;
    uint64_t v10 = (uint64_t *)(v3 + 408);
    while (1)
    {
      uint64_t v11 = v8 & v6;
      uint64_t result = *(WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript **)(v4 + 16 * v11);
      if (result != (WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *)-1)
      {
        if (!result)
        {
          uint64_t v12 = *v10;
          if (!*v10) {
            return result;
          }
          int v13 = (WTF::StringImpl **)(v12 + 16 * *(unsigned int *)(v12 - 4));
          goto LABEL_13;
        }
        uint64_t result = (WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *)WTF::equal(result, *a2, a3);
        if (result) {
          break;
        }
      }
      unsigned int v8 = ++v9 + v11;
    }
    int v13 = (WTF::StringImpl **)(v4 + 16 * v11);
    uint64_t v12 = *v10;
    if (*v10)
    {
LABEL_13:
      uint64_t v14 = v12 + 16 * *(unsigned int *)(v12 - 4);
      goto LABEL_15;
    }
    uint64_t v14 = 0;
LABEL_15:
    if ((WTF::StringImpl **)v14 != v13)
    {
      uint64_t v15 = v13[1];
      if (v15)
      {
        v13[1] = 0;
        uint64_t v12 = *v10;
      }
      if (!v12 || (v12 += 16 * *(unsigned int *)(v12 - 4), (WTF::StringImpl **)v12 != v13))
      {
        if ((WTF::StringImpl **)v12 != v13)
        {
          WTF::HashTraits<WTF::String>::customDeleteBucket(v13, (WTF::StringImpl *)a2);
          uint64_t result = v13[1];
          v13[1] = 0;
          if (result) {
            uint64_t result = WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(result, v16);
          }
          ++*(_DWORD *)(*v10 - 16);
          uint64_t v17 = *v10;
          if (*v10) {
            int v18 = *(_DWORD *)(v17 - 12) - 1;
          }
          else {
            int v18 = -1;
          }
          *(_DWORD *)(v17 - 12) = v18;
          uint64_t v19 = *v10;
          if (*v10)
          {
            unsigned int v20 = 6 * *(_DWORD *)(v19 - 12);
            unsigned int v21 = *(_DWORD *)(v19 - 4);
            if (v20 < v21 && v21 >= 9) {
              uint64_t result = (WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v10, v21 >> 1, 0);
            }
          }
        }
      }
      if (v15)
      {
        WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::removeUserScripts(v15, a2, a3);
        WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::removeUserStyleSheets(v15, a2, v22);
        return WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v15, v23);
      }
    }
  }
  return result;
}

void sub_199303320(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadRegisteredContentScripts(void)::$_0>(WebKit::WebExtensionContext::loadRegisteredContentScripts(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadRegisteredContentScripts(void)::$_0>(WebKit::WebExtensionContext::loadRegisteredContentScripts(void)::$_0)::{lambda(void *,NSArray *,NSString *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v6)
  {
    id v8 = v6;
    int v9 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (*(void *)(v7 + 120)) {
        CFTypeRef v23 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        CFTypeRef v23 = &stru_1EEA10550;
      }
      *(_DWORD *)buf = 138478083;
      *(void *)&uint8_t buf[4] = v23;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v8;
      _os_log_error_impl(&dword_1985F2000, v9, OS_LOG_TYPE_ERROR, "Unable to get registered scripts for extension %{private}@. Error: %{public}@", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    WebKit::WebExtensionAPIScripting::parseRegisteredContentScripts(v5, 1, (uint64_t)&v31);
    id v29 = 0;
    uint64_t v30 = 0;
    WebKit::WebExtensionContext::createInjectedContentForScripts(v7, (uint64_t)&v31, 1, &v30, 0, &v29);
    id v8 = v29;
    if (v8)
    {
      uint64_t v10 = (id)qword_1EB357DF8;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        if (*(void *)(v7 + 120)) {
          uint64_t v24 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v24 = &stru_1EEA10550;
        }
        *(_DWORD *)buf = 138478083;
        *(void *)&uint8_t buf[4] = v24;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v8;
        _os_log_error_impl(&dword_1985F2000, v10, OS_LOG_TYPE_ERROR, "Failed to create injected content data for extension %{private}@. Error: %{public}@", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      if (HIDWORD(v32))
      {
        uint64_t v12 = v31;
        uint64_t v13 = 120 * HIDWORD(v32);
        do
        {
          WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WebKit::WebExtension::InjectedContentData *)buf, v30, (WTF::StringImpl **)(v12 + 48));
          uint64_t v14 = (WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript *)WTF::fastMalloc((WTF *)0xE0);
          WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::WebExtensionRegisteredScript((uint64_t)v14, v7, v12, (const WebKit::WebExtension::InjectedContentData *)buf);
          CFTypeRef v26 = v14;
          WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>((uint64_t)&v25, (uint64_t *)(v7 + 408), (WTF::StringImpl **)(v12 + 48), (uint64_t *)&v26);
          if (v26) {
            WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v26, v15);
          }
          if (HIDWORD(v28) == v28)
          {
            WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::InjectedContentData>((uint64_t)&v27, (unint64_t)buf);
          }
          else
          {
            WebKit::WebExtension::InjectedContentData::InjectedContentData(v27 + 72 * HIDWORD(v28), (uint64_t *)buf);
            ++HIDWORD(v28);
          }
          CFTypeRef v17 = cf;
          CFTypeRef cf = 0;
          if (v17) {
            CFRelease(v17);
          }
          CFTypeRef v18 = v37;
          CFTypeRef v37 = 0;
          if (v18) {
            CFRelease(v18);
          }
          CFTypeRef v19 = v36;
          CFTypeRef v36 = 0;
          if (v19) {
            CFRelease(v19);
          }
          CFTypeRef v20 = v35;
          CFTypeRef v35 = 0;
          if (v20) {
            CFRelease(v20);
          }
          unsigned int v21 = v34;
          int v34 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2) {
              WTF::StringImpl::destroy(v21, v16);
            }
            else {
              *(_DWORD *)v21 -= 2;
            }
          }
          if (*(void *)&buf[8]) {
            WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(*(uint64_t **)&buf[8], v16);
          }
          if (*(void *)buf) {
            WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(*(uint64_t **)buf, v16);
          }
          v12 += 120;
          v13 -= 120;
        }
        while (v13);
      }
      WebKit::WebExtensionContext::addInjectedContent(v7, (uint64_t)&v27);
      WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v22);
    }
    if (v30) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v11);
    }
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v11);
  }
}

void sub_1993036BC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,CFTypeRef a24,CFTypeRef a25,CFTypeRef a26,CFTypeRef cf)
{
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  if (a16) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a16, v29);
  }
  WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, v29);

  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE280;
  WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9FE280;
  WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)a1 + 8);

  return WTF::fastFree(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v2 = *(API::ContentWorld **)(a1 + 8);
  if (WebKit::WebExtensionTab::extensionHasPermission(*(WebKit::WebExtensionTab **)(a1 + 24)))
  {
    id v5 = WebKit::WebExtensionTab::webView(*(WebKit::WebExtensionTab **)(a1 + 24));
    if (v5)
    {
      WebKit::WebExtensionDynamicScripts::getSourcePairsForParameters(a1 + 32, (uint64_t)v2, (uint64_t)v19);
      id v6 = WebKit::WebExtensionContext::toContentWorld(v2, *(unsigned __int8 *)(a1 + 160));
      CFRetain(*((CFTypeRef *)v6 + 1));
      uint64_t v7 = *(_DWORD **)(a1 + 24);
      uint64_t v8 = *(void *)(a1 + 168);
      *(void *)(a1 + 168) = 0;
      int v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(void *)int v9 = &unk_1EE9FE2A8;
      *((void *)v9 + 1) = v8;
      CFTypeRef v18 = v9;
      WebKit::WebExtensionDynamicScripts::executeScript(v19, v5, (uint64_t)v6, v7, a1 + 32, (uint64_t)v2, (uint64_t *)&v18);
      uint64_t v10 = v18;
      CFTypeRef v18 = 0;
      if (v10) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v10 + 8))(v10);
      }
      CFRelease(*((CFTypeRef *)v6 + 1));
      WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v11);
    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)@"scripting.executeScript()", 0, &cfstr_CouldNotExecut.isa, v4, &v18);
      uint64_t v15 = v18;
      CFTypeRef v18 = 0;
      v19[0] = (uint64_t)v15;
      int v20 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 168));
      if (v20 != -1) {
        ((void (*)(char *, uint64_t *))off_1EE9FE1D0[v20])(&v21, v19);
      }
      int v20 = -1;
      CFTypeRef v17 = v18;
      CFTypeRef v18 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v16);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"scripting.executeScript()", 0, &cfstr_ThisExtensionD.isa, v3, &v18);
    uint64_t v12 = v18;
    CFTypeRef v18 = 0;
    v19[0] = (uint64_t)v12;
    int v20 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 168));
    if (v20 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9FE1D0[v20])(&v21, v19);
    }
    int v20 = -1;
    uint64_t v14 = v18;
    CFTypeRef v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
}

void sub_199303ABC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18)
{
  if (a13 != -1) {
    ((void (*)(char *, char *))off_1EE9FE1D0[a13])(&a18, &a11);
  }
  a13 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext22scriptingExecuteScriptERKNS2_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS2_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISP_EENS_10HashTraitsISP_EENS_15HashTableTraitsEEESV_NS_8WallTimeEEEDaOT_OT0_T1_EUlOSF_E_vJS13_EED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FE2A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext22scriptingExecuteScriptERKNS2_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS2_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISP_EENS_10HashTraitsISP_EENS_15HashTableTraitsEEESV_NS_8WallTimeEEEDaOT_OT0_T1_EUlOSF_E_vJS13_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FE2A8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext22scriptingExecuteScriptERKNS2_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS2_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISP_EENS_10HashTraitsISP_EENS_15HashTableTraitsEEESV_NS_8WallTimeEEEDaOT_OT0_T1_EUlOSF_E_vJS13_EE4callES13_(uint64_t a1, void *a2)
{
  v4[0] = *a2;
  uint64_t v2 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4[1] = v2;
  int v5 = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 8));
  return ((uint64_t (*)(char *, void *))off_1EE9FE1D0[v5])(&v6, v4);
}

void sub_199303D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  if (a11 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9FE1D0[a11])(v11 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE2D0;
  WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9FE2D0;
  WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)a1 + 8);

  return WTF::fastFree(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (WebKit::WebExtensionTab::extensionHasPermission(*(WebKit::WebExtensionTab **)(a1 + 24)))
  {
    int v5 = WebKit::WebExtensionTab::webView(*(WebKit::WebExtensionTab **)(a1 + 24));
    if (v5)
    {
      int v6 = *(unsigned __int8 *)(a1 + 104);
      WebKit::WebExtensionDynamicScripts::getSourcePairsForParameters(a1 + 32, v2, (uint64_t)&v18);
      WebKit::WebExtensionDynamicScripts::injectStyleSheets((uint64_t *)&v18, v5, *(void *)(v2 + 160), *(unsigned __int8 *)(a1 + 161), v6 != 0, v2);
      LOBYTE(v16) = 0;
      char v17 = 0;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 168));
      WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v14);
    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)@"scripting.insertCSS()", 0, &cfstr_CouldNotInject.isa, v4, &v16);
      uint64_t v10 = v16;
      CFTypeRef v16 = 0;
      CFTypeRef v18 = v10;
      char v19 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 168));
      if (v19)
      {
        uint64_t v12 = v18;
        CFTypeRef v18 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v11);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
      }
      uint64_t v15 = v16;
      CFTypeRef v16 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v11);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"scripting.insertCSS()", 0, &cfstr_ThisExtensionD.isa, v3, &v16);
    uint64_t v7 = v16;
    CFTypeRef v16 = 0;
    CFTypeRef v18 = v7;
    char v19 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 168));
    if (v19)
    {
      int v9 = v18;
      CFTypeRef v18 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
    }
    uint64_t v13 = v16;
    CFTypeRef v16 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v8);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
}

void sub_199304014(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,std::pair<WTF::String,WTF::URL>>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 48 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WTF::String,WTF::URL>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unsigned int v3 = (WTF::StringImpl **)result;
    do
    {
      uint64_t v4 = v3[1];
      v3[1] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      uint64_t result = *v3;
      NSString *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 6;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0x2222223)
  {
    int v5 = 120 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(120 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x78;
    *(void *)uint64_t v2 = v6;
    uint64_t v7 = *(unsigned int *)(a2 + 12);
    if (v7)
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v9 = 120 * v7;
      do
      {
        uint64_t v6 = WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters(v6, v8) + 120;
        v8 += 120;
        v9 -= 120;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_1993042A0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      int v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        uint64_t v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v6, a2);
          int v5 = *v4;
        }
        WTF *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtension::InjectedContentData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtension::InjectedContentData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtension::InjectedContentData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastMalloc((WTF *)(80 * v5 + 16));
  if (v5)
  {
    uint64_t v8 = (_OWORD *)(result + 64);
    uint64_t v9 = (_DWORD *)MEMORY[0x1E4F30960];
    uint64_t v10 = v5;
    do
    {
      *(v8 - 2) = 0uLL;
      *(v8 - 1) = 0uLL;
      *(v8 - 3) = 0uLL;
      *v9 += 2;
      *((void *)v8 - 2) = v9;
      *((_WORD *)v8 - 3) = 257;
      *uint64_t v8 = 0uLL;
      v8[1] = 0uLL;
      v8 += 5;
      --v10;
    }
    while (v10);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v3;
    while (1)
    {
      uint64_t v13 = (WTF::StringImpl **)(v2 + 80 * v11);
      uint64_t v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            unsigned int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v18 = *((_DWORD *)v14 + 4);
          if (v18 >= 0x100) {
            int v19 = v18 >> 8;
          }
          else {
            int v19 = WTF::StringImpl::hashSlowCase(v14);
          }
          int v20 = 0;
          do
          {
            unsigned int v21 = v19 & v17;
            uint64_t v22 = (WTF::StringImpl **)(v16 + 80 * (v19 & v17));
            int v19 = ++v20 + (v19 & v17);
          }
          while (*v22);
          CFTypeRef v23 = (WebKit::WebExtension::InjectedContentData *)(v16 + 80 * v21 + 8);
          WebKit::WebExtension::InjectedContentData::~InjectedContentData(v23, v7);
          uint64_t v25 = *v22;
          WTF::StringImpl *v22 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2) {
              WTF::StringImpl::destroy(v25, v24);
            }
            else {
              *(_DWORD *)v25 -= 2;
            }
          }
          CFTypeRef v26 = *v13;
          WTF::StringImpl *v13 = 0;
          WTF::StringImpl *v22 = v26;
          WebKit::WebExtension::InjectedContentData::InjectedContentData((uint64_t)v23, (uint64_t *)(v2 + 80 * v11 + 8));
          WebKit::WebExtension::InjectedContentData::~InjectedContentData((WebKit::WebExtension::InjectedContentData *)(v2 + 80 * v11 + 8), v27);
          uint64_t v15 = *v13;
          WTF::StringImpl *v13 = 0;
          if (!v15) {
            goto LABEL_33;
          }
          if (*(_DWORD *)v15 == 2)
          {
LABEL_32:
            WTF::StringImpl::destroy(v15, v7);
            goto LABEL_33;
          }
          *(_DWORD *)v15 -= 2;
        }
        else
        {
          WebKit::WebExtension::InjectedContentData::~InjectedContentData((WebKit::WebExtension::InjectedContentData *)(v2 + 80 * v11 + 8), v7);
          uint64_t v15 = *v13;
          WTF::StringImpl *v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              goto LABEL_32;
            }
            *(_DWORD *)v15 -= 2;
          }
        }
      }
LABEL_33:
      if (++v11 == v12) {
        goto LABEL_36;
      }
    }
  }
  if (v2)
  {
LABEL_36:
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  }
  return result;
}

void sub_1993045D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  int v4 = *v2;
  *uint64_t v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::isStorageMessageAllowed(WebKit::WebExtensionContext *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (!v1 || !*(void *)(v1 + 8)) {
    return 0;
  }
  MEMORY[0x19972EAD0](&v9, @"storage");
  if ((WebKit::WebExtensionContext::permissionState(this, &v9, 0, 2) & 0xFFFFFFFE) == 2)
  {
    BOOL v4 = 1;
  }
  else
  {
    MEMORY[0x19972EAD0](&v8, @"unlimitedStorage");
    BOOL v4 = (WebKit::WebExtensionContext::permissionState(this, &v8, 0, 2) & 0xFFFFFFFE) == 2;
    unsigned int v5 = v8;
    uint64_t v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  uint64_t v6 = v9;
  uint64_t v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return v4;
}

void sub_1993046FC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionContext::storageGet(WebKit::WebExtensionContext *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unsigned int v21 = (WTF::StringImpl *)cf;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"browser.storage.", 17, (uint64_t *)&v21, (uint64_t)".get()", 7, &v22);
  uint64_t v10 = v21;
  unsigned int v21 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = WebKit::WebExtensionContext::storageForType(a1, a3);
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a4, (uint64_t *)&cf);
  uint64_t v12 = WTF::RetainPtr<NSSet>::get((id *)&cf);
  uint64_t v13 = v22;
  if (v22) {
    *(_DWORD *)v22 += 2;
  }
  uint64_t v14 = *a5;
  *a5 = 0;
  uint64_t v15 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
  void *v15 = MEMORY[0x1E4F14398];
  v15[1] = 50331650;
  v15[2] = WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSString *> *,NSString *)#1}::__invoke;
  v15[3] = &WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::descriptor;
  v15[4] = v13;
  v15[5] = v14;
  uint64_t v16 = _Block_copy(v15);

  unsigned int v17 = _Block_copy(v16);
  [v11 getValuesForKeys:v12 completionHandler:v17];

  CFTypeRef v18 = cf;
  CFTypeRef cf = 0;
  if (v18) {
    CFRelease(v18);
  }

  uint64_t result = v22;
  uint64_t v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_199304954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }

  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v17);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_199304A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x199304A08);
  }
  JUMPOUT(0x1993049F0);
}

WTF::StringImpl *WebKit::WebExtensionContext::storageGetBytesInUse(WebKit::WebExtensionContext *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unsigned int v21 = (WTF::StringImpl *)cf;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"browser.storage.", 17, (uint64_t *)&v21, (uint64_t)".getBytesInUse()", 17, &v22);
  uint64_t v10 = v21;
  unsigned int v21 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = WebKit::WebExtensionContext::storageForType(a1, a3);
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a4, (uint64_t *)&cf);
  uint64_t v12 = WTF::RetainPtr<NSSet>::get((id *)&cf);
  uint64_t v13 = v22;
  if (v22) {
    *(_DWORD *)v22 += 2;
  }
  uint64_t v14 = *a5;
  *a5 = 0;
  uint64_t v15 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
  void *v15 = MEMORY[0x1E4F14398];
  v15[1] = 50331650;
  v15[2] = WTF::BlockPtrArc<void ()(unsigned long,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageGetBytesInUse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageGetBytesInUse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0)::{lambda(void *,unsigned long,NSString *)#1}::__invoke;
  v15[3] = &WTF::BlockPtrArc<void ()(unsigned long,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageGetBytesInUse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageGetBytesInUse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0)::descriptor;
  v15[4] = v13;
  v15[5] = v14;
  uint64_t v16 = _Block_copy(v15);

  unsigned int v17 = _Block_copy(v16);
  [v11 getStorageSizeForKeys:v12 completionHandler:v17];

  CFTypeRef v18 = cf;
  CFTypeRef cf = 0;
  if (v18) {
    CFRelease(v18);
  }

  uint64_t result = v22;
  uint64_t v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_199304C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }

  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v17);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_199304CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x199304CD0);
  }
  JUMPOUT(0x199304CB8);
}

WTF::StringImpl *WebKit::WebExtensionContext::storageSet(CFTypeRef *a1, uint64_t a2, int a3, void *a4, uint64_t *a5)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  int v34 = v36;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"browser.storage.", 17, (uint64_t *)&v34, (uint64_t)".set()", 7, &v35);
  uint64_t v10 = v34;
  int v34 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  if (*a4) {
    uint64_t v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v11 = &stru_1EEA10550;
  }
  uint64_t v12 = WebKit::parseJSON(v11, 0, 0);

  uint64_t v13 = WebKit::WebExtensionContext::storageForType((WebKit::WebExtensionContext *)a1, a3);
  uint64_t v30 = a1;
  CFRetain(a1[1]);
  uint64_t v14 = v35;
  if (v35) {
    *(_DWORD *)v35 += 2;
  }
  uint64_t v31 = v14;
  uint64_t v15 = (void **)WTF::RetainPtr<NSDictionary>::RetainPtr(&v32, v12);
  uint64_t v16 = *a5;
  *a5 = 0;
  uint64_t v33 = v16;
  unsigned int v17 = a1;
  CFTypeRef v36 = (WTF::StringImpl *)a1;
  char v39 = a3;
  CFTypeRef v18 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>(v15);

  uint64_t v19 = v33;
  uint64_t v33 = 0;
  CFTypeRef cf = v18;
  uint64_t v41 = v19;
  int v20 = malloc_type_malloc(0x50uLL, 0x10E0040E7D42C43uLL);
  *int v20 = MEMORY[0x1E4F14398];
  v20[1] = 50331650;
  v20[2] = WTF::BlockPtrArc<void ()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)#1}::__invoke;
  v20[3] = &WTF::BlockPtrArc<void ()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
  v20[4] = v30;
  v20[5] = v17;
  uint64_t v37 = 0;
  CFTypeRef v38 = 0;
  v20[6] = v31;
  *((unsigned char *)v20 + 56) = a3;
  unsigned int v21 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&cf);

  uint64_t v22 = v41;
  unsigned char v20[8] = v21;
  v20[9] = v22;
  CFTypeRef v23 = _Block_copy(v20);

  if (cf) {
    CFRelease(cf);
  }
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, v24);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  if (v37) {
    CFRelease(*(CFTypeRef *)(v37 + 8));
  }
  uint64_t v25 = _Block_copy(v23);
  [v13 getStorageSizeForAllKeysIncludingKeyedData:v12 withCompletionHandler:v25];

  uint64_t v26 = v33;
  uint64_t v33 = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  CFTypeRef v27 = v32;
  CFTypeRef v32 = 0;
  if (v27) {
    CFRelease(v27);
  }

  uint64_t result = v35;
  CFTypeRef v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_199305048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, CFTypeRef cf, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v21);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }

  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, v22);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_199305184()
{
  JUMPOUT(0x199305158);
}

void sub_199305190()
{
}

void sub_199305198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a15) {
    JUMPOUT(0x19930517CLL);
  }
  JUMPOUT(0x199305164);
}

WTF::StringImpl *WebKit::WebExtensionContext::storageRemove(CFTypeRef *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v37 = (WTF::StringImpl *)v39;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"browser.storage.", 17, (uint64_t *)&v37, (uint64_t)".remove()", 10, &v38);
  uint64_t v10 = v37;
  uint64_t v37 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = WebKit::WebExtensionContext::storageForType((WebKit::WebExtensionContext *)a1, a3);
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a4, (uint64_t *)&cf);
  uint64_t v12 = WTF::RetainPtr<NSSet>::get((id *)&cf);
  *(void *)&long long v31 = a1;
  CFRetain(a1[1]);
  *((void *)&v31 + 1) = a1;
  uint64_t v13 = v38;
  if (v38) {
    *(_DWORD *)v38 += 2;
  }
  CFTypeRef v32 = v13;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v33, a4);
  char v34 = a3;
  uint64_t v14 = *a5;
  *a5 = 0;
  uint64_t v35 = v14;
  long long v39 = v31;
  CFTypeRef v40 = v32;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v41, (uint64_t)v33);
  char v42 = v34;
  uint64_t v15 = v35;
  uint64_t v35 = 0;
  uint64_t v43 = v15;
  uint64_t v16 = malloc_type_malloc(0x58uLL, 0x10E00404BC05949uLL);
  void *v16 = MEMORY[0x1E4F14398];
  v16[1] = 50331650;
  uint64_t v16[2] = WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSString *> *,NSString *)#1}::__invoke;
  v16[3] = &WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
  *((_OWORD *)v16 + 2) = v39;
  unsigned int v17 = v40;
  *((void *)&v39 + 1) = 0;
  CFTypeRef v40 = 0;
  v16[6] = v17;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v16 + 7), (uint64_t)v41);
  *((unsigned char *)v16 + 72) = v42;
  uint64_t v18 = v43;
  uint64_t v43 = 0;
  v16[10] = v18;
  uint64_t v19 = _Block_copy(v16);

  uint64_t v21 = v43;
  uint64_t v43 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v20);
  CFTypeRef v23 = v40;
  CFTypeRef v40 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v22);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t v24 = *((void *)&v39 + 1);
  *((void *)&v39 + 1) = 0;
  if (v24) {
    CFRelease(*(CFTypeRef *)(v24 + 8));
  }
  uint64_t v25 = _Block_copy(v19);
  [v11 getValuesForKeys:v12 completionHandler:v25];

  uint64_t v27 = v35;
  uint64_t v35 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v26);

  CFTypeRef v28 = cf;
  CFTypeRef cf = 0;
  if (v28) {
    CFRelease(v28);
  }

  uint64_t result = v38;
  CFTypeRef v38 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_199305524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27, v31);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v32);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }

  if (cf) {
    CFRelease(cf);
  }

  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, v33);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_1993056BC()
{
}

void sub_1993056C4()
{
}

void sub_1993056CC()
{
}

void sub_1993056D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!a17) {
    JUMPOUT(0x1993056B4);
  }
  JUMPOUT(0x19930569CLL);
}

WTF::StringImpl *WebKit::WebExtensionContext::storageClear(CFTypeRef *a1, uint64_t a2, int a3, uint64_t *a4)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unsigned int v17 = v18[1];
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"browser.storage.", 17, (uint64_t *)&v17, (uint64_t)".clear()", 9, v18);
  uint64_t v8 = v17;
  unsigned int v17 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = WebKit::WebExtensionContext::storageForType((WebKit::WebExtensionContext *)a1, a3);
  CFRetain(a1[1]);
  uint64_t v10 = v18[0];
  if (v18[0]) {
    *(_DWORD *)v18[0] += 2;
  }
  uint64_t v11 = *a4;
  *a4 = 0;
  uint64_t v12 = malloc_type_malloc(0x48uLL, 0x10E0040924F4500uLL);
  void *v12 = MEMORY[0x1E4F14398];
  v12[1] = 50331650;
  v12[2] = WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSString *> *,NSString *)#1}::__invoke;
  v12[3] = &WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::descriptor;
  v12[4] = a1;
  v12[5] = a1;
  v12[6] = v10;
  *((unsigned char *)v12 + 56) = a3;
  v12[8] = v11;
  uint64_t v13 = _Block_copy(v12);

  uint64_t v14 = _Block_copy(v13);
  [v9 getValuesForKeys:MEMORY[0x1E4F1CBF0] completionHandler:v14];

  uint64_t result = v18[0];
  v18[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1993058C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v15);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_19930596C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x199305964);
  }
  JUMPOUT(0x19930594CLL);
}

uint64_t WebKit::WebExtensionContext::storageSetAccessLevel(WebKit::WebExtensionContext *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  WebKit::WebExtensionContext::setSessionStorageAllowedInContentScripts(a1, a4 == 1);
  return WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a5);
}

void sub_1993059F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::fireStorageChangedEventIfNeeded(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  id v8 = a3;
  char v30 = a4;
  if ([v7 count] || objc_msgSend(v8, "count"))
  {
    uint64_t v9 = [MEMORY[0x1E4F1CA60] dictionary];
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    uint64_t v27[2] = ___ZN6WebKit19WebExtensionContext31fireStorageChangedEventIfNeededEP12NSDictionaryS2_NS_20WebExtensionDataTypeE_block_invoke;
    v27[3] = &unk_1E5813D68;
    id v10 = v7;
    id v28 = v10;
    id v11 = v9;
    id v29 = v11;
    [v8 enumerateKeysAndObjectsUsingBlock:v27];
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = ___ZN6WebKit19WebExtensionContext31fireStorageChangedEventIfNeededEP12NSDictionaryS2_NS_20WebExtensionDataTypeE_block_invoke_2;
    void v24[3] = &unk_1E5813D68;
    id v25 = v8;
    id v12 = v11;
    id v26 = v12;
    [v10 enumerateKeysAndObjectsUsingBlock:v24];
    if ([v12 count])
    {
      uint64_t v13 = WebKit::encodeJSONString(v12, 0, 0);
      MEMORY[0x19972EAD0](&v23, v13);

      char v21 = 1;
      v22[0] = (unsigned __int8 *)&v23;
      v22[1] = (unsigned __int8 *)&v30;
      uint64_t v22[2] = (unsigned __int8 *)&v21;
      WebKit::WebExtensionContext::processes((void *)a1, 31, 1, (uint64_t *)&v31);
      WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchStorageChangedEvent>((uint64_t *)a1, &v31, (uint64_t)v22);
      if (v31) {
        WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v31, v14);
      }
      char v21 = 31;
      WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)v22, &v21, 1);
      CFRetain(*(CFTypeRef *)(a1 + 8));
      uint64_t v15 = v23;
      if (v23) {
        *(_DWORD *)v23 += 2;
      }
      char v16 = v30;
      uint64_t v17 = WTF::fastMalloc((WTF *)0x28);
      *(void *)uint64_t v17 = &unk_1EE9FE418;
      *(void *)(v17 + 8) = a1;
      *(void *)(v17 + 16) = a1;
      *(void *)(v17 + 24) = v15;
      *(unsigned char *)(v17 + 32) = v16;
      long long v31 = (uint64_t *)v17;
      WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, v22, (uint64_t *)&v31);
      uint64_t v19 = v31;
      long long v31 = 0;
      if (v19) {
        (*(void (**)(uint64_t *))(*v19 + 8))(v19);
      }
      if (v22[0]) {
        WTF::fastFree((WTF *)(v22[0] - 16), v18);
      }
      int v20 = v23;
      CFTypeRef v23 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v18);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
  }
}

void sub_199305D10(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26)
{
  uint64_t v31 = *v29;
  uint64_t *v29 = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  if (a11) {
    WTF::fastFree((WTF *)(a11 - 16), a2);
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void ___ZN6WebKit19WebExtensionContext31fireStorageChangedEventIfNeededEP12NSDictionaryS2_NS_20WebExtensionDataTypeE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  id v8 = v7;
  if (!v7 || ([v7 isEqualToString:v6] & 1) == 0)
  {
    uint64_t v9 = WebKit::parseJSON(v6, 1, 0);
    id v10 = v9;
    if (v9)
    {
      id v11 = v9;
    }
    else
    {
      id v11 = [MEMORY[0x1E4F1CA98] null];
    }
    id v12 = v11;

    if (v8
      && ((WebKit::parseJSON(v8, 1, 0), (uint64_t v13 = objc_claimAutoreleasedReturnValue()) != 0)
       || ([MEMORY[0x1E4F1CA98] null], (uint64_t v13 = objc_claimAutoreleasedReturnValue()) != 0)))
    {
      v17[0] = @"oldValue";
      v17[1] = @"newValue";
      v18[0] = v13;
      v18[1] = v12;
      uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:v17 count:2];
    }
    else
    {
      uint64_t v15 = @"newValue";
      char v16 = v12;
      uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v16 forKeys:&v15 count:1];
      uint64_t v13 = 0;
    }
    [*(id *)(a1 + 40) setObject:v14 forKeyedSubscript:v5];
  }
}

void sub_199305FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN6WebKit19WebExtensionContext31fireStorageChangedEventIfNeededEP12NSDictionaryS2_NS_20WebExtensionDataTypeE_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];

  if (!v7)
  {
    id v11 = @"oldValue";
    id v8 = WebKit::parseJSON(v6, 1, 0);
    uint64_t v9 = v8;
    if (!v8)
    {
      uint64_t v9 = [MEMORY[0x1E4F1CA98] null];
    }
    v12[0] = v9;
    id v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:&v11 count:1];
    [*(id *)(a1 + 40) setObject:v10 forKeyedSubscript:v5];

    if (!v8) {
  }
    }
}

void sub_19930618C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *(WTF::StringImpl **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSString *> *,NSString *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  id v8 = (uint64_t *)(a1 + 40);
  if (v7)
  {
    if (*(void *)(a1 + 32)) {
      uint64_t v9 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v9 = (WebKit *)&stru_1EEA10550;
    }
    WebKit::toWebExtensionError<>(v9, 0, v7, v6, &v14);
    id v10 = v14;
    uint64_t v14 = 0;
    uint64_t v15 = v10;
    int v16 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(v8);
  }
  else
  {
    WebKit::encodeJSONString(v5, 0, 0);
    uint64_t v9 = (WebKit *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19972EAD0](&v14, v9);
    id v12 = v14;
    uint64_t v14 = 0;
    uint64_t v15 = v12;
    int v16 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(v8);
  }
  if (v16 != -1) {
    ((void (*)(char *, WTF::StringImpl **))off_1EE9FE308[v16])(&v17, &v15);
  }
  int v16 = -1;
  uint64_t v13 = v14;
  uint64_t v14 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
}

void sub_199306390(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  if (a12 != -1) {
    ((void (*)(char *, char *))off_1EE9FE308[a12])(&a17, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::BlockPtrArc<void ()(unsigned long,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageGetBytesInUse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageGetBytesInUse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *(WTF::StringImpl **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WTF::BlockPtrArc<void ()(unsigned long,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageGetBytesInUse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageGetBytesInUse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)> &&)::$_0)::{lambda(void *,unsigned long,NSString *)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2, void *a3)
{
  id v6 = a3;
  if (v6)
  {
    if (*(void *)(a1 + 32)) {
      id v7 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      id v7 = (WebKit *)&stru_1EEA10550;
    }
    WebKit::toWebExtensionError<>(v7, 0, v6, v5, &v11);
    id v8 = v11;
    id v11 = 0;
    id v12 = v8;
    int v13 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    if (v13 != -1) {
      ((void (*)(char *, WTF::StringImpl **))off_1EE9FE338[v13])(&v14, &v12);
    }
    int v13 = -1;
    id v10 = v11;
    id v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  else
  {
    id v12 = a2;
    int v13 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::operator()((uint64_t *)(a1 + 40));
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9FE338[v13])(&v11, &v12);
  }
}

void sub_1993065C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  if (a12 != -1) {
    ((void (*)(WTF::StringImpl **, char *))off_1EE9FE338[a12])(&a9, &a10);
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned long,WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1993066E0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  BOOL v4 = (const void *)a1[8];
  a1[8] = 0;
  if (v4) {
    CFRelease(v4);
  }
  id v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[5];
  a1[5] = 0;
  if (v6)
  {
    id v7 = *(const void **)(v6 + 8);
    CFRelease(v7);
  }
}

void WTF::BlockPtrArc<void ()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)#1}::__invoke(uint64_t a1, unint64_t a2, unint64_t a3, void *a4, void *a5)
{
  id v9 = a4;
  id v11 = a5;
  if (v11)
  {
    if (*(void *)(a1 + 48)) {
      id v12 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      id v12 = (WebKit *)&stru_1EEA10550;
    }
    WebKit::toWebExtensionError<>(v12, 0, v11, v10, &v48);
    int v13 = v48;
    uint64_t v48 = 0;
    int v55 = v13;
    LOBYTE(v56) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 72));
LABEL_14:
    if ((_BYTE)v56)
    {
      int v20 = v55;
      int v55 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v14);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    char v21 = v48;
    uint64_t v48 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v14);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    goto LABEL_50;
  }
  uint64_t v15 = *(CFTypeRef **)(a1 + 32);
  if (WebKit::WebExtensionContext::quotaForStorageType((WTF::StringImpl *)v15, *(unsigned __int8 *)(a1 + 56)) < a2)
  {
    if (*(void *)(a1 + 48)) {
      id v12 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      id v12 = (WebKit *)&stru_1EEA10550;
    }
    WebKit::toWebExtensionError<>(v12, 0, &cfstr_ExceededStorag.isa, v16, &v48);
    char v17 = v48;
    uint64_t v48 = 0;
    int v55 = v17;
    LOBYTE(v56) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 72));
    goto LABEL_14;
  }
  int v18 = *(unsigned __int8 *)(a1 + 56);
  if (a3 >= 0x201 && v18 == 4)
  {
    if (*(void *)(a1 + 48)) {
      id v12 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      id v12 = (WebKit *)&stru_1EEA10550;
    }
    WebKit::toWebExtensionError<>(v12, 0, &cfstr_ExceededMaximu_1.isa, v16, &v48);
    uint64_t v19 = v48;
    uint64_t v48 = 0;
    int v55 = v19;
    LOBYTE(v56) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 72));
    goto LABEL_14;
  }
  WebKit::WebExtensionContext::storageForType((WebKit::WebExtensionContext *)v15, v18);
  uint64_t v47 = (WebKit *)objc_claimAutoreleasedReturnValue();
  uint64_t v22 = WTF::RetainPtr<NSSet>::get((id *)(a1 + 64));
  uint64_t v48 = (WTF::StringImpl *)v15;
  CFRetain(v15[1]);
  uint64_t v49 = v15;
  CFTypeRef v23 = *(WTF::StringImpl **)(a1 + 48);
  if (v23) {
    *(_DWORD *)v23 += 2;
  }
  uint64_t v50 = v23;
  uint64_t v24 = WTF::RetainPtr<NSSet>::get((id *)(a1 + 64));
  WTF::RetainPtr<NSDictionary>::RetainPtr(&v51, v24);

  char v52 = *(unsigned char *)(a1 + 56);
  id v25 = v9;
  id v26 = v25;
  CFTypeRef v53 = v25;
  if (v25) {
    CFRetain(v25);
  }

  uint64_t v27 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  id v28 = v48;
  id v29 = v49;
  uint64_t v54 = v27;
  int v55 = v48;
  char v30 = v50;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v31 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v51);

  CFTypeRef v58 = v31;
  char v59 = v52;
  CFTypeRef v32 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v53);

  uint64_t v33 = v54;
  uint64_t v54 = 0;
  CFTypeRef cf = v32;
  uint64_t v61 = v33;
  char v34 = malloc_type_malloc(0x58uLL, 0x10E0040F24C6D53uLL);
  *char v34 = MEMORY[0x1E4F14398];
  v34[1] = 50331650;
  uint64_t v34[2] = WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSArray *,NSString *)#1}>(WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSArray *,NSString *)#1})::{lambda(void *,NSArray *,NSString *)#1}::__invoke;
  v34[3] = &WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSArray *,NSString *)#1}>(WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSArray *,NSString *)#1})::descriptor;
  v34[4] = v28;
  v34[5] = v29;
  uint64_t v56 = 0;
  char v57 = 0;
  v34[6] = v30;
  uint64_t v35 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v58);

  v34[7] = v35;
  *((unsigned char *)v34 + 64) = v59;
  CFTypeRef v36 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&cf);

  uint64_t v37 = v61;
  v34[9] = v36;
  v34[10] = v37;
  CFTypeRef v38 = _Block_copy(v34);

  if (cf) {
    CFRelease(cf);
  }
  id v12 = v47;
  if (v58) {
    CFRelease(v58);
  }
  if (v57)
  {
    if (*(_DWORD *)v57 == 2) {
      WTF::StringImpl::destroy(v57, v39);
    }
    else {
      *(_DWORD *)v57 -= 2;
    }
  }
  if (v56) {
    CFRelease(*(CFTypeRef *)(v56 + 8));
  }
  CFTypeRef v40 = _Block_copy(v38);
  [(WebKit *)v47 setKeyedData:v22 completionHandler:v40];

  uint64_t v42 = v54;
  uint64_t v54 = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  CFTypeRef v43 = v53;
  CFTypeRef v53 = 0;
  if (v43) {
    CFRelease(v43);
  }
  CFTypeRef v44 = v51;
  CFTypeRef v51 = 0;
  if (v44) {
    CFRelease(v44);
  }
  uint64_t v45 = v50;
  uint64_t v50 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v41);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = v49;
  uint64_t v49 = 0;
  if (v46) {
    CFRelease(v46[1]);
  }

LABEL_50:
}

void sub_199306C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, CFTypeRef cf, uint64_t a15, CFTypeRef a16, uint64_t a17, WTF::StringImpl *a18, char a19)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, v24);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a12) {
    CFRelease(*(CFTypeRef *)(a12 + 8));
  }

  _Unwind_Resume(a1);
}

id WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>(void **a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  return v1;
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSArray *,NSString *)#1}>(WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSArray *,NSString *)#1})::{lambda(void const*)#1}::__invoke(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[10];
  a1[10] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  BOOL v4 = (const void *)a1[9];
  a1[9] = 0;
  if (v4) {
    CFRelease(v4);
  }
  id v5 = (const void *)a1[7];
  a1[7] = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = a1[5];
  a1[5] = 0;
  if (v7)
  {
    id v8 = *(const void **)(v7 + 8);
    CFRelease(v8);
  }
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSArray *,NSString *)#1}>(WebKit::WebExtensionContext::storageSet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(unsigned long,unsigned long,NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSArray *,NSString *)#1})::{lambda(void *,NSArray *,NSString *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v7 = a3;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v7)
  {
    if (*(void *)(a1 + 48)) {
      id v9 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      id v9 = (WebKit *)&stru_1EEA10550;
    }
    WebKit::toWebExtensionError<>(v9, 0, v7, v6, &v21);
    id v10 = v21;
    char v21 = 0;
    uint64_t v22 = v10;
    char v23 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 80));
    if (v23)
    {
      id v12 = v22;
      uint64_t v22 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v11);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    int v13 = v21;
    char v21 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v11);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  else
  {
    LOBYTE(v22) = 0;
    char v23 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 80));
  }
  if ([(NSDictionary *)v5 count])
  {
    char v14 = WTF::RetainPtr<NSSet>::get((id *)(a1 + 56));
    uint64_t v15 = [(NSDictionary *)v5 count];
    int v16 = [v14 allKeys];
    uint64_t v17 = [v16 count];

    if (v15 != v17)
    {
      uint64_t v19 = WebKit::dictionaryWithKeys((WebKit *)v14, v5, v18);

      char v14 = (void *)v19;
    }
    int v20 = *(void **)(a1 + 72);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v20);
    objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionContext::fireStorageChangedEventIfNeeded(v8, v20, v14, *(unsigned char *)(a1 + 64));
  }
}

void sub_199307120(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[10];
  a1[10] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 7), a2);
  id v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[5];
  a1[5] = 0;
  if (v6)
  {
    uint64_t v7 = *(const void **)(v6 + 8);
    CFRelease(v7);
  }
}

void WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSString *> *,NSString *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v7 = a3;
  if (v7)
  {
    if (*(void *)(a1 + 48)) {
      uint64_t v8 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v8 = (WebKit *)&stru_1EEA10550;
    }
    WebKit::toWebExtensionError<>(v8, 0, v7, v6, &v30);
    id v9 = v30;
    char v30 = 0;
    uint64_t v37 = v9;
    LOBYTE(v38) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 80));
    if ((_BYTE)v38)
    {
      id v11 = v37;
      uint64_t v37 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
    id v25 = v30;
    char v30 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v10);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  else
  {
    id v12 = *(CFTypeRef **)(a1 + 32);
    WebKit::WebExtensionContext::storageForType((WebKit::WebExtensionContext *)v12, *(unsigned __int8 *)(a1 + 72));
    id v29 = (WebKit *)objc_claimAutoreleasedReturnValue();
    WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1 + 56, (uint64_t *)&v36);
    int v13 = WTF::RetainPtr<NSSet>::get((id *)&v36);
    char v30 = (WTF::StringImpl *)v12;
    CFRetain(v12[1]);
    char v14 = *(_DWORD **)(a1 + 48);
    if (v14) {
      *v14 += 2;
    }
    char v15 = *(unsigned char *)(a1 + 72);
    char v33 = v15;
    id v16 = v5;
    uint64_t v17 = v16;
    CFTypeRef v34 = v16;
    if (v16) {
      CFRetain(v16);
    }

    uint64_t v18 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = 0;
    uint64_t v35 = v18;
    uint64_t v37 = (WTF::StringImpl *)v12;
    uint64_t v31 = 0;
    CFTypeRef v32 = 0;
    char v40 = v15;
    uint64_t v19 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v34);

    CFTypeRef cf = v19;
    uint64_t v42 = v35;
    int v20 = malloc_type_malloc(0x50uLL, 0x10E0040E7D42C43uLL);
    *int v20 = MEMORY[0x1E4F14398];
    v20[1] = 50331650;
    v20[2] = WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1})::{lambda(void *,NSString *)#1}::__invoke;
    v20[3] = &WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1})::descriptor;
    v20[4] = v12;
    v20[5] = v12;
    uint64_t v38 = 0;
    long long v39 = 0;
    v20[6] = v14;
    *((unsigned char *)v20 + 56) = v15;
    char v21 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&cf);

    uint64_t v22 = v42;
    unsigned char v20[8] = v21;
    v20[9] = v22;
    char v23 = _Block_copy(v20);

    uint64_t v8 = v29;
    if (cf) {
      CFRelease(cf);
    }
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, v24);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
    if (v38) {
      CFRelease(*(CFTypeRef *)(v38 + 8));
    }
    id v26 = _Block_copy(v23);
    [(WebKit *)v29 deleteValuesForKeys:v13 completionHandler:v26];

    if (v34) {
      CFRelease(v34);
    }
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v27);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
    if (v31) {
      CFRelease(*(CFTypeRef *)(v31 + 8));
    }

    CFTypeRef v28 = v36;
    CFTypeRef v36 = 0;
    if (v28) {
      CFRelease(v28);
    }
  }
}

void sub_1993075C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, WTF::StringImpl *a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, CFTypeRef a14, uint64_t a15, CFTypeRef cf, WTF::StringImpl *a17, char a18)
{
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v25);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  CFRelease(*(CFTypeRef *)(v21 + 8));

  if (cf) {
    CFRelease(cf);
  }

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1})::{lambda(void const*)#1}::__invoke(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  BOOL v4 = (const void *)a1[8];
  a1[8] = 0;
  if (v4) {
    CFRelease(v4);
  }
  id v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[5];
  a1[5] = 0;
  if (v6)
  {
    uint64_t v7 = *(const void **)(v6 + 8);
    CFRelease(v7);
  }
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::storageRemove(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1})::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  BOOL v4 = a2;
  if (v4)
  {
    if (*(void *)(a1 + 48)) {
      id v5 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      id v5 = (WebKit *)&stru_1EEA10550;
    }
    WebKit::toWebExtensionError<>(v5, 0, v4, v3, &v12);
    uint64_t v6 = v12;
    id v12 = 0;
    int v13 = v6;
    char v14 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 72));
    if (v14)
    {
      uint64_t v8 = v13;
      int v13 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
    }
    id v11 = v12;
    id v12 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v7);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(a1 + 64);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v10);
    objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionContext::fireStorageChangedEventIfNeeded(v9, v10, 0, *(unsigned char *)(a1 + 56));

    LOBYTE(v13) = 0;
    char v14 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 72));
  }
}

void sub_19930796C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[8];
  a1[8] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  BOOL v4 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[5];
  a1[5] = 0;
  if (v5)
  {
    uint64_t v6 = *(const void **)(v5 + 8);
    CFRelease(v6);
  }
}

void WTF::BlockPtrArc<void ()(NSDictionary<NSString *,NSString *> *,NSString *)>::fromCallable<WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSString *> *,NSString *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v7 = a3;
  if (v7)
  {
    if (*(void *)(a1 + 48)) {
      uint64_t v8 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v8 = (WebKit *)&stru_1EEA10550;
    }
    WebKit::toWebExtensionError<>(v8, 0, v7, v6, &v25);
    uint64_t v9 = v25;
    id v25 = 0;
    uint64_t v31 = v9;
    LOBYTE(v32) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 64));
    if ((_BYTE)v32)
    {
      id v11 = v31;
      uint64_t v31 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
    uint64_t v22 = v25;
    id v25 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v10);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  else
  {
    id v12 = *(CFTypeRef **)(a1 + 32);
    WebKit::WebExtensionContext::storageForType((WebKit::WebExtensionContext *)v12, *(unsigned __int8 *)(a1 + 56));
    uint64_t v8 = (WebKit *)objc_claimAutoreleasedReturnValue();
    id v25 = (WTF::StringImpl *)v12;
    CFRetain(v12[1]);
    int v13 = *(_DWORD **)(a1 + 48);
    if (v13) {
      *v13 += 2;
    }
    id v14 = v5;
    char v15 = v14;
    CFTypeRef v28 = v14;
    if (v14) {
      CFRetain(v14);
    }

    char v29 = *(unsigned char *)(a1 + 56);
    uint64_t v16 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = 0;
    uint64_t v30 = v16;
    uint64_t v31 = (WTF::StringImpl *)v12;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v17 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v28);

    CFTypeRef cf = v17;
    char v35 = v29;
    uint64_t v36 = v30;
    uint64_t v18 = malloc_type_malloc(0x50uLL, 0x10E0040064E97B8uLL);
    void *v18 = MEMORY[0x1E4F14398];
    v18[1] = 50331650;
    v18[2] = WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1})::{lambda(void *,NSString *)#1}::__invoke;
    void v18[3] = &WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1})::descriptor;
    v18[4] = v12;
    v18[5] = v12;
    uint64_t v32 = 0;
    char v33 = 0;
    v18[6] = v13;
    uint64_t v19 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&cf);

    v18[7] = v19;
    *((unsigned char *)v18 + 64) = v35;
    v18[9] = v36;
    int v20 = _Block_copy(v18);

    if (cf) {
      CFRelease(cf);
    }
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, v21);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
    if (v32) {
      CFRelease(*(CFTypeRef *)(v32 + 8));
    }
    char v23 = _Block_copy(v20);
    -[WebKit deleteDatabaseWithCompletionHandler:](v8, "deleteDatabaseWithCompletionHandler:", v23, v25);

    if (v28) {
      CFRelease(v28);
    }
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, v24);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    if (v26) {
      CFRelease(*(CFTypeRef *)(v26 + 8));
    }
  }
}

void sub_199307DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, CFTypeRef cf, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16)
{
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v23);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  CFRelease(*(CFTypeRef *)(v19 + 8));

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1})::{lambda(void const*)#1}::__invoke(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  BOOL v4 = (const void *)a1[7];
  a1[7] = 0;
  if (v4) {
    CFRelease(v4);
  }
  id v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[5];
  a1[5] = 0;
  if (v6)
  {
    uint64_t v7 = *(const void **)(v6 + 8);
    CFRelease(v7);
  }
}

void WTF::BlockPtrArc<void ()(NSString *)>::fromCallable<WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1}>(WebKit::WebExtensionContext::storageClear(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSString *> *,NSString *)::{lambda(NSString *)#1})::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  BOOL v4 = a2;
  if (v4)
  {
    if (*(void *)(a1 + 48)) {
      id v5 = (WebKit *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      id v5 = (WebKit *)&stru_1EEA10550;
    }
    WebKit::toWebExtensionError<>(v5, 0, v4, v3, &v12);
    uint64_t v6 = v12;
    id v12 = 0;
    int v13 = v6;
    char v14 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 72));
    if (v14)
    {
      uint64_t v8 = v13;
      int v13 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
    }
    id v11 = v12;
    id v12 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v7);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(a1 + 56);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v10);
    objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionContext::fireStorageChangedEventIfNeeded(v9, v10, 0, *(unsigned char *)(a1 + 64));

    LOBYTE(v13) = 0;
    char v14 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 72));
  }
}

void sub_19930812C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchStorageChangedEvent>(uint64_t *result, void **a2, uint64_t a3)
{
  int v20 = result;
  uint64_t v3 = result[9];
  if (v3 && *(void *)(v3 + 8))
  {
    uint64_t result = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a2);
    uint64_t v6 = result;
    uint64_t v8 = v7;
    uint64_t v9 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
    if ((uint64_t *)v9 != result)
    {
      do
      {
        uint64_t v10 = *v6;
        id v11 = *(uint64_t **)a3;
        id v12 = *(char **)(a3 + 8);
        int v13 = *(char **)(a3 + 16);
        uint64_t v14 = v20[4];
        char v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)char v15 = 1612;
        *((void *)v15 + 1) = v14;
        *((void *)v15 + 66) = (char *)v15 + 16;
        *((void *)v15 + 67) = 512;
        *((void *)v15 + 68) = 0;
        *((void *)v15 + 70) = 0;
        *((void *)v15 + 69) = 0;
        IPC::Encoder::encodeHeader(v15);
        char v23 = v15;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v15, v11);
        IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v15, *v12);
        IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::encode<IPC::Encoder>(v15, *v13);
        LOBYTE(v21) = 0;
        char v22 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v23, 0, (uint64_t)&v21, 1);
        if (v22)
        {
          uint64_t v17 = v21;
          uint64_t v21 = 0;
          if (v17) {
            (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          }
        }
        uint64_t result = (uint64_t *)v23;
        char v23 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)result, v16);
          uint64_t result = (uint64_t *)WTF::fastFree(v18, v19);
        }
        while (++v6 != v8)
        {
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_16;
          }
        }
        uint64_t v6 = v8;
LABEL_16:
        ;
      }
      while (v6 != (uint64_t *)v9);
    }
  }
  return result;
}

void sub_199308380(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireStorageChangedEventIfNeeded(NSDictionary *,NSDictionary *,WebKit::WebExtensionDataType)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FE418;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireStorageChangedEventIfNeeded(NSDictionary *,NSDictionary *,WebKit::WebExtensionDataType)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FE418;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireStorageChangedEventIfNeeded(NSDictionary *,NSDictionary *,WebKit::WebExtensionDataType)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  char v4 = 0;
  v5[0] = a1 + 24;
  v5[1] = a1 + 32;
  v5[2] = &v4;
  WebKit::WebExtensionContext::processes(v1, 31, 0, (uint64_t *)&v6);
  WebKit::WebExtensionContext::sendToProcesses<Messages::WebExtensionContextProxy::DispatchStorageChangedEvent>(v1, &v6, (uint64_t)v5);
  uint64_t result = v6;
  if (v6) {
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v6, v2);
  }
  return result;
}

void sub_199308554(_Unwind_Exception *exception_object, void *a2)
{
  char v4 = *(uint64_t **)(v2 - 24);
  if (v4) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::tabsCreate(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 72);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 8);
    if (v11) {
      id v12 = (id *)(v11 - 16);
    }
    else {
      id v12 = 0;
    }
  }
  else
  {
    id v12 = 0;
  }
  int v13 = WebKit::WebExtensionController::delegate(v12);
  if (objc_opt_respondsToSelector())
  {
    id v15 = [[WKWebExtensionTabConfiguration alloc] _init];
    uint64_t v16 = v15;
    if (*(unsigned char *)(a4 + 153)) {
      BOOL v17 = *(unsigned char *)(a4 + 152) == 0;
    }
    else {
      BOOL v17 = 0;
    }
    uint64_t v18 = !v17;
    [v15 _setShouldBeActive:v18];
    if ([v16 shouldBeActive])
    {
      uint64_t v19 = 1;
    }
    else
    {
      if (*(unsigned char *)(a4 + 155)) {
        BOOL v23 = *(unsigned char *)(a4 + 154) == 0;
      }
      else {
        BOOL v23 = 1;
      }
      uint64_t v19 = !v23;
    }
    [v16 _setShouldAddToSelection:v19];
    if (*(unsigned char *)(a4 + 157)) {
      BOOL v24 = *(unsigned char *)(a4 + 156) == 0;
    }
    else {
      BOOL v24 = 1;
    }
    uint64_t v25 = !v24;
    [v16 _setShouldBePinned:v25];
    if (*(unsigned char *)(a4 + 161)) {
      BOOL v26 = *(unsigned char *)(a4 + 160) == 0;
    }
    else {
      BOOL v26 = 1;
    }
    uint64_t v27 = !v26;
    [v16 _setShouldBeMuted:v27];
    if (*(unsigned char *)(a4 + 169)) {
      BOOL v28 = *(unsigned char *)(a4 + 168) == 0;
    }
    else {
      BOOL v28 = 1;
    }
    uint64_t v29 = !v28;
    [v16 _setShouldReaderModeBeActive:v29];
    if (*(unsigned char *)(a4 + 88)) {
      uint64_t v30 = *(void *)(a4 + 80);
    }
    else {
      uint64_t v30 = -3;
    }
    WebKit::WebExtensionContext::getWindow(a1, v30, a2, a3, 0, &v63);
    if (*(unsigned char *)(a4 + 88))
    {
      if (!v63)
      {
        WebKit::toWebExtensionError<>((WebKit *)@"tabs.create()", 0, &cfstr_WindowNotFound.isa, v31, &v61);
        uint64_t v32 = v61;
        uint64_t v61 = 0;
        v65[0] = v32;
        int v66 = 1;
        WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()(a5);
        if (v66 != -1) {
          ((void (*)(id **, void *))off_1EE9FE430[v66])(&v60, v65);
        }
        int v66 = -1;
        CFTypeRef v34 = v61;
        uint64_t v61 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2) {
            WTF::StringImpl::destroy(v34, v33);
          }
          else {
            *(_DWORD *)v34 -= 2;
          }
        }
LABEL_89:
        uint64_t v58 = v63;
        uint64_t v63 = 0;
        if (v58) {
          WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v58);
        }

        goto LABEL_92;
      }
    }
    else if (!v63)
    {
      int v36 = 0;
      id WeakRetained = 0;
      goto LABEL_56;
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v63 + 32));
    int v36 = 1;
LABEL_56:
    [v16 _setWindow:WeakRetained];
    if (v36) {

    }
    uint64_t v37 = v63;
    if (v63)
    {
      WebKit::WebExtensionWindow::tabs(v63, 0, (uint64_t *)&v61);
      uint64_t v38 = v62;
    }
    else
    {
      uint64_t v38 = 0;
    }
    if (*(unsigned char *)(a4 + 104)) {
      uint64_t v39 = *(void *)(a4 + 96);
    }
    else {
      uint64_t v39 = v38;
    }
    [v16 _setIndex:v39];
    if (v37) {
      WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v40);
    }
    if (!*(unsigned char *)(a4 + 144)) {
      goto LABEL_95;
    }
    WebKit::WebExtensionContext::getTab((uint64_t *)a1, *(void *)(a4 + 136), 0, (WebKit::WebExtensionTab **)&v60);
    uint64_t v42 = v60;
    if (v60)
    {
      id v43 = objc_loadWeakRetained(v60 + 4);
      [v16 _setParentTab:v43];
    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)@"tabs.create()", 0, &cfstr_ParentTabNotFo.isa, v41, &v59);
      CFTypeRef v44 = v59;
      char v59 = 0;
      v65[0] = v44;
      int v66 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()(a5);
      if (v66 != -1) {
        ((void (*)(char *, void *))off_1EE9FE430[v66])(&v64, v65);
      }
      int v66 = -1;
      uint64_t v46 = v59;
      char v59 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2) {
          WTF::StringImpl::destroy(v46, v45);
        }
        else {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    uint64_t v47 = (WebKit::WebExtensionTab *)v60;
    uint64_t v60 = 0;
    if (v47) {
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v47);
    }
    if (v42)
    {
LABEL_95:
      if (*(unsigned char *)(a4 + 56))
      {
        uint64_t v48 = WTF::URL::operator NSURL *();
        [v16 _setURL:v48];
      }
      uint64_t v49 = *(void *)(a1 + 72);
      if (v49)
      {
        uint64_t v50 = *(void *)(v49 + 8);
        if (v50) {
          CFTypeRef v51 = (id *)(v50 - 16);
        }
        else {
          CFTypeRef v51 = 0;
        }
      }
      else
      {
        CFTypeRef v51 = 0;
      }
      char v52 = WebKit::WebExtensionAction::wrapper(v51);
      CFTypeRef v53 = WebKit::WebExtensionAction::wrapper((id *)a1);
      CFRetain(*(CFTypeRef *)(a1 + 8));
      uint64_t v54 = *a5;
      *a5 = 0;
      int v55 = malloc_type_malloc(0x38uLL, 0x10E004099C88F60uLL);
      *int v55 = MEMORY[0x1E4F14398];
      v55[1] = 50331650;
      void v55[2] = WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::tabsCreate(std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::__1<std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsCreate(std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::__1<std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String> &&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto17WKWebExtensionTab},NSError)#1}::__invoke;
      v55[3] = &WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::tabsCreate(std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::__1<std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsCreate(std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::__1<std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String> &&)> &&)::$_0)::descriptor;
      v55[4] = a1;
      v55[5] = a1;
      v55[6] = v54;
      uint64_t v56 = _Block_copy(v55);

      char v57 = _Block_copy(v56);
      [v13 webExtensionController:v52 openNewTabUsingConfiguration:v16 forExtensionContext:v53 completionHandler:v57];
    }
    goto LABEL_89;
  }
  WebKit::toWebExtensionError<>((WebKit *)@"tabs.create()", 0, &cfstr_ItIsNotImpleme.isa, v14, &v61);
  int v20 = v61;
  uint64_t v61 = 0;
  v65[0] = v20;
  int v66 = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()(a5);
  if (v66 != -1) {
    ((void (*)(uint64_t *, void *))off_1EE9FE430[v66])(&v63, v65);
  }
  int v66 = -1;
  char v22 = v61;
  uint64_t v61 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v21);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
LABEL_92:
}

void sub_199308AD8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42)
{
  if (a42 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FE430[a42])(&a17, v44);
  }
  a42 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a10);
  }
  if (a13) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(a13);
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_199308D78(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsUpdate(uint64_t a1, uint64_t a2, uint64_t a3, char a4, long long *a5, uint64_t *a6)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  WebKit::WebExtensionContext::getTab((uint64_t *)a1, a2, a3, a4, 1, 0, &v38);
  uint64_t v10 = v38;
  if (v38)
  {
    CFRetain(*(CFTypeRef *)(a1 + 8));
    ++*(_DWORD *)v10;
    long long v36 = *a5;
    int v11 = *((unsigned __int8 *)a5 + 56);
    if (*((unsigned char *)a5 + 56))
    {
      id v12 = (WTF::StringImpl *)*((void *)a5 + 2);
      if (v12) {
        *(_DWORD *)v12 += 2;
      }
      long long v13 = *(long long *)((char *)a5 + 40);
      *(_OWORD *)CFTypeRef v34 = *(long long *)((char *)a5 + 24);
      long long v35 = v13;
    }
    else
    {
      id v12 = 0;
    }
    int v17 = *((unsigned __int8 *)a5 + 72);
    if (*((unsigned char *)a5 + 72))
    {
      uint64_t v18 = (WTF::StringImpl *)*((void *)a5 + 8);
      if (v18) {
        *(_DWORD *)v18 += 2;
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    long long v19 = a5[8];
    long long v43 = a5[7];
    long long v44 = v19;
    v45[0] = a5[9];
    *(_OWORD *)((char *)v45 + 10) = *(long long *)((char *)a5 + 154);
    long long v20 = a5[6];
    long long v41 = a5[5];
    long long v42 = v20;
    uint64_t v21 = *a6;
    *a6 = 0;
    uint64_t v22 = WTF::fastMalloc((WTF *)0xE0);
    *(void *)uint64_t v22 = &unk_1EE9FE4B0;
    *(void *)(v22 + 8) = v10;
    *(_OWORD *)(v22 + 16) = v36;
    *(unsigned char *)(v22 + 32) = 0;
    *(unsigned char *)(v22 + 72) = 0;
    if (v11)
    {
      if (v12) {
        *(_DWORD *)v12 += 2;
      }
      *(void *)(v22 + 32) = v12;
      long long v23 = v35;
      *(_OWORD *)(v22 + 40) = *(_OWORD *)v34;
      *(_OWORD *)(v22 + 56) = v23;
      *(unsigned char *)(v22 + 72) = 1;
    }
    *(unsigned char *)(v22 + 80) = 0;
    *(unsigned char *)(v22 + 88) = 0;
    if (v17)
    {
      if (v18) {
        *(_DWORD *)v18 += 2;
      }
      *(void *)(v22 + 80) = v18;
      *(unsigned char *)(v22 + 88) = 1;
    }
    long long v24 = v42;
    *(_OWORD *)(v22 + 96) = v41;
    *(_OWORD *)(v22 + 112) = v24;
    *(_OWORD *)(v22 + 170) = *(_OWORD *)((char *)v45 + 10);
    long long v25 = v45[0];
    long long v26 = v43;
    *(_OWORD *)(v22 + 144) = v44;
    *(_OWORD *)(v22 + 160) = v25;
    *(_OWORD *)(v22 + 128) = v26;
    *(void *)(v22 + 200) = a1;
    *(void *)(v22 + 208) = a1;
    *(void *)(v22 + 216) = v21;
    uint64_t v37 = v22;
    if (*((unsigned char *)a5 + 153) && *((unsigned char *)a5 + 152) && !WebKit::WebExtensionTab::isActive(v10)) {
      goto LABEL_31;
    }
    if (*((unsigned char *)a5 + 155))
    {
      int v29 = *((unsigned __int8 *)a5 + 154);
      BOOL isSelected = WebKit::WebExtensionTab::isSelected(v10);
      if (v29)
      {
        if (!isSelected)
        {
          if (!*((unsigned char *)a5 + 153) || *((unsigned char *)a5 + 152))
          {
LABEL_31:
            WebKit::WebExtensionTab::activate((uint64_t)v10, &v37, v27, v28);
            goto LABEL_42;
          }
          goto LABEL_34;
        }
      }
      else if (isSelected)
      {
LABEL_34:
        WebKit::WebExtensionTab::setSelected((uint64_t)v10, v29 != 0, &v37, v28);
        goto LABEL_42;
      }
    }
    LOBYTE(v39) = 0;
    char v40 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(&v37);
    if (v40)
    {
      uint64_t v32 = v39;
      uint64_t v39 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2) {
          WTF::StringImpl::destroy(v32, v31);
        }
        else {
          *(_DWORD *)v32 -= 2;
        }
      }
    }
LABEL_42:
    uint64_t v33 = v37;
    uint64_t v37 = 0;
    if (v33) {
      (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
    }
    if (v17 && v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v31);
        if (!v11) {
          return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v10);
        }
LABEL_51:
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v31);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
        return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v10);
      }
      *(_DWORD *)v18 -= 2;
    }
    if (!v11) {
      return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v10);
    }
    goto LABEL_51;
  }
  WebKit::toWebExtensionError<>((WebKit *)@"tabs.update()", 0, &cfstr_TabNotFound.isa, v9, v34);
  uint64_t v14 = v34[0];
  v34[0] = 0;
  *(void *)((char *)&v41 + 1) = v14;
  int v46 = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()(a6);
  if (v46 != -1) {
    ((void (*)(WTF::StringImpl **, char *))off_1EE9FE430[v46])(&v39, (char *)&v41 + 1);
  }
  int v46 = -1;
  uint64_t result = v34[0];
  v34[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_199309188(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43)
{
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (v47 && v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, a2);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  if (v46 && v44)
  {
    if (*(_DWORD *)v44 == 2) {
      WTF::StringImpl::destroy(v44, a2);
    }
    else {
      *(_DWORD *)v44 -= 2;
    }
  }
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v43);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::tabsDuplicate(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  WebKit::WebExtensionContext::getTab(a1, a2, 0, &v17);
  uint64_t v7 = v17;
  if (v17)
  {
    uint64_t v8 = *a4;
    *a4 = 0;
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v9 = &unk_1EE9FE578;
    v9[1] = v8;
    long long v19 = v9;
    WebKit::WebExtensionTab::duplicate((uint64_t)v7, a3, (uint64_t *)&v19, v10);
    uint64_t v11 = (uint64_t)v19;
    long long v19 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.duplicate()", 0, &cfstr_TabNotFound.isa, v6, &v16);
    id v12 = v16;
    uint64_t v16 = 0;
    long long v20 = v12;
    int v21 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()(a4);
    if (v21 != -1) {
      ((void (*)(char *, WTF::StringImpl **))off_1EE9FE430[v21])(&v18, &v20);
    }
    int v21 = -1;
    uint64_t v14 = v16;
    uint64_t v16 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  uint64_t result = v17;
  int v17 = 0;
  if (result) {
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  }
  return result;
}

void sub_19930949C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40)
{
  if (a40 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FE430[a40])(&a15, v40);
  }
  a40 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a11);
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::tabsGet(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  WebKit::WebExtensionContext::getTab(a1, a2, 0, &v19);
  if (v19)
  {
    WebKit::WebExtensionTab::url(v19, (uint64_t)&v20);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v18, (uint64_t)&v20, 1uLL);
    uint64_t v6 = (URL *)v19;
    if (v19) {
      *(_DWORD *)v19 += 2;
    }
    int v17 = v6;
    uint64_t v7 = *a3;
    *a3 = 0;
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v8 = &unk_1EE9FE5A0;
    v8[1] = v6;
    v8[2] = v7;
    uint64_t v16 = v8;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs((uint64_t)a1, (uint64_t *)v18, &v17, (uint64_t *)&v16, 1, 1);
    uint64_t v10 = (uint64_t)v16;
    uint64_t v16 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = v17;
    int v17 = 0;
    if (v11) {
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
    }
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v9);
    long long v13 = v20;
    long long v20 = 0;
    if (!v13) {
      goto LABEL_16;
    }
LABEL_13:
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
    goto LABEL_16;
  }
  WebKit::toWebExtensionError<>((WebKit *)@"tabs.get()", 0, &cfstr_TabNotFound.isa, v5, v18);
  uint64_t v14 = v18[0];
  v18[0] = 0;
  int v21 = v14;
  int v22 = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()(a3);
  if (v22 != -1) {
    ((void (*)(void **, WTF::StringImpl **))off_1EE9FE430[v22])(&v16, &v21);
  }
  int v22 = -1;
  long long v13 = v18[0];
  v18[0] = 0;
  if (v13) {
    goto LABEL_13;
  }
LABEL_16:
  uint64_t result = v19;
  long long v19 = 0;
  if (result) {
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  }
  return result;
}

void sub_19930977C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39)
{
  if (a39 != -1) {
    ((void (*)(uint64_t *, uint64_t))off_1EE9FE430[a39])(&a10, v39);
  }
  a39 = -1;
  long long v41 = a12;
  a12 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, a2);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  uint64_t v42 = a14;
  a14 = 0;
  if (v42) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v42);
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::tabsGetCurrent(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  WebKit::WebExtensionContext::getCurrentTab(a1, a2, 1, 0, &v18);
  if (v18)
  {
    WebKit::WebExtensionTab::url(v18, (uint64_t)&v19);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v16, (uint64_t)&v19, 1uLL);
    id v5 = (URL *)v18;
    if (v18) {
      *(_DWORD *)v18 += 2;
    }
    id v15 = v5;
    uint64_t v6 = *a3;
    *a3 = 0;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v7 = &unk_1EE9FE5C8;
    v7[1] = v5;
    void v7[2] = v6;
    uint64_t v14 = v7;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v16, &v15, (uint64_t *)&v14, 1, 1);
    uint64_t v9 = (uint64_t)v14;
    uint64_t v14 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v10 = v15;
    id v15 = 0;
    if (v10) {
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v10);
    }
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v8);
    id v12 = v19;
    long long v19 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
  else
  {
    LOBYTE(v16[0]) = 0;
    char v17 = 0;
    std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](v20, (uint64_t)v16);
    int v21 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()(a3);
    if (v21 != -1) {
      ((void (*)(void **, unsigned char *))off_1EE9FE430[v21])(&v14, v20);
    }
    int v21 = -1;
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16);
  }
  uint64_t result = v18;
  char v18 = 0;
  if (result) {
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  }
  return result;
}

void sub_199309A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59)
{
  if (a59 != -1) {
    ((void (*)(uint64_t *, uint64_t))off_1EE9FE430[a59])(&a9, v59);
  }
  a59 = -1;
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a11);
  uint64_t v61 = a34;
  a34 = 0;
  if (v61) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v61);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::tabsQuery(unsigned int *a1, uint64_t a2, uint64_t a3, WebKit::WebExtensionWindow **a4)
{
  uint64_t v45 = 0;
  int v46 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  WebKit::WebExtensionContext::openWindows(a1, 0, (uint64_t)&v41);
  if (v42)
  {
    uint64_t v9 = v41;
    uint64_t v10 = &v41[v42];
    do
    {
      uint64_t v11 = *v9;
      *(_DWORD *)uint64_t v11 = *(_DWORD *)*v9 + 1;
      if (WebKit::WebExtensionWindow::matches(v11, a3, a2, 1u))
      {
        WebKit::WebExtensionWindow::tabs((uint64_t)v11, 0, (uint64_t *)&v39);
        if (v40)
        {
          long long v13 = v39;
          uint64_t v14 = 8 * v40;
          do
          {
            id v15 = *v13;
            *(_DWORD *)id v15 = *(_DWORD *)*v13 + 1;
            uint64_t v38 = v15;
            if (WebKit::WebExtensionTab::matches(v15, a3, 1, a2, 1u))
            {
              uint64_t v16 = HIDWORD(v46);
              if (HIDWORD(v46) == v46)
              {
                char v17 = (WebKit::WebExtensionTab **)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v45, HIDWORD(v46) + 1, (unint64_t)&v38);
                uint64_t v16 = HIDWORD(v46);
                char v18 = v45;
                long long v19 = *v17;
                ++*(_DWORD *)*v17;
              }
              else
              {
                char v18 = v45;
                long long v19 = v38;
                ++*(_DWORD *)v38;
              }
              *((void *)v18 + v16) = v19;
              HIDWORD(v46) = v16 + 1;
              WebKit::WebExtensionTab::url(v38, (uint64_t)&v35);
              if (HIDWORD(v44) == v44)
              {
                WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL>((uint64_t)&v43, (unint64_t)&v35);
              }
              else
              {
                WTF::URL::URL(v43 + 40 * HIDWORD(v44), (uint64_t *)&v35);
                ++HIDWORD(v44);
              }
              long long v20 = v35;
              long long v35 = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 2) {
                  WTF::StringImpl::destroy(v20, v12);
                }
                else {
                  *(_DWORD *)v20 -= 2;
                }
              }
            }
            int v21 = v38;
            uint64_t v38 = 0;
            if (v21) {
              WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v21);
            }
            ++v13;
            v14 -= 8;
          }
          while (v14);
        }
        WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v12);
      }
      WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v11);
      ++v9;
    }
    while (v9 != v10);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v8);
  CFTypeRef v34 = 0;
  long long v35 = v45;
  uint64_t v22 = v46;
  uint64_t v45 = 0;
  int v46 = 0;
  long long v36 = v22;
  uint64_t v23 = *a4;
  *a4 = 0;
  uint64_t v37 = v23;
  long long v24 = (WebKit::WebExtensionWindow **)WTF::fastMalloc((WTF *)0x20);
  WTF::StringImpl *v24 = (WebKit::WebExtensionWindow *)&unk_1EE9FE5F0;
  v24[1] = v35;
  long long v25 = v36;
  long long v35 = 0;
  long long v36 = 0;
  v24[2] = v25;
  long long v26 = v37;
  uint64_t v37 = 0;
  void v24[3] = v26;
  long long v41 = v24;
  WebKit::WebExtensionContext::requestPermissionToAccessURLs((uint64_t)a1, &v43, &v34, (uint64_t *)&v41, 1, 1);
  uint64_t v28 = (uint64_t)v41;
  long long v41 = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  int v29 = v37;
  uint64_t v37 = 0;
  if (v29) {
    (*(void (**)(WebKit::WebExtensionWindow *))(*(void *)v29 + 8))(v29);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v27);
  uint64_t v31 = v34;
  CFTypeRef v34 = 0;
  if (v31) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v31);
  }
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v30);
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v32);
}

void sub_199309EA8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v23 = a19;
  a19 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = a13;
  a13 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  if (a10) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a10);
  }
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v25);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v21 - 96, v26);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsReload(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t *a6)
{
  WebKit::WebExtensionContext::getTab(a1, a2, a3, a4, 1, 0, &v17);
  uint64_t v9 = v17;
  if (v17)
  {
    WebKit::WebExtensionTab::reload(v17, a5, a6);
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v9);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.reload()", 0, &cfstr_TabNotFound.isa, v8, &v14);
    uint64_t v11 = v14;
    uint64_t v14 = 0;
    id v15 = v11;
    char v16 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a6);
    if (v16)
    {
      long long v13 = v15;
      id v15 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
    uint64_t result = v14;
    uint64_t v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19930A0C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsGoBack(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  WebKit::WebExtensionContext::getTab(a1, a2, a3, a4, 1, 0, &v15);
  uint64_t v7 = v15;
  if (v15)
  {
    WebKit::WebExtensionTab::goBack(v15, a5);
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v7);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.goBack()", 0, &cfstr_TabNotFound.isa, v6, &v12);
    uint64_t v9 = v12;
    id v12 = 0;
    long long v13 = v9;
    char v14 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a5);
    if (v14)
    {
      uint64_t v11 = v13;
      long long v13 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
    uint64_t result = v12;
    id v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19930A230(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsGoForward(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  WebKit::WebExtensionContext::getTab(a1, a2, a3, a4, 1, 0, &v15);
  uint64_t v7 = v15;
  if (v15)
  {
    WebKit::WebExtensionTab::goForward(v15, a5);
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v7);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.goForward()", 0, &cfstr_TabNotFound.isa, v6, &v12);
    uint64_t v9 = v12;
    id v12 = 0;
    long long v13 = v9;
    char v14 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a5);
    if (v14)
    {
      uint64_t v11 = v13;
      long long v13 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
    uint64_t result = v12;
    id v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19930A39C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsDetectLanguage(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  WebKit::WebExtensionContext::getTab(a1, a2, a3, a4, 1, 0, &v22);
  uint64_t v8 = (URL *)v22;
  if (v22)
  {
    WebKit::WebExtensionTab::url(v22, (uint64_t)&v23);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v21, (uint64_t)&v23, 1uLL);
    LODWORD(v8->m_string.m_impl.m_ptr) += 2;
    long long v20 = v8;
    uint64_t v9 = *a5;
    *a5 = 0;
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v10 = &unk_1EE9FE628;
    v10[1] = v8;
    v10[2] = v9;
    long long v19 = v10;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs((uint64_t)a1, (uint64_t *)v21, &v20, (uint64_t *)&v19, 1, 1);
    uint64_t v12 = (uint64_t)v19;
    long long v19 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    long long v13 = v20;
    long long v20 = 0;
    if (v13) {
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v13);
    }
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v11);
    id v15 = v23;
    uint64_t v23 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v8);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.detectLanguage()", 0, &cfstr_TabNotFound.isa, v7, v21);
    char v16 = v21[0];
    v21[0] = 0;
    uint64_t v23 = v16;
    int v24 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(a5);
    if (v24 != -1) {
      ((void (*)(void **, WTF::StringImpl **))off_1EE9FE460[v24])(&v19, &v23);
    }
    int v24 = -1;
    uint64_t result = v21[0];
    v21[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19930A608(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, int a16)
{
  if (a16 != -1) {
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1EE9FE460[a16])(&a10, &a15);
  }
  a16 = -1;
  char v17 = a12;
  a12 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, a2);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::tabsCaptureVisibleTab(uint64_t a1, uint64_t a2, uint64_t a3, char a4, __int16 a5, __int16 a6, uint64_t *a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a4) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = -3;
  }
  WebKit::WebExtensionContext::getWindow(a1, v12, a2, 1u, 0, &v33);
  if (v33)
  {
    WebKit::WebExtensionWindow::activeTab(v33, 0, (uint64_t *)&v32);
    if (v32)
    {
      WebKit::WebExtensionTab::url(v32, (uint64_t)v34);
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v31, (uint64_t)v34, 1uLL);
      id v15 = (URL *)v32;
      if (v32) {
        *(_DWORD *)v32 += 2;
      }
      uint64_t v30 = v15;
      uint64_t v16 = *a7;
      *a7 = 0;
      uint64_t v17 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v17 = &unk_1EE9FE678;
      *(void *)(v17 + 8) = v15;
      *(_WORD *)(v17 + 16) = a5 | (a6 << 8);
      *(void *)(v17 + 24) = v16;
      uint64_t v29 = v17;
      WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, (uint64_t *)v31, &v30, &v29, 1, 1);
      uint64_t v19 = v29;
      uint64_t v29 = 0;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
      long long v20 = v30;
      uint64_t v30 = 0;
      if (v20) {
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v20);
      }
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v31, v18);
      uint64_t v22 = (WTF::StringImpl *)v34[0];
      v34[0] = 0;
      if (!v22) {
        goto LABEL_25;
      }
    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)@"tabs.captureVisibleTab()", 0, &cfstr_ActiveTabNotFo_0.isa, v14, v31);
      long long v26 = v31[0];
      v31[0] = 0;
      v34[0] = v26;
      int v35 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String> &&)>::operator()(a7);
      if (v35 != -1) {
        ((void (*)(uint64_t *, void *))off_1EE9FE470[v35])(&v29, v34);
      }
      int v35 = -1;
      uint64_t v22 = v31[0];
      v31[0] = 0;
      if (!v22) {
        goto LABEL_25;
      }
    }
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v21);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
LABEL_25:
    uint64_t v27 = v32;
    uint64_t v32 = 0;
    if (v27) {
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v27);
    }
    goto LABEL_27;
  }
  WebKit::toWebExtensionError<>((WebKit *)@"tabs.captureVisibleTab()", 0, &cfstr_WindowNotFound.isa, v13, v31);
  uint64_t v23 = v31[0];
  v31[0] = 0;
  v34[0] = v23;
  int v35 = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String> &&)>::operator()(a7);
  if (v35 != -1) {
    ((void (*)(WebKit::WebExtensionTab **, void *))off_1EE9FE470[v35])(&v32, v34);
  }
  int v35 = -1;
  uint64_t v25 = v31[0];
  v31[0] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v24);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
LABEL_27:
  uint64_t result = v33;
  uint64_t v33 = 0;
  if (result) {
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
  }
  return result;
}

void sub_19930AA04(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  if (a21 != -1) {
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1EE9FE470[a21])(&a10, &a16);
  }
  a21 = -1;
  uint64_t v22 = a12;
  a12 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, a2);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  uint64_t v23 = a14;
  a14 = 0;
  if (v23) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v23);
  }
  uint64_t v24 = a15;
  a15 = 0;
  if (v24) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_19930AC1C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsToggleReaderMode(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  WebKit::WebExtensionContext::getTab(a1, a2, a3, a4, 1, 0, &v17);
  uint64_t v7 = v17;
  if (v17)
  {
    int isReaderModeActive = WebKit::WebExtensionTab::isReaderModeActive(v17);
    WebKit::WebExtensionTab::setReaderModeActive((uint64_t)v7, isReaderModeActive ^ 1u, a5, v9);
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v7);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.toggleReaderMode()", 0, &cfstr_TabNotFound.isa, v6, &v14);
    uint64_t v11 = v14;
    char v14 = 0;
    id v15 = v11;
    char v16 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a5);
    if (v16)
    {
      long long v13 = v15;
      id v15 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
    uint64_t result = v14;
    char v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19930AD54(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::tabsSendMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  v42[0] = a4;
  v42[1] = a5;
  WebKit::WebExtensionContext::getTab((uint64_t *)a1, a2, 0, &v41);
  if (v41)
  {
    unsigned __int8 v40 = 0;
    WebKit::WebExtensionTab::url(v41, (uint64_t)&v36);
    unsigned __int8 v14 = WebKit::WebExtensionContext::isURLForAnyExtension((WebKit::WebExtensionContext *)&v36, v12) ^ 1;
    id v15 = v36;
    uint64_t v36 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v13);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    unsigned __int8 v40 = v14;
    WebKit::WebExtensionTab::processes((uint64_t)v41, 0x1Cu, v14, (uint64_t *)&v35);
    if (!v35 || !*((_DWORD *)v35 - 3))
    {
      uint64_t v36 = 0;
      LODWORD(v37) = 0;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(a7);
      if (v37 != -1) {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9FE460[v37])(v43, &v36);
      }
      goto LABEL_34;
    }
    uint64_t v19 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v35);
    long long v20 = v35;
    if (v35) {
      uint64_t v21 = &v35[*((unsigned int *)v35 - 1)];
    }
    else {
      uint64_t v21 = 0;
    }
    if (v21 == v19)
    {
      uint64_t v23 = 0;
    }
    else
    {
      uint64_t v23 = *v19;
      if (*v19)
      {
        *uint64_t v19 = 0;
        long long v20 = v35;
      }
      if (v20)
      {
        uint64_t v24 = &v20[*((unsigned int *)v20 - 1)];
        if (v24 == v19) {
          goto LABEL_28;
        }
      }
      else
      {
        if (!v19) {
          goto LABEL_28;
        }
        uint64_t v24 = 0;
      }
      if (v24 != v19) {
        WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::remove((unsigned int *)&v35, v19);
      }
    }
LABEL_28:
    uint64_t v36 = (WTF::StringImpl *)&v40;
    uint64_t v37 = a3;
    uint64_t v38 = v42;
    uint64_t v39 = a6;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v25 = *a7;
    *a7 = 0;
    uint64_t v26 = *(void *)(a1 + 32);
    uint64_t v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v27 = 1610;
    *((void *)v27 + 1) = v26;
    *((void *)v27 + 66) = (char *)v27 + 16;
    *((void *)v27 + 67) = 512;
    *((void *)v27 + 68) = 0;
    *((void *)v27 + 70) = 0;
    *((void *)v27 + 69) = 0;
    IPC::Encoder::encodeHeader(v27);
    uint64_t v45 = v27;
    IPC::ArgumentCoder<std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul>(v27, (uint64_t)&v36);
    uint64_t v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v28 = &unk_1EE9FE6C8;
    *((void *)v28 + 1) = a1;
    *((void *)v28 + 2) = v25;
    uint64_t v29 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v43[0] = v28;
    v43[1] = v29;
    char v44 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v23, &v45, 0, (uint64_t)v43, 1);
    if (v44)
    {
      uint64_t v30 = v43[0];
      v43[0] = 0;
      if (v30) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v30 + 8))(v30);
      }
    }
    uint64_t v31 = v45;
    uint64_t v45 = 0;
    if (v31)
    {
      IPC::Encoder::~Encoder(v31, v22);
      WTF::fastFree(v33, v34);
      if (!v23)
      {
LABEL_34:
        if (v35) {
          WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v35, v22);
        }
        goto LABEL_36;
      }
    }
    else if (!v23)
    {
      goto LABEL_34;
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v23 + 16));
    goto LABEL_34;
  }
  WebKit::toWebExtensionError<>((WebKit *)@"tabs.sendMessage()", 0, &cfstr_TabNotFound.isa, v11, v43);
  char v16 = v43[0];
  v43[0] = 0;
  uint64_t v36 = v16;
  LODWORD(v37) = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(a7);
  ((void (*)(IPC::Encoder **, WTF::StringImpl **))off_1EE9FE468[0])(&v45, &v36);
  LODWORD(v37) = -1;
  char v18 = v43[0];
  v43[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v17);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
LABEL_36:
  uint64_t result = v41;
  long long v41 = 0;
  if (result) {
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  }
  return result;
}

void sub_19930B108(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, WTF::StringImpl *a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v21 + 16));
  }
  if (a9) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a9, a2);
  }
  if (a16) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a16);
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::tabsConnect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  v54[1] = a6;
  uint64_t v55 = a3;
  v54[0] = a5;
  WebKit::WebExtensionContext::getTab((uint64_t *)a1, a2, 0, &v53);
  if (v53)
  {
    uint8_t v52 = 0;
    WebKit::WebExtensionTab::url(v53, (uint64_t)&v47);
    uint8_t v15 = WebKit::WebExtensionContext::isURLForAnyExtension((WebKit::WebExtensionContext *)&v47, v13) ^ 1;
    char v16 = v47;
    int v47 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v14);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint8_t v52 = v15;
    uint64_t v20 = v55;
    v57[0] = *(WTF::StringImpl **)(a7 + 216);
    WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::HashCountedSet((uint64_t *)&v47, (uint64_t *)v57, 1);
    WebKit::WebExtensionContext::addPorts(a1, 0, v15, v20, (void **)&v47);
    if (v47) {
      WTF::fastFree((WTF::StringImpl *)((char *)v47 - 16), v21);
    }
    WebKit::WebExtensionTab::processes((uint64_t)v53, 0x19u, v52, (uint64_t *)&v46);
    if (!v46 || !*((_DWORD *)v46 - 3))
    {
      WebKit::toWebExtensionError<>((WebKit *)@"tabs.connect()", 0, &cfstr_NoRuntimeOncon.isa, v22, v57);
      uint64_t v26 = v57[0];
      v57[0] = 0;
      int v47 = v26;
      LOBYTE(v48) = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a8);
      if ((_BYTE)v48)
      {
        uint64_t v28 = v47;
        int v47 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2) {
            WTF::StringImpl::destroy(v28, v27);
          }
          else {
            *(_DWORD *)v28 -= 2;
          }
        }
      }
      uint64_t v29 = v57[0];
      v57[0] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, v27);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
      goto LABEL_52;
    }
    uint64_t v23 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v46);
    uint64_t v24 = v46;
    if (v46) {
      uint64_t v25 = &v46[*((unsigned int *)v46 - 1)];
    }
    else {
      uint64_t v25 = 0;
    }
    if (v25 == v23)
    {
      uint64_t v31 = 0;
    }
    else
    {
      uint64_t v31 = *v23;
      if (*v23)
      {
        uint64_t *v23 = 0;
        uint64_t v24 = v46;
      }
      if (v24)
      {
        uint64_t v32 = &v24[*((unsigned int *)v24 - 1)];
        if (v32 == v23) {
          goto LABEL_41;
        }
      }
      else
      {
        if (!v23) {
          goto LABEL_41;
        }
        uint64_t v32 = 0;
      }
      if (v32 != v23) {
        WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::remove((unsigned int *)&v46, v23);
      }
    }
LABEL_41:
    int v47 = (WTF::StringImpl *)&v52;
    uint64_t v48 = &v55;
    uint64_t v49 = a4;
    uint64_t v50 = v54;
    uint64_t v51 = a7;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    unsigned __int8 v33 = v52;
    uint64_t v34 = v55;
    uint64_t v35 = *(void *)(a1 + 32);
    uint64_t v36 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v36 = 1608;
    *((void *)v36 + 1) = v35;
    *((void *)v36 + 66) = (char *)v36 + 16;
    *((void *)v36 + 67) = 512;
    *((void *)v36 + 68) = 0;
    *((void *)v36 + 70) = 0;
    *((void *)v36 + 69) = 0;
    IPC::Encoder::encodeHeader(v36);
    uint64_t v56 = v36;
    IPC::ArgumentCoder<std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebExtensionContentWorldType const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul,4ul>(v36, (uint64_t)&v47);
    uint64_t v37 = WTF::fastMalloc((WTF *)0x28);
    *(void *)uint64_t v37 = &unk_1EE9FE6F0;
    *(void *)(v37 + 8) = a1;
    *(void *)(v37 + 16) = a1;
    *(unsigned char *)(v37 + 24) = v33;
    *(void *)(v37 + 32) = v34;
    uint64_t v38 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v57[0] = (WTF::StringImpl *)v37;
    v57[1] = v38;
    char v58 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v31, &v56, 0, (uint64_t)v57, 1);
    if (v58)
    {
      unsigned __int8 v40 = v57[0];
      v57[0] = 0;
      if (v40) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v40 + 8))(v40);
      }
    }
    long long v41 = v56;
    uint64_t v56 = 0;
    if (v41)
    {
      IPC::Encoder::~Encoder(v41, v39);
      WTF::fastFree(v44, v45);
    }
    LOBYTE(v47) = 0;
    LOBYTE(v48) = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a8);
    if ((_BYTE)v48)
    {
      int v42 = v47;
      int v47 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
        {
          WTF::StringImpl::destroy(v42, v27);
          if (!v31)
          {
LABEL_52:
            if (v46) {
              WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v46, v27);
            }
            goto LABEL_54;
          }
LABEL_51:
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v31 + 16));
          goto LABEL_52;
        }
        *(_DWORD *)v42 -= 2;
      }
    }
    if (!v31) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  WebKit::toWebExtensionError<>((WebKit *)@"tabs.connect()", 0, &cfstr_TabNotFound.isa, v12, v57);
  uint64_t v17 = v57[0];
  v57[0] = 0;
  int v47 = v17;
  LOBYTE(v48) = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a8);
  uint64_t v19 = v47;
  int v47 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v18);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t v30 = v57[0];
  v57[0] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v18);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
LABEL_54:
  uint64_t result = v53;
  CFTypeRef v53 = 0;
  if (result) {
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  }
  return result;
}

void sub_19930B76C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, IPC::Encoder *a20,WTF::StringImpl *a21,uint64_t a22,char a23)
{
  if (v23) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v23 + 16));
  }
  if (a9) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a9, a2);
  }
  if (a16) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_19930B980()
{
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsGetZoom(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  WebKit::WebExtensionContext::getTab(a1, a2, a3, a4, 1, 0, &v14);
  uint64_t v7 = v14;
  if (v14)
  {
    double v12 = WebKit::WebExtensionTab::zoomFactor(v14);
    int v13 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<double,WTF::String> &&)>::operator()(a5);
    ((void (*)(WTF::StringImpl **, double *))off_1EE9FE480[v13])(&v11, &v12);
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v7);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.getZoom()", 0, &cfstr_TabNotFound.isa, v6, &v11);
    uint64_t v9 = v11;
    uint64_t v11 = 0;
    double v12 = *(double *)&v9;
    int v13 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<double,WTF::String> &&)>::operator()(a5);
    if (v13 != -1) {
      ((void (*)(char *, double *))off_1EE9FE480[v13])(&v15, &v12);
    }
    int v13 = -1;
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19930BA9C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, int a13)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FE480[a13])(v13 - 17, &a11);
  }
  a13 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<double,WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_19930BBBC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsSetZoom(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, double a6)
{
  WebKit::WebExtensionContext::getTab(a1, a2, a3, a4, 1, 0, &v17);
  uint64_t v9 = v17;
  if (v17)
  {
    WebKit::WebExtensionTab::setZoomFactor(v17, a5, a6);
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v9);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.setZoom()", 0, &cfstr_TabNotFound.isa, v8, &v14);
    uint64_t v11 = v14;
    unsigned __int8 v14 = 0;
    char v15 = v11;
    char v16 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a5);
    if (v16)
    {
      uint64_t v13 = v15;
      char v15 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
    uint64_t result = v14;
    unsigned __int8 v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19930BCFC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::tabsRemove(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v4 = *((unsigned int *)a2 + 3);
  if (!v4) {
    goto LABEL_27;
  }
  if (!(v4 >> 29))
  {
    uint64_t v6 = (uint64_t *)result;
    uint64_t v7 = WTF::fastMalloc((WTF *)(8 * v4));
    LODWORD(v30) = v4;
    uint64_t v29 = (void *)v7;
    if (*((_DWORD *)a2 + 3))
    {
      uint64_t v8 = 0;
      do
      {
        uint64_t v9 = v8;
        uint64_t v10 = *a2;
        WebKit::WebExtensionContext::getTab(v6, *(void *)(*a2 + 8 * v8), 0, &v35);
        double v12 = v35;
        if (!v35)
        {
          NSString v31 = *(NSString *)(v10 + 8 * v9);
          WebKit::toWebExtensionError<unsigned long long>((WebKit *)@"tabs.remove()", 0, &cfstr_TabLluWasNotFo.isa, &v31, &v32);
          uint64_t v13 = v32;
          uint64_t v32 = 0;
          unsigned __int8 v33 = v13;
          char v34 = 1;
          WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
          if (v34)
          {
            unsigned __int8 v14 = v33;
            unsigned __int8 v33 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2) {
                WTF::StringImpl::destroy(v14, v11);
              }
              else {
                *(_DWORD *)v14 -= 2;
              }
            }
          }
          char v15 = v32;
          uint64_t v32 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v11);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
          char v16 = v35;
          uint64_t v35 = 0;
          if (v16) {
            WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v16);
          }
        }
        uint64_t v8 = v9 + 1;
        *(void *)(v7 + 8 * v9) = v12;
      }
      while (v9 + 1 < (unint64_t)*((unsigned int *)a2 + 3));
      HIDWORD(v30) = v9 + 1;
      if (v9 != -1)
      {
        uint64_t v8 = v8;
        uint64_t v17 = v29;
        while (*v17
              ? WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>::unspecifiedBoolTypeInstance
              : 0)
        {
          ++v17;
          if (!--v8) {
            goto LABEL_27;
          }
        }
        return WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v11);
      }
    }
LABEL_27:
    uint64_t v19 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)uint64_t v19 = 1;
    uint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v20 = &unk_1EE9FE718;
    uint64_t v21 = *a3;
    *a3 = 0;
    v20[1] = v21;
    *(void *)(v19 + 8) = v20;
    *(unsigned char *)(v19 + 16) = 0;
    *(unsigned char *)(v19 + 24) = 0;
    if (HIDWORD(v30))
    {
      uint64_t v22 = (_DWORD **)v29;
      uint64_t v23 = 8 * HIDWORD(v30);
      do
      {
        uint64_t v24 = *v22;
        if (*v22) {
          ++*v24;
        }
        ++*(_DWORD *)v19;
        uint64_t v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(void *)uint64_t v25 = &unk_1EE9FE740;
        *((void *)v25 + 1) = v19;
        unsigned __int8 v33 = v25;
        WebKit::WebExtensionTab::close((uint64_t)v24, (uint64_t *)&v33, v26, v27);
        uint64_t v28 = v33;
        unsigned __int8 v33 = 0;
        if (v28) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v28 + 8))(v28);
        }
        if (v24) {
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v24);
        }
        ++v22;
        v23 -= 8;
      }
      while (v23);
    }
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String>)>>::deref(v19);
    return WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v11);
  }
  __break(0xC471u);
  return result;
}

void sub_19930C03C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, char a17, uint64_t a18)
{
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsExecuteScript(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t *a6)
{
  v32[5] = *MEMORY[0x1E4F143B8];
  WebKit::WebExtensionContext::getTab((uint64_t *)a1, a2, a3, a4, 1, 0, (WebKit::WebExtensionTab **)&v31);
  uint64_t v10 = v31;
  if (v31)
  {
    WebKit::WebExtensionTab::url((WebKit::WebExtensionTab *)v31, (uint64_t)v32);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v30, (uint64_t)v32, 1uLL);
    ++LODWORD(v10->m_string.m_impl.m_ptr);
    uint64_t v29 = v10;
    uint64_t v23 = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v24 = a1;
    ++LODWORD(v10->m_string.m_impl.m_ptr);
    uint64_t v25 = v10;
    WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)v26, a5);
    uint64_t v11 = *a6;
    *a6 = 0;
    uint64_t v27 = v11;
    double v12 = (void *)WTF::fastMalloc((WTF *)0xB0);
    void *v12 = &unk_1EE9FE768;
    v12[1] = v23;
    void v12[2] = v24;
    uint64_t v13 = v25;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    v12[3] = v13;
    WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)(v12 + 4), (uint64_t)v26);
    uint64_t v14 = v27;
    uint64_t v27 = 0;
    v12[21] = v14;
    uint64_t v28 = v12;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v30, &v29, (uint64_t *)&v28, 1, 1);
    uint64_t v15 = (uint64_t)v28;
    uint64_t v28 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)&v23);
    uint64_t v17 = v29;
    uint64_t v29 = 0;
    if (v17) {
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v17);
    }
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v16);
    uint64_t v19 = (WTF::StringImpl *)v32[0];
    v32[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v18);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v10);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.executeScript()", 0, &cfstr_TabNotFound.isa, v9, v32);
    uint64_t v20 = v32[0];
    v32[0] = 0;
    uint64_t v23 = v20;
    LODWORD(v25) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()(a6);
    ((void (*)(uint64_t *, uint64_t *))off_1EE9FE490[v25])(v30, &v23);
    LODWORD(v25) = -1;
    uint64_t result = (WTF::StringImpl *)v32[0];
    v32[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19930C3BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9FE490[a11])(v11 - 120, &a9);
  }
  LODWORD(a11) = -1;
  uint64_t v13 = *(WTF::StringImpl **)(v11 - 96);
  *(void *)(v11 - 96) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsInsertCSS(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t *a6)
{
  v33[5] = *MEMORY[0x1E4F143B8];
  WebKit::WebExtensionContext::getTab((uint64_t *)a1, a2, a3, a4, 1, 0, (WebKit::WebExtensionTab **)&v32);
  uint64_t v10 = v32;
  if (v32)
  {
    WebKit::WebExtensionTab::url((WebKit::WebExtensionTab *)v32, (uint64_t)v33);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v31, (uint64_t)v33, 1uLL);
    ++LODWORD(v10->m_string.m_impl.m_ptr);
    uint64_t v30 = v10;
    uint64_t v24 = (WTF::StringImpl *)a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v25 = a1;
    ++LODWORD(v10->m_string.m_impl.m_ptr);
    uint64_t v26 = v10;
    WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)v27, a5);
    uint64_t v11 = *a6;
    *a6 = 0;
    uint64_t v28 = v11;
    double v12 = (void *)WTF::fastMalloc((WTF *)0xB0);
    void *v12 = &unk_1EE9FE7B8;
    v12[1] = v24;
    void v12[2] = v25;
    uint64_t v13 = v26;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    v12[3] = v13;
    WebKit::WebExtensionScriptInjectionParameters::WebExtensionScriptInjectionParameters((uint64_t)(v12 + 4), (uint64_t)v27);
    uint64_t v14 = v28;
    uint64_t v28 = 0;
    v12[21] = v14;
    uint64_t v29 = v12;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, v31, &v30, (uint64_t *)&v29, 1, 1);
    uint64_t v15 = (uint64_t)v29;
    uint64_t v29 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)&v24);
    uint64_t v17 = v30;
    uint64_t v30 = 0;
    if (v17) {
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v17);
    }
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v31, v16);
    uint64_t v19 = (WTF::StringImpl *)v33[0];
    v33[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v18);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v10);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.insertCSS()", 0, &cfstr_TabNotFound.isa, v9, v33);
    uint64_t v20 = (WTF::StringImpl *)v33[0];
    v33[0] = 0;
    uint64_t v24 = v20;
    LOBYTE(v25) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a6);
    uint64_t v22 = v24;
    uint64_t v24 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v21);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    uint64_t result = (WTF::StringImpl *)v33[0];
    v33[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19930C7A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11)
{
  if ((_BYTE)a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  uint64_t v13 = *(WTF::StringImpl **)(v11 - 96);
  *(void *)(v11 - 96) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebExtensionContext::tabsRemoveCSS(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t *a6)
{
  WebKit::WebExtensionContext::getTab(a1, a2, a3, a4, 1, 0, &v27);
  uint64_t v10 = v27;
  if (v27)
  {
    double v12 = WebKit::WebExtensionTab::webView(v27);
    if (v12)
    {
      int v13 = *(unsigned __int8 *)(a5 + 72);
      WebKit::WebExtensionDynamicScripts::getSourcePairsForParameters(a5, (uint64_t)a1, (uint64_t)&v25);
      WebKit::WebExtensionDynamicScripts::removeStyleSheets((uint64_t)&v25, v12, v13 != 0, (uint64_t)a1);
      LOBYTE(v23) = 0;
      char v24 = 0;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a6);
      WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v20);
    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)@"tabs.removeCSS()", 0, &cfstr_CouldNotRemove_0.isa, v11, &v23);
      uint64_t v17 = v23;
      uint64_t v23 = 0;
      uint64_t v25 = v17;
      char v26 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a6);
      if (v26)
      {
        uint64_t v19 = v25;
        uint64_t v25 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v18);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
      }
      uint64_t v22 = v23;
      uint64_t v23 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v18);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
    }

    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v10);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.removeCSS()", 0, &cfstr_TabNotFound.isa, v9, &v23);
    uint64_t v14 = v23;
    uint64_t v23 = 0;
    uint64_t v25 = v14;
    char v26 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a6);
    if (v26)
    {
      char v16 = v25;
      uint64_t v25 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v15);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    uint64_t result = v23;
    uint64_t v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19930CB28(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, WTF::StringImpl *a12, char a13)
{
  if (a13 && a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v13);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::fireTabsCreatedEventIfNeeded(uint64_t a1, long long *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  char v19 = 34;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v20, &v19, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  long long v17 = *a2;
  int v4 = *((unsigned __int8 *)a2 + 56);
  if (*((unsigned char *)a2 + 56))
  {
    id v5 = (WTF::StringImpl *)*((void *)a2 + 2);
    if (v5) {
      *(_DWORD *)v5 += 2;
    }
    long long v15 = *(long long *)((char *)a2 + 24);
    long long v16 = *(long long *)((char *)a2 + 40);
  }
  else
  {
    id v5 = 0;
  }
  int v6 = *((unsigned __int8 *)a2 + 72);
  if (*((unsigned char *)a2 + 72))
  {
    uint64_t v7 = (WTF::StringImpl *)*((void *)a2 + 8);
    if (v7) {
      *(_DWORD *)v7 += 2;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = a2[8];
  long long v23 = a2[7];
  long long v24 = v8;
  *(_OWORD *)uint64_t v25 = a2[9];
  *(_OWORD *)&v25[10] = *(long long *)((char *)a2 + 154);
  long long v9 = a2[6];
  long long v21 = a2[5];
  long long v22 = v9;
  uint64_t v10 = WTF::fastMalloc((WTF *)0xC8);
  *(void *)uint64_t v10 = &unk_1EE9FE7E0;
  *(void *)(v10 + 8) = a1;
  *(void *)(v10 + 16) = a1;
  *(_OWORD *)(v10 + 24) = v17;
  *(unsigned char *)(v10 + 40) = 0;
  *(unsigned char *)(v10 + 80) = 0;
  if (v4)
  {
    if (v5) {
      *(_DWORD *)v5 += 2;
    }
    *(void *)(v10 + 40) = v5;
    *(_OWORD *)(v10 + 48) = v15;
    *(_OWORD *)(v10 + 64) = v16;
    *(unsigned char *)(v10 + 80) = 1;
  }
  *(unsigned char *)(v10 + 88) = 0;
  *(unsigned char *)(v10 + 96) = 0;
  if (v6)
  {
    if (v7) {
      *(_DWORD *)v7 += 2;
    }
    *(void *)(v10 + 88) = v7;
    *(unsigned char *)(v10 + 96) = 1;
  }
  long long v11 = v24;
  *(_OWORD *)(v10 + 136) = v23;
  *(_OWORD *)(v10 + 152) = v11;
  *(_OWORD *)(v10 + 168) = *(_OWORD *)v25;
  *(_OWORD *)(v10 + 178) = *(_OWORD *)&v25[10];
  long long v12 = v22;
  *(_OWORD *)(v10 + 104) = v21;
  *(_OWORD *)(v10 + 120) = v12;
  uint64_t v18 = v10;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v20, &v18);
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    if (!v6) {
      goto LABEL_23;
    }
  }
  else if (!v6)
  {
    goto LABEL_23;
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      uint64_t result = WTF::StringImpl::destroy(v7, v13);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
LABEL_23:
  if (v4 && v5)
  {
    if (*(_DWORD *)v5 == 2) {
      uint64_t result = WTF::StringImpl::destroy(v5, v13);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  if (v20) {
    return WTF::fastFree((WTF *)(v20 - 16), v13);
  }
  return result;
}

void sub_19930CEBC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  if (v21 && v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, a2);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  if (v20 && v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, a2);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  if (a18) {
    WTF::fastFree((WTF *)(a18 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::fireTabsUpdatedEventIfNeeded(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  char v31 = 40;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v32, &v31, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  long long v29 = *a2;
  int v6 = *((unsigned __int8 *)a2 + 56);
  if (*((unsigned char *)a2 + 56))
  {
    uint64_t v7 = (WTF::StringImpl *)*((void *)a2 + 2);
    if (v7) {
      *(_DWORD *)v7 += 2;
    }
    long long v27 = *(long long *)((char *)a2 + 24);
    long long v28 = *(long long *)((char *)a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v8 = *((unsigned __int8 *)a2 + 72);
  if (*((unsigned char *)a2 + 72))
  {
    long long v9 = (WTF::StringImpl *)*((void *)a2 + 8);
    if (v9) {
      *(_DWORD *)v9 += 2;
    }
  }
  else
  {
    long long v9 = 0;
  }
  long long v10 = a2[8];
  long long v41 = a2[7];
  long long v42 = v10;
  *(_OWORD *)uint64_t v43 = a2[9];
  *(_OWORD *)&v43[10] = *(long long *)((char *)a2 + 154);
  long long v11 = a2[6];
  long long v39 = a2[5];
  long long v40 = v11;
  long long v38 = *a3;
  int v12 = *((unsigned __int8 *)a3 + 56);
  if (*((unsigned char *)a3 + 56))
  {
    uint64_t v13 = (WTF::StringImpl *)*((void *)a3 + 2);
    if (v13) {
      *(_DWORD *)v13 += 2;
    }
    long long v25 = *(long long *)((char *)a3 + 24);
    long long v26 = *(long long *)((char *)a3 + 40);
  }
  else
  {
    uint64_t v13 = 0;
  }
  int v14 = *((unsigned __int8 *)a3 + 72);
  if (*((unsigned char *)a3 + 72))
  {
    long long v15 = (WTF::StringImpl *)*((void *)a3 + 8);
    if (v15) {
      *(_DWORD *)v15 += 2;
    }
  }
  else
  {
    long long v15 = 0;
  }
  long long v16 = a3[8];
  long long v35 = a3[7];
  long long v36 = v16;
  *(_OWORD *)uint64_t v37 = a3[9];
  *(_OWORD *)&v37[10] = *(long long *)((char *)a3 + 154);
  long long v17 = a3[6];
  long long v33 = a3[5];
  long long v34 = v17;
  uint64_t v18 = WTF::fastMalloc((WTF *)0x178);
  *(void *)uint64_t v18 = &unk_1EE9FE808;
  *(void *)(v18 + 8) = a1;
  *(void *)(v18 + 16) = a1;
  *(_OWORD *)(v18 + 24) = v29;
  *(unsigned char *)(v18 + 40) = 0;
  *(unsigned char *)(v18 + 80) = 0;
  if (v6)
  {
    if (v7) {
      *(_DWORD *)v7 += 2;
    }
    *(void *)(v18 + 40) = v7;
    *(_OWORD *)(v18 + 48) = v27;
    *(_OWORD *)(v18 + 64) = v28;
    *(unsigned char *)(v18 + 80) = 1;
  }
  *(unsigned char *)(v18 + 88) = 0;
  *(unsigned char *)(v18 + 96) = 0;
  if (v8)
  {
    if (v9) {
      *(_DWORD *)v9 += 2;
    }
    *(void *)(v18 + 88) = v9;
    *(unsigned char *)(v18 + 96) = 1;
  }
  long long v19 = v42;
  *(_OWORD *)(v18 + 136) = v41;
  *(_OWORD *)(v18 + 152) = v19;
  *(_OWORD *)(v18 + 168) = *(_OWORD *)v43;
  *(_OWORD *)(v18 + 178) = *(_OWORD *)&v43[10];
  long long v20 = v40;
  *(_OWORD *)(v18 + 104) = v39;
  *(_OWORD *)(v18 + 120) = v20;
  *(_OWORD *)(v18 + 200) = v38;
  *(unsigned char *)(v18 + 216) = 0;
  *(unsigned char *)(v18 + 256) = 0;
  if (v12)
  {
    if (v13) {
      *(_DWORD *)v13 += 2;
    }
    *(void *)(v18 + 216) = v13;
    *(_OWORD *)(v18 + 224) = v25;
    *(_OWORD *)(v18 + 240) = v26;
    *(unsigned char *)(v18 + 256) = 1;
  }
  *(unsigned char *)(v18 + 264) = 0;
  *(unsigned char *)(v18 + 272) = 0;
  if (v14)
  {
    if (v15) {
      *(_DWORD *)v15 += 2;
    }
    *(void *)(v18 + 264) = v15;
    *(unsigned char *)(v18 + 272) = 1;
  }
  long long v21 = v36;
  *(_OWORD *)(v18 + 312) = v35;
  *(_OWORD *)(v18 + 328) = v21;
  *(_OWORD *)(v18 + 344) = *(_OWORD *)v37;
  *(_OWORD *)(v18 + 354) = *(_OWORD *)&v37[10];
  long long v22 = v34;
  *(_OWORD *)(v18 + 280) = v33;
  *(_OWORD *)(v18 + 296) = v22;
  uint64_t v30 = v18;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v32, &v30);
  uint64_t result = v30;
  uint64_t v30 = 0;
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    if (!v14) {
      goto LABEL_39;
    }
  }
  else if (!v14)
  {
    goto LABEL_39;
  }
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      uint64_t result = WTF::StringImpl::destroy(v15, v23);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
LABEL_39:
  if (v12 && v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      uint64_t result = WTF::StringImpl::destroy(v13, v23);
      if (!v8) {
        goto LABEL_49;
      }
      goto LABEL_46;
    }
    *(_DWORD *)v13 -= 2;
  }
  if (!v8)
  {
LABEL_49:
    if (!v6) {
      goto LABEL_56;
    }
    goto LABEL_52;
  }
LABEL_46:
  if (!v9) {
    goto LABEL_49;
  }
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
    goto LABEL_49;
  }
  uint64_t result = WTF::StringImpl::destroy(v9, v23);
  if (!v6) {
    goto LABEL_56;
  }
LABEL_52:
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      uint64_t result = WTF::StringImpl::destroy(v7, v23);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
LABEL_56:
  if (v32) {
    return WTF::fastFree((WTF *)(v32 - 16), v23);
  }
  return result;
}

void sub_19930D368(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a19) {
    (*(void (**)(uint64_t))(*(void *)a19 + 8))(a19);
  }
  if (v28 && v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, a2);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (v27 && v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, a2);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  if (v26 && v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, a2);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  if (v25 && v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, a2);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  if (a21) {
    WTF::fastFree((WTF *)(a21 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::fireTabsReplacedEventIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v10 = 39;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v11, &v10, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  int v6 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v6 = &unk_1EE9FE830;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  long long v9 = v6;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v11, (uint64_t *)&v9);
  uint64_t result = (uint64_t)v9;
  long long v9 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v11) {
    return WTF::fastFree((WTF *)(v11 - 16), v7);
  }
  return result;
}

void sub_19930D54C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12) {
    WTF::fastFree((WTF *)(a12 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::fireTabsDetachedEventIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v12 = 35;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v13, &v12, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  int v8 = (void *)WTF::fastMalloc((WTF *)0x30);
  *int v8 = &unk_1EE9FE858;
  v8[1] = a1;
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  long long v11 = v8;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v13, (uint64_t *)&v11);
  uint64_t result = (uint64_t)v11;
  long long v11 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v13) {
    return WTF::fastFree((WTF *)(v13 - 16), v9);
  }
  return result;
}

void sub_19930D690(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12) {
    WTF::fastFree((WTF *)(a12 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::fireTabsMovedEventIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v14 = 37;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v15, &v14, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  char v10 = (void *)WTF::fastMalloc((WTF *)0x38);
  *char v10 = &unk_1EE9FE880;
  v10[1] = a1;
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  v10[6] = a5;
  uint64_t v13 = v10;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v15, (uint64_t *)&v13);
  uint64_t result = (uint64_t)v13;
  uint64_t v13 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v15) {
    return WTF::fastFree((WTF *)(v15 - 16), v11);
  }
  return result;
}

void sub_19930D7E4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12) {
    WTF::fastFree((WTF *)(a12 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::fireTabsAttachedEventIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v12 = 33;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v13, &v12, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  int v8 = (void *)WTF::fastMalloc((WTF *)0x30);
  *int v8 = &unk_1EE9FE8A8;
  v8[1] = a1;
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  long long v11 = v8;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v13, (uint64_t *)&v11);
  uint64_t result = (uint64_t)v11;
  long long v11 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v13) {
    return WTF::fastFree((WTF *)(v13 - 16), v9);
  }
  return result;
}

void sub_19930D928(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12) {
    WTF::fastFree((WTF *)(a12 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::fireTabsActivatedEventIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v12 = 32;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v13, &v12, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  int v8 = (void *)WTF::fastMalloc((WTF *)0x30);
  *int v8 = &unk_1EE9FE8D0;
  v8[1] = a1;
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  long long v11 = v8;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v13, (uint64_t *)&v11);
  uint64_t result = (uint64_t)v11;
  long long v11 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v13) {
    return WTF::fastFree((WTF *)(v13 - 16), v9);
  }
  return result;
}

void sub_19930DA6C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12) {
    WTF::fastFree((WTF *)(a12 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::fireTabsHighlightedEventIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v16 = 36;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v17, &v16, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v12, a2);
  uint64_t v14 = a3;
  int v6 = (void *)WTF::fastMalloc((WTF *)0x30);
  void *v6 = &unk_1EE9FE8F8;
  v6[1] = a1;
  v6[2] = a1;
  uint64_t v7 = v12;
  char v12 = 0;
  v6[3] = v7;
  uint64_t v8 = v13;
  uint64_t v13 = 0;
  v6[4] = v8;
  v6[5] = v14;
  long long v15 = v6;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v17, (uint64_t *)&v15);
  uint64_t v10 = (uint64_t)v15;
  long long v15 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  long long v11 = v12;
  if (v12)
  {
    char v12 = 0;
    LODWORD(v13) = 0;
    WTF::fastFree(v11, v9);
  }
  if (v17) {
    WTF::fastFree((WTF *)(v17 - 16), v9);
  }
}

void sub_19930DC18(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  uint64_t v16 = *(void *)(v14 - 40);
  if (v16) {
    WTF::fastFree((WTF *)(v16 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::fireTabsRemovedEventIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v12 = 38;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v13, &v12, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v8 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v8 = &unk_1EE9FE920;
  *(void *)(v8 + 8) = a1;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(unsigned char *)(v8 + 40) = a4;
  uint64_t v11 = v8;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v13, &v11);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v13) {
    return WTF::fastFree((WTF *)(v13 - 16), v9);
  }
  return result;
}

void sub_19930DD88(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12) {
    WTF::fastFree((WTF *)(a12 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::tabsCreate(std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::__1<std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsCreate(std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::__1<std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3)
  {
    int v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

void WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::tabsCreate(std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::__1<std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsCreate(std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::__1<std::optional<WTF::ObjectIdentifierGeneric<WTF::BlockPtrArc<void ()(objc_object  {objcproto17WKWebExtensionTab}*,NSError *)>::fromCallable::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String> &&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto17WKWebExtensionTab},NSError)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  int v6 = a3;
  if (v6)
  {
    uint64_t v7 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = WebKit::privacyPreservingDescription(v6, v8);
      *(_DWORD *)buf = 138543362;
      *(void *)int v28 = v18;
      _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "Error for open new tab: %{public}@", buf, 0xCu);
    }
    long long v9 = [(WebKit *)v6 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.create()", 0, v9, v10, v25);
    uint64_t v11 = v25[0];
    v25[0] = 0;
    *(void *)&v28[4] = v11;
    int v30 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 48));
    if (v30 != -1) {
      ((void (*)(unsigned char *, unsigned char *))off_1EE9FE430[v30])(v20, &v28[4]);
    }
    int v30 = -1;
    uint64_t v13 = v25[0];
    v25[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  else if (v5)
  {
    WebKit::WebExtensionContext::getOrCreateTab(*(uint64_t **)(a1 + 32), v5, (uint64_t)&v19);
    WebKit::WebExtensionTab::parameters(v19, (uint64_t)v20);
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)v25, (uint64_t)v20);
    std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](&v28[4], (uint64_t)v25);
    int v30 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 48));
    if (v30 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9FE430[v30])(&v26, &v28[4]);
    }
    int v30 = -1;
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25);
    if (v24)
    {
      long long v15 = v23;
      long long v23 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v14);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
    if (v22)
    {
      uint64_t v16 = v21;
      long long v21 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v14);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    long long v17 = v19;
    long long v19 = 0;
    if (v17) {
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v17);
    }
  }
  else
  {
    v28[4] = 0;
    char v29 = 0;
    int v30 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 48));
    ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9FE430[0])(v25, &v28[4]);
  }
}

void sub_19930E134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, WTF::StringImpl *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v64 = *(unsigned int *)(v62 - 64);
  if (v64 != -1) {
    ((void (*)(WTF::StringImpl **, uint64_t))off_1EE9FE430[v64])(&a33, v61);
  }

  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE4B0;
  uint64_t v2 = a1[27];
  a1[27] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[26];
  a1[26] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 10));
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 4), v4);
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &&>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9FE4B0;
  uint64_t v2 = *((void *)a1 + 27);
  *((void *)a1 + 27) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)a1 + 26);
  *((void *)a1 + 26) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 80);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 32, v4);
  uint64_t v6 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v6);
  }

  return WTF::fastFree(a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = *(_DWORD **)a2;
    if (*(void *)a2) {
      *v3 += 2;
    }
    *(void *)&long long v34 = v3;
    LODWORD(v47) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 216));
    return ((uint64_t (*)(WTF::StringImpl **, long long *))off_1EE9FE430[v47])(&v30, &v34);
  }
  uint64_t v5 = *(WebKit::WebExtensionTab **)(a1 + 8);
  ++*(_DWORD *)v5;
  long long v33 = v5;
  long long v34 = *(_OWORD *)(a1 + 16);
  LOBYTE(v35) = 0;
  char v38 = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v6 = *(WTF::StringImpl **)(a1 + 32);
    if (v6) {
      *(_DWORD *)v6 += 2;
    }
    long long v35 = v6;
    long long v7 = *(_OWORD *)(a1 + 56);
    long long v36 = *(_OWORD *)(a1 + 40);
    long long v37 = v7;
    char v38 = 1;
  }
  LOBYTE(v39) = 0;
  char v40 = 0;
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v8 = *(WTF::StringImpl **)(a1 + 80);
    if (v8) {
      *(_DWORD *)v8 += 2;
    }
    long long v39 = v8;
    char v40 = 1;
  }
  long long v9 = *(_OWORD *)(a1 + 144);
  long long v43 = *(_OWORD *)(a1 + 128);
  long long v44 = v9;
  v45[0] = *(_OWORD *)(a1 + 160);
  *(_OWORD *)((char *)v45 + 10) = *(_OWORD *)(a1 + 170);
  long long v10 = *(_OWORD *)(a1 + 112);
  long long v41 = *(_OWORD *)(a1 + 96);
  long long v42 = v10;
  long long v47 = *(_OWORD *)(a1 + 200);
  uint64_t v11 = *(void *)(a1 + 216);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  uint64_t v48 = v11;
  uint64_t v12 = WTF::fastMalloc((WTF *)0xE0);
  *(void *)uint64_t v12 = &unk_1EE9FE4D8;
  uint64_t v13 = v33;
  long long v33 = 0;
  *(void *)(v12 + 8) = v13;
  *(_OWORD *)(v12 + 16) = v34;
  std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v12 + 32), (uint64_t)&v35);
  *(unsigned char *)(v12 + 80) = 0;
  *(unsigned char *)(v12 + 88) = 0;
  if (v40)
  {
    uint64_t v14 = v39;
    long long v39 = 0;
    *(void *)(v12 + 80) = v14;
    *(unsigned char *)(v12 + 88) = 1;
  }
  long long v15 = v42;
  *(_OWORD *)(v12 + 96) = v41;
  *(_OWORD *)(v12 + 112) = v15;
  long long v16 = v43;
  long long v17 = v44;
  long long v18 = v45[0];
  *(_OWORD *)(v12 + 170) = *(_OWORD *)((char *)v45 + 10);
  *(_OWORD *)(v12 + 144) = v17;
  *(_OWORD *)(v12 + 160) = v18;
  *(_OWORD *)(v12 + 128) = v16;
  *(_WORD *)(v12 + 192) = v46;
  *(_OWORD *)(v12 + 200) = v47;
  uint64_t v19 = v48;
  *((void *)&v47 + 1) = 0;
  uint64_t v48 = 0;
  *(void *)(v12 + 216) = v19;
  uint64_t v29 = v12;
  if (*(unsigned char *)(a1 + 72))
  {
    long long v20 = *(WTF::StringImpl **)(a1 + 32);
    if (v20) {
      *(_DWORD *)v20 += 2;
    }
    int v30 = v20;
    long long v21 = *(_OWORD *)(a1 + 56);
    long long v31 = *(_OWORD *)(a1 + 40);
    long long v32 = v21;
    WebKit::WebExtensionTab::loadURL(v5, (uint64_t)&v30, &v29);
    goto LABEL_21;
  }
  LOBYTE(v30) = 0;
  LOBYTE(v31) = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(&v29);
  if ((_BYTE)v31)
  {
LABEL_21:
    long long v23 = v30;
    int v30 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v22);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
  }
  uint64_t v24 = v29;
  uint64_t v29 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = v48;
  uint64_t v48 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *((void *)&v47 + 1);
  *((void *)&v47 + 1) = 0;
  if (v26) {
    CFRelease(*(CFTypeRef *)(v26 + 8));
  }
  if (v40)
  {
    int v27 = v39;
    long long v39 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, v22);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
  if (v38)
  {
    int v28 = v35;
    long long v35 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, v22);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
  }
  uint64_t result = (uint64_t)v33;
  long long v33 = 0;
  if (result) {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
  }
  return result;
}

void sub_19930E7B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,WTF::StringImpl *a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,uint64_t a40,uint64_t a41)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a41) {
    (*(void (**)(uint64_t))(*(void *)a41 + 8))(a41);
  }
  if (a40) {
    CFRelease(*(CFTypeRef *)(a40 + 8));
  }
  if (a25 && a24)
  {
    if (*(_DWORD *)a24 == 2) {
      WTF::StringImpl::destroy(a24, a2);
    }
    else {
      *(_DWORD *)a24 -= 2;
    }
  }
  if (a23 && a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  if (a15) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a15);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_5)#1},void,$_5>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE4D8;
  uint64_t v2 = a1[27];
  a1[27] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[26];
  a1[26] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 10));
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 4), v4);
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_5)#1},void,$_5>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9FE4D8;
  uint64_t v2 = *((void *)a1 + 27);
  *((void *)a1 + 27) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)a1 + 26);
  *((void *)a1 + 26) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 80);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 32, v4);
  uint64_t v6 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v6);
  }

  return WTF::fastFree(a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_5)#1},void,$_5>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = *(_DWORD **)a2;
    if (*(void *)a2) {
      *v3 += 2;
    }
    *(void *)&long long v31 = v3;
    LODWORD(v41) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 216));
    return ((uint64_t (*)(WTF::StringImpl **, long long *))off_1EE9FE430[v41])(&v28, &v31);
  }
  else
  {
    uint64_t v5 = *(WebKit::WebExtensionTab **)(a1 + 8);
    ++*(_DWORD *)v5;
    int v30 = v5;
    long long v31 = *(_OWORD *)(a1 + 16);
    std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](v32, a1 + 32);
    LOBYTE(v34) = 0;
    char v35 = 0;
    if (*(unsigned char *)(a1 + 88))
    {
      uint64_t v6 = *(WTF::StringImpl **)(a1 + 80);
      *(void *)(a1 + 80) = 0;
      long long v34 = v6;
      char v35 = 1;
    }
    long long v7 = *(_OWORD *)(a1 + 144);
    long long v38 = *(_OWORD *)(a1 + 128);
    long long v39 = v7;
    v40[0] = *(_OWORD *)(a1 + 160);
    *(_OWORD *)((char *)v40 + 10) = *(_OWORD *)(a1 + 170);
    long long v8 = *(_OWORD *)(a1 + 112);
    long long v36 = *(_OWORD *)(a1 + 96);
    long long v37 = v8;
    long long v41 = *(_OWORD *)(a1 + 200);
    uint64_t v9 = *(void *)(a1 + 216);
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    uint64_t v42 = v9;
    uint64_t v10 = WTF::fastMalloc((WTF *)0xE0);
    *(void *)uint64_t v10 = &unk_1EE9FE500;
    uint64_t v11 = v30;
    int v30 = 0;
    *(void *)(v10 + 8) = v11;
    *(_OWORD *)(v10 + 16) = v31;
    std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v10 + 32), (uint64_t)v32);
    *(unsigned char *)(v10 + 80) = 0;
    *(unsigned char *)(v10 + 88) = 0;
    if (v35)
    {
      uint64_t v12 = v34;
      long long v34 = 0;
      *(void *)(v10 + 80) = v12;
      *(unsigned char *)(v10 + 88) = 1;
    }
    long long v13 = v37;
    *(_OWORD *)(v10 + 96) = v36;
    *(_OWORD *)(v10 + 112) = v13;
    long long v14 = v38;
    long long v15 = v39;
    long long v16 = v40[0];
    *(_OWORD *)(v10 + 170) = *(_OWORD *)((char *)v40 + 10);
    *(_OWORD *)(v10 + 144) = v15;
    *(_OWORD *)(v10 + 160) = v16;
    *(_OWORD *)(v10 + 128) = v14;
    *(_OWORD *)(v10 + 200) = v41;
    uint64_t v17 = v42;
    *((void *)&v41 + 1) = 0;
    uint64_t v42 = 0;
    *(void *)(v10 + 216) = v17;
    uint64_t v27 = v10;
    if (*(unsigned char *)(a1 + 173)
      && (int v18 = *(unsigned __int8 *)(a1 + 172), v18 != WebKit::WebExtensionTab::isPinned(v5)))
    {
      if (!*(unsigned char *)(a1 + 173))
      {
        std::__throw_bad_optional_access[abi:sn180100]();
        __break(1u);
      }
      WebKit::WebExtensionTab::setPinned((uint64_t)v5, *(unsigned __int8 *)(a1 + 172), &v27, v19);
    }
    else
    {
      LOBYTE(v28) = 0;
      char v29 = 0;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(&v27);
      if (v29)
      {
        long long v21 = v28;
        int v28 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v20);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
      }
    }
    uint64_t v22 = v27;
    uint64_t v27 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    uint64_t v23 = v42;
    uint64_t v42 = 0;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
    uint64_t v24 = *((void *)&v41 + 1);
    *((void *)&v41 + 1) = 0;
    if (v24) {
      CFRelease(*(CFTypeRef *)(v24 + 8));
    }
    if (v35)
    {
      uint64_t v25 = v34;
      long long v34 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v20);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
    }
    if (v33)
    {
      uint64_t v26 = v32[0];
      v32[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, v20);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
    }
    uint64_t result = (uint64_t)v30;
    int v30 = 0;
    if (result) {
      return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
    }
  }
  return result;
}

void sub_19930EDE4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,WTF::StringImpl *a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,uint64_t a38,uint64_t a39)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a39) {
    (*(void (**)(uint64_t))(*(void *)a39 + 8))(a39);
  }
  if (a38) {
    CFRelease(*(CFTypeRef *)(a38 + 8));
  }
  if (a23 && a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, a2);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  if (a21 && a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a13) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a13);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_5)#1}::operator()($_5)::{lambda($_5)#1},void,$_5>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE500;
  uint64_t v2 = a1[27];
  a1[27] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[26];
  a1[26] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 10));
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 4), v4);
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_5)#1}::operator()($_5)::{lambda($_5)#1},void,$_5>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9FE500;
  uint64_t v2 = *((void *)a1 + 27);
  *((void *)a1 + 27) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)a1 + 26);
  *((void *)a1 + 26) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 80);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 32, v4);
  uint64_t v6 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v6);
  }

  return WTF::fastFree(a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_5::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_5)#1}::operator()($_5)::{lambda($_5)#1},void,$_5>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = *(_DWORD **)a2;
    if (*(void *)a2) {
      *v3 += 2;
    }
    *(void *)&long long v31 = v3;
    DWORD2(v41) = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 216));
    return ((uint64_t (*)(WTF::StringImpl **, long long *))off_1EE9FE430[DWORD2(v41)])(&v28, &v31);
  }
  else
  {
    uint64_t v5 = *(WebKit::WebExtensionTab **)(a1 + 8);
    ++*(_DWORD *)v5;
    int v30 = v5;
    long long v31 = *(_OWORD *)(a1 + 16);
    std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](v32, a1 + 32);
    LOBYTE(v34) = 0;
    char v35 = 0;
    if (*(unsigned char *)(a1 + 88))
    {
      uint64_t v6 = *(WTF::StringImpl **)(a1 + 80);
      *(void *)(a1 + 80) = 0;
      long long v34 = v6;
      char v35 = 1;
    }
    long long v7 = *(_OWORD *)(a1 + 144);
    long long v38 = *(_OWORD *)(a1 + 128);
    long long v39 = v7;
    v40[0] = *(_OWORD *)(a1 + 160);
    *(_OWORD *)((char *)v40 + 10) = *(_OWORD *)(a1 + 170);
    long long v8 = *(_OWORD *)(a1 + 112);
    long long v36 = *(_OWORD *)(a1 + 96);
    long long v37 = v8;
    long long v41 = *(_OWORD *)(a1 + 200);
    uint64_t v9 = *(void *)(a1 + 216);
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    uint64_t v42 = v9;
    uint64_t v10 = WTF::fastMalloc((WTF *)0xD8);
    *(void *)uint64_t v10 = &unk_1EE9FE528;
    uint64_t v11 = v30;
    int v30 = 0;
    *(void *)(v10 + 8) = v11;
    *(_OWORD *)(v10 + 16) = v31;
    std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v10 + 32), (uint64_t)v32);
    *(unsigned char *)(v10 + 80) = 0;
    *(unsigned char *)(v10 + 88) = 0;
    if (v35)
    {
      uint64_t v12 = v34;
      long long v34 = 0;
      *(void *)(v10 + 80) = v12;
      *(unsigned char *)(v10 + 88) = 1;
    }
    long long v13 = v37;
    *(_OWORD *)(v10 + 96) = v36;
    *(_OWORD *)(v10 + 112) = v13;
    long long v14 = v38;
    long long v15 = v39;
    long long v16 = v40[0];
    *(_OWORD *)(v10 + 170) = *(_OWORD *)((char *)v40 + 10);
    *(_OWORD *)(v10 + 144) = v15;
    *(_OWORD *)(v10 + 160) = v16;
    *(_OWORD *)(v10 + 128) = v14;
    *(_OWORD *)(v10 + 192) = v41;
    uint64_t v17 = v42;
    *((void *)&v41 + 1) = 0;
    uint64_t v42 = 0;
    *(void *)(v10 + 208) = v17;
    uint64_t v27 = v10;
    if (*(unsigned char *)(a1 + 177)
      && (int v18 = *(unsigned __int8 *)(a1 + 176), v18 != WebKit::WebExtensionTab::isMuted(v5)))
    {
      if (!*(unsigned char *)(a1 + 177))
      {
        std::__throw_bad_optional_access[abi:sn180100]();
        __break(1u);
      }
      WebKit::WebExtensionTab::setMuted((uint64_t)v5, *(unsigned __int8 *)(a1 + 176), &v27, v19);
    }
    else
    {
      LOBYTE(v28) = 0;
      char v29 = 0;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(&v27);
      if (v29)
      {
        long long v21 = v28;
        int v28 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v20);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
      }
    }
    uint64_t v22 = v27;
    uint64_t v27 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    uint64_t v23 = v42;
    uint64_t v42 = 0;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
    uint64_t v24 = *((void *)&v41 + 1);
    *((void *)&v41 + 1) = 0;
    if (v24) {
      CFRelease(*(CFTypeRef *)(v24 + 8));
    }
    if (v35)
    {
      uint64_t v25 = v34;
      long long v34 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v20);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
    }
    if (v33)
    {
      uint64_t v26 = v32[0];
      v32[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, v20);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
    }
    uint64_t result = (uint64_t)v30;
    int v30 = 0;
    if (result) {
      return WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
    }
  }
  return result;
}

void sub_19930F420(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,WTF::StringImpl *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a37) {
    (*(void (**)(uint64_t))(*(void *)a37 + 8))(a37);
  }
  if (a36) {
    CFRelease(*(CFTypeRef *)(a36 + 8));
  }
  if (a22 && a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, a2);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  if (a20 && a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a12) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a12);
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit19WebExtensionContext10tabsUpdateENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yLS8_1EEEEERKNS2_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSB_ISF_EENS_6StringEEEEEEEN3__5clEONSL_IvSN_EEENUlSV_E_clESV_ENUlSV_E_clESV_EUlSV_E_vJSV_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9FE528;
  uint64_t v2 = a1[26];
  a1[26] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[25];
  a1[25] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 10));
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 4), v4);
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v5);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit19WebExtensionContext10tabsUpdateENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yLS8_1EEEEERKNS2_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSB_ISF_EENS_6StringEEEEEEEN3__5clEONSL_IvSN_EEENUlSV_E_clESV_ENUlSV_E_clESV_EUlSV_E_vJSV_EED0Ev(WTF *a1)
{
  *(void *)a1 = &unk_1EE9FE528;
  uint64_t v2 = *((void *)a1 + 26);
  *((void *)a1 + 26) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)a1 + 25);
  *((void *)a1 + 25) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 80);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 32, v4);
  uint64_t v6 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v6);
  }

  return WTF::fastFree(a1, v5);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit19WebExtensionContext10tabsUpdateENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yLS8_1EEEEERKNS2_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSB_ISF_EENS_6StringEEEEEEEN3__5clEONSL_IvSN_EEENUlSV_E_clESV_ENUlSV_E_clESV_EUlSV_E_vJSV_EE4callESV_(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = *(_DWORD **)a2;
    if (*(void *)a2) {
      *v3 += 2;
    }
    long long v20 = v3;
    int v21 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 208));
    return ((uint64_t (*)(WebKit::WebExtensionTab **, _DWORD **))off_1EE9FE430[v21])(&v18, &v20);
  }
  uint64_t v5 = *(WebKit::WebExtensionTab **)(a1 + 8);
  ++*(_DWORD *)v5;
  uint64_t v6 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  long long v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v7 = &unk_1EE9FE550;
  v7[1] = v5;
  void v7[2] = v6;
  long long v16 = v7;
  long long v8 = *(uint64_t **)(a1 + 192);
  WebKit::WebExtensionTab::parentTab(v5, &v18);
  if (*(unsigned char *)(a1 + 160))
  {
    WebKit::WebExtensionContext::getTab(v8, *(void *)(a1 + 152), 0, &v17);
    uint64_t v10 = v17;
    uint64_t v11 = v18;
    if (v18 != v17)
    {
      if (v17) {
        ++*(_DWORD *)v17;
      }
      goto LABEL_11;
    }
LABEL_14:
    LOBYTE(v19) = 0;
    LOBYTE(v20) = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)&v16);
    if ((_BYTE)v20)
    {
      long long v14 = v19;
      uint64_t v19 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    goto LABEL_19;
  }
  uint64_t v10 = 0;
  uint64_t v17 = 0;
  uint64_t v11 = v18;
  if (!v18) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v19 = v10;
  WebKit::WebExtensionTab::setParentTab((uint64_t)v5, (uint64_t *)&v19, (uint64_t *)&v16, v9);
  uint64_t v12 = v19;
  uint64_t v19 = 0;
  if (v12) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v12);
  }
  uint64_t v10 = v11;
LABEL_19:
  long long v15 = v17;
  uint64_t v17 = 0;
  if (v15) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v15);
  }
  int v18 = 0;
  if (v10) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v10);
  }
  uint64_t result = (uint64_t)v16;
  long long v16 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_19930F914(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a11) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a11);
  }
  if (v37) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v37);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZZZZN6WebKit19WebExtensionContext10tabsUpdateENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yLS8_1EEEEERKNS2_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSB_ISF_EENS_6StringEEEEEEEN3__5clEONSL_IvSN_EEENUlSV_E_clESV_ENUlSV_E_clESV_ENUlSV_E_clESV_EUlSV_E_vJSV_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9FE550;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZZN6WebKit19WebExtensionContext10tabsUpdateENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yLS8_1EEEEERKNS2_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSB_ISF_EENS_6StringEEEEEEEN3__5clEONSL_IvSN_EEENUlSV_E_clESV_ENUlSV_E_clESV_ENUlSV_E_clESV_EUlSV_E_vJSV_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE550;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZZZZN6WebKit19WebExtensionContext10tabsUpdateENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yLS8_1EEEEERKNS2_25WebExtensionTabParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSB_ISF_EENS_6StringEEEEEEEN3__5clEONSL_IvSN_EEENUlSV_E_clESV_ENUlSV_E_clESV_ENUlSV_E_clESV_EUlSV_E_vJSV_EE4callESV_(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = *(_DWORD **)a2;
    if (*(void *)a2) {
      *v3 += 2;
    }
    v13[0] = v3;
    int v14 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 16));
    return (WTF::StringImpl *)((uint64_t (*)(unsigned char *, void *))off_1EE9FE430[v14])(v11, v13);
  }
  else
  {
    WebKit::WebExtensionTab::parameters(*(WebKit::WebExtensionTab **)(a1 + 8), (uint64_t)v6);
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)v11, (uint64_t)v6);
    std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](v13, (uint64_t)v11);
    int v14 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 16));
    if (v14 != -1) {
      ((void (*)(char *, void *))off_1EE9FE430[v14])(&v12, v13);
    }
    int v14 = -1;
    uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11);
    if (v10)
    {
      uint64_t result = v9;
      uint64_t v9 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    if (v8)
    {
      uint64_t result = v7;
      long long v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void sub_19930FCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, WTF::StringImpl *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v34 = *(unsigned int *)(v32 - 48);
  if (v34 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE9FE430[v34])(v32 - 241, v31);
  }
  *(_DWORD *)(v32 - 48) = -1;
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a31);
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, v35);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (a16 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v35);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>>,WTF::String> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FE578;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>>,WTF::String> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FE578;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext::tabsDuplicate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>>,WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)(a1 + 8);
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4)
  {
    if (v4 != 1)
    {
      uint64_t v11 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      if (v21 != -1) {
        ((void (*)(unsigned char *, uint64_t))off_1EE9FE430[v21])(v17, v2);
      }
      _Unwind_Resume(v11);
    }
    uint64_t v5 = *(WebKit::WebExtensionTab **)a2;
    if (*(void *)a2) {
      *(_DWORD *)v5 += 2;
    }
    v19[0] = v5;
    int v21 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 8));
    return ((uint64_t (*)(unsigned char *, void *))off_1EE9FE430[v21])(v17, v19);
  }
  long long v7 = *(WebKit::WebExtensionTab **)a2;
  if (!*(void *)a2)
  {
    LOBYTE(v19[0]) = 0;
    char v20 = 0;
    int v21 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 8));
    return ((uint64_t (*)(unsigned char *, void *))off_1EE9FE430[v21])(v17, v19);
  }
  ++*(_DWORD *)v7;
  WebKit::WebExtensionTab::parameters(v7, (uint64_t)v12);
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)v17, (uint64_t)v12);
  std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](v19, (uint64_t)v17);
  int v21 = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()(v3);
  if (v21 != -1) {
    ((void (*)(char *, void *))off_1EE9FE430[v21])(&v18, v19);
  }
  int v21 = -1;
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17);
  if (v16)
  {
    uint64_t v9 = v15;
    uint64_t v15 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  if (v14)
  {
    char v10 = v13;
    long long v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  return WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v7);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE5A0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE5A0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsGet(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  WebKit::WebExtensionTab::parameters(*(WebKit::WebExtensionTab **)(a1 + 8), (uint64_t)v4);
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)v9, (uint64_t)v4);
  std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](v11, (uint64_t)v9);
  int v12 = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 16));
  if (v12 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9FE430[v12])(&v10, v11);
  }
  int v12 = -1;
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v9);
  if (v8)
  {
    uint64_t result = v7;
    long long v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v6)
  {
    uint64_t result = v5;
    uint64_t v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_199310384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, WTF::StringImpl *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v34 = *(unsigned int *)(v32 - 48);
  if (v34 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE9FE430[v34])(v32 - 241, v31);
  }
  *(_DWORD *)(v32 - 48) = -1;
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a31);
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, v35);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (a16 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v35);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE5C8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE5C8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsGetCurrent(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  WebKit::WebExtensionTab::parameters(*(WebKit::WebExtensionTab **)(a1 + 8), (uint64_t)v4);
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebExtensionTabParameters>((uint64_t)v9, (uint64_t)v4);
  std::__optional_move_base<WebKit::WebExtensionTabParameters,false>::__optional_move_base[abi:sn180100](v11, (uint64_t)v9);
  int v12 = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 16));
  if (v12 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9FE430[v12])(&v10, v11);
  }
  int v12 = -1;
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v9);
  if (v8)
  {
    uint64_t result = v7;
    long long v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v6)
  {
    uint64_t result = v5;
    uint64_t v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_199310668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, WTF::StringImpl *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v34 = *(unsigned int *)(v32 - 48);
  if (v34 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE9FE430[v34])(v32 - 241, v31);
  }
  *(_DWORD *)(v32 - 48) = -1;
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a31);
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, v35);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (a16 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v35);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      uint64_t *v4 = 0;
      if (v6) {
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  long long v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9FE5F0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9FE5F0;
  uint64_t v3 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsQuery(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionTabQueryParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unsigned int v2 = *(_DWORD *)(result + 20);
  if (v2)
  {
    if (v2 >= 0x1745D18)
    {
      __break(0xC471u);
      return result;
    }
    unsigned int v3 = 176 * v2;
    uint64_t v4 = WTF::fastMalloc((WTF *)(176 * v2));
    unsigned int v2 = v3 / 0xB0;
    LODWORD(v15) = v3 / 0xB0;
    uint64_t v14 = v4;
    uint64_t v5 = *(unsigned int *)(v1 + 20);
    if (v5)
    {
      uint64_t v6 = *(WebKit::WebExtensionTab ***)(v1 + 8);
      uint64_t v7 = 8 * v5;
      do
      {
        WebKit::WebExtensionTab::parameters(*v6, (uint64_t)&v16);
        WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck(&v14, (uint64_t)&v16);
        if (v22)
        {
          uint64_t v9 = v21;
          int v21 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2) {
              WTF::StringImpl::destroy(v9, v8);
            }
            else {
              *(_DWORD *)v9 -= 2;
            }
          }
        }
        if (v20)
        {
          char v10 = v19;
          uint64_t v19 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2) {
              WTF::StringImpl::destroy(v10, v8);
            }
            else {
              *(_DWORD *)v10 -= 2;
            }
          }
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
      uint64_t v4 = v14;
      unsigned int v2 = v15;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v16 = v4;
  int v11 = HIDWORD(v15);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unsigned int v17 = v2;
  int v18 = v11;
  LODWORD(v19) = 0;
  uint64_t v12 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 16))(v12, &v16);
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  if (v19 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9FE608[v19])(&v23, &v16);
  }
  return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v13);
}

void sub_199310A3C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, WTF::StringImpl *a20,char a21)
{
}

__n128 WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck(uint64_t *a1, uint64_t a2)
{
  unsigned int v4 = *((_DWORD *)a1 + 3);
  uint64_t v5 = *a1;
  uint64_t v6 = *a1 + 176 * v4;
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
  std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v6 + 16), a2 + 16);
  *(unsigned char *)(v6 + 64) = 0;
  uint64_t v7 = v6 + 64;
  *(unsigned char *)(v7 + 8) = 0;
  if (*(unsigned char *)(a2 + 72))
  {
    uint64_t v8 = *(void *)(a2 + 64);
    *(void *)(a2 + 64) = 0;
    *(void *)uint64_t v7 = v8;
    *(unsigned char *)(v7 + 8) = 1;
  }
  uint64_t v9 = v5 + 176 * v4;
  long long v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v9 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v9 + 96) = v10;
  __n128 result = *(__n128 *)(a2 + 112);
  long long v12 = *(_OWORD *)(a2 + 128);
  long long v13 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v9 + 154) = *(_OWORD *)(a2 + 154);
  *(_OWORD *)(v9 + 128) = v12;
  *(_OWORD *)(v9 + 144) = v13;
  *(__n128 *)(v9 + 112) = result;
  ++*((_DWORD *)a1 + 3);
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE628;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE628;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsDetectLanguage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  if (WebKit::WebExtensionTab::extensionHasPermission(*(WebKit::WebExtensionTab **)(a1 + 8)))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    uint64_t v5 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v5 = &unk_1EE9FE650;
    *((void *)v5 + 1) = v4;
    long long v12 = v5;
    WebKit::WebExtensionTab::detectWebpageLocale(v3, (uint64_t *)&v12, v6, v7);
    __n128 result = v12;
    long long v12 = 0;
    if (result) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.detectLanguage()", 0, &cfstr_ThisExtensionD.isa, v2, &v11);
    uint64_t v9 = v11;
    int v11 = 0;
    long long v12 = v9;
    int v13 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()((uint64_t *)(a1 + 16));
    if (v13 != -1) {
      ((void (*)(char *, WTF::StringImpl **))off_1EE9FE460[v13])(&v14, &v12);
    }
    int v13 = -1;
    __n128 result = v11;
    int v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_199310DFC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15, char a16)
{
  if (a11 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9FE460[a11])(&a16, &a10);
  }
  a11 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext18tabsDetectLanguageENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yLS8_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESJ_EEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISS_EENS_10HashTraitsISS_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_IU8__strongP8NSLocaleSJ_EEE_vJS1A_EED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FE650;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext18tabsDetectLanguageENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yLS8_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESJ_EEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISS_EENS_10HashTraitsISS_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_IU8__strongP8NSLocaleSJ_EEE_vJS1A_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FE650;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext18tabsDetectLanguageENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yLS8_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESJ_EEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashISS_EENS_10HashTraitsISS_EENS_15HashTableTraitsEEESY_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSI_IU8__strongP8NSLocaleSJ_EEE_vJS1A_EE4callES1A_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4)
  {
    if (v4 != 1)
    {
      int v11 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      if (v15 != -1) {
        ((void (*)(char *, WebKit **))off_1EE9FE460[v15])(&v16, &v14);
      }
      int v15 = -1;
      long long v12 = v13;
      int v13 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v10);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }

      _Unwind_Resume(v11);
    }
    uint64_t v5 = *(WebKit **)a2;
    if (*(void *)a2) {
      *(_DWORD *)v5 += 2;
    }
    char v14 = v5;
    int v15 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()((uint64_t *)(a1 + 8));
    ((void (*)(WTF::StringImpl **, WebKit **))off_1EE9FE460[v15])(&v13, &v14);
  }
  else
  {
    uint64_t v6 = WebKit::toWebAPI(*(WebKit **)a2, (NSLocale *)a2);
    MEMORY[0x19972EAD0](&v13, v6);
    uint64_t v7 = v13;
    int v13 = 0;
    char v14 = v7;
    int v15 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()(v3);
    if (v15 != -1) {
      ((void (*)(char *, WebKit **))off_1EE9FE460[v15])(&v16, &v14);
    }
    int v15 = -1;
    uint64_t v9 = v13;
    int v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsCaptureVisibleTab(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionTabImageFormat,unsigned char,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE678;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsCaptureVisibleTab(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionTabImageFormat,unsigned char,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE678;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsCaptureVisibleTab(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionTabImageFormat,unsigned char,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  if (WebKit::WebExtensionTab::extensionHasPermission(*(WebKit::WebExtensionTab **)(a1 + 8)))
  {
    uint64_t v3 = *(WebKit::WebExtensionTab **)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    __int16 v5 = *(unsigned __int8 *)(a1 + 16);
    __int16 v6 = *(unsigned __int8 *)(a1 + 17);
    uint64_t v7 = WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v7 = &unk_1EE9FE6A0;
    *(void *)(v7 + 8) = v4;
    *(_WORD *)(v7 + 16) = v5 | (v6 << 8);
    v12[0] = v7;
    WebKit::WebExtensionTab::captureVisibleWebpage(v3, v12);
    __n128 result = (WTF::StringImpl *)v12[0];
    v12[0] = 0;
    if (result) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.captureVisibleTab()", 0, &cfstr_EitherTheActiv.isa, v2, &v11);
    uint64_t v9 = v11;
    int v11 = 0;
    v12[0] = (uint64_t)v9;
    int v13 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String> &&)>::operator()((uint64_t *)(a1 + 24));
    if (v13 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9FE470[v13])(&v14, v12);
    }
    int v13 = -1;
    __n128 result = v11;
    int v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1993113B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9FE470[a15])(v15 - 33, &a10);
  }
  a15 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext21tabsCaptureVisibleTabENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS4_INS2_32WebExtensionWindowIdentifierTypeES7_yLS8_1EEEEENS2_26WebExtensionTabImageFormatEhONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_3URLENS_6StringEEEEEEEN3__0clINS_7HashSetISK_NS_11DefaultHashISK_EENS_10HashTraitsISK_EENS_15HashTableTraitsEEESZ_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSJ_IU8__strongP7UIImageSL_EEE_vJS1B_EED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FE6A0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext21tabsCaptureVisibleTabENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS4_INS2_32WebExtensionWindowIdentifierTypeES7_yLS8_1EEEEENS2_26WebExtensionTabImageFormatEhONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_3URLENS_6StringEEEEEEEN3__0clINS_7HashSetISK_NS_11DefaultHashISK_EENS_10HashTraitsISK_EENS_15HashTableTraitsEEESZ_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSJ_IU8__strongP7UIImageSL_EEE_vJS1B_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FE6A0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext21tabsCaptureVisibleTabENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS4_INS2_32WebExtensionWindowIdentifierTypeES7_yLS8_1EEEEENS2_26WebExtensionTabImageFormatEhONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_3URLENS_6StringEEEEEEEN3__0clINS_7HashSetISK_NS_11DefaultHashISK_EENS_10HashTraitsISK_EENS_15HashTableTraitsEEESZ_NS_8WallTimeEEEDaOT_OT0_T1_EUlONSJ_IU8__strongP7UIImageSL_EEE_vJS1B_EE4callES1B_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4)
  {
    if (v4 != 1)
    {
      long long v12 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      if (v21 != -1) {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9FE470[v21])(&v15, &v18);
      }

      _Unwind_Resume(v12);
    }
    __int16 v5 = *(WTF::StringImpl **)a2;
    if (*(void *)a2) {
      *(_DWORD *)v5 += 2;
    }
    int v18 = v5;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String> &&)>::operator()((uint64_t *)(a1 + 8));
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9FE478[0])(&v15, &v18);
  }
  else
  {
    id v6 = *(id *)a2;
    uint64_t v7 = v6;
    if (v6 && [v6 CGImage])
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      int v13 = v22;
      WebCore::dataURL();
      MEMORY[0x19972E890](&v15, &v14, 0);
      uint64_t v8 = v15;
      uint64_t v15 = 0;
      int v18 = v8;
      long long v19 = v16;
      long long v20 = v17;
      LODWORD(v16) = v16 & 0xFFFFFFFE;
      int v21 = 0;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String> &&)>::operator()(v3);
      if (v21 != -1) {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9FE470[v21])(&v22, &v18);
      }
      int v21 = -1;
      long long v10 = v15;
      uint64_t v15 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      int v11 = v14;
      char v14 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v9);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v9);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
    else
    {
      WTF::URL::URL((WTF::URL *)&v18);
      int v21 = 0;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::URL,WTF::String> &&)>::operator()(v3);
      if (v21 != -1) {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9FE470[v21])(&v15, &v18);
      }
    }
  }
}

void sub_1993118B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  if (a21 != -1) {
    ((void (*)(char *, char *))off_1EE9FE470[a21])(&a11, &a16);
  }
  JUMPOUT(0x1993118ACLL);
}

unsigned int *WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::remove(unsigned int *result, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)result;
  uint64_t v4 = *a2;
  *a2 = 0;
  if (v4) {
    __n128 result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }
  *a2 = -1;
  ++*(_DWORD *)(*v3 - 16);
  uint64_t v5 = *v3;
  if (*v3) {
    int v6 = *(_DWORD *)(v5 - 12) - 1;
  }
  else {
    int v6 = -1;
  }
  *(_DWORD *)(v5 - 12) = v6;
  uint64_t v7 = *v3;
  if (*v3)
  {
    unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
    unsigned int v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
    {
      return (unsigned int *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::rehash(v3, v9 >> 1, 0);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE6C8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE6C8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v8);
    if (v9)
    {
      uint64_t v4 = v8;
      unsigned int v8 = 0;
      long long v10 = v4;
      int v11 = 0;
      __n128 result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()((uint64_t *)(a1 + 16));
      if (v11 != -1) {
        __n128 result = (WTF::StringImpl *)((uint64_t (*)(char *, WTF::StringImpl **))off_1EE9FE460[v11])(&v12, &v10);
      }
      if (v9)
      {
        __n128 result = v8;
        unsigned int v8 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return (WTF::StringImpl *)IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v7 = a1 + 8;
    return (WTF::StringImpl *)IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(v7);
  }
  return result;
}

void sub_199311B98(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, int a17)
{
  if (a17 != -1) {
    ((void (*)(uint64_t, __int16 *))off_1EE9FE460[a17])(v17 - 17, &a13);
  }
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeMessageEvent,WebKit::WebExtensionContext::tabsSendMessage(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)> &&)::$_0>(uint64_t a1)
{
  uint64_t v2 = 0;
  int v3 = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WTF::String> &&)>::operator()((uint64_t *)(a1 + 8));
  return ((uint64_t (*)(char *, uint64_t *))off_1EE9FE460[v3])(&v4, &v2);
}

void sub_199311C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9FE460[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE6F0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE6F0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>(a2, (uint64_t)&v7);
    if (v8)
    {
      char v4 = *(uint64_t **)(a1 + 8);
      WebKit::WebExtensionContext::addPorts((uint64_t)v4, *(unsigned char *)(a1 + 24), 0, *(void *)(a1 + 32), &v7);
      WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded((uint64_t)v4, *(unsigned __int8 *)(a1 + 24), *(void *)(a1 + 32));
      WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded((uint64_t)v4, 0, *(void *)(a1 + 32));
      WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v4, 0, *(unsigned __int8 *)(a1 + 24), *(void *)(a1 + 32));
      WebKit::WebExtensionContext::clearQueuedPortMessages((uint64_t)v4, *(unsigned __int8 *)(a1 + 24), *(void *)(a1 + 32));
      WebKit::WebExtensionContext::clearQueuedPortMessages((uint64_t)v4, 0, *(void *)(a1 + 32));
      if (v8)
      {
        if (v7) {
          WTF::fastFree((WTF *)(v7 - 2), v5);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v6 = a1 + 8;
    IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(v6);
  }
}

void sub_199311E3C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10)
  {
    if (a9) {
      WTF::fastFree((WTF *)(a9 - 16), a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContextProxy::DispatchRuntimeConnectEvent,WebKit::WebExtensionContext::tabsConnect(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>(uint64_t a1)
{
  char v4 = 0;
  uint64_t v2 = *(uint64_t **)a1;
  WebKit::WebExtensionContext::addPorts(*(void *)a1, *(unsigned char *)(a1 + 16), 0, *(void *)(a1 + 24), &v4);
  WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded((uint64_t)v2, *(unsigned __int8 *)(a1 + 16), *(void *)(a1 + 24));
  WebKit::WebExtensionContext::fireQueuedPortMessageEventsIfNeeded((uint64_t)v2, 0, *(void *)(a1 + 24));
  WebKit::WebExtensionContext::firePortDisconnectEventIfNeeded(v2, 0, *(unsigned __int8 *)(a1 + 16), *(void *)(a1 + 24));
  WebKit::WebExtensionContext::clearQueuedPortMessages((uint64_t)v2, *(unsigned __int8 *)(a1 + 16), *(void *)(a1 + 24));
  WebKit::WebExtensionContext::clearQueuedPortMessages((uint64_t)v2, 0, *(void *)(a1 + 24));
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 2), v3);
  }
}

void sub_199311F0C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::fastFree((WTF *)(a10 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::toWebExtensionError<unsigned long long>(WebKit *a1@<X0>, NSString *a2@<X1>, NSString *a3@<X2>, NSString *a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = WebKit::toErrorString(a1, a2, a3, a4, *a4);
  MEMORY[0x19972EAD0](&v7, v6);
  *a5 = v7;
  uint64_t v7 = 0;
}

void sub_199311F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<void,WTF::String>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FE718;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<void,WTF::String>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FE718;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>,void,std::experimental::fundamentals_v3::expected<void,WTF::String>>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String>)>>::deref(uint64_t result)
{
  uint64_t v1 = (WTF *)result;
  if (*(_DWORD *)result == 1)
  {
    if (*(void *)(result + 8))
    {
      uint64_t v2 = (WTF::StringImpl **)(result + 16);
      LOBYTE(v7) = 0;
      char v8 = 0;
      if (*(unsigned char *)(result + 24))
      {
        uint64_t v3 = *v2;
        if (*v2) {
          *(_DWORD *)v3 += 2;
        }
        uint64_t v7 = v3;
        char v8 = 1;
      }
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String>)>::operator()((uint64_t *)(result + 8), (uint64_t)&v7);
      if (v8 && v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v4);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
    }
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1 + 16);
    uint64_t v6 = *((void *)v1 + 1);
    *((void *)v1 + 1) = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    return WTF::fastFree(v1, v5);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void sub_199312198(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v11);
  uint64_t v13 = *v10;
  *long long v10 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    uint64_t v7 = v3;
    char v8 = 1;
  }
  else
  {
    LOBYTE(v7) = 0;
    char v8 = 0;
  }
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v2 + 16))(v2, &v7);
  if (v8)
  {
    uint64_t v5 = v7;
    uint64_t v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

void sub_1993122D8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsRemove(WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FE740;
  a1[1] = 0;
  if (v2) {
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String>)>>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsRemove(WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FE740;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String>)>>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsRemove(WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &>::call(uint64_t *result, WTF::StringImpl *a2)
{
  if (!*((unsigned char *)a2 + 8)) {
    return result;
  }
  uint64_t v2 = result[1];
  uint64_t v3 = *(WTF::StringImpl **)a2;
  if (!*(void *)a2)
  {
    uint64_t v6 = *(void *)(v2 + 8);
    __n128 result = (uint64_t *)(v2 + 8);
    if (!v6) {
      return result;
    }
    goto LABEL_4;
  }
  *(_DWORD *)v3 += 2;
  uint64_t v4 = *(void *)(v2 + 8);
  __n128 result = (uint64_t *)(v2 + 8);
  if (v4)
  {
LABEL_4:
    uint64_t v7 = v3;
    char v8 = 1;
    __n128 result = (uint64_t *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String>)>::operator()(result, (uint64_t)&v7);
    if (v8)
    {
      __n128 result = (uint64_t *)v7;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          return (uint64_t *)WTF::StringImpl::destroy(v7, v5);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
    }
    return result;
  }
  if (*(_DWORD *)v3 == 2)
  {
    return (uint64_t *)WTF::StringImpl::destroy(v3, a2);
  }
  else
  {
    *(_DWORD *)v3 -= 2;
  }
  return result;
}

void sub_1993124AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE768;
  WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9FE768;
  WebKit::WebExtensionContext::scriptingExecuteScript(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)a1 + 8);

  return WTF::fastFree(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsExecuteScript(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (WebKit::WebExtensionTab::extensionHasPermission(*(WebKit::WebExtensionTab **)(a1 + 24)))
  {
    uint64_t v5 = WebKit::WebExtensionTab::webView(*(WebKit::WebExtensionTab **)(a1 + 24));
    if (!v5)
    {
      WebKit::toWebExtensionError<>((WebKit *)@"tabs.executeScript()", 0, &cfstr_CouldNotExecut_0.isa, v4, &v41);
      uint64_t v13 = v41;
      long long v41 = 0;
      uint64_t v49 = v13;
      int v51 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 168));
      if (v51 != -1) {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9FE490[v51])(&v46, &v49);
      }
      int v51 = -1;
      uint64_t v15 = v41;
      long long v41 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v14);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      goto LABEL_70;
    }
    LOBYTE(v49) = 0;
    char v52 = 0;
    if (*(unsigned char *)(a1 + 120))
    {
      WTF::URL::URL((WTF::URL *)&v46);
      uint64_t v7 = *(WTF::StringImpl **)(a1 + 112);
      if (v7) {
        *(_DWORD *)v7 += 2;
      }
      char v8 = v46;
      __int16 v46 = 0;
      long long v41 = v7;
      uint64_t v42 = v8;
      long long v43 = v47;
      long long v44 = v48;
      LODWORD(v47) = v47 & 0xFFFFFFFE;
      if (v52)
      {
        long long v41 = 0;
        char v9 = v49;
        uint64_t v49 = v7;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2) {
            WTF::StringImpl::destroy(v9, v6);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
        }
        WTF::URL::operator=((uint64_t)&v50, (uint64_t)&v42);
      }
      else
      {
        std::pair<WTF::String,WTF::URL>::pair[abi:sn180100](&v49, (uint64_t *)&v41);
        char v52 = 1;
      }
      char v23 = v42;
      uint64_t v42 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v21);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      uint64_t v24 = v41;
      long long v41 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v21);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      uint64_t v25 = v46;
      __int16 v46 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v21);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
      goto LABEL_66;
    }
    if (*(unsigned char *)(a1 + 80))
    {
      if (*(_DWORD *)(a1 + 76))
      {
        if (**(void **)(a1 + 64)) {
          long long v16 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          long long v16 = &stru_1EEA10550;
        }
        uint64_t v17 = v16;
        MEMORY[0x19972EAD0](&v40, v17);
        WebKit::WebExtensionDynamicScripts::sourcePairForResource(&v40, v2, (uint64_t)&v41);
        if (v52 == v45)
        {
          if (v52)
          {
            long long v19 = v41;
            long long v41 = 0;
            long long v20 = v49;
            uint64_t v49 = v19;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2) {
                WTF::StringImpl::destroy(v20, v18);
              }
              else {
                *(_DWORD *)v20 -= 2;
              }
            }
            WTF::URL::operator=((uint64_t)&v50, (uint64_t)&v42);
          }
          goto LABEL_60;
        }
        if (v52)
        {
          char v22 = v50;
          uint64_t v50 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v18);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          uint64_t v27 = v49;
          uint64_t v49 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 != 2)
            {
              char v26 = 0;
              *(_DWORD *)v27 -= 2;
              goto LABEL_59;
            }
            WTF::StringImpl::destroy(v27, v18);
          }
          char v26 = 0;
          goto LABEL_59;
        }
        std::pair<WTF::String,WTF::URL>::pair[abi:sn180100](&v49, (uint64_t *)&v41);
        char v26 = 1;
LABEL_59:
        char v52 = v26;
LABEL_60:
        std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41, v18);
        int v30 = v40;
        char v40 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2) {
            WTF::StringImpl::destroy(v30, v28);
          }
          else {
            *(_DWORD *)v30 -= 2;
          }
        }
        if (!v52)
        {
          long long v38 = WebKit::toErrorString((WebKit *)@"tabs.executeScript()", 0, &cfstr_InvalidResourc_0.isa, v29, v17);
          MEMORY[0x19972EAD0](&v46, v38);
          long long v39 = v46;
          __int16 v46 = 0;

          long long v41 = v39;
          LODWORD(v43) = 1;
          WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 168));
          if (v43 != -1) {
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9FE490[v43])(&v46, &v41);
          }

          goto LABEL_69;
        }

LABEL_66:
        WebKit::WebExtensionDynamicScripts::getSourcePairsForParameters(a1 + 32, v2, (uint64_t)&v41);
        uint64_t v31 = *(void *)(v2 + 160);
        uint64_t v32 = *(_DWORD **)(a1 + 24);
        uint64_t v33 = *(void *)(a1 + 168);
        *(void *)(a1 + 168) = 0;
        uint64_t v34 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(void *)uint64_t v34 = &unk_1EE9FE790;
        *((void *)v34 + 1) = v33;
        __int16 v46 = v34;
        WebKit::WebExtensionDynamicScripts::executeScript((uint64_t *)&v41, v5, v31, v32, a1 + 32, v2, (uint64_t *)&v46);
        long long v36 = v46;
        __int16 v46 = 0;
        if (v36) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v36 + 8))(v36);
        }
        WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v35);
LABEL_69:
        std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v49, v37);
LABEL_70:

        return;
      }
    }
    else
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
    }
    __break(0xC471u);
    return;
  }
  WebKit::toWebExtensionError<>((WebKit *)@"tabs.executeScript()", 0, &cfstr_ThisExtensionD.isa, v3, &v41);
  uint64_t v10 = v41;
  long long v41 = 0;
  uint64_t v49 = v10;
  int v51 = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 168));
  if (v51 != -1) {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9FE490[v51])(&v46, &v49);
  }
  int v51 = -1;
  uint64_t v12 = v41;
  long long v41 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
}

void sub_199312AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,int a26)
{
  if (a14 != -1) {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9FE490[a14])(&a19, &a12);
  }

  std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a24, v29);
  _Unwind_Resume(a1);
}

void sub_199312CA0(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,int a26)
{
  if (a26 != -1) {
    ((void (*)(char *, char *))off_1EE9FE490[a26])(&a19, &a24);
  }
  a26 = -1;
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  JUMPOUT(0x199312C98);
}

void *std::pair<WTF::String,WTF::URL>::pair[abi:sn180100](void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  *a1 = v3;
  WTF::URL::URL((uint64_t)(a1 + 1), a2 + 1);
  return a1;
}

void sub_199312D2C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  NSString *v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext17tabsExecuteScriptENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yLS8_1EEEEERKNS2_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS2_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashIS10_EENS_10HashTraitsIS10_EENS_15HashTableTraitsEEES16_NS_8WallTimeEEEDaOT_OT0_T1_EUlOSQ_E_vJS1E_EED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FE790;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext17tabsExecuteScriptENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yLS8_1EEEEERKNS2_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS2_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashIS10_EENS_10HashTraitsIS10_EENS_15HashTableTraitsEEES16_NS_8WallTimeEEEDaOT_OT0_T1_EUlOSQ_E_vJS1E_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FE790;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19WebExtensionContext17tabsExecuteScriptENS_23ObjectIdentifierGenericINS2_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS4_INS2_29WebExtensionTabIdentifierTypeES7_yLS8_1EEEEERKNS2_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS2_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEN3__0clINS_7HashSetINS_3URLENS_11DefaultHashIS10_EENS_10HashTraitsIS10_EENS_15HashTableTraitsEEES16_NS_8WallTimeEEEDaOT_OT0_T1_EUlOSQ_E_vJS1E_EE4callES1E_(uint64_t a1, void *a2)
{
  v4[0] = *a2;
  uint64_t v2 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4[1] = v2;
  int v5 = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 8));
  return ((uint64_t (*)(char *, void *))off_1EE9FE490[v5])(&v6, v4);
}

void sub_199312EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  if (a11 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9FE490[a11])(v11 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE7B8;
  WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9FE7B8;
  WebKit::WebExtensionContext::scriptingInsertCSS(WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0::~$_0((uint64_t)a1 + 8);

  return WTF::fastFree(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::tabsInsertCSS(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (WebKit::WebExtensionTab::extensionHasPermission(*(WebKit::WebExtensionTab **)(a1 + 24)))
  {
    int v5 = WebKit::WebExtensionTab::webView(*(WebKit::WebExtensionTab **)(a1 + 24));
    if (v5)
    {
      int v6 = *(unsigned __int8 *)(a1 + 104);
      WebKit::WebExtensionDynamicScripts::getSourcePairsForParameters(a1 + 32, v2, (uint64_t)&v18);
      WebKit::WebExtensionDynamicScripts::injectStyleSheets((uint64_t *)&v18, v5, *(void *)(v2 + 160), *(unsigned __int8 *)(a1 + 161), v6 != 0, v2);
      LOBYTE(v16) = 0;
      char v17 = 0;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 168));
      WTF::Vector<std::pair<WTF::String,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v14);
    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)@"tabs.insertCSS()", 0, &cfstr_CouldNotInject.isa, v4, &v16);
      uint64_t v10 = v16;
      long long v16 = 0;
      int v18 = v10;
      char v19 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 168));
      if (v19)
      {
        uint64_t v12 = v18;
        int v18 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v11);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
      }
      uint64_t v15 = v16;
      long long v16 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v11);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"tabs.insertCSS()", 0, &cfstr_ThisExtensionD.isa, v3, &v16);
    uint64_t v7 = v16;
    long long v16 = 0;
    int v18 = v7;
    char v19 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)(a1 + 168));
    if (v19)
    {
      char v9 = v18;
      int v18 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
    }
    uint64_t v13 = v16;
    long long v16 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v8);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
}

void sub_199313170(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsCreatedEventIfNeeded(WebKit::WebExtensionTabParameters const&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE7E0;
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 11));
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 5), v2);
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsCreatedEventIfNeeded(WebKit::WebExtensionTabParameters const&)::$_0,void>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9FE7E0;
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 88);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 40, v2);
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(a1, v3);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsCreatedEventIfNeeded(WebKit::WebExtensionTabParameters const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  WebKit::WebExtensionContext::processes(v2, 34, 0, (uint64_t *)&v18);
  uint64_t v4 = v2[9];
  if (v4 && *(void *)(v4 + 8))
  {
    int v5 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v18);
    int v6 = v5;
    uint64_t v7 = v3;
    char v8 = v18 ? &v18[*((unsigned int *)v18 - 1)] : 0;
    if (v8 != v5)
    {
      char v9 = (char *)(a1 + 24);
      do
      {
        uint64_t v10 = *v6;
        uint64_t v11 = v2[4];
        uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v12 = 1615;
        *((void *)v12 + 1) = v11;
        *((void *)v12 + 66) = (char *)v12 + 16;
        *((void *)v12 + 67) = 512;
        *((void *)v12 + 68) = 0;
        *((void *)v12 + 70) = 0;
        *((void *)v12 + 69) = 0;
        IPC::Encoder::encodeHeader(v12);
        int v21 = v12;
        IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode(v12, v9);
        LOBYTE(v19) = 0;
        char v20 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v21, 0, (uint64_t)&v19, 1);
        if (v20)
        {
          uint64_t v13 = v19;
          uint64_t v19 = 0;
          if (v13) {
            (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
          }
        }
        char v14 = v21;
        int v21 = 0;
        if (v14)
        {
          IPC::Encoder::~Encoder(v14, v3);
          WTF::fastFree(v15, v16);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_17;
          }
        }
        int v6 = v7;
LABEL_17:
        ;
      }
      while (v6 != v8);
    }
  }
  __n128 result = v18;
  if (v18) {
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v18, v3);
  }
  return result;
}

void sub_1993134EC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a10) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsUpdatedEventIfNeeded(WebKit::WebExtensionTabParameters const&,WebKit::WebExtensionTabParameters const&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE808;
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 33));
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 27), v2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 11));
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 5), v3);
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsUpdatedEventIfNeeded(WebKit::WebExtensionTabParameters const&,WebKit::WebExtensionTabParameters const&)::$_0,void>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9FE808;
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 264);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 216, v2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 88);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 40, v3);
  uint64_t v5 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(a1, v4);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsUpdatedEventIfNeeded(WebKit::WebExtensionTabParameters const&,WebKit::WebExtensionTabParameters const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  WebKit::WebExtensionContext::processes(v2, 40, 0, (uint64_t *)&v19);
  uint64_t v4 = v2[9];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v5 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v19);
    int v6 = v5;
    uint64_t v7 = v3;
    char v8 = v19 ? &v19[*((unsigned int *)v19 - 1)] : 0;
    if (v8 != v5)
    {
      char v9 = (char *)(a1 + 24);
      uint64_t v10 = (char *)(a1 + 200);
      do
      {
        uint64_t v11 = *v6;
        uint64_t v12 = v2[4];
        uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v13 = 1621;
        *((void *)v13 + 1) = v12;
        *((void *)v13 + 66) = (char *)v13 + 16;
        *((void *)v13 + 67) = 512;
        *((void *)v13 + 68) = 0;
        *((void *)v13 + 70) = 0;
        *((void *)v13 + 69) = 0;
        IPC::Encoder::encodeHeader(v13);
        char v22 = v13;
        IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode(v13, v9);
        IPC::ArgumentCoder<WebKit::WebExtensionTabParameters,void>::encode(v13, v10);
        LOBYTE(v20) = 0;
        char v21 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v22, 0, (uint64_t)&v20, 1);
        if (v21)
        {
          uint64_t v14 = v20;
          uint64_t v20 = 0;
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
          }
        }
        uint64_t v15 = v22;
        char v22 = 0;
        if (v15)
        {
          IPC::Encoder::~Encoder(v15, v3);
          WTF::fastFree(v16, v17);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_17;
          }
        }
        int v6 = v7;
LABEL_17:
        ;
      }
      while (v6 != v8);
    }
  }
  __n128 result = v19;
  if (v19) {
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v19, v3);
  }
  return result;
}

void sub_199313810(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a10) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsReplacedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE830;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsReplacedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE830;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsReplacedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  WebKit::WebExtensionContext::processes(v2, 39, 0, (uint64_t *)&v19);
  uint64_t v4 = v2[9];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v5 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v19);
    int v6 = v5;
    uint64_t v7 = v3;
    char v8 = v19 ? &v19[*((unsigned int *)v19 - 1)] : 0;
    if (v8 != v5)
    {
      char v9 = a1 + 3;
      uint64_t v10 = a1 + 4;
      do
      {
        uint64_t v11 = *v6;
        uint64_t v12 = v2[4];
        uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v13 = 1620;
        *((void *)v13 + 1) = v12;
        *((void *)v13 + 66) = (char *)v13 + 16;
        *((void *)v13 + 67) = 512;
        *((void *)v13 + 68) = 0;
        *((void *)v13 + 70) = 0;
        *((void *)v13 + 69) = 0;
        IPC::Encoder::encodeHeader(v13);
        char v22 = v13;
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v13, v9);
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v13, v10);
        LOBYTE(v20) = 0;
        char v21 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v22, 0, (uint64_t)&v20, 1);
        if (v21)
        {
          uint64_t v14 = v20;
          uint64_t v20 = 0;
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
          }
        }
        uint64_t v15 = v22;
        char v22 = 0;
        if (v15)
        {
          IPC::Encoder::~Encoder(v15, v3);
          WTF::fastFree(v16, v17);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_17;
          }
        }
        int v6 = v7;
LABEL_17:
        ;
      }
      while (v6 != v8);
    }
  }
  __n128 result = v19;
  if (v19) {
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v19, v3);
  }
  return result;
}

void sub_199313AF8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a10) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsDetachedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE858;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsDetachedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE858;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsDetachedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 40);
  WebKit::WebExtensionContext::processes(v2, 35, 0, (uint64_t *)&v20);
  uint64_t v5 = v2[9];
  if (v5 && *(void *)(v5 + 8))
  {
    int v6 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v20);
    uint64_t v7 = v6;
    char v8 = v4;
    char v9 = v20 ? &v20[*((unsigned int *)v20 - 1)] : 0;
    if (v9 != v6)
    {
      uint64_t v10 = a1 + 24;
      uint64_t v11 = a1 + 32;
      do
      {
        uint64_t v12 = *v7;
        v21[0] = v10;
        v21[1] = v11;
        void v21[2] = v3;
        uint64_t v13 = v2[4];
        uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v14 = 1616;
        *((void *)v14 + 1) = v13;
        *((void *)v14 + 66) = (char *)v14 + 16;
        *((void *)v14 + 67) = 512;
        *((void *)v14 + 68) = 0;
        *((void *)v14 + 70) = 0;
        *((void *)v14 + 69) = 0;
        IPC::Encoder::encodeHeader(v14);
        uint64_t v24 = v14;
        IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long>,0ul,1ul,2ul>(v14, (uint64_t)v21);
        LOBYTE(v22) = 0;
        char v23 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v24, 0, (uint64_t)&v22, 1);
        if (v23)
        {
          uint64_t v15 = v22;
          uint64_t v22 = 0;
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
        }
        long long v16 = v24;
        uint64_t v24 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v4);
          WTF::fastFree(v17, v18);
        }
        while (++v7 != v8)
        {
          if ((unint64_t)(*v7 + 1) > 1) {
            goto LABEL_17;
          }
        }
        uint64_t v7 = v8;
LABEL_17:
        ;
      }
      while (v7 != v9);
    }
  }
  __n128 result = v20;
  if (v20) {
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v20, v4);
  }
  return result;
}

void sub_199313DE0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a9) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);

  return IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsMovedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long,unsigned long)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE880;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsMovedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long,unsigned long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE880;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsMovedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long,unsigned long)::$_0,void>::call(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = a1[6];
  uint64_t v20 = a1[5];
  WebKit::WebExtensionContext::processes(v2, 37, 0, (uint64_t *)&v21);
  uint64_t v5 = v2[9];
  if (v5 && *(void *)(v5 + 8))
  {
    int v6 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v21);
    uint64_t v7 = v6;
    char v8 = v4;
    char v9 = v21 ? &v21[*((unsigned int *)v21 - 1)] : 0;
    if (v9 != v6)
    {
      uint64_t v10 = a1 + 3;
      uint64_t v11 = a1 + 4;
      do
      {
        uint64_t v12 = *v7;
        uint64_t v13 = v2[4];
        uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v14 = 1618;
        *((void *)v14 + 1) = v13;
        *((void *)v14 + 66) = (char *)v14 + 16;
        *((void *)v14 + 67) = 512;
        *((void *)v14 + 68) = 0;
        *((void *)v14 + 70) = 0;
        *((void *)v14 + 69) = 0;
        IPC::Encoder::encodeHeader(v14);
        uint64_t v24 = v14;
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, v10);
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, v11);
        IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v14, v20);
        IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v14, v3);
        LOBYTE(v22) = 0;
        char v23 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v24, 0, (uint64_t)&v22, 1);
        if (v23)
        {
          uint64_t v15 = v22;
          uint64_t v22 = 0;
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
        }
        long long v16 = v24;
        uint64_t v24 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v4);
          WTF::fastFree(v17, v18);
        }
        while (++v7 != v8)
        {
          if ((unint64_t)(*v7 + 1) > 1) {
            goto LABEL_17;
          }
        }
        uint64_t v7 = v8;
LABEL_17:
        ;
      }
      while (v7 != v9);
    }
  }
  __n128 result = v21;
  if (v21) {
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v21, v4);
  }
  return result;
}

void sub_199314134(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a10) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsAttachedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE8A8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsAttachedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE8A8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsAttachedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 40);
  WebKit::WebExtensionContext::processes(v2, 33, 0, (uint64_t *)&v20);
  uint64_t v5 = v2[9];
  if (v5 && *(void *)(v5 + 8))
  {
    int v6 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v20);
    uint64_t v7 = v6;
    char v8 = v4;
    char v9 = v20 ? &v20[*((unsigned int *)v20 - 1)] : 0;
    if (v9 != v6)
    {
      uint64_t v10 = a1 + 24;
      uint64_t v11 = a1 + 32;
      do
      {
        uint64_t v12 = *v7;
        v21[0] = v10;
        v21[1] = v11;
        void v21[2] = v3;
        uint64_t v13 = v2[4];
        uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v14 = 1614;
        *((void *)v14 + 1) = v13;
        *((void *)v14 + 66) = (char *)v14 + 16;
        *((void *)v14 + 67) = 512;
        *((void *)v14 + 68) = 0;
        *((void *)v14 + 70) = 0;
        *((void *)v14 + 69) = 0;
        IPC::Encoder::encodeHeader(v14);
        uint64_t v24 = v14;
        IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long>,0ul,1ul,2ul>(v14, (uint64_t)v21);
        LOBYTE(v22) = 0;
        char v23 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v24, 0, (uint64_t)&v22, 1);
        if (v23)
        {
          uint64_t v15 = v22;
          uint64_t v22 = 0;
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
        }
        long long v16 = v24;
        uint64_t v24 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v4);
          WTF::fastFree(v17, v18);
        }
        while (++v7 != v8)
        {
          if ((unint64_t)(*v7 + 1) > 1) {
            goto LABEL_17;
          }
        }
        uint64_t v7 = v8;
LABEL_17:
        ;
      }
      while (v7 != v9);
    }
  }
  __n128 result = v20;
  if (v20) {
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v20, v4);
  }
  return result;
}

void sub_19931441C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a9) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsActivatedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE8D0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsActivatedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE8D0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsActivatedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[1];
  WebKit::WebExtensionContext::processes(v2, 32, 0, (uint64_t *)&v20);
  uint64_t v4 = v2[9];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v5 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v20);
    int v6 = v5;
    uint64_t v7 = v3;
    char v8 = v20 ? &v20[*((unsigned int *)v20 - 1)] : 0;
    if (v8 != v5)
    {
      char v9 = a1 + 3;
      uint64_t v10 = a1 + 4;
      uint64_t v11 = a1 + 5;
      do
      {
        uint64_t v12 = *v6;
        uint64_t v13 = v2[4];
        uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v14 = 1613;
        *((void *)v14 + 1) = v13;
        *((void *)v14 + 66) = (char *)v14 + 16;
        *((void *)v14 + 67) = 512;
        *((void *)v14 + 68) = 0;
        *((void *)v14 + 70) = 0;
        *((void *)v14 + 69) = 0;
        IPC::Encoder::encodeHeader(v14);
        char v23 = v14;
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, v9);
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, v10);
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, v11);
        LOBYTE(v21) = 0;
        char v22 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v23, 0, (uint64_t)&v21, 1);
        if (v22)
        {
          uint64_t v15 = v21;
          uint64_t v21 = 0;
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
        }
        long long v16 = v23;
        char v23 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v3);
          WTF::fastFree(v17, v18);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_17;
          }
        }
        int v6 = v7;
LABEL_17:
        ;
      }
      while (v6 != v8);
    }
  }
  __n128 result = v20;
  if (v20) {
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v20, v3);
  }
  return result;
}

void sub_199314710(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a10) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsHighlightedEventIfNeeded(WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9FE8F8;
  uint64_t v3 = *(WTF **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsHighlightedEventIfNeeded(WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE8F8;
  uint64_t v3 = (WTF *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsHighlightedEventIfNeeded(WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  WebKit::WebExtensionContext::processes(v2, 36, 0, (uint64_t *)&v19);
  uint64_t v4 = v2[9];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v5 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v19);
    int v6 = v5;
    uint64_t v7 = v3;
    char v8 = v19 ? &v19[*((unsigned int *)v19 - 1)] : 0;
    if (v8 != v5)
    {
      uint64_t v9 = a1 + 24;
      uint64_t v10 = (uint64_t *)(a1 + 40);
      do
      {
        uint64_t v11 = *v6;
        uint64_t v12 = v2[4];
        uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v13 = 1617;
        *((void *)v13 + 1) = v12;
        *((void *)v13 + 66) = (char *)v13 + 16;
        *((void *)v13 + 67) = 512;
        *((void *)v13 + 68) = 0;
        *((void *)v13 + 70) = 0;
        *((void *)v13 + 69) = 0;
        IPC::Encoder::encodeHeader(v13);
        char v22 = v13;
        IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v13, v9);
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v13, v10);
        LOBYTE(v20) = 0;
        char v21 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v22, 0, (uint64_t)&v20, 1);
        if (v21)
        {
          uint64_t v14 = v20;
          uint64_t v20 = 0;
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
          }
        }
        uint64_t v15 = v22;
        char v22 = 0;
        if (v15)
        {
          IPC::Encoder::~Encoder(v15, v3);
          WTF::fastFree(v16, v17);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_17;
          }
        }
        int v6 = v7;
LABEL_17:
        ;
      }
      while (v6 != v8);
    }
  }
  __n128 result = v19;
  if (v19) {
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v19, v3);
  }
  return result;
}

void sub_199314A20(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a10) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsRemovedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionContext::WindowIsClosing)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE920;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsRemovedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionContext::WindowIsClosing)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE920;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireTabsRemovedEventIfNeeded(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionContext::WindowIsClosing)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  WebKit::WebExtensionContext::processes(v2, 38, 0, (uint64_t *)&v20);
  uint64_t v4 = v2[9];
  if (v4
    && *(void *)(v4 + 8)
    && ((uint64_t v5 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v20),
         int v6 = v5,
         uint64_t v7 = (uint64_t *)v3,
         !v20)
      ? (char v8 = 0)
      : (char v8 = &v20[*((unsigned int *)v20 - 1)]),
        v8 != v5))
  {
    while (1)
    {
      uint64_t v9 = *v6;
      uint64_t v10 = v2[4];
      uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v11 = 1619;
      *((void *)v11 + 1) = v10;
      *((void *)v11 + 66) = (char *)v11 + 16;
      *((void *)v11 + 67) = 512;
      *((void *)v11 + 68) = 0;
      *((void *)v11 + 70) = 0;
      *((void *)v11 + 69) = 0;
      IPC::Encoder::encodeHeader(v11);
      char v23 = v11;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, (uint64_t *)(a1 + 24));
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, (uint64_t *)(a1 + 32));
      char v12 = *(unsigned char *)(a1 + 40);
      uint64_t v13 = (unsigned char *)IPC::Encoder::grow(v11, 1uLL, 1);
      if (!v14) {
        break;
      }
      unsigned char *v13 = v12;
      LOBYTE(v21) = 0;
      char v22 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v23, 0, (uint64_t)&v21, 1);
      if (v22)
      {
        uint64_t v15 = v21;
        uint64_t v21 = 0;
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
      }
      long long v16 = v23;
      char v23 = 0;
      if (v16)
      {
        IPC::Encoder::~Encoder(v16, v3);
        WTF::fastFree(v17, v18);
      }
      while (++v6 != v7)
      {
        if ((unint64_t)(*v6 + 1) > 1) {
          goto LABEL_17;
        }
      }
      int v6 = v7;
LABEL_17:
      if (v6 == v8) {
        goto LABEL_18;
      }
    }
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
LABEL_18:
    uint64_t result = (uint64_t)v20;
    if (v20) {
      return WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v20, v3);
    }
  }
  return result;
}

void sub_199314D44(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a10) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::isWebNavigationMessageAllowed(WebKit::WebExtensionContext *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (!v1 || !*(void *)(v1 + 8)) {
    return 0;
  }
  MEMORY[0x19972EAD0](&v7, @"webNavigation");
  BOOL v4 = (WebKit::WebExtensionContext::permissionState(this, &v7, 0, 2) & 0xFFFFFFFE) == 2;
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v4;
}

void sub_199314E5C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::webNavigationTraverseFrameTreeForFrame(WebKit::WebExtensionContext *a1, void *a2, _WKFrameTreeNode *a3, URL *a4, uint64_t a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a2;
  WebKit::frameParametersForFrame((WebKit *)v25, v9, a3, a4, a1, 1);
  unsigned int v10 = *(_DWORD *)(a5 + 12);
  if (v10 == *(_DWORD *)(a5 + 8))
  {
    WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionFrameParameters>(a5, (unint64_t)v25);
  }
  else
  {
    uint64_t v12 = *(void *)a5;
    uint64_t v13 = (unsigned char *)(*(void *)a5 + 80 * v10);
    unsigned char *v13 = v25[0];
    std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](v13 + 8, (uint64_t)&v26);
    uint64_t v14 = v12 + 80 * v10;
    long long v15 = v28;
    *(unsigned char *)(v14 + 72) = v29;
    *(_OWORD *)(v14 + 56) = v15;
    ++*(_DWORD *)(a5 + 12);
  }
  if (v27)
  {
    long long v16 = v26;
    char v26 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v11);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  char v17 = [(_WKFrameTreeNode *)v9 childFrames];
  uint64_t v18 = [v17 countByEnumeratingWithState:&v21 objects:v30 count:16];
  if (v18)
  {
    uint64_t v19 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v22 != v19) {
          objc_enumerationMutation(v17);
        }
        WebKit::WebExtensionContext::webNavigationTraverseFrameTreeForFrame(a1, *(void *)(*((void *)&v21 + 1) + 8 * i), v9, a4, a5);
      }
      uint64_t v18 = [v17 countByEnumeratingWithState:&v21 objects:v30 count:16];
    }
    while (v18);
  }
}

void sub_199315060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _Unwind_Resume(a1);
}

void WebKit::frameParametersForFrame(WebKit *this, _WKFrameTreeNode *a2, _WKFrameTreeNode *a3, URL *a4, WebKit::WebExtensionContext *a5, int a6)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  char v27 = v11;
  uint64_t v13 = [(_WKFrameTreeNode *)v11 info];
  uint64_t v14 = [v13 request];
  long long v15 = [v14 URL];

  *(unsigned char *)this = [v13 _errorOccurred];
  MEMORY[0x19972E8A0](&v28, v15);
  int v17 = WebKit::WebExtensionContext::permissionState((uint64_t)a5, &v28, a4, 3) & 0xFFFFFFFE;
  if (v17 == 2)
  {
    id v18 = v15;
    *((unsigned char *)this + 8) = 0;
    *((unsigned char *)this + 48) = 0;
    MEMORY[0x19972E8A0]((char *)this + 8, v18);
    *((unsigned char *)this + 48) = 1;
  }
  else
  {
    id v18 = 0;
    *((unsigned char *)this + 8) = 0;
    *((unsigned char *)this + 48) = 0;
  }
  char v26 = v18;
  if (v12)
  {
    a4 = [(_WKFrameTreeNode *)v12 info];
    if ([(URL *)a4 isMainFrame])
    {
      uint64_t v19 = -2;
    }
    else
    {
      uint64_t v20 = [(URL *)a4 _handle];
      uint64_t v19 = [v20 frameID];
      if (v19 == -1) {
        goto LABEL_29;
      }

      if ((unint64_t)(v19 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
        uint64_t v19 = -3;
      }
    }
  }
  else
  {
    uint64_t v19 = -3;
  }
  *((void *)this + 7) = v19;
  if (!a6)
  {
    char v23 = 0;
    *((unsigned char *)this + 64) = 0;
    goto LABEL_20;
  }
  id v21 = v13;
  if (([v21 isMainFrame] & 1) == 0)
  {
    long long v24 = [v21 _handle];
    uint64_t v22 = [v24 frameID];
    if (v22 != -1)
    {

      if ((unint64_t)(v22 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
        uint64_t v22 = -3;
      }
      goto LABEL_19;
    }
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x199315314);
  }
  uint64_t v22 = -2;
LABEL_19:

  *((void *)this + 8) = v22;
  char v23 = 1;
LABEL_20:
  *((unsigned char *)this + 72) = v23;
  if (v12) {

  }
  if (v17 == 2) {
  m_ptr = v28.m_string.m_impl.m_ptr;
  }
  v28.m_string.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v16);
    }
    else {
      *(_DWORD *)m_ptr -= 2;
    }
  }
}

void sub_199315338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, WTF::StringImpl *a12)
{
  if (v12) {
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v16, v21);
  }
  if (v15 == 2) {

  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v22);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void sub_1993153FC()
{
  JUMPOUT(0x1993153E4);
}

void sub_199315408()
{
}

void sub_199315410()
{
}

void WebKit::WebExtensionContext::webNavigationFindFrameIdentifierInFrameTree(uint64_t a1, WebKit::WebExtensionContext *a2, void *a3, void *a4, URL *a5, uint64_t a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  id v13 = [(_WKFrameTreeNode *)v11 info];
  if ([v13 isMainFrame])
  {
    uint64_t v14 = -2;
  }
  else
  {
    int v15 = [v13 _handle];
    uint64_t v16 = [v15 frameID];
    if (v16 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x19931566CLL);
    }

    if ((unint64_t)(v16 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v14 = -3;
    }
    else {
      uint64_t v14 = v16;
    }
  }

  if (v14 == a6)
  {
    WebKit::frameParametersForFrame((WebKit *)v27, v11, v12, a5, a2, 0);
    *(unsigned char *)a1 = v27[0];
    std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a1 + 8), (uint64_t)&v28);
    *(_OWORD *)(a1 + 56) = v30;
    *(unsigned char *)(a1 + 72) = v31;
    *(unsigned char *)(a1 + 80) = 1;
    if (v29)
    {
      id v18 = v28;
      URL v28 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v17);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
    }
  }
  else
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    uint64_t v19 = [(_WKFrameTreeNode *)v11 childFrames];
    uint64_t v20 = [v19 countByEnumeratingWithState:&v23 objects:v32 count:16];
    if (v20)
    {
      uint64_t v21 = *(void *)v24;
      while (2)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          if (*(void *)v24 != v21) {
            objc_enumerationMutation(v19);
          }
          WebKit::WebExtensionContext::webNavigationFindFrameIdentifierInFrameTree(a1, a2, *(void *)(*((void *)&v23 + 1) + 8 * i), v11, a5, a6);
          if (*(unsigned char *)(a1 + 80))
          {

            goto LABEL_23;
          }
        }
        uint64_t v20 = [v19 countByEnumeratingWithState:&v23 objects:v32 count:16];
        if (v20) {
          continue;
        }
        break;
      }
    }

    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 80) = 0;
  }
LABEL_23:
}

void sub_199315674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  _Unwind_Resume(a1);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::webNavigationGetFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  WebKit::WebExtensionContext::getTab((uint64_t *)a1, a2, 0, &v23);
  if (v23)
  {
    uint64_t v9 = WebKit::WebExtensionTab::webView(v23);
    if (v9)
    {
      CFRetain(*(CFTypeRef *)(a1 + 8));
      uint64_t v10 = *a4;
      *a4 = 0;
      uint64_t v11 = v23;
      if (v23) {
        ++*(_DWORD *)v23;
      }
      uint64_t v12 = malloc_type_malloc(0x48uLL, 0x10E0040B39A8193uLL);
      void *v12 = MEMORY[0x1E4F14398];
      v12[1] = 50331650;
      void v12[2] = WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionContext::webNavigationGetFrame(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::webNavigationGetFrame(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)> &&)::$_0)::{lambda(void *,_WKFrameTreeNode *)#1}::__invoke;
      v12[3] = &WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionContext::webNavigationGetFrame(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::webNavigationGetFrame(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)> &&)::$_0)::descriptor;
      v12[4] = a1;
      uint64_t v12[5] = a1;
      v12[6] = v10;
      v12[7] = v11;
      v12[8] = a3;
      id v13 = _Block_copy(v12);

      uint64_t v14 = _Block_copy(v13);
      [v9 _frames:v14];
    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)@"webNavigation.getFrame()", 0, &cfstr_TabNotFound.isa, v8, &v22);
      id v18 = v22;
      uint64_t v22 = 0;
      v25[0] = v18;
      int v26 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)>::operator()(a4);
      if (v26 != -1) {
        ((void (*)(char *, void *))off_1EE9FE938[v26])(&v24, v25);
      }
      int v26 = -1;
      uint64_t v20 = v22;
      uint64_t v22 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v19);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"webNavigation.getFrame()", 0, &cfstr_TabNotFound.isa, v7, &v22);
    int v15 = v22;
    uint64_t v22 = 0;
    v25[0] = v15;
    int v26 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)>::operator()(a4);
    if (v26 != -1) {
      ((void (*)(char *, void *))off_1EE9FE938[v26])(&v24, v25);
    }
    int v26 = -1;
    int v17 = v22;
    uint64_t v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  uint64_t result = v23;
  long long v23 = 0;
  if (result) {
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  }
  return result;
}

void sub_19931598C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28)
{
  if (a28 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FE938[a28])(&a15, v29);
  }
  a28 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (a11) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_199315B4C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionTab *WebKit::WebExtensionContext::webNavigationGetAllFrames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebKit::WebExtensionContext::getTab((uint64_t *)a1, a2, 0, &v23);
  if (v23)
  {
    uint64_t v7 = WebKit::WebExtensionTab::webView(v23);
    if (v7)
    {
      CFRetain(*(CFTypeRef *)(a1 + 8));
      uint64_t v8 = *a3;
      *a3 = 0;
      uint64_t v9 = v23;
      if (v23) {
        ++*(_DWORD *)v23;
      }
      uint64_t v10 = malloc_type_malloc(0x40uLL, 0x10E0040DAFFB924uLL);
      *uint64_t v10 = MEMORY[0x1E4F14398];
      v10[1] = 50331650;
      v10[2] = WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionContext::webNavigationGetAllFrames(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::webNavigationGetAllFrames(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0)::{lambda(void *,_WKFrameTreeNode *)#1}::__invoke;
      v10[3] = &WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionContext::webNavigationGetAllFrames(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::webNavigationGetAllFrames(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0)::descriptor;
      v10[4] = a1;
      v10[5] = a1;
      v10[6] = v8;
      v10[7] = v9;
      uint64_t v11 = _Block_copy(v10);

      uint64_t v12 = _Block_copy(v11);
      [v7 _frames:v12];
    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)@"webNavigation.getAllFrames()", 0, &cfstr_TabNotFound.isa, v6, &v20);
      uint64_t v16 = v20;
      uint64_t v20 = 0;
      v21[0] = v16;
      int v22 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()(a3);
      if (v22 != -1) {
        ((void (*)(char *, void *))off_1EE9FE968[v22])(&v24, v21);
      }
      int v22 = -1;
      id v18 = v20;
      uint64_t v20 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v17);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"webNavigation.getAllFrames()", 0, &cfstr_TabNotFound.isa, v5, &v20);
    id v13 = v20;
    uint64_t v20 = 0;
    v21[0] = v13;
    int v22 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()(a3);
    if (v22 != -1) {
      ((void (*)(char *, void *))off_1EE9FE968[v22])(&v24, v21);
    }
    int v22 = -1;
    int v15 = v20;
    uint64_t v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
  uint64_t result = v23;
  long long v23 = 0;
  if (result) {
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  }
  return result;
}

void sub_199315DC0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a12 != -1) {
    ((void (*)(char *, char *))off_1EE9FE968[a12])(&a17, &a10);
  }
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  uint64_t v19 = a13;
  a13 = 0;
  if (v19) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_199315F78(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionContext::webNavigationGetFrame(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::webNavigationGetFrame(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1)
{
  uint64_t v2 = a1[7];
  a1[7] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v2);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[5];
  a1[5] = 0;
  if (v4)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

void WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionContext::webNavigationGetFrame(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::webNavigationGetFrame(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)> &&)::$_0)::{lambda(void *,_WKFrameTreeNode *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = *(WebKit::WebExtensionContext **)(a1 + 32);
  uint64_t v5 = [v3 info];
  char v6 = [v5 isMainFrame];

  if (v6)
  {
    WebKit::WebExtensionContext::webNavigationFindFrameIdentifierInFrameTree((uint64_t)&v16, v4, v3, 0, *(URL **)(a1 + 56), *(void *)(a1 + 64));
    if (v19)
    {
      std::__optional_move_base<WebKit::WebExtensionFrameParameters,false>::__optional_move_base[abi:sn180100]((uint64_t)v22, (uint64_t)&v16);
      int v23 = 0;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 48));
      if (v23 != -1) {
        ((void (*)(WTF::StringImpl **, void *))off_1EE9FE938[v23])(&v15, v22);
      }
    }
    else
    {
      WebKit::toWebExtensionError<>((WebKit *)@"webNavigation.getFrame()", 0, &cfstr_FrameNotFound.isa, v7, &v15);
      id v13 = v15;
      int v15 = 0;
      v22[0] = v13;
      int v23 = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 48));
      if (v23 != -1) {
        ((void (*)(char *, void *))off_1EE9FE938[v23])(&v20, v22);
      }
      int v23 = -1;
      uint64_t v14 = v15;
      int v15 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v8);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    if (v19)
    {
      if (v18)
      {
        uint64_t v12 = v17;
        int v17 = 0;
        if (v12)
        {
LABEL_20:
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v8);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v9 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_INFO, "Skipping frame traversal because the mainFrame is nil", buf, 2u);
    }
    WebKit::toWebExtensionError<>((WebKit *)@"webNavigation.getFrame()", 0, &cfstr_MainFrameNotFo.isa, v10, &v16);
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    v22[0] = v11;
    int v23 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionFrameParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 48));
    if (v23 != -1) {
      ((void (*)(WTF::StringImpl **, void *))off_1EE9FE938[v23])(&v15, v22);
    }
    int v23 = -1;
    uint64_t v12 = v16;
    uint64_t v16 = 0;
    if (v12) {
      goto LABEL_20;
    }
  }
}

void sub_1993162BC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39)
{
  if (a39 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FE938[a39])(&a26, v40);
  }
  a39 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a21 && a17 && a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionContext::webNavigationGetAllFrames(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::webNavigationGetAllFrames(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1)
{
  uint64_t v2 = a1[7];
  a1[7] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v2);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[5];
  a1[5] = 0;
  if (v4)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

void WTF::BlockPtrArc<void ()(_WKFrameTreeNode *)>::fromCallable<WebKit::WebExtensionContext::webNavigationGetAllFrames(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::webNavigationGetAllFrames(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0)::{lambda(void *,_WKFrameTreeNode *)#1}::__invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(WebKit::WebExtensionContext **)(a1 + 32);
  uint64_t v5 = [v3 info];
  char v6 = [v5 isMainFrame];

  if (v6)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    WebKit::WebExtensionContext::webNavigationTraverseFrameTreeForFrame(v4, v3, 0, *(URL **)(a1 + 56), (uint64_t)&v14);
    *(void *)buf = v14;
    uint64_t v7 = v15;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v17 = v7;
    int v18 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 48));
    if (v18 != -1) {
      ((void (*)(char *, uint8_t *))off_1EE9FE968[v18])(&v19, buf);
    }
    WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v8);
  }
  else
  {
    uint64_t v9 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_INFO, "Skipping frame traversal because the mainFrame is nil", buf, 2u);
    }
    WebKit::toWebExtensionError<>((WebKit *)@"webNavigation.getAllFrames()", 0, &cfstr_MainFrameNotFo.isa, v10, &v14);
    uint64_t v11 = v14;
    uint64_t v14 = 0;
    *(void *)buf = v11;
    int v18 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionFrameParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 48));
    if (v18 != -1) {
      ((void (*)(char *, uint8_t *))off_1EE9FE968[v18])(&v19, buf);
    }
    int v18 = -1;
    id v13 = v14;
    uint64_t v14 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
}

void sub_199316618(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, char a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18)
{
  if (a13 != -1) {
    ((void (*)(char *, char *))off_1EE9FE968[a13])(&a18, &a11);
  }
  a13 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::windowsCreate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (WebKit::WebExtensionContext::canOpenNewWindow((WebKit::WebExtensionContext *)a1))
  {
    id v7 = [[WKWebExtensionWindowConfiguration alloc] _init];
    uint64_t v8 = v7;
    if (*(unsigned char *)(a2 + 19)) {
      BOOL v9 = *(unsigned char *)(a2 + 18) == 1;
    }
    else {
      BOOL v9 = 0;
    }
    uint64_t v10 = v9;
    [v7 _setWindowType:v10];
    if (*(unsigned char *)(a2 + 17)) {
      unsigned __int8 v11 = *(unsigned char *)(a2 + 16) - 1;
    }
    else {
      unsigned __int8 v11 = -1;
    }
    if (v11 < 3u) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = 0;
    }
    [v8 _setWindowState:v12];
    if (*(unsigned char *)(a2 + 89)) {
      BOOL v13 = *(unsigned char *)(a2 + 88) == 0;
    }
    else {
      BOOL v13 = 0;
    }
    uint64_t v14 = !v13;
    [v8 _setShouldBeFocused:v14];
    if (*(unsigned char *)(a2 + 91)) {
      BOOL v15 = *(unsigned char *)(a2 + 90) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    uint64_t v16 = !v15;
    [v8 _setShouldBePrivate:v16];
    if (*(unsigned char *)(a2 + 80)) {
      objc_msgSend(v8, "_setFrame:", *(double *)(a2 + 48), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a2 + 72));
    }
    else {
      objc_msgSend(v8, "_setFrame:", NAN, NAN, NAN, NAN);
    }
    char v20 = [MEMORY[0x1E4F1CA48] array];
    uint64_t v21 = [MEMORY[0x1E4F1CA48] array];
    if (*(unsigned char *)(a2 + 40))
    {
      unsigned int v22 = *(_DWORD *)(a2 + 36);
      if (v22)
      {
        uint64_t v23 = 176 * v22;
        uint64_t v24 = *(void *)(a2 + 24);
        do
        {
          if (*(unsigned char *)(v24 + 8))
          {
            WebKit::WebExtensionContext::getTab((uint64_t *)a1, *(void *)v24, 0, &v49);
            long long v25 = v49;
            if (v49)
            {
              id WeakRetained = objc_loadWeakRetained((id *)v49 + 4);
              [v21 addObject:WeakRetained];
            }
            else
            {
              if (!*(unsigned char *)(v24 + 8))
              {
                std::__throw_bad_optional_access[abi:sn180100]();
                __break(1u);
                return;
              }
              uint64_t v47 = *(void *)v24;
              WebKit::toWebExtensionError<unsigned long long>((WebKit *)@"windows.create()", 0, &cfstr_TabLluWasNotFo.isa, (NSString *)&v47, &v48);
              URL v28 = v48;
              long long v48 = 0;
              v51[0] = v28;
              int v52 = 1;
              WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionWindowParameters>,WTF::String> &&)>::operator()(a3);
              if (v52 != -1) {
                ((void (*)(char *, void *))off_1EE9FE998[v52])(&v50, v51);
              }
              int v52 = -1;
              long long v30 = v48;
              long long v48 = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2) {
                  WTF::StringImpl::destroy(v30, v29);
                }
                else {
                  *(_DWORD *)v30 -= 2;
                }
              }
            }
            char v31 = v49;
            uint64_t v49 = 0;
            if (v31) {
              WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v31);
            }
            if (!v25) {
              goto LABEL_64;
            }
          }
          else if (*(unsigned char *)(v24 + 56))
          {
            uint64_t v27 = WTF::URL::operator NSURL *();
            [v20 addObject:v27];
          }
          v24 += 176;
          v23 -= 176;
        }
        while (v23);
      }
    }
    uint64_t v32 = (void *)[v20 copy];
    [v8 _setTabURLs:v32];

    uint64_t v33 = (void *)[v21 copy];
    [v8 _setTabs:v33];

    uint64_t v34 = *(void *)(a1 + 72);
    if (v34)
    {
      uint64_t v35 = *(void *)(v34 + 8);
      if (v35) {
        long long v36 = (id *)(v35 - 16);
      }
      else {
        long long v36 = 0;
      }
    }
    else
    {
      long long v36 = 0;
    }
    uint64_t v37 = WebKit::WebExtensionController::delegate(v36);
    uint64_t v38 = *(void *)(a1 + 72);
    if (v38)
    {
      uint64_t v39 = *(void *)(v38 + 8);
      if (v39) {
        uint64_t v40 = (id *)(v39 - 16);
      }
      else {
        uint64_t v40 = 0;
      }
    }
    else
    {
      uint64_t v40 = 0;
    }
    long long v41 = WebKit::WebExtensionAction::wrapper(v40);
    uint64_t v42 = WebKit::WebExtensionAction::wrapper((id *)a1);
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v43 = *a3;
    *a3 = 0;
    long long v44 = malloc_type_malloc(0x38uLL, 0x10E004099C88F60uLL);
    *long long v44 = MEMORY[0x1E4F14398];
    v44[1] = 50331650;
    void v44[2] = WTF::BlockPtrArc<void ()(objc_object  {objcproto20WKWebExtensionWindow}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::windowsCreate(WTF::BlockPtrArc<void ()(objc_object  {objcproto20WKWebExtensionWindow}*,NSError *)>::fromCallable::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionContext>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::windowsCreate(WTF::BlockPtrArc<void ()(objc_object  {objcproto20WKWebExtensionWindow}*,NSError *)>::fromCallable::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionContext>,WTF::String> &&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto20WKWebExtensionWindow},NSError)#1}::__invoke;
    v44[3] = &WTF::BlockPtrArc<void ()(objc_object  {objcproto20WKWebExtensionWindow}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::windowsCreate(WTF::BlockPtrArc<void ()(objc_object  {objcproto20WKWebExtensionWindow}*,NSError *)>::fromCallable::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionContext>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::windowsCreate(WTF::BlockPtrArc<void ()(objc_object  {objcproto20WKWebExtensionWindow}*,NSError *)>::fromCallable::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionContext>,WTF::String> &&)> &&)::$_0)::descriptor;
    v44[4] = a1;
    v44[5] = a1;
    v44[6] = v43;
    char v45 = _Block_copy(v44);

    __int16 v46 = _Block_copy(v45);
    [v37 webExtensionController:v41 openNewWindowUsingConfiguration:v8 forExtensionContext:v42 completionHandler:v46];

LABEL_64:
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"windows.create()", 0, &cfstr_ItIsNotImpleme.isa, v6, &v49);
    uint64_t v17 = v49;
    uint64_t v49 = 0;
    v51[0] = v17;
    int v52 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionWindowParameters>,WTF::String> &&)>::operator()(a3);
    if (v52 != -1) {
      ((void (*)(WTF::StringImpl **, void *))off_1EE9FE998[v52])(&v48, v51);
    }
    int v52 = -1;
    char v19 = v49;
    uint64_t v49 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v18);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
}

void sub_199316B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionWindowParameters>,WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_199316DC8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionWindow *WebKit::WebExtensionContext::windowsGet(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, int a5, uint64_t *a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  WebKit::WebExtensionContext::getWindow(a1, a3, 0, 0, 0, (uint64_t *)&v34);
  if (v34)
  {
    if (WebKit::WebExtensionWindow::matches(v34, a4))
    {
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      if (a5)
      {
        WebKit::WebExtensionWindow::tabs((uint64_t)v34, 0, (uint64_t *)&v30);
        if (v31)
        {
          BOOL v13 = v30;
          uint64_t v14 = 8 * v31;
          do
          {
            BOOL v15 = *v13;
            *(_DWORD *)BOOL v15 = *(_DWORD *)*v13 + 1;
            WebKit::WebExtensionTab::url(v15, (uint64_t)&v35);
            if (HIDWORD(v33) == v33)
            {
              WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL>((uint64_t)&v32, (unint64_t)&v35);
            }
            else
            {
              WTF::URL::URL((uint64_t)v32 + 40 * HIDWORD(v33), (uint64_t *)&v35);
              ++HIDWORD(v33);
            }
            uint64_t v17 = v35;
            uint64_t v35 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2) {
                WTF::StringImpl::destroy(v17, v16);
              }
              else {
                *(_DWORD *)v17 -= 2;
              }
            }
            WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v15);
            ++v13;
            v14 -= 8;
          }
          while (v14);
        }
        WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v12);
      }
      uint64_t v29 = 0;
      unsigned int v22 = v34;
      if (v34) {
        ++*(_DWORD *)v34;
      }
      uint64_t v23 = *a6;
      *a6 = 0;
      uint64_t v24 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v24 = &unk_1EE9FE9E8;
      *(void *)(v24 + 8) = v22;
      *(unsigned char *)(v24 + 16) = a5;
      *(void *)(v24 + 24) = v23;
      uint64_t v35 = (WTF::StringImpl *)v24;
      WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, (uint64_t *)&v32, &v29, (uint64_t *)&v35, 1, 1);
      int v26 = v35;
      uint64_t v35 = 0;
      if (v26) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v26 + 8))(v26);
      }
      uint64_t v27 = v29;
      uint64_t v29 = 0;
      if (v27) {
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v27);
      }
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v25);
      goto LABEL_31;
    }
    WebKit::toWebExtensionError<>((WebKit *)@"windows.get()", 0, &cfstr_WindowDoesNotM.isa, v11, &v32);
    char v20 = v32;
    uint64_t v32 = 0;
    long long v36 = v20;
    int v37 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)>::operator()(a6);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"windows.get()", 0, &cfstr_WindowNotFound.isa, v10, &v32);
    int v18 = v32;
    uint64_t v32 = 0;
    long long v36 = v18;
    int v37 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)>::operator()(a6);
  }
  if (v37 != -1) {
    ((void (*)(WebKit::WebExtensionTab ***, WTF::StringImpl **))off_1EE9FE9C8[v37])(&v30, &v36);
  }
  int v37 = -1;
  uint64_t v21 = v32;
  uint64_t v32 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v19);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
LABEL_31:
  uint64_t result = v34;
  uint64_t v34 = 0;
  if (result) {
    return (WebKit::WebExtensionWindow *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)result);
  }
  return result;
}

void sub_199317108(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29)
{
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  uint64_t v30 = a15;
  a15 = 0;
  if (v30) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1993172EC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionWindow *WebKit::WebExtensionContext::windowsGetLastFocused(uint64_t a1, unsigned __int8 a2, int a3, NSString *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a1 + 540))
  {
    unsigned int v31 = 0;
    goto LABEL_17;
  }
  WebKit::WebExtensionContext::getWindow(a1, **(void **)(a1 + 528), 0, 0, 0, (uint64_t *)&v31);
  if (!v31)
  {
LABEL_17:
    WebKit::toWebExtensionError<>((WebKit *)@"windows.getLastFocused()", 0, &cfstr_WindowNotFound.isa, a4, &v29);
    BOOL v15 = v29;
    uint64_t v29 = 0;
    uint64_t v33 = v15;
    int v34 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)>::operator()((uint64_t *)a4);
    goto LABEL_19;
  }
  if (WebKit::WebExtensionWindow::matches(v31, a2))
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    if (a3)
    {
      WebKit::WebExtensionWindow::tabs((uint64_t)v31, 0, (uint64_t *)&v27);
      if (v28)
      {
        uint64_t v10 = v27;
        uint64_t v11 = 8 * v28;
        do
        {
          uint64_t v12 = *v10;
          *(_DWORD *)uint64_t v12 = *(_DWORD *)*v10 + 1;
          WebKit::WebExtensionTab::url(v12, (uint64_t)&v32);
          if (HIDWORD(v30) == v30)
          {
            WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL>((uint64_t)&v29, (unint64_t)&v32);
          }
          else
          {
            WTF::URL::URL((uint64_t)v29 + 40 * HIDWORD(v30), (uint64_t *)&v32);
            ++HIDWORD(v30);
          }
          uint64_t v14 = v32;
          uint64_t v32 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v13);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v12);
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v9);
    }
    int v26 = 0;
    char v19 = v31;
    if (v31) {
      ++*(_DWORD *)v31;
    }
    NSString v20 = *a4;
    *a4 = 0;
    uint64_t v21 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v21 = &unk_1EE9FEA10;
    *(void *)(v21 + 8) = v19;
    *(unsigned char *)(v21 + 16) = a3;
    *(void *)(v21 + 24) = v20;
    uint64_t v32 = (WTF::StringImpl *)v21;
    WebKit::WebExtensionContext::requestPermissionToAccessURLs(a1, (uint64_t *)&v29, &v26, (uint64_t *)&v32, 1, 1);
    uint64_t v23 = v32;
    uint64_t v32 = 0;
    if (v23) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v23 + 8))(v23);
    }
    uint64_t v24 = v26;
    int v26 = 0;
    if (v24) {
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v24);
    }
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v22);
    goto LABEL_33;
  }
  WebKit::toWebExtensionError<>((WebKit *)@"windows.getLastFocused()", 0, &cfstr_WindowDoesNotM.isa, v8, &v29);
  uint64_t v17 = v29;
  uint64_t v29 = 0;
  uint64_t v33 = v17;
  int v34 = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)>::operator()((uint64_t *)a4);
LABEL_19:
  if (v34 != -1) {
    ((void (*)(WebKit::WebExtensionTab ***, WTF::StringImpl **))off_1EE9FE9C8[v34])(&v27, &v33);
  }
  int v34 = -1;
  int v18 = v29;
  uint64_t v29 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v16);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
LABEL_33:
  uint64_t result = v31;
  unsigned int v31 = 0;
  if (result) {
    return (WebKit::WebExtensionWindow *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)result);
  }
  return result;
}

void sub_19931763C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29)
{
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  uint64_t v30 = a15;
  a15 = 0;
  if (v30) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::windowsGetAll(unsigned int *a1, unsigned __int8 a2, int a3, uint64_t *a4)
{
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  WebKit::WebExtensionContext::openWindows(a1, 0, (uint64_t)&v47);
  if (v48)
  {
    BOOL v9 = v47;
    uint64_t v10 = &v47[v48];
    do
    {
      uint64_t v11 = *v9;
      *(_DWORD *)uint64_t v11 = *(_DWORD *)*v9 + 1;
      __int16 v46 = v11;
      if (WebKit::WebExtensionWindow::matches(v11, a2))
      {
        uint64_t v12 = HIDWORD(v50);
        if (HIDWORD(v50) == v50)
        {
          BOOL v13 = (WebKit::WebExtensionWindow **)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v49, HIDWORD(v50) + 1, (unint64_t)&v46);
          uint64_t v12 = HIDWORD(v50);
          uint64_t v14 = v49;
          BOOL v15 = *v13;
          ++*(_DWORD *)*v13;
        }
        else
        {
          uint64_t v14 = v49;
          BOOL v15 = v46;
          ++*(_DWORD *)v46;
        }
        v14[v12] = v15;
        HIDWORD(v50) = v12 + 1;
        if (a3)
        {
          WebKit::WebExtensionWindow::tabs((uint64_t)v46, 0, (uint64_t *)&v44);
          if (v45)
          {
            uint64_t v17 = v44;
            uint64_t v18 = 8 * v45;
            do
            {
              char v19 = *v17;
              *(_DWORD *)char v19 = *(_DWORD *)*v17 + 1;
              WebKit::WebExtensionTab::url(v19, (uint64_t)&v40);
              if (HIDWORD(v52) == v52)
              {
                WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL>((uint64_t)&v51, (unint64_t)&v40);
              }
              else
              {
                WTF::URL::URL(v51 + 40 * HIDWORD(v52), (uint64_t *)&v40);
                ++HIDWORD(v52);
              }
              uint64_t v21 = v40;
              uint64_t v40 = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 2) {
                  WTF::StringImpl::destroy(v21, v20);
                }
                else {
                  *(_DWORD *)v21 -= 2;
                }
              }
              WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v19);
              ++v17;
              v18 -= 8;
            }
            while (v18);
          }
          WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v16);
        }
      }
      unsigned int v22 = v46;
      __int16 v46 = 0;
      if (v22) {
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v22);
      }
      ++v9;
    }
    while (v9 != v10);
  }
  uint64_t result = WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v8);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  int v24 = HIDWORD(v50);
  LODWORD(v41) = 0;
  HIDWORD(v41) = HIDWORD(v50);
  if (HIDWORD(v50))
  {
    if (HIDWORD(v50) >> 29)
    {
      __break(0xC471u);
      return result;
    }
    long long v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v50)));
    LODWORD(v41) = v24;
    uint64_t v40 = v25;
    if (HIDWORD(v50))
    {
      int v26 = v49;
      uint64_t v27 = 8 * HIDWORD(v50);
      do
      {
        unsigned int v28 = *v26++;
        ++*v28;
        *(void *)long long v25 = v28;
        long long v25 = (WTF::StringImpl *)((char *)v25 + 8);
        v27 -= 8;
      }
      while (v27);
    }
  }
  char v42 = a3;
  uint64_t v29 = *a4;
  *a4 = 0;
  uint64_t v43 = v29;
  uint64_t v30 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v30 = &unk_1EE9FEA38;
  *(void *)(v30 + 8) = v40;
  uint64_t v31 = v41;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  *(void *)(v30 + 16) = v31;
  *(unsigned char *)(v30 + 24) = v42;
  uint64_t v32 = v43;
  uint64_t v43 = 0;
  *(void *)(v30 + 32) = v32;
  uint64_t v47 = (WebKit::WebExtensionWindow **)v30;
  WebKit::WebExtensionContext::requestPermissionToAccessURLs((uint64_t)a1, &v51, &v39, (uint64_t *)&v47, 1, 1);
  uint64_t v34 = (uint64_t)v47;
  uint64_t v47 = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = v43;
  uint64_t v43 = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v33);
  int v37 = v39;
  uint64_t v39 = 0;
  if (v37) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v37);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v36);
  return WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v38);
}

void sub_199317AE0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, a2);
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v21 - 96, v23);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::windowsUpdate(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  WebKit::WebExtensionContext::getWindow(a1, a2, 0, 0, 0, (uint64_t *)&v30);
  if (v30)
  {
    if (*((unsigned char *)a3 + 80) && WebKit::WebExtensionWindow::state(v30)) {
      *((_WORD *)a3 + 8) = 256;
    }
    id v7 = v30;
    ++*(_DWORD *)v30;
    uint64_t v33 = v7;
    long long v34 = *a3;
    int v35 = *((_DWORD *)a3 + 4);
    LOBYTE(v36) = 0;
    char v38 = 0;
    if (*((unsigned char *)a3 + 40))
    {
      uint64_t v36 = *((void *)a3 + 3);
      uint64_t v8 = *((void *)a3 + 4);
      *((void *)a3 + 3) = 0;
      *((void *)a3 + 4) = 0;
      uint64_t v37 = v8;
      char v38 = 1;
    }
    long long v9 = a3[4];
    long long v39 = a3[3];
    v40[0] = v9;
    *(_OWORD *)((char *)v40 + 12) = *(long long *)((char *)a3 + 76);
    uint64_t v10 = *a4;
    *a4 = 0;
    uint64_t v42 = v10;
    uint64_t v11 = WTF::fastMalloc((WTF *)0x80);
    *(void *)uint64_t v11 = &unk_1EE9FEA70;
    uint64_t v12 = v33;
    uint64_t v33 = 0;
    *(void *)(v11 + 8) = v12;
    LODWORD(v12) = v35;
    *(_OWORD *)(v11 + 16) = v34;
    *(_DWORD *)(v11 + 32) = v12;
    *(unsigned char *)(v11 + 40) = 0;
    *(unsigned char *)(v11 + 56) = 0;
    if (v38)
    {
      *(void *)(v11 + 40) = v36;
      uint64_t v13 = v37;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      *(void *)(v11 + 48) = v13;
      *(unsigned char *)(v11 + 56) = 1;
    }
    long long v14 = v39;
    long long v15 = v40[0];
    *(_OWORD *)(v11 + 92) = *(_OWORD *)((char *)v40 + 12);
    *(_OWORD *)(v11 + 64) = v14;
    *(_OWORD *)(v11 + 80) = v15;
    *(_WORD *)(v11 + 112) = v41;
    uint64_t v16 = v42;
    uint64_t v42 = 0;
    *(void *)(v11 + 120) = v16;
    uint64_t v29 = v11;
    if (!*((unsigned char *)a3 + 17)
      || (int v17 = WebKit::WebExtensionWindow::state(v7), v19 = *((unsigned __int8 *)a3 + 16), *((unsigned char *)a3 + 17))
      && v19 == v17)
    {
      LOBYTE(v31) = 0;
      char v32 = 0;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(&v29);
      if (v32)
      {
        uint64_t v21 = v31;
        uint64_t v31 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v20);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
      }
    }
    else
    {
      if (!*((unsigned char *)a3 + 17))
      {
        uint64_t result = std::__throw_bad_optional_access[abi:sn180100]();
        __break(1u);
        return result;
      }
      WebKit::WebExtensionWindow::setState((uint64_t)v7, v19, &v29, v18);
    }
    uint64_t v25 = v29;
    uint64_t v29 = 0;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
    uint64_t v26 = v42;
    uint64_t v42 = 0;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
    if (v38) {
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v20);
    }
    uint64_t v27 = (uint64_t)v33;
    uint64_t v33 = 0;
    if (v27) {
      WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v27);
    }
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"windows.update()", 0, &cfstr_WindowNotFound.isa, v6, &v31);
    unsigned int v22 = v31;
    uint64_t v31 = 0;
    *(void *)&long long v34 = v22;
    int v41 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)>::operator()(a4);
    if (v41 != -1) {
      ((void (*)(uint64_t *, long long *))off_1EE9FE9C8[v41])(&v29, &v34);
    }
    int v41 = -1;
    int v24 = v31;
    uint64_t v31 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v23);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
  }
  uint64_t result = (uint64_t)v30;
  uint64_t v30 = 0;
  if (result) {
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
  }
  return result;
}

void sub_199317F54(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,uint64_t a27)
{
  if (a26 != -1) {
    ((void (*)(uint64_t *, uint64_t))off_1EE9FE9C8[a26])(&a9, v27);
  }
  a26 = -1;
  uint64_t v29 = a11;
  a11 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, a2);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  uint64_t v30 = a10;
  a10 = 0;
  if (v30) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::windowsRemove(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebKit::WebExtensionContext::getWindow(a1, a2, 0, 0, 0, &v14);
  if (v14)
  {
    WebKit::WebExtensionWindow::close(v14, a3, v4, v5);
  }
  else
  {
    WebKit::toWebExtensionError<>((WebKit *)@"windows.remove()", 0, &cfstr_WindowNotFound.isa, v5, &v11);
    char v6 = v11;
    uint64_t v11 = 0;
    uint64_t v12 = v6;
    char v13 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(a3);
    if (v13)
    {
      uint64_t v8 = v12;
      uint64_t v12 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
    }
    long long v9 = v11;
    uint64_t v11 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result) {
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
  }
  return result;
}

void sub_199318180(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a12) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(a12);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::fireWindowsEventIfNeeded(uint64_t a1, char a2, long long *a3)
{
  char v34 = a2;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v35, &v34, 1);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  LOBYTE(v24) = 0;
  char v32 = 0;
  if (*((unsigned char *)a3 + 96))
  {
    long long v24 = *a3;
    int v25 = *((_DWORD *)a3 + 4);
    LOBYTE(v26) = 0;
    char v29 = 0;
    if (*((unsigned char *)a3 + 40))
    {
      unsigned int v6 = *((_DWORD *)a3 + 9);
      uint64_t v26 = 0;
      unsigned int v27 = 0;
      unsigned int v28 = v6;
      if (v6)
      {
        if (v6 >= 0x1745D18)
        {
          __break(0xC471u);
          return;
        }
        unsigned int v7 = 176 * v6;
        uint64_t v8 = WTF::fastMalloc((WTF *)(176 * v6));
        unsigned int v27 = v7 / 0xB0;
        uint64_t v26 = v8;
        unsigned int v9 = *((_DWORD *)a3 + 9);
        if (v9)
        {
          uint64_t v10 = *((void *)a3 + 3);
          uint64_t v11 = v10 + 176 * v9;
          uint64_t v12 = v8 + 56;
          do
          {
            *(_OWORD *)(v12 - 56) = *(_OWORD *)v10;
            *(unsigned char *)(v12 - 40) = 0;
            *(unsigned char *)uint64_t v12 = 0;
            if (*(unsigned char *)(v10 + 56))
            {
              char v13 = *(_DWORD **)(v10 + 16);
              if (v13) {
                *v13 += 2;
              }
              *(void *)(v12 - 40) = v13;
              long long v14 = *(_OWORD *)(v10 + 40);
              *(_OWORD *)(v12 - 32) = *(_OWORD *)(v10 + 24);
              *(_OWORD *)(v12 - 16) = v14;
              *(unsigned char *)uint64_t v12 = 1;
            }
            *(unsigned char *)(v12 + 8) = 0;
            *(unsigned char *)(v12 + 16) = 0;
            if (*(unsigned char *)(v10 + 72))
            {
              long long v15 = *(_DWORD **)(v10 + 64);
              if (v15) {
                *v15 += 2;
              }
              *(void *)(v12 + 8) = v15;
              *(unsigned char *)(v12 + 16) = 1;
            }
            long long v16 = *(_OWORD *)(v10 + 80);
            *(_OWORD *)(v12 + 40) = *(_OWORD *)(v10 + 96);
            *(_OWORD *)(v12 + 24) = v16;
            long long v17 = *(_OWORD *)(v10 + 112);
            long long v18 = *(_OWORD *)(v10 + 128);
            long long v19 = *(_OWORD *)(v10 + 144);
            *(_OWORD *)(v12 + 98) = *(_OWORD *)(v10 + 154);
            *(_OWORD *)(v12 + 88) = v19;
            *(_OWORD *)(v12 + 72) = v18;
            *(_OWORD *)(v12 + 56) = v17;
            v12 += 176;
            v10 += 176;
          }
          while (v10 != v11);
        }
      }
      char v29 = 1;
    }
    long long v20 = a3[4];
    long long v30 = a3[3];
    v31[0] = v20;
    *(_OWORD *)((char *)v31 + 12) = *(long long *)((char *)a3 + 76);
    char v32 = 1;
  }
  uint64_t v21 = WTF::fastMalloc((WTF *)0x88);
  *(void *)uint64_t v21 = &unk_1EE9FEAE8;
  *(void *)(v21 + 8) = a1;
  *(void *)(v21 + 16) = a1;
  *(unsigned char *)(v21 + 24) = a2;
  std::__optional_move_base<WebKit::WebExtensionWindowParameters,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v21 + 32), (uint64_t)&v24);
  uint64_t v33 = v21;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v35, &v33);
  uint64_t v23 = v33;
  uint64_t v33 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  if (v32 && v29) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v22);
  }
  if (v35) {
    WTF::fastFree((WTF *)(v35 - 16), v22);
  }
}

void sub_1993184A8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a18)
  {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25, a2);
    if (a25) {
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25, a2);
    }
  }
  if (a11) {
    CFRelease(*(CFTypeRef *)(a11 + 8));
  }
  uint64_t v28 = *(void *)(v26 - 56);
  if (v28) {
    WTF::fastFree((WTF *)(v28 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtrArc<void ()(objc_object  {objcproto20WKWebExtensionWindow}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::windowsCreate(WTF::BlockPtrArc<void ()(objc_object  {objcproto20WKWebExtensionWindow}*,NSError *)>::fromCallable::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionContext>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::windowsCreate(WTF::BlockPtrArc<void ()(objc_object  {objcproto20WKWebExtensionWindow}*,NSError *)>::fromCallable::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionContext>,WTF::String> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

void WTF::BlockPtrArc<void ()(objc_object  {objcproto20WKWebExtensionWindow}*,NSError *)>::fromCallable<WebKit::WebExtensionContext::windowsCreate(WTF::BlockPtrArc<void ()(objc_object  {objcproto20WKWebExtensionWindow}*,NSError *)>::fromCallable::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionContext>,WTF::String> &&)> &&)::$_0>(WebKit::WebExtensionContext::windowsCreate(WTF::BlockPtrArc<void ()(objc_object  {objcproto20WKWebExtensionWindow}*,NSError *)>::fromCallable::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionContext>,WTF::String> &&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto20WKWebExtensionWindow},NSError)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  unsigned int v6 = a3;
  if (v6)
  {
    unsigned int v7 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      long long v20 = WebKit::privacyPreservingDescription(v6, v8);
      LODWORD(buf[0]) = 138543362;
      *(void *)((char *)buf + 4) = v20;
      _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "Error for open new window: %{public}@", (uint8_t *)buf, 0xCu);
    }
    unsigned int v9 = [(WebKit *)v6 localizedDescription];
    WebKit::toWebExtensionError<>((WebKit *)@"windows.create()", 0, v9, v10, v28);
    uint64_t v11 = v28[0];
    v28[0] = 0;
    *((void *)&buf[0] + 1) = v11;
    int v38 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionWindowParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 48));
    if (v38 != -1) {
      ((void (*)(long long *, char *))off_1EE9FE998[v38])(&v21, (char *)buf + 8);
    }
    int v38 = -1;
    char v13 = v28[0];
    v28[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  else if (v5)
  {
    WebKit::WebExtensionContext::getOrCreateWindow(*(void *)(a1 + 32), v5, (uint64_t)buf);
    uint64_t v14 = *(void *)&buf[0];
    if (WebKit::WebExtensionWindow::isPrivate(*(WebKit::WebExtensionWindow **)&buf[0])
      && ((uint64_t v15 = *(void *)(*(void *)(v14 + 24) + 8)) != 0 ? (v16 = v15 - 16) : (v16 = 0), !*(unsigned char *)(v16 + 273)))
    {
      int v18 = 0;
      LOBYTE(v28[0]) = 0;
    }
    else
    {
      WebKit::WebExtensionWindow::parameters((id *)v14, 0, (uint64_t)&v21);
      *(_OWORD *)uint64_t v28 = v21;
      int v29 = v22;
      LOBYTE(v30[0]) = 0;
      char v31 = 0;
      if (v25)
      {
        v30[0] = v23;
        uint64_t v17 = v24;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        v30[1] = v17;
        char v31 = 1;
      }
      long long v32 = v26;
      v33[0] = v27[0];
      *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)((char *)v27 + 12);
      int v18 = 1;
    }
    char v34 = v18;
    std::__optional_move_base<WebKit::WebExtensionWindowParameters,false>::__optional_move_base[abi:sn180100]((unsigned char *)buf + 8, (uint64_t)v28);
    int v38 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionWindowParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 48));
    if (v38 != -1) {
      ((void (*)(char *, char *))off_1EE9FE998[v38])(&v35, (char *)buf + 8);
    }
    int v38 = -1;
    if (v34 && v31) {
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v19);
    }
    if (v18 && v25) {
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v19);
    }
    if (v14) {
      WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v14);
    }
  }
  else
  {
    BYTE8(buf[0]) = 0;
    char v37 = 0;
    int v38 = 0;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionWindowParameters>,WTF::String> &&)>::operator()((uint64_t *)(a1 + 48));
    ((void (*)(WTF::StringImpl **, char *))off_1EE9FE998[0])(v28, (char *)buf + 8);
  }
}

void sub_19931892C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v38 = *(unsigned int *)(v36 - 80);
  if (v38 != -1) {
    ((void (*)(WTF::StringImpl **, uint64_t))off_1EE9FE998[v38])(&a21, v35);
  }

  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FE9E8;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FE9E8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGet(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  WebKit::WebExtensionWindow::parameters(*(id **)(a1 + 8), *(unsigned __int8 *)(a1 + 16), (uint64_t)&v5);
  long long v13 = v5;
  int v14 = v6;
  LOBYTE(v15) = 0;
  char v17 = 0;
  if (v9)
  {
    uint64_t v15 = v7;
    uint64_t v2 = v8;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v16 = v2;
    char v17 = 1;
  }
  long long v18 = v10;
  v19[0] = v11[0];
  *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)((char *)v11 + 12);
  int v20 = 0;
  uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)>::operator()((uint64_t *)(a1 + 24));
  if (v20 != -1) {
    uint64_t result = ((uint64_t (*)(char *, long long *))off_1EE9FE9C8[v20])(&v12, &v13);
  }
  int v20 = -1;
  if (v9) {
    return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v4);
  }
  return result;
}

void sub_199318C9C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  if (a38 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FE9C8[a38])(&a24, v38);
  }
  a38 = -1;
  if (a14) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FEA10;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FEA10;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGetLastFocused(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  WebKit::WebExtensionWindow::parameters(*(id **)(a1 + 8), *(unsigned __int8 *)(a1 + 16), (uint64_t)&v5);
  long long v13 = v5;
  int v14 = v6;
  LOBYTE(v15) = 0;
  char v17 = 0;
  if (v9)
  {
    uint64_t v15 = v7;
    uint64_t v2 = v8;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v16 = v2;
    char v17 = 1;
  }
  long long v18 = v10;
  v19[0] = v11[0];
  *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)((char *)v11 + 12);
  int v20 = 0;
  uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)>::operator()((uint64_t *)(a1 + 24));
  if (v20 != -1) {
    uint64_t result = ((uint64_t (*)(char *, long long *))off_1EE9FE9C8[v20])(&v12, &v13);
  }
  int v20 = -1;
  if (v9) {
    return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v4);
  }
  return result;
}

void sub_199318F14(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  if (a38 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FE9C8[a38])(&a24, v38);
  }
  a38 = -1;
  if (a14) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9FEA38;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9FEA38;
  uint64_t v3 = *((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0,void,WTF::HashSet<WTF::URL,WTF::DefaultHash<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTraits<WebKit::WebExtensionContext::windowsGetAll(WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)> &&)::$_0>,WTF::HashTableTraits> &&,WTF::HashTableTraits,WTF::WallTime>::call(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v2 = *(unsigned int *)(result + 20);
  if (v2)
  {
    if (v2 >= 0x2AAAAAB)
    {
      __break(0xC471u);
      return result;
    }
    unsigned int v3 = 96 * v2;
    uint64_t v4 = WTF::fastMalloc((WTF *)(96 * v2));
    LODWORD(v2) = v3 / 0x60;
    LODWORD(v26) = v3 / 0x60;
    uint64_t v25 = v4;
    uint64_t v5 = *(unsigned int *)(v1 + 20);
    if (v5)
    {
      int v6 = *(id ***)(v1 + 8);
      uint64_t v7 = 8 * v5;
      do
      {
        WebKit::WebExtensionWindow::parameters(*v6, *(unsigned __int8 *)(v1 + 24), (uint64_t)&v27);
        unsigned int v9 = HIDWORD(v26);
        uint64_t v10 = v25;
        uint64_t v11 = v25 + 96 * HIDWORD(v26);
        long long v12 = v27;
        *(_DWORD *)(v11 + 16) = v28;
        *(_OWORD *)uint64_t v11 = v12;
        *(unsigned char *)(v11 + 24) = 0;
        long long v13 = (void *)(v11 + 24);
        *(unsigned char *)(v11 + 40) = 0;
        int v14 = (unsigned char *)(v11 + 40);
        if (v32)
        {
          void *v13 = 0;
          v13[1] = 0;
          uint64_t v15 = v29;
          uint64_t v29 = 0;
          void *v13 = v15;
          int v16 = v30;
          int v30 = 0;
          uint64_t v17 = v10 + 96 * v9;
          *(_DWORD *)(v17 + 32) = v16;
          int v18 = v31;
          int v31 = 0;
          *(_DWORD *)(v17 + 36) = v18;
          unsigned char *v14 = 1;
        }
        long long v19 = (_OWORD *)(v10 + 96 * v9);
        long long v21 = v33;
        long long v20 = v34[0];
        *(_OWORD *)((char *)v19 + 76) = *(_OWORD *)((char *)v34 + 12);
        v19[3] = v21;
        v19[4] = v20;
        ++HIDWORD(v26);
        if (v32) {
          WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v8);
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
      uint64_t v4 = v25;
      LODWORD(v2) = v26;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  *(void *)&long long v27 = v4;
  unsigned int v22 = HIDWORD(v26);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  *((void *)&v27 + 1) = __PAIR64__(v22, v2);
  int v28 = 0;
  uint64_t v23 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)v23 + 16))(v23, &v27);
  (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  if (v28 != -1) {
    ((void (*)(char *, long long *))off_1EE9FEA50[v28])(&v35, &v27);
  }
  return WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v24);
}

void sub_199319274(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Vector<WebKit::WebExtensionWindowParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &&>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9FEA70;
  uint64_t v3 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(unsigned char *)(a1 + 56)) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, a2);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FEA70;
  uint64_t v3 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((unsigned char *)this + 56)) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3,void,std::experimental::fundamentals_v3::expected<void,WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = *(_DWORD **)a2;
    if (*(void *)a2) {
      *v3 += 2;
    }
    *(void *)&long long v25 = v3;
    int v32 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)>::operator()((uint64_t *)(a1 + 120));
    return ((uint64_t (*)(WTF::StringImpl **, long long *))off_1EE9FE9C8[v32])(&v22, &v25);
  }
  else
  {
    uint64_t v5 = *(_DWORD **)(a1 + 8);
    ++*v5;
    uint64_t v24 = v5;
    long long v25 = *(_OWORD *)(a1 + 16);
    int v26 = *(_DWORD *)(a1 + 32);
    LOBYTE(v27) = 0;
    char v29 = 0;
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v27 = *(void *)(a1 + 40);
      uint64_t v6 = *(void *)(a1 + 48);
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      uint64_t v28 = v6;
      char v29 = 1;
    }
    long long v7 = *(_OWORD *)(a1 + 80);
    long long v30 = *(_OWORD *)(a1 + 64);
    v31[0] = v7;
    *(_OWORD *)((char *)v31 + 12) = *(_OWORD *)(a1 + 92);
    uint64_t v8 = *(void *)(a1 + 120);
    *(void *)(a1 + 120) = 0;
    uint64_t v33 = v8;
    uint64_t v9 = WTF::fastMalloc((WTF *)0x80);
    *(void *)uint64_t v9 = &unk_1EE9FEA98;
    long long v12 = v24;
    uint64_t v24 = 0;
    *(void *)(v9 + 8) = v12;
    LODWORD(v12) = v26;
    *(_OWORD *)(v9 + 16) = v25;
    *(_DWORD *)(v9 + 32) = v12;
    *(unsigned char *)(v9 + 40) = 0;
    *(unsigned char *)(v9 + 56) = 0;
    if (v29)
    {
      *(void *)(v9 + 40) = v27;
      uint64_t v13 = v28;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      *(void *)(v9 + 48) = v13;
      *(unsigned char *)(v9 + 56) = 1;
    }
    long long v14 = v30;
    long long v15 = v31[0];
    *(_OWORD *)(v9 + 92) = *(_OWORD *)((char *)v31 + 12);
    *(_OWORD *)(v9 + 64) = v14;
    *(_OWORD *)(v9 + 80) = v15;
    uint64_t v16 = v33;
    uint64_t v33 = 0;
    *(void *)(v9 + 120) = v16;
    uint64_t v21 = v9;
    if (*(unsigned char *)(a1 + 105) && *(unsigned char *)(a1 + 104))
    {
      WebKit::WebExtensionWindow::focus((uint64_t)v5, &v21, v10, v11);
    }
    else
    {
      LOBYTE(v22) = 0;
      char v23 = 0;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()(&v21);
      if (v23)
      {
        int v18 = v22;
        unsigned int v22 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v17);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
      }
    }
    uint64_t v19 = v21;
    uint64_t v21 = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    uint64_t v20 = v33;
    uint64_t v33 = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    if (v29) {
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v17);
    }
    uint64_t result = (uint64_t)v24;
    uint64_t v24 = 0;
    if (result) {
      return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
    }
  }
  return result;
}

void sub_1993196BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,uint64_t a27)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a27) {
    (*(void (**)(uint64_t))(*(void *)a27 + 8))(a27);
  }
  if (a19) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27, a2);
  }
  if (a13) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_3)#1},void,$_3>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9FEA98;
  uint64_t v3 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(unsigned char *)(a1 + 56)) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, a2);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_3)#1},void,$_3>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FEA98;
  uint64_t v3 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((unsigned char *)this + 56)) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_3)#1},void,$_3>::call(uint64_t a1, uint64_t a2)
{
  v26[13] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = *(_DWORD **)a2;
    if (*(void *)a2) {
      *v3 += 2;
    }
    v26[0] = v3;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)>::operator()((uint64_t *)(a1 + 120));
    return ((uint64_t (*)(WTF::StringImpl **, void *))off_1EE9FE9D0)(&v24, v26);
  }
  uint64_t v5 = *(WebKit::WebExtensionWindow **)(a1 + 8);
  ++*(_DWORD *)v5;
  uint64_t v6 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  long long v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v7 = &unk_1EE9FEAC0;
  v7[1] = v5;
  void v7[2] = v6;
  char v23 = v7;
  if (*(unsigned char *)(a1 + 96) && !WebKit::WebExtensionWindow::state(v5))
  {
    v27.origin.CGFloat x = WebKit::WebExtensionWindow::frame(v5);
    CGFloat x = v27.origin.x;
    CGFloat y = v27.origin.y;
    CGFloat width = v27.size.width;
    CGFloat height = v27.size.height;
    if (CGRectIsNull(v27))
    {
      WebKit::toWebExtensionError<>((WebKit *)@"windows.update()", 0, &cfstr_ItIsNotImpleme_0.isa, v14, &v24);
      long long v15 = v24;
      uint64_t v24 = 0;
      long long v25 = v15;
      LOBYTE(v26[0]) = 1;
      WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)&v23);
      if (LOBYTE(v26[0]))
      {
        uint64_t v16 = v25;
        long long v25 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy(v16, v8);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
      }
      uint64_t v9 = v24;
      uint64_t v24 = 0;
      if (!v9) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }
    if (!*(unsigned char *)(a1 + 96))
    {
      uint64_t result = std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    CGFloat v17 = *(double *)(a1 + 80);
    CGFloat v18 = *(double *)(a1 + 88);
    CGFloat v19 = *(double *)(a1 + 64);
    CGFloat v20 = *(double *)(a1 + 72);
    v28.origin.CGFloat x = x;
    v28.origin.CGFloat y = y;
    v28.size.CGFloat width = width;
    v28.size.CGFloat height = height;
    v29.origin.CGFloat x = v19;
    v29.origin.CGFloat y = v20;
    v29.size.CGFloat width = v17;
    v29.size.CGFloat height = v18;
    if (!CGRectEqualToRect(v28, v29))
    {
      WebKit::WebExtensionWindow::setFrame((uint64_t)v5, (uint64_t *)&v23, v19, v20, v17, v18, v21, v22);
      goto LABEL_12;
    }
  }
  LOBYTE(v25) = 0;
  LOBYTE(v26[0]) = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)>::operator()((uint64_t *)&v23);
  if (LOBYTE(v26[0]))
  {
    uint64_t v9 = v25;
    long long v25 = 0;
    if (v9)
    {
LABEL_9:
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
LABEL_12:
  uint64_t result = (uint64_t)v23;
  char v23 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_199319BB4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  if (a13 && a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_3)#1}::operator()($_3)::{lambda($_3)#1},void,$_3>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FEAC0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_3)#1}::operator()($_3)::{lambda($_3)#1},void,$_3>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FEAC0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::windowsUpdate(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionWindowParameters,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)> &&)::$_3::operator()(std::experimental::fundamentals_v3::expected<void,WTF::String> &&)::{lambda($_3)#1}::operator()($_3)::{lambda($_3)#1},void,$_3>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = *(_DWORD **)a2;
    if (*(void *)a2) {
      *v3 += 2;
    }
    *(void *)&long long v15 = v3;
    int v22 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)>::operator()((uint64_t *)(a1 + 16));
    return ((uint64_t (*)(long long *, long long *))off_1EE9FE9C8[v22])(&v7, &v15);
  }
  else
  {
    WebKit::WebExtensionWindow::parameters(*(id **)(a1 + 8), 0, (uint64_t)&v7);
    long long v15 = v7;
    int v16 = v8;
    LOBYTE(v17) = 0;
    char v19 = 0;
    if (v11)
    {
      uint64_t v17 = v9;
      uint64_t v5 = v10;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v18 = v5;
      char v19 = 1;
    }
    long long v20 = v12;
    v21[0] = v13[0];
    *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)((char *)v13 + 12);
    int v22 = 0;
    uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::WebExtensionWindowParameters,WTF::String> &&)>::operator()((uint64_t *)(a1 + 16));
    if (v22 != -1) {
      uint64_t result = ((uint64_t (*)(char *, long long *))off_1EE9FE9C8[v22])(&v14, &v15);
    }
    int v22 = -1;
    if (v11) {
      return WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v6);
    }
  }
  return result;
}

void sub_199319F5C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  if (a38 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9FE9C8[a38])(&a24, v38);
  }
  a38 = -1;
  if (a14) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireWindowsEventIfNeeded(WebKit::WebExtensionEventListenerType,std::optional<WebKit::WebExtensionWindowParameters>)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9FEAE8;
  if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 72)) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, a2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireWindowsEventIfNeeded(WebKit::WebExtensionEventListenerType,std::optional<WebKit::WebExtensionWindowParameters>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FEAE8;
  if (*((unsigned char *)this + 128) && *((unsigned char *)this + 72)) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::fireWindowsEventIfNeeded(WebKit::WebExtensionEventListenerType,std::optional<WebKit::WebExtensionWindowParameters>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  WebKit::WebExtensionContext::processes(v2, *(unsigned char *)(a1 + 24), 0, (uint64_t *)&v19);
  uint64_t v4 = v2[9];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v5 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v19);
    uint64_t v6 = v5;
    long long v7 = v3;
    int v8 = v19 ? &v19[*((unsigned int *)v19 - 1)] : 0;
    if (v8 != v5)
    {
      do
      {
        uint64_t v9 = *v6;
        uint64_t v10 = v2[4];
        char v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)char v11 = 1623;
        *((void *)v11 + 1) = v10;
        *((void *)v11 + 66) = (char *)v11 + 16;
        *((void *)v11 + 67) = 512;
        *((void *)v11 + 68) = 0;
        *((void *)v11 + 70) = 0;
        *((void *)v11 + 69) = 0;
        IPC::Encoder::encodeHeader(v11);
        int v22 = v11;
        IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::encode<IPC::Encoder>(v11, *(unsigned char *)(a1 + 24));
        LODWORD(v10) = *(unsigned __int8 *)(a1 + 128);
        long long v12 = (unsigned char *)IPC::Encoder::grow(v11, 1uLL, 1);
        if (v10)
        {
          if (!v13)
          {
            __break(0xC471u);
            goto LABEL_29;
          }
          unsigned char *v12 = 1;
          if (!*(unsigned char *)(a1 + 128))
          {
            std::__throw_bad_optional_access[abi:sn180100]();
            __break(1u);
LABEL_29:
            JUMPOUT(0x19931A2C8);
          }
          IPC::ArgumentCoder<WebKit::WebExtensionWindowParameters,void>::encode(v11, a1 + 32);
        }
        else
        {
          if (!v13)
          {
            __break(0xC471u);
            JUMPOUT(0x19931A2E8);
          }
          unsigned char *v12 = 0;
        }
        LOBYTE(v20) = 0;
        char v21 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v22, 0, (uint64_t)&v20, 1);
        if (v21)
        {
          uint64_t v14 = v20;
          uint64_t v20 = 0;
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
          }
        }
        long long v15 = v22;
        int v22 = 0;
        if (v15)
        {
          IPC::Encoder::~Encoder(v15, v3);
          WTF::fastFree(v16, v17);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_22;
          }
        }
        uint64_t v6 = v7;
LABEL_22:
        ;
      }
      while (v6 != v8);
    }
  }
  uint64_t result = v19;
  if (v19) {
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v19, v3);
  }
  return result;
}

void sub_19931A2F4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a10) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19931A41C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19931A564(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void sub_19931A684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19931A7AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19931A870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::~WebExtensionContext(WebKit::WebExtensionContext *this, void *a2)
{
  *(void *)this = &unk_1EE9FFEA8;
  *((void *)this + 2) = &unk_1EE9FFED8;
  uint64_t v3 = (const void *)*((void *)this + 93);
  *((void *)this + 93) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 92);
  *((void *)this + 92) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v5) {
    CFRelease(v5);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 704, a2);
  long long v7 = (WTF::StringImpl **)*((void *)this + 87);
  if (v7) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v6);
  }
  uint64_t v8 = *((void *)this + 86);
  if (v8) {
    WTF::fastFree((WTF *)(v8 - 16), v6);
  }
  uint64_t v9 = *((void *)this + 85);
  if (v9) {
    WTF::fastFree((WTF *)(v9 - 16), v6);
  }
  uint64_t v10 = (WTF::StringImpl **)*((void *)this + 84);
  if (v10) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, (WTF::StringImpl *)v6);
  }
  char v11 = (const void *)*((void *)this + 83);
  *((void *)this + 83) = 0;
  if (v11) {
    CFRelease(v11);
  }
  long long v12 = (const void *)*((void *)this + 82);
  *((void *)this + 82) = 0;
  if (v12) {
    CFRelease(v12);
  }
  WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 640, v6);
  uint64_t v14 = (WTF::StringImpl *)*((void *)this + 79);
  *((void *)this + 79) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 608, v13);
  int v16 = (const void *)*((void *)this + 75);
  *((void *)this + 75) = 0;
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = *((void *)this + 73);
  if (v17) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v17, v15);
  }
  uint64_t v18 = (unsigned int **)*((void *)this + 71);
  if (v18) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v18, v15);
  }
  uint64_t v19 = *((void *)this + 70);
  if (v19) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v19, v15);
  }
  uint64_t v20 = (WTF *)*((void *)this + 66);
  if (v20)
  {
    *((void *)this + 66) = 0;
    *((_DWORD *)this + 134) = 0;
    WTF::fastFree(v20, v15);
  }
  uint64_t v21 = *((void *)this + 65);
  if (v21) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v21, v15);
  }
  uint64_t v22 = *((void *)this + 64);
  if (v22) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v22, v15);
  }
  uint64_t v23 = *((void *)this + 63);
  if (v23) {
    WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v23, v15);
  }
  uint64_t v24 = *((void *)this + 62);
  if (v24) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v24, v15);
  }
  uint64_t v25 = *((void *)this + 61);
  if (v25) {
    WTF::fastFree((WTF *)(v25 - 16), v15);
  }
  uint64_t v26 = *((void *)this + 60);
  *((void *)this + 60) = 0;
  if (v26) {
    CFRelease(*(CFTypeRef *)(v26 + 8));
  }
  uint64_t v27 = *((void *)this + 58);
  if (v27) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v27, v15);
  }
  uint64_t v28 = *((void *)this + 56);
  if (v28) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v28, v15);
  }
  CGRect v29 = (WTF::StringImpl **)*((void *)this + 55);
  if (v29) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v29, (WTF::StringImpl *)v15);
  }
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 424, v15);
  int v31 = (const void *)*((void *)this + 52);
  *((void *)this + 52) = 0;
  if (v31) {
    CFRelease(v31);
  }
  int v32 = (WTF::StringImpl **)*((void *)this + 51);
  if (v32) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v32, v30);
  }
  uint64_t v33 = *((void *)this + 50);
  if (v33) {
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v33, v30);
  }
  uint64_t v34 = *((void *)this + 49);
  if (v34) {
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v34, v30);
  }
  uint64_t v35 = *((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = (WTF::StringImpl *)*((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v30);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  char v37 = (const void *)*((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v37) {
    CFRelease(v37);
  }
  uint64_t v38 = (const void *)*((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v38) {
    CFRelease(v38);
  }
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 42, 0);
  uint64_t v40 = (const void *)*((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v40) {
    CFRelease(v40);
  }
  int v41 = (WTF::StringImpl *)*((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, v39);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  uint64_t v42 = *((void *)this + 38);
  if (v42) {
    WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::deallocateTable(v42, v39);
  }
  uint64_t v43 = *((void *)this + 37);
  if (v43) {
    WTF::fastFree((WTF *)(v43 - 16), v39);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 280, v39);
  unsigned int v45 = (WTF::StringImpl **)*((void *)this + 32);
  if (v45) {
    WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable(v45, v44);
  }
  WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::deleteAllNodes((uint64_t)this + 232, v44);
  uint64_t v47 = *((void *)this + 29);
  if (v47) {
    WTF::fastFree((WTF *)(v47 - 16), v46);
  }
  int v48 = (uint64_t *)*((void *)this + 26);
  if (v48) {
    WTF::HashTable<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>>::deallocateTable(v48, v46);
  }
  uint64_t v49 = (uint64_t *)*((void *)this + 25);
  if (v49) {
    WTF::HashTable<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>>::deallocateTable(v49, v46);
  }
  uint64_t v50 = (WTF::StringImpl **)*((void *)this + 22);
  if (v50) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v50, (WTF::StringImpl *)v46);
  }
  uint64_t v51 = (WTF::StringImpl **)*((void *)this + 21);
  if (v51) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v51, (WTF::StringImpl *)v46);
  }
  uint64_t v52 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v52) {
    CFRelease(*(CFTypeRef *)(v52 + 8));
  }
  uint64_t v53 = (WTF::StringImpl **)*((void *)this + 19);
  if (v53) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v53, (WTF::StringImpl *)v46);
  }
  uint64_t v54 = (const void *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v54) {
    CFRelease(v54);
  }
  uint64_t v55 = (WTF::StringImpl *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2) {
      WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v46);
    }
    else {
      *(_DWORD *)v55 -= 2;
    }
  }
  uint64_t v56 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2) {
      WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v46);
    }
    else {
      *(_DWORD *)v56 -= 2;
    }
  }
  char v57 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v57 && atomic_fetch_add((atomic_uint *volatile)v57, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v57);
    WTF::fastFree((WTF *)v57, v46);
  }
  uint64_t v58 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v58) {
    CFRelease(*(CFTypeRef *)(v58 + 8));
  }
  uint64_t v59 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v59) {
    CFRelease(v59);
  }
  uint64_t v60 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v60) {
    CFRelease(v60);
  }
  uint64_t v61 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2) {
      WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v46);
    }
    else {
      *(_DWORD *)v61 -= 2;
    }
  }
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v46);
}

{
  uint64_t vars8;

  WebKit::WebExtensionContext::~WebExtensionContext(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::WebExtensionContext::WebExtensionContext(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionContext::WebExtensionContext((WebKit::WebExtensionContext *)a1);
  uint64_t v4 = *a2;
  if (v4) {
    CFRetain(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v4;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 120);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  int v16 = v6;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"webkit-extension://", 20, (uint64_t *)&v16, 47, &v17);
  MEMORY[0x19972E890](v18, &v17, 0);
  WTF::URL::operator=(a1 + 80, (uint64_t)v18);
  uint64_t v8 = v18[0];
  v18[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v17;
  uint64_t v17 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v16;
  int v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  char v11 = [[_WKWebExtensionContextDelegate alloc] initWithWebExtensionContext:a1];
  long long v12 = v11;
  if (v11) {
    CFRetain(v11);
  }

  uint64_t v13 = *(const void **)(a1 + 352);
  *(void *)(a1 + 352) = v12;
  if (v13) {
    CFRelease(v13);
  }

  uint64_t v14 = [MEMORY[0x1E4F28E10] weakToStrongObjectsMapTable];
  WTF::RetainPtr<NSURLSession>::operator=((const void **)(a1 + 600), v14);

  return a1;
}

void sub_19931AEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  uint64_t v14 = v13;

  WebKit::WebExtensionContext::~WebExtensionContext(v12, v16);
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionContext::createError(uint64_t a1, int a2, void *a3, void *a4)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v8 = a4;
  switch(a2)
  {
    case 1:
      WebCore::localizedString((uint64_t *)&v30, (WebCore *)@"An unknown error has occurred. (WKWebExtensionContext)", v7);
      if (v30)
      {
        uint64_t v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        char v11 = v30;
        long long v30 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2) {
            WTF::StringImpl::destroy(v11, v9);
          }
          else {
            *(_DWORD *)v11 -= 2;
          }
        }
      }
      else
      {
        uint64_t v10 = &stru_1EEA10550;
      }
      goto LABEL_28;
    case 2:
      WebCore::localizedString((uint64_t *)&v30, (WebCore *)@"Extension context is already loaded.", v7);
      if (v30)
      {
        uint64_t v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        uint64_t v13 = v30;
        long long v30 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, v12);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
      }
      else
      {
        uint64_t v10 = &stru_1EEA10550;
      }
      uint64_t v22 = 2;
      break;
    case 3:
      WebCore::localizedString((uint64_t *)&v30, (WebCore *)@"Extension context is not loaded.", v7);
      if (v30)
      {
        uint64_t v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        long long v15 = v30;
        long long v30 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v14);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
      }
      else
      {
        uint64_t v10 = &stru_1EEA10550;
      }
      uint64_t v22 = 3;
      break;
    case 4:
      WebCore::localizedString((uint64_t *)&v30, (WebCore *)@"Another extension context is loaded with the same base URL.", v7);
      if (v30)
      {
        uint64_t v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        uint64_t v17 = v30;
        long long v30 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v16);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
      }
      else
      {
        uint64_t v10 = &stru_1EEA10550;
      }
      uint64_t v22 = 4;
      break;
    case 5:
      WebCore::localizedString((uint64_t *)&v30, (WebCore *)@"No background content is available to load.", v7);
      if (v30)
      {
        uint64_t v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        uint64_t v19 = v30;
        long long v30 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v18);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
      }
      else
      {
        uint64_t v10 = &stru_1EEA10550;
      }
      uint64_t v22 = 5;
      break;
    case 6:
      WebCore::localizedString((uint64_t *)&v30, (WebCore *)@"The background content failed to load due to an error.", v7);
      if (v30)
      {
        uint64_t v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        uint64_t v21 = v30;
        long long v30 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v20);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
      }
      else
      {
        uint64_t v10 = &stru_1EEA10550;
      }
      uint64_t v22 = 6;
      break;
    default:
      uint64_t v10 = 0;
LABEL_28:
      uint64_t v22 = 1;
      break;
  }
  if (objc_msgSend(v6, "length", v30))
  {
    uint64_t v23 = (__CFString *)v6;

    uint64_t v10 = v23;
  }
  uint64_t v24 = *MEMORY[0x1E4F28568];
  uint64_t v33 = *MEMORY[0x1E4F28568];
  v34[0] = v10;
  uint64_t v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v34 forKeys:&v33 count:1];
  if (v8)
  {
    uint64_t v26 = *MEMORY[0x1E4F28A50];
    v31[0] = v24;
    v31[1] = v26;
    v32[0] = v10;
    v32[1] = v8;
    uint64_t v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:v31 count:2];

    uint64_t v25 = (void *)v27;
  }
  uint64_t v28 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"WKWebExtensionContextErrorDomain" code:v22 userInfo:v25];

  return v28;
}

void sub_19931B330(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::recordError(const void **this, NSError *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (!this[7])
  {
    uint64_t v4 = [MEMORY[0x1E4F1CA48] array];
    WTF::RetainPtr<NSMutableArray>::operator=(this + 7, v4);
  }
  uint64_t v5 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    long long v15 = WebKit::privacyPreservingDescription((WebKit *)v3, v6);
    int v16 = 138543362;
    uint64_t v17 = v15;
    _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "Error recorded: %{public}@", (uint8_t *)&v16, 0xCu);
  }
  CFStringRef v7 = WTF::RetainPtr<NSSet>::get((id *)this + 7);
  char v8 = [v7 containsObject:v3];

  if ((v8 & 1) == 0)
  {
    uint64_t v9 = WebKit::WebExtensionAction::wrapper((id *)this);
    [v9 willChangeValueForKey:@"errors"];

    uint64_t v10 = WTF::RetainPtr<NSSet>::get((id *)this + 7);
    [v10 addObject:v3];

    char v11 = WebKit::WebExtensionAction::wrapper((id *)this);
    [v11 didChangeValueForKey:@"errors"];

    CFRetain(this[1]);
    long long v12 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    void *v12 = MEMORY[0x1E4F14398];
    v12[1] = 50331650;
    void v12[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::recordError(NSError *)::$_0>(WebKit::WebExtensionContext::recordError(NSError *)::$_0)::{lambda(void *)#1}::__invoke;
    v12[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::recordError(NSError *)::$_0>(WebKit::WebExtensionContext::recordError(NSError *)::$_0)::descriptor;
    v12[4] = this;
    uint64_t v12[5] = this;
    uint64_t v13 = _Block_copy(v12);

    uint64_t v14 = _Block_copy(v13);
    dispatch_async(MEMORY[0x1E4F14428], v14);
  }
}

void sub_19931B604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZN6WebKit19WebExtensionContext10clearErrorENS0_5ErrorE_block_invoke(uint64_t a1, void *a2)
{
  return [a2 code] == *(void *)(a1 + 32);
}

id WebKit::WebExtensionContext::errors(WebKit::WebExtensionContext *this)
{
  uint64_t v2 = WebKit::WebExtension::errors(*((id **)this + 8));
  uint64_t v3 = WTF::RetainPtr<NSSet>::get((id *)this + 7);
  uint64_t v4 = [v2 arrayByAddingObjectsFromArray:v3];

  return v4;
}

void sub_19931B71C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::load(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, void *a4)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  if (a4) {
    *a4 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 72);
  if (v8 && *(void *)(v8 + 8))
  {
    uint64_t v9 = qword_1EB357DF8;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR);
    if (v10)
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1985F2000, v9, OS_LOG_TYPE_ERROR, "Extension context already loaded", buf, 2u);
      if (a4) {
        goto LABEL_7;
      }
    }
    else if (a4)
    {
LABEL_7:
      WebKit::WebExtensionContext::createError(v10, 2, 0, 0);
      id v11 = (id)objc_claimAutoreleasedReturnValue();
LABEL_12:
      id v13 = v11;
      uint64_t result = 0;
      *a4 = v13;
      return result;
    }
    return 0;
  }
  if (WebKit::WebExtension::backgroundContentIsPersistent(*(id **)(a1 + 64)))
  {
    long long v12 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1985F2000, v12, OS_LOG_TYPE_ERROR, "Cannot load persistent background content on this platform", buf, 2u);
      if (a4) {
        goto LABEL_11;
      }
    }
    else if (a4)
    {
LABEL_11:
      WebKit::WebExtension::createError(*(id **)(a1 + 64), 9, 0, 0);
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_12;
    }
    return 0;
  }
  long long v15 = (uint64_t *)(a1 + 40);
  WTF::String::operator=((uint64_t *)(a1 + 40), a3);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  uint64_t v17 = *(atomic_uint **)(a2 + 24);
  if (v17) {
    atomic_fetch_add(v17, 1u);
  }
  uint64_t v18 = *(unsigned int **)(a1 + 72);
  *(void *)(a1 + 72) = v17;
  if (v18 && atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, v16);
  }
  uint64_t v19 = *(WTF::StringImpl **)(a1 + 120);
  if (v19) {
    *(_DWORD *)v19 += 2;
  }
  unint64_t v113 = v19;
  *(void *)buf = "WebExtension-";
  uint64_t v120 = 14;
  uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)buf, (uint64_t *)&v113, v112);
  if (v112[0])
  {
    API::ContentWorld::sharedWorldWithName(v112, v20, (uint64_t *)cf);
    CFTypeRef v22 = cf[0];
    cf[0] = 0;
    uint64_t v23 = *(void *)(a1 + 160);
    *(void *)(a1 + 160) = v22;
    if (v23)
    {
      CFRelease(*(CFTypeRef *)(v23 + 8));
      uint64_t v24 = (CFTypeRef *)cf[0];
      cf[0] = 0;
      if (v24) {
        CFRelease(v24[1]);
      }
    }
    uint64_t v25 = v112[0];
    v112[0] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v21);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    uint64_t v26 = v113;
    unint64_t v113 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v21);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    uint64_t v27 = *v15;
    if (*v15 && *(_DWORD *)(v27 + 4))
    {
      WebKit::WebExtensionContext::stateFilePath(buf, v27);
      long long v30 = WebKit::WebExtensionContext::readStateFromPath((WebKit::WebExtensionContext *)buf, v28);
      int v31 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, v29);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
      }
      WTF::RetainPtr<NSMutableDictionary>::operator=((const void **)(a1 + 48), v30);
      uint64_t v33 = (void *)[v30 copy];
    }
    else
    {
      if (!*(void *)(a1 + 48))
      {
        int v32 = [MEMORY[0x1E4F1CA60] dictionary];
        WTF::RetainPtr<NSMutableDictionary>::operator=((const void **)(a1 + 48), v32);
      }
      uint64_t v33 = WTF::RetainPtr<__IOHIDDevice *>::get();
    }

    uint64_t v34 = WTF::RetainPtr<__IOHIDDevice *>::get();
    WTF::RetainPtr<NSDictionary>::RetainPtr(cf, v34);

    uint64_t v35 = WebKit::objectForKey<NSString>((id *)cf, @"LastSeenBaseURL", 1);
    MEMORY[0x19972EAD0](buf, v35);
    MEMORY[0x19972E890](v112, buf, 0);
    char v37 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v36);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }

    CFTypeRef v38 = cf[0];
    cf[0] = 0;
    if (v38) {
      CFRelease(v38);
    }
    uint64_t v39 = WTF::RetainPtr<__IOHIDDevice *>::get();
    if (*(void *)(a1 + 80)) {
      uint64_t v40 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v40 = &stru_1EEA10550;
    }
    [v39 setObject:v40 forKey:@"LastSeenBaseURL"];

    WebKit::WebExtension::populateDisplayStringsIfNeeded(*(WebKit::WebExtension **)(a1 + 64));
    int v41 = WTF::RetainPtr<__IOHIDDevice *>::get();
    if (v41)
    {
      uint64_t v42 = WTF::RetainPtr<__IOHIDDevice *>::get();
      [v42 setObject:v41 forKey:@"LastSeenDisplayName"];
    }
    uint64_t v43 = WTF::RetainPtr<__IOHIDDevice *>::get();
    long long v44 = [v43 objectForKeyedSubscript:@"SessionStorageAllowedInContentScripts"];
    objc_opt_class();
    unsigned int v45 = WTF::dynamic_objc_cast<NSNumber>(v44);

    if (v45) {
      char v46 = [v45 BOOLValue];
    }
    else {
      char v46 = 0;
    }

    *(unsigned char *)(a1 + 720) = v46;
    WebKit::WebExtension::populateDisplayStringsIfNeeded(*(WebKit::WebExtension **)(a1 + 64));
    uint64_t v47 = WTF::RetainPtr<__IOHIDDevice *>::get();
    MEMORY[0x19972EAD0](buf, v47);

    int v48 = WTF::RetainPtr<__IOHIDDevice *>::get();
    WTF::RetainPtr<NSDictionary>::RetainPtr(&v114, v48);

    uint64_t v49 = WebKit::objectForKey<NSString>((id *)&v114, @"LastSeenVersion", 1);
    MEMORY[0x19972EAD0](cf, v49);
    CFTypeRef v51 = cf[0];
    cf[0] = 0;
    uint64_t v52 = *(WTF::StringImpl **)(a1 + 320);
    *(void *)(a1 + 320) = v51;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::destroy(v52, v50);
        uint64_t v54 = (WTF::StringImpl *)cf[0];
        cf[0] = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2) {
            WTF::StringImpl::destroy(v54, v53);
          }
          else {
            *(_DWORD *)v54 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v52 -= 2;
        cf[0] = 0;
      }
    }

    CFTypeRef v55 = v114;
    CFTypeRef v114 = 0;
    if (v55) {
      CFRelease(v55);
    }
    if (*(void *)buf) {
      uint64_t v56 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v56 = &stru_1EEA10550;
    }
    char v57 = WTF::RetainPtr<__IOHIDDevice *>::get();
    [v57 setObject:v56 forKeyedSubscript:@"LastSeenVersion"];

    uint64_t v59 = *(WTF **)(a1 + 320);
    if (v59 && *((_DWORD *)v59 + 1)) {
      int v60 = WTF::equal(v59, *(const WTF::StringImpl **)buf, v58) ^ 1;
    }
    else {
      int v60 = 0;
    }
    uint64_t v61 = WTF::RetainPtr<__IOHIDDevice *>::get();
    WTF::RetainPtr<NSDictionary>::RetainPtr(cf, v61);

    uint64_t v62 = WebKit::objectForKey<NSData>((id *)cf, @"LastSeenBundleHash");
    CFTypeRef v63 = cf[0];
    cf[0] = 0;
    if (v63) {
      CFRelease(v63);
    }
    uint64_t v64 = WebKit::WebExtension::bundleHash(*(WebKit::WebExtension **)(a1 + 64));
    uint64_t v65 = WTF::RetainPtr<__IOHIDDevice *>::get();
    [v65 setObject:v64 forKeyedSubscript:@"LastSeenBundleHash"];

    if (v62 && v64) {
      v60 |= [v62 isEqualToData:v64] ^ 1;
    }
    uint64_t v66 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v66) {
      uint64_t v67 = v66 - 16;
    }
    else {
      uint64_t v67 = 0;
    }
    int v68 = *(unsigned char *)(v67 + 176) & 1;
    *(unsigned char *)(a1 + 312) = v68;
    if (v60)
    {
      uint64_t v69 = WTF::RetainPtr<__IOHIDDevice *>::get();
      [v69 removeObjectForKey:@"BackgroundContentEventListeners"];

      int v70 = WTF::RetainPtr<__IOHIDDevice *>::get();
      [v70 removeObjectForKey:@"BackgroundContentEventListenersVersion"];

      WebKit::WebExtensionContext::clearDeclarativeNetRequestRulesetState((WebKit::WebExtensionContext *)a1);
      WebKit::WebExtensionContext::clearRegisteredContentScripts((WebKit::WebExtensionContext *)a1, v71);
      uint64_t v72 = qword_1EB357DF8;
      char v73 = 2;
      if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(cf[0]) = 0;
        _os_log_debug_impl(&dword_1985F2000, v72, OS_LOG_TYPE_DEBUG, "Queued installed event with extension update reason", (uint8_t *)cf, 2u);
      }
    }
    else if (v68)
    {
      char v73 = 0;
    }
    else
    {
      uint64_t v74 = qword_1EB357DF8;
      if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(cf[0]) = 0;
        _os_log_debug_impl(&dword_1985F2000, v74, OS_LOG_TYPE_DEBUG, "Queued installed event with extension install reason", (uint8_t *)cf, 2u);
      }
      char v73 = 1;
    }
    *(unsigned char *)(a1 + 313) = v73;

    uint64_t v76 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2) {
        WTF::StringImpl::destroy(v76, v75);
      }
      else {
        *(_DWORD *)v76 -= 2;
      }
    }
    WebKit::WebExtensionContext::writeStateToStorage((WebKit::WebExtensionContext *)a1);
    uint64_t v77 = *(void *)(a1 + 72);
    if (v77)
    {
      uint64_t v78 = *(void *)(v77 + 8);
      if (v78) {
        uint64_t v79 = (id *)(v78 - 16);
      }
      else {
        uint64_t v79 = 0;
      }
    }
    else
    {
      uint64_t v79 = 0;
    }
    int v80 = WebKit::WebExtensionController::delegate(v79);
    if (objc_opt_respondsToSelector())
    {
      uint64_t v81 = *(void *)(a1 + 72);
      if (v81)
      {
        uint64_t v82 = *(void *)(v81 + 8);
        if (v82) {
          uint64_t v83 = (id *)(v82 - 16);
        }
        else {
          uint64_t v83 = 0;
        }
      }
      else
      {
        uint64_t v83 = 0;
      }
      __int16 v84 = WebKit::WebExtensionAction::wrapper(v83);
      uint64_t v85 = WebKit::WebExtensionAction::wrapper((id *)a1);
      int v86 = [v80 webExtensionController:v84 openWindowsForExtensionContext:v85];

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Object returned by webExtensionController:openWindowsForExtensionContext: is not an array"];
      }
      long long v117 = 0u;
      long long v118 = 0u;
      *(_OWORD *)CFTypeRef cf = 0u;
      long long v116 = 0u;
      id v87 = v86;
      uint64_t v88 = [v87 countByEnumeratingWithState:cf objects:buf count:16];
      if (v88)
      {
        uint64_t v89 = *(void *)v116;
        do
        {
          for (uint64_t i = 0; i != v88; ++i)
          {
            if (*(void *)v116 != v89) {
              objc_enumerationMutation(v87);
            }
            WebKit::WebExtensionContext::getOrCreateWindow(a1, *((void **)cf[1] + i), (uint64_t)&v114);
            CFTypeRef v91 = v114;
            WebKit::WebExtensionContext::didOpenWindow(a1, (WebKit::WebExtensionWindow *)v114, 0, 1);
            WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v91);
          }
          uint64_t v88 = [v87 countByEnumeratingWithState:cf objects:buf count:16];
        }
        while (v88);
      }
    }
    if (objc_opt_respondsToSelector())
    {
      uint64_t v92 = *(void *)(a1 + 72);
      if (v92)
      {
        uint64_t v93 = *(void *)(v92 + 8);
        if (v93) {
          uint64_t v94 = (id *)(v93 - 16);
        }
        else {
          uint64_t v94 = 0;
        }
      }
      else
      {
        uint64_t v94 = 0;
      }
      uint64_t v95 = WebKit::WebExtensionAction::wrapper(v94);
      char v96 = WebKit::WebExtensionAction::wrapper((id *)a1);
      CFTypeRef v97 = [v80 webExtensionController:v95 focusedWindowForExtensionContext:v96];

      if (v97)
      {
        WebKit::WebExtensionContext::getOrCreateWindow(a1, v97, (uint64_t)&v114);
        uint64_t v98 = (WebKit::WebExtensionWindow *)v114;
      }
      else
      {
        uint64_t v98 = 0;
      }
      WebKit::WebExtensionContext::didFocusWindow(a1, v98, 1);
      if (v97 && v98) {
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v98);
      }
    }
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v99 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v99 = &unk_1EE9FEDF0;
    v99[1] = a1;
    CFTypeRef v99[2] = a1;
    *(void *)buf = v99;
    if (WTF::equal(v112[0], *(const WTF::StringImpl **)(a1 + 80), v100))
    {
      WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)buf);
      long long v102 = *(const WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v102) {
        (*(void (**)(const WTF::StringImpl *))(*(void *)v102 + 8))(v102);
      }
    }
    else
    {
      if ((_MergedGlobals_128 & 1) == 0)
      {
        qword_1EB35A1D0 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", @"WKWebsiteDataTypeIndexedDBDatabases", @"WKWebsiteDataTypeLocalStorage", 0);
        _MergedGlobals_128 = 1;
      }
      CFTypeRef v103 = WebKit::WebExtensionContext::webViewConfiguration(a1, 0);
      CFTypeRef v104 = [v103 websiteDataStore];
      CFTypeRef v105 = WTF::URL::operator NSURL *();
      CFTypeRef v106 = WTF::URL::operator NSURL *();
      uint64_t v107 = qword_1EB35A1D0;
      *(void *)buf = 0;
      uint64_t v108 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
      *uint64_t v108 = MEMORY[0x1E4F14398];
      v108[1] = 50331650;
      v108[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke;
      v108[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::descriptor;
      v108[4] = v99;
      int v109 = _Block_copy(v108);

      uint64_t v110 = _Block_copy(v109);
      [v104 _renameOrigin:v105 to:v106 forDataOfTypes:v107 completionHandler:v110];
    }
    int v111 = v112[0];
    v112[0] = 0;
    if (v111)
    {
      if (*(_DWORD *)v111 == 2) {
        WTF::StringImpl::destroy(v111, v101);
      }
      else {
        *(_DWORD *)v111 -= 2;
      }
    }
    return 1;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_19931C38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::writeStateToStorage(WebKit::WebExtensionContext *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 5);
  if (v1 && *(_DWORD *)(v1 + 4))
  {
    uint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F28CA0]) initWithFilePresenter:0];
    uint64_t v4 = (void *)MEMORY[0x1E4F1CB10];
    WebKit::WebExtensionContext::stateFilePath(buf, *((void *)this + 5));
    if (*(void *)buf) {
      uint64_t v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v5 = &stru_1EEA10550;
    }
    id v6 = [v4 fileURLWithPath:v5];
    v13[4] = this;
    id v14 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    _OWORD v13[2] = ___ZNK6WebKit19WebExtensionContext19writeStateToStorageEv_block_invoke;
    v13[3] = &__block_descriptor_40_e15_v16__0__NSURL_8l;
    [v3 coordinateWritingItemAtURL:v6 options:8 error:&v14 byAccessor:v13];
    id v7 = v14;

    uint64_t v9 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::destroy(v9, v8);
        if (!v7)
        {
LABEL_14:

          return;
        }
LABEL_11:
        BOOL v10 = (id)qword_1EB357DF8;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          long long v12 = WebKit::privacyPreservingDescription((WebKit *)v7, v11);
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v12;
          _os_log_error_impl(&dword_1985F2000, v10, OS_LOG_TYPE_ERROR, "Failed to coordinate writing extension state: %{public}@", buf, 0xCu);
        }
        goto LABEL_14;
      }
      *(_DWORD *)v9 -= 2;
    }
    if (!v7) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
}

void sub_19931C904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::unload(WebKit::WebExtensionContext *this, void *a2)
{
  if (a2) {
    *a2 = 0;
  }
  uint64_t v4 = *((void *)this + 9);
  if (!v4 || !*(void *)(v4 + 8))
  {
    uint64_t v26 = qword_1EB357DF8;
    BOOL v27 = os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR);
    if (v27)
    {
      *(_WORD *)uint64_t v52 = 0;
      _os_log_error_impl(&dword_1985F2000, v26, OS_LOG_TYPE_ERROR, "Extension context not loaded", v52, 2u);
      if (a2) {
        goto LABEL_40;
      }
    }
    else if (a2)
    {
LABEL_40:
      WebKit::WebExtensionContext::createError(v27, 3, 0, 0);
      id v28 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t result = 0;
      *a2 = v28;
      return result;
    }
    return 0;
  }
  WebKit::WebExtensionContext::writeStateToStorage(this);
  WebKit::WebExtensionContext::unloadBackgroundWebView(this);
  WebKit::WebExtensionContext::removeInjectedContent((uint64_t)this);
  WebKit::WebExtensionContext::invalidateStorage(this);
  WebKit::WebExtensionContext::removeDeclarativeNetRequestRules(this);
  uint64_t v6 = *((void *)this + 85);
  if (v6)
  {
    *((void *)this + 85) = 0;
    WTF::fastFree((WTF *)(v6 - 16), v5);
  }
  uint64_t v7 = *((void *)this + 86);
  if (v7)
  {
    *((void *)this + 86) = 0;
    WTF::fastFree((WTF *)(v7 - 16), v5);
  }
  WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 640, 0);
  uint64_t v9 = (WTF::StringImpl **)*((void *)this + 84);
  if (v9)
  {
    *((void *)this + 84) = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v8);
  }
  BOOL v10 = (const void *)*((void *)this + 82);
  *((void *)this + 82) = 0;
  if (v10) {
    CFRelease(v10);
  }
  id v11 = (const void *)*((void *)this + 83);
  *((void *)this + 83) = 0;
  if (v11) {
    CFRelease(v11);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 70, 0);
  uint64_t v13 = *((void *)this + 37);
  if (v13)
  {
    *((void *)this + 37) = 0;
    WTF::fastFree((WTF *)(v13 - 16), v12);
  }
  uint64_t v14 = *((void *)this + 38);
  if (v14)
  {
    *((void *)this + 38) = 0;
    WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::deallocateTable(v14, v12);
  }
  *((unsigned char *)this + 313) = 0;
  WTF::String::operator=((uint64_t *)this + 40, MEMORY[0x1E4F30978]);
  *((unsigned char *)this + 385) = 0;
  uint64_t v16 = (const void *)*((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = (WTF::StringImpl **)*((void *)this + 51);
  if (v17)
  {
    *((void *)this + 51) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript,WTF::RawPtrTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v15);
  }
  WTF::Vector<WTF::Ref<WebKit::WebBackForwardListItem,WTF::RawPtrTraits<WebKit::WebBackForwardListItem>,WTF::DefaultRefDerefTraits<WebKit::WebBackForwardListItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 424, 0);
  uint64_t v19 = *((void *)this + 49);
  if (v19)
  {
    *((void *)this + 49) = 0;
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v19, v18);
  }
  uint64_t v20 = *((void *)this + 50);
  if (v20)
  {
    *((void *)this + 50) = 0;
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v20, v18);
  }
  uint64_t v21 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v21);
    WTF::fastFree((WTF *)v21, v18);
  }
  uint64_t v22 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v22) {
    CFRelease(*(CFTypeRef *)(v22 + 8));
  }
  uint64_t v23 = *((void *)this + 70);
  if (v23)
  {
    *((void *)this + 70) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v23, v18);
  }
  uint64_t v24 = (unsigned int **)*((void *)this + 71);
  if (v24)
  {
    *((void *)this + 71) = 0;
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v24, v18);
    uint64_t v25 = *((void *)this + 71);
    *((_DWORD *)this + 144) = 0;
    if (v25)
    {
      LODWORD(v25) = *(_DWORD *)(v25 - 12);
      if (v25 > 0x7FFFFFFE) {
        LODWORD(v25) = 0x7FFFFFFF;
      }
    }
  }
  else
  {
    LODWORD(v25) = 0;
    *((_DWORD *)this + 144) = 0;
  }
  *((_DWORD *)this + 145) = 2 * v25;
  long long v30 = (void *)*((void *)this + 75);
  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v30);
  [(id)objc_claimAutoreleasedReturnValue() removeAllObjects];

  uint64_t v32 = *((void *)this + 65);
  if (v32)
  {
    *((void *)this + 65) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v32, v31);
  }
  if (*((_DWORD *)this + 134))
  {
    if (*((_DWORD *)this + 135)) {
      *((_DWORD *)this + 135) = 0;
    }
    uint64_t v33 = (WTF *)*((void *)this + 66);
    if (v33)
    {
      *((void *)this + 66) = 0;
      *((_DWORD *)this + 134) = 0;
      WTF::fastFree(v33, v31);
    }
  }
  if (*((unsigned char *)this + 552)) {
    *((unsigned char *)this + 552) = 0;
  }
  uint64_t v34 = *((void *)this + 56);
  if (v34)
  {
    *((void *)this + 56) = 0;
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v34, v31);
    uint64_t v35 = *((void *)this + 56);
    *((_DWORD *)this + 114) = 0;
    if (v35)
    {
      LODWORD(v35) = *(_DWORD *)(v35 - 12);
      if (v35 > 0x7FFFFFFE) {
        LODWORD(v35) = 0x7FFFFFFF;
      }
    }
  }
  else
  {
    LODWORD(v35) = 0;
    *((_DWORD *)this + 114) = 0;
  }
  *((_DWORD *)this + 115) = 2 * v35;
  uint64_t v36 = *((void *)this + 58);
  if (v36)
  {
    *((void *)this + 58) = 0;
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v36, v31);
    uint64_t v37 = *((void *)this + 58);
    *((_DWORD *)this + 118) = 0;
    if (v37)
    {
      LODWORD(v37) = *(_DWORD *)(v37 - 12);
      if (v37 > 0x7FFFFFFE) {
        LODWORD(v37) = 0x7FFFFFFF;
      }
    }
  }
  else
  {
    LODWORD(v37) = 0;
    *((_DWORD *)this + 118) = 0;
  }
  *((_DWORD *)this + 119) = 2 * v37;
  uint64_t v38 = *((void *)this + 60);
  *((void *)this + 60) = 0;
  if (v38) {
    CFRelease(*(CFTypeRef *)(v38 + 8));
  }
  uint64_t v39 = *((void *)this + 73);
  if (v39)
  {
    *((void *)this + 73) = 0;
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v39, v31);
    uint64_t v40 = *((void *)this + 73);
    *((_DWORD *)this + 148) = 0;
    if (v40)
    {
      LODWORD(v40) = *(_DWORD *)(v40 - 12);
      if (v40 > 0x7FFFFFFE) {
        LODWORD(v40) = 0x7FFFFFFF;
      }
    }
  }
  else
  {
    LODWORD(v40) = 0;
    *((_DWORD *)this + 148) = 0;
  }
  *((_DWORD *)this + 149) = 2 * v40;
  uint64_t v41 = *((void *)this + 61);
  if (v41)
  {
    *((void *)this + 61) = 0;
    WTF::fastFree((WTF *)(v41 - 16), v31);
  }
  uint64_t v42 = *((void *)this + 62);
  if (v42)
  {
    *((void *)this + 62) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v42, v31);
  }
  uint64_t v43 = *((void *)this + 63);
  if (v43)
  {
    *((void *)this + 63) = 0;
    WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v43, v31);
  }
  uint64_t v44 = *((void *)this + 64);
  if (v44)
  {
    *((void *)this + 64) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v44, v31);
  }
  unsigned int v45 = (WTF::StringImpl **)*((void *)this + 55);
  if (v45)
  {
    *((void *)this + 55) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAlarm,WTF::RawPtrTraits<WebKit::WebExtensionAlarm>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAlarm>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v45, (WTF::StringImpl *)v31);
  }
  if (*((_DWORD *)this + 154))
  {
    uint64_t v46 = *((unsigned int *)this + 155);
    if (v46)
    {
      uint64_t v47 = (uint64_t *)*((void *)this + 76);
      uint64_t v48 = 8 * v46;
      do
      {
        uint64_t v49 = *v47;
        uint64_t *v47 = 0;
        if (v49) {
          CFRelease(*(CFTypeRef *)(v49 + 8));
        }
        ++v47;
        v48 -= 8;
      }
      while (v48);
      *((_DWORD *)this + 155) = 0;
    }
    uint64_t v50 = (WTF *)*((void *)this + 76);
    if (v50)
    {
      *((void *)this + 76) = 0;
      *((_DWORD *)this + 154) = 0;
      WTF::fastFree(v50, v31);
    }
  }
  *((unsigned char *)this + 624) = 0;
  CFTypeRef v51 = (WTF::StringImpl **)*((void *)this + 87);
  if (v51)
  {
    *((void *)this + 87) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v51, v31);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionMenuItem,WTF::RawPtrTraits<WebKit::WebExtensionMenuItem>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMenuItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 176, 0);
  *((void *)this + 33) = 0;
  return 1;
}

void sub_19931CDF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::unloadBackgroundWebView(WebKit::WebExtensionContext *this)
{
  if (*((void *)this + 41))
  {
    uint64_t v2 = (const void **)((char *)this + 328);
    *((unsigned char *)this + 384) = 0;
    uint64_t v3 = *((void *)this + 46);
    *((void *)this + 46) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 42, 0);
    uint64_t v4 = WTF::RetainPtr<__IOHIDDevice *>::get();
    [v4 _close];

    uint64_t v5 = *v2;
    *uint64_t v2 = 0;
    if (v5)
    {
      CFRelease(v5);
    }
  }
}

void sub_19931CEB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::removeInjectedContent(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 72);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = this;
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v2 + 104), &v37);
      uint64_t v4 = *(void *)(v2 + 104);
      if (v4)
      {
        uint64_t v5 = *(unsigned int *)(v4 - 4);
        uint64_t v6 = v4 + 8 * v5;
      }
      else
      {
        uint64_t v6 = 0;
        uint64_t v5 = 0;
      }
      uint64_t v32 = v2 + 104;
      uint64_t v33 = v6;
      uint64_t v34 = v6;
      uint64_t v35 = v6;
      uint64_t v36 = v4 + 8 * v5;
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v32);
      uint64_t v8 = v38;
      if (v38 != v33)
      {
        uint64_t v9 = (void *)(v3 + 392);
        BOOL v10 = (void *)(v3 + 400);
        do
        {
          uint64_t v11 = *(void *)(*(void *)v8 + 8);
          if (v11) {
            long long v12 = (WebKit::WebUserContentControllerProxy *)(v11 - 16);
          }
          else {
            long long v12 = 0;
          }
          uint64_t v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(v3 + 392));
          uint64_t v14 = v13;
          uint64_t v16 = v15;
          if (*v9) {
            uint64_t v17 = *v9 + 24 * *(unsigned int *)(*v9 - 4);
          }
          else {
            uint64_t v17 = 0;
          }
          if ((void *)v17 != v13)
          {
            do
            {
              uint64_t v18 = *((unsigned int *)v14 + 5);
              if (v18)
              {
                uint64_t v19 = (API::UserScript **)v14[1];
                uint64_t v20 = 8 * v18;
                do
                {
                  uint64_t v21 = *v19++;
                  WebKit::WebUserContentControllerProxy::removeUserScript(v12, v21);
                  v20 -= 8;
                }
                while (v20);
              }
              while (1)
              {
                v14 += 3;
                if (v14 == v16) {
                  break;
                }
                if ((unint64_t)(*v14 + 1) > 1) {
                  goto LABEL_22;
                }
              }
              uint64_t v14 = v16;
LABEL_22:
              ;
            }
            while (v14 != (void *)v17);
          }
          uint64_t v22 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(v3 + 400));
          uint64_t v23 = v22;
          uint64_t v25 = v24;
          if (*v10) {
            uint64_t v26 = *v10 + 24 * *(unsigned int *)(*v10 - 4);
          }
          else {
            uint64_t v26 = 0;
          }
          if ((void *)v26 != v22)
          {
            do
            {
              uint64_t v27 = *((unsigned int *)v23 + 5);
              if (v27)
              {
                id v28 = (API::UserStyleSheet **)v23[1];
                uint64_t v29 = 8 * v27;
                do
                {
                  long long v30 = *v28++;
                  WebKit::WebUserContentControllerProxy::removeUserStyleSheet(v12, v30);
                  v29 -= 8;
                }
                while (v29);
              }
              while (1)
              {
                v23 += 3;
                if (v23 == v25) {
                  break;
                }
                if ((unint64_t)(*v23 + 1) > 1) {
                  goto LABEL_34;
                }
              }
              uint64_t v23 = v25;
LABEL_34:
              ;
            }
            while (v23 != (void *)v26);
          }
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v37);
          uint64_t v8 = v38;
        }
        while (v38 != v33);
      }
      uint64_t v31 = *(void *)(v3 + 392);
      if (v31)
      {
        *(void *)(v3 + 392) = 0;
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v31, v7);
      }
      this = *(void *)(v3 + 400);
      if (this)
      {
        *(void *)(v3 + 400) = 0;
        return WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(this, v7);
      }
    }
  }
  return this;
}

void WebKit::WebExtensionContext::invalidateStorage(WebKit::WebExtensionContext *this)
{
  uint64_t v2 = (const void *)*((void *)this + 52);
  *((void *)this + 52) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 92);
  *((void *)this + 92) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 93);
  *((void *)this + 93) = 0;
  if (v5)
  {
    CFRelease(v5);
  }
}

const void **WTF::RetainPtr<NSError>::operator=(const void **a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3) {
    CFRetain(v3);
  }

  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    CFRelease(v5);
  }

  return a1;
}

void sub_19931D1A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::reload(uint64_t a1, void *a2)
{
  if (a2) {
    *a2 = 0;
  }
  uint64_t v4 = *(void *)(a1 + 72);
  if (!v4 || (uint64_t v5 = *(void *)(v4 + 8)) == 0)
  {
    uint64_t v7 = qword_1EB357DF8;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      *(_WORD *)BOOL v10 = 0;
      _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "Extension context not loaded", v10, 2u);
      if (a2) {
        goto LABEL_9;
      }
    }
    else if (a2)
    {
LABEL_9:
      WebKit::WebExtensionContext::createError(v8, 3, 0, 0);
      uint64_t v6 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
      return v6;
    }
    return 0;
  }
  CFRetain(*(CFTypeRef *)(v5 - 8));
  if (WebKit::WebExtensionController::unload((void *)(v5 - 16), a1, a2)) {
    uint64_t v6 = WebKit::WebExtensionController::load(v5 - 16, a1, a2);
  }
  else {
    uint64_t v6 = 0;
  }
  CFRelease(*(CFTypeRef *)(v5 - 8));
  return v6;
}

void sub_19931D2C0(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::stateFilePath(void *this, uint64_t a2)
{
  if (a2 && *(_DWORD *)(a2 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    this = (void *)WTF::FileSystemImpl::pathByAppendingComponent();
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        return (void *)WTF::StringImpl::destroy(v4, v2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  else
  {
    id v3 = (_DWORD *)*MEMORY[0x1E4F30978];
    if (*MEMORY[0x1E4F30978]) {
      *v3 += 2;
    }
    *this = v3;
  }
  return this;
}

void sub_19931D3B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

id WebKit::WebExtensionContext::readStateFromPath(WebKit::WebExtensionContext *this, const WTF::String *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)[objc_alloc(MEMORY[0x1E4F28CA0]) initWithFilePresenter:0];
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x3032000000;
  uint64_t v18 = __Block_byref_object_copy__14;
  uint64_t v19 = __Block_byref_object_dispose__14;
  id v20 = 0;
  uint64_t v4 = (void *)MEMORY[0x1E4F1CB10];
  if (*(void *)this) {
    uint64_t v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v5 = &stru_1EEA10550;
  }
  uint64_t v6 = [v4 fileURLWithPath:v5];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  _OWORD v13[2] = ___ZN6WebKit19WebExtensionContext17readStateFromPathERKN3WTF6StringE_block_invoke;
  v13[3] = &unk_1E5813DB0;
  v13[4] = &v15;
  id v14 = 0;
  [v3 coordinateReadingItemAtURL:v6 options:1 error:&v14 byAccessor:v13];
  uint64_t v7 = (WebKit *)v14;

  if (v7)
  {
    BOOL v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      long long v12 = WebKit::privacyPreservingDescription(v7, v9);
      *(_DWORD *)buf = 138543362;
      uint64_t v22 = v12;
      _os_log_error_impl(&dword_1985F2000, v8, OS_LOG_TYPE_ERROR, "Failed to coordinate reading extension state: %{public}@", buf, 0xCu);
    }
  }
  id v10 = (id)v16[5];

  _Block_object_dispose(&v15, 8);

  return v10;
}

void sub_19931D5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void ___ZN6WebKit19WebExtensionContext17readStateFromPathERKN3WTF6StringE_block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithContentsOfURL:");
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v4 = [MEMORY[0x1E4F1CA60] dictionary];
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v4);
  if (!v3) {
}
  }

void sub_19931D700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionContext::readDisplayNameFromState(WebKit::WebExtensionContext *this, const WTF::String *a2, WTF::String *a3)
{
  uint64_t v4 = WebKit::WebExtensionContext::readStateFromPath(this, a2);
  id v5 = WebKit::objectForKey<NSString>(v4, @"LastSeenDisplayName", 1);
  if (!v5) {
    goto LABEL_7;
  }
  MEMORY[0x19972EAD0](&v13, v5);
  uint64_t v7 = v13;
  uint64_t v13 = 0;
  BOOL v8 = *(WTF::StringImpl **)a2;
  *(void *)a2 = v7;
  if (!v8) {
    goto LABEL_7;
  }
  int v9 = *(_DWORD *)v8 - 2;
  if (*(_DWORD *)v8 != 2) {
    goto LABEL_6;
  }
  WTF::StringImpl::destroy(v8, v6);
  BOOL v8 = v13;
  uint64_t v13 = 0;
  if (!v8) {
    goto LABEL_7;
  }
  int v9 = *(_DWORD *)v8 - 2;
  if (*(_DWORD *)v8 == 2) {
    WTF::StringImpl::destroy(v8, v10);
  }
  else {
LABEL_6:
  }
    *(_DWORD *)BOOL v8 = v9;
LABEL_7:

  if (*(void *)a2) {
    BOOL v11 = *(_DWORD *)(*(void *)a2 + 4) != 0;
  }
  else {
    BOOL v11 = 0;
  }

  return v11;
}

void sub_19931D7F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZNK6WebKit19WebExtensionContext19writeStateToStorageEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = WTF::RetainPtr<__IOHIDDevice *>::get();
  uint64_t v4 = (void *)[v3 copy];

  id v10 = 0;
  char v5 = [v4 writeToURL:v2 error:&v10];
  uint64_t v6 = (WebKit *)v10;

  if ((v5 & 1) == 0)
  {
    uint64_t v7 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = WebKit::privacyPreservingDescription(v6, v8);
      *(_DWORD *)buf = 138543362;
      long long v12 = v9;
      _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "Unable to save extension state: %{public}@", buf, 0xCu);
    }
  }
}

void sub_19931D930(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionContext::webViewConfiguration(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && *(void *)(v2 + 8))
  {
    double v5 = WebKit::WebExtension::manifestVersion(*(WebKit::WebExtension **)(a1 + 64));
    uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v6) {
      uint64_t v7 = v6 - 16;
    }
    else {
      uint64_t v7 = 0;
    }
    BOOL v8 = WebKit::WebExtensionControllerConfiguration::webViewConfiguration(*(WebKit::WebExtensionControllerConfiguration **)(v7 + 40));
    int v9 = (void *)[v8 copy];

    if (v5 < 3.0) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = 2;
    }
    [v9 _setContentSecurityPolicyModeForExtension:v10];
    BOOL v11 = [MEMORY[0x1E4F1CA80] set];
    WebKit::WebExtension::allRequestedMatchPatterns(*(WebKit::WebExtension **)(a1 + 64), (uint64_t *)&v51);
    long long v12 = (WebKit::WebExtensionMatchPattern **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)&v51);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    if (v51) {
      uint64_t v16 = (WebKit::WebExtensionMatchPattern **)((char *)v51 + 8 * *((unsigned int *)v51 - 1));
    }
    else {
      uint64_t v16 = 0;
    }
    if (v16 != v12)
    {
      do
      {
        uint64_t v17 = WebKit::WebExtensionMatchPattern::expandedStrings(*v13);
        [v11 addObjectsFromArray:v17];

        while (++v13 != v15)
        {
          if ((unint64_t)*v13 + 1 > 1) {
            goto LABEL_19;
          }
        }
        uint64_t v13 = v15;
LABEL_19:
        ;
      }
      while (v13 != v16);
    }
    uint64_t v18 = *(WebKit::WebExtension **)(a1 + 64);
    WebKit::WebExtension::populatePermissionsPropertiesIfNeeded(v18);
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v50, (void **)v18 + 12);
    uint64_t v19 = (WebKit::WebExtensionMatchPattern **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v50);
    id v20 = v19;
    uint64_t v22 = v21;
    if (v50) {
      uint64_t v23 = (WebKit::WebExtensionMatchPattern **)&v50[*((unsigned int *)v50 - 1)];
    }
    else {
      uint64_t v23 = 0;
    }
    if (v23 != v19)
    {
      do
      {
        uint64_t v24 = WebKit::WebExtensionMatchPattern::expandedStrings(*v20);
        [v11 addObjectsFromArray:v24];

        while (++v20 != v22)
        {
          if ((unint64_t)*v20 + 1 > 1) {
            goto LABEL_29;
          }
        }
        id v20 = v22;
LABEL_29:
        ;
      }
      while (v20 != v23);
    }
    uint64_t v26 = [v11 allObjects];
    if (v50) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v50, v25);
    }
    if (v51) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)v51, v25);
    }

    [v9 _setCORSDisablingPatterns:v26];
    [v9 _setCrossOriginAccessControlCheckEnabled:0];
    uint64_t v27 = NSString;
    WebCore::localizedString((uint64_t *)&v51, (WebCore *)@"%@ Web Extension", v28);
    if (v51) {
      uint64_t v29 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v29 = &stru_1EEA10550;
    }
    WebKit::WebExtension::populateDisplayStringsIfNeeded(*(WebKit::WebExtension **)(a1 + 64));
    long long v30 = WTF::RetainPtr<__IOHIDDevice *>::get();
    uint64_t v31 = objc_msgSend(v27, "localizedStringWithFormat:", v29, v30);

    uint64_t v33 = v51;
    CFTypeRef v51 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, v32);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
    [v9 _setProcessDisplayName:v31];

    if (*(void *)(a1 + 328))
    {
      uint64_t v34 = WTF::RetainPtr<NSSet>::get((id *)(a1 + 328));
    }
    else
    {
      CFTypeRef v51 = 0;
      uint64_t v35 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v35 = (uint64_t)&unk_1EE9FF098;
      v35[1] = (uint64_t)&v51;
      uint64_t v50 = v35;
      WebKit::WebExtensionContext::enumerateExtensionPages(a1, &v50);
      (*(void (**)(uint64_t *))(*v35 + 8))(v35);
      uint64_t v34 = v51;
    }
    [v9 _setRelatedWebView:v34];

    uint64_t v36 = WTF::URL::operator NSURL *();
    [v9 _setRequiredWebExtensionBaseURL:v36];

    [v9 _setShouldRelaxThirdPartyCookieBlocking:1];
    uint64_t v37 = [MEMORY[0x1E4F1CAD0] set];
    [v9 _setMaskedURLSchemes:v37];

    uint64_t v38 = [v9 defaultWebpagePreferences];
    [v38 _setAutoplayPolicy:1];

    uint64_t v39 = *(void *)(a1 + 72);
    if (a2 == 5)
    {
      if (v39)
      {
        uint64_t v40 = *(void *)(v39 + 8);
        if (v40) {
          uint64_t v41 = (id *)(v40 - 16);
        }
        else {
          uint64_t v41 = 0;
        }
      }
      else
      {
        uint64_t v41 = 0;
      }
      uint64_t v44 = WebKit::WebExtensionAction::wrapper(v41);
      [v9 setWebExtensionController:v44];

      [v9 _setWeakWebExtensionController:0];
    }
    else
    {
      if (v39)
      {
        uint64_t v42 = *(void *)(v39 + 8);
        if (v42) {
          uint64_t v43 = (id *)(v42 - 16);
        }
        else {
          uint64_t v43 = 0;
        }
      }
      else
      {
        uint64_t v43 = 0;
      }
      unsigned int v45 = WebKit::WebExtensionAction::wrapper(v43);
      [v9 _setWeakWebExtensionController:v45];

      [v9 setWebExtensionController:0];
    }
    uint64_t v46 = [v9 preferences];
    MEMORY[0x19972EAD0](&v51, @"clipboardWrite");
    objc_msgSend(v46, "_setJavaScriptCanAccessClipboard:", (WebKit::WebExtensionContext::permissionState(a1, &v51, 0, 2) & 0xFFFFFFFE) == 2);
    uint64_t v48 = v51;
    CFTypeRef v51 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2) {
        WTF::StringImpl::destroy(v48, v47);
      }
      else {
        *(_DWORD *)v48 -= 2;
      }
    }
    if ((a2 - 1) <= 1)
    {
      [v46 _setHiddenPageDOMTimerThrottlingEnabled:0];
      [v46 _setPageVisibilityBasedProcessSuppressionEnabled:0];
      [v46 setInactiveSchedulingPolicy:2];
    }
  }
  else
  {
    int v9 = 0;
  }

  return v9;
}

void sub_19931DEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);

  _Unwind_Resume(a1);
}

const void **WTF::RetainPtr<_WKWebExtensionStorageSQLiteStore>::operator=(const void **a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3) {
    CFRetain(v3);
  }

  double v5 = *a1;
  *a1 = v4;
  if (v5) {
    CFRelease(v5);
  }

  return a1;
}

void sub_19931E054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionContext::setBaseURL(WTF::StringImpl *result, WTF::URL *this)
{
  id v3 = result;
  uint64_t v4 = *((void *)result + 9);
  if (!v4 || !*(void *)(v4 + 8)) && (*((unsigned char *)this + 8))
  {
    double v5 = (unsigned char *)WTF::URL::protocol(this);
    uint64_t v7 = v6;
    BOOL v8 = (_DWORD *)WTF::URL::host(this);
    WTF::makeString<WTF::StringView,WTF::ASCIILiteral,WTF::StringView,char>(v5, v7, "://", 4, v8, v9, 47, &v12);
    MEMORY[0x19972E890](v13, &v12, 0);
    WTF::URL::operator=((uint64_t)v3 + 80, (uint64_t)v13);
    BOOL v11 = v13[0];
    v13[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t result = v12;
    long long v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19931E15C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *WTF::makeString<WTF::StringView,WTF::ASCIILiteral,WTF::StringView,char>@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, void *a8@<X8>)
{
  if (a4) {
    size_t v9 = a4 - 1;
  }
  else {
    size_t v9 = 0;
  }
  if (v9 >> 31)
  {
    __break(0xC471u);
    goto LABEL_37;
  }
  if ((a6 & 0x80000000) != 0) {
    goto LABEL_36;
  }
  int v11 = a6 + 1;
  if (__OFADD__(a6, 1)) {
    goto LABEL_36;
  }
  BOOL v13 = __OFADD__(v9, v11);
  int v14 = v9 + v11;
  BOOL v15 = v13;
  if ((a2 & 0x80000000) != 0) {
    goto LABEL_36;
  }
  if (v15) {
    goto LABEL_36;
  }
  uint64_t v16 = (a2 + v14);
  if (__OFADD__(a2, v14)) {
    goto LABEL_36;
  }
  id v20 = result;
  if ((a2 & 0xFF00000000) != 0 && (a6 & 0xFF00000000) != 0)
  {
    if (v16)
    {
      if ((v16 & 0x80000000) == 0)
      {
        WTF::tryFastCompactMalloc((WTF *)(v16 + 20));
        uint64_t v21 = v36;
        if (v36)
        {
          *uint64_t v36 = 2;
          v21[1] = v16;
          *((void *)v21 + 1) = v21 + 5;
          v21[4] = 4;
          uint64_t v34 = v20;
          uint64_t v35 = a2;
          WTF::StringView::getCharacters<unsigned char>(&v34, (char *)v21 + 20);
          uint64_t v22 = (char *)v21 + v35 + 20;
          if (v9)
          {
            if (v9 == 1) {
              unsigned char *v22 = *(unsigned char *)a3;
            }
            else {
              memcpy((char *)v21 + v35 + 20, a3, v9);
            }
          }
          uint64_t v36 = a5;
          uint64_t v37 = a6;
          uint64_t result = WTF::StringView::getCharacters<unsigned char>(&v36, &v22[v9]);
          v22[v9 + v37] = a7;
          goto LABEL_33;
        }
      }
      goto LABEL_36;
    }
LABEL_32:
    uint64_t v21 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_33;
  }
  if (!v16) {
    goto LABEL_32;
  }
  if (v16 > 0x7FFFFFEF || (WTF::tryFastCompactMalloc((WTF *)(2 * v16 + 20)), (uint64_t v21 = v36) == 0))
  {
LABEL_36:
    *a8 = 0;
    __break(0xC471u);
LABEL_37:
    JUMPOUT(0x19931E40CLL);
  }
  *uint64_t v36 = 2;
  v21[1] = v16;
  *((void *)v21 + 1) = v21 + 5;
  v21[4] = 0;
  uint64_t v34 = v20;
  uint64_t v35 = a2;
  WTF::StringTypeAdapter<WTF::StringView,void>::writeTo<char16_t>(&v34, (char *)v21 + 20);
  uint64_t v23 = (char *)v21 + 2 * v35 + 20;
  uint64_t v24 = &v23[2 * v9];
  if ((v9 & 0xFFFFFFC0) != 0)
  {
    uint64_t v25 = &v23[2 * (v9 & 0xFFFFFFC0)];
    long long v26 = 0uLL;
    do
    {
      v38.val[0] = (int8x16_t)*a3;
      int8x16_t v27 = *((int8x16_t *)a3 + 1);
      v39.val[0] = (int8x16_t)a3[2];
      long long v28 = a3[3];
      a3 += 4;
      long long v29 = v28;
      v39.val[1] = 0uLL;
      v40.val[0] = v27;
      v38.val[1] = 0uLL;
      long long v30 = v23;
      vst2q_s8(v30, v38);
      v30 += 32;
      v40.val[1] = 0uLL;
      vst2q_s8(v30, v40);
      uint64_t v31 = v23 + 64;
      vst2q_s8(v31, v39);
      uint64_t v32 = v23 + 96;
      vst2q_s8(v32, *(int8x16x2_t *)(&v26 - 1));
      v23 += 128;
    }
    while (v23 != v25);
    uint64_t v23 = v25;
  }
  while (v23 != v24)
  {
    __int16 v33 = *(unsigned __int8 *)a3;
    a3 = (_OWORD *)((char *)a3 + 1);
    *(_WORD *)uint64_t v23 = v33;
    v23 += 2;
  }
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t result = WTF::StringTypeAdapter<WTF::StringView,void>::writeTo<char16_t>(&v36, v24);
  *(_WORD *)&v24[2 * v37] = a7;
LABEL_33:
  *a8 = v21;
  return result;
}

void sub_19931E428(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::isURLForAnyExtension(WebKit::WebExtensionContext *this, const WTF::URL *a2)
{
  if ((*((unsigned char *)this + 8) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = WebKit::WebExtensionMatchPattern::extensionSchemes(this);
  WTF::URL::protocol(this);
  if ((v5 & 0xFF00000000) != 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  uint64_t v2 = *v4;
  BOOL v8 = v16;
  if (v2)
  {
    int v10 = *(_DWORD *)(v2 - 8);
    unsigned int v11 = *((_DWORD *)v16 + 4);
    if (v11 >= 0x100) {
      unsigned int v12 = v11 >> 8;
    }
    else {
      unsigned int v12 = WTF::StringImpl::hashSlowCase(v16);
    }
    for (int i = 0; ; v12 = i + v14)
    {
      int v14 = v12 & v10;
      BOOL v15 = *(WTF **)(v2 + 8 * (v12 & v10));
      if (v15 != (WTF *)-1)
      {
        if (!v15)
        {
          uint64_t v2 = 0;
          goto LABEL_21;
        }
        if (WTF::equal(v15, v16, v7)) {
          break;
        }
      }
      ++i;
    }
    uint64_t v2 = 1;
LABEL_21:
    BOOL v8 = v16;
  }
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return v2;
}

void sub_19931E55C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::WebExtensionContext::setUniqueIdentifier(uint64_t *result, WTF::StringImpl **a2)
{
  id v3 = result;
  uint64_t v4 = result[9];
  if (!v4 || !*(void *)(v4 + 8))
  {
    if (*a2)
    {
      int v5 = *((_DWORD *)*a2 + 1);
      *((unsigned char *)result + 128) = v5 != 0;
      if (v5) {
        return WTF::String::operator=(v3 + 15, a2);
      }
    }
    else
    {
      *((unsigned char *)result + 128) = 0;
    }
    WTF::UUID::UUID((WTF::UUID *)v11);
    WTF::UUID::toString((uint64_t *)&v12, (WTF::UUID *)v11);
    uint64_t v7 = v12;
    unsigned int v12 = 0;
    BOOL v8 = *a2;
    *a2 = v7;
    if (v8)
    {
      int v9 = *(_DWORD *)v8 - 2;
      if (*(_DWORD *)v8 != 2)
      {
LABEL_11:
        *(_DWORD *)BOOL v8 = v9;
        return WTF::String::operator=(v3 + 15, a2);
      }
      WTF::StringImpl::destroy(v8, v6);
      BOOL v8 = v12;
      unsigned int v12 = 0;
      if (v8)
      {
        int v9 = *(_DWORD *)v8 - 2;
        if (*(_DWORD *)v8 == 2)
        {
          WTF::StringImpl::destroy(v8, v10);
          return WTF::String::operator=(v3 + 15, a2);
        }
        goto LABEL_11;
      }
    }
    return WTF::String::operator=(v3 + 15, a2);
  }
  return result;
}

id WebKit::WebExtensionContext::localization(id **this)
{
  uint64_t v1 = (const void **)(this + 17);
  if (!this[17])
  {
    id v3 = [_WKWebExtensionLocalization alloc];
    uint64_t v4 = WebKit::WebExtension::localization(this[8]);
    int v5 = [v4 localizationDictionary];
    WTF::URL::host((WTF::URL *)(this + 10));
    if ((v6 & 0xFF00000000) != 0) {
      WTF::String::String();
    }
    else {
      WTF::String::String();
    }
    if (v12) {
      uint64_t v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v7 = &stru_1EEA10550;
    }
    BOOL v8 = [(_WKWebExtensionLocalization *)v3 initWithLocalizedDictionary:v5 uniqueIdentifier:v7];
    WTF::RetainPtr<_WKWebExtensionLocalization>::operator=(v1, v8);

    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v9);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
  int v10 = WTF::RetainPtr<NSSet>::get((id *)v1);

  return v10;
}

void sub_19931E78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v15);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::setInspectable(WebKit::WebExtensionContext *this, uint64_t a2)
{
  *((unsigned char *)this + 144) = a2;
  uint64_t v4 = WTF::RetainPtr<NSSet>::get((id *)this + 41);
  [v4 setInspectable:a2];

  uint64_t v5 = *((void *)this + 71);
  if (!v5)
  {
    BOOL v8 = 0;
    uint64_t v6 = 0;
LABEL_10:
    uint64_t v7 = (void *)(v5 + 16 * v6);
    goto LABEL_11;
  }
  uint64_t v6 = *(unsigned int *)(v5 - 4);
  uint64_t v7 = (void *)(v5 + 16 * v6);
  if (!*(_DWORD *)(v5 - 12))
  {
    BOOL v8 = (void *)(v5 + 16 * v6);
    goto LABEL_10;
  }
  BOOL v8 = (void *)*((void *)this + 71);
  if (v6)
  {
    uint64_t v9 = 16 * v6;
    BOOL v8 = (void *)*((void *)this + 71);
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      v8 += 2;
      v9 -= 16;
      if (!v9)
      {
        BOOL v8 = v7;
        break;
      }
    }
  }
LABEL_11:
  uint64_t v44 = (char *)this + 568;
  unsigned int v45 = v8;
  uint64_t v46 = v7;
  if (v5)
  {
    uint64_t v10 = *(unsigned int *)(v5 - 4);
    uint64_t v11 = v5 + 16 * v10;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v47 = v11;
  uint64_t v48 = v5 + 16 * v10;
  int v49 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v44);
  if (v5)
  {
    uint64_t v12 = *(unsigned int *)(v5 - 4);
    BOOL v13 = (void *)(v5 + 16 * v12);
  }
  else
  {
    BOOL v13 = 0;
    uint64_t v12 = 0;
  }
  int8x16x2_t v38 = (char *)this + 568;
  int8x16x2_t v39 = v13;
  int8x16x2_t v40 = v13;
  uint64_t v41 = v13;
  uint64_t v42 = v5 + 16 * v12;
  int v43 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v38);
  int v14 = v45;
  BOOL v15 = v39;
  while (v14 != v15)
  {
    uint64_t v16 = *(void *)(*v14 + 8);
    if (v16) {
      uint64_t v17 = (WebKit::WebPageProxy *)(v16 - 16);
    }
    else {
      uint64_t v17 = 0;
    }
    WebKit::WebPageProxy::cocoaView(v17, &cf);
    uint64_t v18 = WTF::RetainPtr<NSSet>::get((id *)&cf);
    [v18 setInspectable:a2];

    CFTypeRef v19 = cf;
    CFTypeRef cf = 0;
    if (v19) {
      CFRelease(v19);
    }
    id v20 = v14 + 2;
    unsigned int v45 = v14 + 2;
    if (v14 + 2 != v46)
    {
      while ((unint64_t)(*v20 + 1) <= 1)
      {
        v20 += 2;
        if (v20 == v46)
        {
          id v20 = v46;
          break;
        }
      }
      unsigned int v45 = v20;
    }
    ++v49;
    WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v44);
    int v14 = v45;
    ++*((_DWORD *)v44 + 2);
  }
  uint64_t v21 = (char *)this + 584;
  uint64_t v22 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 73);
  uint64_t v44 = (char *)this + 584;
  unsigned int v45 = v22;
  uint64_t v46 = v23;
  uint64_t v24 = *((void *)this + 73);
  if (v24)
  {
    uint64_t v25 = *(unsigned int *)(v24 - 4);
    uint64_t v26 = v24 + 16 * v25;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v25 = 0;
  }
  uint64_t v47 = v26;
  uint64_t v48 = v24 + 16 * v25;
  int v49 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v44);
  if (v24)
  {
    uint64_t v27 = *(unsigned int *)(v24 - 4);
    long long v28 = (void *)(v24 + 16 * v27);
  }
  else
  {
    long long v28 = 0;
    uint64_t v27 = 0;
  }
  int8x16x2_t v38 = v21;
  int8x16x2_t v39 = v28;
  int8x16x2_t v40 = v28;
  uint64_t v41 = v28;
  uint64_t v42 = v24 + 16 * v27;
  int v43 = 0;
  uint64_t result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v38);
  long long v30 = v45;
  uint64_t v31 = v39;
  while (v30 != v31)
  {
    uint64_t v32 = *(void *)(*v30 + 8);
    if (v32) {
      __int16 v33 = (WebKit::WebPageProxy *)(v32 - 16);
    }
    else {
      __int16 v33 = 0;
    }
    WebKit::WebPageProxy::cocoaView(v33, &cf);
    uint64_t v34 = WTF::RetainPtr<NSSet>::get((id *)&cf);
    [v34 setInspectable:a2];

    CFTypeRef v35 = cf;
    CFTypeRef cf = 0;
    if (v35) {
      CFRelease(v35);
    }
    uint64_t v36 = v30 + 2;
    unsigned int v45 = v30 + 2;
    if (v30 + 2 != v46)
    {
      while ((unint64_t)(*v36 + 1) <= 1)
      {
        v36 += 2;
        if (v36 == v46)
        {
          uint64_t v36 = v46;
          break;
        }
      }
      unsigned int v45 = v36;
    }
    ++v49;
    uint64_t result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v44);
    long long v30 = v45;
    ++*((_DWORD *)v44 + 2);
  }
  return result;
}

void sub_19931EAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::injectedContents@<X0>(WebKit::WebExtensionContext *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (WebKit::WebExtension *)*((void *)this + 8);
  WebKit::WebExtension::populateContentScriptPropertiesIfNeeded(v4);
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)v4 + 24);
  uint64_t v5 = (void *)((char *)this + 408);
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 51);
  uint64_t v7 = result;
  uint64_t v9 = v8;
  if (*v5) {
    uint64_t v10 = *v5 + 16 * *(unsigned int *)(*v5 - 4);
  }
  else {
    uint64_t v10 = 0;
  }
  if ((void *)v10 != result)
  {
    do
    {
      uint64_t v11 = (const WebKit::WebExtension::InjectedContentData *)(v7[1] + 136);
      unsigned int v12 = *(_DWORD *)(a2 + 12);
      if (v12 == *(_DWORD *)(a2 + 8))
      {
        uint64_t result = (void *)WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::InjectedContentData const&>(a2, (unint64_t)v11);
      }
      else
      {
        uint64_t result = WebKit::WebExtension::InjectedContentData::InjectedContentData((WebKit::WebExtension::InjectedContentData *)(*(void *)a2 + 72 * v12), v11);
        ++*(_DWORD *)(a2 + 12);
      }
      while (1)
      {
        v7 += 2;
        if (v7 == v9) {
          break;
        }
        if ((unint64_t)(*v7 + 1) > 1) {
          goto LABEL_12;
        }
      }
      uint64_t v7 = v9;
LABEL_12:
      ;
    }
    while (v7 != (void *)v10);
  }
  return result;
}

void sub_19931EC28(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::hasInjectedContentForURL(WebKit::WebExtensionContext *this, const WTF::URL *a2)
{
  WebKit::WebExtensionContext::injectedContents(this, (uint64_t)&v20);
  if (!v21)
  {
LABEL_26:
    uint64_t v18 = 0;
    goto LABEL_28;
  }
  uint64_t v4 = v20;
  uint64_t v5 = &v20[9 * v21];
  while (1)
  {
    uint64_t v6 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(v4 + 1);
    uint64_t v7 = (unsigned char **)v6;
    uint64_t v9 = v8;
    uint64_t v10 = v4[1];
    if (v10) {
      uint64_t v11 = (unsigned char **)&v10[*((unsigned int *)v10 - 1)];
    }
    else {
      uint64_t v11 = 0;
    }
    if (v11 != v6)
    {
      char v12 = 0;
      while (1)
      {
        char v13 = WebKit::WebExtensionMatchPattern::matchesURL(*v7, a2, 0);
        if (v13) {
          goto LABEL_25;
        }
        while (++v7 != v9)
        {
          if ((unint64_t)(*v7 + 1) > 1) {
            goto LABEL_13;
          }
        }
        uint64_t v7 = v9;
LABEL_13:
        v12 |= v13;
        if (v7 == v11)
        {
          if (v12) {
            goto LABEL_25;
          }
          break;
        }
      }
    }
    int v14 = (WTF::StringImpl *)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(v4);
    BOOL v15 = v14;
    uint64_t v16 = v3;
    uint64_t v17 = *v4 ? (uint64_t)&(*v4)[*((unsigned int *)*v4 - 1)] : 0;
    if ((WTF::StringImpl *)v17 != v14) {
      break;
    }
LABEL_25:
    v4 += 9;
    if (v4 == v5) {
      goto LABEL_26;
    }
  }
  while ((WebKit::WebExtensionMatchPattern::matchesURL(*(unsigned char **)v15, a2, 0) & 1) == 0)
  {
    while (1)
    {
      BOOL v15 = (WTF::StringImpl *)((char *)v15 + 8);
      if (v15 == v16) {
        break;
      }
      if ((unint64_t)(*(void *)v15 + 1) > 1) {
        goto LABEL_24;
      }
    }
    BOOL v15 = v16;
LABEL_24:
    if (v15 == (WTF::StringImpl *)v17) {
      goto LABEL_25;
    }
  }
  uint64_t v18 = 1;
LABEL_28:
  WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v3);
  return v18;
}

void sub_19931EDB0(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void WebKit::WebExtensionContext::optionsPageURL(WebKit::WebExtensionContext *this@<X0>, WTF::URL *a2@<X8>)
{
  uint64_t v4 = (WebKit::WebExtension *)*((void *)this + 8);
  WebKit::WebExtension::populatePagePropertiesIfNeeded(v4);
  if (*((void *)v4 + 42))
  {
    WebKit::WebExtension::populatePagePropertiesIfNeeded(*((WebKit::WebExtension **)this + 8));
    uint64_t v5 = WTF::RetainPtr<__IOHIDDevice *>::get();
    MEMORY[0x19972EAD0](&v8, v5);
    MEMORY[0x19972E8B0](a2, (char *)this + 80, &v8, 0);
    uint64_t v7 = v8;
    BOOL v8 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  else
  {
    WTF::URL::URL(a2);
  }
}

void sub_19931EEA4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::overrideNewTabPageURL(WebKit::WebExtensionContext *this@<X0>, WTF::URL *a2@<X8>)
{
  uint64_t v4 = (WebKit::WebExtension *)*((void *)this + 8);
  WebKit::WebExtension::populatePagePropertiesIfNeeded(v4);
  if (*((void *)v4 + 43))
  {
    WebKit::WebExtension::populatePagePropertiesIfNeeded(*((WebKit::WebExtension **)this + 8));
    uint64_t v5 = WTF::RetainPtr<__IOHIDDevice *>::get();
    MEMORY[0x19972EAD0](&v8, v5);
    MEMORY[0x19972E8B0](a2, (char *)this + 80, &v8, 0);
    uint64_t v7 = v8;
    BOOL v8 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  else
  {
    WTF::URL::URL(a2);
  }
}

void sub_19931EFB4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::setHasAccessToPrivateData(void *this, int a2)
{
  if (*((unsigned __int8 *)this + 273) != a2)
  {
    uint64_t v2 = (uint64_t)this;
    *((unsigned char *)this + 273) = a2;
    uint64_t v3 = this[9];
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4)
      {
        if (a2)
        {
          uint64_t v5 = API::ContentRuleListStore::defaultStore((API::ContentRuleListStore *)this);
          WebKit::WebExtensionContext::declarativeNetRequestContentRuleListFilePath((WTF::StringImpl *)&v31, v2);
          WTF::String::isolatedCopy();
          CFRetain(*(CFTypeRef *)(v2 + 8));
          uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v6 = &unk_1EE9FF0E8;
          v6[1] = v2;
          v6[2] = v2;
          __int16 v33 = v6;
          API::ContentRuleListStore::lookupContentRuleListFile((uint64_t)v5, (uint64_t)&v31, (uint64_t)&v26, (uint64_t *)&v33);
          uint64_t v8 = (uint64_t)v33;
          __int16 v33 = 0;
          if (v8) {
            (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
          }
          uint64_t v9 = v26;
          uint64_t v26 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2) {
              WTF::StringImpl::destroy(v9, v7);
            }
            else {
              *(_DWORD *)v9 -= 2;
            }
          }
          uint64_t v17 = v31;
          uint64_t v31 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v7);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          uint64_t v18 = *(void *)(v2 + 72);
          if (v18)
          {
            uint64_t v19 = *(void *)(v18 + 8);
            if (v19) {
              uint64_t v20 = v19 - 16;
            }
            else {
              uint64_t v20 = 0;
            }
          }
          else
          {
            uint64_t v20 = 0;
          }
          WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v20 + 152), &v31);
          uint64_t v21 = *(void *)(v20 + 152);
          if (v21)
          {
            uint64_t v22 = *(unsigned int *)(v21 - 4);
            uint64_t v23 = v21 + 8 * v22;
          }
          else
          {
            uint64_t v23 = 0;
            uint64_t v22 = 0;
          }
          uint64_t v26 = (WTF::StringImpl *)(v20 + 152);
          uint64_t v27 = v23;
          uint64_t v28 = v23;
          uint64_t v29 = v23;
          uint64_t v30 = v21 + 8 * v22;
          this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v26);
          while (v32 != v27)
          {
            uint64_t v24 = *(void *)(*(void *)v32 + 8);
            if (v24) {
              uint64_t v25 = (WebKit::WebUserContentControllerProxy *)(v24 - 16);
            }
            else {
              uint64_t v25 = 0;
            }
            WebKit::WebExtensionContext::addInjectedContent((WebKit::WebExtensionContext *)v2, v25);
            this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v31);
          }
        }
        else
        {
          WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v4 + 136), &v31);
          uint64_t v10 = *(void *)(v4 + 136);
          if (v10)
          {
            uint64_t v11 = *(unsigned int *)(v10 - 4);
            uint64_t v12 = v10 + 8 * v11;
          }
          else
          {
            uint64_t v12 = 0;
            uint64_t v11 = 0;
          }
          uint64_t v26 = (WTF::StringImpl *)(v4 + 136);
          uint64_t v27 = v12;
          uint64_t v28 = v12;
          uint64_t v29 = v12;
          uint64_t v30 = v10 + 8 * v11;
          this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v26);
          for (uint64_t i = v32; v32 != v27; uint64_t i = v32)
          {
            uint64_t v14 = *(void *)(*(void *)i + 8);
            if (v14) {
              BOOL v15 = (WebKit::WebUserContentControllerProxy *)(v14 - 16);
            }
            else {
              BOOL v15 = 0;
            }
            WebKit::WebExtensionContext::removeInjectedContent((WebKit::WebExtensionContext *)v2, v15);
            WebKit::WebUserContentControllerProxy::removeContentRuleList(v15, (WTF::StringImpl **)(v2 + 120), v16);
            this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v31);
          }
        }
      }
    }
  }
  return this;
}

void sub_19931F25C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  uint64_t v17 = *(void *)(v15 - 40);
  *(void *)(v15 - 40) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::addInjectedContent(WebKit::WebExtensionContext *this, WebKit::WebUserContentControllerProxy *a2)
{
  uint64_t v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 49);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = *((void *)this + 49);
  if (v8) {
    uint64_t v9 = (void *)(v8 + 24 * *(unsigned int *)(v8 - 4));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != v4)
  {
    do
    {
      uint64_t v10 = *((unsigned int *)v5 + 5);
      if (v10)
      {
        uint64_t v11 = (uint64_t *)v5[1];
        uint64_t v12 = 8 * v10;
        do
        {
          uint64_t v13 = *v11++;
          WebKit::WebUserContentControllerProxy::addUserScript((uint64_t)a2, v13, 1);
          v12 -= 8;
        }
        while (v12);
      }
      while (1)
      {
        v5 += 3;
        if (v5 == v7) {
          break;
        }
        if ((unint64_t)(*v5 + 1) > 1) {
          goto LABEL_12;
        }
      }
      uint64_t v5 = v7;
LABEL_12:
      ;
    }
    while (v5 != v9);
  }
  uint64_t v14 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 50);
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v18 = *((void *)this + 50);
  if (v18) {
    uint64_t v19 = (void *)(v18 + 24 * *(unsigned int *)(v18 - 4));
  }
  else {
    uint64_t v19 = 0;
  }
  if (v19 != v14)
  {
    do
    {
      uint64_t v20 = *((unsigned int *)v15 + 5);
      if (v20)
      {
        uint64_t v21 = (API::UserStyleSheet **)v15[1];
        uint64_t v22 = 8 * v20;
        do
        {
          uint64_t v23 = *v21++;
          WebKit::WebUserContentControllerProxy::addUserStyleSheet(a2, v23);
          v22 -= 8;
        }
        while (v22);
      }
      while (1)
      {
        v15 += 3;
        if (v15 == v17) {
          break;
        }
        if ((unint64_t)(*v15 + 1) > 1) {
          goto LABEL_24;
        }
      }
      uint64_t v15 = v17;
LABEL_24:
      ;
    }
    while (v15 != v19);
  }
}

void WebKit::WebExtensionContext::removeInjectedContent(WebKit::WebExtensionContext *this, WebKit::WebUserContentControllerProxy *a2)
{
  uint64_t v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 49);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = *((void *)this + 49);
  if (v8) {
    uint64_t v9 = (void *)(v8 + 24 * *(unsigned int *)(v8 - 4));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != v4)
  {
    do
    {
      uint64_t v10 = *((unsigned int *)v5 + 5);
      if (v10)
      {
        uint64_t v11 = (API::UserScript **)v5[1];
        uint64_t v12 = 8 * v10;
        do
        {
          uint64_t v13 = *v11++;
          WebKit::WebUserContentControllerProxy::removeUserScript(a2, v13);
          v12 -= 8;
        }
        while (v12);
      }
      while (1)
      {
        v5 += 3;
        if (v5 == v7) {
          break;
        }
        if ((unint64_t)(*v5 + 1) > 1) {
          goto LABEL_12;
        }
      }
      uint64_t v5 = v7;
LABEL_12:
      ;
    }
    while (v5 != v9);
  }
  uint64_t v14 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 50);
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v18 = *((void *)this + 50);
  if (v18) {
    uint64_t v19 = (void *)(v18 + 24 * *(unsigned int *)(v18 - 4));
  }
  else {
    uint64_t v19 = 0;
  }
  if (v19 != v14)
  {
    do
    {
      uint64_t v20 = *((unsigned int *)v15 + 5);
      if (v20)
      {
        uint64_t v21 = (API::UserStyleSheet **)v15[1];
        uint64_t v22 = 8 * v20;
        do
        {
          uint64_t v23 = *v21++;
          WebKit::WebUserContentControllerProxy::removeUserStyleSheet(a2, v23);
          v22 -= 8;
        }
        while (v22);
      }
      while (1)
      {
        v15 += 3;
        if (v15 == v17) {
          break;
        }
        if ((unint64_t)(*v15 + 1) > 1) {
          goto LABEL_24;
        }
      }
      uint64_t v15 = v17;
LABEL_24:
      ;
    }
    while (v15 != v19);
  }
}

uint64_t *WebKit::WebExtensionContext::removeExpired(uint64_t a1, uint64_t *a2, double *a3, void *a4)
{
  uint64_t v7 = a4;
  WTF::WallTime::now(v7);
  double v11 = v10;
  if (*a3 <= v10)
  {
    *a3 = INFINITY;
    uint64_t v27 = 0;
    uint64_t v12 = *a2;
    if (*a2)
    {
      int v13 = *(_DWORD *)(v12 - 4);
      if (v13)
      {
        int v14 = 0;
        unsigned int v15 = v13 - 1;
        do
        {
          uint64_t v16 = v15;
          if ((unint64_t)(*(void *)(v12 + 16 * v15) + 1) >= 2)
          {
            double v17 = *(double *)(v12 + 16 * v15 + 8);
            if (v17 <= v11)
            {
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v27, (WTF::StringImpl **)(v12 + 16 * v15), v9, (uint64_t)v28);
              WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)(v12 + 16 * v15), v18);
              ++v14;
            }
            else if (v17 < *a3)
            {
              *a3 = v17;
            }
          }
          --v15;
        }
        while (v16);
        uint64_t v19 = *a2;
        if (v14)
        {
          *(_DWORD *)(v19 - 16) += v14;
          uint64_t v20 = *a2;
          if (*a2) {
            int v21 = *(_DWORD *)(v20 - 12);
          }
          else {
            int v21 = 0;
          }
          *(_DWORD *)(v20 - 12) = v21 - v14;
          uint64_t v19 = *a2;
        }
        if (v19)
        {
          unsigned int v22 = *(_DWORD *)(v19 - 4);
          unsigned int v23 = 6 * *(_DWORD *)(v19 - 12);
          if (v22 >= 9 && v23 < v22) {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::shrinkToBestSize(a2);
          }
        }
      }
      uint64_t v25 = v27;
      if (v27)
      {
        if (!v7
          || !*((_DWORD *)v27 - 3)
          || (WebKit::WebExtensionContext::permissionsDidChange(a1, v7, &v27), (uint64_t v25 = v27) != 0))
        {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v25, v8);
        }
      }
    }
  }

  return a2;
}

{
  WTF::WallTime *v7;
  void *v8;
  double v9;
  double v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v25;
  uint64_t *v27;
  unsigned char v28[24];

  uint64_t v7 = a4;
  WTF::WallTime::now(v7);
  double v10 = v9;
  if (*a3 <= v9)
  {
    *a3 = INFINITY;
    uint64_t v27 = 0;
    double v11 = *a2;
    if (*a2)
    {
      uint64_t v12 = *(_DWORD *)(v11 - 4);
      if (v12)
      {
        int v13 = 0;
        int v14 = v12 - 1;
        do
        {
          unsigned int v15 = v14;
          uint64_t v16 = (uint64_t *)(v11 + 16 * v14);
          if ((unint64_t)(*v16 + 1) >= 2)
          {
            double v17 = *(double *)(v11 + 16 * v14 + 8);
            if (v17 <= v10)
            {
              WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v27, (uint64_t *)(v11 + 16 * v14), (uint64_t)v28);
              uint64_t v18 = *v16;
              void *v16 = 0;
              if (v18) {
                CFRelease(*(CFTypeRef *)(v18 + 8));
              }
              void *v16 = -1;
              ++v13;
            }
            else if (v17 < *a3)
            {
              *a3 = v17;
            }
          }
          --v14;
        }
        while (v15);
        uint64_t v19 = *a2;
        if (v13)
        {
          *(_DWORD *)(v19 - 16) += v13;
          uint64_t v20 = *a2;
          if (*a2) {
            int v21 = *(_DWORD *)(v20 - 12);
          }
          else {
            int v21 = 0;
          }
          *(_DWORD *)(v20 - 12) = v21 - v13;
          uint64_t v19 = *a2;
        }
        if (v19)
        {
          unsigned int v22 = *(_DWORD *)(v19 - 4);
          unsigned int v23 = 6 * *(_DWORD *)(v19 - 12);
          if (v22 >= 9 && v23 < v22) {
            WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::shrinkToBestSize(a2);
          }
        }
      }
      uint64_t v25 = v27;
      if (v27)
      {
        if (!v7
          || !*((_DWORD *)v27 - 3)
          || (WebKit::WebExtensionContext::permissionsDidChange(a1, v7, &v27), (uint64_t v25 = v27) != 0))
        {
          WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v25, v8);
        }
      }
    }
  }

  return a2;
}

void sub_19931F720(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl **a9)
{
  if (a9) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a9, a2);
  }

  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::setGrantedPermissions(uint64_t a1, uint64_t *a2)
{
  uint64_t v31 = 0;
  uint64_t v4 = (WTF::StringImpl ***)(a1 + 168);
  uint64_t v5 = *(WTF::StringImpl ***)(a1 + 168);
  uint64_t v6 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v5);
  uint64_t v8 = v6;
  double v10 = v9;
  if (v5) {
    v5 += 2 * *((unsigned int *)v5 - 1);
  }
  if (v5 != v6)
  {
    do
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v31, v8, v7, (uint64_t)v30);
      while (1)
      {
        v8 += 2;
        if (v8 == v10) {
          break;
        }
        if ((unint64_t)*v8 + 1 > 1) {
          goto LABEL_9;
        }
      }
      uint64_t v8 = v10;
LABEL_9:
      ;
    }
    while (v8 != v5);
  }
  *(void *)(a1 + 184) = 0x7FF8000000000000;
  WebKit::WebExtensionContext::removeExpired(a1, a2, (double *)(a1 + 184), 0);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=(v4, (void **)a2);
  uint64_t v29 = 0;
  double v11 = *v4;
  uint64_t v12 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(*v4);
  unsigned int v15 = v12;
  uint64_t v16 = (WTF::StringImpl **)v13;
  if (v11) {
    v11 += 2 * *((unsigned int *)v11 - 1);
  }
  if (v11 == v12)
  {
    uint64_t v27 = 0;
  }
  else
  {
    do
    {
      double v17 = v31;
      if (!v31)
      {
LABEL_14:
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v29, v15, v14, (uint64_t)v30);
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v29, v15, v18, (uint64_t)v30);
        goto LABEL_15;
      }
      int v19 = *((_DWORD *)v31 - 2);
      unsigned int v20 = *((_DWORD *)*v15 + 4);
      if (v20 >= 0x100) {
        unsigned int v21 = v20 >> 8;
      }
      else {
        unsigned int v21 = WTF::StringImpl::hashSlowCase(*v15);
      }
      for (int i = 0; ; v21 = i + v23)
      {
        int v23 = v21 & v19;
        uint64_t v24 = (WTF *)v17[v21 & v19];
        if (v24 != (WTF *)-1)
        {
          if (!v24) {
            goto LABEL_14;
          }
          if (WTF::equal(v24, *v15, v14)) {
            break;
          }
        }
        ++i;
      }
      uint64_t v25 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)&v31, v15, v14);
      int v13 = (WTF::StringImpl *)v25;
      if (v31)
      {
        uint64_t v26 = (WTF::StringImpl **)&v31[*((unsigned int *)v31 - 1)];
        if (v26 == v25) {
          goto LABEL_15;
        }
      }
      else
      {
        if (!v25) {
          goto LABEL_15;
        }
        uint64_t v26 = 0;
      }
      if (v26 != v25) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove((uint64_t *)&v31, v25);
      }
LABEL_15:
      while (1)
      {
        v15 += 2;
        if (v15 == v16) {
          break;
        }
        if ((unint64_t)*v15 + 1 > 1) {
          goto LABEL_19;
        }
      }
      unsigned int v15 = v16;
LABEL_19:
      ;
    }
    while (v15 != v11);
    uint64_t v27 = v29;
    if (v29 && *((_DWORD *)v29 - 3)) {
      goto LABEL_41;
    }
  }
  if (v31 && *((_DWORD *)v31 - 3))
  {
LABEL_41:
    WebKit::WebExtensionContext::removePermissions(a1, (uint64_t *)(a1 + 176), (uint64_t *)&v29, (double *)(a1 + 192), @"WKWebExtensionContextDeniedPermissionsWereRemoved");
    WebKit::WebExtensionContext::permissionsDidChange(a1, @"WKWebExtensionContextGrantedPermissionsWereRemoved", &v31);
    WebKit::WebExtensionContext::permissionsDidChange(a1, @"WKWebExtensionContextPermissionsWereGranted", &v29);
    uint64_t v27 = v29;
  }
  if (v27) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v27, v13);
  }
  uint64_t result = v31;
  if (v31) {
    return (void *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v31, v13);
  }
  return result;
}

void sub_19931F9DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl **a14)
{
  if (a10) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a10, a2);
  }
  if (a14) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a14, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::permissionsDidChange(uint64_t a1, void *a2, void **a3)
{
  id v5 = a2;
  if (!*a3 || !*((_DWORD *)*a3 - 3)) {
    goto LABEL_51;
  }
  uint64_t v6 = *(void *)(a1 + 72);
  if (!v6) {
    goto LABEL_39;
  }
  uint64_t v7 = *(void *)(v6 + 8);
  if (!v7) {
    goto LABEL_39;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  WebKit::WebExtensionController::allProcesses((WebKit::WebExtensionController *)(v7 - 16), v54);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v54, v51);
  if (v54[0])
  {
    uint64_t v9 = *((unsigned int *)v54[0] - 1);
    double v10 = &v54[0][v9];
  }
  else
  {
    double v10 = 0;
    uint64_t v9 = 0;
  }
  *(void *)&long long v48 = v54;
  *((void *)&v48 + 1) = v10;
  CFTypeRef v49 = v10;
  v50[0] = v10;
  v50[1] = &v54[0][v9];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v48);
  while (v51[1] != *((WTF::StringImpl **)&v48 + 1))
  {
    uint64_t v12 = *(void *)(*(void *)v51[1] + 8);
    uint64_t v13 = *(void *)(v12 + 136);
    if (v13 && *(unsigned char *)(v13 + 104) || *(void *)(v12 + 144))
    {
      int v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)int v14 = 1631;
      *((void *)v14 + 1) = v8;
      *((void *)v14 + 66) = (char *)v14 + 16;
      *((void *)v14 + 67) = 512;
      *((void *)v14 + 68) = 0;
      *((void *)v14 + 70) = 0;
      *((void *)v14 + 69) = 0;
      IPC::Encoder::encodeHeader(v14);
      char v57 = v14;
      IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits> const&>(v14, (void **)(a1 + 168));
      LOBYTE(v55) = 0;
      char v56 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v57, 0, (uint64_t)&v55, 1);
      if (v56)
      {
        uint64_t v16 = v55;
        uint64_t v55 = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
      }
      double v17 = v57;
      char v57 = 0;
      if (v17)
      {
        IPC::Encoder::~Encoder(v17, v15);
        WTF::fastFree(v18, v19);
      }
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(v51);
  }
  if (v54[0]) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable((unsigned int **)v54[0], v11);
  }
  MEMORY[0x19972EAD0](v51, @"clipboardWrite");
  unsigned int v22 = *a3;
  int v23 = v51[0];
  if (*a3)
  {
    int v42 = *(v22 - 2);
    unsigned int v43 = *((_DWORD *)v51[0] + 4);
    if (v43 >= 0x100) {
      unsigned int v44 = v43 >> 8;
    }
    else {
      unsigned int v44 = WTF::StringImpl::hashSlowCase(v51[0]);
    }
    for (i = 0; ; unsigned int v44 = i + v46)
    {
      int v46 = v44 & v42;
      uint64_t v47 = *(WTF **)&v22[2 * (v44 & v42)];
      if (v47 != (WTF *)-1)
      {
        if (!v47)
        {
          LODWORD(v22) = 0;
          goto LABEL_62;
        }
        if (WTF::equal(v47, v51[0], v21)) {
          break;
        }
      }
      ++i;
    }
    LODWORD(v22) = 1;
LABEL_62:
    int v23 = v51[0];
  }
  v51[0] = 0;
  if (!v23)
  {
LABEL_25:
    if (!v22) {
      goto LABEL_33;
    }
LABEL_28:
    LOBYTE(v48) = 0;
    MEMORY[0x19972EAD0](v51, @"clipboardWrite");
    int v25 = WebKit::WebExtensionContext::permissionState(a1, v51, 0, 2) & 0xFFFFFFFE;
    uint64_t v26 = v51[0];
    v51[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v24);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    LOBYTE(v48) = v25 == 2;
    uint64_t v27 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v27 = &unk_1EE9FEE40;
    *((void *)v27 + 1) = &v48;
    v51[0] = v27;
    WebKit::WebExtensionContext::enumerateExtensionPages(a1, v51);
    (*(void (**)(WTF::StringImpl *))(*(void *)v27 + 8))(v27);
    goto LABEL_33;
  }
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
    goto LABEL_25;
  }
  WTF::StringImpl::destroy(v23, v20);
  if (v22) {
    goto LABEL_28;
  }
LABEL_33:
  if ([v5 isEqualToString:@"WKWebExtensionContextPermissionsWereGranted"])
  {
    v51[0] = 0;
    WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(a1, 21, a3, (void **)v51);
    goto LABEL_37;
  }
  if ([v5 isEqualToString:@"WKWebExtensionContextGrantedPermissionsWereRemoved"])
  {
    v51[0] = 0;
    WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(a1, 22, a3, (void **)v51);
LABEL_37:
    if (v51[0]) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)v51[0], v28);
    }
  }
LABEL_39:
  *(void *)&long long v48 = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  *((void *)&v48 + 1) = a1;
  WTF::retainPtr<NSString * {__strong}>(&v49, v5);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)v50, a3);
  long long v29 = v48;
  *((void *)&v48 + 1) = 0;
  *(_OWORD *)CFTypeRef v51 = v29;
  uint64_t v30 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v49);

  CFTypeRef cf = v30;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)v53, v50);
  uint64_t v31 = malloc_type_malloc(0x40uLL, 0x10F204012DF0847uLL);
  void *v31 = MEMORY[0x1E4F14398];
  v31[1] = 50331650;
  void v31[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::permissionsDidChange(NSString *,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0>(WebKit::WebExtensionContext::permissionsDidChange(NSString *,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0)::{lambda(void *)#1}::__invoke;
  v31[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::permissionsDidChange(NSString *,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0>(WebKit::WebExtensionContext::permissionsDidChange(NSString *,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0)::descriptor;
  long long v32 = *(_OWORD *)v51;
  v51[1] = 0;
  *((_OWORD *)v31 + 2) = v32;
  __int16 v33 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&cf);

  v31[6] = v33;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v31 + 7, v53);
  uint64_t v34 = _Block_copy(v31);

  if (v53[0]) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v53[0], v35);
  }
  CFTypeRef v36 = cf;
  CFTypeRef cf = 0;
  if (v36) {
    CFRelease(v36);
  }
  uint64_t v37 = v51[1];
  v51[1] = 0;
  if (v37) {
    CFRelease(*((CFTypeRef *)v37 + 1));
  }
  int8x16x2_t v38 = _Block_copy(v34);
  dispatch_async(MEMORY[0x1E4F14428], v38);

  if (v50[0]) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v50[0], v39);
  }
  CFTypeRef v40 = v49;
  CFTypeRef v49 = 0;
  if (v40) {
    CFRelease(v40);
  }
  uint64_t v41 = *((void *)&v48 + 1);
  *((void *)&v48 + 1) = 0;
  if (v41) {
    CFRelease(*(CFTypeRef *)(v41 + 8));
  }
LABEL_51:
}

{
  WTF::StringImpl *v5;
  id v6;
  WTF::StringImpl **v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  void *v13;
  WebKit::WebExtensionTab **v14;
  WebKit::WebExtensionTab **v15;
  WebKit::WebExtensionTab *v16;
  void *v17;
  unsigned char **v18;
  unsigned char **v19;
  unsigned char **v20;
  uint64_t v21;
  unsigned char *v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  long long v26;
  void *v27;
  void *v28;
  long long v29;
  void *v30;
  void *v31;
  void *v32;
  CFTypeRef v33;
  WTF::StringImpl *v34;
  void *v35;
  void *v36;
  CFTypeRef v37;
  uint64_t v38;
  long long v39;
  CFTypeRef v40;
  uint64_t *v41;
  WTF::StringImpl *v42[2];
  CFTypeRef cf;
  void *v44[3];

  uint64_t v6 = a2;
  if (!*a3 || !*((_DWORD *)*a3 - 3)) {
    goto LABEL_48;
  }
  uint64_t v7 = *(WTF::StringImpl ***)(a1 + 256);
  if (v7)
  {
    *(void *)(a1 + 256) = 0;
    WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable(v7, v5);
  }
  WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::deleteAllNodes(a1 + 232, v5);
  uint64_t v9 = *(void *)(a1 + 232);
  if (v9)
  {
    *(void *)(a1 + 232) = 0;
    WTF::fastFree((WTF *)(v9 - 16), v8);
  }
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  double v10 = *(void *)(a1 + 72);
  if (v10 && *(void *)(v10 + 8))
  {
    if ([v6 isEqualToString:@"WKWebExtensionContextPermissionMatchPatternsWereGranted"])
    {
      WebKit::WebExtensionContext::injectedContents((WebKit::WebExtensionContext *)a1, (uint64_t)v42);
      WebKit::WebExtensionContext::addInjectedContent(a1, (uint64_t)v42, a3);
      WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v11);
      v42[0] = 0;
      WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(a1, 21, (void **)v42, a3);
    }
    else
    {
      if (![v6 isEqualToString:@"WKWebExtensionContextGrantedPermissionMatchPatternsWereRemoved"])
      {
        WebKit::WebExtensionContext::removeInjectedContent(a1);
        WebKit::WebExtensionContext::addInjectedContent((WebKit::WebExtensionContext *)a1);
LABEL_16:
        WebKit::WebExtensionContext::openTabs(a1, 0, (uint64_t)&v39);
        if (HIDWORD(v39))
        {
          int v14 = (WebKit::WebExtensionTab **)v39;
          unsigned int v15 = (WebKit::WebExtensionTab **)(v39 + 8 * HIDWORD(v39));
          while (1)
          {
            uint64_t v16 = *v14;
            ++*(_DWORD *)*v14;
            double v17 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a3);
            uint64_t v18 = (unsigned char **)v17;
            unsigned int v20 = v19;
            unsigned int v21 = *a3 ? (uint64_t)&(*a3)[*((unsigned int *)*a3 - 1)] : 0;
            if ((void *)v21 != v17) {
              break;
            }
LABEL_34:
            WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v16);
            if (++v14 == v15) {
              goto LABEL_35;
            }
          }
          while (1)
          {
            unsigned int v22 = *v18;
            WebKit::WebExtensionTab::url(v16, (uint64_t)v42);
            uint64_t v24 = WebKit::WebExtensionMatchPattern::matchesURL(v22, (WTF::URL *)v42, 0);
            int v25 = v42[0];
            v42[0] = 0;
            if (!v25) {
              goto LABEL_25;
            }
            if (*(_DWORD *)v25 != 2) {
              break;
            }
            WTF::StringImpl::destroy(v25, v23);
            if (!v24) {
              goto LABEL_29;
            }
LABEL_28:
            WebKit::WebExtensionContext::didChangeTabProperties(a1, v16, 0x180u);
LABEL_29:
            while (++v18 != v20)
            {
              if ((unint64_t)(*v18 + 1) > 1) {
                goto LABEL_33;
              }
            }
            uint64_t v18 = v20;
LABEL_33:
            if (v18 == (unsigned char **)v21) {
              goto LABEL_34;
            }
          }
          *(_DWORD *)v25 -= 2;
LABEL_25:
          if (!v24) {
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_35:
        WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v13);
        goto LABEL_36;
      }
      WebKit::WebExtensionContext::removeInjectedContent(a1, a3);
      v42[0] = 0;
      WebKit::WebExtensionContext::firePermissionsEventListenerIfNecessary(a1, 22, (void **)v42, a3);
    }
    if (v42[0]) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v42[0], v12);
    }
    goto LABEL_16;
  }
LABEL_36:
  *(void *)&int8x16x2_t v39 = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  *((void *)&v39 + 1) = a1;
  WTF::retainPtr<NSString * {__strong}>(&v40, v6);
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v41, a3);
  uint64_t v26 = v39;
  *((void *)&v39 + 1) = 0;
  *(_OWORD *)int v42 = v26;
  uint64_t v27 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&v40);

  CFTypeRef cf = v27;
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)v44, &v41);
  uint64_t v28 = malloc_type_malloc(0x40uLL, 0x10F204012DF0847uLL);
  void *v28 = MEMORY[0x1E4F14398];
  v28[1] = 50331650;
  uint64_t v28[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::permissionsDidChange(NSString *,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0>(WebKit::WebExtensionContext::permissionsDidChange(NSString *,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0)::{lambda(void *)#1}::__invoke;
  v28[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::permissionsDidChange(NSString *,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0>(WebKit::WebExtensionContext::permissionsDidChange(NSString *,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0)::descriptor;
  long long v29 = *(_OWORD *)v42;
  v42[1] = 0;
  *((_OWORD *)v28 + 2) = v29;
  uint64_t v30 = WTF::RetainPtr<NSDictionary>::leakRef<NSDictionary>((void **)&cf);

  v28[6] = v30;
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable(v28 + 7, v44);
  uint64_t v31 = _Block_copy(v28);

  if (v44[0]) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v44[0], v32);
  }
  __int16 v33 = cf;
  CFTypeRef cf = 0;
  if (v33) {
    CFRelease(v33);
  }
  uint64_t v34 = v42[1];
  v42[1] = 0;
  if (v34) {
    CFRelease(*((CFTypeRef *)v34 + 1));
  }
  CFTypeRef v35 = _Block_copy(v31);
  dispatch_async(MEMORY[0x1E4F14428], v35);

  if (v41) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v41, v36);
  }
  uint64_t v37 = v40;
  CFTypeRef v40 = 0;
  if (v37) {
    CFRelease(v37);
  }
  int8x16x2_t v38 = *((void *)&v39 + 1);
  *((void *)&v39 + 1) = 0;
  if (v38) {
    CFRelease(*(CFTypeRef *)(v38 + 8));
  }
LABEL_48:
}

void sub_19931FF64(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef cf, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::setDeniedPermissions(uint64_t a1, uint64_t *a2)
{
  uint64_t v30 = 0;
  uint64_t v4 = (WTF::StringImpl ***)(a1 + 176);
  id v5 = *(WTF::StringImpl ***)(a1 + 176);
  uint64_t v6 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v5);
  uint64_t v8 = v6;
  double v10 = v9;
  if (v5) {
    v5 += 2 * *((unsigned int *)v5 - 1);
  }
  if (v5 != v6)
  {
    do
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v30, v8, v7, (uint64_t)v29);
      while (1)
      {
        v8 += 2;
        if (v8 == v10) {
          break;
        }
        if ((unint64_t)*v8 + 1 > 1) {
          goto LABEL_9;
        }
      }
      uint64_t v8 = v10;
LABEL_9:
      ;
    }
    while (v8 != v5);
  }
  *(void *)(a1 + 192) = 0x7FF8000000000000;
  WebKit::WebExtensionContext::removeExpired(a1, a2, (double *)(a1 + 192), 0);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=(v4, (void **)a2);
  uint64_t v28 = 0;
  double v11 = *v4;
  uint64_t v12 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(*v4);
  unsigned int v15 = v12;
  uint64_t v16 = (WTF::StringImpl **)v13;
  if (v11) {
    v11 += 2 * *((unsigned int *)v11 - 1);
  }
  if (v11 == v12)
  {
    uint64_t v26 = 0;
  }
  else
  {
    do
    {
      double v17 = v30;
      if (!v30)
      {
LABEL_14:
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v28, v15, v14, (uint64_t)v29);
        goto LABEL_15;
      }
      int v18 = *((_DWORD *)v30 - 2);
      unsigned int v19 = *((_DWORD *)*v15 + 4);
      if (v19 >= 0x100) {
        unsigned int v20 = v19 >> 8;
      }
      else {
        unsigned int v20 = WTF::StringImpl::hashSlowCase(*v15);
      }
      for (i = 0; ; unsigned int v20 = i + v22)
      {
        int v22 = v20 & v18;
        int v23 = (WTF *)v17[v20 & v18];
        if (v23 != (WTF *)-1)
        {
          if (!v23) {
            goto LABEL_14;
          }
          if (WTF::equal(v23, *v15, v14)) {
            break;
          }
        }
        ++i;
      }
      uint64_t v24 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)&v30, v15, v14);
      uint64_t v13 = (WTF::StringImpl *)v24;
      if (v30)
      {
        int v25 = (WTF::StringImpl **)&v30[*((unsigned int *)v30 - 1)];
        if (v25 == v24) {
          goto LABEL_15;
        }
      }
      else
      {
        if (!v24) {
          goto LABEL_15;
        }
        int v25 = 0;
      }
      if (v25 != v24) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove((uint64_t *)&v30, v24);
      }
LABEL_15:
      while (1)
      {
        v15 += 2;
        if (v15 == v16) {
          break;
        }
        if ((unint64_t)*v15 + 1 > 1) {
          goto LABEL_19;
        }
      }
      unsigned int v15 = v16;
LABEL_19:
      ;
    }
    while (v15 != v11);
    uint64_t v26 = v28;
    if (v28 && *((_DWORD *)v28 - 3)) {
      goto LABEL_41;
    }
  }
  if (v30 && *((_DWORD *)v30 - 3))
  {
LABEL_41:
    WebKit::WebExtensionContext::removePermissions(a1, (uint64_t *)(a1 + 168), (uint64_t *)&v28, (double *)(a1 + 184), @"WKWebExtensionContextGrantedPermissionsWereRemoved");
    WebKit::WebExtensionContext::permissionsDidChange(a1, @"WKWebExtensionContextDeniedPermissionsWereRemoved", &v30);
    WebKit::WebExtensionContext::permissionsDidChange(a1, @"WKWebExtensionContextPermissionsWereDenied", &v28);
    uint64_t v26 = v28;
  }
  if (v26) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v26, v13);
  }
  uint64_t result = v30;
  if (v30) {
    return (void *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v30, v13);
  }
  return result;
}

void sub_1993203A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl **a14)
{
  if (a10) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a10, a2);
  }
  if (a14) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a14, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_199320590(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  if (a9) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a9, a2);
  }

  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::setGrantedPermissionMatchPatterns(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v26 = 0;
  uint64_t v6 = (uint64_t **)(a1 + 200);
  uint64_t v7 = *(uint64_t **)(a1 + 200);
  uint64_t v8 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v7);
  uint64_t v9 = v8;
  double v11 = v10;
  if (v7) {
    v7 += 2 * *((unsigned int *)v7 - 1);
  }
  if (v7 != v8)
  {
    do
    {
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v26, v9, (uint64_t)v25);
      while (1)
      {
        v9 += 2;
        if (v9 == v11) {
          break;
        }
        if ((unint64_t)(*v9 + 1) > 1) {
          goto LABEL_9;
        }
      }
      uint64_t v9 = v11;
LABEL_9:
      ;
    }
    while (v9 != v7);
  }
  *(void *)(a1 + 216) = 0x7FF8000000000000;
  WebKit::WebExtensionContext::removeExpired(a1, a2, (double *)(a1 + 184), 0);
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::operator=(v6, (void **)a2);
  uint64_t v24 = 0;
  uint64_t v12 = *v6;
  uint64_t v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(*v6);
  unsigned int v15 = v13;
  uint64_t v16 = v14;
  if (v12) {
    double v17 = &v12[2 * *((unsigned int *)v12 - 1)];
  }
  else {
    double v17 = 0;
  }
  if (v17 == v13)
  {
    int v22 = 0;
  }
  else
  {
    do
    {
      int v18 = v26;
      uint64_t v19 = *v15;
      if (!WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WebCore::Element const*>((uint64_t)v26, *v15))
      {
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v24, v15, (uint64_t)v25);
        goto LABEL_23;
      }
      matched = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>((uint64_t)v18, v19);
      int v14 = matched;
      if (v18)
      {
        unsigned int v21 = &v18[*((unsigned int *)v18 - 1)];
        if (v21 == matched) {
          goto LABEL_23;
        }
      }
      else
      {
        if (!matched) {
          goto LABEL_23;
        }
        unsigned int v21 = 0;
      }
      if (v21 != matched) {
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::remove((uint64_t *)&v26, matched);
      }
LABEL_23:
      while (1)
      {
        v15 += 2;
        if (v15 == v16) {
          break;
        }
        if ((unint64_t)(*v15 + 1) > 1) {
          goto LABEL_27;
        }
      }
      unsigned int v15 = v16;
LABEL_27:
      ;
    }
    while (v15 != v17);
    int v22 = v24;
    if (v24 && *((_DWORD *)v24 - 3)) {
      goto LABEL_34;
    }
  }
  if (v26 && *((_DWORD *)v26 - 3))
  {
LABEL_34:
    WebKit::WebExtensionContext::removeDeniedPermissionMatchPatterns(a1, (uint64_t *)&v24, a3);
    WebKit::WebExtensionContext::permissionsDidChange(a1, @"WKWebExtensionContextGrantedPermissionMatchPatternsWereRemoved", &v26);
    WebKit::WebExtensionContext::permissionsDidChange(a1, @"WKWebExtensionContextPermissionMatchPatternsWereGranted", &v24);
    int v22 = v24;
  }
  if (v22) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v22, v14);
  }
  uint64_t result = v26;
  if (v26) {
    return (void *)WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v26, v14);
  }
  return result;
}

void sub_1993207E4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  if (a10) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a10, a2);
  }
  if (a14) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a14, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::removeDeniedPermissionMatchPatterns(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4 = WebKit::WebExtensionContext::removePermissionMatchPatterns(a1, (uint64_t *)(a1 + 208), a2, a3, (double *)(a1 + 224), @"WKWebExtensionContextDeniedPermissionMatchPatternsWereRemoved");
  if (v4)
  {
    WebKit::WebExtensionContext::removeInjectedContent(a1);
    WebKit::WebExtensionContext::addInjectedContent((WebKit::WebExtensionContext *)a1);
  }
  return v4;
}

void sub_199320C6C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, uint64_t a12, WTF::StringImpl **a13, uint64_t a14, CFTypeRef cf, uint64_t a16)
{
  if (a13) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a13, a2);
  }

  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::setDeniedPermissionMatchPatterns(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v26 = 0;
  uint64_t v6 = (uint64_t **)(a1 + 208);
  uint64_t v7 = *(uint64_t **)(a1 + 208);
  uint64_t v8 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v7);
  uint64_t v9 = v8;
  double v11 = v10;
  if (v7) {
    v7 += 2 * *((unsigned int *)v7 - 1);
  }
  if (v7 != v8)
  {
    do
    {
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v26, v9, (uint64_t)v25);
      while (1)
      {
        v9 += 2;
        if (v9 == v11) {
          break;
        }
        if ((unint64_t)(*v9 + 1) > 1) {
          goto LABEL_9;
        }
      }
      uint64_t v9 = v11;
LABEL_9:
      ;
    }
    while (v9 != v7);
  }
  *(void *)(a1 + 224) = 0x7FF8000000000000;
  WebKit::WebExtensionContext::removeExpired(a1, a2, (double *)(a1 + 224), 0);
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::operator=(v6, (void **)a2);
  uint64_t v24 = 0;
  uint64_t v12 = *v6;
  uint64_t v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(*v6);
  unsigned int v15 = v13;
  uint64_t v16 = v14;
  if (v12) {
    double v17 = &v12[2 * *((unsigned int *)v12 - 1)];
  }
  else {
    double v17 = 0;
  }
  if (v17 == v13)
  {
    int v22 = 0;
  }
  else
  {
    do
    {
      int v18 = v26;
      uint64_t v19 = *v15;
      if (!WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WebCore::Element const*>((uint64_t)v26, *v15))
      {
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v24, v15, (uint64_t)v25);
        goto LABEL_23;
      }
      matched = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>((uint64_t)v18, v19);
      int v14 = matched;
      if (v18)
      {
        unsigned int v21 = &v18[*((unsigned int *)v18 - 1)];
        if (v21 == matched) {
          goto LABEL_23;
        }
      }
      else
      {
        if (!matched) {
          goto LABEL_23;
        }
        unsigned int v21 = 0;
      }
      if (v21 != matched) {
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::remove((uint64_t *)&v26, matched);
      }
LABEL_23:
      while (1)
      {
        v15 += 2;
        if (v15 == v16) {
          break;
        }
        if ((unint64_t)(*v15 + 1) > 1) {
          goto LABEL_27;
        }
      }
      unsigned int v15 = v16;
LABEL_27:
      ;
    }
    while (v15 != v17);
    int v22 = v24;
    if (v24 && *((_DWORD *)v24 - 3)) {
      goto LABEL_34;
    }
  }
  if (v26 && *((_DWORD *)v26 - 3))
  {
LABEL_34:
    WebKit::WebExtensionContext::removeGrantedPermissionMatchPatterns(a1, (uint64_t *)&v24, a3);
    WebKit::WebExtensionContext::permissionsDidChange(a1, @"WKWebExtensionContextDeniedPermissionMatchPatternsWereRemoved", &v26);
    WebKit::WebExtensionContext::permissionsDidChange(a1, @"WKWebExtensionContextPermissionMatchPatternsWereDenied", &v24);
    int v22 = v24;
  }
  if (v22) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v22, v14);
  }
  uint64_t result = v26;
  if (v26) {
    return (void *)WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v26, v14);
  }
  return result;
}

void sub_199320FD0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  if (a10) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a10, a2);
  }
  if (a14) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a14, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::removeGrantedPermissionMatchPatterns(uint64_t a1, uint64_t *a2, int a3)
{
  WebKit::WebExtensionContext::openTabs(a1, 0, (uint64_t)&v19);
  if (v20)
  {
    uint64_t v7 = v19;
    uint64_t v8 = &v19[v20];
    do
    {
      uint64_t v9 = *v7;
      _DWORD *v9 = **v7 + 1;
      uint64_t v10 = *((void *)v9 + 5);
      if (v10)
      {
        CFRetain(*(CFTypeRef *)(v10 + 8));
        double v11 = (unsigned __int8 **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)a2);
        uint64_t v12 = v11;
        int v14 = v13;
        if (*a2) {
          uint64_t v15 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
        }
        else {
          uint64_t v15 = 0;
        }
        if ((unsigned __int8 **)v15 != v11)
        {
          do
          {
            if (WebKit::WebExtensionMatchPattern::matchesPattern((unsigned __int8 *)v10, *v12, 0))
            {
              uint64_t v16 = *((void *)v9 + 5);
              *((void *)v9 + 5) = 0;
              if (v16) {
                CFRelease(*(CFTypeRef *)(v16 + 8));
              }
            }
            while (++v12 != v14)
            {
              if ((unint64_t)(*v12 + 1) > 1) {
                goto LABEL_15;
              }
            }
            uint64_t v12 = v14;
LABEL_15:
            ;
          }
          while (v12 != (unsigned __int8 **)v15);
        }
        CFRelease(*(CFTypeRef *)(v10 + 8));
      }
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v9);
      ++v7;
    }
    while (v7 != v8);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v6);
  uint64_t v17 = WebKit::WebExtensionContext::removePermissionMatchPatterns(a1, (uint64_t *)(a1 + 200), a2, a3, (double *)(a1 + 216), @"WKWebExtensionContextGrantedPermissionMatchPatternsWereRemoved");
  if (v17) {
    WebKit::WebExtensionContext::removeInjectedContent(a1, (void **)a2);
  }
  return v17;
}

void sub_199321178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFRelease(*(CFTypeRef *)(v10 + 8));
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v9);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v12);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::enumerateExtensionPages(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      char v28 = 0;
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v3 + 56), &v26);
      uint64_t v6 = *(void *)(v3 + 56);
      if (v6)
      {
        uint64_t v7 = *(unsigned int *)(v6 - 4);
        uint64_t v8 = v6 + 8 * v7;
      }
      else
      {
        uint64_t v8 = 0;
        uint64_t v7 = 0;
      }
      uint64_t v21 = v3 + 56;
      uint64_t v22 = v8;
      uint64_t v23 = v8;
      uint64_t v24 = v8;
      uint64_t v25 = v6 + 8 * v7;
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v21);
      uint64_t v9 = v27;
      if (v27 != v22)
      {
        uint64_t v10 = (WTF *)(a1 + 80);
        while (1)
        {
          uint64_t v11 = *(void *)(*(void *)v9 + 8);
          if (v11) {
            uint64_t v12 = (WebKit::WebPageProxy *)(v11 - 16);
          }
          else {
            uint64_t v12 = 0;
          }
          WebKit::WebPageProxy::cocoaView(v12, &cf);
          uint64_t v13 = WTF::RetainPtr<NSSet>::get((id *)&cf.m_string.m_impl.m_ptr);
          m_ptr = cf.m_string.m_impl.m_ptr;
          cf.m_string.m_impl.m_ptr = 0;
          if (m_ptr) {
            CFRelease(m_ptr);
          }
          uint64_t v15 = objc_msgSend(v13, "_requiredWebExtensionBaseURL", cf.m_string.m_impl.m_ptr);
          MEMORY[0x19972E8A0](&cf, v15);
          int v18 = (*((unsigned char *)&cf + 8) & 1) != 0 ? WTF::protocolHostAndPortAreEqual(v10, &cf, v17) : 0;
          uint64_t v19 = cf.m_string.m_impl.m_ptr;
          cf.m_string.m_impl.m_ptr = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy((WTF::StringImpl *)v19, v16);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }

          if (v18)
          {
            (*(void (**)(void, WebKit::WebPageProxy *, char *))(*(void *)*a2 + 16))(*a2, v12, &v28);
            if (v28) {
              break;
            }
          }

          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v26);
          uint64_t v9 = v27;
          if (v27 == v22) {
            return;
          }
        }
      }
    }
  }
}

void sub_199321354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  _Unwind_Resume(a1);
}

void sub_1993213A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  JUMPOUT(0x199321398);
}

void WTF::retainPtr<NSString * {__strong}>(void *a1, void *a2)
{
  id v3 = a2;
  *a1 = v3;
  URL cf = v3;
  if (v3) {
    CFRetain(v3);
  }
}

void sub_199321424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::addInjectedContent(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3 && *(void *)(v3 + 8))
  {
    if (WebKit::WebExtensionContext::hasAccessToAllHosts((WebKit::WebExtensionContext *)a1))
    {
      if (!WebKit::WebExtensionMatchPattern::patternsMatchAllHosts(a3)) {
        return;
      }
      uint64_t v31 = 0;
      uint64_t v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 392));
      uint64_t v8 = v7;
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)(a1 + 392);
      if (v11) {
        uint64_t v12 = (uint64_t *)(v11 + 24 * *(unsigned int *)(v11 - 4));
      }
      else {
        uint64_t v12 = 0;
      }
      if (v12 != v7)
      {
        do
        {
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v31, v8, (uint64_t)v30);
          while (1)
          {
            v8 += 3;
            if (v8 == v10) {
              break;
            }
            if ((unint64_t)(*v8 + 1) > 1) {
              goto LABEL_14;
            }
          }
          uint64_t v8 = v10;
LABEL_14:
          ;
        }
        while (v8 != v12);
      }
      uint64_t v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 400));
      int v14 = v13;
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)(a1 + 400);
      if (v17) {
        int v18 = (uint64_t *)(v17 + 24 * *(unsigned int *)(v17 - 4));
      }
      else {
        int v18 = 0;
      }
      if (v18 != v13)
      {
        do
        {
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v31, v14, (uint64_t)v30);
          while (1)
          {
            v14 += 3;
            if (v14 == v16) {
              break;
            }
            if ((unint64_t)(*v14 + 1) > 1) {
              goto LABEL_24;
            }
          }
          int v14 = v16;
LABEL_24:
          ;
        }
        while (v14 != v18);
      }
      int v20 = (WebKit::WebExtensionMatchPattern **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v31);
      uint64_t v21 = v19;
      uint64_t v22 = v31;
      if (v31) {
        uint64_t v23 = (WebKit::WebExtensionMatchPattern **)&v31[*((unsigned int *)v31 - 1)];
      }
      else {
        uint64_t v23 = 0;
      }
      if (v23 != v20)
      {
        do
        {
          WebKit::WebExtensionContext::removeInjectedContent((void *)a1, *v20);
          while (++v20 != v21)
          {
            if ((unint64_t)*v20 + 1 > 1) {
              goto LABEL_34;
            }
          }
          int v20 = v21;
LABEL_34:
          ;
        }
        while (v20 != v23);
        uint64_t v22 = v31;
      }
      if (v22) {
        WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v22, v19);
      }
    }
    uint64_t v24 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a3);
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    if (*a3) {
      uint64_t v28 = (uint64_t)&(*a3)[*((unsigned int *)*a3 - 1)];
    }
    else {
      uint64_t v28 = 0;
    }
    if ((uint64_t *)v28 != v24)
    {
      do
      {
        uint64_t v29 = *v25++;
        WebKit::WebExtensionContext::addInjectedContent(a1, a2, v29);
        while (v25 != v27)
        {
          if ((unint64_t)(*v25 + 1) > 1) {
            goto LABEL_47;
          }
          ++v25;
        }
        uint64_t v25 = v27;
LABEL_47:
        ;
      }
      while (v25 != (uint64_t *)v28);
    }
  }
}

void sub_199321678(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  if (a12) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a12, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::removeInjectedContent(uint64_t result, void **a2)
{
  uint64_t v2 = *(void *)(result + 72);
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v4 = (WebKit::WebExtensionContext *)result;
    id v5 = (WebKit::WebExtensionMatchPattern **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a2);
    uint64_t v6 = v5;
    uint64_t v8 = v7;
    if (*a2) {
      uint64_t v9 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
    }
    else {
      uint64_t v9 = 0;
    }
    if ((WebKit::WebExtensionMatchPattern **)v9 != v5)
    {
      do
      {
        uint64_t v10 = *v6++;
        WebKit::WebExtensionContext::removeInjectedContent(v4, v10);
        while (v6 != v8)
        {
          if ((unint64_t)*v6 + 1 > 1) {
            goto LABEL_12;
          }
          ++v6;
        }
        uint64_t v6 = v8;
LABEL_12:
        ;
      }
      while (v6 != (WebKit::WebExtensionMatchPattern **)v9);
    }
    uint64_t result = WebKit::WebExtensionMatchPattern::patternsMatchAllHosts(a2);
    if (result)
    {
      return WebKit::WebExtensionContext::addInjectedContent(v4);
    }
  }
  return result;
}

uint64_t WebKit::WebExtensionContext::openTabs@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v4 = *(void *)(result + 560);
  if (!v4)
  {
    LODWORD(v6) = 0;
LABEL_12:
    unint64_t v11 = 0;
    goto LABEL_13;
  }
  char v5 = (char)a2;
  uint64_t v6 = *(unsigned int *)(v4 - 12);
  if (v6)
  {
    if (v6 >> 29)
    {
      __break(0xC471u);
      goto LABEL_50;
    }
    uint64_t v7 = result;
    uint64_t result = WTF::fastMalloc((WTF *)(8 * v6));
    *(_DWORD *)(a3 + 8) = v6;
    *(void *)a3 = result;
    uint64_t v4 = *(void *)(v7 + 560);
    if (!v4) {
      goto LABEL_12;
    }
  }
  if (!*(_DWORD *)(v4 - 12)) {
    goto LABEL_12;
  }
  uint64_t v8 = *(unsigned int *)(v4 - 4);
  uint64_t v9 = v4;
  if (v8)
  {
    uint64_t v10 = 16 * v8;
    uint64_t v9 = v4;
    while ((unint64_t)(*(void *)v9 + 1) <= 1)
    {
      v9 += 16;
      v10 -= 16;
      if (!v10) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v16 = v4 + 16 * v8;
  if (v16 == v9) {
    goto LABEL_12;
  }
LABEL_24:
  uint64_t result = WebKit::WebExtensionTab::isOpen(*(WebKit::WebExtensionTab **)(v9 + 8));
  if (result)
  {
    if ((v5 & 1) != 0
      || (uint64_t v17 = *(WebKit::WebExtensionTab **)(v9 + 8), result = WebKit::WebExtensionTab::isPrivate(v17), !result)
      || ((v18 = *(void *)(*((void *)v17 + 3) + 8)) != 0 ? (uint64_t v19 = v18 - 16) : (uint64_t v19 = 0), *(unsigned char *)(v19 + 273)))
    {
      int v20 = *(_DWORD **)(v9 + 8);
      ++*v20;
      uint64_t v26 = v20;
      uint64_t v21 = *(unsigned int *)(a3 + 12);
      if (v21 == *(_DWORD *)(a3 + 8))
      {
        uint64_t v22 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v21 + 1, (unint64_t)&v26);
        uint64_t v21 = *(unsigned int *)(a3 + 12);
        uint64_t v23 = *(WTF **)a3;
        uint64_t v24 = *v22;
        uint64_t *v22 = 0;
        *((void *)v23 + v21) = v24;
      }
      else
      {
        uint64_t v25 = *(WTF **)a3;
        uint64_t v26 = 0;
        *((void *)v25 + v21) = v20;
      }
      *(_DWORD *)(a3 + 12) = v21 + 1;
      uint64_t result = (uint64_t)v26;
      uint64_t v26 = 0;
      if (result) {
        uint64_t result = WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
      }
    }
  }
  while (1)
  {
    v9 += 16;
    if (v9 == v16) {
      break;
    }
    if ((unint64_t)(*(void *)v9 + 1) > 1)
    {
      if (v9 != v16) {
        goto LABEL_24;
      }
      break;
    }
  }
  LODWORD(v6) = *(_DWORD *)(a3 + 8);
  unint64_t v11 = *(unsigned int *)(a3 + 12);
LABEL_13:
  if (v11 >= v6) {
    return result;
  }
  unint64_t v12 = *(unsigned int *)(a3 + 12);
  uint64_t v13 = *(WTF **)a3;
  if (v11 < v12)
  {
    int v14 = (uint64_t *)((char *)v13 + 8 * v11);
    uint64_t v15 = 8 * v12 - 8 * v11;
    do
    {
      uint64_t result = *v14;
      uint64_t *v14 = 0;
      if (result) {
        uint64_t result = WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
    *(_DWORD *)(a3 + 12) = v11;
    uint64_t v13 = *(WTF **)a3;
    LODWORD(v12) = v11;
  }
  if (v11)
  {
    if (*(_DWORD *)(a3 + 8))
    {
      *(_DWORD *)(a3 + 8) = v11;
      uint64_t result = WTF::fastRealloc(v13, (void *)(8 * v11));
      *(void *)a3 = result;
      return result;
    }
    if (!(v11 >> 29))
    {
      uint64_t result = WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(a3 + 8) = v11;
      *(void *)a3 = result;
      if ((WTF *)result != v13) {
        uint64_t result = (uint64_t)memcpy((void *)result, v13, 8 * v12);
      }
      goto LABEL_43;
    }
    __break(0xC471u);
LABEL_50:
    JUMPOUT(0x1993219E0);
  }
LABEL_43:
  if (v13)
  {
    if (*(WTF **)a3 == v13)
    {
      *(void *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
    }
    return WTF::fastFree(v13, a2);
  }
  return result;
}

void sub_1993219EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a10);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::didChangeTabProperties(uint64_t a1, WebKit::WebExtensionTab *this, unsigned __int16 a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (WebKit::WebExtensionTab::isOpen(this))
  {
    uint64_t v6 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *((void *)this + 2);
      v17[0] = 67240448;
      v17[1] = a3;
      __int16 v18 = 2050;
      uint64_t v19 = v16;
      _os_log_debug_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEBUG, "Changed tab properties (0x%{public}X) for tab %{public}llu", (uint8_t *)v17, 0x12u);
    }
    uint64_t v7 = *(void *)(a1 + 72);
    if (v7 && *(void *)(v7 + 8))
    {
      if (!WebKit::WebExtensionTab::isPrivate(this)
        || ((uint64_t v8 = *(void *)(*((void *)this + 3) + 8)) != 0 ? (v9 = v8 - 16) : (v9 = 0), *(unsigned char *)(v9 + 273)))
      {
        int v10 = *((unsigned __int16 *)this + 24);
        *((_WORD *)this + 24) = v10 | a3;
        if (!v10)
        {
          dispatch_time_t v11 = dispatch_time(0, 25000000);
          CFRetain(*(CFTypeRef *)(a1 + 8));
          uint64_t v12 = *((void *)this + 2);
          uint64_t v13 = malloc_type_malloc(0x38uLL, 0x10E0040EB3034C3uLL);
          void *v13 = MEMORY[0x1E4F14398];
          v13[1] = 50331650;
          _OWORD v13[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::didChangeTabProperties(WebKit::WebExtensionTab &,WTF::OptionSet<WebKit::WebExtensionTab::ChangedProperties>)::$_0>(WebKit::WebExtensionContext::didChangeTabProperties(WebKit::WebExtensionTab &,WTF::OptionSet<WebKit::WebExtensionTab::ChangedProperties>)::$_0)::{lambda(void *)#1}::__invoke;
          v13[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::didChangeTabProperties(WebKit::WebExtensionTab &,WTF::OptionSet<WebKit::WebExtensionTab::ChangedProperties>)::$_0>(WebKit::WebExtensionContext::didChangeTabProperties(WebKit::WebExtensionTab &,WTF::OptionSet<WebKit::WebExtensionTab::ChangedProperties>)::$_0)::descriptor;
          v13[4] = a1;
          void v13[5] = a1;
          v13[6] = v12;
          int v14 = _Block_copy(v13);

          uint64_t v15 = _Block_copy(v14);
          dispatch_after(v11, MEMORY[0x1E4F14428], v15);
        }
      }
    }
  }
}

void sub_199321BF4(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

double *WebKit::WebExtensionContext::grantPermissions(double *result, void **a2, double a3)
{
  double v12 = a3;
  if (*a2 && *((_DWORD *)*a2 - 3))
  {
    uint64_t v4 = (uint64_t)result;
    if (result[23] > a3) {
      result[23] = a3;
    }
    dispatch_time_t v11 = 0;
    uint64_t result = (double *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
    char v5 = (WTF::StringImpl **)result;
    uint64_t v7 = v6;
    uint64_t v8 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
    if ((double *)v8 != result)
    {
      do
      {
        WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::add<WTF::WallTime&>((uint64_t)v13, (uint64_t *)(v4 + 168), v5, (uint64_t *)&v12);
        if (v13[16]) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v11, v5, v10, (uint64_t)v13);
        }
        while (++v5 != v7)
        {
          if ((unint64_t)*v5 + 1 > 1) {
            goto LABEL_14;
          }
        }
        char v5 = v7;
LABEL_14:
        ;
      }
      while (v5 != (WTF::StringImpl **)v8);
      uint64_t result = v11;
      if (v11)
      {
        if (!*((_DWORD *)v11 - 3)) {
          return (double *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, v9);
        }
        WebKit::WebExtensionContext::removePermissions(v4, (uint64_t *)(v4 + 176), (uint64_t *)&v11, (double *)(v4 + 192), @"WKWebExtensionContextDeniedPermissionsWereRemoved");
        WebKit::WebExtensionContext::permissionsDidChange(v4, @"WKWebExtensionContextPermissionsWereGranted", (void **)&v11);
        uint64_t result = v11;
        if (v11) {
          return (double *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, v9);
        }
      }
    }
  }
  return result;
}

void sub_199321D54(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10)
{
  if (a10) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::add<WTF::WallTime&>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a3 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a3);
  }
  double v12 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v11 & v9;
    uint64_t v15 = (uint64_t *)(v8 + 16 * (v11 & v9));
    uint64_t v16 = (WTF *)*v15;
    if (*v15 != -1) {
      break;
    }
    double v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      uint64_t *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v15 = v12;
    }
    uint64_t result = (uint64_t)WTF::String::operator=(v15, a3);
    v15[1] = *a4;
    uint64_t v18 = *a2;
    if (*a2) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v22 = *a2;
    if (*a2) {
      int v23 = *(_DWORD *)(v22 - 12);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
    unint64_t v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
      {
LABEL_26:
        uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, (uint64_t)v15);
        uint64_t v15 = (uint64_t *)result;
        uint64_t v22 = *a2;
        if (*a2) {
          unint64_t v25 = *(unsigned int *)(v22 - 4);
        }
        else {
          unint64_t v25 = 0;
        }
      }
    }
    else if (3 * v25 <= 4 * v24)
    {
      goto LABEL_26;
    }
    uint64_t v27 = v22 + 16 * v25;
    char v26 = 1;
    goto LABEL_33;
  }
  uint64_t result = WTF::equal(v16, *a3, (const WTF::StringImpl *)a3);
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v20 = *a2;
  if (*a2) {
    uint64_t v21 = *(unsigned int *)(v20 - 4);
  }
  else {
    uint64_t v21 = 0;
  }
  char v26 = 0;
  uint64_t v27 = v20 + 16 * v21;
LABEL_33:
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = v27;
  *(unsigned char *)(a1 + 16) = v26;
  return result;
}

double *WebKit::WebExtensionContext::denyPermissions(double *result, void **a2, double a3)
{
  double v12 = a3;
  if (*a2 && *((_DWORD *)*a2 - 3))
  {
    uint64_t v4 = (uint64_t)result;
    if (result[24] > a3) {
      result[24] = a3;
    }
    unsigned int v11 = 0;
    uint64_t result = (double *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
    char v5 = (WTF::StringImpl **)result;
    uint64_t v7 = v6;
    uint64_t v8 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
    if ((double *)v8 != result)
    {
      do
      {
        WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::add<WTF::WallTime&>((uint64_t)v13, (uint64_t *)(v4 + 176), v5, (uint64_t *)&v12);
        if (v13[16]) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v11, v5, v10, (uint64_t)v13);
        }
        while (++v5 != v7)
        {
          if ((unint64_t)*v5 + 1 > 1) {
            goto LABEL_14;
          }
        }
        char v5 = v7;
LABEL_14:
        ;
      }
      while (v5 != (WTF::StringImpl **)v8);
      uint64_t result = v11;
      if (v11)
      {
        if (!*((_DWORD *)v11 - 3)) {
          return (double *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, v9);
        }
        WebKit::WebExtensionContext::removePermissions(v4, (uint64_t *)(v4 + 168), (uint64_t *)&v11, (double *)(v4 + 184), @"WKWebExtensionContextGrantedPermissionsWereRemoved");
        WebKit::WebExtensionContext::permissionsDidChange(v4, @"WKWebExtensionContextPermissionsWereDenied", (void **)&v11);
        uint64_t result = v11;
        if (v11) {
          return (double *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, v9);
        }
      }
    }
  }
  return result;
}

void sub_199322070(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10)
{
  if (a10) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

double *WebKit::WebExtensionContext::grantPermissionMatchPatterns(double *result, void **a2, int a3, double a4)
{
  double v13 = a4;
  if (*a2 && *((_DWORD *)*a2 - 3))
  {
    uint64_t v6 = (uint64_t)result;
    if (result[27] > a4) {
      result[27] = a4;
    }
    double v12 = 0;
    uint64_t result = (double *)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a2);
    uint64_t v7 = (uint64_t *)result;
    int v9 = v8;
    uint64_t v10 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
    if ((double *)v10 != result)
    {
      do
      {
        WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::add<WTF::WallTime&>((uint64_t *)(v6 + 200), v7, (uint64_t *)&v13, (uint64_t)v14);
        if (v14[16]) {
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v12, v7, (uint64_t)v14);
        }
        while (++v7 != v9)
        {
          if ((unint64_t)(*v7 + 1) > 1) {
            goto LABEL_15;
          }
        }
        uint64_t v7 = v9;
LABEL_15:
        ;
      }
      while (v7 != (uint64_t *)v10);
      uint64_t result = v12;
      if (v12)
      {
        if (!*((_DWORD *)v12 - 3)) {
          return (double *)WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)result, v11);
        }
        WebKit::WebExtensionContext::removeDeniedPermissionMatchPatterns(v6, (uint64_t *)&v12, a3);
        WebKit::WebExtensionContext::permissionsDidChange(v6, @"WKWebExtensionContextPermissionMatchPatternsWereGranted", (void **)&v12);
        uint64_t result = v12;
        if (v12) {
          return (double *)WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)result, v11);
        }
      }
    }
  }
  return result;
}

void sub_1993221D0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  if (a10) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::add<WTF::WallTime&>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  unsigned int v11 = 0;
  uint64_t v12 = *a2;
  unint64_t v13 = ~(*a2 << 32) + *a2;
  unint64_t v14 = 9
      * (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) ^ (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) >> 8));
  unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  unsigned int v16 = (v15 >> 31) ^ v15;
  for (int i = 1; ; ++i)
  {
    unsigned int v18 = v16 & v10;
    int v19 = (uint64_t *)(v8 + 16 * v18);
    uint64_t v20 = *v19;
    if (*v19 != -1) {
      break;
    }
    unsigned int v11 = (uint64_t *)(v8 + 16 * v18);
LABEL_10:
    unsigned int v16 = i + v18;
  }
  if (!v20)
  {
    if (v11)
    {
      uint64_t *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v12 = *a2;
      int v19 = v11;
    }
    CFRetain(*(CFTypeRef *)(v12 + 8));
    uint64_t v21 = *v19;
    *int v19 = v12;
    if (v21) {
      CFRelease(*(CFTypeRef *)(v21 + 8));
    }
    v19[1] = *a3;
    uint64_t v22 = *a1;
    if (*a1) {
      int v23 = *(_DWORD *)(v22 - 12) + 1;
    }
    else {
      int v23 = 1;
    }
    *(_DWORD *)(v22 - 12) = v23;
    uint64_t v27 = *a1;
    if (*a1) {
      int v28 = *(_DWORD *)(v27 - 12);
    }
    else {
      int v28 = 0;
    }
    uint64_t v29 = (*(_DWORD *)(v27 - 16) + v28);
    unint64_t v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 <= 2 * v29)
      {
LABEL_27:
        int v19 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(a1, v19);
        uint64_t v27 = *a1;
        if (*a1) {
          unint64_t v30 = *(unsigned int *)(v27 - 4);
        }
        else {
          unint64_t v30 = 0;
        }
      }
    }
    else if (3 * v30 <= 4 * v29)
    {
      goto LABEL_27;
    }
    uint64_t v26 = v27 + 16 * v30;
    char v25 = 1;
    goto LABEL_32;
  }
  if (v20 != v12) {
    goto LABEL_10;
  }
  if (v9) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *(unsigned int *)(v8 - 4);
  }
  char v25 = 0;
  uint64_t v26 = v8 + 16 * v24;
LABEL_32:
  *(void *)a4 = v19;
  *(void *)(a4 + 8) = v26;
  *(unsigned char *)(a4 + 16) = v25;
}

double *WebKit::WebExtensionContext::denyPermissionMatchPatterns(double *result, void **a2, int a3, double a4)
{
  double v13 = a4;
  if (*a2 && *((_DWORD *)*a2 - 3))
  {
    uint64_t v6 = (uint64_t)result;
    if (result[28] > a4) {
      result[28] = a4;
    }
    uint64_t v12 = 0;
    uint64_t result = (double *)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a2);
    uint64_t v7 = (uint64_t *)result;
    char v9 = v8;
    uint64_t v10 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
    if ((double *)v10 != result)
    {
      do
      {
        WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::add<WTF::WallTime&>((uint64_t *)(v6 + 208), v7, (uint64_t *)&v13, (uint64_t)v14);
        if (v14[16]) {
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v12, v7, (uint64_t)v14);
        }
        while (++v7 != v9)
        {
          if ((unint64_t)(*v7 + 1) > 1) {
            goto LABEL_15;
          }
        }
        uint64_t v7 = v9;
LABEL_15:
        ;
      }
      while (v7 != (uint64_t *)v10);
      uint64_t result = v12;
      if (v12)
      {
        if (!*((_DWORD *)v12 - 3)) {
          return (double *)WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)result, v11);
        }
        WebKit::WebExtensionContext::removeGrantedPermissionMatchPatterns(v6, (uint64_t *)&v12, a3);
        WebKit::WebExtensionContext::permissionsDidChange(v6, @"WKWebExtensionContextPermissionMatchPatternsWereDenied", (void **)&v12);
        uint64_t result = v12;
        if (v12) {
          return (double *)WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable((uint64_t *)result, v11);
        }
      }
    }
  }
  return result;
}

void sub_1993224FC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  if (a10) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::removePermissions(uint64_t a1, uint64_t *a2, uint64_t *a3, double *a4, void *a5)
{
  id v11 = a5;
  if (!*a3) {
    goto LABEL_43;
  }
  if (!*(_DWORD *)(*a3 - 12)) {
    goto LABEL_43;
  }
  *a4 = INFINITY;
  int8x16x2_t v39 = 0;
  uint64_t v12 = *a2;
  if (!*a2) {
    goto LABEL_43;
  }
  unsigned int v13 = *(_DWORD *)(v12 - 4);
  if (!v13) {
    goto LABEL_33;
  }
  uint64_t v37 = a1;
  int v38 = 0;
  do
  {
    unint64_t v14 = (const WTF::StringImpl **)(v12 + 16 * --v13);
    unint64_t v15 = *v14;
    if ((unint64_t)*v14 + 1 >= 2)
    {
      uint64_t v16 = *a3;
      if (*a3)
      {
        int v36 = *(_DWORD *)(v16 - 8);
        unsigned int v18 = *((_DWORD *)v15 + 4);
        if (v18 >= 0x100) {
          unsigned int v19 = v18 >> 8;
        }
        else {
          unsigned int v19 = WTF::StringImpl::hashSlowCase(v15);
        }
        for (i = 0; ; unsigned int v19 = i + v21)
        {
          int v21 = v19 & v36;
          uint64_t v22 = *(WTF **)(v16 + 8 * (v19 & v36));
          if (v22 != (WTF *)-1)
          {
            if (!v22) {
              goto LABEL_10;
            }
            int v35 = i;
            char v23 = WTF::equal(v22, *v14, v10);
            int i = v35;
            if (v23) {
              break;
            }
          }
          ++i;
        }
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v39, (WTF::StringImpl **)(v12 + 16 * v13), v10, (uint64_t)v40);
        WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)(v12 + 16 * v13), v24);
        ++v38;
      }
      else
      {
LABEL_10:
        double v17 = *(double *)(v12 + 16 * v13 + 8);
        if (v17 < *a4) {
          *a4 = v17;
        }
      }
    }
  }
  while (v13);
  uint64_t v25 = *a2;
  if (v38)
  {
    *(_DWORD *)(v25 - 16) += v38;
    uint64_t v26 = *a2;
    if (*a2) {
      int v27 = *(_DWORD *)(v26 - 12);
    }
    else {
      int v27 = 0;
    }
    a1 = v37;
    *(_DWORD *)(v26 - 12) = v27 - v38;
    uint64_t v25 = *a2;
    if (!*a2) {
      goto LABEL_33;
    }
  }
  else
  {
    a1 = v37;
    if (!v25) {
      goto LABEL_33;
    }
  }
  unsigned int v28 = *(_DWORD *)(v25 - 4);
  unsigned int v29 = 6 * *(_DWORD *)(v25 - 12);
  if (v28 >= 9 && v29 < v28) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::shrinkToBestSize(a2);
  }
LABEL_33:
  uint64_t v31 = v39;
  if (!v39)
  {
LABEL_43:
    uint64_t v33 = 0;
    goto LABEL_44;
  }
  if (v11) {
    BOOL v32 = *((_DWORD *)v39 - 3) == 0;
  }
  else {
    BOOL v32 = 1;
  }
  uint64_t v33 = !v32;
  if (v32 || (WebKit::WebExtensionContext::permissionsDidChange(a1, v11, &v39), (uint64_t v31 = v39) != 0)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v31, v9);
  }
  else {
    uint64_t v33 = 1;
  }
LABEL_44:

  return v33;
}

void sub_19932273C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl **a13)
{
  if (a13) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a13, a2);
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::removePermissionMatchPatterns(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, double *a5, void *a6)
{
  id v10 = a6;
  uint64_t v12 = v10;
  if (!*a3 || !*(_DWORD *)(*a3 - 12) || (*a5 = INFINITY, CFTypeRef v40 = 0, (v13 = *a2) == 0))
  {
LABEL_54:
    uint64_t v34 = 0;
    goto LABEL_55;
  }
  uint64_t v37 = a2;
  int v38 = a5;
  unsigned int v14 = *(_DWORD *)(v13 - 4);
  if (!v14) {
    goto LABEL_44;
  }
  id v36 = v10;
  int v15 = 0;
  do
  {
    uint64_t v16 = (uint64_t *)(v13 + 16 * --v14);
    id v11 = (unsigned __int8 **)*v16;
    if ((unint64_t)(*v16 + 1) < 2) {
      continue;
    }
    if (WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WebCore::Element const*>(*a3, (uint64_t)v11))
    {
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v40, (uint64_t *)(v13 + 16 * v14), (uint64_t)v42);
LABEL_9:
      double v17 = (CFTypeRef *)*v16;
      uint64_t *v16 = 0;
      if (v17) {
        CFRelease(v17[1]);
      }
      uint64_t *v16 = -1;
      ++v15;
      continue;
    }
    if (a4)
    {
      double v18 = *(double *)(v13 + 16 * v14 + 8);
      if (v18 < *v38) {
        double *v38 = v18;
      }
    }
    else
    {
      unsigned int v19 = (unsigned __int8 **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)a3);
      uint64_t v20 = v19;
      int v21 = v11;
      if (*a3) {
        uint64_t v22 = *a3 + 8 * *(unsigned int *)(*a3 - 4);
      }
      else {
        uint64_t v22 = 0;
      }
      if ((unsigned __int8 **)v22 != v19)
      {
        while (1)
        {
          uint64_t v23 = *v16;
          CFRetain(*(CFTypeRef *)(*v16 + 8));
          uint64_t v41 = v23;
          if (WebKit::WebExtensionMatchPattern::matchesPattern(*v20, (unsigned __int8 *)v23, 2)) {
            break;
          }
          CFRelease(*(CFTypeRef *)(v23 + 8));
          while (++v20 != v21)
          {
            if ((unint64_t)(*v20 + 1) > 1) {
              goto LABEL_25;
            }
          }
          uint64_t v20 = v21;
LABEL_25:
          if (v20 == (unsigned __int8 **)v22) {
            goto LABEL_26;
          }
        }
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v40, &v41, (uint64_t)v42);
        uint64_t v25 = v41;
        uint64_t v41 = 0;
        if (v25) {
          CFRelease(*(CFTypeRef *)(v25 + 8));
        }
        goto LABEL_9;
      }
LABEL_26:
      double v24 = *(double *)(v13 + 16 * v14 + 8);
      if (v24 < *v38) {
        double *v38 = v24;
      }
    }
  }
  while (v14);
  uint64_t v26 = *v37;
  if (v15)
  {
    *(_DWORD *)(v26 - 16) += v15;
    uint64_t v27 = *v37;
    if (*v37) {
      int v28 = *(_DWORD *)(v27 - 12);
    }
    else {
      int v28 = 0;
    }
    uint64_t v12 = v36;
    *(_DWORD *)(v27 - 12) = v28 - v15;
    uint64_t v26 = *v37;
    if (*v37) {
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v12 = v36;
    if (v26)
    {
LABEL_39:
      unsigned int v29 = *(_DWORD *)(v26 - 4);
      unsigned int v30 = 6 * *(_DWORD *)(v26 - 12);
      if (v29 >= 9 && v30 < v29) {
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::shrinkToBestSize(v37);
      }
    }
  }
LABEL_44:
  BOOL v32 = v40;
  if (!v40) {
    goto LABEL_54;
  }
  if (v12) {
    BOOL v33 = *((_DWORD *)v40 - 3) == 0;
  }
  else {
    BOOL v33 = 1;
  }
  uint64_t v34 = !v33;
  if (v33 || (WebKit::WebExtensionContext::permissionsDidChange(a1, v12, &v40), (BOOL v32 = v40) != 0)) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v32, v11);
  }
  else {
    uint64_t v34 = 1;
  }
LABEL_55:

  return v34;
}

void sub_199322A20(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  if (a14) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a14, a2);
  }

  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::requestPermissionMatchPatterns(uint64_t a1, void **a2, WebKit::WebExtensionTab **a3, uint64_t *a4, char a5, char a6)
{
  uint64_t v50 = 0;
  uint64_t v12 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a2);
  uint64_t v13 = v12;
  int v15 = v14;
  if (*a2) {
    uint64_t v16 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  }
  else {
    uint64_t v16 = 0;
  }
  if ((uint64_t *)v16 != v12)
  {
    do
    {
      if (((WebKit::WebExtensionContext::permissionState(a1, *v13, *a3, a6) + 1) & 0xFD) == 0) {
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v50, v13, (uint64_t)&v46);
      }
      while (++v13 != v15)
      {
        if ((unint64_t)(*v13 + 1) > 1) {
          goto LABEL_11;
        }
      }
      uint64_t v13 = v15;
LABEL_11:
      ;
    }
    while (v13 != (uint64_t *)v16);
  }
  uint64_t v17 = *(void *)(a1 + 72);
  if (v17 && (uint64_t v18 = *(void *)(v17 + 8)) != 0 && v50 && *((_DWORD *)v50 - 3))
  {
    unsigned int v19 = WebKit::WebExtensionController::delegate((id *)(v18 - 16));
    if (objc_opt_respondsToSelector())
    {
      int v46 = (uint64_t *)a1;
      CFRetain(*(CFTypeRef *)(a1 + 8));
      *(void *)&long long v47 = a1;
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v47 + 1, &v50);
      char v48 = a5;
      uint64_t v20 = *a4;
      *a4 = 0;
      uint64_t v49 = v20;
      ++*(void *)(a1 + 264);
      uint64_t v21 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)uint64_t v21 = 1;
      uint64_t v22 = WTF::fastMalloc((WTF *)0x30);
      *(void *)uint64_t v22 = &unk_1EE9FEE68;
      *(void *)(v22 + 8) = v46;
      *(void *)(v22 + 16) = v47;
      uint64_t v23 = *((void *)&v47 + 1);
      long long v47 = 0u;
      *(void *)(v22 + 24) = v23;
      *(unsigned char *)(v22 + 32) = v48;
      uint64_t v24 = v49;
      uint64_t v49 = 0;
      *(void *)(v22 + 40) = v24;
      *(void *)(v21 + 8) = v22;
      *(_OWORD *)(v21 + 16) = 0u;
      dispatch_time_t v25 = dispatch_time(0, 120000000000);
      ++*(_DWORD *)v21;
      uint64_t v26 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
      *uint64_t v26 = MEMORY[0x1E4F14398];
      v26[1] = 50331650;
      v26[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void *)#1}::__invoke;
      v26[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::descriptor;
      v26[4] = v21;
      uint64_t v27 = _Block_copy(v26);

      int v28 = _Block_copy(v27);
      dispatch_after(v25, MEMORY[0x1E4F14428], v28);

      uint64_t v29 = *(void *)(a1 + 72);
      if (v29)
      {
        uint64_t v30 = *(void *)(v29 + 8);
        if (v30) {
          uint64_t v31 = (id *)(v30 - 16);
        }
        else {
          uint64_t v31 = 0;
        }
      }
      else
      {
        uint64_t v31 = 0;
      }
      uint64_t v34 = WebKit::WebExtensionAction::wrapper(v31);
      int v35 = WebKit::toAPI(&v50);
      id v36 = *a3;
      if (*a3) {
        id WeakRetained = objc_loadWeakRetained((id *)v36 + 4);
      }
      else {
        id WeakRetained = 0;
      }
      int v38 = WebKit::WebExtensionAction::wrapper((id *)a1);
      ++*(_DWORD *)v21;
      int8x16x2_t v39 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
      *int8x16x2_t v39 = MEMORY[0x1E4F14398];
      v39[1] = 50331650;
      void v39[2] = WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void *,NSSet *,NSDate *)#1}::__invoke;
      v39[3] = &WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::descriptor;
      void v39[4] = v21;
      CFTypeRef v40 = _Block_copy(v39);

      uint64_t v41 = _Block_copy(v40);
      [v19 webExtensionController:v34 promptForPermissionMatchPatterns:v35 inTab:WeakRetained forExtensionContext:v38 completionHandler:v41];

      if (v36) {
      WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref((_DWORD *)v21);
      }
      uint64_t v43 = v49;
      uint64_t v49 = 0;
      if (v43) {
        (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
      }
      if (*((void *)&v47 + 1)) {
        WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(*((uint64_t **)&v47 + 1), v42);
      }
      uint64_t v44 = v47;
      *(void *)&long long v47 = 0;
      if (v44) {
        CFRelease(*(CFTypeRef *)(v44 + 8));
      }
    }
    else
    {
      int v46 = 0;
      WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> &,WTF::WallTime)>::operator()(a4);
      if (v46) {
        WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v46, v33);
      }
    }
  }
  else
  {
    int v46 = 0;
    WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> &,WTF::WallTime)>::operator()(a4);
    if (v46) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v46, v32);
    }
  }
  uint64_t result = v50;
  if (v50) {
    return (void *)WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v50, v32);
  }
  return result;
}

void sub_199322EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  uint64_t v23 = v15;

  if (v22) {
  WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(v16);
  }
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (a11) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a11, v25);
  }
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }

  if (a14) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a14, v26);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> &,WTF::WallTime)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1993230A0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl **WebKit::WebExtensionContext::requestPermissionToAccessURLs(uint64_t a1, uint64_t *a2, URL **a3, uint64_t *a4, char a5, char a6)
{
  uint64_t v61 = 0;
  unsigned int v6 = *((_DWORD *)a2 + 3);
  if (v6)
  {
    uint64_t v7 = *a2;
    uint64_t v60 = *a2 + 40 * v6;
    while (1)
    {
      if ((*(unsigned char *)(v7 + 8) & 2) == 0
        || ((WebKit::WebExtensionContext::permissionState(a1, (URL *)v7, *a3, a6) + 1) & 0xFD) != 0)
      {
        goto LABEL_5;
      }
      uint64_t v8 = v61;
      if (v61
        || (WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::expand((uint64_t *)&v61, 0), (uint64_t v8 = v61) != 0))
      {
        int v9 = *((_DWORD *)v8 - 2);
      }
      else
      {
        int v9 = 0;
      }
      unsigned int v10 = *(_DWORD *)(*(void *)v7 + 16);
      if (v10 >= 0x100) {
        unsigned int v11 = v10 >> 8;
      }
      else {
        unsigned int v11 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v7);
      }
      unsigned int v12 = v11 & v9;
      uint64_t v13 = &v8[5 * (v11 & v9)];
      if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v13) & 1) == 0)
      {
        int v15 = 0;
        int v16 = 1;
        while (1)
        {
          uint64_t v17 = v13;
          if (*v13 != (WTF *)-1)
          {
            uint64_t v17 = v15;
            if (WTF::equal(*v13, *(const WTF::StringImpl **)v7, v14)) {
              goto LABEL_5;
            }
          }
          unsigned int v12 = (v12 + v16) & v9;
          uint64_t v13 = &v8[5 * v12];
          ++v16;
          int v15 = v17;
          if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v13))
          {
            if (v17)
            {
              v17[4] = 0;
              *(_OWORD *)uint64_t v17 = 0u;
              *((_OWORD *)v17 + 1) = 0u;
              --*((_DWORD *)v61 - 4);
              uint64_t v13 = v17;
            }
            break;
          }
        }
      }
      uint64_t v18 = *(WTF::StringImpl **)v7;
      if (*(void *)v7) {
        *(_DWORD *)v18 += 2;
      }
      uint64_t v62 = v18;
      long long v19 = *(_OWORD *)(v7 + 24);
      long long v63 = *(_OWORD *)(v7 + 8);
      long long v64 = v19;
      WTF::URL::operator=((uint64_t)v13, (uint64_t)&v62);
      uint64_t v21 = v62;
      uint64_t v62 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v20);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      int v22 = v61 ? *((_DWORD *)v61 - 3) + 1 : 1;
      *((_DWORD *)v61 - 3) = v22;
      int v23 = v61 ? *((_DWORD *)v61 - 3) : 0;
      uint64_t v24 = (*((_DWORD *)v61 - 4) + v23);
      unint64_t v25 = *((unsigned int *)v61 - 1);
      if (v25 > 0x400) {
        break;
      }
      if (3 * v25 <= 4 * v24) {
        goto LABEL_34;
      }
LABEL_5:
      v7 += 40;
      if (v7 == v60) {
        goto LABEL_38;
      }
    }
    if (v25 > 2 * v24) {
      goto LABEL_5;
    }
LABEL_34:
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::expand((uint64_t *)&v61, v13);
    goto LABEL_5;
  }
LABEL_38:
  uint64_t v26 = *(void *)(a1 + 72);
  if (v26 && (uint64_t v27 = *(void *)(v26 + 8)) != 0 && v61 && *((_DWORD *)v61 - 3))
  {
    int v28 = WebKit::WebExtensionController::delegate((id *)(v27 - 16));
    if (objc_opt_respondsToSelector())
    {
      uint64_t v62 = (WTF::StringImpl *)a1;
      CFRetain(*(CFTypeRef *)(a1 + 8));
      *(void *)&long long v63 = a1;
      WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::HashTable((uint64_t *)&v63 + 1, (uint64_t *)&v61);
      LOBYTE(v64) = a5;
      uint64_t v29 = *a4;
      *a4 = 0;
      *((void *)&v64 + 1) = v29;
      ++*(void *)(a1 + 264);
      uint64_t v30 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)uint64_t v30 = 1;
      uint64_t v31 = WTF::fastMalloc((WTF *)0x30);
      *(void *)uint64_t v31 = &unk_1EE9FEE90;
      *(void *)(v31 + 8) = v62;
      *(void *)(v31 + 16) = v63;
      uint64_t v32 = *((void *)&v63 + 1);
      long long v63 = 0u;
      *(void *)(v31 + 24) = v32;
      *(unsigned char *)(v31 + 32) = v64;
      uint64_t v33 = *((void *)&v64 + 1);
      *((void *)&v64 + 1) = 0;
      *(void *)(v31 + 40) = v33;
      *(void *)(v30 + 8) = v31;
      *(_OWORD *)(v30 + 16) = 0u;
      dispatch_time_t v34 = dispatch_time(0, 120000000000);
      ++*(_DWORD *)v30;
      int v35 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
      *int v35 = MEMORY[0x1E4F14398];
      v35[1] = 50331650;
      void v35[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void *)#1}::__invoke;
      v35[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::descriptor;
      v35[4] = v30;
      id v36 = _Block_copy(v35);

      uint64_t v37 = _Block_copy(v36);
      dispatch_after(v34, MEMORY[0x1E4F14428], v37);

      uint64_t v38 = *(void *)(a1 + 72);
      if (v38)
      {
        uint64_t v39 = *(void *)(v38 + 8);
        if (v39) {
          CFTypeRef v40 = (id *)(v39 - 16);
        }
        else {
          CFTypeRef v40 = 0;
        }
      }
      else
      {
        CFTypeRef v40 = 0;
      }
      uint64_t v43 = WebKit::WebExtensionAction::wrapper(v40);
      uint64_t v44 = WebKit::toAPI((uint64_t *)&v61);
      unsigned int v45 = *a3;
      if (*a3) {
        id WeakRetained = objc_loadWeakRetained((id *)&v45->m_pathEnd);
      }
      else {
        id WeakRetained = 0;
      }
      long long v47 = WebKit::WebExtensionAction::wrapper((id *)a1);
      ++*(_DWORD *)v30;
      char v48 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
      void *v48 = MEMORY[0x1E4F14398];
      v48[1] = 50331650;
      void v48[2] = WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void *,NSSet *,NSDate *)#1}::__invoke;
      v48[3] = &WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::descriptor;
      v48[4] = v30;
      uint64_t v49 = _Block_copy(v48);

      uint64_t v50 = _Block_copy(v49);
      [v28 webExtensionController:v43 promptForPermissionToAccessURLs:v44 inTab:WeakRetained forExtensionContext:v47 completionHandler:v50];

      if (v45) {
      WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref((_DWORD *)v30);
      }
      uint64_t v52 = *((void *)&v64 + 1);
      *((void *)&v64 + 1) = 0;
      if (v52) {
        (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
      }
      if (*((void *)&v63 + 1)) {
        WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(*((WTF::StringImpl ***)&v63 + 1), v51);
      }
      uint64_t v53 = v63;
      *(void *)&long long v63 = 0;
      if (v53) {
        CFRelease(*(CFTypeRef *)(v53 + 8));
      }
    }
    else
    {
      uint64_t v62 = 0;
      WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)>::operator()(a4);
      if (v62) {
        WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable((WTF::StringImpl **)v62, v42);
      }
    }
  }
  else
  {
    uint64_t v62 = 0;
    WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)>::operator()(a4);
    if (v62) {
      WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable((WTF::StringImpl **)v62, v41);
    }
  }
  uint64_t result = v61;
  if (v61) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(v61, v41);
  }
  return result;
}

void sub_1993236B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl **a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl **a20,uint64_t a21,uint64_t a22)
{
  uint64_t v31 = v23;

  if (v30) {
  WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(v25);
  }
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  }
  if (a20) {
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(a20, v33);
  }
  if (a19) {
    CFRelease(*(CFTypeRef *)(a19 + 8));
  }

  if (a17) {
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(a17, v34);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_199323888(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::requestPermissions(uint64_t a1, void **a2, WebKit::WebExtensionTab **a3, uint64_t *a4, char a5, char a6)
{
  CFTypeRef v51 = 0;
  unsigned int v12 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  uint64_t v13 = v12;
  int v15 = v14;
  if (*a2) {
    uint64_t v16 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  }
  else {
    uint64_t v16 = 0;
  }
  if ((WTF::StringImpl **)v16 != v12)
  {
    do
    {
      if (((WebKit::WebExtensionContext::permissionState((WTF::StringImpl *)a1, v13, *a3, a6) + 1) & 0xFD) == 0) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v51, v13, v17, (uint64_t)&v47);
      }
      while (++v13 != v15)
      {
        if ((unint64_t)*v13 + 1 > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v13 = v15;
LABEL_10:
      ;
    }
    while (v13 != (WTF::StringImpl **)v16);
  }
  uint64_t v18 = *(void *)(a1 + 72);
  if (v18 && (uint64_t v19 = *(void *)(v18 + 8)) != 0 && v51 && *((_DWORD *)v51 - 3))
  {
    uint64_t v20 = WebKit::WebExtensionController::delegate((id *)(v19 - 16));
    if (objc_opt_respondsToSelector())
    {
      long long v47 = (WTF::StringImpl **)a1;
      CFRetain(*(CFTypeRef *)(a1 + 8));
      *(void *)&long long v48 = a1;
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v48 + 1, &v51);
      char v49 = a5;
      uint64_t v21 = *a4;
      *a4 = 0;
      uint64_t v50 = v21;
      ++*(void *)(a1 + 264);
      uint64_t v22 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)uint64_t v22 = 1;
      uint64_t v23 = WTF::fastMalloc((WTF *)0x30);
      *(void *)uint64_t v23 = &unk_1EE9FEEB8;
      *(void *)(v23 + 8) = v47;
      *(void *)(v23 + 16) = v48;
      uint64_t v24 = *((void *)&v48 + 1);
      long long v48 = 0u;
      *(void *)(v23 + 24) = v24;
      *(unsigned char *)(v23 + 32) = v49;
      uint64_t v25 = v50;
      uint64_t v50 = 0;
      *(void *)(v23 + 40) = v25;
      *(void *)(v22 + 8) = v23;
      *(_OWORD *)(v22 + 16) = 0u;
      dispatch_time_t v26 = dispatch_time(0, 120000000000);
      ++*(_DWORD *)v22;
      uint64_t v27 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
      void *v27 = MEMORY[0x1E4F14398];
      v27[1] = 50331650;
      _OWORD v27[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void *)#1}::__invoke;
      v27[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::descriptor;
      void v27[4] = v22;
      int v28 = _Block_copy(v27);

      uint64_t v29 = _Block_copy(v28);
      dispatch_after(v26, MEMORY[0x1E4F14428], v29);

      uint64_t v30 = *(void *)(a1 + 72);
      if (v30)
      {
        uint64_t v31 = *(void *)(v30 + 8);
        if (v31) {
          uint64_t v32 = (id *)(v31 - 16);
        }
        else {
          uint64_t v32 = 0;
        }
      }
      else
      {
        uint64_t v32 = 0;
      }
      id v36 = WebKit::WebExtensionAction::wrapper(v32);
      uint64_t v37 = WebKit::toAPI(&v51);
      uint64_t v38 = *a3;
      if (*a3) {
        id WeakRetained = objc_loadWeakRetained((id *)v38 + 4);
      }
      else {
        id WeakRetained = 0;
      }
      CFTypeRef v40 = WebKit::WebExtensionAction::wrapper((id *)a1);
      ++*(_DWORD *)v22;
      uint64_t v41 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
      void *v41 = MEMORY[0x1E4F14398];
      v41[1] = 50331650;
      void v41[2] = WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void *,NSSet *,NSDate *)#1}::__invoke;
      v41[3] = &WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::descriptor;
      v41[4] = v22;
      int v42 = _Block_copy(v41);

      uint64_t v43 = _Block_copy(v42);
      [v20 webExtensionController:v36 promptForPermissions:v37 inTab:WeakRetained forExtensionContext:v40 completionHandler:v43];

      if (v38) {
      WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref((_DWORD *)v22);
      }
      uint64_t v45 = v50;
      uint64_t v50 = 0;
      if (v45) {
        (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
      }
      if (*((void *)&v48 + 1)) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v48 + 1), v44);
      }
      uint64_t v46 = v48;
      *(void *)&long long v48 = 0;
      if (v46) {
        CFRelease(*(CFTypeRef *)(v46 + 8));
      }
    }
    else
    {
      long long v47 = 0;
      WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> &,WTF::WallTime)>::operator()(a4);
      if (v47) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v47, v35);
      }
    }
  }
  else
  {
    long long v47 = 0;
    WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> &,WTF::WallTime)>::operator()(a4);
    if (v47) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v47, v33);
    }
  }
  uint64_t result = v51;
  if (v51) {
    return (void *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v51, v33);
  }
  return result;
}

void sub_199323D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WTF::StringImpl **a11, uint64_t a12, uint64_t a13, WTF::StringImpl **a14)
{
  uint64_t v23 = v15;

  if (v22) {
  WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(v16);
  }
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (a11) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a11, v25);
  }
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }

  if (a14) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a14, v26);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> &,WTF::WallTime)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_199323EF8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::permissionState(WTF::StringImpl *HasTemporaryPermission, WTF **a2, WebKit::WebExtensionTab *a3, char a4)
{
  uint64_t v6 = (uint64_t)HasTemporaryPermission;
  if (!a3) {
    goto LABEL_10;
  }
  MEMORY[0x19972EAD0](&v36, @"tabs");
  int v10 = WTF::equal(*a2, v36, v8);
  HasTemporaryPermissioint n = v36;
  id v36 = 0;
  if (!HasTemporaryPermission) {
    goto LABEL_5;
  }
  if (*(_DWORD *)HasTemporaryPermission != 2)
  {
    *(_DWORD *)HasTemporaryPermission -= 2;
LABEL_5:
    if (!v10) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  HasTemporaryPermissioint n = (WTF::StringImpl *)WTF::StringImpl::destroy(HasTemporaryPermission, v9);
  if (!v10) {
    goto LABEL_10;
  }
LABEL_8:
  HasTemporaryPermissioint n = (WTF::StringImpl *)WebKit::WebExtensionTab::extensionHasTemporaryPermission(a3);
  if (HasTemporaryPermission) {
    return 3;
  }
LABEL_10:
  uint64_t v13 = *WebKit::WebExtension::supportedPermissions(HasTemporaryPermission);
  if (!v13) {
    return 0;
  }
  char v15 = a4;
  int v16 = *(_DWORD *)(v13 - 8);
  unsigned int v17 = *((_DWORD *)*a2 + 4);
  if (v17 >= 0x100) {
    unsigned int v18 = v17 >> 8;
  }
  else {
    unsigned int v18 = WTF::StringImpl::hashSlowCase(*a2);
  }
  for (int i = 0; ; v18 = i + v20)
  {
    int v20 = v18 & v16;
    uint64_t v21 = *(WTF **)(v13 + 8 * (v18 & v16));
    if (v21 != (WTF *)-1)
    {
      if (!v21) {
        return 0;
      }
      if (WTF::equal(v21, *a2, v12)) {
        break;
      }
    }
    ++i;
  }
  WebKit::WebExtensionContext::removeExpired(v6, (uint64_t *)(v6 + 176), (double *)(v6 + 192), @"WKWebExtensionContextDeniedPermissionsWereRemoved");
  if (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v6 + 176), a2, v22))return -3; {
  WebKit::WebExtensionContext::removeExpired(v6, (uint64_t *)(v6 + 168), (double *)(v6 + 184), @"WKWebExtensionContextGrantedPermissionsWereRemoved");
  }
  if (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v6 + 168), a2, v23))return 3; {
  if ((v15 & 2) != 0)
  }
    return 0;
  uint64_t v24 = *(WebKit::WebExtension **)(v6 + 64);
  if (*a2) {
    uint64_t v25 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v25 = &stru_1EEA10550;
  }
  hasRequestedPermissioint n = WebKit::WebExtension::hasRequestedPermission(v24, &v25->isa);

  if (hasRequestedPermission) {
    return 1;
  }
  if ((v15 & 4) == 0) {
    return 0;
  }
  uint64_t v27 = *(WebKit::WebExtension **)(v6 + 64);
  WebKit::WebExtension::populatePermissionsPropertiesIfNeeded(v27);
  uint64_t v29 = *((void *)v27 + 14);
  if (!v29) {
    return 0;
  }
  int v30 = *(_DWORD *)(v29 - 8);
  unsigned int v31 = *((_DWORD *)*a2 + 4);
  if (v31 >= 0x100) {
    unsigned int v32 = v31 >> 8;
  }
  else {
    unsigned int v32 = WTF::StringImpl::hashSlowCase(*a2);
  }
  for (int j = 0; ; v32 = j + v34)
  {
    int v34 = v32 & v30;
    int v35 = *(WTF **)(v29 + 8 * (v32 & v30));
    if (v35 != (WTF *)-1)
    {
      if (!v35) {
        return 0;
      }
      if (WTF::equal(v35, *a2, v28)) {
        break;
      }
    }
    ++j;
  }
  return -1;
}

void sub_19932416C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::permissionState(uint64_t a1, URL *a2, URL *a3, char a4)
{
  if (!a2->m_string.m_impl.m_ptr || !*((_DWORD *)a2->m_string.m_impl.m_ptr + 1)) {
    goto LABEL_19;
  }
  uint64_t v7 = a1;
  if (*((unsigned char *)a2 + 8))
  {
    a1 = WTF::protocolHostAndPortAreEqual((WTF *)(a1 + 80), a2, a3);
    if (a1)
    {
      LOBYTE(v8) = 2;
      return (char)v8;
    }
  }
  int v9 = WebKit::WebExtensionMatchPattern::validSchemes((WebKit::WebExtensionMatchPattern *)a1);
  v89[0] = (void *)WTF::URL::protocol((WTF::URL *)a2);
  v89[1] = v10;
  WTF::StringView::toStringWithoutCopying((uint64_t)v89, v90);
  uint64_t v13 = *v9;
  unsigned int v14 = v90[0];
  if (v13)
  {
    int v73 = *(_DWORD *)(v13 - 8);
    unsigned int v74 = *((_DWORD *)v90[0] + 4);
    if (v74 >= 0x100) {
      unsigned int v75 = v74 >> 8;
    }
    else {
      unsigned int v75 = WTF::StringImpl::hashSlowCase(v90[0]);
    }
    for (i = 0; ; unsigned int v75 = i + v78)
    {
      int v78 = v75 & v73;
      uint64_t v79 = *(WTF **)(v13 + 8 * (v75 & v73));
      if (v79 != (WTF *)-1)
      {
        if (!v79)
        {
          LOBYTE(v13) = 0;
          goto LABEL_141;
        }
        if (WTF::equal(v79, v90[0], v12)) {
          break;
        }
      }
      ++i;
    }
    LOBYTE(v13) = 1;
LABEL_141:
    unsigned int v14 = v90[0];
  }
  v90[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v11);
      if (v13) {
        goto LABEL_11;
      }
LABEL_19:
      LOBYTE(v8) = 0;
      return (char)v8;
    }
    *(_DWORD *)v14 -= 2;
  }
  if ((v13 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_11:
  if (a3)
  {
    m_ptr = a3[1].m_string.m_impl.m_ptr;
    if (m_ptr)
    {
      CFRetain(*((CFTypeRef *)m_ptr + 1));
      char v16 = WebKit::WebExtensionMatchPattern::matchesURL(m_ptr, (WTF::URL *)a2, 0);
      CFRelease(*((CFTypeRef *)m_ptr + 1));
      if (v16)
      {
        LOBYTE(v8) = 3;
        return (char)v8;
      }
    }
  }
  char v82 = a4;
  __int16 v84 = (void **)(v7 + 200);
  WebKit::WebExtensionContext::removeExpired(v7, (uint64_t *)(v7 + 200), (double *)(v7 + 216), @"WKWebExtensionContextGrantedPermissionMatchPatternsWereRemoved");
  uint64_t v85 = (void **)(v7 + 208);
  WebKit::WebExtensionContext::removeExpired(v7, (uint64_t *)(v7 + 208), (double *)(v7 + 224), @"WKWebExtensionContextDeniedPermissionMatchPatternsWereRemoved");
  uint64_t v18 = *(void *)(v7 + 232);
  if (!v18)
  {
LABEL_41:
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZN6WebKit19WebExtensionContext15permissionStateERKN3WTF3URLEPNS_15WebExtensionTabENS1_9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke;
    aBlock[3] = &__block_descriptor_48_e8_c12__0c8l;
    aBlock[4] = v7;
    aBlock[5] = a2;
    uint64_t v83 = _Block_copy(aBlock);
    v87[0] = MEMORY[0x1E4F143A8];
    v87[1] = 3221225472;
    v87[2] = ___ZN6WebKit19WebExtensionContext15permissionStateERKN3WTF3URLEPNS_15WebExtensionTabENS1_9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke_2;
    v87[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v87[4] = a2;
    int v34 = (unsigned int (**)(void *, void))_Block_copy(v87);
    int v35 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v85);
    id v36 = v35;
    uint64_t v38 = v37;
    if (*v85) {
      uint64_t v39 = (uint64_t)&(*v85)[2 * *((unsigned int *)*v85 - 1)];
    }
    else {
      uint64_t v39 = 0;
    }
    if ((void *)v39 != v35)
    {
      while (!v34[2](v34, *v36))
      {
        while (1)
        {
          v36 += 2;
          if (v36 == v38) {
            break;
          }
          if ((unint64_t)(*v36 + 1) > 1) {
            goto LABEL_50;
          }
        }
        id v36 = v38;
LABEL_50:
        if (v36 == (void *)v39) {
          goto LABEL_51;
        }
      }
      uint64_t v45 = (uint64_t (**)(void, void))v83;
      char v46 = (*((uint64_t (**)(void *, uint64_t))v83 + 2))(v83, 4294967293);
      goto LABEL_65;
    }
LABEL_51:
    CFTypeRef v40 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v84);
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    if (*v84) {
      uint64_t v44 = (uint64_t)&(*v84)[2 * *((unsigned int *)*v84 - 1)];
    }
    else {
      uint64_t v44 = 0;
    }
    if ((void *)v44 != v40)
    {
      while (!v34[2](v34, *v41))
      {
        while (1)
        {
          v41 += 2;
          if (v41 == v43) {
            break;
          }
          if ((unint64_t)(*v41 + 1) > 1) {
            goto LABEL_61;
          }
        }
        uint64_t v41 = v43;
LABEL_61:
        if (v41 == (void *)v44) {
          goto LABEL_62;
        }
      }
      uint64_t v45 = (uint64_t (**)(void, void))v83;
      char v46 = (*((uint64_t (**)(void *, uint64_t))v83 + 2))(v83, 3);
LABEL_65:
      LOBYTE(v8) = v46;
LABEL_97:

      return (char)v8;
    }
LABEL_62:
    v86[0] = MEMORY[0x1E4F143A8];
    v86[1] = 3221225472;
    v86[2] = ___ZN6WebKit19WebExtensionContext15permissionStateERKN3WTF3URLEPNS_15WebExtensionTabENS1_9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke_3;
    v86[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v86[4] = a2;
    long long v47 = (unsigned int (**)(void *, void))_Block_copy(v86);
    long long v48 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v85);
    char v49 = v48;
    CFTypeRef v51 = v50;
    char v81 = a4;
    if (*v85) {
      uint64_t v52 = (uint64_t)&(*v85)[2 * *((unsigned int *)*v85 - 1)];
    }
    else {
      uint64_t v52 = 0;
    }
    if ((void *)v52 != v48)
    {
      while (!v47[2](v47, *v49))
      {
        while (1)
        {
          v49 += 2;
          if (v49 == v51) {
            break;
          }
          if ((unint64_t)(*v49 + 1) > 1) {
            goto LABEL_78;
          }
        }
        char v49 = v51;
LABEL_78:
        if (v49 == (void *)v52) {
          goto LABEL_79;
        }
      }
      uint64_t v45 = (uint64_t (**)(void, void))v83;
      char v58 = (*((uint64_t (**)(void *, uint64_t))v83 + 2))(v83, 4294967294);
      goto LABEL_95;
    }
LABEL_79:
    uint64_t v53 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v84);
    uint64_t v54 = v53;
    char v56 = v55;
    if (*v84) {
      uint64_t v57 = (uint64_t)&(*v84)[2 * *((unsigned int *)*v84 - 1)];
    }
    else {
      uint64_t v57 = 0;
    }
    if ((void *)v57 != v53)
    {
      while (!v47[2](v47, *v54))
      {
        while (1)
        {
          v54 += 2;
          if (v54 == v56) {
            break;
          }
          if ((unint64_t)(*v54 + 1) > 1) {
            goto LABEL_89;
          }
        }
        uint64_t v54 = v56;
LABEL_89:
        if (v54 == (void *)v57) {
          goto LABEL_90;
        }
      }
      uint64_t v45 = (uint64_t (**)(void, void))v83;
      char v58 = (*((uint64_t (**)(void *, uint64_t))v83 + 2))(v83, 2);
      goto LABEL_95;
    }
LABEL_90:
    if ((v82 & 2) != 0)
    {
      uint64_t v45 = (uint64_t (**)(void, void))v83;
      char v58 = (*((uint64_t (**)(void *, void))v83 + 2))(v83, 0);
LABEL_95:
      LOBYTE(v8) = v58;
LABEL_96:

      goto LABEL_97;
    }
    WebKit::WebExtension::allRequestedMatchPatterns(*(WebKit::WebExtension **)(v7 + 64), (uint64_t *)v89);
    uint64_t v59 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(v89);
    uint64_t v60 = v59;
    uint64_t v62 = v61;
    if (v89[0]) {
      long long v63 = &v89[0][*((unsigned int *)v89[0] - 1)];
    }
    else {
      long long v63 = 0;
    }
    if (v63 == v59)
    {
LABEL_107:
      MEMORY[0x19972EAD0](v90, @"webNavigation");
      int v65 = WebKit::WebExtensionContext::permissionState((WTF::StringImpl *)v7, v90, (WebKit::WebExtensionTab *)a3, v81 | 2u) & 0xFFFFFFFE;
      uint64_t v66 = v90[0];
      v90[0] = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2) {
          WTF::StringImpl::destroy(v66, v64);
        }
        else {
          *(_DWORD *)v66 -= 2;
        }
      }
      if (v65 == 2)
      {
        char v70 = -1;
        uint64_t v45 = (uint64_t (**)(void, void))v83;
      }
      else
      {
        if (v82)
        {
          MEMORY[0x19972EAD0](v90, @"tabs");
          int v71 = WebKit::WebExtensionContext::permissionState((WTF::StringImpl *)v7, v90, (WebKit::WebExtensionTab *)a3, v81 | 2u) & 0xFFFFFFFE;
          uint64_t v72 = v90[0];
          v90[0] = 0;
          if (v72)
          {
            if (*(_DWORD *)v72 == 2) {
              WTF::StringImpl::destroy(v72, v69);
            }
            else {
              *(_DWORD *)v72 -= 2;
            }
          }
          if (v71 == 2)
          {
            LOBYTE(v8) = -1;
            uint64_t v45 = (uint64_t (**)(void, void))v83;
            goto LABEL_131;
          }
        }
        uint64_t v45 = (uint64_t (**)(void, void))v83;
        if ((v82 & 4) != 0
          && (uint64_t v76 = *(WebKit::WebExtension **)(v7 + 64),
              WebKit::WebExtension::populatePermissionsPropertiesIfNeeded(v76),
              (WebKit::WebExtensionMatchPattern::patternsMatchURL((void **)v76 + 12, (WTF::URL *)a2) & 1) != 0))
        {
          char v70 = -1;
        }
        else
        {
          char v70 = 0;
        }
      }
      char v68 = v45[2](v45, v70);
    }
    else
    {
      while (1)
      {
        if (v34[2](v34, *v60))
        {
          char v67 = 1;
          goto LABEL_112;
        }
        if (((uint64_t (*)(void *, void))v47[2])(v47, *v60)) {
          break;
        }
        while (++v60 != v62)
        {
          if ((unint64_t)(*v60 + 1) > 1) {
            goto LABEL_106;
          }
        }
        uint64_t v60 = v62;
LABEL_106:
        if (v60 == v63) {
          goto LABEL_107;
        }
      }
      char v67 = -1;
LABEL_112:
      uint64_t v45 = (uint64_t (**)(void, void))v83;
      char v68 = (*((uint64_t (**)(void *, void))v83 + 2))(v83, v67);
    }
    LOBYTE(v8) = v68;
LABEL_131:
    if (v89[0]) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v89[0], v69);
    }
    goto LABEL_96;
  }
  int v19 = *(_DWORD *)(v18 - 8);
  unsigned int v20 = *((_DWORD *)a2->m_string.m_impl.m_ptr + 4);
  if (v20 >= 0x100) {
    unsigned int v21 = v20 >> 8;
  }
  else {
    unsigned int v21 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)a2->m_string.m_impl.m_ptr);
  }
  for (int j = 0; ; v21 = j + v24)
  {
    int v24 = v21 & v19;
    uint64_t v25 = *(WTF ***)(v18 + 8 * (v21 & v19));
    if (v25 != (WTF **)-1)
    {
      if (!v25) {
        goto LABEL_41;
      }
      if (WTF::equal(*v25, (const WTF::StringImpl *)a2->m_string.m_impl.m_ptr, v17)) {
        break;
      }
    }
    ++j;
  }
  uint64_t v26 = *(void *)(v7 + 256);
  if (v26
    && ((v27 = *(_DWORD *)(v26 - 8), unsigned int v28 = *((_DWORD *)a2->m_string.m_impl.m_ptr + 4), v28 >= 0x100)
      ? (unsigned int v29 = v28 >> 8)
      : (unsigned int v29 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)a2->m_string.m_impl.m_ptr)),
        uint64_t v30 = v29 & v27,
        unsigned int v31 = (WTF **)(v26 + 48 * v30),
        (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v31) & 1) == 0))
  {
    char v80 = a4;
    int v33 = 1;
    while (*v31 == (WTF *)-1 || (WTF::equal(*v31, (const WTF::StringImpl *)a2->m_string.m_impl.m_ptr, v32) & 1) == 0)
    {
      uint64_t v30 = (v30 + v33) & v27;
      unsigned int v31 = (WTF **)(v26 + 48 * v30);
      ++v33;
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v31))
      {
        int v8 = 0;
        goto LABEL_39;
      }
    }
    int v8 = *(unsigned __int8 *)(v26 + 48 * v30 + 40);
LABEL_39:
    a4 = v80;
    if (v8) {
      goto LABEL_66;
    }
  }
  else
  {
    int v8 = 0;
  }
  if ((v82 & 2) == 0) {
    goto LABEL_41;
  }
LABEL_66:
  WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::appendOrMoveToLast((uint64_t)v89, (uint64_t *)(v7 + 232), (uint64_t)a2);
  if ((v8 == 255 || v8 == 1) && (v82 & 2) != 0) {
    LOBYTE(v8) = 0;
  }
  return (char)v8;
}

void sub_199324A18(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13 = *(WTF::StringImpl **)(v11 - 112);
  *(void *)(v11 - 112) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::permissionState(uint64_t a1, uint64_t a2, WebKit::WebExtensionTab *a3, char a4)
{
  if (!*(unsigned char *)(a2 + 49)) {
    return 0;
  }
  uint64_t v8 = WebKit::WebExtensionMatchPattern::matchesURL((unsigned char *)a2, (WTF::URL *)(a1 + 80), 0);
  if (v8) {
    return 2;
  }
  if (!*(unsigned char *)(a2 + 48))
  {
    int v10 = WebKit::WebExtensionMatchPattern::validSchemes((WebKit::WebExtensionMatchPattern *)v8);
    if (!*(unsigned char *)(a2 + 49) || *(unsigned char *)(a2 + 48))
    {
      uint64_t v13 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
      if (!*MEMORY[0x1E4F30978]) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v13 = *(WTF::StringImpl **)(a2 + 16);
      if (!v13)
      {
LABEL_11:
        uint64_t v14 = *v10;
        if (*v10)
        {
          int v51 = *(_DWORD *)(v14 - 8);
          unsigned int v52 = *((_DWORD *)v13 + 4);
          char v53 = a4;
          if (v52 >= 0x100) {
            unsigned int v54 = v52 >> 8;
          }
          else {
            unsigned int v54 = WTF::StringImpl::hashSlowCase(v13);
          }
          for (int i = 0; ; v54 = i + v56)
          {
            int v56 = v54 & v51;
            uint64_t v57 = *(WTF **)(v14 + 8 * (v54 & v51));
            if (v57 != (WTF *)-1)
            {
              if (!v57)
              {
                char v15 = 1;
                goto LABEL_105;
              }
              if (WTF::equal(v57, v13, v12)) {
                break;
              }
            }
            ++i;
          }
          char v15 = 0;
LABEL_105:
          a4 = v53;
          if (!v13)
          {
LABEL_16:
            if (v15) {
              return 0;
            }
            goto LABEL_18;
          }
        }
        else
        {
          char v15 = 1;
          if (!v13) {
            goto LABEL_16;
          }
        }
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v11);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
        goto LABEL_16;
      }
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_11;
  }
LABEL_18:
  if (a3
    && (uint64_t v16 = *((void *)a3 + 5)) != 0
    && (CFRetain(*(CFTypeRef *)(v16 + 8)),
        char v17 = WebKit::WebExtensionMatchPattern::matchesPattern((unsigned __int8 *)v16, (unsigned __int8 *)a2, 0),
        CFRelease(*(CFTypeRef *)(v16 + 8)),
        (v17 & 1) != 0))
  {
    return 3;
  }
  else
  {
    char v58 = a4;
    uint64_t v18 = (void *)(a1 + 200);
    WebKit::WebExtensionContext::removeExpired(a1, (uint64_t *)(a1 + 200), (double *)(a1 + 216), @"WKWebExtensionContextGrantedPermissionMatchPatternsWereRemoved");
    int v19 = (void *)(a1 + 208);
    WebKit::WebExtensionContext::removeExpired(a1, (uint64_t *)(a1 + 208), (double *)(a1 + 224), @"WKWebExtensionContextDeniedPermissionMatchPatternsWereRemoved");
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZN6WebKit19WebExtensionContext15permissionStateERKNS_24WebExtensionMatchPatternEPNS_15WebExtensionTabEN3WTF9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke;
    aBlock[3] = &__block_descriptor_40_e9_B16__0_v8l;
    aBlock[4] = a2;
    unsigned int v20 = (uint64_t (**)(void *, void))_Block_copy(aBlock);
    unsigned int v21 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 208));
    uint64_t v22 = v21;
    int v24 = v23;
    if (*(void *)(a1 + 208)) {
      uint64_t v25 = *(void *)(a1 + 208) + 16 * *(unsigned int *)(*(void *)(a1 + 208) - 4);
    }
    else {
      uint64_t v25 = 0;
    }
    if ((void *)v25 == v21)
    {
LABEL_32:
      uint64_t v26 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 200));
      unsigned int v27 = v26;
      unsigned int v29 = v28;
      if (*v18) {
        uint64_t v30 = *v18 + 16 * *(unsigned int *)(*v18 - 4);
      }
      else {
        uint64_t v30 = 0;
      }
      if ((void *)v30 == v26)
      {
LABEL_43:
        v61[0] = MEMORY[0x1E4F143A8];
        v61[1] = 3221225472;
        _OWORD v61[2] = ___ZN6WebKit19WebExtensionContext15permissionStateERKNS_24WebExtensionMatchPatternEPNS_15WebExtensionTabEN3WTF9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke_2;
        v61[3] = &__block_descriptor_40_e9_B16__0_v8l;
        v61[4] = a2;
        unsigned int v31 = (uint64_t (**)(void *, void))_Block_copy(v61);
        unsigned int v32 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 208));
        int v33 = v32;
        int v35 = v34;
        if (*v19) {
          uint64_t v36 = *v19 + 16 * *(unsigned int *)(*v19 - 4);
        }
        else {
          uint64_t v36 = 0;
        }
        if ((void *)v36 == v32)
        {
LABEL_54:
          uint64_t v37 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 200));
          uint64_t v38 = v37;
          CFTypeRef v40 = v39;
          if (*v18) {
            uint64_t v41 = *v18 + 16 * *(unsigned int *)(*v18 - 4);
          }
          else {
            uint64_t v41 = 0;
          }
          if ((void *)v41 == v37)
          {
LABEL_65:
            if ((v58 & 2) != 0)
            {
              char v9 = 0;
            }
            else
            {
              WebKit::WebExtension::allRequestedMatchPatterns(*(WebKit::WebExtension **)(a1 + 64), (uint64_t *)&v60);
              int v42 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v60);
              uint64_t v44 = v42;
              uint64_t v45 = v43;
              if (v60) {
                char v46 = &v60[*((unsigned int *)v60 - 1)];
              }
              else {
                char v46 = 0;
              }
              if (v46 == v42)
              {
LABEL_79:
                if (v58)
                {
                  MEMORY[0x19972EAD0](&v59, @"tabs");
                  int v47 = WebKit::WebExtensionContext::permissionState((WTF::StringImpl *)a1, &v59, a3, v58 | 2u) & 0xFFFFFFFE;
                  long long v48 = v59;
                  uint64_t v59 = 0;
                  if (v48)
                  {
                    if (*(_DWORD *)v48 == 2) {
                      WTF::StringImpl::destroy(v48, v43);
                    }
                    else {
                      *(_DWORD *)v48 -= 2;
                    }
                  }
                  if (v47 == 2) {
                    goto LABEL_88;
                  }
                }
                if ((v58 & 4) != 0
                  && (char v49 = *(WebKit::WebExtension **)(a1 + 64),
                      WebKit::WebExtension::populatePermissionsPropertiesIfNeeded(v49),
                      (WebKit::WebExtensionMatchPattern::patternsMatchPattern((void **)v49 + 12, (unsigned __int8 *)a2) & 1) != 0))
                {
LABEL_88:
                  char v9 = -1;
                }
                else
                {
                  char v9 = 0;
                }
              }
              else
              {
                while ((v20[2](v20, *v44) & 1) == 0)
                {
                  if (v31[2](v31, *v44)) {
                    goto LABEL_88;
                  }
                  while (++v44 != (uint64_t *)v45)
                  {
                    if ((unint64_t)(*v44 + 1) > 1) {
                      goto LABEL_78;
                    }
                  }
                  uint64_t v44 = (uint64_t *)v45;
LABEL_78:
                  if (v44 == v46) {
                    goto LABEL_79;
                  }
                }
                char v9 = 1;
              }
              if (v60) {
                WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v60, v43);
              }
            }
          }
          else
          {
            while ((v31[2](v31, *v38) & 1) == 0)
            {
              while (1)
              {
                v38 += 2;
                if (v38 == v40) {
                  break;
                }
                if ((unint64_t)(*v38 + 1) > 1) {
                  goto LABEL_64;
                }
              }
              uint64_t v38 = v40;
LABEL_64:
              if (v38 == (void *)v41) {
                goto LABEL_65;
              }
            }
            char v9 = 2;
          }
        }
        else
        {
          while ((v31[2](v31, *v33) & 1) == 0)
          {
            while (1)
            {
              v33 += 2;
              if (v33 == v35) {
                break;
              }
              if ((unint64_t)(*v33 + 1) > 1) {
                goto LABEL_53;
              }
            }
            int v33 = v35;
LABEL_53:
            if (v33 == (void *)v36) {
              goto LABEL_54;
            }
          }
          char v9 = -2;
        }
      }
      else
      {
        while ((v20[2](v20, *v27) & 1) == 0)
        {
          while (1)
          {
            v27 += 2;
            if (v27 == v29) {
              break;
            }
            if ((unint64_t)(*v27 + 1) > 1) {
              goto LABEL_42;
            }
          }
          unsigned int v27 = v29;
LABEL_42:
          if (v27 == (void *)v30) {
            goto LABEL_43;
          }
        }
        char v9 = 3;
      }
    }
    else
    {
      while ((v20[2](v20, *v22) & 1) == 0)
      {
        while (1)
        {
          v22 += 2;
          if (v22 == v24) {
            break;
          }
          if ((unint64_t)(*v22 + 1) > 1) {
            goto LABEL_31;
          }
        }
        uint64_t v22 = v24;
LABEL_31:
        if (v22 == (void *)v25) {
          goto LABEL_32;
        }
      }
      char v9 = -3;
    }
  }
  return v9;
}

void sub_1993250F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12)
{
  if (*(_DWORD *)v12 == 2) {
    WTF::StringImpl::destroy(v12, a2);
  }
  else {
    *(_DWORD *)v12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::hasPermissions(uint64_t *a1, void **a2, void **a3)
{
  uint64_t v6 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  uint64_t v8 = v6;
  int v10 = v9;
  if (*a2) {
    uint64_t v11 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  }
  else {
    uint64_t v11 = 0;
  }
  if ((WTF::StringImpl **)v11 == v6)
  {
LABEL_10:
    uint64_t v13 = (unsigned __int8 **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a3);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    if (*a3) {
      uint64_t v17 = (uint64_t)&(*a3)[*((unsigned int *)*a3 - 1)];
    }
    else {
      uint64_t v17 = 0;
    }
    if ((unsigned __int8 **)v17 == v13)
    {
      return 1;
    }
    else
    {
      while (1)
      {
        WebKit::WebExtensionContext::currentPermissionMatchPatterns((WebKit::WebExtensionContext *)a1, &v23);
        uint64_t v18 = v24;
        int v19 = v26;
        if (v24 == v26) {
          return 0;
        }
        char v20 = 0;
        unsigned int v21 = v25;
        do
        {
          char v22 = WebKit::WebExtensionMatchPattern::matchesPattern(*v18, *v14, 2);
          if (v22) {
            goto LABEL_23;
          }
          while (1)
          {
            v18 += 2;
            if (v18 == v21) {
              break;
            }
            if ((unint64_t)(*v18 + 1) > 1) {
              goto LABEL_21;
            }
          }
          uint64_t v18 = v21;
LABEL_21:
          v20 |= v22;
        }
        while (v18 != v19);
        if ((v20 & 1) == 0) {
          return 0;
        }
LABEL_23:
        while (++v14 != v16)
        {
          if ((unint64_t)(*v14 + 1) > 1) {
            goto LABEL_27;
          }
        }
        uint64_t v14 = v16;
LABEL_27:
        if (v14 == (unsigned __int8 **)v17) {
          return 1;
        }
      }
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1 + 21, v8, v7);
      if (!result) {
        break;
      }
      while (++v8 != v10)
      {
        if ((unint64_t)*v8 + 1 > 1) {
          goto LABEL_9;
        }
      }
      uint64_t v8 = v10;
LABEL_9:
      if (v8 == (WTF::StringImpl **)v11) {
        goto LABEL_10;
      }
    }
  }
  return result;
}

WTF::StringImpl **WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::appendOrMoveToLast(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::URL> *,WTF::ListHashSetNode<WTF::URL> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::URL>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = *(_DWORD *)(*(void *)a3 + 16);
  if (v8 >= 0x100) {
    unsigned int v9 = v8 >> 8;
  }
  else {
    unsigned int v9 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a3);
  }
  int v10 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v12 = v9 & v7;
    uint64_t v13 = (WTF::StringImpl ***)(v6 + 8 * (v9 & v7));
    uint64_t v14 = *v13;
    if (*v13 != (WTF::StringImpl **)-1) {
      break;
    }
    int v10 = (WTF::StringImpl ***)(v6 + 8 * v12);
LABEL_13:
    unsigned int v9 = i + v12;
  }
  if (!v14)
  {
    if (v10)
    {
      *int v10 = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v13 = v10;
    }
    uint64_t result = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x38);
    uint64_t v16 = *(WTF::StringImpl **)a3;
    if (*(void *)a3) {
      *(_DWORD *)v16 += 2;
    }
    *uint64_t result = v16;
    long long v17 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(result + 3) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(result + 1) = v17;
    result[5] = 0;
    result[6] = 0;
    WTF::StringImpl *v13 = result;
    uint64_t v18 = *a2;
    if (*a2) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v22 = *a2;
    if (*a2) {
      int v23 = *(_DWORD *)(v22 - 12);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
    unint64_t v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24) {
        goto LABEL_29;
      }
    }
    else if (3 * v25 > 4 * v24)
    {
LABEL_29:
      char v26 = 1;
      goto LABEL_35;
    }
    uint64_t v13 = (WTF::StringImpl ***)WTF::HashTable<WTF::ListHashSetNode<WTF::URL> *,WTF::ListHashSetNode<WTF::URL> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::URL>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>>::expand(a2, v13);
    uint64_t result = *v13;
    goto LABEL_29;
  }
  if (!WTF::equal(*v14, *(const WTF::StringImpl **)a3, (const WTF::StringImpl *)a3)) {
    goto LABEL_13;
  }
  uint64_t result = *v13;
  char v20 = (*v13)[5];
  unsigned int v21 = (*v13)[6];
  if (v20)
  {
    *((void *)v20 + 6) = v21;
    unsigned int v21 = result[6];
  }
  else
  {
    a2[1] = (uint64_t)v21;
  }
  char v26 = 0;
  if (v21) {
    unsigned int v27 = (WTF::StringImpl **)((char *)v21 + 40);
  }
  else {
    unsigned int v27 = (WTF::StringImpl **)(a2 + 2);
  }
  void *v27 = v20;
LABEL_35:
  unsigned int v28 = (WTF::StringImpl ***)a2[2];
  result[5] = (WTF::StringImpl *)v28;
  result[6] = 0;
  if (v28) {
    unsigned int v29 = v28 + 6;
  }
  else {
    unsigned int v29 = (WTF::StringImpl ***)(a2 + 1);
  }
  void *v29 = result;
  a2[2] = (uint64_t)result;
  uint64_t v30 = *v13;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v30;
  *(unsigned char *)(a1 + 16) = v26;
  return result;
}

uint64_t ___ZN6WebKit19WebExtensionContext15permissionStateERKN3WTF3URLEPNS_15WebExtensionTabENS1_9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = (uint64_t *)(v4 + 232);
  WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::appendOrMoveToLast((uint64_t)v71, (uint64_t *)(v4 + 232), *(void *)(a1 + 40));
  uint64_t v6 = (uint64_t *)(v4 + 256);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(v4 + 256);
  if (v8
    || (WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand((uint64_t *)(v4 + 256), 0), (uint64_t v8 = *v6) != 0))
  {
    unsigned int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  unsigned int v10 = *(_DWORD *)(*(void *)v7 + 16);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v7);
  }
  uint64_t v12 = v11 & v9;
  uint64_t v13 = (WTF::URL *)(v8 + 48 * v12);
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v13))
  {
    char v15 = (uint64_t *)(v4 + 256);
  }
  else
  {
    unsigned int v70 = a2;
    uint64_t v16 = 0;
    int v17 = 1;
    do
    {
      uint64_t v18 = v13;
      if (*(void *)v13 != -1)
      {
        uint64_t v18 = v16;
        if (WTF::equal(*(WTF **)v13, *(const WTF::StringImpl **)v7, v14))
        {
          a2 = v70;
          *(unsigned char *)(v8 + 48 * v12 + 40) = v70;
          char v15 = (uint64_t *)(v4 + 256);
          char v5 = (uint64_t *)(v4 + 232);
          goto LABEL_25;
        }
      }
      uint64_t v12 = (v12 + v17) & v9;
      uint64_t v13 = (WTF::URL *)(v8 + 48 * v12);
      ++v17;
      uint64_t v16 = v18;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v13));
    a2 = v70;
    char v15 = (uint64_t *)(v4 + 256);
    char v5 = (uint64_t *)(v4 + 232);
    if (v18)
    {
      WTF::URL::URL(v18);
      *((unsigned char *)v18 + 40) = 0;
      --*(_DWORD *)(*(void *)(v4 + 256) - 16);
      uint64_t v13 = v18;
    }
  }
  WTF::String::operator=((uint64_t *)v13, (WTF::StringImpl **)v7);
  long long v20 = *(_OWORD *)(v7 + 24);
  *(_OWORD *)((char *)v13 + 8) = *(_OWORD *)(v7 + 8);
  *(_OWORD *)((char *)v13 + 24) = v20;
  *((unsigned char *)v13 + 40) = a2;
  uint64_t v21 = *v15;
  if (*v15) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v23 = *v15;
  if (*v15) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  if (3 * v26 <= 4 * v25) {
LABEL_23:
  }
    WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand(v15, (WTF::StringImpl **)v13);
LABEL_25:
  uint64_t v27 = *v5;
  if (!*v5 || *(_DWORD *)(v27 - 12) < 0x101u) {
    return a2;
  }
  int v28 = *(_DWORD *)(v27 - 8);
  unsigned int v29 = **(WTF::StringImpl ***)(v4 + 240);
  unsigned int v30 = *((_DWORD *)v29 + 4);
  unsigned int v31 = v5;
  if (v30 >= 0x100) {
    unsigned int v32 = v30 >> 8;
  }
  else {
    unsigned int v32 = WTF::StringImpl::hashSlowCase(v29);
  }
  for (int i = 0; ; v32 = i + v34)
  {
    uint64_t v34 = v32 & v28;
    int v35 = *(WTF ***)(v27 + 8 * v34);
    if (v35 != (WTF **)-1)
    {
      if (!v35)
      {
        uint64_t v36 = v31;
        uint64_t v37 = (uint64_t **)(*v31 + 8 * *(unsigned int *)(*v31 - 4));
        goto LABEL_37;
      }
      if (WTF::equal(*v35, **(const WTF::StringImpl ***)(v4 + 240), v19)) {
        break;
      }
    }
    ++i;
  }
  uint64_t v37 = (uint64_t **)(v27 + 8 * v34);
  uint64_t v36 = v31;
LABEL_37:
  WTF::URL::URL((uint64_t)v71, *v37);
  uint64_t v39 = *v36;
  if (*v36) {
    v39 += 8 * *(unsigned int *)(v39 - 4);
  }
  if ((uint64_t **)v39 != v37)
  {
    void *v37 = (uint64_t *)-1;
    ++*(_DWORD *)(*v36 - 16);
    uint64_t v40 = *v36;
    int v41 = *v36 ? *(_DWORD *)(v40 - 12) - 1 : -1;
    *(_DWORD *)(v40 - 12) = v41;
    uint64_t v42 = *v36;
    if (*v36)
    {
      unsigned int v43 = 6 * *(_DWORD *)(v42 - 12);
      unsigned int v44 = *(_DWORD *)(v42 - 4);
      if (v43 < v44 && v44 >= 9) {
        WTF::HashTable<WTF::ListHashSetNode<WTF::URL> *,WTF::ListHashSetNode<WTF::URL> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::URL>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>>::rehash(v36, v44 >> 1, 0);
      }
    }
  }
  char v46 = *(WTF::StringImpl ***)(v4 + 240);
  int v47 = v46[5];
  long long v48 = v46[6];
  if (v47)
  {
    *((void *)v47 + 6) = v48;
    long long v48 = v46[6];
  }
  else
  {
    *(void *)(v4 + 240) = v48;
  }
  uint64_t v49 = a2;
  if (v48) {
    uint64_t v50 = (WTF::StringImpl **)((char *)v48 + 40);
  }
  else {
    uint64_t v50 = (WTF::StringImpl **)(v4 + 248);
  }
  void *v50 = v47;
  int v51 = *v46;
  *char v46 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2) {
      WTF::StringImpl::destroy(v51, v38);
    }
    else {
      *(_DWORD *)v51 -= 2;
    }
  }
  WTF::fastFree((WTF *)v46, v38);
  uint64_t v53 = *v15;
  if (*v15)
  {
    int v54 = *(_DWORD *)(v53 - 8);
    unsigned int v55 = *((_DWORD *)v71[0] + 4);
    if (v55 >= 0x100) {
      unsigned int v56 = v55 >> 8;
    }
    else {
      unsigned int v56 = WTF::StringImpl::hashSlowCase(v71[0]);
    }
    unsigned int v57 = v56 & v54;
    char v58 = (WTF **)(v53 + 48 * (v56 & v54));
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v58))
    {
LABEL_70:
      uint64_t v61 = *v15;
      if (!*v15) {
        goto LABEL_86;
      }
      char v58 = (WTF **)(v61 + 48 * *(unsigned int *)(v61 - 4));
    }
    else
    {
      int v60 = 1;
      while (*v58 == (WTF *)-1 || (WTF::equal(*v58, v71[0], v59) & 1) == 0)
      {
        unsigned int v57 = (v57 + v60) & v54;
        char v58 = (WTF **)(v53 + 48 * v57);
        ++v60;
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v58)) {
          goto LABEL_70;
        }
      }
      uint64_t v61 = *v15;
      if (!*v15) {
        goto LABEL_73;
      }
    }
    v61 += 48 * *(unsigned int *)(v61 - 4);
    if ((WTF **)v61 != v58)
    {
LABEL_73:
      if ((WTF **)v61 != v58)
      {
        WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>(v58, v52);
        ++*(_DWORD *)(*v15 - 16);
        uint64_t v62 = *v15;
        int v63 = *v15 ? *(_DWORD *)(v62 - 12) - 1 : -1;
        *(_DWORD *)(v62 - 12) = v63;
        uint64_t v64 = *v15;
        if (*v15)
        {
          unsigned int v65 = 6 * *(_DWORD *)(v64 - 12);
          unsigned int v66 = *(_DWORD *)(v64 - 4);
          if (v65 < v66 && v66 >= 9) {
            WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(v15, v66 >> 1, 0);
          }
        }
      }
    }
  }
LABEL_86:
  char v68 = v71[0];
  v71[0] = 0;
  a2 = v49;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2) {
      WTF::StringImpl::destroy(v68, v52);
    }
    else {
      *(_DWORD *)v68 -= 2;
    }
  }
  return a2;
}

void sub_199325A00(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit19WebExtensionContext15permissionStateERKN3WTF3URLEPNS_15WebExtensionTabENS1_9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 49)
    && (*(unsigned char *)(a2 + 48) || *(unsigned char *)(a2 + 41) && ((uint64_t v3 = *(void *)(a2 + 24)) == 0 || !*(_DWORD *)(v3 + 4))))
  {
    return 0;
  }
  else
  {
    return WebKit::WebExtensionMatchPattern::matchesURL((unsigned char *)a2, *(WTF::URL **)(a1 + 32), 0);
  }
}

uint64_t ___ZN6WebKit19WebExtensionContext15permissionStateERKN3WTF3URLEPNS_15WebExtensionTabENS1_9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 49)
    && (*(unsigned char *)(a2 + 48) || *(unsigned char *)(a2 + 41) && ((uint64_t v3 = *(void *)(a2 + 24)) == 0 || !*(_DWORD *)(v3 + 4))))
  {
    return WebKit::WebExtensionMatchPattern::matchesURL((unsigned char *)a2, *(WTF::URL **)(a1 + 32), 0);
  }
  else
  {
    return 0;
  }
}

uint64_t ___ZN6WebKit19WebExtensionContext15permissionStateERKNS_24WebExtensionMatchPatternEPNS_15WebExtensionTabEN3WTF9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 49)
    && (*(unsigned char *)(v2 + 48) || *(unsigned char *)(v2 + 41) && ((uint64_t v4 = *(void *)(v2 + 24)) == 0 || !*(_DWORD *)(v4 + 4))))
  {
    return 0;
  }
  else
  {
    return WebKit::WebExtensionMatchPattern::matchesPattern((unsigned __int8 *)v2, a2, 0);
  }
}

uint64_t ___ZN6WebKit19WebExtensionContext15permissionStateERKNS_24WebExtensionMatchPatternEPNS_15WebExtensionTabEN3WTF9OptionSetINS0_22PermissionStateOptionsEEE_block_invoke_2(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 49)
    && (*(unsigned char *)(v2 + 48) || *(unsigned char *)(v2 + 41) && ((uint64_t v4 = *(void *)(v2 + 24)) == 0 || !*(_DWORD *)(v4 + 4))))
  {
    return WebKit::WebExtensionMatchPattern::matchesPattern((unsigned __int8 *)v2, a2, 0);
  }
  else
  {
    return 0;
  }
}

WTF::StringImpl **WebKit::WebExtensionContext::setPermissionState(uint64_t a1, int a2, WTF::StringImpl **a3, double a4)
{
  v12[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v7 = *a3;
  if (*a3) {
    *(_DWORD *)v7 += 2;
  }
  v12[0] = v7;
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashSet((uint64_t *)&v11, v12, (const WTF::StringImpl *)1);
  unsigned int v9 = v12[0];
  v12[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  if (a2 == -3)
  {
    WebKit::WebExtensionContext::denyPermissions((double *)a1, &v11, a4);
  }
  else if (a2)
  {
    if (a2 == 3) {
      WebKit::WebExtensionContext::grantPermissions((double *)a1, &v11, a4);
    }
  }
  else
  {
    WebKit::WebExtensionContext::removePermissions(a1, (uint64_t *)(a1 + 168), (uint64_t *)&v11, (double *)(a1 + 184), @"WKWebExtensionContextGrantedPermissionsWereRemoved");
    WebKit::WebExtensionContext::removePermissions(a1, (uint64_t *)(a1 + 176), (uint64_t *)&v11, (double *)(a1 + 192), @"WKWebExtensionContextDeniedPermissionsWereRemoved");
  }
  uint64_t result = v11;
  if (v11) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v8);
  }
  return result;
}

void sub_199325C74(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10, WTF::StringImpl *a11)
{
  if (a10) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::setPermissionState(double *a1, int a2, uint64_t a3, double a4)
{
  WebKit::WebExtensionMatchPattern::getOrCreate(a3, 6, &v8);
  if (v8)
  {
    WebKit::WebExtensionContext::setPermissionState(a1, a2, v8, a4);
    uint64_t v7 = v8;
    uint64_t v8 = 0;
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
}

void sub_199325D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::WebExtensionContext::setPermissionState(double *a1, int a2, uint64_t a3, double a4)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  CFRetain(*(CFTypeRef *)(a3 + 8));
  v14[0] = a3;
  WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v13, v14, 1);
  uint64_t v9 = v14[0];
  v14[0] = 0;
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  if (!*(unsigned char *)(a3 + 49)) {
    goto LABEL_9;
  }
  if (*(unsigned char *)(a3 + 48))
  {
LABEL_5:
    BOOL v10 = 1;
    goto LABEL_10;
  }
  if (*(unsigned char *)(a3 + 41))
  {
    uint64_t v11 = *(void *)(a3 + 24);
    if (!v11) {
      goto LABEL_5;
    }
    BOOL v10 = *(_DWORD *)(v11 + 4) == 0;
  }
  else
  {
LABEL_9:
    BOOL v10 = 0;
  }
LABEL_10:
  if (a2 == -3)
  {
    WebKit::WebExtensionContext::denyPermissionMatchPatterns(a1, &v13, v10, a4);
  }
  else if (a2)
  {
    if (a2 == 3) {
      WebKit::WebExtensionContext::grantPermissionMatchPatterns(a1, &v13, v10, a4);
    }
  }
  else
  {
    WebKit::WebExtensionContext::removeGrantedPermissionMatchPatterns((uint64_t)a1, (uint64_t *)&v13, v10);
    WebKit::WebExtensionContext::removeDeniedPermissionMatchPatterns((uint64_t)a1, (uint64_t *)&v13, v10);
  }
  uint64_t result = v13;
  if (v13) {
    return (uint64_t *)WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v13, v8);
  }
  return result;
}

void sub_199325E98(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11)
{
  if (a10) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::hasAccessToAllURLs(WebKit::WebExtensionContext *this)
{
  WebKit::WebExtensionContext::currentPermissionMatchPatterns(this, &v3);
  uint64_t v1 = v4;
  if (v4 == v6) {
    return 0;
  }
  do
  {
    BOOL result = *(unsigned char *)(*(void *)v1 + 48) != 0;
    if (*(unsigned char *)(*(void *)v1 + 48)) {
      break;
    }
    while (1)
    {
      v1 += 16;
      if (v1 == v5) {
        break;
      }
      if ((unint64_t)(*(void *)v1 + 1) > 1) {
        goto LABEL_7;
      }
    }
    uint64_t v1 = v5;
LABEL_7:
    ;
  }
  while (v1 != v6);
  return result;
}

uint64_t WebKit::WebExtensionContext::hasAccessToAllHosts(WebKit::WebExtensionContext *this)
{
  uint64_t v2 = (void **)((char *)this + 200);
  WebKit::WebExtensionContext::removeExpired(this, (char *)this + 200, (char *)this + 216, @"WKWebExtensionContextGrantedPermissionMatchPatternsWereRemoved");
  uint64_t v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v2);
  uint64_t v5 = (void *)*((void *)this + 25);
  if (v5) {
    v5 += 2 * *((unsigned int *)v5 - 1);
  }
  if (v5 == v3) {
    return 0;
  }
  while (1)
  {
    uint64_t v6 = *v3;
    if (*(unsigned char *)(*v3 + 49))
    {
      if (*(unsigned char *)(v6 + 48)) {
        return 1;
      }
      if (*(unsigned char *)(v6 + 41))
      {
        uint64_t v7 = *(void *)(v6 + 24);
        if (!v7 || !*(_DWORD *)(v7 + 4)) {
          return 1;
        }
      }
    }
    while (1)
    {
      v3 += 2;
      if (v3 == v4) {
        break;
      }
      if ((unint64_t)(*v3 + 1) > 1) {
        goto LABEL_13;
      }
    }
    uint64_t v3 = v4;
LABEL_13:
    if (v3 == v5) {
      return 0;
    }
  }
}

void WebKit::WebExtensionContext::getOrCreateWindow(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  uint64_t v6 = *(void *)(a1 + 520);
  if (v6)
  {
    uint64_t v7 = *(unsigned int *)(v6 - 4);
    uint64_t v8 = (void *)(v6 + 16 * v7);
    if (*(_DWORD *)(v6 - 12))
    {
      uint64_t v9 = *(void **)(a1 + 520);
      if (v7)
      {
        uint64_t v10 = 16 * v7;
        uint64_t v9 = *(void **)(a1 + 520);
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 2;
          v10 -= 16;
          if (!v10)
          {
            uint64_t v9 = v8;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    uint64_t v9 = (void *)(v6 + 16 * v7);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v7 = 0;
  }
  uint64_t v8 = (void *)(v6 + 16 * v7);
  if (v6)
  {
LABEL_8:
    uint64_t v11 = (void *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    goto LABEL_13;
  }
  uint64_t v11 = 0;
LABEL_13:
  if (v11 == v9)
  {
LABEL_21:
    uint64_t v15 = WTF::fastMalloc((WTF *)0x30);
    WebKit::WebExtensionWindow::WebExtensionWindow(v15, a1, v5);
    uint64_t v16 = (uint64_t *)(a1 + 520);
    *(void *)a3 = v15;
    uint64_t v17 = *(void *)(v15 + 16);
    uint64_t v18 = *v16;
    if (*v16
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v16),
          (uint64_t v18 = *v16) != 0))
    {
      int v19 = *(_DWORD *)(v18 - 8);
    }
    else
    {
      int v19 = 0;
    }
    unint64_t v20 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
    unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
    int v24 = (void *)(v18 + 16 * v23);
    uint64_t v25 = *v24;
    if (*v24)
    {
      unint64_t v26 = 0;
      int v27 = 1;
      while (v25 != v17)
      {
        if (v25 == -1) {
          unint64_t v26 = v24;
        }
        unsigned int v23 = (v23 + v27) & v19;
        int v24 = (void *)(v18 + 16 * v23);
        uint64_t v25 = *v24;
        ++v27;
        if (!*v24)
        {
          if (v26)
          {
            *unint64_t v26 = 0;
            v26[1] = 0;
            --*(_DWORD *)(*v16 - 16);
            int v24 = v26;
          }
          goto LABEL_32;
        }
      }
      ++*(_DWORD *)v15;
      uint64_t v32 = v24[1];
      v24[1] = v15;
      if (v32) {
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v32);
      }
      goto LABEL_45;
    }
LABEL_32:
    void *v24 = v17;
    int v28 = *(_DWORD **)a3;
    _DWORD *v28 = **(_DWORD **)a3 + 1;
    uint64_t v29 = v24[1];
    v24[1] = v28;
    if (v29) {
      WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v29);
    }
    uint64_t v30 = *v16;
    if (*v16) {
      int v31 = *(_DWORD *)(v30 - 12) + 1;
    }
    else {
      int v31 = 1;
    }
    *(_DWORD *)(v30 - 12) = v31;
    uint64_t v33 = *v16;
    if (*v16) {
      int v34 = *(_DWORD *)(v33 - 12);
    }
    else {
      int v34 = 0;
    }
    uint64_t v35 = (*(_DWORD *)(v33 - 16) + v34);
    unint64_t v36 = *(unsigned int *)(v33 - 4);
    if (v36 > 0x400)
    {
      if (v36 > 2 * v35)
      {
LABEL_45:
        uint64_t v37 = qword_1EB357DF8;
        if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v38 = *(void *)(*(void *)a3 + 16);
          int v39 = 134349056;
          uint64_t v40 = v38;
          _os_log_debug_impl(&dword_1985F2000, v37, OS_LOG_TYPE_DEBUG, "Window %{public}llu was created", (uint8_t *)&v39, 0xCu);
        }
        goto LABEL_47;
      }
    }
    else if (3 * v36 > 4 * v35)
    {
      goto LABEL_45;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v16);
    goto LABEL_45;
  }
  while (1)
  {
    uint64_t v12 = v9[1];
    ++*(_DWORD *)v12;
    *(void *)a3 = v12;
    id WeakRetained = objc_loadWeakRetained((id *)(v12 + 32));

    if (WeakRetained == v5) {
      break;
    }
    *(void *)a3 = 0;
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v12);
    uint64_t v14 = v9 + 2;
    uint64_t v9 = v8;
    if (v14 != v8)
    {
      uint64_t v9 = v14;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 2;
        if (v9 == v8)
        {
          uint64_t v9 = v8;
          break;
        }
      }
    }
    if (v9 == v11) {
      goto LABEL_21;
    }
  }
LABEL_47:
}

void sub_199326360(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::getWindow(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a2 == -3)
  {
    uint64_t v13 = a4;
    if (a4)
    {
      WebKit::WebExtensionContext::getCurrentTab(buf, a1, a3, 1, a5);
      uint64_t v14 = *(void *)buf;
      if (*(void *)buf)
      {
        WebKit::WebExtensionTab::window(*(WebKit::WebExtensionTab **)buf, &v25);
        uint64_t v11 = v25;
        WTF::RefCounted<WebKit::WebExtensionTab>::deref(v14);
        if (v11) {
          goto LABEL_10;
        }
      }
    }
    if (*(_DWORD *)(a1 + 540))
    {
      WebKit::WebExtensionContext::getWindow(buf, a1, **(void **)(a1 + 528), 0, 0, a5);
      uint64_t v11 = *(void *)buf;
      if (*(void *)buf) {
        goto LABEL_10;
      }
    }
    uint64_t v18 = qword_1EB357DF8;
    BOOL v19 = os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v19)
      {
        *(_DWORD *)buf = 134349056;
        *(void *)&uint8_t buf[4] = a3;
        unint64_t v20 = "Current window for page %{public}llu was not found";
LABEL_23:
        unint64_t v21 = v18;
        uint32_t v22 = 12;
LABEL_27:
        _os_log_error_impl(&dword_1985F2000, v21, OS_LOG_TYPE_ERROR, v20, buf, v22);
      }
    }
    else if (v19)
    {
      *(_WORD *)buf = 0;
      unint64_t v20 = "Current window not found (no frontmost window)";
      unint64_t v21 = v18;
      uint32_t v22 = 2;
      goto LABEL_27;
    }
LABEL_25:
    *a6 = 0;
    return;
  }
  if (a2 == -2) {
    goto LABEL_25;
  }
  uint64_t v10 = (_DWORD *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 520), a2);
  if (!v10)
  {
    uint64_t v18 = qword_1EB357DF8;
    if (!os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_25;
    }
    *(_DWORD *)buf = 134349056;
    *(void *)&uint8_t buf[4] = a2;
    unint64_t v20 = "Window %{public}llu was not found";
    goto LABEL_23;
  }
  uint64_t v11 = (uint64_t)v10;
  ++*v10;
LABEL_10:
  uint64_t v15 = *(void *)(v11 + 24);
  if (v15
    && *(void *)(v15 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto20WKWebExtensionWindow}>::operator BOOL((id *)(v11 + 32)))
  {
    if ((a5 & 1) != 0
      || !WebKit::WebExtensionWindow::isPrivate((WebKit::WebExtensionWindow *)v11)
      || ((v16 = *(void *)(*(void *)(v11 + 24) + 8)) != 0 ? (uint64_t v17 = v16 - 16) : (uint64_t v17 = 0), *(unsigned char *)(v17 + 273)))
    {
      *a6 = v11;
      return;
    }
  }
  else
  {
    unsigned int v23 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)(v11 + 16);
      *(_DWORD *)buf = 134349056;
      *(void *)&uint8_t buf[4] = v24;
      _os_log_error_impl(&dword_1985F2000, v23, OS_LOG_TYPE_ERROR, "Window %{public}llu has nil delegate; reference not removed via didCloseWindow: before release",
        buf,
        0xCu);
    }
    WebKit::WebExtensionContext::forgetWindow(a1, *(void *)(v11 + 16));
  }
  *a6 = 0;
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v11);
}

void sub_199326644(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::getCurrentTab(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, void *a5@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (!WebKit::WebExtensionContext::isBackgroundPage(a1, a2))
  {
    WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::begin(buf, (void *)(a1 + 584));
    uint64_t v12 = *(void *)(a1 + 584);
    if (v12)
    {
      uint64_t v13 = *(unsigned int *)(v12 - 4);
      uint64_t v14 = v12 + 16 * v13;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v13 = 0;
    }
    uint64_t v41 = a1 + 584;
    uint64_t v42 = v14;
    uint64_t v43 = v14;
    uint64_t v44 = v14;
    uint64_t v45 = v12 + 16 * v13;
    int v46 = 0;
    WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v41);
    uint64_t v15 = v42;
    while (1)
    {
      if (*((void *)&buf[0] + 1) == v15)
      {
        WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::begin(buf, (void *)(a1 + 568));
        uint64_t v18 = *(void *)(a1 + 568);
        if (v18)
        {
          uint64_t v19 = *(unsigned int *)(v18 - 4);
          uint64_t v20 = v18 + 16 * v19;
        }
        else
        {
          uint64_t v20 = 0;
          uint64_t v19 = 0;
        }
        uint64_t v41 = a1 + 568;
        uint64_t v42 = v20;
        uint64_t v43 = v20;
        uint64_t v44 = v20;
        uint64_t v45 = v18 + 16 * v19;
        int v46 = 0;
        WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v41);
        uint64_t v23 = v42;
        while (*((void *)&buf[0] + 1) != v23)
        {
          uint64_t v24 = *(void *)(**((void **)&buf[0] + 1) + 8);
          if (v24) {
            uint64_t v25 = v24 - 16;
          }
          else {
            uint64_t v25 = 0;
          }
          if (*(void *)(*(void *)(v25 + 32) + 760) == a2)
          {
            int v31 = (_DWORD *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 560), *(void *)(*((void *)&buf[0] + 1) + 8));
            uint64_t v11 = v31;
            if (v31) {
              ++*v31;
            }
            goto LABEL_51;
          }
          WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance((uint64_t)buf);
        }
        WebKit::WebExtensionContext::openTabs(a1, 0, (uint64_t)buf);
        if (HIDWORD(buf[0]))
        {
          uint64_t v27 = *(_DWORD ***)&buf[0];
          uint64_t v28 = 8 * HIDWORD(buf[0]);
          while (1)
          {
            uint64_t v11 = *v27;
            _DWORD *v11 = **v27 + 1;
            uint64_t v29 = WebKit::WebExtensionTab::webView((WebKit::WebExtensionTab *)v11);
            uint64_t v30 = v29;
            if (v29)
            {
              [v29 _page];
              if (*(void *)(*(void *)(v41 + 32) + 760) == a2) {
                break;
              }
            }

            WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
            ++v27;
            v28 -= 8;
            if (!v28) {
              goto LABEL_38;
            }
          }
          ++*v11;

          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
        }
        else
        {
LABEL_38:
          uint64_t v11 = 0;
        }
        WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v26);
        goto LABEL_51;
      }
      uint64_t v16 = *(void *)(**((void **)&buf[0] + 1) + 8);
      uint64_t v17 = v16 ? v16 - 16 : 0;
      if (*(void *)(*(void *)(v17 + 32) + 760) == a2) {
        break;
      }
      WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance((uint64_t)buf);
    }
    if (!a3) {
      goto LABEL_68;
    }
    uint64_t v21 = *(void *)(*((void *)&buf[0] + 1) + 8);
    if (*(unsigned char *)(v21 + 40))
    {
      uint64_t v22 = *(void *)(v21 + 32);
      if (v22)
      {
        uint64_t v11 = *(_DWORD **)(v22 + 8);
        if (v11)
        {
          ++*v11;
          WebKit::WebExtensionTab::window((WebKit::WebExtensionTab *)v11, &v40);
          uint64_t v10 = v40;
          ++*v11;
          if (!v10) {
            goto LABEL_49;
          }
          goto LABEL_48;
        }
      }
    }
    if (*(unsigned char *)(v21 + 56))
    {
      uint64_t v32 = *(void *)(v21 + 48);
      if (v32)
      {
        uint64_t v10 = *(_DWORD **)(v32 + 8);
        if (v10)
        {
          ++*v10;
          WebKit::WebExtensionWindow::activeTab((uint64_t)v10, 0, (uint64_t *)&v39);
          uint64_t v11 = v39;
          if (!v39) {
            goto LABEL_6;
          }
          ++*v39;
LABEL_48:
          WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v10);
LABEL_49:
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
          goto LABEL_51;
        }
      }
    }
LABEL_50:
    uint64_t v11 = 0;
    goto LABEL_51;
  }
  if ((a3 & 1) == 0)
  {
LABEL_68:
    *a5 = 0;
    return;
  }
  if (!*(_DWORD *)(a1 + 540)) {
    goto LABEL_50;
  }
  WebKit::WebExtensionContext::getWindow(a1, **(void **)(a1 + 528), 0, 0, 0, (uint64_t *)buf);
  uint64_t v10 = *(_DWORD **)&buf[0];
  if (!*(void *)&buf[0]) {
    goto LABEL_50;
  }
  WebKit::WebExtensionWindow::activeTab(*(uint64_t *)&buf[0], 0, &v41);
  uint64_t v11 = (_DWORD *)v41;
LABEL_6:
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v10);
LABEL_51:
  if (!v11)
  {
    uint64_t v37 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0]) = 134349056;
      *(void *)((char *)buf + 4) = a2;
      _os_log_debug_impl(&dword_1985F2000, v37, OS_LOG_TYPE_DEBUG, "Tab for page %{public}llu was not found", (uint8_t *)buf, 0xCu);
    }
    goto LABEL_68;
  }
  uint64_t v33 = *((void *)v11 + 3);
  if (v33
    && *(void *)(v33 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)v11 + 4))
  {
    if ((a4 & 1) != 0
      || !WebKit::WebExtensionTab::isPrivate((WebKit::WebExtensionTab *)v11)
      || ((uint64_t v34 = *(void *)(*((void *)v11 + 3) + 8)) != 0 ? (v35 = v34 - 16) : (v35 = 0), *(unsigned char *)(v35 + 273)))
    {
      *a5 = v11;
      return;
    }
  }
  else
  {
    unint64_t v36 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = *((void *)v11 + 2);
      LODWORD(buf[0]) = 134349056;
      *(void *)((char *)buf + 4) = v38;
      _os_log_error_impl(&dword_1985F2000, v36, OS_LOG_TYPE_ERROR, "Tab %{public}llu has nil delegate; reference not removed via didCloseTab: before release",
        (uint8_t *)buf,
        0xCu);
    }
    WebKit::WebExtensionContext::forgetTab((uint64_t *)a1, *((void *)v11 + 2));
  }
  *a5 = 0;
  WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
}

void sub_199326AF0(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::forgetWindow(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 552)) {
    BOOL v2 = *(void *)(result + 544) == a2;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2) {
    *(unsigned char *)(result + 552) = 0;
  }
  uint64_t v3 = *(char **)(result + 528);
  uint64_t v4 = *(unsigned int *)(result + 540);
  id v5 = &v3[8 * v4];
  if (v4)
  {
    LODWORD(v4) = 0;
    uint64_t v6 = v5;
    uint64_t v7 = v5;
    do
    {
      if (*(void *)v3 == a2)
      {
        uint64_t v8 = v3;
        if (v7 != (char *)(*(void *)(result + 528) + 8 * *(unsigned int *)(result + 540)))
        {
          if (v6 == v3)
          {
            uint64_t v8 = v7;
          }
          else
          {
            if (v6 <= v7)
            {
              uint64_t v13 = 0;
              uint64_t v12 = (v3 - v6) >> 3;
              do
              {
                *(void *)&v7[((v3 - v6) & 0xFFFFFFFFFFFFFFF8) - 8 + v13] = *(void *)&v3[v13 - 8];
                v13 -= 8;
              }
              while (&v3[v13] != v6);
            }
            else
            {
              uint64_t v9 = v7;
              uint64_t v10 = v6;
              do
              {
                uint64_t v11 = *(void *)v10;
                v10 += 8;
                *(void *)uint64_t v9 = v11;
                v9 += 8;
              }
              while (v10 != v3);
              uint64_t v12 = (v3 - v6) >> 3;
            }
            uint64_t v8 = &v7[8 * v12];
          }
        }
        uint64_t v6 = v3 + 8;
        LODWORD(v4) = v4 + 1;
        uint64_t v7 = v8;
      }
      v3 += 8;
    }
    while (v3 < v5);
    uint64_t v3 = *(char **)(result + 528);
    uint64_t v14 = *(unsigned int *)(result + 540);
    id v5 = v7;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v6 = &v3[8 * v4];
  }
  uint64_t v15 = &v3[8 * v14];
  if (v6 != v15)
  {
    if (v6 <= v5)
    {
      uint64_t v17 = &v5[((v15 - v6) & 0xFFFFFFFFFFFFFFF8) - 8];
      do
      {
        uint64_t v18 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)uint64_t v17 = v18;
        v17 -= 8;
      }
      while (v15 != v6);
    }
    else
    {
      do
      {
        uint64_t v16 = *(void *)v6;
        v6 += 8;
        *(void *)id v5 = v16;
        v5 += 8;
      }
      while (v6 != v15);
    }
  }
  *(_DWORD *)(result + 540) -= v4;
  uint64_t v19 = *(void *)(result + 520);
  if (v19)
  {
    unsigned int v20 = *(_DWORD *)(v19 - 8);
    unint64_t v21 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
    unint64_t v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
    uint64_t v24 = v20 & ((v23 >> 31) ^ v23);
    uint64_t v25 = *(void *)(v19 + 16 * v24);
    if (v25 != a2)
    {
      int v26 = 1;
      while (v25)
      {
        uint64_t v24 = (v24 + v26) & v20;
        uint64_t v25 = *(void *)(v19 + 16 * v24);
        ++v26;
        if (v25 == a2) {
          goto LABEL_37;
        }
      }
      uint64_t v24 = *(unsigned int *)(v19 - 4);
    }
LABEL_37:
    if (v24 != *(_DWORD *)(v19 - 4))
    {
      uint64_t v27 = (uint64_t *)(result + 520);
      uint64_t v28 = (void *)(v19 + 16 * v24);
      BOOL result = v28[1];
      void *v28 = -1;
      v28[1] = 0;
      if (result) {
        BOOL result = WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
      }
      ++*(_DWORD *)(*v27 - 16);
      uint64_t v29 = *v27;
      if (*v27) {
        int v30 = *(_DWORD *)(v29 - 12) - 1;
      }
      else {
        int v30 = -1;
      }
      *(_DWORD *)(v29 - 12) = v30;
      uint64_t v31 = *v27;
      if (*v27)
      {
        unsigned int v32 = 6 * *(_DWORD *)(v31 - 12);
        unsigned int v33 = *(_DWORD *)(v31 - 4);
        if (v32 < v33 && v33 >= 9)
        {
          return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v27, v33 >> 1);
        }
      }
    }
  }
  return result;
}

void WebKit::WebExtensionContext::getOrCreateTab(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  uint64_t v6 = (void *)a1[75];
  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v6);
  uint64_t v7 = [(id)objc_claimAutoreleasedReturnValue() objectForKey:v5];

  if (v7)
  {
    uint64_t v8 = [v7 unsignedLongLongValue];
    if (v8 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1993270F0);
    }
    WebKit::WebExtensionContext::getTab(a1, v8, 1, (WebKit::WebExtensionTab **)v35);
    if (*(void *)v35)
    {
      *(void *)a3 = *(void *)v35;

      goto LABEL_31;
    }
  }

  uint64_t v9 = WTF::fastMalloc((WTF *)0x38);
  WebKit::WebExtensionTab::WebExtensionTab(v9, (uint64_t)a1, v5);
  *(void *)a3 = v9;
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = a1 + 70;
  uint64_t v12 = a1[70];
  if (v12
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1 + 70),
        (uint64_t v12 = *v11) != 0))
  {
    int v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    int v13 = 0;
  }
  unint64_t v14 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
  unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
  uint64_t v18 = (uint64_t *)(v12 + 16 * v17);
  uint64_t v19 = *v18;
  if (*v18)
  {
    unsigned int v20 = 0;
    int v21 = 1;
    while (v19 != v10)
    {
      if (v19 == -1) {
        unsigned int v20 = v18;
      }
      unsigned int v17 = (v17 + v21) & v13;
      uint64_t v18 = (uint64_t *)(v12 + 16 * v17);
      uint64_t v19 = *v18;
      ++v21;
      if (!*v18)
      {
        if (v20)
        {
          *unsigned int v20 = 0;
          v20[1] = 0;
          --*(_DWORD *)(*v11 - 16);
          uint64_t v18 = v20;
        }
        goto LABEL_16;
      }
    }
    ++*(_DWORD *)v9;
    uint64_t v26 = v18[1];
    v18[1] = v9;
    if (v26) {
      WTF::RefCounted<WebKit::WebExtensionTab>::deref(v26);
    }
    goto LABEL_29;
  }
LABEL_16:
  uint64_t *v18 = v10;
  unint64_t v22 = *(_DWORD **)a3;
  _DWORD *v22 = **(_DWORD **)a3 + 1;
  uint64_t v23 = v18[1];
  v18[1] = (uint64_t)v22;
  if (v23) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v23);
  }
  uint64_t v24 = *v11;
  if (*v11) {
    int v25 = *(_DWORD *)(v24 - 12) + 1;
  }
  else {
    int v25 = 1;
  }
  *(_DWORD *)(v24 - 12) = v25;
  uint64_t v27 = *v11;
  if (*v11) {
    int v28 = *(_DWORD *)(v27 - 12);
  }
  else {
    int v28 = 0;
  }
  uint64_t v29 = (*(_DWORD *)(v27 - 16) + v28);
  unint64_t v30 = *(unsigned int *)(v27 - 4);
  if (v30 <= 0x400)
  {
    if (3 * v30 > 4 * v29) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v30 <= 2 * v29) {
LABEL_28:
  }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1 + 70);
LABEL_29:
  uint64_t v31 = (void *)a1[75];
  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v31);
  objc_claimAutoreleasedReturnValue();
  unsigned int v32 = [NSNumber numberWithUnsignedLongLong:v10];
  [v31 setObject:v32 forKey:v5];

  unsigned int v33 = qword_1EB357DF8;
  if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v34 = *(void *)(*(void *)a3 + 16);
    *(_DWORD *)uint64_t v35 = 134349056;
    *(void *)&v35[4] = v34;
    _os_log_debug_impl(&dword_1985F2000, v33, OS_LOG_TYPE_DEBUG, "Tab %{public}llu was created", v35, 0xCu);
  }
LABEL_31:
}

void sub_1993270F8(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  *BOOL v2 = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::getTab(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, WebKit::WebExtensionTab **a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2 == -2)
  {
LABEL_19:
    *a4 = 0;
    return;
  }
  uint64_t v8 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1[70], a2);
  if (!v8)
  {
    unint64_t v14 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      int v15 = 134349056;
      uint64_t v16 = a2;
      _os_log_error_impl(&dword_1985F2000, v14, OS_LOG_TYPE_ERROR, "Tab %{public}llu was not found", (uint8_t *)&v15, 0xCu);
    }
    goto LABEL_19;
  }
  uint64_t v9 = (WebKit::WebExtensionTab *)v8;
  ++*(_DWORD *)v8;
  uint64_t v10 = *(void *)(v8 + 24);
  if (v10
    && *(void *)(v10 + 8)
    && WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL((id *)(v8 + 32)))
  {
    if ((a3 & 1) != 0
      || !WebKit::WebExtensionTab::isPrivate(v9)
      || ((uint64_t v11 = *(void *)(*((void *)v9 + 3) + 8)) != 0 ? (v12 = v11 - 16) : (v12 = 0), *(unsigned char *)(v12 + 273)))
    {
      *a4 = v9;
      return;
    }
  }
  else
  {
    int v13 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      int v15 = 134349056;
      uint64_t v16 = a2;
      _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "Tab %{public}llu has nil delegate; reference not removed via didCloseTab: before release",
        (uint8_t *)&v15,
        0xCu);
    }
    WebKit::WebExtensionContext::forgetTab(a1, a2);
  }
  *a4 = 0;
  WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v9);
}

void sub_19932730C(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebExtensionContext::forgetTab(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = result[70];
  if (v2)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(v2 - 8);
    unint64_t v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    uint64_t v8 = v4 & ((v7 >> 31) ^ v7);
    uint64_t v9 = *(void *)(v2 + 16 * v8);
    if (v9 != a2)
    {
      int v10 = 1;
      while (v9)
      {
        uint64_t v8 = (v8 + v10) & v4;
        uint64_t v9 = *(void *)(v2 + 16 * v8);
        ++v10;
        if (v9 == a2) {
          goto LABEL_8;
        }
      }
      uint64_t v8 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(v2 - 4))
    {
      result += 70;
      uint64_t v11 = (void *)(v2 + 16 * v8);
      uint64_t v12 = v11 + 1;
      uint64_t v13 = v11[1];
      if (v13 && (*v12 = 0, (uint64_t v2 = *result) == 0) || (v2 += 16 * *(unsigned int *)(v2 - 4), (void *)v2 != v11))
      {
        if ((void *)v2 != v11)
        {
          void *v11 = -1;
          void *v12 = 0;
          ++*(_DWORD *)(*result - 16);
          uint64_t v14 = *result;
          int v15 = *result ? *(_DWORD *)(v14 - 12) - 1 : -1;
          *(_DWORD *)(v14 - 12) = v15;
          uint64_t v16 = *result;
          if (*result)
          {
            unsigned int v17 = 6 * *(_DWORD *)(v16 - 12);
            unsigned int v18 = *(_DWORD *)(v16 - 4);
            if (v17 < v18 && v18 >= 9) {
              BOOL result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(result, v18 >> 1);
            }
          }
        }
      }
      if (v13)
      {
        unsigned int v20 = (void *)v3[75];
        WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v20);
        objc_claimAutoreleasedReturnValue();
        id WeakRetained = objc_loadWeakRetained((id *)(v13 + 32));
        [v20 removeObjectForKey:WeakRetained];

        return (uint64_t *)WTF::RefCounted<WebKit::WebExtensionTab>::deref(v13);
      }
    }
  }
  return result;
}

void sub_1993274CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::getTab(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, char a6@<W5>, WebKit::WebExtensionTab **a7@<X8>)
{
  if (a4) {
    WebKit::WebExtensionContext::getTab(a1, a3, a6, a7);
  }
  else {
    WebKit::WebExtensionContext::getCurrentTab((uint64_t)a1, a2, a5, a6, a7);
  }
}

BOOL WebKit::WebExtensionContext::isBackgroundPage(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 328)) {
    return 0;
  }
  uint64_t v3 = WTF::RetainPtr<NSSet>::get((id *)(a1 + 328));
  [v3 _page];
  BOOL v4 = *(void *)(*(void *)(v6 + 32) + 760) == a2;

  return v4;
}

void sub_199327584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::begin(void *result, void *a2)
{
  uint64_t v2 = (void *)*a2;
  if (!*a2)
  {
    unint64_t v5 = 0;
    uint64_t v3 = 0;
LABEL_10:
    BOOL v4 = &v2[2 * v3];
    goto LABEL_11;
  }
  uint64_t v3 = *((unsigned int *)v2 - 1);
  BOOL v4 = &v2[2 * v3];
  if (!*((_DWORD *)v2 - 3))
  {
    unint64_t v5 = &v2[2 * v3];
    goto LABEL_10;
  }
  unint64_t v5 = (void *)*a2;
  if (v3)
  {
    uint64_t v6 = 16 * v3;
    unint64_t v5 = (void *)*a2;
    while ((unint64_t)(*v5 + 1) <= 1)
    {
      v5 += 2;
      v6 -= 16;
      if (!v6)
      {
        unint64_t v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  *BOOL result = a2;
  result[1] = v5;
  result[2] = v4;
  if (v2)
  {
    uint64_t v7 = *((unsigned int *)v2 - 1);
    uint64_t v8 = &v2[2 * v7];
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  result[3] = v8;
  result[4] = &v2[2 * v7];
  *((_DWORD *)result + 10) = 0;
  return WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(result);
}

uint64_t WebKit::WebExtensionContext::canOpenNewWindow(WebKit::WebExtensionContext *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = (id *)(v2 - 16);
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  BOOL v4 = WebKit::WebExtensionController::delegate(v3);
  char v5 = objc_opt_respondsToSelector();

  return v5 & 1;
}

void sub_199327684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::openNewWindow(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v7 = &unk_1EE9FEEE0;
  v7[1] = a1;
  void v7[2] = a1;
  void v7[3] = v6;
  uint64_t v9 = v7;
  WebKit::WebExtensionContext::windowsCreate(a1, a2, (uint64_t *)&v9);
  uint64_t result = (uint64_t)v9;
  uint64_t v9 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_199327748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::openNewTab(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v7 = &unk_1EE9FEF08;
  v7[1] = a1;
  void v7[2] = a1;
  void v7[3] = v6;
  uint64_t v9 = v7;
  WebKit::WebExtensionContext::tabsCreate(a1, 0, 0, a2, (uint64_t *)&v9);
  uint64_t result = (uint64_t)v9;
  uint64_t v9 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_19932787C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::didOpenWindow(uint64_t a1, WebKit::WebExtensionWindow *this, int a3, char a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!WebKit::WebExtensionWindow::isOpen(this))
  {
    uint64_t v8 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v23 = *((void *)this + 2);
      *(_DWORD *)buf = 134349056;
      *(void *)&uint8_t buf[4] = v23;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Opened window %{public}llu", buf, 0xCu);
    }
    *((_WORD *)this + 20) |= 1u;
    if (a3)
    {
      uint64_t v9 = *((void *)this + 2);
      if (!*(unsigned char *)(a1 + 552)) {
        *(unsigned char *)(a1 + 552) = 1;
      }
      *(void *)(a1 + 544) = v9;
      *(void *)buf = *((void *)this + 2);
      WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert(a1 + 528, (unint64_t)buf);
    }
    else
    {
      uint64_t v10 = *(unsigned int *)(a1 + 540);
      if (!v10)
      {
        uint64_t v11 = *((void *)this + 2);
        if (!*(unsigned char *)(a1 + 552)) {
          *(unsigned char *)(a1 + 552) = 1;
        }
        *(void *)(a1 + 544) = v11;
      }
      uint64_t v12 = (void *)(a1 + 528);
      uint64_t v13 = *((void *)this + 2);
      *(void *)buf = v13;
      if (v10 == *(_DWORD *)(a1 + 536)) {
        *(void *)(*(void *)(a1 + 528) + 8 * *(unsigned int *)(a1 + 540)) = *(void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v10 + 1, (unint64_t)buf);
      }
      else {
        *(void *)(*v12 + 8 * v10) = v13;
      }
      ++*(_DWORD *)(a1 + 540);
    }
    WebKit::WebExtensionWindow::tabs((uint64_t)this, 0, (uint64_t *)buf);
    if (*(_DWORD *)&buf[12])
    {
      int v15 = *(WebKit::WebExtensionTab ***)buf;
      uint64_t v16 = 8 * *(unsigned int *)&buf[12];
      do
      {
        unsigned int v17 = *v15;
        *(_DWORD *)unsigned int v17 = *(_DWORD *)*v15 + 1;
        WebKit::WebExtensionContext::didOpenTab(a1, v17, 0);
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v17);
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v14);
    uint64_t v18 = *(void *)(a1 + 72);
    if (v18 && *(void *)(v18 + 8))
    {
      if (!WebKit::WebExtensionWindow::isPrivate(this)
        || ((uint64_t v19 = *(void *)(*((void *)this + 3) + 8)) != 0 ? (v20 = v19 - 16) : (v20 = 0), *(unsigned char *)(v20 + 273)))
      {
        if ((a4 & 1) == 0)
        {
          WebKit::WebExtensionWindow::parameters((id *)this, 0, (uint64_t)buf);
          long long v24 = *(_OWORD *)buf;
          int v25 = v32;
          LOBYTE(v26[0]) = 0;
          char v27 = 0;
          if (v35)
          {
            v26[0] = v33;
            uint64_t v21 = v34;
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            v26[1] = v21;
            char v27 = 1;
          }
          long long v28 = v36;
          v29[0] = v37[0];
          *(_OWORD *)((char *)v29 + 12) = *(_OWORD *)((char *)v37 + 12);
          char v30 = 1;
          WebKit::WebExtensionContext::fireWindowsEventIfNeeded(a1, 55, &v24);
          if (v30 && v27) {
            WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v22);
          }
          if (v35) {
            WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v22);
          }
        }
      }
    }
  }
}

void sub_199327BCC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a21 && a14) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v28, a2);
  }
  if (a28) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a26, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::didFocusWindow(uint64_t a1, WebKit::WebExtensionWindow *this, char a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    if (!WebKit::WebExtensionWindow::isOpen(this)) {
      return;
    }
    uint64_t v6 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v34 = *((void *)this + 2);
      *(_DWORD *)buf = 134349056;
      *(void *)&uint8_t buf[4] = v34;
      _os_log_debug_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEBUG, "Focused window %{public}llu", buf, 0xCu);
    }
    *(void *)(a1 + 544) = *((void *)this + 2);
    *(unsigned char *)(a1 + 552) = 1;
    uint64_t v7 = *(char **)(a1 + 528);
    uint64_t v8 = *(unsigned int *)(a1 + 540);
    uint64_t v9 = &v7[8 * v8];
    if (v8)
    {
      LODWORD(v8) = 0;
      uint64_t v10 = *((void *)this + 2);
      uint64_t v11 = v9;
      uint64_t v12 = v9;
      do
      {
        if (*(void *)v7 == v10)
        {
          uint64_t v13 = v7;
          if (v12 != (char *)(*(void *)(a1 + 528) + 8 * *(unsigned int *)(a1 + 540)))
          {
            if (v11 == v7)
            {
              uint64_t v13 = v12;
            }
            else
            {
              if (v11 <= v12)
              {
                uint64_t v18 = 0;
                uint64_t v17 = (v7 - v11) >> 3;
                do
                {
                  *(void *)&v12[((v7 - v11) & 0xFFFFFFFFFFFFFFF8) - 8 + v18] = *(void *)&v7[v18 - 8];
                  v18 -= 8;
                }
                while (&v7[v18] != v11);
              }
              else
              {
                uint64_t v14 = v12;
                int v15 = v11;
                do
                {
                  uint64_t v16 = *(void *)v15;
                  v15 += 8;
                  *(void *)uint64_t v14 = v16;
                  v14 += 8;
                }
                while (v15 != v7);
                uint64_t v17 = (v7 - v11) >> 3;
              }
              uint64_t v13 = &v12[8 * v17];
            }
          }
          uint64_t v11 = v7 + 8;
          LODWORD(v8) = v8 + 1;
          uint64_t v12 = v13;
        }
        v7 += 8;
      }
      while (v7 < v9);
      uint64_t v7 = *(char **)(a1 + 528);
      uint64_t v19 = *(unsigned int *)(a1 + 540);
      uint64_t v9 = v12;
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v11 = &v7[8 * v8];
    }
    uint64_t v21 = &v7[8 * v19];
    if (v11 != v21)
    {
      if (v11 <= v9)
      {
        uint64_t v23 = &v9[((v21 - v11) & 0xFFFFFFFFFFFFFFF8) - 8];
        do
        {
          uint64_t v24 = *((void *)v21 - 1);
          v21 -= 8;
          *(void *)uint64_t v23 = v24;
          v23 -= 8;
        }
        while (v21 != v11);
      }
      else
      {
        do
        {
          uint64_t v22 = *(void *)v11;
          v11 += 8;
          *(void *)uint64_t v9 = v22;
          v9 += 8;
        }
        while (v11 != v21);
      }
    }
    *(_DWORD *)(a1 + 540) -= v8;
    *(void *)buf = *((void *)this + 2);
    WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert(a1 + 528, (unint64_t)buf);
  }
  else
  {
    uint64_t v20 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1985F2000, v20, OS_LOG_TYPE_DEBUG, "No window focused", buf, 2u);
    }
    *(void *)(a1 + 544) = 0;
    *(unsigned char *)(a1 + 552) = 0;
  }
  uint64_t v25 = *(void *)(a1 + 72);
  if (v25 && *(void *)(v25 + 8))
  {
    if (this)
    {
      if (WebKit::WebExtensionWindow::isPrivate(this))
      {
        uint64_t v26 = *(void *)(*((void *)this + 3) + 8);
        uint64_t v27 = v26 ? v26 - 16 : 0;
        if (!*(unsigned char *)(v27 + 273)) {
          return;
        }
      }
      if (a3) {
        return;
      }
      *(void *)buf = *((void *)this + 2);
      char v28 = 1;
      uint8_t buf[8] = 1;
      LOWORD(v43) = 0;
      BOOL v29 = WebKit::WebExtensionWindow::type(this);
      LOBYTE(v46) = 0;
      v47[16] = 0;
      *(_DWORD *)&v47[24] = 0;
      long long v35 = *(_OWORD *)buf;
      long long v39 = v46;
      v40[0] = *(_OWORD *)v47;
      *(_OWORD *)((char *)v40 + 12) = *(_OWORD *)&v47[12];
      BYTE2(v43) = v29;
      HIBYTE(v43) = 1;
      char v44 = 0;
      char v45 = 0;
      int v36 = v43;
      v37[0] = 0;
      char v38 = 0;
    }
    else
    {
      if (a3) {
        return;
      }
      char v28 = 0;
      LOBYTE(v35) = 0;
    }
    char v41 = v28;
    WebKit::WebExtensionContext::fireWindowsEventIfNeeded(a1, 56, &v35);
    if (v41) {
      BOOL v31 = v38 == 0;
    }
    else {
      BOOL v31 = 1;
    }
    char v32 = v31;
    if (!this)
    {
      if (v32) {
        return;
      }
      uint64_t v33 = (uint8_t *)&v35;
      goto LABEL_58;
    }
    if ((v32 & 1) == 0) {
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v30);
    }
    if (v45)
    {
      uint64_t v33 = buf;
LABEL_58:
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v33 + 24), v30);
    }
  }
}

void sub_199327FC8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a21) {
    BOOL v30 = a14 == 0;
  }
  else {
    BOOL v30 = 1;
  }
  char v31 = v30;
  if (v28)
  {
    if ((v31 & 1) == 0) {
      WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
    }
    if (!a28) {
LABEL_15:
    }
      _Unwind_Resume(exception_object);
    char v32 = (uint64_t *)&a23;
  }
  else
  {
    if (v31) {
      goto LABEL_15;
    }
    char v32 = &a9;
  }
  WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v32 + 3), a2);
  goto LABEL_15;
}

unsigned int *WebKit::WebExtensionContext::openWindows@<X0>(unsigned int *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v4 = result[135];
  if (v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      goto LABEL_42;
    }
    char v5 = (char)a2;
    uint64_t v6 = result;
    uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(a3 + 8) = v4;
    *(void *)a3 = result;
    uint64_t v7 = v6[135];
    if (v7)
    {
      uint64_t v8 = (uint64_t *)*((void *)v6 + 66);
      uint64_t v9 = 8 * v7;
      while (1)
      {
        uint64_t v10 = (WebKit::WebExtensionWindow *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*((void *)v6 + 65), *v8);
        uint64_t v11 = (uint64_t)v10;
        if (v10) {
          ++*(_DWORD *)v10;
        }
        if ((v5 & 1) != 0
          || !WebKit::WebExtensionWindow::isPrivate(v10)
          || ((v12 = *(void *)(*(void *)(v11 + 24) + 8)) != 0 ? (uint64_t v13 = v12 - 16) : (uint64_t v13 = 0),
              *(unsigned char *)(v13 + 273)))
        {
          ++*(_DWORD *)v11;
          WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v11);
          uint64_t v24 = (unsigned int *)v11;
          uint64_t v14 = *(unsigned int *)(a3 + 12);
          if (v14 == *(_DWORD *)(a3 + 8))
          {
            int v15 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v14 + 1, (unint64_t)&v24);
            uint64_t v14 = *(unsigned int *)(a3 + 12);
            uint64_t v16 = *(WTF **)a3;
            uint64_t v17 = *v15;
            uint64_t *v15 = 0;
            *((void *)v16 + v14) = v17;
          }
          else
          {
            uint64_t v18 = *(WTF **)a3;
            uint64_t v24 = 0;
            *((void *)v18 + v14) = v11;
          }
          *(_DWORD *)(a3 + 12) = v14 + 1;
          uint64_t result = v24;
          uint64_t v24 = 0;
          if (!result) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t result = (unsigned int *)v11;
        }
        uint64_t result = (unsigned int *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)result);
LABEL_18:
        ++v8;
        v9 -= 8;
        if (!v9)
        {
          LODWORD(v4) = *(_DWORD *)(a3 + 8);
          unint64_t v19 = *(unsigned int *)(a3 + 12);
          goto LABEL_22;
        }
      }
    }
  }
  unint64_t v19 = 0;
LABEL_22:
  if (v19 < v4)
  {
    unint64_t v20 = *(unsigned int *)(a3 + 12);
    uint64_t v21 = *(WTF **)a3;
    if (v19 < v20)
    {
      uint64_t v22 = (unsigned int **)((char *)v21 + 8 * v19);
      uint64_t v23 = 8 * v20 - 8 * v19;
      do
      {
        uint64_t result = *v22;
        void *v22 = 0;
        if (result) {
          uint64_t result = (unsigned int *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)result);
        }
        ++v22;
        v23 -= 8;
      }
      while (v23);
      *(_DWORD *)(a3 + 12) = v19;
      uint64_t v21 = *(WTF **)a3;
      LODWORD(v20) = v19;
    }
    if (!v19) {
      goto LABEL_35;
    }
    if (*(_DWORD *)(a3 + 8))
    {
      *(_DWORD *)(a3 + 8) = v19;
      uint64_t result = (unsigned int *)WTF::fastRealloc(v21, (void *)(8 * v19));
      *(void *)a3 = result;
      return result;
    }
    if (!(v19 >> 29))
    {
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v19));
      *(_DWORD *)(a3 + 8) = v19;
      *(void *)a3 = result;
      if (result != (unsigned int *)v21) {
        uint64_t result = (unsigned int *)memcpy(result, v21, 8 * v20);
      }
LABEL_35:
      if (v21)
      {
        if (*(WTF **)a3 == v21)
        {
          *(void *)a3 = 0;
          *(_DWORD *)(a3 + 8) = 0;
        }
        return (unsigned int *)WTF::fastFree(v21, a2);
      }
      return result;
    }
    __break(0xC471u);
LABEL_42:
    JUMPOUT(0x19932823CLL);
  }
  return result;
}

void sub_199328248(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert(unint64_t result, unint64_t a2)
{
  uint64_t v2 = (void *)a2;
  unint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 12);
  if (v4 == *(_DWORD *)(result + 8))
  {
    uint64_t result = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v4 + 1, a2);
    uint64_t v2 = (void *)result;
    LODWORD(v4) = *(_DWORD *)(v3 + 12);
  }
  char v5 = *(void **)v3;
  if (v4)
  {
    uint64_t v6 = v4;
    do
    {
      v5[v6] = v5[v6 - 1];
      --v6;
    }
    while (v6 * 8);
  }
  *char v5 = *v2;
  ++*(_DWORD *)(v3 + 12);
  return result;
}

void WebKit::WebExtensionContext::didOpenTab(uint64_t a1, WebKit::WebExtensionTab *this, char a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!WebKit::WebExtensionTab::isOpen(this))
  {
    uint64_t v6 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *((void *)this + 2);
      LODWORD(v14) = 134349056;
      *(void *)((char *)&v14 + 4) = v12;
      _os_log_debug_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEBUG, "Opened tab %{public}llu", (uint8_t *)&v14, 0xCu);
    }
    *(_DWORD *)((char *)this + 50) |= 2u;
    uint64_t v7 = *(void *)(a1 + 72);
    if (v7 && *(void *)(v7 + 8))
    {
      if (!WebKit::WebExtensionTab::isPrivate(this)
        || ((uint64_t v8 = *(void *)(*((void *)this + 3) + 8)) != 0 ? (v9 = v8 - 16) : (v9 = 0), *(unsigned char *)(v9 + 273)))
      {
        if ((a3 & 1) == 0)
        {
          WebKit::WebExtensionTab::parameters(this, (uint64_t)&v14);
          WebKit::WebExtensionContext::fireTabsCreatedEventIfNeeded(a1, &v14);
          if (v18)
          {
            uint64_t v11 = v17;
            uint64_t v17 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 2) {
                WTF::StringImpl::destroy(v11, v10);
              }
              else {
                *(_DWORD *)v11 -= 2;
              }
            }
          }
          if (v16)
          {
            uint64_t v13 = v15;
            int v15 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2) {
                WTF::StringImpl::destroy(v13, v10);
              }
              else {
                *(_DWORD *)v13 -= 2;
              }
            }
          }
        }
      }
    }
  }
}

void sub_199328490(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, WTF::StringImpl *a17, char a18)
{
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (a16 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::didCloseWindow(WebKit::WebExtensionContext *this, WebKit::WebExtensionWindow *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t result = WebKit::WebExtensionWindow::isOpen(a2);
  if (result)
  {
    char v5 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *((void *)a2 + 2);
      *(_DWORD *)buf = 134349056;
      *(void *)&uint8_t buf[4] = v15;
      _os_log_debug_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEBUG, "Closed window %{public}llu", buf, 0xCu);
    }
    ++*(_DWORD *)a2;
    *((_WORD *)a2 + 20) &= ~1u;
    WebKit::WebExtensionContext::forgetWindow((uint64_t)this, *((void *)a2 + 2));
    WebKit::WebExtensionWindow::tabs((uint64_t)a2, 0, (uint64_t *)buf);
    if (*(_DWORD *)&buf[12])
    {
      uint64_t v7 = *(WebKit::WebExtensionTab ***)buf;
      uint64_t v8 = 8 * *(unsigned int *)&buf[12];
      do
      {
        uint64_t v9 = *v7;
        *(_DWORD *)uint64_t v9 = *(_DWORD *)*v7 + 1;
        WebKit::WebExtensionContext::didCloseTab((uint64_t *)this, v9, 1, 0);
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v9);
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
    WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v6);
    uint64_t v10 = *((void *)this + 9);
    if (v10 && *(void *)(v10 + 8))
    {
      if (!WebKit::WebExtensionWindow::isPrivate(a2)
        || ((uint64_t v11 = *(void *)(*((void *)a2 + 3) + 8)) != 0 ? (v12 = v11 - 16) : (v12 = 0), *(unsigned char *)(v12 + 273)))
      {
        *(void *)buf = *((void *)a2 + 2);
        uint8_t buf[8] = 1;
        LOWORD(v24) = 0;
        BOOL v13 = WebKit::WebExtensionWindow::type(a2);
        LOBYTE(v27) = 0;
        v28[16] = 0;
        *(_DWORD *)&unsigned char v28[24] = 0;
        long long v16 = *(_OWORD *)buf;
        long long v20 = v27;
        v21[0] = *(_OWORD *)v28;
        *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)&v28[12];
        BYTE2(v24) = v13;
        HIBYTE(v24) = 1;
        v25[0] = 0;
        char v26 = 0;
        int v17 = v24;
        v18[0] = 0;
        char v19 = 0;
        char v22 = 1;
        WebKit::WebExtensionContext::fireWindowsEventIfNeeded((uint64_t)this, 57, &v16);
        if (v22 && v19) {
          WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v14);
        }
        if (v26) {
          WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v14);
        }
      }
    }
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)a2);
  }
  return result;
}

void sub_199328734(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a21 && a14) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30, a2);
  }
  if (a28) {
    WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, a2);
  }
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v28);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebExtensionContext::didCloseTab(uint64_t *a1, WebKit::WebExtensionTab *this, int a3, char a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (WebKit::WebExtensionTab::isOpen(this))
  {
    uint64_t v8 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
    {
      int v17 = "";
      uint64_t v18 = *((void *)this + 2);
      if (a3) {
        int v17 = "(window closing)";
      }
      *(_DWORD *)char v19 = 134349314;
      *(void *)&v19[4] = v18;
      __int16 v20 = 2082;
      uint64_t v21 = v17;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Closed tab %{public}llu %{public}s", v19, 0x16u);
    }
    ++*(_DWORD *)this;
    unint64_t v9 = *(_DWORD *)((unsigned char *)this + 50) & 0xFFFFFFFD | ((unint64_t)*((unsigned __int8 *)this + 54) << 32);
    *(_DWORD *)((char *)this + 50) &= ~2u;
    *((unsigned char *)this + 54) = BYTE4(v9);
    WebKit::WebExtensionContext::forgetTab(a1, *((void *)this + 2));
    uint64_t v10 = a1[9];
    if (v10 && *(void *)(v10 + 8))
    {
      if (!WebKit::WebExtensionTab::isPrivate(this)
        || ((uint64_t v11 = *(void *)(*((void *)this + 3) + 8)) != 0 ? (v12 = v11 - 16) : (v12 = 0), *(unsigned char *)(v12 + 273)))
      {
        if ((a4 & 1) == 0)
        {
          WebKit::WebExtensionTab::window(this, v19);
          uint64_t v15 = *(void *)v19;
          if (*(void *)v19) {
            uint64_t v16 = *(void *)(*(void *)v19 + 16);
          }
          else {
            uint64_t v16 = -2;
          }
          WebKit::WebExtensionContext::fireTabsRemovedEventIfNeeded((uint64_t)a1, *((void *)this + 2), v16, a3);
          if (v15) {
            WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v15);
          }
        }
      }
    }
    return (uint64_t *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)this);
  }
  else
  {
    uint64_t v13 = *((void *)this + 2);
    return WebKit::WebExtensionContext::forgetTab(a1, v13);
  }
}

void sub_1993289A0(_Unwind_Exception *a1)
{
  if (v2) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v2);
  }
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::didActivateTab(WebKit::WebExtensionContext *this, uint64_t a2, const WebKit::WebExtensionTab *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!WebKit::WebExtensionTab::isOpen((WebKit::WebExtensionTab *)a2)) {
    return;
  }
  ++*(_DWORD *)a2;
  *(void *)uint64_t v30 = 0;
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::expand((uint64_t *)v30, 0);
  if (*(void *)v30) {
    int v6 = *(_DWORD *)(*(void *)v30 - 8);
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  unsigned int v11 = (v10 >> 31) ^ v10;
  for (int i = 1; ; ++i)
  {
    unsigned int v13 = v11 & v6;
    long long v14 = (uint64_t *)(*(void *)v30 + 8 * v13);
    uint64_t v15 = (const WebKit::WebExtensionTab *)*v14;
    if (*v14 == -1)
    {
      uint64_t v7 = (uint64_t *)(*(void *)v30 + 8 * v13);
      goto LABEL_11;
    }
    if (!v15) {
      break;
    }
    if (v15 == (const WebKit::WebExtensionTab *)a2) {
      goto LABEL_23;
    }
LABEL_11:
    unsigned int v11 = i + v13;
  }
  if (v7)
  {
    uint64_t *v7 = 0;
    --*(_DWORD *)(*(void *)v30 - 16);
    long long v14 = v7;
  }
  int v16 = *(_DWORD *)a2;
  uint64_t *v14 = a2;
  *(_DWORD *)a2 = v16 + 1;
  if (*(void *)v30) {
    int v17 = *(_DWORD *)(*(void *)v30 - 12) + 1;
  }
  else {
    int v17 = 1;
  }
  *(_DWORD *)(*(void *)v30 - 12) = v17;
  if (*(void *)v30) {
    int v18 = *(_DWORD *)(*(void *)v30 - 12);
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = (*(_DWORD *)(*(void *)v30 - 16) + v18);
  unint64_t v20 = *(unsigned int *)(*(void *)v30 - 4);
  if (v20 > 0x400)
  {
    if (v20 <= 2 * v19) {
LABEL_22:
    }
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::expand((uint64_t *)v30, v14);
  }
  else if (3 * v20 <= 4 * v19)
  {
    goto LABEL_22;
  }
LABEL_23:
  WebKit::WebExtensionContext::didSelectOrDeselectTabs((uint64_t)this, (WebKit::WebExtensionTab ***)v30);
  if (*(void *)v30) {
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::deallocateTable(*(uint64_t **)v30, v21);
  }
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(a2);
  uint64_t v22 = qword_1EB357DF8;
  if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v29 = *(void *)(a2 + 16);
    *(_DWORD *)uint64_t v30 = 134349056;
    *(void *)&v30[4] = v29;
    _os_log_debug_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEBUG, "Activated tab %{public}llu", v30, 0xCu);
  }
  uint64_t v23 = *((void *)this + 9);
  if (v23 && *(void *)(v23 + 8))
  {
    if (!WebKit::WebExtensionTab::isPrivate((WebKit::WebExtensionTab *)a2)
      || ((v24 = *(void *)(*(void *)(a2 + 24) + 8)) != 0 ? (uint64_t v25 = v24 - 16) : (uint64_t v25 = 0), *(unsigned char *)(v25 + 273)))
    {
      WebKit::WebExtensionTab::window((WebKit::WebExtensionTab *)a2, v30);
      uint64_t v26 = *(void *)v30;
      if (*(void *)v30)
      {
        uint64_t v27 = *(void *)(*(void *)v30 + 16);
        if (a3) {
          goto LABEL_36;
        }
LABEL_38:
        uint64_t v28 = -2;
      }
      else
      {
        uint64_t v27 = -2;
        if (!a3) {
          goto LABEL_38;
        }
LABEL_36:
        uint64_t v28 = *((void *)a3 + 2);
      }
      WebKit::WebExtensionContext::fireTabsActivatedEventIfNeeded((uint64_t)this, v28, *(void *)(a2 + 16), v27);
      if (v26) {
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v26);
      }
    }
  }
}

void sub_199328C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v9) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::didSelectOrDeselectTabs(uint64_t result, WebKit::WebExtensionTab ***a2)
{
  uint64_t v47 = result;
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  int v51 = 0;
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = *((unsigned int *)v2 - 1);
    uint64_t v4 = &v2[v3];
    if (*((_DWORD *)v2 - 3))
    {
      char v5 = *a2;
      if (v3)
      {
        uint64_t v6 = 8 * v3;
        char v5 = *a2;
        while ((unint64_t)*v5 + 1 <= 1)
        {
          ++v5;
          v6 -= 8;
          if (!v6)
          {
            char v5 = v4;
            break;
          }
        }
      }
      if (v2) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
    char v5 = &v2[v3];
  }
  else
  {
    char v5 = 0;
    uint64_t v3 = 0;
  }
  uint64_t v4 = &v2[v3];
  if (v2)
  {
LABEL_9:
    uint64_t v7 = &v2[*((unsigned int *)v2 - 1)];
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v7 = 0;
LABEL_14:
  while (v5 != v7)
  {
    unint64_t v8 = *v5;
    *(_DWORD *)unint64_t v8 = *(_DWORD *)*v5 + 1;
    if (!WebKit::WebExtensionTab::isOpen(v8)) {
      goto LABEL_58;
    }
    WebKit::WebExtensionTab::window(v8, &v50);
    uint64_t v9 = v50;
    if (!v50) {
      goto LABEL_58;
    }
    if (WebKit::WebExtensionWindow::isPrivate(v50)
      && ((uint64_t v10 = *(void *)(*((void *)v9 + 3) + 8)) != 0 ? (v11 = v10 - 16) : (v11 = 0), !*(unsigned char *)(v11 + 273))
      || !WebKit::WebExtensionWindow::isOpen(v9))
    {
      uint64_t v50 = 0;
LABEL_57:
      WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v9);
      goto LABEL_58;
    }
    uint64_t v12 = *((void *)v9 + 2);
    uint64_t v13 = (uint64_t)v51;
    if (v51
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)&v51),
          (uint64_t v13 = (uint64_t)v51) != 0))
    {
      int v14 = *(_DWORD *)(v13 - 8);
    }
    else
    {
      int v14 = 0;
    }
    unint64_t v15 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
    unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
    uint64_t v19 = (void *)(v13 + 24 * v18);
    uint64_t v20 = *v19;
    if (*v19)
    {
      uint64_t v21 = 0;
      int v22 = 1;
      while (v20 != v12)
      {
        if (v20 == -1) {
          uint64_t v21 = v19;
        }
        unsigned int v18 = (v18 + v22) & v14;
        uint64_t v19 = (void *)(v13 + 24 * v18);
        uint64_t v20 = *v19;
        ++v22;
        if (!*v19)
        {
          if (v21)
          {
            void *v21 = 0;
            v21[1] = 0;
            _OWORD v21[2] = 0;
            --*(_DWORD *)(v13 - 16);
            uint64_t v19 = v21;
          }
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_34:
      *uint64_t v19 = v12;
      uint64_t v23 = qword_1EB357DF8;
      BOOL v24 = os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG);
      uint64_t v9 = v50;
      if (v24)
      {
        uint64_t v40 = *((void *)v50 + 2);
        *(_DWORD *)unsigned int v55 = 134349056;
        *(void *)&v55[4] = v40;
        _os_log_debug_impl(&dword_1985F2000, v23, OS_LOG_TYPE_DEBUG, "Selected tabs changed for window %{public}llu", v55, 0xCu);
      }
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      WebKit::WebExtensionWindow::tabs((uint64_t)v9, 0, (uint64_t *)v55);
      if (v56)
      {
        uint64_t v26 = *(WebKit::WebExtensionTab ***)v55;
        uint64_t v27 = 8 * v56;
        do
        {
          uint64_t v28 = *v26;
          *(_DWORD *)uint64_t v28 = *(_DWORD *)*v26 + 1;
          if (WebKit::WebExtensionTab::isSelected(v28))
          {
            uint64_t v29 = qword_1EB357DF8;
            if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v32 = *((void *)v28 + 2);
              *(_DWORD *)buf = 134349056;
              *(void *)&uint8_t buf[4] = v32;
              _os_log_debug_impl(&dword_1985F2000, v29, OS_LOG_TYPE_DEBUG, "Selected tab %{public}llu", buf, 0xCu);
            }
            uint64_t v30 = *((void *)v28 + 2);
            *(void *)buf = v30;
            if (HIDWORD(v53) == v53)
            {
              uint64_t v31 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v52, HIDWORD(v53) + 1, (unint64_t)buf);
              *(void *)(v52 + 8 * HIDWORD(v53)) = *v31;
            }
            else
            {
              *(void *)(v52 + 8 * HIDWORD(v53)) = v30;
            }
            ++HIDWORD(v53);
          }
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v28);
          ++v26;
          v27 -= 8;
        }
        while (v27);
      }
      WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v55, v25);
      uint64_t v34 = (WTF *)v19[1];
      if (v34)
      {
        v19[1] = 0;
        *((_DWORD *)v19 + 4) = 0;
        WTF::fastFree(v34, v33);
      }
      v19[1] = v52;
      _OWORD v19[2] = v53;
      uint64_t v35 = (uint64_t)v51;
      if (v51) {
        int v36 = *((_DWORD *)v51 - 3) + 1;
      }
      else {
        int v36 = 1;
      }
      *((_DWORD *)v51 - 3) = v36;
      uint64_t v37 = (*(_DWORD *)(v35 - 16) + v36);
      unint64_t v38 = *(unsigned int *)(v35 - 4);
      if (v38 <= 0x400)
      {
        if (3 * v38 > 4 * v37) {
          goto LABEL_56;
        }
LABEL_55:
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)&v51);
        goto LABEL_56;
      }
      if (v38 <= 2 * v37) {
        goto LABEL_55;
      }
    }
LABEL_56:
    uint64_t v50 = 0;
    if (v9) {
      goto LABEL_57;
    }
LABEL_58:
    uint64_t result = WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v8);
    long long v39 = v5 + 1;
    char v5 = v4;
    if (v39 != v4)
    {
      char v5 = v39;
      while ((unint64_t)*v5 + 1 <= 1)
      {
        if (++v5 == v4)
        {
          char v5 = v4;
          break;
        }
      }
    }
  }
  uint64_t v41 = *(void *)(v47 + 72);
  if (v41 && *(void *)(v41 + 8))
  {
    if (!v51) {
      return result;
    }
    if (*((_DWORD *)v51 - 3))
    {
      uint64_t v42 = *((unsigned int *)v51 - 1);
      if (v42)
      {
        uint64_t v43 = 24 * v42;
        char v44 = v51;
        while ((unint64_t)(*v44 + 1) <= 1)
        {
          v44 += 3;
          v43 -= 24;
          if (!v43) {
            goto LABEL_84;
          }
        }
      }
      else
      {
        char v44 = v51;
      }
      char v45 = &v51[3 * v42];
      if (v45 != v44)
      {
LABEL_79:
        WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v48, (uint64_t)(v44 + 1));
        WebKit::WebExtensionContext::fireTabsHighlightedEventIfNeeded(v47, (uint64_t)&v48, *v44);
        long long v46 = v48;
        if (v48)
        {
          uint64_t v48 = 0;
          int v49 = 0;
          WTF::fastFree(v46, a2);
        }
        while (1)
        {
          v44 += 3;
          if (v44 == v45) {
            break;
          }
          if ((unint64_t)(*v44 + 1) > 1)
          {
            if (v44 != v45) {
              goto LABEL_79;
            }
            break;
          }
        }
      }
    }
  }
LABEL_84:
  uint64_t result = (uint64_t)v51;
  if (v51) {
    return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::deallocateTable((uint64_t)v51, a2);
  }
  return result;
}

void sub_1993291C0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a13) {
    WTF::fastFree(a13, a2);
  }
  if (a16) {
    WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::deallocateTable(a16, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::didMoveTab(WebKit::WebExtensionContext *this, WebKit::WebExtensionTab *a2, uint64_t a3, const WebKit::WebExtensionWindow *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (!a4 || WebKit::WebExtensionTab::isOpen(a2))
  {
    WebKit::WebExtensionTab::window(a2, &v35);
    uint64_t v8 = WebKit::WebExtensionTab::index(a2);
    uint64_t v9 = v35;
    if (v35)
    {
      uint64_t v10 = qword_1EB357DF8;
      BOOL v11 = os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG);
      if (v9 == a4)
      {
        if (!v11) {
          goto LABEL_20;
        }
        uint64_t v23 = *((void *)a2 + 2);
        *(_DWORD *)buf = 134349568;
        uint64_t v37 = v23;
        __int16 v38 = 2050;
        uint64_t v39 = a3;
        __int16 v40 = 2050;
        uint64_t v41 = v8;
        int v14 = "Moved tab %{public}llu from index %{public}zu to index %{public}zu (in same window)";
        goto LABEL_15;
      }
      if (a4)
      {
        if (!v11) {
          goto LABEL_20;
        }
        uint64_t v12 = *((void *)a2 + 2);
        uint64_t v13 = *((void *)v9 + 2);
        *(_DWORD *)buf = 134349568;
        uint64_t v37 = v12;
        __int16 v38 = 2050;
        uint64_t v39 = v13;
        __int16 v40 = 2050;
        uint64_t v41 = v8;
        int v14 = "Moved tab %{public}llu to window %{public}llu at index %{public}zu";
LABEL_15:
        uint64_t v21 = v10;
        uint32_t v22 = 32;
LABEL_16:
        _os_log_debug_impl(&dword_1985F2000, v21, OS_LOG_TYPE_DEBUG, v14, buf, v22);
        goto LABEL_20;
      }
      if (v11)
      {
        uint64_t v33 = *((void *)a2 + 2);
        uint64_t v34 = *((void *)v9 + 2);
        *(_DWORD *)buf = 134349568;
        uint64_t v37 = v33;
        __int16 v38 = 2050;
        uint64_t v39 = v34;
        __int16 v40 = 2050;
        uint64_t v41 = v8;
        _os_log_debug_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEBUG, "Added tab %{public}llu to window %{public}llu at index %{public}zu", buf, 0x20u);
      }
    }
    else if (a4)
    {
      uint64_t v18 = qword_1EB357DF8;
      if (!os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_20;
      }
      uint64_t v19 = *((void *)a2 + 2);
      uint64_t v20 = *((void *)a4 + 2);
      *(_DWORD *)buf = 134349312;
      uint64_t v37 = v19;
      __int16 v38 = 2050;
      uint64_t v39 = v20;
      int v14 = "Moved tab %{public}llu out of window %{public}llu";
      uint64_t v21 = v18;
      uint32_t v22 = 22;
      goto LABEL_16;
    }
    WebKit::WebExtensionContext::didOpenTab((uint64_t)this, a2, 0);
LABEL_20:
    uint64_t v24 = *((void *)this + 9);
    if (v24 && *(void *)(v24 + 8))
    {
      if (!WebKit::WebExtensionTab::isPrivate(a2)
        || ((v25 = *(void *)(*((void *)a2 + 3) + 8)) != 0 ? (uint64_t v26 = v25 - 16) : (uint64_t v26 = 0), *(unsigned char *)(v26 + 273)))
      {
        if (v9)
        {
          if (v9 == a4)
          {
            if (v8 != a3) {
              WebKit::WebExtensionContext::fireTabsMovedEventIfNeeded((uint64_t)this, *((void *)a2 + 2), *((void *)a4 + 2), a3, v8);
            }
LABEL_39:
            WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v9);
            return;
          }
          uint64_t v29 = *((void *)a2 + 2);
          uint64_t v28 = (uint64_t *)((char *)a2 + 16);
          uint64_t v27 = v29;
          if (a4) {
            uint64_t v30 = *((void *)a4 + 2);
          }
          else {
            uint64_t v30 = -2;
          }
          WebKit::WebExtensionContext::fireTabsDetachedEventIfNeeded((uint64_t)this, v27, v30, a3);
          uint64_t v32 = *((void *)v9 + 2);
        }
        else
        {
          if (!a4) {
            return;
          }
          uint64_t v31 = *((void *)a2 + 2);
          uint64_t v28 = (uint64_t *)((char *)a2 + 16);
          WebKit::WebExtensionContext::fireTabsDetachedEventIfNeeded((uint64_t)this, v31, *((void *)a4 + 2), a3);
          uint64_t v32 = -2;
        }
        WebKit::WebExtensionContext::fireTabsAttachedEventIfNeeded((uint64_t)this, *v28, v32, v8);
      }
    }
    if (!v9) {
      return;
    }
    goto LABEL_39;
  }
  unint64_t v15 = qword_1EB357DF8;
  if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v16 = *((void *)a2 + 2);
    uint64_t v17 = *((void *)a4 + 2);
    *(_DWORD *)buf = 134349568;
    uint64_t v37 = v16;
    __int16 v38 = 2050;
    uint64_t v39 = a3;
    __int16 v40 = 2050;
    uint64_t v41 = v17;
    _os_log_error_impl(&dword_1985F2000, v15, OS_LOG_TYPE_ERROR, "Moved tab %{public}llu to index %{public}zu from window %{public}llu, but tab is not open", buf, 0x20u);
  }
}

void sub_1993295C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void WebKit::WebExtensionContext::didReplaceTab(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (WebKit::WebExtensionTab::operator==((uint64_t)a2, (uint64_t)a3))
  {
    uint64_t v8 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = a3[2];
      int v19 = 134349056;
      uint64_t v20 = v9;
      _os_log_error_impl(&dword_1985F2000, v8, OS_LOG_TYPE_ERROR, "Replaced tab %{public}llu with the same tab", (uint8_t *)&v19, 0xCu);
    }
  }
  else
  {
    ++*(_DWORD *)a2;
    WebKit::WebExtensionContext::didOpenTab((uint64_t)a1, (WebKit::WebExtensionTab *)a3, a4);
    isOpeint n = WebKit::WebExtensionTab::isOpen((WebKit::WebExtensionTab *)a2);
    BOOL v11 = qword_1EB357DF8;
    if (isOpen)
    {
      if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = a2[2];
        uint64_t v16 = a3[2];
        int v19 = 134349312;
        uint64_t v20 = v15;
        __int16 v21 = 2050;
        uint64_t v22 = v16;
        _os_log_debug_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEBUG, "Replaced tab %{public}llu with tab %{public}llu", (uint8_t *)&v19, 0x16u);
      }
      uint64_t v12 = a1[9];
      if (v12 && *(void *)(v12 + 8))
      {
        if (!WebKit::WebExtensionTab::isPrivate((WebKit::WebExtensionTab *)a3)
          || ((uint64_t v13 = *(void *)(a3[3] + 8)) != 0 ? (v14 = v13 - 16) : (v14 = 0), *(unsigned char *)(v14 + 273)))
        {
          if (!a4) {
            WebKit::WebExtensionContext::fireTabsReplacedEventIfNeeded((uint64_t)a1, a2[2], a3[2]);
          }
        }
      }
      WebKit::WebExtensionContext::didCloseTab(a1, (WebKit::WebExtensionTab *)a2, 0, a4);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = a2[2];
        uint64_t v18 = a3[2];
        int v19 = 134349312;
        uint64_t v20 = v17;
        __int16 v21 = 2050;
        uint64_t v22 = v18;
        _os_log_error_impl(&dword_1985F2000, v11, OS_LOG_TYPE_ERROR, "Replaced tab %{public}llu with tab %{public}llu, but old tab is not open", (uint8_t *)&v19, 0x16u);
      }
      WebKit::WebExtensionContext::forgetTab(a1, a2[2]);
    }
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)a2);
  }
}

void sub_19932982C(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::didStartProvisionalLoadForFrame(CFTypeRef *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  WebKit::WebExtensionContext::getCurrentTab((uint64_t)a1, a2, 0, 0, &v26);
  BOOL v11 = v26;
  if (v26)
  {
    MEMORY[0x19972EAD0](v21, @"webNavigation");
    BOOL v13 = (WebKit::WebExtensionContext::permissionState((WTF::StringImpl *)a1, v21, v11, 2) & 0xFFFFFFFE) == 2
       && (WebKit::WebExtensionContext::permissionState((uint64_t)a1, (URL *)a5, (URL *)v11, 3) & 0xFFFFFFFE) == 2;
    uint64_t v14 = v21[0];
    v21[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v12);
        if (!v13)
        {
LABEL_22:
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
          return;
        }
LABEL_11:
        char v24 = 41;
        WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v25, &v24, 1);
        CFRetain(a1[1]);
        ++*(_DWORD *)v11;
        uint64_t v15 = *(WTF::StringImpl **)a5;
        if (*(void *)a5) {
          *(_DWORD *)v15 += 2;
        }
        long long v16 = *(_OWORD *)(a5 + 24);
        *(_OWORD *)__int16 v21 = *(_OWORD *)(a5 + 8);
        long long v22 = v16;
        uint64_t v17 = WTF::fastMalloc((WTF *)0x68);
        *(void *)uint64_t v17 = &unk_1EE9FEF30;
        *(void *)(v17 + 8) = a1;
        *(void *)(v17 + 16) = a1;
        *(void *)(v17 + 24) = v11;
        *(void *)(v17 + 32) = a3;
        *(void *)(v17 + 40) = a4;
        if (v15) {
          *(_DWORD *)v15 += 2;
        }
        *(void *)(v17 + 48) = v15;
        long long v18 = v22;
        *(_OWORD *)(v17 + 56) = *(_OWORD *)v21;
        *(_OWORD *)(v17 + 72) = v18;
        *(double *)(v17 + 88) = a6;
        *(unsigned char *)(v17 + 96) = 41;
        uint64_t v23 = v17;
        WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)a1, &v25, &v23);
        uint64_t v20 = v23;
        uint64_t v23 = 0;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          if (v15)
          {
LABEL_17:
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v19);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
        else if (v15)
        {
          goto LABEL_17;
        }
        if (v25) {
          WTF::fastFree((WTF *)(v25 - 16), v19);
        }
        goto LABEL_22;
      }
      *(_DWORD *)v14 -= 2;
    }
    if (!v13) {
      goto LABEL_22;
    }
    goto LABEL_11;
  }
}

void sub_199329A58(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, a2);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (a15) {
    WTF::fastFree((WTF *)(a15 - 16), a2);
  }
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v15);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(uint64_t a1, unsigned __int8 **a2, uint64_t *a3)
{
  if (!WebKit::WebExtension::hasBackgroundContent(*(id **)(a1 + 64))) {
    goto LABEL_29;
  }
  if (WebKit::WebExtension::backgroundContentIsPersistent(*(id **)(a1 + 64)))
  {
LABEL_3:
    WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessary(a1, a3);
    return;
  }
  uint64_t v6 = *a2;
  if (!*a2)
  {
    uint64_t v9 = 0;
    uint64_t v7 = 0;
LABEL_15:
    uint64_t v8 = &v6[v7];
    goto LABEL_16;
  }
  uint64_t v7 = *((unsigned int *)v6 - 1);
  uint64_t v8 = &v6[v7];
  if (!*((_DWORD *)v6 - 3))
  {
    uint64_t v9 = &v6[v7];
    goto LABEL_15;
  }
  uint64_t v9 = *a2;
  if (v7)
  {
    uint64_t v9 = v6;
    while (*v9 >= 0xFEu)
    {
      ++v9;
      if (!--v7)
      {
        uint64_t v9 = v8;
        break;
      }
    }
  }
LABEL_16:
  if (v6) {
    uint64_t v10 = &v6[*((unsigned int *)v6 - 1)];
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10 != v9)
  {
    char v11 = 0;
    while (1)
    {
      BOOL v12 = WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>>,WebKit::WebExtensionEventListenerType>((uint64_t *)(a1 + 296), v9);
      if (v12) {
        goto LABEL_3;
      }
      BOOL v13 = v9 + 1;
      uint64_t v9 = v8;
      if (v13 != v8)
      {
        uint64_t v9 = v13;
        while (*v9 >= 0xFEu)
        {
          if (++v9 == v8)
          {
            uint64_t v9 = v8;
            break;
          }
        }
      }
      v11 |= v12;
      if (v9 == v10)
      {
        if (v11) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
LABEL_29:

  WTF::CompletionHandler<void ()(void)>::operator()(a3);
}

void WebKit::WebExtensionContext::didCommitLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  WebKit::WebProcessProxy::webPage(a2, &v48);
  uint64_t v12 = v48;
  if (v48)
  {
    WebKit::WebExtensionContext::getCurrentTab(a1, a2, 0, 0, &v47);
    BOOL v13 = v47;
    if (!v47)
    {
LABEL_50:
      CFRelease(*(CFTypeRef *)(v12 + 8));
      return;
    }
    if (a3 == -2)
    {
      ++*(_DWORD *)(a1 + 472);
      uint64_t v14 = *((void *)v13 + 1);
      if (v14)
      {
        if (*(void *)(v14 + 8))
        {
          uint64_t v15 = (WebKit::WebExtensionAction *)WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)(a1 + 464), v14);
          if (v15) {
            WebKit::WebExtensionAction::clearCustomizations(v15);
          }
        }
      }
      uint64_t v16 = *((void *)v13 + 5);
      if (v16)
      {
        CFRetain(*(CFTypeRef *)(v16 + 8));
        if ((WebKit::WebExtensionMatchPattern::matchesURL((unsigned char *)v16, (WTF::URL *)a5, 0) & 1) == 0) {
          WebKit::WebExtensionContext::clearUserGesture(a1, (uint64_t)v13);
        }
      }
      uint64_t v41 = a5;
      unint64_t v17 = *(void *)(a1 + 424);
      uint64_t v18 = *(unsigned int *)(a1 + 436);
      int v19 = (char *)(v17 + 8 * v18);
      if (v18)
      {
        uint64_t v38 = a4;
        uint64_t v39 = v16;
        __int16 v40 = v13;
        int v20 = 0;
        __int16 v21 = *(WebKit::WebUserContentControllerProxy **)(v12 + 280);
        uint64_t v22 = *(void *)(a1 + 424);
        uint64_t v23 = (char *)(v17 + 8 * v18);
        char v24 = v23;
        do
        {
          uint64_t v25 = *(API::UserStyleSheet **)v17;
          if (*(unsigned char *)(*(void *)v17 + 120)
            && *((void *)v25 + 14) == *(void *)(*(void *)(v12 + 32) + 1928))
          {
            WebKit::WebUserContentControllerProxy::removeUserStyleSheet(v21, v25);
            uint64_t v26 = (char *)v17;
            if (v24 != (char *)(*(void *)(a1 + 424) + 8 * *(unsigned int *)(a1 + 436)))
            {
              if ((char *)v17 == v23)
              {
                uint64_t v26 = v24;
              }
              else
              {
                memmove(v24, v23, v22 - (void)v23);
                uint64_t v26 = &v24[v22 - (void)v23];
              }
            }
            uint64_t v27 = *(API::UserStyleSheet **)v17;
            *(void *)unint64_t v17 = 0;
            uint64_t v23 = (char *)(v17 + 8);
            if (v27) {
              CFRelease(*((CFTypeRef *)v27 + 1));
            }
            ++v20;
            char v24 = v26;
          }
          v17 += 8;
          v22 += 8;
        }
        while (v17 < (unint64_t)v19);
        unint64_t v17 = *(void *)(a1 + 424);
        LODWORD(v18) = *(_DWORD *)(a1 + 436);
        int v19 = v24;
        uint64_t v16 = v39;
        BOOL v13 = v40;
        a3 = -2;
        a4 = v38;
      }
      else
      {
        int v20 = 0;
        uint64_t v23 = (char *)(v17 + 8 * v18);
      }
      uint64_t v28 = (char *)(v17 + 8 * v18);
      if (v23 != v28)
      {
        memmove(v19, v23, v28 - v23);
        LODWORD(v18) = *(_DWORD *)(a1 + 436);
      }
      *(_DWORD *)(a1 + 436) = v18 - v20;
      a5 = v41;
      if (v16) {
        CFRelease(*(CFTypeRef *)(v16 + 8));
      }
    }
    MEMORY[0x19972EAD0](v42, @"webNavigation");
    BOOL v30 = (WebKit::WebExtensionContext::permissionState((WTF::StringImpl *)a1, v42, v13, 2) & 0xFFFFFFFE) == 2
       && (WebKit::WebExtensionContext::permissionState(a1, (URL *)a5, (URL *)v13, 3) & 0xFFFFFFFE) == 2;
    uint64_t v31 = v42[0];
    v42[0] = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::destroy(v31, v29);
        if (!v30)
        {
LABEL_49:
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v13);
          goto LABEL_50;
        }
LABEL_38:
        __int16 v45 = 11306;
        WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v46, &v45, 2);
        CFRetain(*(CFTypeRef *)(a1 + 8));
        ++*(_DWORD *)v13;
        uint64_t v32 = *(WTF::StringImpl **)a5;
        if (*(void *)a5) {
          *(_DWORD *)v32 += 2;
        }
        long long v33 = *(_OWORD *)(a5 + 24);
        *(_OWORD *)uint64_t v42 = *(_OWORD *)(a5 + 8);
        long long v43 = v33;
        uint64_t v34 = WTF::fastMalloc((WTF *)0x68);
        *(void *)uint64_t v34 = &unk_1EE9FEF58;
        *(void *)(v34 + 8) = a1;
        *(void *)(v34 + 16) = a1;
        *(void *)(v34 + 24) = v13;
        *(void *)(v34 + 32) = a3;
        *(void *)(v34 + 40) = a4;
        if (v32) {
          *(_DWORD *)v32 += 2;
        }
        *(void *)(v34 + 48) = v32;
        long long v35 = v43;
        *(_OWORD *)(v34 + 56) = *(_OWORD *)v42;
        *(_OWORD *)(v34 + 72) = v35;
        *(double *)(v34 + 88) = a6;
        *(_WORD *)(v34 + 96) = 11306;
        uint64_t v44 = v34;
        WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents(a1, &v46, &v44);
        uint64_t v37 = v44;
        uint64_t v44 = 0;
        if (v37)
        {
          (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
          if (v32)
          {
LABEL_44:
            if (*(_DWORD *)v32 == 2) {
              WTF::StringImpl::destroy(v32, v36);
            }
            else {
              *(_DWORD *)v32 -= 2;
            }
          }
        }
        else if (v32)
        {
          goto LABEL_44;
        }
        if (v46) {
          WTF::fastFree((WTF *)(v46 - 16), v36);
        }
        goto LABEL_49;
      }
      *(_DWORD *)v31 -= 2;
    }
    if (!v30) {
      goto LABEL_49;
    }
    goto LABEL_38;
  }
}

void sub_19932A080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v23);
  CFRelease(*(CFTypeRef *)(v22 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::clearUserGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && *(void *)(v2 + 8))
  {
    int v4 = *(_DWORD *)(a2 + 50);
    uint64_t v3 = (unsigned int *)(a2 + 50);
    unsigned int *v3 = v4 & 0xFFFFFFFE;
    uint64_t v5 = *(void *)((char *)v3 - 10);
    *(void *)((char *)v3 - 10) = 0;
    if (v5) {
      CFRelease(*(CFTypeRef *)(v5 + 8));
    }
  }
}

void WebKit::WebExtensionContext::didFinishLoadForFrame(CFTypeRef *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  WebKit::WebExtensionContext::getCurrentTab((uint64_t)a1, a2, 0, 0, &v26);
  char v11 = v26;
  if (v26)
  {
    MEMORY[0x19972EAD0](v21, @"webNavigation");
    BOOL v13 = (WebKit::WebExtensionContext::permissionState((WTF::StringImpl *)a1, v21, v11, 2) & 0xFFFFFFFE) == 2
       && (WebKit::WebExtensionContext::permissionState((uint64_t)a1, (URL *)a5, (URL *)v11, 3) & 0xFFFFFFFE) == 2;
    uint64_t v14 = v21[0];
    v21[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v12);
        if (!v13)
        {
LABEL_22:
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
          return;
        }
LABEL_11:
        char v24 = 43;
        WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v25, &v24, 1);
        CFRetain(a1[1]);
        ++*(_DWORD *)v11;
        uint64_t v15 = *(WTF::StringImpl **)a5;
        if (*(void *)a5) {
          *(_DWORD *)v15 += 2;
        }
        long long v16 = *(_OWORD *)(a5 + 24);
        *(_OWORD *)__int16 v21 = *(_OWORD *)(a5 + 8);
        long long v22 = v16;
        uint64_t v17 = WTF::fastMalloc((WTF *)0x68);
        *(void *)uint64_t v17 = &unk_1EE9FEF80;
        *(void *)(v17 + 8) = a1;
        *(void *)(v17 + 16) = a1;
        *(void *)(v17 + 24) = v11;
        *(void *)(v17 + 32) = a3;
        *(void *)(v17 + 40) = a4;
        if (v15) {
          *(_DWORD *)v15 += 2;
        }
        *(void *)(v17 + 48) = v15;
        long long v18 = v22;
        *(_OWORD *)(v17 + 56) = *(_OWORD *)v21;
        *(_OWORD *)(v17 + 72) = v18;
        *(double *)(v17 + 88) = a6;
        *(unsigned char *)(v17 + 96) = 43;
        uint64_t v23 = v17;
        WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)a1, &v25, &v23);
        uint64_t v20 = v23;
        uint64_t v23 = 0;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          if (v15)
          {
LABEL_17:
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v19);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
        else if (v15)
        {
          goto LABEL_17;
        }
        if (v25) {
          WTF::fastFree((WTF *)(v25 - 16), v19);
        }
        goto LABEL_22;
      }
      *(_DWORD *)v14 -= 2;
    }
    if (!v13) {
      goto LABEL_22;
    }
    goto LABEL_11;
  }
}

void sub_19932A404(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, a2);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (a15) {
    WTF::fastFree((WTF *)(a15 - 16), a2);
  }
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v15);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::didFailLoadForFrame(CFTypeRef *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  WebKit::WebExtensionContext::getCurrentTab((uint64_t)a1, a2, 0, 0, &v26);
  char v11 = v26;
  if (v26)
  {
    MEMORY[0x19972EAD0](v21, @"webNavigation");
    BOOL v13 = (WebKit::WebExtensionContext::permissionState((WTF::StringImpl *)a1, v21, v11, 2) & 0xFFFFFFFE) == 2
       && (WebKit::WebExtensionContext::permissionState((uint64_t)a1, (URL *)a5, (URL *)v11, 3) & 0xFFFFFFFE) == 2;
    uint64_t v14 = v21[0];
    v21[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v12);
        if (!v13)
        {
LABEL_22:
          WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
          return;
        }
LABEL_11:
        char v24 = 45;
        WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v25, &v24, 1);
        CFRetain(a1[1]);
        ++*(_DWORD *)v11;
        uint64_t v15 = *(WTF::StringImpl **)a5;
        if (*(void *)a5) {
          *(_DWORD *)v15 += 2;
        }
        long long v16 = *(_OWORD *)(a5 + 24);
        *(_OWORD *)__int16 v21 = *(_OWORD *)(a5 + 8);
        long long v22 = v16;
        uint64_t v17 = WTF::fastMalloc((WTF *)0x68);
        *(void *)uint64_t v17 = &unk_1EE9FEFA8;
        *(void *)(v17 + 8) = a1;
        *(void *)(v17 + 16) = a1;
        *(void *)(v17 + 24) = v11;
        *(void *)(v17 + 32) = a3;
        *(void *)(v17 + 40) = a4;
        if (v15) {
          *(_DWORD *)v15 += 2;
        }
        *(void *)(v17 + 48) = v15;
        long long v18 = v22;
        *(_OWORD *)(v17 + 56) = *(_OWORD *)v21;
        *(_OWORD *)(v17 + 72) = v18;
        *(double *)(v17 + 88) = a6;
        *(unsigned char *)(v17 + 96) = 45;
        uint64_t v23 = v17;
        WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)a1, &v25, &v23);
        uint64_t v20 = v23;
        uint64_t v23 = 0;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          if (v15)
          {
LABEL_17:
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v19);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
        else if (v15)
        {
          goto LABEL_17;
        }
        if (v25) {
          WTF::fastFree((WTF *)(v25 - 16), v19);
        }
        goto LABEL_22;
      }
      *(_DWORD *)v14 -= 2;
    }
    if (!v13) {
      goto LABEL_22;
    }
    goto LABEL_11;
  }
}

void sub_19932A704(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, a2);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (a15) {
    WTF::fastFree((WTF *)(a15 - 16), a2);
  }
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v15);
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionContext::hasPermissionToSendWebRequestEvent(WebKit::WebExtensionContext *this, WebKit::WebExtensionTab *a2, const WTF::URL *a3, const WebKit::ResourceLoadInfo *a4)
{
  if (!a2) {
    return 0;
  }
  MEMORY[0x19972EAD0](&v12, @"webRequest");
  int v9 = WebKit::WebExtensionContext::permissionState(this, &v12, a2, 2) & 0xFFFFFFFE;
  uint64_t v10 = v12;
  uint64_t v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  if (v9 != 2) {
    return 0;
  }
  BOOL result = WebKit::WebExtensionTab::extensionHasPermission(a2);
  if (!result) {
    return result;
  }
  return ((*((unsigned char *)a3 + 8) & 1) == 0
       || (WebKit::WebExtensionContext::permissionState((uint64_t)this, (URL *)a3, (URL *)a2, 3) & 0xFFFFFFFE) == 2)
      && ((*((unsigned char *)a4 + 64) & 1) == 0
       || (WebKit::WebExtensionContext::permissionState((uint64_t)this, (URL *)((char *)a4 + 56), (URL *)a2, 3) & 0xFFFFFFFE) == 2);
}

void sub_19932A8F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::resourceLoadDidSendRequest(CFTypeRef *a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4)
{
  WebKit::WebExtensionContext::getCurrentTab((uint64_t)a1, a2, 0, 0, &v64);
  uint64_t v7 = v64;
  uint64_t v8 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a4);
  uint64_t result = WebKit::WebExtensionContext::hasPermissionToSendWebRequestEvent((WebKit::WebExtensionContext *)a1, v7, v8, a3);
  if (result)
  {
    WebKit::WebExtensionTab::window(v7, &v63);
    uint64_t v37 = v63;
    if (v63) {
      uint64_t v10 = *(void *)(v63 + 16);
    }
    else {
      uint64_t v10 = -2;
    }
    qmemcpy(v62, "016", sizeof(v62));
    WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v61, v62, 3);
    uint64_t v38 = a1;
    CFRetain(a1[1]);
    uint64_t v39 = a1;
    *(void *)&long long v40 = v62;
    *((void *)&v40 + 1) = 3;
    if (v7) {
      ++*(_DWORD *)v7;
    }
    uint64_t v41 = v7;
    uint64_t v42 = v10;
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)v43, (const String *)a4);
    char v11 = *(_DWORD **)(a4 + 152);
    if (v11) {
      *v11 += 2;
    }
    uint64_t v44 = v11;
    uint64_t v12 = *(_DWORD **)(a4 + 160);
    if (v12) {
      *v12 += 2;
    }
    __int16 v45 = v12;
    BOOL v13 = *(_DWORD **)(a4 + 168);
    if (v13) {
      ++*v13;
    }
    uint64_t v14 = *(void *)(a4 + 176);
    long long v46 = v13;
    uint64_t v47 = v14;
    char v48 = *(unsigned char *)(a4 + 184);
    WTF::RetainPtr<NSURLRequest>::RetainPtr(&v49);
    long long v15 = *((_OWORD *)a3 + 2);
    long long v16 = *(_OWORD *)a3;
    long long v51 = *((_OWORD *)a3 + 1);
    long long v52 = v15;
    long long v50 = v16;
    char v53 = *((unsigned char *)a3 + 48);
    uint64_t v17 = (_DWORD *)*((void *)a3 + 7);
    if (v17) {
      *v17 += 2;
    }
    int v54 = v17;
    long long v18 = *((_OWORD *)a3 + 5);
    long long v55 = *((_OWORD *)a3 + 4);
    long long v56 = v18;
    int v19 = (_DWORD *)*((void *)a3 + 12);
    if (v19) {
      *v19 += 2;
    }
    uint64_t v20 = *((void *)a3 + 13);
    uint64_t v57 = v19;
    uint64_t v58 = v20;
    __int16 v59 = *((_WORD *)a3 + 56);
    uint64_t v21 = WTF::fastMalloc((WTF *)0x178);
    *(void *)uint64_t v21 = &unk_1EE9FEFD0;
    *(void *)(v21 + 8) = v38;
    *(void *)(v21 + 16) = v39;
    *(_OWORD *)(v21 + 24) = v40;
    long long v22 = v41;
    uint64_t v39 = 0;
    uint64_t v41 = 0;
    *(void *)(v21 + 40) = v22;
    *(void *)(v21 + 48) = v42;
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)(v21 + 56), v43);
    uint64_t v23 = v44;
    if (v44) {
      *v44 += 2;
    }
    *(void *)(v21 + 208) = v23;
    char v24 = v45;
    if (v45) {
      *v45 += 2;
    }
    *(void *)(v21 + 216) = v24;
    uint64_t v25 = v46;
    if (v46) {
      ++*v46;
    }
    *(void *)(v21 + 224) = v25;
    char v26 = v48;
    *(void *)(v21 + 232) = v47;
    *(unsigned char *)(v21 + 240) = v26;
    WTF::RetainPtr<NSURLRequest>::RetainPtr((CFTypeRef *)(v21 + 248));
    long long v27 = v50;
    long long v28 = v51;
    long long v29 = v52;
    *(unsigned char *)(v21 + 304) = v53;
    *(_OWORD *)(v21 + 272) = v28;
    *(_OWORD *)(v21 + 288) = v29;
    *(_OWORD *)(v21 + 256) = v27;
    BOOL v30 = v54;
    if (v54) {
      *v54 += 2;
    }
    *(void *)(v21 + 312) = v30;
    long long v31 = v56;
    *(_OWORD *)(v21 + 320) = v55;
    *(_OWORD *)(v21 + 336) = v31;
    uint64_t v32 = v57;
    if (v57) {
      *v57 += 2;
    }
    *(void *)(v21 + 352) = v32;
    __int16 v33 = v59;
    *(void *)(v21 + 360) = v58;
    *(_WORD *)(v21 + 368) = v33;
    uint64_t v60 = v21;
    WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)a1, &v61, &v60);
    uint64_t v35 = v60;
    uint64_t v60 = 0;
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
    }
    WebKit::WebExtensionContext::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0::~$_0(&v38, v34);
    if (v61) {
      WTF::fastFree((WTF *)(v61 - 16), v36);
    }
    uint64_t result = v37;
    if (v37) {
      uint64_t result = WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v37);
    }
  }
  if (v7) {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v7);
  }
  return result;
}

void sub_19932ACBC(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  uint64_t v7 = *(void *)(v5 - 128);
  *(void *)(v5 - 128) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  WebKit::WebExtensionContext::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0::~$_0((uint64_t *)va, a2);
  uint64_t v9 = *(void *)(v5 - 120);
  if (v9) {
    WTF::fastFree((WTF *)(v9 - 16), v8);
  }
  if (a4) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(a4);
  }
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  }
  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0::~$_0(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[43];
  a1[43] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[38];
  a1[38] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (const void *)a1[30];
  a1[30] = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 6));
  uint64_t v6 = a1[4];
  a1[4] = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v6);
  }
  uint64_t v7 = a1[1];
  a1[1] = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  return a1;
}

uint64_t WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(CFTypeRef *a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebExtensionContext::getCurrentTab((uint64_t)a1, a2, 0, 0, &v67);
  uint64_t v10 = v67;
  char v11 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a5);
  uint64_t result = WebKit::WebExtensionContext::hasPermissionToSendWebRequestEvent((WebKit::WebExtensionContext *)a1, v10, v11, a3);
  if (result)
  {
    WebKit::WebExtensionTab::window(v10, &v66);
    uint64_t v37 = v66;
    if (v66) {
      uint64_t v13 = *(void *)(v66 + 16);
    }
    else {
      uint64_t v13 = -2;
    }
    __int16 v65 = 12084;
    WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v64, &v65, 2);
    uint64_t v38 = a1;
    CFRetain(a1[1]);
    uint64_t v39 = a1;
    *(void *)&long long v40 = &v65;
    *((void *)&v40 + 1) = 2;
    if (v10) {
      ++*(_DWORD *)v10;
    }
    uint64_t v41 = v10;
    uint64_t v42 = v13;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v43, (const WebCore::ResourceResponseBase *)a4);
    WTF::RetainPtr<NSURLResponse>::RetainPtr(&v44, *(void **)(a4 + 240));
    char v45 = *(unsigned char *)(a4 + 248);
    long long v14 = *((_OWORD *)a3 + 1);
    long long v46 = *(_OWORD *)a3;
    long long v47 = v14;
    long long v48 = *((_OWORD *)a3 + 2);
    char v49 = *((unsigned char *)a3 + 48);
    long long v15 = (_DWORD *)*((void *)a3 + 7);
    if (v15) {
      *v15 += 2;
    }
    long long v50 = v15;
    long long v16 = *((_OWORD *)a3 + 5);
    long long v51 = *((_OWORD *)a3 + 4);
    long long v52 = v16;
    uint64_t v17 = (_DWORD *)*((void *)a3 + 12);
    if (v17) {
      *v17 += 2;
    }
    uint64_t v18 = *((void *)a3 + 13);
    char v53 = v17;
    uint64_t v54 = v18;
    __int16 v55 = *((_WORD *)a3 + 56);
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)v56, (const String *)a5);
    int v19 = *(_DWORD **)(a5 + 152);
    if (v19) {
      *v19 += 2;
    }
    uint64_t v57 = v19;
    uint64_t v20 = *(_DWORD **)(a5 + 160);
    if (v20) {
      *v20 += 2;
    }
    uint64_t v58 = v20;
    uint64_t v21 = *(_DWORD **)(a5 + 168);
    if (v21) {
      ++*v21;
    }
    __int16 v59 = v21;
    uint64_t v60 = *(void *)(a5 + 176);
    char v61 = *(unsigned char *)(a5 + 184);
    WTF::RetainPtr<NSURLRequest>::RetainPtr(&v62);
    uint64_t v22 = WTF::fastMalloc((WTF *)0x278);
    *(void *)uint64_t v22 = &unk_1EE9FEFF8;
    *(void *)(v22 + 8) = v38;
    *(void *)(v22 + 16) = v39;
    *(_OWORD *)(v22 + 24) = v40;
    uint64_t v23 = v41;
    uint64_t v39 = 0;
    uint64_t v41 = 0;
    *(void *)(v22 + 40) = v23;
    *(void *)(v22 + 48) = v42;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v22 + 56), (const WebCore::ResourceResponseBase *)v43);
    WTF::RetainPtr<NSURLResponse>::RetainPtr((void *)(v22 + 296), v44);
    *(unsigned char *)(v22 + 304) = v45;
    long long v24 = v46;
    long long v25 = v47;
    long long v26 = v48;
    *(unsigned char *)(v22 + 360) = v49;
    *(_OWORD *)(v22 + 328) = v25;
    *(_OWORD *)(v22 + 344) = v26;
    *(_OWORD *)(v22 + 312) = v24;
    long long v27 = v50;
    if (v50) {
      *v50 += 2;
    }
    *(void *)(v22 + 368) = v27;
    long long v28 = v52;
    *(_OWORD *)(v22 + 376) = v51;
    *(_OWORD *)(v22 + 392) = v28;
    long long v29 = v53;
    if (v53) {
      *v53 += 2;
    }
    *(void *)(v22 + 408) = v29;
    __int16 v30 = v55;
    *(void *)(v22 + 416) = v54;
    *(_WORD *)(v22 + 424) = v30;
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)(v22 + 432), v56);
    long long v31 = v57;
    if (v57) {
      *v57 += 2;
    }
    *(void *)(v22 + 584) = v31;
    uint64_t v32 = v58;
    if (v58) {
      *v58 += 2;
    }
    *(void *)(v22 + 592) = v32;
    __int16 v33 = v59;
    if (v59) {
      ++*v59;
    }
    *(void *)(v22 + 600) = v33;
    char v34 = v61;
    *(void *)(v22 + 608) = v60;
    *(unsigned char *)(v22 + 616) = v34;
    WTF::RetainPtr<NSURLRequest>::RetainPtr((CFTypeRef *)(v22 + 624));
    uint64_t v63 = v22;
    WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)a1, &v64, &v63);
    uint64_t v35 = v63;
    uint64_t v63 = 0;
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
    }
    WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&)::$_0::~$_0(&v38);
    if (v64) {
      WTF::fastFree((WTF *)(v64 - 16), v36);
    }
    uint64_t result = WebKit::WebExtensionContext::resourceLoadDidSendRequest(a1, a2, a3, a5);
    if (v37) {
      uint64_t result = WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v37);
    }
  }
  if (v10) {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v10);
  }
  return result;
}

void sub_19932B284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::ResourceResponseBase *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,CFTypeRef cf,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,WTF::StringImpl *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,WTF::StringImpl *a61)
{
  if (a10) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(a10);
  }
  if (v61) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v61);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&)::$_0::~$_0(void *a1)
{
  uint64_t v2 = (WebCore::ResourceRequestBase *)(a1 + 53);
  uint64_t v3 = (const void *)a1[77];
  a1[77] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  uint64_t v5 = (WTF::StringImpl *)a1[50];
  a1[50] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)a1[45];
  a1[45] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (const void *)a1[36];
  a1[36] = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 6), v4);
  uint64_t v8 = a1[4];
  a1[4] = 0;
  if (v8) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v8);
  }
  uint64_t v9 = a1[1];
  a1[1] = 0;
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  return a1;
}

WTF::StringImpl *WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(CFTypeRef *a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, id *a4)
{
  WebKit::WebExtensionContext::getCurrentTab((uint64_t)a1, a2, 0, 0, &v51);
  uint64_t v7 = v51;
  WTF::URL::URL((WTF::URL *)&v29);
  BOOL hasPermissionToSendWebRequestEvent = WebKit::WebExtensionContext::hasPermissionToSendWebRequestEvent((WebKit::WebExtensionContext *)a1, v7, (const WTF::URL *)&v29, a3);
  uint64_t result = v29;
  long long v29 = 0;
  if (!result)
  {
LABEL_4:
    if (!hasPermissionToSendWebRequestEvent) {
      goto LABEL_26;
    }
    goto LABEL_7;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_4;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
  if (!hasPermissionToSendWebRequestEvent) {
    goto LABEL_26;
  }
LABEL_7:
  WebKit::WebExtensionTab::window(v7, &v50);
  uint64_t v11 = v50;
  if (v50) {
    uint64_t v12 = *(void *)(v50 + 16);
  }
  else {
    uint64_t v12 = -2;
  }
  char v49 = 46;
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v48, &v49, 1);
  long long v29 = (WTF::StringImpl *)a1;
  CFRetain(a1[1]);
  __int16 v30 = a1;
  *(void *)&long long v31 = &v49;
  *((void *)&v31 + 1) = 1;
  if (v7) {
    ++*(_DWORD *)v7;
  }
  uint64_t v32 = v7;
  uint64_t v33 = v12;
  WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)v34, (const WebCore::AuthenticationChallengeBase *)a4);
  WTF::RetainPtr<objc_object * {__strong}>::RetainPtr(&v35, a4 + 52);
  WTF::RetainPtr<NSURLAuthenticationChallenge>::RetainPtr(&v36, a4 + 53);
  long long v13 = *((_OWORD *)a3 + 1);
  long long v37 = *(_OWORD *)a3;
  long long v38 = v13;
  long long v39 = *((_OWORD *)a3 + 2);
  char v40 = *((unsigned char *)a3 + 48);
  long long v14 = (_DWORD *)*((void *)a3 + 7);
  if (v14) {
    *v14 += 2;
  }
  uint64_t v41 = v14;
  long long v15 = *((_OWORD *)a3 + 5);
  long long v42 = *((_OWORD *)a3 + 4);
  long long v43 = v15;
  long long v16 = (_DWORD *)*((void *)a3 + 12);
  if (v16) {
    *v16 += 2;
  }
  uint64_t v44 = v16;
  uint64_t v45 = *((void *)a3 + 13);
  __int16 v46 = *((_WORD *)a3 + 56);
  uint64_t v17 = WTF::fastMalloc((WTF *)0x260);
  *(void *)uint64_t v17 = &unk_1EE9FF020;
  *(void *)(v17 + 8) = v29;
  *(void *)(v17 + 16) = v30;
  *(_OWORD *)(v17 + 24) = v31;
  uint64_t v18 = v32;
  __int16 v30 = 0;
  uint64_t v32 = 0;
  *(void *)(v17 + 40) = v18;
  *(void *)(v17 + 48) = v33;
  WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)(v17 + 56), (const WebCore::AuthenticationChallengeBase *)v34);
  WTF::RetainPtr<objc_object * {__strong}>::RetainPtr((void *)(v17 + 472), &v35);
  WTF::RetainPtr<NSURLAuthenticationChallenge>::RetainPtr((void *)(v17 + 480), &v36);
  long long v19 = v37;
  long long v20 = v38;
  long long v21 = v39;
  *(unsigned char *)(v17 + 536) = v40;
  *(_OWORD *)(v17 + 504) = v20;
  *(_OWORD *)(v17 + 520) = v21;
  *(_OWORD *)(v17 + 488) = v19;
  uint64_t v22 = v41;
  if (v41) {
    *v41 += 2;
  }
  *(void *)(v17 + 544) = v22;
  long long v23 = v43;
  *(_OWORD *)(v17 + 552) = v42;
  *(_OWORD *)(v17 + 568) = v23;
  long long v24 = v44;
  if (v44) {
    *v44 += 2;
  }
  *(void *)(v17 + 584) = v24;
  __int16 v25 = v46;
  *(void *)(v17 + 592) = v45;
  *(_WORD *)(v17 + 600) = v25;
  uint64_t v47 = v17;
  WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)a1, &v48, &v47);
  uint64_t v27 = v47;
  uint64_t v47 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t result = (WTF::StringImpl *)WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::AuthenticationChallenge const&)::$_0::~$_0(&v29, v26);
  if (v48) {
    uint64_t result = (WTF::StringImpl *)WTF::fastFree((WTF *)(v48 - 16), v28);
  }
  if (v11) {
    uint64_t result = (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v11);
  }
LABEL_26:
  if (v7) {
    return (WTF::StringImpl *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v7);
  }
  return result;
}

void sub_19932B874(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl *a9)
{
  uint64_t v13 = *(void *)(v11 - 120);
  *(void *)(v11 - 120) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::AuthenticationChallenge const&)::$_0::~$_0(&a9, a2);
  uint64_t v15 = *(void *)(v11 - 112);
  if (v15) {
    WTF::fastFree((WTF *)(v15 - 16), v14);
  }
  if (v10) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v10);
  }
  if (v9) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v9);
  }
  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::AuthenticationChallenge const&)::$_0::~$_0(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[72];
  a1[72] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[67];
  a1[67] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (const void *)a1[59];
  a1[59] = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)a1[58];
  a1[58] = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)(a1 + 6), a2);
  uint64_t v7 = a1[4];
  a1[4] = 0;
  if (v7) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v7);
  }
  uint64_t v8 = a1[1];
  a1[1] = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  return a1;
}

uint64_t WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(CFTypeRef *a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4)
{
  WebKit::WebExtensionContext::getCurrentTab((uint64_t)a1, a2, 0, 0, &v51);
  uint64_t v7 = v51;
  uint64_t v8 = (const WTF::URL *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a4);
  uint64_t result = WebKit::WebExtensionContext::hasPermissionToSendWebRequestEvent((WebKit::WebExtensionContext *)a1, v7, v8, a3);
  if (result)
  {
    WebKit::WebExtensionTab::window(v7, &v50);
    uint64_t v10 = v50;
    if (v50) {
      uint64_t v11 = *(void *)(v50 + 16);
    }
    else {
      uint64_t v11 = -2;
    }
    __int16 v49 = 13620;
    WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v48, &v49, 2);
    long long v29 = a1;
    CFRetain(a1[1]);
    __int16 v30 = a1;
    *(void *)&long long v31 = &v49;
    *((void *)&v31 + 1) = 2;
    if (v7) {
      ++*(_DWORD *)v7;
    }
    uint64_t v32 = v7;
    uint64_t v33 = v11;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v34, (const WebCore::ResourceResponseBase *)a4);
    WTF::RetainPtr<NSURLResponse>::RetainPtr(&v35, *(void **)(a4 + 240));
    char v36 = *(unsigned char *)(a4 + 248);
    long long v12 = *((_OWORD *)a3 + 1);
    long long v37 = *(_OWORD *)a3;
    long long v38 = v12;
    long long v39 = *((_OWORD *)a3 + 2);
    char v40 = *((unsigned char *)a3 + 48);
    uint64_t v13 = (_DWORD *)*((void *)a3 + 7);
    if (v13) {
      *v13 += 2;
    }
    uint64_t v41 = v13;
    long long v14 = *((_OWORD *)a3 + 5);
    long long v42 = *((_OWORD *)a3 + 4);
    long long v43 = v14;
    uint64_t v15 = (_DWORD *)*((void *)a3 + 12);
    if (v15) {
      *v15 += 2;
    }
    uint64_t v16 = *((void *)a3 + 13);
    uint64_t v44 = v15;
    uint64_t v45 = v16;
    __int16 v46 = *((_WORD *)a3 + 56);
    uint64_t v17 = WTF::fastMalloc((WTF *)0x1B0);
    *(void *)uint64_t v17 = &unk_1EE9FF048;
    *(void *)(v17 + 8) = v29;
    *(void *)(v17 + 16) = v30;
    *(_OWORD *)(v17 + 24) = v31;
    uint64_t v18 = v32;
    __int16 v30 = 0;
    uint64_t v32 = 0;
    *(void *)(v17 + 40) = v18;
    *(void *)(v17 + 48) = v33;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v17 + 56), (const WebCore::ResourceResponseBase *)v34);
    WTF::RetainPtr<NSURLResponse>::RetainPtr((void *)(v17 + 296), v35);
    *(unsigned char *)(v17 + 304) = v36;
    long long v19 = v37;
    long long v20 = v38;
    long long v21 = v39;
    *(unsigned char *)(v17 + 360) = v40;
    *(_OWORD *)(v17 + 328) = v20;
    *(_OWORD *)(v17 + 344) = v21;
    *(_OWORD *)(v17 + 312) = v19;
    uint64_t v22 = v41;
    if (v41) {
      *v41 += 2;
    }
    *(void *)(v17 + 368) = v22;
    long long v23 = v43;
    *(_OWORD *)(v17 + 376) = v42;
    *(_OWORD *)(v17 + 392) = v23;
    long long v24 = v44;
    if (v44) {
      *v44 += 2;
    }
    *(void *)(v17 + 408) = v24;
    __int16 v25 = v46;
    *(void *)(v17 + 416) = v45;
    *(_WORD *)(v17 + 424) = v25;
    uint64_t v47 = v17;
    WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)a1, &v48, &v47);
    uint64_t v27 = v47;
    uint64_t v47 = 0;
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
    uint64_t result = (uint64_t)WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&)::$_0::~$_0(&v29, v26);
    if (v48) {
      uint64_t result = WTF::fastFree((WTF *)(v48 - 16), v28);
    }
    if (v10) {
      uint64_t result = WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v10);
    }
  }
  if (v7) {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v7);
  }
  return result;
}

void sub_19932BD80(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *(void *)(v11 - 120);
  *(void *)(v11 - 120) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&)::$_0::~$_0(&a9, a2);
  uint64_t v15 = *(void *)(v11 - 112);
  if (v15) {
    WTF::fastFree((WTF *)(v15 - 16), v14);
  }
  if (v10) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v10);
  }
  if (v9) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v9);
  }
  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&)::$_0::~$_0(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[50];
  a1[50] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[45];
  a1[45] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (const void *)a1[36];
  a1[36] = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 6), a2);
  uint64_t v6 = a1[4];
  a1[4] = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v6);
  }
  uint64_t v7 = a1[1];
  a1[1] = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  return a1;
}

uint64_t WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(CFTypeRef *a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebExtensionContext::getCurrentTab((uint64_t)a1, a2, 0, 0, &v54);
  uint64_t v9 = v54;
  uint64_t v10 = (const WTF::URL *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a4);
  uint64_t result = WebKit::WebExtensionContext::hasPermissionToSendWebRequestEvent((WebKit::WebExtensionContext *)a1, v9, v10, a3);
  if (result)
  {
    WebKit::WebExtensionTab::window(v9, &v53);
    uint64_t v12 = v53;
    if (v53) {
      uint64_t v13 = *(void *)(v53 + 16);
    }
    else {
      uint64_t v13 = -2;
    }
    __int16 v52 = 12851;
    WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v51, &v52, 2);
    long long v31 = a1;
    CFRetain(a1[1]);
    uint64_t v32 = a1;
    *(void *)&long long v33 = &v52;
    *((void *)&v33 + 1) = 2;
    if (v9) {
      ++*(_DWORD *)v9;
    }
    char v34 = v9;
    uint64_t v35 = v13;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v36, (const WebCore::ResourceResponseBase *)a4);
    WTF::RetainPtr<NSURLResponse>::RetainPtr(&v37, *(void **)(a4 + 240));
    char v38 = *(unsigned char *)(a4 + 248);
    WebCore::ResourceError::ResourceError((uint64_t)v39, a5);
    long long v14 = *((_OWORD *)a3 + 1);
    long long v40 = *(_OWORD *)a3;
    long long v41 = v14;
    long long v42 = *((_OWORD *)a3 + 2);
    char v43 = *((unsigned char *)a3 + 48);
    uint64_t v15 = (_DWORD *)*((void *)a3 + 7);
    if (v15) {
      *v15 += 2;
    }
    uint64_t v44 = v15;
    long long v16 = *((_OWORD *)a3 + 5);
    long long v45 = *((_OWORD *)a3 + 4);
    long long v46 = v16;
    uint64_t v17 = (_DWORD *)*((void *)a3 + 12);
    if (v17) {
      *v17 += 2;
    }
    uint64_t v18 = *((void *)a3 + 13);
    uint64_t v47 = v17;
    uint64_t v48 = v18;
    __int16 v49 = *((_WORD *)a3 + 56);
    uint64_t v19 = WTF::fastMalloc((WTF *)0x200);
    *(void *)uint64_t v19 = &unk_1EE9FF070;
    *(void *)(v19 + 8) = v31;
    *(void *)(v19 + 16) = v32;
    *(_OWORD *)(v19 + 24) = v33;
    long long v20 = v34;
    uint64_t v32 = 0;
    char v34 = 0;
    *(void *)(v19 + 40) = v20;
    *(void *)(v19 + 48) = v35;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v19 + 56), (const WebCore::ResourceResponseBase *)v36);
    WTF::RetainPtr<NSURLResponse>::RetainPtr((void *)(v19 + 296), v37);
    *(unsigned char *)(v19 + 304) = v38;
    WebCore::ResourceError::ResourceError(v19 + 312, (uint64_t)v39);
    long long v21 = v40;
    long long v22 = v41;
    long long v23 = v42;
    *(unsigned char *)(v19 + 440) = v43;
    *(_OWORD *)(v19 + 408) = v22;
    *(_OWORD *)(v19 + 424) = v23;
    *(_OWORD *)(v19 + 392) = v21;
    long long v24 = v44;
    if (v44) {
      *v44 += 2;
    }
    *(void *)(v19 + 448) = v24;
    long long v25 = v46;
    *(_OWORD *)(v19 + 456) = v45;
    *(_OWORD *)(v19 + 472) = v25;
    long long v26 = v47;
    if (v47) {
      *v47 += 2;
    }
    *(void *)(v19 + 488) = v26;
    __int16 v27 = v49;
    *(void *)(v19 + 496) = v48;
    *(_WORD *)(v19 + 504) = v27;
    uint64_t v50 = v19;
    WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessaryToFireEvents((uint64_t)a1, &v51, &v50);
    uint64_t v29 = v50;
    uint64_t v50 = 0;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
    uint64_t result = (uint64_t)WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceError const&)::$_0::~$_0(&v31, v28);
    if (v51) {
      uint64_t result = WTF::fastFree((WTF *)(v51 - 16), v30);
    }
    if (v12) {
      uint64_t result = WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v12);
    }
  }
  if (v9) {
    return WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v9);
  }
  return result;
}

void sub_19932C248(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,CFTypeRef cf)
{
  uint64_t v49 = *(void *)(v47 - 120);
  *(void *)(v47 - 120) = 0;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceError const&)::$_0::~$_0(&a9, a2);
  uint64_t v51 = *(void *)(v47 - 112);
  if (v51) {
    WTF::fastFree((WTF *)(v51 - 16), v50);
  }
  if (v46) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v46);
  }
  if (v45) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v45);
  }
  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceError const&)::$_0::~$_0(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[60];
  a1[60] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[55];
  a1[55] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (const void *)a1[46];
  a1[46] = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (WTF::StringImpl *)a1[44];
  a1[44] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)a1[39];
  a1[39] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = (WTF::StringImpl *)a1[38];
  a1[38] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = (const void *)a1[36];
  a1[36] = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 6), a2);
  uint64_t v10 = a1[4];
  a1[4] = 0;
  if (v10) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v10);
  }
  uint64_t v11 = a1[1];
  a1[1] = 0;
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  return a1;
}

uint64_t WebKit::WebExtensionContext::defaultAction(WebKit::WebExtensionContext *this)
{
  uint64_t result = *((void *)this + 60);
  if (!result)
  {
    WebKit::WebExtensionAction::create<WebKit::WebExtensionContext &>(this, &v6);
    uint64_t v3 = v6;
    uint64_t v6 = 0;
    uint64_t v4 = *((void *)this + 60);
    *((void *)this + 60) = v3;
    if (v4)
    {
      CFRelease(*(CFTypeRef *)(v4 + 8));
      uint64_t v5 = v6;
      uint64_t v6 = 0;
      if (v5) {
        CFRelease(*((CFTypeRef *)v5 + 1));
      }
    }
    return *((void *)this + 60);
  }
  return result;
}

WebKit::WebExtensionAction *WebKit::WebExtensionAction::create<WebKit::WebExtensionContext &>@<X0>(WebKit::WebExtensionContext *a1@<X0>, WebKit::WebExtensionAction **a2@<X8>)
{
  uint64_t v4 = (WebKit::WebExtensionAction *)API::Object::newObject(0xB8uLL, 111);
  uint64_t result = WebKit::WebExtensionAction::WebExtensionAction(v4, a1);
  *a2 = v4;
  return result;
}

void sub_19932C574(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

CFTypeRef WebKit::WebExtensionContext::getAction@<X0>(WebKit::WebExtensionContext *this@<X0>, WebKit::WebExtensionWindow *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!a2
    || (++*((_DWORD *)this + 114), (uint64_t v5 = *((void *)a2 + 1)) == 0)
    || !*(void *)(v5 + 8)
    || (uint64_t v6 = WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)this + 56, v5)) == 0)
  {
    uint64_t v6 = WebKit::WebExtensionContext::defaultAction(this);
  }
  CFTypeRef result = CFRetain(*(CFTypeRef *)(v6 + 8));
  *a3 = v6;
  return result;
}

CFTypeRef WebKit::WebExtensionContext::getAction@<X0>(WebKit::WebExtensionContext *this@<X0>, WebKit::WebExtensionTab *a2@<X1>, uint64_t *a3@<X8>)
{
  if (a2)
  {
    ++*((_DWORD *)this + 118);
    uint64_t v6 = *((void *)a2 + 1);
    if (v6
      && *(void *)(v6 + 8)
      && (uint64_t v7 = WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)this + 58, v6)) != 0)
    {
      uint64_t v8 = v7;
      CFTypeRef result = CFRetain(*(CFTypeRef *)(v7 + 8));
      *a3 = v8;
    }
    else
    {
      WebKit::WebExtensionTab::window(a2, &v12);
      uint64_t v10 = v12;
      CFTypeRef result = WebKit::WebExtensionContext::getAction(this, v12, a3);
      if (v10) {
        return (CFTypeRef)WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v10);
      }
    }
  }
  else
  {
    uint64_t v11 = WebKit::WebExtensionContext::defaultAction(this);
    CFTypeRef result = CFRetain(*(CFTypeRef *)(v11 + 8));
    *a3 = v11;
  }
  return result;
}

void sub_19932C6BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef WebKit::WebExtensionContext::getOrCreateAction@<X0>(WebKit::WebExtensionContext *this@<X0>, WebKit::WebExtensionWindow *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!a2)
  {
    uint64_t v22 = WebKit::WebExtensionContext::defaultAction(this);
    long long v23 = *(const void **)(v22 + 8);
    goto LABEL_56;
  }
  uint64_t v6 = (void *)((char *)this + 448);
  unsigned int v7 = *((_DWORD *)this + 114);
  *((_DWORD *)this + 114) = v7 + 1;
  if (v7 > *((_DWORD *)this + 115)) {
    WTF::WeakHashMap<WebKit::WebExtensionWindow,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)this + 448, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  uint64_t v9 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v9, 1u);
  atomic_fetch_add(v9, 1u);
  if (v9 && atomic_fetch_add(v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  uint64_t v10 = (void *)*v6;
  if (*v6
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)this + 56, 0), (uint64_t v10 = (void *)*v6) != 0))
  {
    char v11 = 0;
    int v12 = *((_DWORD *)v10 - 2);
  }
  else
  {
    int v12 = 0;
    char v11 = 1;
  }
  uint64_t v13 = 0;
  unint64_t v14 = ((unint64_t)v9 + ~((void)v9 << 32)) ^ (((unint64_t)v9 + ~((void)v9 << 32)) >> 22);
  unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  unsigned int v17 = (v16 >> 31) ^ v16;
  for (int i = 1; ; ++i)
  {
    unsigned int v19 = v17 & v12;
    long long v20 = &v10[2 * (v17 & v12)];
    long long v21 = (atomic_uint *)*v20;
    if (*v20 != -1) {
      break;
    }
    uint64_t v13 = (uint64_t)&v10[2 * v19];
LABEL_16:
    unsigned int v17 = i + v19;
  }
  if (!v21)
  {
    if (v13)
    {
      *(void *)uint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      --*(_DWORD *)(*v6 - 16);
      *(void *)uint64_t v13 = v9;
    }
    else
    {
      *long long v20 = v9;
      uint64_t v13 = (uint64_t)v20;
    }
    WebKit::WebExtensionAction::create<WebKit::WebExtensionContext &>(this, &v38);
    long long v26 = v38;
    char v38 = 0;
    uint64_t v27 = *(void *)(v13 + 8);
    *(void *)(v13 + 8) = v26;
    if (v27)
    {
      CFRelease(*(CFTypeRef *)(v27 + 8));
      long long v28 = v38;
      char v38 = 0;
      if (v28) {
        CFRelease(*((CFTypeRef *)v28 + 1));
      }
    }
    uint64_t v29 = (void *)*v6;
    if (*v6) {
      int v30 = *((_DWORD *)v29 - 3) + 1;
    }
    else {
      int v30 = 1;
    }
    *((_DWORD *)v29 - 3) = v30;
    long long v31 = (void *)*v6;
    if (*v6) {
      int v32 = *((_DWORD *)v31 - 3);
    }
    else {
      int v32 = 0;
    }
    uint64_t v33 = (*((_DWORD *)v31 - 4) + v32);
    unint64_t v34 = *((unsigned int *)v31 - 1);
    if (v34 > 0x400)
    {
      if (v34 <= 2 * v33)
      {
LABEL_38:
        uint64_t v13 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)this + 56, (unsigned int **)v13);
        long long v31 = (void *)*v6;
        if (*v6) {
          unint64_t v34 = *((unsigned int *)v31 - 1);
        }
        else {
          unint64_t v34 = 0;
        }
      }
    }
    else if (3 * v34 <= 4 * v33)
    {
      goto LABEL_38;
    }
    long long v25 = &v31[2 * v34];
    goto LABEL_43;
  }
  if (v21 != v9) {
    goto LABEL_16;
  }
  if (v11) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *((unsigned int *)v10 - 1);
  }
  long long v25 = &v10[2 * v24];
  if (v9 && atomic_fetch_add(v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v9);
    uint64_t v13 = (uint64_t)v20;
    WTF::fastFree((WTF *)v9, v8);
LABEL_43:
    long long v20 = (void *)v13;
  }
  uint64_t v35 = (void *)*v6;
  if (*v6) {
    v35 += 2 * *((unsigned int *)v35 - 1);
  }
  if (v20 != v35)
  {
    while (!*(void *)(*v20 + 8))
    {
      char v36 = v20 + 2;
      long long v20 = v25;
      if (v36 != v25)
      {
        long long v20 = v36;
        while ((unint64_t)(*v20 + 1) <= 1)
        {
          v20 += 2;
          if (v20 == v25)
          {
            long long v20 = v25;
            break;
          }
        }
      }
      if (v20 == v35)
      {
        long long v20 = v35;
        break;
      }
    }
  }
  uint64_t v22 = v20[1];
  long long v23 = *(const void **)(v22 + 8);
LABEL_56:
  CFTypeRef result = CFRetain(v23);
  *a3 = v22;
  return result;
}

void sub_19932C9F0(_Unwind_Exception *exception_object, void *a2)
{
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef WebKit::WebExtensionContext::getOrCreateAction@<X0>(WebKit::WebExtensionContext *this@<X0>, WebKit::WebExtensionTab *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!a2)
  {
    uint64_t v22 = WebKit::WebExtensionContext::defaultAction(this);
    long long v23 = *(const void **)(v22 + 8);
    goto LABEL_46;
  }
  uint64_t v6 = (void *)((char *)this + 464);
  unsigned int v7 = *((_DWORD *)this + 118);
  *((_DWORD *)this + 118) = v7 + 1;
  if (v7 > *((_DWORD *)this + 119)) {
    WTF::WeakHashMap<WebKit::WebExtensionWindow,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)this + 464, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  uint64_t v9 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v9, 1u);
  atomic_fetch_add(v9, 1u);
  if (v9 && atomic_fetch_add(v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  uint64_t v10 = *v6;
  if (*v6
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)this + 58, 0), (uint64_t v10 = *v6) != 0))
  {
    char v11 = 0;
    int v12 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    int v12 = 0;
    char v11 = 1;
  }
  uint64_t v13 = 0;
  unint64_t v14 = ((unint64_t)v9 + ~((void)v9 << 32)) ^ (((unint64_t)v9 + ~((void)v9 << 32)) >> 22);
  unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  unsigned int v17 = (v16 >> 31) ^ v16;
  for (int i = 1; ; ++i)
  {
    unsigned int v19 = v17 & v12;
    long long v20 = (atomic_uint **)(v10 + 16 * (v17 & v12));
    long long v21 = *v20;
    if (*v20 != (atomic_uint *)-1) {
      break;
    }
    uint64_t v13 = v10 + 16 * v19;
LABEL_16:
    unsigned int v17 = i + v19;
  }
  if (!v21)
  {
    if (v13)
    {
      *(void *)uint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      --*(_DWORD *)(*v6 - 16);
      *(void *)uint64_t v13 = v9;
    }
    else
    {
      *long long v20 = v9;
      uint64_t v13 = (uint64_t)v20;
    }
    uint64_t v27 = API::Object::newObject(0xB8uLL, 111);
    WebKit::WebExtensionAction::WebExtensionAction(v27, (uint64_t)this, (uint64_t)a2);
    uint64_t v28 = *(void *)(v13 + 8);
    *(void *)(v13 + 8) = v27;
    if (v28) {
      CFRelease(*(CFTypeRef *)(v28 + 8));
    }
    uint64_t v29 = *v6;
    if (*v6) {
      int v30 = *(_DWORD *)(v29 - 12) + 1;
    }
    else {
      int v30 = 1;
    }
    *(_DWORD *)(v29 - 12) = v30;
    uint64_t v31 = *v6;
    if (*v6) {
      int v32 = *(_DWORD *)(v31 - 12);
    }
    else {
      int v32 = 0;
    }
    uint64_t v33 = (*(_DWORD *)(v31 - 16) + v32);
    unint64_t v34 = *(unsigned int *)(v31 - 4);
    if (v34 > 0x400)
    {
      if (v34 <= 2 * v33)
      {
LABEL_37:
        uint64_t v13 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)this + 58, (unsigned int **)v13);
        uint64_t v31 = *v6;
        if (*v6) {
          unint64_t v34 = *(unsigned int *)(v31 - 4);
        }
        else {
          unint64_t v34 = 0;
        }
      }
    }
    else if (3 * v34 <= 4 * v33)
    {
      goto LABEL_37;
    }
    uint64_t v25 = v31 + 16 * v34;
    long long v20 = (atomic_uint **)v13;
    goto LABEL_42;
  }
  if (v21 != v9) {
    goto LABEL_16;
  }
  if (v11) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *(unsigned int *)(v10 - 4);
  }
  uint64_t v25 = v10 + 16 * v24;
  if (v9 && atomic_fetch_add(v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v9);
    long long v26 = v20;
    WTF::fastFree((WTF *)v9, v8);
    long long v20 = v26;
  }
LABEL_42:
  long long v39 = v6;
  long long v40 = v20;
  uint64_t v41 = v25;
  uint64_t v35 = *v6;
  if (*v6)
  {
    uint64_t v36 = *(unsigned int *)(v35 - 4);
    uint64_t v37 = v35 + 16 * v36;
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v36 = 0;
  }
  uint64_t v42 = v37;
  uint64_t v43 = v35 + 16 * v36;
  int v44 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v39);
  uint64_t v22 = (uint64_t)v40[1];
  long long v23 = *(const void **)(v22 + 8);
LABEL_46:
  CFTypeRef result = CFRetain(v23);
  *a3 = v22;
  return result;
}

void sub_19932CD0C(_Unwind_Exception *exception_object, void *a2)
{
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::performAction(WebKit::WebExtensionContext *this, WebKit::WebExtensionTab *a2, int a3)
{
  uint64_t v3 = *((void *)this + 9);
  if (v3 && *(void *)(v3 + 8))
  {
    if (a2 && a3) {
      WebKit::WebExtensionContext::userGesturePerformed(this, a2);
    }
    WebKit::WebExtensionContext::getOrCreateAction(this, a2, (uint64_t *)&v7);
    uint64_t v6 = (CFTypeRef *)v7;
    if (WebKit::WebExtensionAction::presentsPopup(v7)) {
      WebKit::WebExtensionAction::presentPopupWhenReady((WebKit::WebExtensionAction *)v6);
    }
    else {
      WebKit::WebExtensionContext::fireActionClickedEventIfNeeded((CFTypeRef *)this, a2);
    }
    if (v6) {
      CFRelease(v6[1]);
    }
  }
}

void sub_19932CDE4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::userGesturePerformed(WebKit::WebExtensionContext *this, WebKit::WebExtensionTab *a2)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2 && *(void *)(v2 + 8))
  {
    *(_DWORD *)((char *)a2 + 50) |= 1u;
    MEMORY[0x19972EAD0](&v15, @"activeTab");
    int v6 = WebKit::WebExtensionContext::permissionState(this, (WTF **)&v15, 0, 2) & 0xFFFFFFFE;
    m_ptr = v15.m_string.m_impl.m_ptr;
    v15.m_string.m_impl.m_ptr = 0;
    if (m_ptr)
    {
      if (*(_DWORD *)m_ptr == 2) {
        WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v5);
      }
      else {
        *(_DWORD *)m_ptr -= 2;
      }
    }
    if (v6 == 2)
    {
      if (WebKit::WebExtensionTab::shouldGrantPermissionsOnUserGesture(a2))
      {
        WebKit::WebExtensionTab::url(a2, (uint64_t)&v15);
        if (v15.m_string.m_impl.m_ptr)
        {
          if (*((_DWORD *)v15.m_string.m_impl.m_ptr + 1))
          {
            int v9 = WebKit::WebExtensionContext::permissionState((uint64_t)this, &v15, (URL *)a2, 1);
            if ((v9 - 2) >= 2 && (v9 - 253) >= 2)
            {
              WebKit::WebExtensionMatchPattern::getOrCreate((uint64_t)&v15, 6, &v14);
              uint64_t v10 = v14;
              if (v14) {
                CFRetain(*(CFTypeRef *)(v14 + 8));
              }
              uint64_t v11 = *((void *)a2 + 5);
              *((void *)a2 + 5) = v10;
              if (v11) {
                CFRelease(*(CFTypeRef *)(v11 + 8));
              }
              WebKit::WebExtensionContext::didChangeTabProperties((uint64_t)this, a2, 0x180u);
              uint64_t v12 = v14;
              uint64_t v14 = 0;
              if (v12) {
                CFRelease(*(CFTypeRef *)(v12 + 8));
              }
            }
          }
          uint64_t v13 = v15.m_string.m_impl.m_ptr;
          v15.m_string.m_impl.m_ptr = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy((WTF::StringImpl *)v13, v8);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
        }
      }
    }
  }
}

void sub_19932CF7C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::commands(WebKit::WebExtensionContext *this)
{
  if (!*((unsigned char *)this + 624))
  {
    uint64_t v2 = *((void *)this + 8);
    WebKit::WebExtension::populateCommandsIfNeeded((WebKit::WebExtension *)v2);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v4 = *(unsigned int *)(v2 + 68);
    if (v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v4));
      LODWORD(v19) = v4;
      uint64_t v18 = v5;
      uint64_t v6 = *(unsigned int *)(v2 + 68);
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v2 + 56);
        uint64_t v9 = 32 * v6;
        do
        {
          uint64_t v10 = API::Object::newObject(0x48uLL, 112);
          *(void *)(v5 + 8 * v7++) = WebKit::WebExtensionCommand::WebExtensionCommand(v10, (uint64_t)this, v8);
          v8 += 32;
          v9 -= 32;
        }
        while (v9);
        HIDWORD(v19) = v6;
      }
    }
    uint64_t v11 = (WTF **)((char *)this + 608);
    uint64_t v12 = *((unsigned int *)this + 155);
    if (v12)
    {
      uint64_t v13 = *v11;
      uint64_t v14 = 8 * v12;
      do
      {
        uint64_t v15 = *(void *)v13;
        *(void *)uint64_t v13 = 0;
        if (v15) {
          CFRelease(*(CFTypeRef *)(v15 + 8));
        }
        uint64_t v13 = (WTF *)((char *)v13 + 8);
        v14 -= 8;
      }
      while (v14);
    }
    unint64_t v16 = *v11;
    if (*v11)
    {
      *((void *)this + 76) = 0;
      *((_DWORD *)this + 154) = 0;
      WTF::fastFree(v16, v3);
    }
    *((void *)this + 76) = v18;
    uint64_t v17 = v19;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    *((void *)this + 77) = v17;
    WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v3);
    *((unsigned char *)this + 624) = 1;
  }
}

void sub_19932D10C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WebKit::WebExtensionContext::command(WebKit::WebExtensionContext *this, const WTF::StringImpl **a2)
{
  if (!*a2) {
    return 0;
  }
  if (!*((_DWORD *)*a2 + 1)) {
    return 0;
  }
  WebKit::WebExtensionContext::commands(this);
  uint64_t v5 = *((unsigned int *)v3 + 3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *v3;
  uint64_t v7 = 8 * v5;
  while (!WTF::equal(*(WTF **)(*(void *)v6 + 32), *a2, v4))
  {
    v6 += 8;
    v7 -= 8;
    if (!v7) {
      return 0;
    }
  }
  return *(void *)v6;
}

uint64_t WebKit::WebExtensionContext::performCommand(uint64_t result, WebKit::WebExtensionCommand *a2, int a3)
{
  uint64_t v3 = *(void *)(result + 72);
  if (v3 && *(void *)(v3 + 8))
  {
    uint64_t v6 = (WebKit::WebExtensionContext *)result;
    uint64_t v7 = *((void *)a2 + 3);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8) {
        uint64_t v7 = v8 - 16;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    if (v7 == result)
    {
      if (*(_DWORD *)(result + 540))
      {
        WebKit::WebExtensionContext::getWindow(result, **(void **)(result + 528), 0, 0, 0, &v13);
        uint64_t v9 = v13;
        if (v13)
        {
          WebKit::WebExtensionWindow::activeTab(v13, 0, (uint64_t *)&v12);
LABEL_13:
          int isActionCommand = WebKit::WebExtensionCommand::isActionCommand(a2);
          uint64_t v11 = v12;
          if (isActionCommand)
          {
            WebKit::WebExtensionContext::performAction(v6, v12, a3);
          }
          else
          {
            if (v12 && a3)
            {
              WebKit::WebExtensionContext::userGesturePerformed(v6, v12);
              uint64_t v11 = v12;
            }
            WebKit::WebExtensionContext::fireCommandEventIfNeeded((CFTypeRef *)v6, (CFTypeRef *)a2, v11);
          }
          CFTypeRef result = (uint64_t)v12;
          uint64_t v12 = 0;
          if (result) {
            CFTypeRef result = WTF::RefCounted<WebKit::WebExtensionTab>::deref(result);
          }
          if (v9) {
            return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v9);
          }
          return result;
        }
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v12 = 0;
      goto LABEL_13;
    }
  }
  return result;
}

void sub_19932D2C4(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v1);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionCommand *WebKit::WebExtensionContext::commandMatchingKeyCommand(WebKit::WebExtensionContext *this, UIKeyCommand *a2)
{
  uint64_t v3 = a2;
  WebKit::WebExtensionContext::commands(this);
  uint64_t v5 = *(unsigned int *)(v4 + 12);
  if (v5)
  {
    uint64_t v6 = *(WebKit::WebExtensionCommand ***)v4;
    uint64_t v7 = 8 * v5;
    while (!WebKit::WebExtensionCommand::matchesKeyCommand(*v6, v3))
    {
      ++v6;
      v7 -= 8;
      if (!v7) {
        goto LABEL_5;
      }
    }
    uint64_t v8 = *v6;
  }
  else
  {
LABEL_5:
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_19932D374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::performCommand(WebKit::WebExtensionContext *this, UIKeyCommand *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = *((void *)this + 9);
  if (v4
    && *(void *)(v4 + 8)
    && (uint64_t v5 = WebKit::WebExtensionContext::commandMatchingKeyCommand(this, v3), (v6 = (CFTypeRef *)v5) != 0))
  {
    CFRetain(*((CFTypeRef *)v5 + 1));
    WebKit::WebExtensionContext::performCommand((uint64_t)this, (WebKit::WebExtensionCommand *)v6, 1);
    CFRelease(v6[1]);
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_19932D410(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v2 + 8));

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionContext::platformMenuItems(WebKit::WebExtension **this, const WebKit::WebExtensionTab *a2)
{
  v27[1] = *MEMORY[0x1E4F143B8];
  WebKit::WebExtensionMenuItemContextParameters::WebExtensionMenuItemContextParameters((WebKit::WebExtensionMenuItemContextParameters *)&v20);
  LOWORD(v20) = 256;
  uint64_t v4 = *((void *)a2 + 2);
  if (!v21) {
    char v21 = 1;
  }
  *((void *)&v20 + 1) = v4;
  WebKit::WebExtensionTab::url(a2, (uint64_t)v19);
  WTF::URL::operator=((uint64_t)&v22, (uint64_t)v19);
  uint64_t v6 = v19[0];
  v19[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = WebKit::WebExtensionMenuItem::matchingPlatformMenuItems((uint64_t)(this + 88), &v20, 0);
  if (!objc_msgSend(v7, "count", v19[0]))
  {
    uint64_t v9 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_14:

    goto LABEL_16;
  }
  if ([v7 count] == 1)
  {
    uint64_t v8 = [v7 firstObject];
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4F42B80];
    WebKit::WebExtension::populateDisplayStringsIfNeeded(this[8]);
    uint64_t v11 = WTF::RetainPtr<__IOHIDDevice *>::get();
    uint64_t v8 = [v10 menuWithTitle:v11 children:v7];
  }
  if (v8)
  {
    v27[0] = v8;
    uint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v27 count:1];
    uint64_t v7 = (void *)v8;
    goto LABEL_14;
  }
  uint64_t v9 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_16:
  uint64_t v13 = v26;
  long long v26 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = v25;
  uint64_t v25 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = v24;
  uint64_t v24 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v12);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  unint64_t v16 = v23;
  long long v23 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v12);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = v22;
  uint64_t v22 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v12);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }

  return v9;
}

void sub_19932D68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF::StringImpl *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::StringImpl *a35)
{
  uint64_t v37 = v35;

  if (a35)
  {
    if (*(_DWORD *)a35 == 2) {
      WTF::StringImpl::destroy(a35, v39);
    }
    else {
      *(_DWORD *)a35 -= 2;
    }
  }
  if (a30)
  {
    if (*(_DWORD *)a30 == 2) {
      WTF::StringImpl::destroy(a30, v39);
    }
    else {
      *(_DWORD *)a30 -= 2;
    }
  }
  if (a25)
  {
    if (*(_DWORD *)a25 == 2) {
      WTF::StringImpl::destroy(a25, v39);
    }
    else {
      *(_DWORD *)a25 -= 2;
    }
  }
  if (a24)
  {
    if (*(_DWORD *)a24 == 2) {
      WTF::StringImpl::destroy(a24, v39);
    }
    else {
      *(_DWORD *)a24 -= 2;
    }
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, v39);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::performMenuItem(uint64_t *a1, WebKit::WebExtensionMenuItem *this, WebKit::WebExtensionMenuItemContextParameters *a3, int a4)
{
  uint64_t v4 = a1[9];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v9 = (uint64_t *)*((void *)this + 2);
    if (v9)
    {
      uint64_t v10 = v9[1];
      if (v10) {
        uint64_t v9 = (uint64_t *)(v10 - 16);
      }
      else {
        uint64_t v9 = 0;
      }
    }
    if (v9 == a1)
    {
      if (!*((unsigned char *)a3 + 16)) {
        goto LABEL_15;
      }
      WebKit::WebExtensionContext::getTab(a1, *((void *)a3 + 1), 0, &v15);
      uint64_t v11 = v15;
      if (v15 && a4)
      {
        WebKit::WebExtensionContext::userGesturePerformed((WebKit::WebExtensionContext *)a1, v15);
      }
      else if (!v15)
      {
        goto LABEL_15;
      }
      WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v11);
LABEL_15:
      uint64_t v12 = (CFTypeRef *)*((void *)this + 6);
      if (v12)
      {
        CFRetain(v12[1]);
        WebKit::WebExtensionContext::performCommand((uint64_t)a1, (WebKit::WebExtensionCommand *)v12, 0);
        CFTypeRef v13 = v12[1];
        CFRelease(v13);
      }
      else
      {
        char v14 = WebKit::WebExtensionMenuItem::toggleCheckedIfNeeded(this, a3, a3);
        WebKit::WebExtensionContext::fireMenusClickedEventIfNeeded((WebKit::WebExtensionContext *)a1, this, v14, a3);
      }
    }
  }
}

void sub_19932D8F4(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v1);
  _Unwind_Resume(a1);
}

unint64_t WebKit::WebExtensionContext::backgroundPageIdentifier(WebKit::WebExtensionContext *this)
{
  uint64_t v1 = *((void *)this + 41);
  if (v1)
  {
    uint64_t v3 = *((void *)this + 8);
    WebKit::WebExtension::populateBackgroundPropertiesIfNeeded((id *)v3);
    if (!*(unsigned char *)(v3 + 320))
    {
      uint64_t v5 = WTF::RetainPtr<NSSet>::get((id *)this + 41);
      [v5 _page];
      uint64_t v6 = *(void *)(*(void *)(v8 + 32) + 1928);
      unint64_t v4 = v6 & 0xFFFFFFFFFFFFFF00;

      uint64_t v1 = v6;
      return v4 | v1;
    }
    uint64_t v1 = 0;
  }
  unint64_t v4 = 0;
  return v4 | v1;
}

void sub_19932D9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::popupPageIdentifiers@<X0>(WebKit::WebExtensionContext *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v4 = (char *)this + 584;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::begin(&v40, (void *)this + 73);
  uint64_t v5 = *((void *)this + 73);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = (uint64_t *)(v5 + 16 * v6);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  unint64_t v34 = v4;
  uint64_t v35 = v7;
  uint64_t v36 = v7;
  uint64_t v37 = v7;
  uint64_t v38 = v5 + 16 * v6;
  int v39 = 0;
  CFTypeRef result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v34);
  uint64_t v9 = v41;
  if (v41 != v35)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = v35;
    while (1)
    {
      uint64_t v14 = *v9;
      uint64_t v13 = v9[1];
      uint64_t v15 = *(void *)(v14 + 8);
      if (v15) {
        uint64_t v16 = v15 - 16;
      }
      else {
        uint64_t v16 = 0;
      }
      if (*(unsigned char *)(v13 + 40))
      {
        uint64_t v17 = *(void *)(v13 + 32);
        if (v17)
        {
          uint64_t v18 = *(WebKit::WebExtensionTab **)(v17 + 8);
          if (v18)
          {
            ++*(_DWORD *)v18;
            WebKit::WebExtensionTab::window(v18, &v33);
            char v19 = 0;
            unint64_t v20 = *((void *)v18 + 2);
            unint64_t v10 = v20 >> 8;
            char v21 = 1;
            uint64_t v22 = v33;
            if (v33) {
              goto LABEL_22;
            }
            goto LABEL_13;
          }
        }
      }
      char v21 = *(unsigned char *)(v13 + 56);
      if (!v21) {
        break;
      }
      unint64_t v20 = *(void *)(v13 + 48);
      if (v20)
      {
        uint64_t v22 = *(void *)(v20 + 8);
        if (v22)
        {
          uint64_t v18 = 0;
          char v21 = 0;
          LOBYTE(v20) = 0;
          ++*(_DWORD *)v22;
          goto LABEL_21;
        }
        uint64_t v18 = 0;
        char v21 = 0;
        goto LABEL_19;
      }
      uint64_t v22 = 0;
      uint64_t v18 = 0;
      char v21 = 0;
LABEL_21:
      char v19 = 1;
      if (v22)
      {
LABEL_22:
        unint64_t v23 = *(void *)(v22 + 16);
        unint64_t v11 = v23 >> 8;
        char v24 = 1;
        goto LABEL_23;
      }
LABEL_13:
      LOBYTE(v23) = 0;
      char v24 = 0;
LABEL_23:
      *(void *)&long long v30 = *(void *)(*(void *)(v16 + 32) + 1928);
      *((void *)&v30 + 1) = v20 | (v10 << 8);
      LOBYTE(v31) = v21;
      *((void *)&v31 + 1) = v23 | (v11 << 8);
      LOBYTE(v32) = v24;
      uint64_t v25 = *(unsigned int *)(a2 + 12);
      if (v25 == *(_DWORD *)(a2 + 8))
      {
        unint64_t v26 = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v25 + 1, (unint64_t)&v30);
        LODWORD(v25) = *(_DWORD *)(a2 + 12);
        uint64_t v27 = *(void *)a2 + 40 * v25;
        long long v28 = *(_OWORD *)v26;
        long long v29 = *(_OWORD *)(v26 + 16);
        *(void *)(v27 + 32) = *(void *)(v26 + 32);
      }
      else
      {
        uint64_t v27 = *(void *)a2 + 40 * v25;
        long long v28 = v30;
        long long v29 = v31;
        *(void *)(v27 + 32) = v32;
      }
      *(_OWORD *)uint64_t v27 = v28;
      *(_OWORD *)(v27 + 16) = v29;
      *(_DWORD *)(a2 + 12) = v25 + 1;
      uint64_t v33 = 0;
      if (v22) {
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v22);
      }
      if ((v19 & 1) == 0) {
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v18);
      }
      CFTypeRef result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance((uint64_t)&v40);
      uint64_t v9 = v41;
      if (v41 == v12) {
        return result;
      }
    }
    uint64_t v22 = 0;
    uint64_t v18 = 0;
LABEL_19:
    LOBYTE(v20) = 0;
    goto LABEL_21;
  }
  return result;
}

void sub_19932DC04(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v2);
  uint64_t v5 = *(WTF **)v1;
  if (*(void *)v1)
  {
    *(void *)uint64_t v1 = 0;
    *(_DWORD *)(v1 + 8) = 0;
    WTF::fastFree(v5, v4);
  }
  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::tabPageIdentifiers@<X0>(WebKit::WebExtensionContext *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v4 = (char *)this + 568;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::begin(&v36, (void *)this + 71);
  uint64_t v5 = *((void *)this + 71);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = (void *)(v5 + 16 * v6);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  long long v30 = v4;
  long long v31 = v7;
  uint64_t v32 = v7;
  uint64_t v33 = v7;
  uint64_t v34 = v5 + 16 * v6;
  int v35 = 0;
  CFTypeRef result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v30);
  uint64_t v9 = v31;
  unint64_t v10 = v37;
  if (v37 != v31)
  {
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = v10[1];
      uint64_t v13 = *(void *)(*v10 + 8);
      if (v13) {
        uint64_t v14 = v13 - 16;
      }
      else {
        uint64_t v14 = 0;
      }
      WebKit::WebExtensionContext::getTab((uint64_t *)this, v12, 0, &v29);
      uint64_t v15 = v29;
      if (v29)
      {
        WebKit::WebExtensionTab::window(v29, &v28);
        uint64_t v16 = v28;
        if (v28)
        {
          unint64_t v17 = *(void *)(v28 + 16);
          unint64_t v11 = v17 >> 8;
          char v18 = 1;
        }
        else
        {
          char v18 = 0;
          LOBYTE(v17) = 0;
        }
        uint64_t v19 = *((void *)v15 + 2);
        *(void *)&long long v25 = *(void *)(*(void *)(v14 + 32) + 1928);
        *((void *)&v25 + 1) = v19;
        LOBYTE(v26) = 1;
        *((void *)&v26 + 1) = v17 | (v11 << 8);
        LOBYTE(v27) = v18;
        uint64_t v20 = *(unsigned int *)(a2 + 12);
        if (v20 == *(_DWORD *)(a2 + 8))
        {
          unint64_t v21 = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v20 + 1, (unint64_t)&v25);
          LODWORD(v20) = *(_DWORD *)(a2 + 12);
          uint64_t v22 = *(void *)a2 + 40 * v20;
          long long v23 = *(_OWORD *)v21;
          long long v24 = *(_OWORD *)(v21 + 16);
          *(void *)(v22 + 32) = *(void *)(v21 + 32);
        }
        else
        {
          uint64_t v22 = *(void *)a2 + 40 * v20;
          long long v23 = v25;
          long long v24 = v26;
          *(void *)(v22 + 32) = v27;
        }
        *(_OWORD *)uint64_t v22 = v23;
        *(_OWORD *)(v22 + 16) = v24;
        *(_DWORD *)(a2 + 12) = v20 + 1;
        if (v16) {
          WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v16);
        }
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v15);
      }
      CFTypeRef result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance((uint64_t)&v36);
      unint64_t v10 = v37;
    }
    while (v37 != v9);
  }
  return result;
}

void sub_19932DDFC(_Unwind_Exception *a1)
{
  if (v3) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v3);
  }
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v2);
  uint64_t v6 = *(WTF **)v1;
  if (*(void *)v1)
  {
    *(void *)uint64_t v1 = 0;
    *(_DWORD *)(v1 + 8) = 0;
    WTF::fastFree(v6, v5);
  }
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionContext::addPopupPage(WebKit::WebExtensionContext *this, WebKit::WebPageProxy *a2, CFTypeRef *a3)
{
  uint64_t v6 = (uint64_t *)((char *)this + 584);
  unsigned int v7 = *((_DWORD *)this + 148);
  *((_DWORD *)this + 148) = v7 + 1;
  if (v7 > *((_DWORD *)this + 149)) {
    WTF::WeakHashMap<WebKit::WebExtensionWindow,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)this + 584, a2);
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v9 = (atomic_uint *)*((void *)a2 + 3);
  atomic_fetch_add(v9, 1u);
  atomic_fetch_add(v9, 1u);
  if (v9 && atomic_fetch_add(v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  uint64_t v10 = *v6;
  if (*v6
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v6, 0), (uint64_t v10 = *v6) != 0))
  {
    unsigned int v11 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    unsigned int v11 = 0;
  }
  uint64_t v12 = 0;
  unint64_t v13 = ((unint64_t)v9 + ~((void)v9 << 32)) ^ (((unint64_t)v9 + ~((void)v9 << 32)) >> 22);
  unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  int v16 = (v15 >> 31) ^ v15;
  for (int i = 1; ; ++i)
  {
    uint64_t v18 = v16 & v11;
    uint64_t v19 = (atomic_uint **)(v10 + 16 * v18);
    uint64_t v20 = *v19;
    if (*v19 == (atomic_uint *)-1)
    {
      uint64_t v12 = v10 + 16 * v18;
      goto LABEL_15;
    }
    if (!v20)
    {
      if (v12)
      {
        *(void *)uint64_t v12 = 0;
        *(void *)(v12 + 8) = 0;
        --*(_DWORD *)(*v6 - 16);
        *(void *)uint64_t v12 = v9;
      }
      else
      {
        *uint64_t v19 = v9;
        uint64_t v12 = v10 + 16 * v18;
      }
      CFRetain(a3[1]);
      uint64_t v24 = *(void *)(v12 + 8);
      *(void *)(v12 + 8) = a3;
      if (v24) {
        CFRelease(*(CFTypeRef *)(v24 + 8));
      }
      uint64_t v25 = *v6;
      if (*v6) {
        int v26 = *(_DWORD *)(v25 - 12) + 1;
      }
      else {
        int v26 = 1;
      }
      *(_DWORD *)(v25 - 12) = v26;
      uint64_t v27 = *v6;
      if (*v6) {
        int v28 = *(_DWORD *)(v27 - 12);
      }
      else {
        int v28 = 0;
      }
      uint64_t v29 = (*(_DWORD *)(v27 - 16) + v28);
      unint64_t v30 = *(unsigned int *)(v27 - 4);
      if (v30 > 0x400)
      {
        if (v30 > 2 * v29) {
          goto LABEL_35;
        }
      }
      else if (3 * v30 > 4 * v29)
      {
        goto LABEL_35;
      }
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v6, (unsigned int **)v12);
      goto LABEL_35;
    }
    if (v20 == v9) {
      break;
    }
LABEL_15:
    int v16 = i + v18;
  }
  CFRetain(a3[1]);
  uint64_t v22 = v10 + 16 * v18;
  uint64_t v23 = *(void *)(v22 + 8);
  *(void *)(v22 + 8) = a3;
  if (v23) {
    CFRelease(*(CFTypeRef *)(v23 + 8));
  }
  if (v9 && atomic_fetch_add(v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree((WTF *)v9, v21);
  }
LABEL_35:
  if (*((unsigned char *)a3 + 40) && (CFTypeRef v31 = a3[4]) != 0 && (v32 = (WebKit::WebExtensionTab *)*((void *)v31 + 1)) != 0)
  {
    ++*(_DWORD *)v32;
    WebKit::WebExtensionTab::window(v32, &v51);
    char v33 = 0;
    uint64_t v49 = *((void *)v32 + 2);
    char v34 = 1;
    uint64_t v35 = v51;
  }
  else
  {
    if (*((unsigned char *)a3 + 56) && (uint64_t v36 = a3[6]) != 0)
    {
      uint64_t v35 = v36[1];
      if (v35) {
        ++*(_DWORD *)v35;
      }
    }
    else
    {
      uint64_t v35 = 0;
    }
    uint64_t v32 = 0;
    char v34 = 0;
    uint64_t v51 = v35;
    LOBYTE(v49) = 0;
    char v33 = 1;
  }
  char v50 = v34;
  if (v35)
  {
    uint64_t v47 = *(void *)(v35 + 16);
    char v37 = 1;
  }
  else
  {
    char v37 = 0;
    LOBYTE(v47) = 0;
  }
  char v48 = v37;
  uint64_t v38 = *((void *)a2 + 32);
  uint64_t v46 = *(void *)(*((void *)a2 + 4) + 1928);
  uint64_t v39 = *((void *)this + 4);
  uint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v40 = 1597;
  *((void *)v40 + 1) = v39;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  uint64_t v54 = v40;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v40, &v46);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v40, (uint64_t)&v49);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v40, (uint64_t)&v47);
  LOBYTE(v52) = 0;
  char v53 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v38, &v54, 0, (uint64_t)&v52, 1);
  if (v53)
  {
    uint64_t v42 = v52;
    uint64_t v52 = 0;
    if (v42) {
      (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
    }
  }
  CFTypeRef result = v54;
  uint64_t v54 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v41);
    CFTypeRef result = (IPC::Encoder *)WTF::fastFree(v44, v45);
  }
  uint64_t v51 = 0;
  if (v35) {
    CFTypeRef result = (IPC::Encoder *)WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v35);
  }
  if ((v33 & 1) == 0) {
    return (IPC::Encoder *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v32);
  }
  return result;
}

void sub_19932E248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, IPC::Encoder *a18)
{
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v18);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::addExtensionTabPage(WebKit::WebExtensionContext *this, WebKit::WebPageProxy *a2, uint64_t **a3)
{
  v13[0] = a3[2];
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPageProxy,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t)this + 568, a2, v13);
  WebKit::WebExtensionTab::window((WebKit::WebExtensionTab *)a3, &v16);
  uint64_t v6 = v16;
  if (v16)
  {
    uint64_t v14 = *(void *)(v16 + 16);
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
    LOBYTE(v14) = 0;
  }
  char v15 = v7;
  uint64_t v8 = *((void *)a2 + 32);
  uint64_t v9 = *(void *)(*((void *)a2 + 4) + 1928);
  unsigned int v11 = a3[2];
  uint64_t v12 = v9;
  v13[0] = &v12;
  v13[1] = (uint64_t *)&v11;
  _OWORD v13[2] = &v14;
  uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebExtensionContextProxy::AddTabPageIdentifier>(v8, (uint64_t)v13, *((void *)this + 4), 0);
  if (v6) {
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v6);
  }
  return result;
}

void sub_19932E3C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::WeakHashMap<WebKit::WebPageProxy,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPageProxy,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t a1, void *a2, uint64_t **a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7) {
    WTF::WeakHashMap<WebKit::WebPageProxy,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1, a2);
  }
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultWeakPtrImpl>::makeKeyImpl<WebKit::WebPage>((uint64_t)a2, (atomic_uint **)&v11);
  WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::inlineSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a1, &v11, a3, (uint64_t)&v10);
  uint64_t result = (unsigned int *)v11;
  unsigned int v11 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
  }
  return result;
}

void sub_19932E474(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  if (a12)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a12, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)a12);
      WTF::fastFree(a12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef *WebKit::WebExtensionContext::websiteDataStore(uint64_t a1, const void *a2, char a3)
{
  uint64_t v4 = *(void *)(a1 + 72);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      uint64_t v6 = v5 - 16;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  unsigned int v7 = WebKit::WebExtensionController::websiteDataStore(v6, a2, a3);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  CFRetain(v7[1]);
  unint64_t v9 = (unint64_t)v8[3];
  if ((v9 & 0x8000000000000000) == 0 || v9 == -1 || *(unsigned char *)(a1 + 273)) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  CFRelease(v8[1]);
  return v10;
}

void WebKit::WebExtensionContext::backgroundContentURL(id **this@<X0>, WTF::URL *a2@<X8>)
{
  if (WebKit::WebExtension::hasBackgroundContent(this[8]))
  {
    uint64_t v4 = WebKit::WebExtension::backgroundContentPath(this[8]);
    MEMORY[0x19972EAD0](&v7, v4);
    MEMORY[0x19972E8B0](a2, this + 10, &v7, 0);
    uint64_t v6 = v7;
    unsigned int v7 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  else
  {
    WTF::URL::URL(a2);
  }
}

void sub_19932E5F4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::loadBackgroundContent(uint64_t a1, uint64_t *a2)
{
  BOOL hasBackgroundContent = WebKit::WebExtension::hasBackgroundContent(*(id **)(a1 + 64));
  if (hasBackgroundContent)
  {
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v5 = *a2;
    *a2 = 0;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v6 = &unk_1EE9FF0C0;
    v6[1] = a1;
    v6[2] = a1;
    v6[3] = v5;
    unint64_t v9 = v6;
    WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessary(a1, (uint64_t *)&v9);
    uint64_t v7 = (uint64_t)v9;
    unint64_t v9 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  else if (*a2)
  {
    WebKit::WebExtensionContext::createError(hasBackgroundContent, 5, 0, 0);
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    WTF::CompletionHandler<void ()(NSError *)>::operator()(a2, v8);
  }
}

void sub_19932E740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(NSError *)>::operator()(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  uint64_t v3 = *(void (**)(uint64_t, id))(*(void *)v2 + 16);
  id v4 = a2;
  v3(v2, v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v6(v2);
}

void sub_19932E874(_Unwind_Exception *a1)
{
  id v4 = *(void (**)(uint64_t))(*(void *)v1 + 8);

  v4(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::wakeUpBackgroundContentIfNecessary(uint64_t a1, uint64_t *a2)
{
  if (!WebKit::WebExtension::hasBackgroundContent(*(id **)(a1 + 64))
    || (WebKit::WebExtensionContext::scheduleBackgroundContentToUnload(a1), *(void *)(a1 + 328))
    && *(unsigned char *)(a1 + 384)
    && !*(_DWORD *)(a1 + 292))
  {
    WTF::CompletionHandler<void ()(void)>::operator()(a2);
  }
  else
  {
    id v4 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)unint64_t v9 = 0;
      _os_log_debug_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEBUG, "Scheduled task for after background content loads", v9, 2u);
    }
    uint64_t v5 = (void *)(a1 + 280);
    uint64_t v6 = *(unsigned int *)(a1 + 292);
    if (v6 == *(_DWORD *)(a1 + 288))
    {
      a2 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v6 + 1, (unint64_t)a2);
      uint64_t v6 = *(unsigned int *)(a1 + 292);
      uint64_t v7 = (uint64_t *)(*(void *)(a1 + 280) + 8 * v6);
    }
    else
    {
      uint64_t v7 = (uint64_t *)(*v5 + 8 * v6);
    }
    uint64_t v8 = *a2;
    *a2 = 0;
    uint64_t *v7 = v8;
    *(_DWORD *)(a1 + 292) = v6 + 1;
    if (WebKit::WebExtension::hasBackgroundContent(*(id **)(a1 + 64)) && !*(void *)(a1 + 328))
    {
      if (*(unsigned char *)(a1 + 385)) {
        WebKit::WebExtensionContext::loadBackgroundWebView((WebKit::WebExtensionContext *)a1);
      }
    }
  }
}

void WebKit::WebExtensionContext::loadBackgroundWebView(WebKit::WebExtensionContext *this)
{
  if (WebKit::WebExtension::hasBackgroundContent(*((id **)this + 8)))
  {
    uint64_t v2 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEBUG, "Loading background content", buf, 2u);
    }
    *((unsigned char *)this + 384) = 0;
    uint64_t v3 = [WKWebView alloc];
    double v4 = *MEMORY[0x1E4F1DB28];
    double v5 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
    double v6 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
    double v7 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
    uint64_t v8 = WebKit::WebExtensionContext::webViewConfiguration((uint64_t)this, 1);
    unint64_t v9 = -[WKWebView initWithFrame:configuration:](v3, "initWithFrame:configuration:", v8, v4, v5, v6, v7);
    uint64_t v10 = v9;
    if (v9) {
      CFRetain(v9);
    }

    unsigned int v11 = (const void *)*((void *)this + 41);
    *((void *)this + 41) = v10;
    if (v11) {
      CFRelease(v11);
    }

    uint64_t v12 = (void *)*((void *)this + 44);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v12);
    objc_claimAutoreleasedReturnValue();
    unint64_t v13 = WTF::RetainPtr<NSSet>::get((id *)this + 41);
    [v13 setUIDelegate:v12];

    uint64_t v14 = (void *)*((void *)this + 44);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v14);
    objc_claimAutoreleasedReturnValue();
    char v15 = WTF::RetainPtr<NSSet>::get((id *)this + 41);
    [v15 setNavigationDelegate:v14];

    uint64_t v16 = *((unsigned __int8 *)this + 144);
    unint64_t v17 = WTF::RetainPtr<NSSet>::get((id *)this + 41);
    [v17 setInspectable:v16];

    uint64_t v18 = *((void *)this + 9);
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 8);
      if (v19) {
        uint64_t v20 = (id *)(v19 - 16);
      }
      else {
        uint64_t v20 = 0;
      }
    }
    else
    {
      uint64_t v20 = 0;
    }
    unint64_t v21 = WebKit::WebExtensionController::delegate(v20);
    if (objc_opt_respondsToSelector())
    {
      uint64_t v22 = *((void *)this + 9);
      if (v22)
      {
        uint64_t v23 = *(void *)(v22 + 8);
        if (v23) {
          uint64_t v24 = (id *)(v23 - 16);
        }
        else {
          uint64_t v24 = 0;
        }
      }
      else
      {
        uint64_t v24 = 0;
      }
      uint64_t v25 = WebKit::WebExtensionAction::wrapper(v24);
      int v26 = WTF::RetainPtr<NSSet>::get((id *)this + 41);
      uint64_t v27 = WebKit::WebExtensionAction::wrapper((id *)this);
      [v21 _webExtensionController:v25 didCreateBackgroundWebView:v26 forExtensionContext:v27];
    }
    int v28 = WebKit::WebExtensionContext::backgroundWebViewInspectionName(this);
    uint64_t v29 = WTF::RetainPtr<NSSet>::get((id *)this + 41);
    [v29 _setRemoteInspectionNameOverride:v28];

    unint64_t v30 = WTF::RetainPtr<NSSet>::get((id *)this + 7);
    uint64_t v31 = [v30 count];

    if (v31)
    {
      uint64_t v32 = WTF::RetainPtr<NSSet>::get((id *)this + 7);
      *(void *)buf = MEMORY[0x1E4F143A8];
      uint64_t v67 = 3221225472;
      char v68 = ___ZN6WebKit19WebExtensionContext10clearErrorENS0_5ErrorE_block_invoke;
      uint64_t v69 = &__block_descriptor_40_e24_B32__0__NSError_8Q16_B24l;
      uint64_t v70 = 6;
      char v33 = [v32 indexesOfObjectsPassingTest:buf];

      if ([v33 count])
      {
        char v34 = WebKit::WebExtensionAction::wrapper((id *)this);
        [v34 willChangeValueForKey:@"errors"];

        uint64_t v35 = WTF::RetainPtr<NSSet>::get((id *)this + 7);
        [v35 removeObjectsAtIndexes:v33];

        uint64_t v36 = WebKit::WebExtensionAction::wrapper((id *)this);
        [v36 didChangeValueForKey:@"errors"];

        CFRetain(*((CFTypeRef *)this + 1));
        char v37 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
        void *v37 = MEMORY[0x1E4F14398];
        v37[1] = 50331650;
        _OWORD v37[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::clearError(WebKit::WebExtensionContext::Error)::$_0>(WebKit::WebExtensionContext::clearError(WebKit::WebExtensionContext::Error)::$_0)::{lambda(void *)#1}::__invoke;
        v37[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::clearError(WebKit::WebExtensionContext::Error)::$_0>(WebKit::WebExtensionContext::clearError(WebKit::WebExtensionContext::Error)::$_0)::descriptor;
        v37[4] = this;
        v37[5] = this;
        uint64_t v38 = _Block_copy(v37);

        uint64_t v39 = _Block_copy(v38);
        dispatch_async(MEMORY[0x1E4F14428], v39);
      }
    }
    uint64_t v40 = (const void *)*((void *)this + 43);
    *((void *)this + 43) = 0;
    if (v40) {
      CFRelease(v40);
    }
    uint64_t v41 = WTF::RetainPtr<NSSet>::get((id *)this + 41);
    [v41 _page];
    uint64_t v42 = *(void *)buf;
    CFRetain(*(CFTypeRef *)(*(void *)buf + 8));

    uint64_t v43 = *(void *)(v42 + 256);
    atomic_fetch_add((atomic_uint *volatile)(v43 + 16), 1u);
    int v44 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v44, v43 + 200, "Web Extension background content", 33, 1, 0);
    std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 42, v44);
    uint64_t v45 = *((void *)this + 8);
    WebKit::WebExtension::populateBackgroundPropertiesIfNeeded((id *)v45);
    if (*(unsigned char *)(v45 + 320))
    {
      uint64_t v46 = WTF::RetainPtr<__IOHIDDevice *>::get();
      WebKit::WebExtensionContext::backgroundContentURL((id **)this, (WTF::URL *)buf);
      uint64_t v47 = WTF::URL::operator NSURL *();
      BOOL v48 = WebKit::WebExtension::backgroundContentUsesModules(*((id **)this + 8));
      CFRetain(*((CFTypeRef *)this + 1));
      uint64_t v49 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
      void *v49 = MEMORY[0x1E4F14398];
      v49[1] = 50331650;
      void v49[2] = WTF::BlockPtrArc<void ()(BOOL)>::fromCallable<WebKit::WebExtensionContext::loadBackgroundWebView(void)::$_0>(WebKit::WebExtensionContext::loadBackgroundWebView(void)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
      v49[3] = &WTF::BlockPtrArc<void ()(BOOL)>::fromCallable<WebKit::WebExtensionContext::loadBackgroundWebView(void)::$_0>(WebKit::WebExtensionContext::loadBackgroundWebView(void)::$_0)::descriptor;
      v49[4] = this;
      v49[5] = this;
      char v50 = _Block_copy(v49);

      uint64_t v51 = _Block_copy(v50);
      [v46 _loadServiceWorker:v47 usingModules:v48 completionHandler:v51];
    }
    else
    {
      uint64_t v65 = *(void *)(*(void *)(v42 + 32) + 1928);
      uint64_t v53 = *((void *)this + 4);
      uint64_t v54 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v54 = 1629;
      *((void *)v54 + 1) = v53;
      *((void *)v54 + 66) = (char *)v54 + 16;
      *((void *)v54 + 67) = 512;
      *((void *)v54 + 68) = 0;
      *((void *)v54 + 70) = 0;
      *((void *)v54 + 69) = 0;
      IPC::Encoder::encodeHeader(v54);
      int v71 = v54;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v54, &v65);
      buf[0] = 0;
      LOBYTE(v68) = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v43, &v71, 0, (uint64_t)buf, 1);
      if ((_BYTE)v68)
      {
        uint64_t v56 = *(void *)buf;
        *(void *)buf = 0;
        if (v56) {
          (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
        }
      }
      uint64_t v57 = v71;
      int v71 = 0;
      if (v57)
      {
        IPC::Encoder::~Encoder(v57, v55);
        WTF::fastFree(v63, v64);
      }
      uint64_t v46 = WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v58 = (void *)MEMORY[0x1E4F18DA8];
      WebKit::WebExtensionContext::backgroundContentURL((id **)this, (WTF::URL *)buf);
      __int16 v59 = WTF::URL::operator NSURL *();
      uint64_t v60 = [v58 requestWithURL:v59];
      id v61 = (id)[v46 loadRequest:v60];
    }
    CFTypeRef v62 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2) {
        WTF::StringImpl::destroy(v62, v52);
      }
      else {
        *(_DWORD *)v62 -= 2;
      }
    }

    if (v43) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v43 + 16));
    }
    CFRelease(*(CFTypeRef *)(v42 + 8));
  }
}

void sub_19932F0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v24);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }

  if (v19) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v18);
  }
  CFRelease(*(CFTypeRef *)(v22 + 8));

  _Unwind_Resume(a1);
}

__CFString *WebKit::WebExtensionContext::backgroundWebViewInspectionName(WebKit::WebExtensionContext *this)
{
  uint64_t v2 = *((void *)this + 45);
  if (v2 && *(_DWORD *)(v2 + 4)) {
    goto LABEL_12;
  }
  uint64_t v3 = *((void *)this + 8);
  WebKit::WebExtension::populateBackgroundPropertiesIfNeeded((id *)v3);
  if (*(unsigned char *)(v3 + 320))
  {
    WebKit::WebExtension::populateDisplayStringsIfNeeded(*((WebKit::WebExtension **)this + 8));
    WTF::RetainPtr<__IOHIDDevice *>::get();
    WebCore::formatLocalizedString((uint64_t *)&v16, (WebCore *)@"%@ — Extension Service Worker", v5, v4);
  }
  else
  {
    WebKit::WebExtension::populateDisplayStringsIfNeeded(*((WebKit::WebExtension **)this + 8));
    WTF::RetainPtr<__IOHIDDevice *>::get();
    WebCore::formatLocalizedString((uint64_t *)&v16, (WebCore *)@"%@ — Extension Background Page", v8, v7);
  }
  unint64_t v9 = v16;
  uint64_t v16 = 0;
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 45);
  *((void *)this + 45) = v9;
  if (!v10) {
    goto LABEL_11;
  }
  int v11 = *(_DWORD *)v10 - 2;
  if (*(_DWORD *)v10 != 2) {
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v10, v6);
  uint64_t v10 = v16;
  uint64_t v16 = 0;
  if (!v10) {
    goto LABEL_11;
  }
  int v11 = *(_DWORD *)v10 - 2;
  if (*(_DWORD *)v10 == 2) {
    WTF::StringImpl::destroy(v10, v12);
  }
  else {
LABEL_10:
  }
    *(_DWORD *)uint64_t v10 = v11;
LABEL_11:
  if (*((void *)this + 45))
  {
LABEL_12:
    unint64_t v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    goto LABEL_13;
  }
  unint64_t v13 = &stru_1EEA10550;
LABEL_13:
  uint64_t v14 = v13;

  return v14;
}

void WebKit::WebExtensionContext::setBackgroundWebViewInspectionName(WebKit::WebExtensionContext *this, WTF::StringImpl **a2)
{
  WTF::String::operator=((uint64_t *)this + 45, a2);
  if (*a2) {
    uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v4 = &stru_1EEA10550;
  }
  double v6 = v4;
  CFStringRef v5 = WTF::RetainPtr<NSSet>::get((id *)this + 41);
  [v5 _setRemoteInspectionNameOverride:v6];
}

void sub_19932F444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::scheduleBackgroundContentToUnload(uint64_t this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*(void *)(this + 328))
  {
    uint64_t v1 = this;
    this = WebKit::WebExtension::backgroundContentIsPersistent(*(id **)(this + 64));
    if ((this & 1) == 0)
    {
      if ((byte_1EB35A1C9 & 1) == 0)
      {
        WebCore::applicationBundleIdentifier((uint64_t *)v12, (WebCore *)this);
        int v9 = MEMORY[0x19972E990](*(void *)v12, "com.apple.WebKit.TestWebKitAPI", 30);
        uint64_t v10 = *(WTF::StringImpl **)v12;
        *(void *)uint64_t v12 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v8);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
        uint64_t v11 = 0x403E000000000000;
        if (v9) {
          uint64_t v11 = 0x4008000000000000;
        }
        qword_1EB35A1D8 = v11;
        byte_1EB35A1C9 = 1;
      }
      uint64_t v2 = qword_1EB357DF8;
      BOOL v3 = os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG);
      if (v3)
      {
        *(_DWORD *)uint64_t v12 = 134349056;
        *(void *)&v12[4] = qword_1EB35A1D8;
        _os_log_debug_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEBUG, "Scheduling background content to unload in %{public}.0f seconds", v12, 0xCu);
      }
      if (!*(void *)(v1 + 368))
      {
        uint64_t v4 = (WTF::RunLoop *)WTF::RunLoop::current((WTF::RunLoop *)v3);
        CFStringRef v5 = (WTF::RunLoop::TimerBase *)WTF::fastMalloc((WTF *)0x20);
        double v6 = (void *)WTF::fastMalloc((WTF *)0x20);
        void *v6 = &unk_1EE9FECB0;
        v6[1] = WebKit::WebExtensionContext::unloadBackgroundContentIfPossible;
        v6[2] = 0;
        v6[3] = v1;
        WTF::RunLoop::TimerBase::TimerBase(v5, v4);
        *(void *)CFStringRef v5 = &unk_1EE9B3390;
        *((void *)v5 + 3) = v6;
        uint64_t v7 = *(void *)(v1 + 368);
        *(void *)(v1 + 368) = v5;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      return WTF::RunLoop::TimerBase::start();
    }
  }
  return this;
}

void sub_19932F684(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::unloadBackgroundContentIfPossible(WebKit::WebExtensionContext *this)
{
  if (*((void *)this + 41))
  {
    BOOL IsPersistent = WebKit::WebExtension::backgroundContentIsPersistent(*((id **)this + 8));
    if (!IsPersistent)
    {
      if ((byte_1EB35A1CA & 1) == 0)
      {
        WebCore::applicationBundleIdentifier((uint64_t *)v17, (WebCore *)IsPersistent);
        int v14 = MEMORY[0x19972E990](v17[0], "com.apple.WebKit.TestWebKitAPI", 30);
        char v15 = v17[0];
        v17[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v13);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
        double v16 = 120.0;
        if (v14) {
          double v16 = 6.0;
        }
        qword_1EB35A1E0 = *(void *)&v16;
        byte_1EB35A1CA = 1;
      }
      if (*((void *)this + 33))
      {
        BOOL v3 = qword_1EB357DF8;
        if (!os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
        {
LABEL_6:
          WebKit::WebExtensionContext::scheduleBackgroundContentToUnload(this);
          return;
        }
        LOWORD(v17[0]) = 0;
        int v9 = "Not unloading background content because it has pending permission requests";
LABEL_20:
        _os_log_debug_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEBUG, v9, (uint8_t *)v17, 2u);
        goto LABEL_6;
      }
      uint64_t v4 = WTF::RetainPtr<NSSet>::get((id *)this + 41);
      [v4 _page];
      BOOL HasOpenPorts = WebKit::WebExtensionContext::pageHasOpenPorts(this, v17[0]);
      if (HasOpenPorts)
      {
        WTF::MonotonicTime::now((WTF::MonotonicTime *)HasOpenPorts);
        double v7 = v6 - *((double *)this + 47);
        double v8 = *(double *)&qword_1EB35A1E0;

        if (v7 < v8)
        {
          BOOL v3 = qword_1EB357DF8;
          if (!os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_6;
          }
          LOWORD(v17[0]) = 0;
          int v9 = "Not unloading background content because it has open, active ports";
          goto LABEL_20;
        }
      }
      else
      {
      }
      uint64_t v10 = WTF::RetainPtr<NSSet>::get((id *)this + 41);
      int v11 = [v10 _isBeingInspected];

      BOOL v3 = qword_1EB357DF8;
      BOOL v12 = os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG);
      if (v11)
      {
        if (!v12) {
          goto LABEL_6;
        }
        LOWORD(v17[0]) = 0;
        int v9 = "Not unloading background content because it is being inspected";
        goto LABEL_20;
      }
      if (v12)
      {
        LOWORD(v17[0]) = 0;
        _os_log_debug_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEBUG, "Unloading non-persistent background content", (uint8_t *)v17, 2u);
      }
      WebKit::WebExtensionContext::unloadBackgroundWebView(this);
    }
  }
}

void sub_19932F924(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

id WebKit::objectForKey<NSData>(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = WTF::RetainPtr<NSSet>::get(a1);
  CFStringRef v5 = [v4 objectForKeyedSubscript:v3];
  objc_opt_class();
  double v6 = WTF::dynamic_objc_cast<NSData>(v5);

  return v6;
}

void sub_19932F9F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::performTasksAfterBackgroundContentLoads(uint64_t this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(this + 72);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = this;
    id v3 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)URL cf = 0;
      _os_log_debug_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEBUG, "Background content loaded", cf, 2u);
    }
    if (*(unsigned char *)(v2 + 312))
    {
      WebKit::WebExtensionContext::fireRuntimeStartupEventIfNeeded((WebKit::WebExtensionContext *)v2);
      *(unsigned char *)(v2 + 312) = 0;
    }
    if (*(unsigned char *)(v2 + 313))
    {
      WebKit::WebExtensionContext::fireRuntimeInstalledEventIfNeeded((WebKit::WebExtensionContext *)v2);
      *(unsigned char *)(v2 + 313) = 0;
      WTF::String::operator=((uint64_t *)(v2 + 320), MEMORY[0x1E4F30978]);
    }
    uint64_t v4 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *(unsigned int *)(v2 + 292);
      *(_DWORD *)URL cf = 134349056;
      *(void *)&cf[4] = v16;
      _os_log_debug_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEBUG, "Performing %{public}zu task(s) after background content loaded", cf, 0xCu);
    }
    uint64_t v5 = *(unsigned int *)(v2 + 292);
    if (v5)
    {
      double v6 = *(uint64_t **)(v2 + 280);
      uint64_t v7 = 8 * v5;
      do
      {
        WTF::CompletionHandler<void ()(void)>::operator()(v6++);
        v7 -= 8;
      }
      while (v7);
    }
    *(unsigned char *)(v2 + 384) = 1;
    WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(v2 + 280), 0);
    uint64_t v8 = *(void *)(v2 + 40);
    if (!v8 || !*(_DWORD *)(v8 + 4) || WebKit::WebExtension::backgroundContentIsPersistent(*(id **)(v2 + 64))) {
      return WebKit::WebExtensionContext::scheduleBackgroundContentToUnload(v2);
    }
    int v9 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v31 = *(void *)(v2 + 296);
      if (v31) {
        LODWORD(v31) = *(_DWORD *)(v31 - 12);
      }
      *(_DWORD *)URL cf = 67240192;
      *(_DWORD *)&cf[4] = v31;
      _os_log_debug_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEBUG, "Saving %{public}u background content event listeners to storage", cf, 8u);
    }
    uint64_t v10 = [MEMORY[0x1E4F28BD0] set];
    uint64_t v11 = *(void *)(v2 + 296);
    if (v11)
    {
      uint64_t v12 = *(unsigned int *)(v11 - 4);
      uint64_t v13 = (unsigned __int8 *)(v11 + 8 * v12);
      if (*(_DWORD *)(v11 - 12))
      {
        int v14 = *(unsigned __int8 **)(v2 + 296);
        if (v12)
        {
          uint64_t v15 = 8 * v12;
          int v14 = *(unsigned __int8 **)(v2 + 296);
          while (*v14 >= 0xFEu)
          {
            v14 += 8;
            v15 -= 8;
            if (!v15)
            {
              int v14 = v13;
              goto LABEL_28;
            }
          }
        }
        goto LABEL_28;
      }
      int v14 = (unsigned __int8 *)(v11 + 8 * v12);
    }
    else
    {
      int v14 = 0;
      uint64_t v12 = 0;
    }
    uint64_t v13 = (unsigned __int8 *)(v11 + 8 * v12);
LABEL_28:
    if (v11) {
      unint64_t v17 = (unsigned __int8 *)(v11 + 8 * *(unsigned int *)(v11 - 4));
    }
    else {
      unint64_t v17 = 0;
    }
    while (v14 != v17)
    {
      uint64_t v18 = [NSNumber numberWithUnsignedInt:*v14];
      [v10 addObject:v18];

      uint64_t v19 = v14 + 8;
      int v14 = v13;
      if (v19 != v13)
      {
        int v14 = v19;
        while (*v14 >= 0xFEu)
        {
          v14 += 8;
          if (v14 == v13)
          {
            int v14 = v13;
            break;
          }
        }
      }
    }
    uint64_t v20 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v10 requiringSecureCoding:1 error:0];
    unint64_t v21 = WTF::RetainPtr<__IOHIDDevice *>::get();
    WTF::RetainPtr<NSDictionary>::RetainPtr(cf, v21);

    uint64_t v22 = WebKit::objectForKey<NSData>((id *)cf, @"BackgroundContentEventListeners");
    uint64_t v23 = *(const void **)cf;
    *(void *)URL cf = 0;
    if (v23) {
      CFRelease(v23);
    }
    uint64_t v24 = WTF::RetainPtr<__IOHIDDevice *>::get();
    [v24 setObject:v20 forKey:@"BackgroundContentEventListeners"];

    uint64_t v25 = WTF::RetainPtr<__IOHIDDevice *>::get();
    WTF::RetainPtr<NSDictionary>::RetainPtr(cf, v25);

    int v26 = WebKit::objectForKey<NSNumber>((id *)cf, @"BackgroundContentEventListenersVersion");
    uint64_t v27 = *(const void **)cf;
    *(void *)URL cf = 0;
    if (v27) {
      CFRelease(v27);
    }
    int v28 = WTF::RetainPtr<__IOHIDDevice *>::get();
    objc_msgSend(v28, "setObject:forKey:", &unk_1EEA52F60, @"BackgroundContentEventListenersVersion", *(void *)cf);

    char v29 = [v20 isEqualToData:v22];
    if ([v26 unsignedLongValue] == 3) {
      char v30 = v29;
    }
    else {
      char v30 = 0;
    }
    if ((v30 & 1) == 0) {
      WebKit::WebExtensionContext::writeStateToStorage((WebKit::WebExtensionContext *)v2);
    }

    return WebKit::WebExtensionContext::scheduleBackgroundContentToUnload(v2);
  }
  return this;
}

void sub_19932FE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  _Unwind_Resume(a1);
}

BOOL WTF::operator==<WKWebView,WKWebView>(void *a1, id *a2)
{
  id v3 = a1;
  WTF::RetainPtr<NSSet>::get(a2);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  BOOL v5 = v4 == v3;

  return v5;
}

void sub_19932FF4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::addInjectedContent(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && *(void *)(v2 + 8))
  {
    if (WebKit::WebExtensionContext::hasAccessToAllHosts((WebKit::WebExtensionContext *)a1))
    {
      WebKit::WebExtensionMatchPattern::allHostsAndSchemesMatchPattern(v13);
      uint64_t v5 = v13[0];
      WebKit::WebExtensionContext::addInjectedContent(a1, a2, v13[0]);
      CFRelease(*(CFTypeRef *)(v5 + 8));
    }
    else
    {
      int v14 = 0;
      WebKit::WebExtensionContext::removeExpired(a1, a1 + 200, a1 + 216, @"WKWebExtensionContextGrantedPermissionMatchPatternsWereRemoved");
      double v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 200));
      uint64_t v7 = v6;
      int v9 = v8;
      uint64_t v10 = *(void *)(a1 + 200);
      if (v10) {
        uint64_t v11 = (uint64_t *)(v10 + 16 * *(unsigned int *)(v10 - 4));
      }
      else {
        uint64_t v11 = 0;
      }
      if (v11 != v6)
      {
        do
        {
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v14, v7, (uint64_t)v13);
          while (1)
          {
            v7 += 2;
            if (v7 == v9) {
              break;
            }
            if ((unint64_t)(*v7 + 1) > 1) {
              goto LABEL_14;
            }
          }
          uint64_t v7 = v9;
LABEL_14:
          ;
        }
        while (v7 != v11);
      }
      WebKit::WebExtensionContext::addInjectedContent(a1, a2, &v14);
      if (v14) {
        WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v14, v12);
      }
    }
  }
}

void sub_199330084(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  if (a12) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a12, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionContext::addInjectedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v202 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 72);
  if (!v3 || !*(void *)(v3 + 8)) {
    return;
  }
  double v6 = (uint64_t *)(a1 + 392);
  CFRetain(*(CFTypeRef *)(a3 + 8));
  uint64_t v7 = *(void *)(a1 + 392);
  if (v7
    || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(v6, 0), (uint64_t v7 = *v6) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  int v9 = 0;
  uint64_t v157 = a3;
  unint64_t v10 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = (v12 >> 31) ^ v12;
  int v14 = 1;
  unsigned int v15 = v13;
  while (1)
  {
    unsigned int v16 = v15 & v8;
    unint64_t v17 = (uint64_t *)(v7 + 24 * v16);
    uint64_t v18 = *v17;
    if (*v17 == -1)
    {
      int v9 = (uint64_t *)(v7 + 24 * v16);
      goto LABEL_12;
    }
    if (!v18) {
      break;
    }
    if (v18 == v157)
    {
      uint64_t v19 = v157;
      CFRelease(*(CFTypeRef *)(v157 + 8));
      goto LABEL_29;
    }
LABEL_12:
    unsigned int v15 = v14 + v16;
    ++v14;
  }
  if (v9)
  {
    uint64_t *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    --*(_DWORD *)(*v6 - 16);
    uint64_t *v9 = v157;
  }
  else
  {
    *unint64_t v17 = v157;
    int v9 = (uint64_t *)(v7 + 24 * v16);
  }
  v191 = 0;
  v192 = 0;
  WTF::GenericHashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)(v9 + 1), &v191);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v191, v20);
  uint64_t v21 = *v6;
  if (*v6) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v23 = *v6;
  if (*v6) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25) {
      goto LABEL_27;
    }
LABEL_24:
    unint64_t v17 = v9;
  }
  else
  {
    if (3 * v26 > 4 * v25) {
      goto LABEL_24;
    }
LABEL_27:
    unint64_t v17 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(v6, v9);
  }
  uint64_t v19 = v157;
LABEL_29:
  CFRetain(*(CFTypeRef *)(v19 + 8));
  uint64_t v27 = (uint64_t *)(a1 + 400);
  uint64_t v28 = *(void *)(a1 + 400);
  if (v28
    || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand((uint64_t *)(a1 + 400), 0), (uint64_t v28 = *v27) != 0))
  {
    int v29 = *(_DWORD *)(v28 - 8);
  }
  else
  {
    int v29 = 0;
  }
  char v30 = 0;
  int v31 = 1;
  while (2)
  {
    unsigned int v32 = v13 & v29;
    uint64_t v33 = *(void *)(v28 + 24 * (v13 & v29));
    if (v33 == -1)
    {
      char v30 = (uint64_t *)(v28 + 24 * v32);
LABEL_38:
      unsigned int v13 = v31 + v32;
      ++v31;
      continue;
    }
    break;
  }
  CFTypeRef v164 = (uint64_t *)(v28 + 24 * v32);
  if (v33)
  {
    if (v33 == v157)
    {
      CFRelease(*(CFTypeRef *)(v157 + 8));
      goto LABEL_54;
    }
    goto LABEL_38;
  }
  if (v30)
  {
    *char v30 = 0;
    v30[1] = 0;
    void v30[2] = 0;
    --*(_DWORD *)(*v27 - 16);
    *char v30 = v157;
  }
  else
  {
    char v30 = (uint64_t *)(v28 + 24 * v32);
    *CFTypeRef v164 = v157;
  }
  v191 = 0;
  v192 = 0;
  WTF::GenericHashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)(v30 + 1), &v191);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v191, v34);
  uint64_t v35 = *v27;
  if (*v27) {
    int v36 = *(_DWORD *)(v35 - 12) + 1;
  }
  else {
    int v36 = 1;
  }
  *(_DWORD *)(v35 - 12) = v36;
  uint64_t v37 = *v27;
  if (*v27) {
    int v38 = *(_DWORD *)(v37 - 12);
  }
  else {
    int v38 = 0;
  }
  uint64_t v39 = (*(_DWORD *)(v37 - 16) + v38);
  unint64_t v40 = *(unsigned int *)(v37 - 4);
  if (v40 > 0x400)
  {
    if (v40 <= 2 * v39) {
      goto LABEL_53;
    }
LABEL_50:
    CFTypeRef v164 = v30;
  }
  else
  {
    if (3 * v40 > 4 * v39) {
      goto LABEL_50;
    }
LABEL_53:
    CFTypeRef v164 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(v27, v30);
  }
LABEL_54:
  long long v154 = [MEMORY[0x1E4F1CA80] set];
  WebKit::WebExtensionContext::removeExpired(a1, a1 + 208, a1 + 224, @"WKWebExtensionContextDeniedPermissionMatchPatternsWereRemoved");
  uint64_t v41 = (WebKit::WebExtensionMatchPattern **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 208));
  uint64_t v42 = v41;
  int v44 = v43;
  uint64_t v45 = *(void *)(a1 + 208);
  if (v45) {
    uint64_t v46 = (WebKit::WebExtensionMatchPattern **)(v45 + 16 * *(unsigned int *)(v45 - 4));
  }
  else {
    uint64_t v46 = 0;
  }
  if (v46 != v41)
  {
    do
    {
      uint64_t v47 = *v42;
      if ((!*((unsigned char *)*v42 + 49)
         || !*((unsigned char *)v47 + 48)
         && (!*((unsigned char *)v47 + 41) || (uint64_t v48 = *((void *)v47 + 3)) != 0 && *(_DWORD *)(v48 + 4)))
        && (WebKit::WebExtensionMatchPattern::matchesPattern((unsigned __int8 *)v157, (unsigned __int8 *)v47, 6) & 1) != 0)
      {
        uint64_t v49 = WebKit::WebExtensionMatchPattern::expandedStrings(*v42);
        [v154 addObjectsFromArray:v49];
      }
      while (1)
      {
        v42 += 2;
        if (v42 == v44) {
          break;
        }
        if ((unint64_t)*v42 + 1 > 1) {
          goto LABEL_69;
        }
      }
      uint64_t v42 = v44;
LABEL_69:
      ;
    }
    while (v42 != v46);
  }
  char v50 = *(void **)(a1 + 72);
  if (*(unsigned char *)(a1 + 273))
  {
    uint64_t v51 = (unsigned __int8 *)v157;
    if (v50)
    {
      uint64_t v52 = v50[1];
      if (v52) {
        char v50 = (void *)(v52 - 16);
      }
      else {
        char v50 = 0;
      }
    }
    uint64_t v53 = (WTF::StringImpl *)(v50 + 15);
  }
  else
  {
    uint64_t v51 = (unsigned __int8 *)v157;
    if (v50)
    {
      uint64_t v54 = v50[1];
      if (v54) {
        char v50 = (void *)(v54 - 16);
      }
      else {
        char v50 = 0;
      }
    }
    uint64_t v53 = (WTF::StringImpl *)(v50 + 17);
  }
  unsigned int v55 = *(_DWORD *)(a2 + 12);
  if (v55)
  {
    v159 = v164 + 1;
    v155 = *(WebKit::WebExtension::InjectedContentData **)a2;
    uint64_t v153 = *(void *)a2 + 72 * v55;
    uint64_t v165 = a1 + 80;
    v160 = (uint64_t *)(a1 + 408);
    char v161 = v17 + 1;
    while (1)
    {
      v156 = objc_msgSend(MEMORY[0x1E4F1CA80], "set", v151, v152);
      uint64_t v56 = (unsigned __int8 **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)v155);
      uint64_t v57 = v56;
      __int16 v59 = v58;
      uint64_t v60 = *(void *)v155 ? *(void *)v155 + 8 * *(unsigned int *)(*(void *)v155 - 4) : 0;
      if ((unsigned __int8 **)v60 != v56) {
        break;
      }
LABEL_155:
      if ([v156 count])
      {
        v169 = [v156 allObjects];
        __int16 v84 = (void *)MEMORY[0x1E4F1CA80];
        uint64_t v85 = WebKit::WebExtension::InjectedContentData::expandedExcludeMatchPatternStrings(v155);
        int v86 = [v84 setWithArray:v85];

        [v86 unionSet:v154];
        v171 = [v86 allObjects];
        int v168 = *((unsigned __int8 *)v155 + 33);
        int v87 = *((unsigned __int8 *)v155 + 16);
        v170 = WebKit::WebExtensionContext::toContentWorld((API::ContentWorld *)a1, *((unsigned __int8 *)v155 + 34));
        CFRetain(*((CFTypeRef *)v170 + 1));
        uint64_t v88 = (WTF::StringImpl *)*((void *)v155 + 3);
        if (v88)
        {
          int v89 = *((_DWORD *)v88 + 1);
          *(_DWORD *)v88 += 2;
          BOOL v90 = v89 == 0;
        }
        else
        {
          BOOL v90 = 1;
        }
        BOOL v166 = v90;
        v199 = v88;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        std::to_address[abi:sn180100]<char const>();
        obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v91 = [obj countByEnumeratingWithState:&v195 objects:v201 count:16];
        CFTypeRef v167 = v86;
        if (v91)
        {
          unsigned int v162 = v87 & 0xFFFFFFFD;
          uint64_t v92 = *(void *)v196;
          do
          {
            for (uint64_t i = 0; i != v91; ++i)
            {
              if (*(void *)v196 != v92) {
                objc_enumerationMutation(obj);
              }
              uint64_t v94 = *(void **)(*((void *)&v195 + 1) + 8 * i);
              uint64_t v95 = *(void *)(a1 + 64);
              id v194 = 0;
              char v96 = WebKit::WebExtension::resourceStringForPath(v95, v94, &v194, 1, 0);
              CFTypeRef v97 = (NSError *)v194;
              if (v96)
              {
                MEMORY[0x19972EAD0](&v190, v96);
                MEMORY[0x19972EAD0](&v184, v94);
                MEMORY[0x19972E8B0](&v185, v165, &v184, 0);
                WTF::makeVector<WTF::String>(v169, (uint64_t)v183);
                WTF::makeVector<WTF::String>(v171, (uint64_t)v182);
                MEMORY[0x19972F8D0](&v191, &v190, &v185, v183, v182, v162 == 0, v168 == 0, 0);
                API::UserScript::create((uint64_t *)&v191, (uint64_t)v170, &v193);
                WebCore::UserScript::~UserScript((WebCore::UserScript *)&v191, v98);
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v182, v99);
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v183, v100);
                long long v102 = v185;
                v185 = 0;
                if (v102)
                {
                  if (*(_DWORD *)v102 == 2) {
                    WTF::StringImpl::destroy(v102, v101);
                  }
                  else {
                    *(_DWORD *)v102 -= 2;
                  }
                }
                CFTypeRef v103 = v184;
                v184 = 0;
                if (v103)
                {
                  if (*(_DWORD *)v103 == 2) {
                    WTF::StringImpl::destroy(v103, v101);
                  }
                  else {
                    *(_DWORD *)v103 -= 2;
                  }
                }
                CFTypeRef v104 = v190;
                v190 = 0;
                if (v104)
                {
                  if (*(_DWORD *)v104 == 2) {
                    WTF::StringImpl::destroy(v104, v101);
                  }
                  else {
                    *(_DWORD *)v104 -= 2;
                  }
                }
                uint64_t v105 = *((unsigned int *)v17 + 5);
                if (v105 == *((_DWORD *)v17 + 4))
                {
                  unint64_t v106 = WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v161, v105 + 1, (unint64_t)&v193);
                  uint64_t v105 = *((unsigned int *)v17 + 5);
                  uint64_t v107 = v17[1];
                  uint64_t v108 = *(WTF::StringImpl **)v106;
                  CFRetain(*(CFTypeRef *)(*(void *)v106 + 8));
                }
                else
                {
                  uint64_t v107 = *v161;
                  uint64_t v108 = v193;
                  CFRetain(*((CFTypeRef *)v193 + 1));
                }
                *(void *)(v107 + 8 * v105) = v108;
                ++*((_DWORD *)v17 + 5);
                WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)v53, &v191);
                int v109 = *(void **)v53;
                int v86 = v167;
                if (*(void *)v53)
                {
                  uint64_t v110 = *((unsigned int *)v109 - 1);
                  int v111 = &v109[v110];
                }
                else
                {
                  int v111 = 0;
                  uint64_t v110 = 0;
                }
                v185 = v53;
                v186 = v111;
                v187 = v111;
                v188 = v111;
                v189 = &v109[v110];
                WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v185);
                while (v192 != v186)
                {
                  uint64_t v113 = *(void *)(*v192 + 8);
                  if (v113) {
                    uint64_t v114 = v113 - 16;
                  }
                  else {
                    uint64_t v114 = 0;
                  }
                  WebKit::WebUserContentControllerProxy::addUserScript(v114, (uint64_t)v193, 1);
                  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v191);
                }
                if (!v166)
                {
                  uint64_t v115 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v160, &v199, v112);
                  long long v116 = v115;
                  if (v115)
                  {
                    ++*(_DWORD *)v115;
                    WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::addUserScript(v115, &v199, (CFTypeRef *)v193);
                    WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v116, v117);
                  }
                }
                long long v118 = v193;
                v193 = 0;
                if (v118) {
                  CFRelease(*((CFTypeRef *)v118 + 1));
                }
              }
              else
              {
                WebKit::WebExtensionContext::recordError((const void **)a1, v97);
              }
            }
            uint64_t v91 = [obj countByEnumeratingWithState:&v195 objects:v201 count:16];
          }
          while (v91);
        }

        long long v180 = 0u;
        long long v181 = 0u;
        long long v178 = 0u;
        long long v179 = 0u;
        std::to_address[abi:sn180100]<char const>();
        id v163 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v119 = [v163 countByEnumeratingWithState:&v178 objects:v200 count:16];
        if (v119)
        {
          uint64_t v120 = *(void *)v179;
          do
          {
            for (uint64_t j = 0; j != v119; ++j)
            {
              if (*(void *)v179 != v120) {
                objc_enumerationMutation(v163);
              }
              uint64_t v122 = *(void **)(*((void *)&v178 + 1) + 8 * j);
              uint64_t v123 = *(void *)(a1 + 64);
              id v177 = 0;
              uint64_t v124 = WebKit::WebExtension::resourceStringForPath(v123, v122, &v177, 1, 0);
              v125 = (NSError *)v177;
              if (v124)
              {
                MEMORY[0x19972EAD0](&v193, v124);
                MEMORY[0x19972EAD0](&v190, v122);
                MEMORY[0x19972E8B0](&v191, v165, &v190, 0);
                WTF::makeVector<WTF::String>(v169, (uint64_t)&v185);
                WTF::makeVector<WTF::String>(v171, (uint64_t)v183);
                uint64_t v151 = 0;
                uint64_t v152 = 0;
                WebCore::UserStyleSheet::UserStyleSheet();
                API::UserStyleSheet::create((uint64_t)&v173, (uint64_t)v170, (uint64_t *)v182);
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v176, v126);
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v175, v127);
                v129 = v174;
                v174 = 0;
                if (v129)
                {
                  if (*(_DWORD *)v129 == 2) {
                    WTF::StringImpl::destroy(v129, v128);
                  }
                  else {
                    *(_DWORD *)v129 -= 2;
                  }
                }
                v130 = v173;
                v173 = 0;
                if (v130)
                {
                  if (*(_DWORD *)v130 == 2) {
                    WTF::StringImpl::destroy(v130, v128);
                  }
                  else {
                    *(_DWORD *)v130 -= 2;
                  }
                }
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v183, v128);
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v185, v131);
                int v133 = v191;
                v191 = 0;
                if (v133)
                {
                  if (*(_DWORD *)v133 == 2) {
                    WTF::StringImpl::destroy(v133, v132);
                  }
                  else {
                    *(_DWORD *)v133 -= 2;
                  }
                }
                long long v134 = v190;
                v190 = 0;
                if (v134)
                {
                  if (*(_DWORD *)v134 == 2) {
                    WTF::StringImpl::destroy(v134, v132);
                  }
                  else {
                    *(_DWORD *)v134 -= 2;
                  }
                }
                long long v135 = v193;
                v193 = 0;
                if (v135)
                {
                  if (*(_DWORD *)v135 == 2) {
                    WTF::StringImpl::destroy(v135, v132);
                  }
                  else {
                    *(_DWORD *)v135 -= 2;
                  }
                }
                uint64_t v136 = *((unsigned int *)v164 + 5);
                if (v136 == *((_DWORD *)v164 + 4))
                {
                  WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>&>((uint64_t)v159, (unint64_t)v182);
                }
                else
                {
                  uint64_t v137 = *v159;
                  long long v138 = v182[0];
                  CFRetain(*((CFTypeRef *)v182[0] + 1));
                  *(void *)(v137 + 8 * v136) = v138;
                  ++*((_DWORD *)v164 + 5);
                }
                WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)v53, &v191);
                long long v139 = *(void **)v53;
                int v86 = v167;
                if (*(void *)v53)
                {
                  uint64_t v140 = *((unsigned int *)v139 - 1);
                  long long v141 = &v139[v140];
                }
                else
                {
                  long long v141 = 0;
                  uint64_t v140 = 0;
                }
                v185 = v53;
                v186 = v141;
                v187 = v141;
                v188 = v141;
                v189 = &v139[v140];
                WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v185);
                while (v192 != v186)
                {
                  uint64_t v143 = *(void *)(*v192 + 8);
                  if (v143) {
                    long long v144 = (WebKit::WebUserContentControllerProxy *)(v143 - 16);
                  }
                  else {
                    long long v144 = 0;
                  }
                  WebKit::WebUserContentControllerProxy::addUserStyleSheet(v144, v182[0]);
                  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v191);
                }
                if (!v166)
                {
                  id v145 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v160, &v199, v142);
                  long long v146 = v145;
                  if (v145)
                  {
                    ++*(_DWORD *)v145;
                    WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript::addUserStyleSheet(v145, &v199, (CFTypeRef *)v182[0]);
                    WTF::RefCounted<WebKit::WebExtensionDynamicScripts::WebExtensionRegisteredScript>::deref(v146, v147);
                  }
                }
                long long v148 = v182[0];
                v182[0] = 0;
                if (v148) {
                  CFRelease(*((CFTypeRef *)v148 + 1));
                }
              }
              else
              {
                WebKit::WebExtensionContext::recordError((const void **)a1, v125);
              }
            }
            uint64_t v119 = [v163 countByEnumeratingWithState:&v178 objects:v200 count:16];
          }
          while (v119);
        }

        id v150 = v199;
        v199 = 0;
        if (v150)
        {
          if (*(_DWORD *)v150 == 2) {
            WTF::StringImpl::destroy(v150, v149);
          }
          else {
            *(_DWORD *)v150 -= 2;
          }
        }
        CFRelease(*((CFTypeRef *)v170 + 1));
      }
      v155 = (WebKit::WebExtension::InjectedContentData *)((char *)v155 + 72);
      uint64_t v51 = (unsigned __int8 *)v157;
      if (v155 == (WebKit::WebExtension::InjectedContentData *)v153) {
        goto LABEL_250;
      }
    }
    while (2)
    {
      id v61 = *v57;
      if (!(*v57)[49])
      {
LABEL_101:
        if ((WebKit::WebExtensionMatchPattern::matchesPattern(v61, v51, 6) & 1) == 0) {
          goto LABEL_145;
        }
        char v68 = (CFTypeRef *)*v57;
        CFRetain(*((CFTypeRef *)*v57 + 1));
        if (WebKit::WebExtensionMatchPattern::matchesPattern(*v57, v51, 3))
        {
          uint64_t v69 = *v57;
          if ((*v57)[49] && !v69[48])
          {
            uint64_t v70 = (WTF::StringImpl *)*((void *)v69 + 2);
            if (v70) {
LABEL_106:
            }
              *(_DWORD *)v70 += 2;
          }
          else
          {
            uint64_t v70 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
            if (*MEMORY[0x1E4F30978]) {
              goto LABEL_106;
            }
          }
          v185 = v70;
          WebKit::WebExtensionMatchPattern::host((uint64_t)v51, v183);
          int v71 = *v57;
          if ((*v57)[49] && !v71[48])
          {
            uint64_t v72 = (WTF::StringImpl *)*((void *)v71 + 4);
            if (v72) {
LABEL_110:
            }
              *(_DWORD *)v72 += 2;
          }
          else
          {
            uint64_t v72 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
            if (*MEMORY[0x1E4F30978]) {
              goto LABEL_110;
            }
          }
          v182[0] = v72;
          WebKit::WebExtensionMatchPattern::getOrCreate(&v185, v183, v182, (uint64_t *)&v191);
          int v73 = (CFTypeRef *)v191;
          v191 = 0;
          CFRelease(v68[1]);
          unsigned int v75 = v191;
          v191 = 0;
          if (v75) {
            CFRelease(*((CFTypeRef *)v75 + 1));
          }
          uint64_t v76 = v182[0];
          v182[0] = 0;
          if (v76)
          {
            if (*(_DWORD *)v76 == 2) {
              WTF::StringImpl::destroy(v76, v74);
            }
            else {
              *(_DWORD *)v76 -= 2;
            }
          }
          char v81 = v183[0];
          v183[0] = 0;
          if (v81)
          {
            if (*(_DWORD *)v81 == 2) {
              WTF::StringImpl::destroy(v81, v74);
            }
            else {
              *(_DWORD *)v81 -= 2;
            }
          }
          char v82 = v185;
          v185 = 0;
          if (v82)
          {
            if (*(_DWORD *)v82 != 2)
            {
              *(_DWORD *)v82 -= 2;
              goto LABEL_141;
            }
            WTF::StringImpl::destroy(v82, v74);
            if (!v73) {
              goto LABEL_145;
            }
          }
          else
          {
LABEL_141:
            if (!v73) {
              goto LABEL_145;
            }
          }
        }
        else
        {
          int v73 = v68;
        }
        uint64_t v83 = WebKit::WebExtensionMatchPattern::expandedStrings((WebKit::WebExtensionMatchPattern *)v73);
        [v156 addObjectsFromArray:v83];

        CFRelease(v73[1]);
        uint64_t v51 = (unsigned __int8 *)v157;
        goto LABEL_145;
      }
      if (v61[48])
      {
        CFTypeRef v62 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
        if (*MEMORY[0x1E4F30978]) {
          goto LABEL_90;
        }
      }
      else
      {
        if (!v61[41]) {
          goto LABEL_101;
        }
        uint64_t v67 = *((void *)v61 + 3);
        if (v67)
        {
          if (*(_DWORD *)(v67 + 4)) {
            goto LABEL_101;
          }
        }
        CFTypeRef v62 = (WTF::StringImpl *)*((void *)v61 + 2);
        if (v62) {
LABEL_90:
        }
          *(_DWORD *)v62 += 2;
      }
      v185 = v62;
      WebKit::WebExtensionMatchPattern::host((uint64_t)v51, v183);
      uint64_t v63 = *v57;
      if ((*v57)[49] && !v63[48])
      {
        uint64_t v64 = (WTF::StringImpl *)*((void *)v63 + 4);
        if (v64) {
LABEL_94:
        }
          *(_DWORD *)v64 += 2;
      }
      else
      {
        uint64_t v64 = (WTF::StringImpl *)*MEMORY[0x1E4F30978];
        if (*MEMORY[0x1E4F30978]) {
          goto LABEL_94;
        }
      }
      v182[0] = v64;
      WebKit::WebExtensionMatchPattern::getOrCreate(&v185, v183, v182, (uint64_t *)&v191);
      uint64_t v66 = v182[0];
      v182[0] = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2) {
          WTF::StringImpl::destroy(v66, v65);
        }
        else {
          *(_DWORD *)v66 -= 2;
        }
      }
      uint64_t v77 = v183[0];
      v183[0] = 0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2) {
          WTF::StringImpl::destroy(v77, v65);
        }
        else {
          *(_DWORD *)v77 -= 2;
        }
      }
      int v78 = v185;
      v185 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2) {
          WTF::StringImpl::destroy(v78, v65);
        }
        else {
          *(_DWORD *)v78 -= 2;
        }
      }
      if (v191)
      {
        uint64_t v79 = WebKit::WebExtensionMatchPattern::expandedStrings(v191);
        [v156 addObjectsFromArray:v79];

        char v80 = v191;
        v191 = 0;
        uint64_t v51 = (unsigned __int8 *)v157;
        if (v80) {
          CFRelease(*((CFTypeRef *)v80 + 1));
        }
      }
LABEL_145:
      while (++v57 != v59)
      {
        if ((unint64_t)(*v57 + 1) > 1) {
          goto LABEL_149;
        }
      }
      uint64_t v57 = v59;
LABEL_149:
      if (v57 == (unsigned __int8 **)v60) {
        goto LABEL_155;
      }
      continue;
    }
  }
LABEL_250:
}

void sub_1993310E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

void *WebKit::WebExtensionContext::removeInjectedContent(void *this, WebKit::WebExtensionMatchPattern *a2)
{
  uint64_t v2 = this[9];
  if (v2 && *(void *)(v2 + 8))
  {
    id v4 = this;
    uint64_t v5 = this[49];
    if (!v5) {
      goto LABEL_19;
    }
    double v6 = this + 49;
    int v7 = *(_DWORD *)(v5 - 8);
    unint64_t v8 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
    unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    unsigned int v11 = v7 & ((v10 >> 31) ^ v10);
    for (int i = 1; ; v11 = (v11 + i++) & v7)
    {
      uint64_t v13 = v5 + 24 * v11;
      int v14 = *(WebKit::WebExtensionMatchPattern **)v13;
      if (*(void *)v13 != -1)
      {
        if (!v14)
        {
          unsigned int v15 = *(_DWORD *)(v5 - 4);
          uint64_t v13 = v5 + 24 * v15;
          goto LABEL_11;
        }
        if (v14 == a2) {
          break;
        }
      }
    }
    unsigned int v15 = *(_DWORD *)(v5 - 4);
LABEL_11:
    if (v5 + 24 * v15 == v13)
    {
LABEL_19:
      uint64_t v61 = 0;
      uint64_t v65 = 0;
      uint64_t v62 = 0;
      uint64_t v66 = 0;
      WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, a2);
    }
    else
    {
      uint64_t v65 = *(API::UserScript ***)(v13 + 8);
      uint64_t v16 = *(void *)(v13 + 16);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      uint64_t v66 = v16;
      uint64_t v17 = *v6;
      if (!*v6 || (v17 += 24 * *(unsigned int *)(v17 - 4), v17 != v13))
      {
        if (v17 != v13)
        {
          uint64_t v18 = *(WebKit::WebExtensionMatchPattern **)v13;
          *(void *)uint64_t v13 = 0;
          if (v18) {
            CFRelease(*((CFTypeRef *)v18 + 1));
          }
          *(void *)uint64_t v13 = -1;
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 + 8, a2);
          ++*(_DWORD *)(*v6 - 16);
          uint64_t v19 = *v6;
          if (*v6) {
            int v20 = *(_DWORD *)(v19 - 12) - 1;
          }
          else {
            int v20 = -1;
          }
          *(_DWORD *)(v19 - 12) = v20;
          uint64_t v50 = *v6;
          if (*v6)
          {
            unsigned int v51 = 6 * *(_DWORD *)(v50 - 12);
            unsigned int v52 = *(_DWORD *)(v50 - 4);
            if (v51 < v52 && v52 >= 9) {
              WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(v4 + 49, v52 >> 1, 0);
            }
          }
        }
      }
    }
    uint64_t v21 = v4[50];
    if (!v21) {
      goto LABEL_36;
    }
    int v22 = v4 + 50;
    int v23 = *(_DWORD *)(v21 - 8);
    unint64_t v24 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
    unint64_t v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
    unint64_t v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
    unsigned int v27 = v23 & ((v26 >> 31) ^ v26);
    for (int j = 1; ; v27 = (v27 + j++) & v23)
    {
      uint64_t v29 = v21 + 24 * v27;
      char v30 = *(WebKit::WebExtensionMatchPattern **)v29;
      if (*(void *)v29 != -1)
      {
        if (!v30)
        {
          unsigned int v31 = *(_DWORD *)(v21 - 4);
          uint64_t v29 = v21 + 24 * v31;
          goto LABEL_28;
        }
        if (v30 == a2) {
          break;
        }
      }
    }
    unsigned int v31 = *(_DWORD *)(v21 - 4);
LABEL_28:
    if (v21 + 24 * v31 == v29)
    {
LABEL_36:
      uint64_t v61 = 0;
      uint64_t v63 = 0;
      uint64_t v62 = 0;
      uint64_t v64 = 0;
      WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, a2);
    }
    else
    {
      uint64_t v63 = *(API::UserStyleSheet ***)(v29 + 8);
      uint64_t v32 = *(void *)(v29 + 16);
      *(void *)(v29 + 8) = 0;
      *(void *)(v29 + 16) = 0;
      uint64_t v64 = v32;
      uint64_t v33 = *v22;
      if (!*v22 || (v33 += 24 * *(unsigned int *)(v33 - 4), v33 != v29))
      {
        if (v33 != v29)
        {
          char v34 = *(WebKit::WebExtensionMatchPattern **)v29;
          *(void *)uint64_t v29 = 0;
          if (v34) {
            CFRelease(*((CFTypeRef *)v34 + 1));
          }
          *(void *)uint64_t v29 = -1;
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29 + 8, a2);
          ++*(_DWORD *)(*v22 - 16);
          uint64_t v35 = *v22;
          if (*v22) {
            int v36 = *(_DWORD *)(v35 - 12) - 1;
          }
          else {
            int v36 = -1;
          }
          *(_DWORD *)(v35 - 12) = v36;
          uint64_t v53 = *v22;
          if (*v22)
          {
            unsigned int v54 = 6 * *(_DWORD *)(v53 - 12);
            unsigned int v55 = *(_DWORD *)(v53 - 4);
            if (v54 < v55 && v55 >= 9) {
              WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(v4 + 50, v55 >> 1, 0);
            }
          }
        }
      }
    }
    if (HIDWORD(v66) | HIDWORD(v64))
    {
      uint64_t v38 = v4[9];
      if (v38)
      {
        uint64_t v39 = *(void *)(v38 + 8);
        if (v39) {
          uint64_t v38 = v39 - 16;
        }
        else {
          uint64_t v38 = 0;
        }
      }
      unint64_t v40 = (void *)(v38 + 120);
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v38 + 120), &v61);
      uint64_t v41 = *v40;
      if (*v40)
      {
        uint64_t v42 = *(unsigned int *)(v41 - 4);
        uint64_t v43 = v41 + 8 * v42;
      }
      else
      {
        uint64_t v43 = 0;
        uint64_t v42 = 0;
      }
      uint64_t v56 = v40;
      uint64_t v57 = v43;
      uint64_t v58 = v43;
      uint64_t v59 = v43;
      uint64_t v60 = v41 + 8 * v42;
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v56);
      while (v62 != v57)
      {
        uint64_t v44 = *(void *)(*(void *)v62 + 8);
        if (v44) {
          uint64_t v45 = (WebKit::WebUserContentControllerProxy *)(v44 - 16);
        }
        else {
          uint64_t v45 = 0;
        }
        if (HIDWORD(v66))
        {
          uint64_t v46 = v65;
          uint64_t v47 = 8 * HIDWORD(v66);
          do
          {
            WebKit::WebUserContentControllerProxy::removeUserScript(v45, *v46++);
            v47 -= 8;
          }
          while (v47);
        }
        if (HIDWORD(v64))
        {
          uint64_t v48 = v63;
          uint64_t v49 = 8 * HIDWORD(v64);
          do
          {
            WebKit::WebUserContentControllerProxy::removeUserStyleSheet(v45, *v48++);
            v49 -= 8;
          }
          while (v49);
        }
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v61);
      }
    }
    WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, a2);
    return (void *)WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v37);
  }
  return this;
}

void sub_199331A30(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12 - 64, v14);
  _Unwind_Resume(a1);
}

WebKit *WebKit::WebExtensionContext::toContentWorld(API::ContentWorld *a1, int a2)
{
  if (a2 == 1) {
    return (WebKit *)*((void *)a1 + 20);
  }
  else {
    return API::ContentWorld::pageContentWorld(a1);
  }
}

WTF::StringImpl *API::UserStyleSheet::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = API::Object::newObject(0x88uLL, 29);
  int v7 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  uint64_t v17 = v7;
  WTF::URL::URL((uint64_t)&v18, (uint64_t *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  v19[0] = v8;
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  v19[1] = v9;
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  v20[0] = v10;
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  v20[1] = v11;
  long long v21 = *(_OWORD *)(a1 + 80);
  char v22 = *(unsigned char *)(a1 + 96);
  API::UserStyleSheet::UserStyleSheet(v6, (uint64_t)&v17, a2);
  *a3 = v6;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v12);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v13);
  unsigned int v15 = v18;
  uint64_t v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_199331BCC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContext::addInjectedContent(WebKit::WebExtensionContext *this)
{
  WebKit::WebExtensionContext::injectedContents(this, (uint64_t)v4);
  WebKit::WebExtensionContext::addInjectedContent((uint64_t)this, (uint64_t)v4);
  return WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

void sub_199331C48(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *WebKit::WebExtensionContext::removeDeclarativeNetRequestRules(void *this)
{
  uint64_t v1 = this[9];
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = this;
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v2 + 104), &v17);
      uint64_t v4 = *(void *)(v2 + 104);
      if (v4)
      {
        uint64_t v5 = *(unsigned int *)(v4 - 4);
        uint64_t v6 = v4 + 8 * v5;
      }
      else
      {
        uint64_t v6 = 0;
        uint64_t v5 = 0;
      }
      uint64_t v12 = v2 + 104;
      uint64_t v13 = v6;
      uint64_t v14 = v6;
      uint64_t v15 = v6;
      uint64_t v16 = v4 + 8 * v5;
      this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
      uint64_t v8 = v18;
      if (v18 != v13)
      {
        uint64_t v9 = (WTF::StringImpl **)(v3 + 15);
        do
        {
          uint64_t v10 = *(void *)(*(void *)v8 + 8);
          if (v10) {
            uint64_t v11 = (WebKit::WebUserContentControllerProxy *)(v10 - 16);
          }
          else {
            uint64_t v11 = 0;
          }
          WebKit::WebUserContentControllerProxy::removeContentRuleList(v11, v9, v7);
          this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v17);
          uint64_t v8 = v18;
        }
        while (v18 != v13);
      }
    }
  }
  return this;
}

WTF::StringImpl *WebKit::WebExtensionContext::declarativeNetRequestContentRuleListFilePath(WTF::StringImpl *this, uint64_t a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(_DWORD **)(a2 + 632);
  if (v4 && v4[1])
  {
    *v4 += 2;
    *(void *)this = v4;
  }
  else
  {
    uint64_t v5 = *(WTF::StringImpl **)(a2 + 40);
    if (v5 && *((_DWORD *)v5 + 1))
    {
      *(_DWORD *)v5 += 2;
      uint64_t v11 = v5;
    }
    else
    {
      uint64_t v6 = WTF::FileSystemImpl::createTemporaryDirectory((WTF::FileSystemImpl *)@"DeclarativeNetRequest", (NSString *)a2);
      MEMORY[0x19972EAD0](&v11, v6);
    }
    WTF::FileSystemImpl::pathByAppendingComponent();
    uint64_t v8 = v10;
    uint64_t v9 = *(WTF::StringImpl **)(a2 + 632);
    *(void *)(a2 + 632) = v10;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
      uint64_t v8 = *(WTF::StringImpl **)(a2 + 632);
    }
    if (v8) {
      *(_DWORD *)v8 += 2;
    }
    *(void *)uint64_t v3 = v8;
    this = v11;
    uint64_t v11 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

void sub_199331E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionContext::hasContentModificationRules(WebKit::WebExtensionContext *this)
{
  uint64_t v1 = *((void *)this + 84);
  if (v1 && *(_DWORD *)(v1 - 12)) {
    return 1;
  }
  uint64_t v2 = *((void *)this + 85);
  if (v2)
  {
    if (*(_DWORD *)(v2 - 12)) {
      return 1;
    }
  }
  uint64_t v4 = *((void *)this + 86);
  return v4 && *(_DWORD *)(v4 - 12) != 0;
}

void WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(CFTypeRef *a1, uint64_t *a2)
{
  MEMORY[0x19972EAD0](&v78, @"declarativeNetRequest");
  if ((WebKit::WebExtensionContext::permissionState((WTF::StringImpl *)a1, (WTF **)&v78, 0, 2) & 0xFFFFFFFE) == 2)
  {
    BOOL v5 = 0;
  }
  else
  {
    MEMORY[0x19972EAD0](v52, @"declarativeNetRequestWithHostAccess");
    BOOL v5 = (WebKit::WebExtensionContext::permissionState((WTF::StringImpl *)a1, v52, 0, 2) & 0xFFFFFFFE) != 2;
    uint64_t v6 = v52[0];
    v52[0] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  int v7 = (WTF::StringImpl *)v78;
  *(void *)&long long v78 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v4);
      if (v5) {
        goto LABEL_11;
      }
      goto LABEL_13;
    }
    *(_DWORD *)v7 -= 2;
  }
  if (v5)
  {
LABEL_11:
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a2);
    return;
  }
LABEL_13:
  uint64_t v8 = objc_msgSend(MEMORY[0x1E4F1CA48], "array", v52[0]);
  CFRetain(a1[1]);
  uint64_t v9 = *a2;
  *a2 = 0;
  id v10 = v8;
  uint64_t v11 = v10;
  if (v10) {
    CFRetain(v10);
  }

  int v71 = a1;
  CFRetain(a1[1]);
  uint64_t v72 = a1;
  int v73 = a1;
  unsigned int v74 = a1;
  uint64_t v75 = v9;
  uint64_t v12 = std::to_address[abi:sn180100]<char const>();

  CFTypeRef v76 = v12;
  id v13 = v11;
  uint64_t v14 = v13;
  CFTypeRef v77 = v13;
  if (v11) {
    CFRetain(v13);
  }

  uint64_t v62 = a1;
  CFRetain(a1[1]);
  uint64_t v63 = a1;
  WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_3::$_3((uint64_t)&v64, (uint64_t)&v71);
  id v15 = v14;
  uint64_t v16 = v15;
  CFTypeRef v70 = v15;
  if (v11) {
    CFRetain(v15);
  }

  uint64_t v17 = WebKit::WebExtensionContext::declarativeNetRequestSessionRulesStore((WebKit::WebExtensionContext *)a1);
  v52[0] = (WTF::StringImpl *)a1;
  CFRetain(a1[1]);
  v52[1] = (WTF::StringImpl *)a1;
  WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::$_0(&v53, &v62);
  id v18 = v16;
  uint64_t v19 = v18;
  CFTypeRef cf = v18;
  if (v11) {
    CFRetain(v18);
  }

  long long v20 = *(_OWORD *)v52;
  v52[1] = 0;
  long long v78 = v20;
  WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::$_0(&v79, &v53);
  CFTypeRef cf = 0;
  long long v21 = std::to_address[abi:sn180100]<char const>();

  int v87 = v21;
  char v22 = malloc_type_malloc(0x88uLL, 0x10E00401D9D2858uLL);
  void *v22 = MEMORY[0x1E4F14398];
  v22[1] = 50331650;
  uint64_t v22[2] = WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void *,NSArray *,NSString *)#1}::__invoke;
  v22[3] = &WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::descriptor;
  long long v23 = v78;
  *((void *)&v78 + 1) = 0;
  *((_OWORD *)v22 + 2) = v23;
  WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::$_0(v22 + 6, &v79);
  int v87 = 0;
  unint64_t v24 = std::to_address[abi:sn180100]<char const>();

  unsigned char v22[16] = v24;
  unint64_t v25 = _Block_copy(v22);

  unint64_t v26 = v87;
  int v87 = 0;
  if (v26) {
    CFRelease(v26);
  }
  unsigned int v27 = v86;
  int v86 = 0;
  if (v27) {
    CFRelease(v27);
  }
  uint64_t v28 = v85;
  uint64_t v85 = 0;
  if (v28) {
    CFRelease(v28);
  }
  uint64_t v29 = v84;
  __int16 v84 = 0;
  if (v29) {
    CFRelease(v29);
  }
  uint64_t v30 = v83;
  uint64_t v83 = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = v82;
  uint64_t v82 = 0;
  if (v31) {
    CFRelease(*(CFTypeRef *)(v31 + 8));
  }
  uint64_t v32 = v81;
  uint64_t v81 = 0;
  if (v32) {
    CFRelease(*(CFTypeRef *)(v32 + 8));
  }
  uint64_t v33 = v80;
  uint64_t v80 = 0;
  if (v33) {
    CFRelease(*(CFTypeRef *)(v33 + 8));
  }
  uint64_t v34 = *((void *)&v78 + 1);
  *((void *)&v78 + 1) = 0;
  if (v34) {
    CFRelease(*(CFTypeRef *)(v34 + 8));
  }
  uint64_t v35 = _Block_copy(v25);
  [v17 getRulesWithCompletionHandler:v35];

  CFTypeRef v36 = cf;
  CFTypeRef cf = 0;
  if (v36) {
    CFRelease(v36);
  }
  CFTypeRef v37 = v60;
  CFTypeRef v60 = 0;
  if (v37) {
    CFRelease(v37);
  }
  CFTypeRef v38 = v59;
  CFTypeRef v59 = 0;
  if (v38) {
    CFRelease(v38);
  }
  CFTypeRef v39 = v58;
  CFTypeRef v58 = 0;
  if (v39) {
    CFRelease(v39);
  }
  uint64_t v40 = v57;
  uint64_t v57 = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  uint64_t v41 = v56;
  uint64_t v56 = 0;
  if (v41) {
    CFRelease(*(CFTypeRef *)(v41 + 8));
  }
  uint64_t v42 = v55;
  uint64_t v55 = 0;
  if (v42) {
    CFRelease(*(CFTypeRef *)(v42 + 8));
  }
  uint64_t v43 = v54;
  uint64_t v54 = 0;
  if (v43) {
    CFRelease(*(CFTypeRef *)(v43 + 8));
  }
  uint64_t v44 = v52[1];
  v52[1] = 0;
  if (v44) {
    CFRelease(*((CFTypeRef *)v44 + 1));
  }

  CFTypeRef v45 = v70;
  CFTypeRef v70 = 0;
  if (v45) {
    CFRelease(v45);
  }
  CFTypeRef v46 = v69;
  CFTypeRef v69 = 0;
  if (v46) {
    CFRelease(v46);
  }
  CFTypeRef v47 = v68;
  CFTypeRef v68 = 0;
  if (v47) {
    CFRelease(v47);
  }
  uint64_t v48 = v67;
  uint64_t v67 = 0;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
  uint64_t v49 = v66;
  uint64_t v66 = 0;
  if (v49) {
    CFRelease(*(CFTypeRef *)(v49 + 8));
  }
  uint64_t v50 = v65;
  uint64_t v65 = 0;
  if (v50) {
    CFRelease(*(CFTypeRef *)(v50 + 8));
  }
  unsigned int v51 = v63;
  uint64_t v63 = 0;
  if (v51) {
    CFRelease(v51[1]);
  }
  if (v77) {
    CFRelease(v77);
  }
  if (v76) {
    CFRelease(v76);
  }
  if (v75) {
    (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
  }
  if (v74) {
    CFRelease(v74[1]);
  }
  if (v72) {
    CFRelease(v72[1]);
  }
}

void sub_1993324EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef a18, CFTypeRef a19, CFTypeRef cf,CFTypeRef a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,CFTypeRef a29,CFTypeRef a30,CFTypeRef a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,CFTypeRef a37,CFTypeRef a38)
{
  uint64_t v41 = v39;

  if (cf) {
    CFRelease(cf);
  }
  if (a19) {
    CFRelease(a19);
  }
  if (a18) {
    CFRelease(a18);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  if (a16) {
    CFRelease(*(CFTypeRef *)(a16 + 8));
  }
  if (a14) {
    CFRelease(*(CFTypeRef *)(a14 + 8));
  }
  if (a12) {
    CFRelease(*(CFTypeRef *)(a12 + 8));
  }
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }

  if (a31) {
    CFRelease(a31);
  }
  if (a30) {
    CFRelease(a30);
  }
  if (a29) {
    CFRelease(a29);
  }
  if (a28) {
    (*(void (**)(uint64_t))(*(void *)a28 + 8))(a28);
  }
  if (a27) {
    CFRelease(*(CFTypeRef *)(a27 + 8));
  }
  if (a25) {
    CFRelease(*(CFTypeRef *)(a25 + 8));
  }
  if (a23) {
    CFRelease(*(CFTypeRef *)(a23 + 8));
  }
  if (a38) {
    CFRelease(a38);
  }
  if (a37) {
    CFRelease(a37);
  }
  if (a36) {
    (*(void (**)(uint64_t))(*(void *)a36 + 8))(a36);
  }
  if (a35) {
    CFRelease(*(CFTypeRef *)(a35 + 8));
  }
  if (a33) {
    CFRelease(*(CFTypeRef *)(a33 + 8));
  }

  _Unwind_Resume(a1);
}

void sub_1993328DC()
{
}

void sub_1993328E4(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  id v10 = *(WTF::StringImpl **)(v9 - 176);
  *(void *)(v9 - 176) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  JUMPOUT(0x1993328D4);
}

uint64_t WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_3::$_3(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 32) = v6;
  WTF::RetainPtr<NSMutableArray>::RetainPtr((void *)(a1 + 40), (void *)(a2 + 40));
  WTF::RetainPtr<NSMutableArray>::RetainPtr((void *)(a1 + 48), (void *)(a2 + 48));
  return a1;
}

void sub_1993329B8(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  *uint64_t v2 = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = v1[4];
  v1[4] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = v1[3];
  v1[3] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  uint64_t v7 = v1[1];
  v1[1] = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::$_0(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  a2[1] = 0;
  a1[1] = v4;
  WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_3::$_3((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  WTF::RetainPtr<NSMutableArray>::RetainPtr(a1 + 9, a2 + 9);
  return a1;
}

void sub_199332A8C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (const void *)v1[8];
  v1[8] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)v1[7];
  v1[7] = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = v1[6];
  v1[6] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = v1[5];
  v1[5] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  uint64_t v7 = v1[3];
  v1[3] = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  uint64_t v8 = v1[1];
  v1[1] = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0(void *a1)
{
  uint64_t v2 = (const void *)a1[9];
  a1[9] = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[8];
  a1[8] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[7];
  a1[7] = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = a1[6];
  a1[6] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[5];
  a1[5] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  uint64_t v7 = a1[3];
  a1[3] = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  uint64_t v8 = a1[1];
  a1[1] = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  return a1;
}

BOOL WebKit::WebExtensionContext::handleContentRuleListNotificationForTab(uint64_t *a1, WebKit::WebExtensionTab *a2, uint64_t a3)
{
  WebKit::WebExtensionContext::incrementActionCountForTab((WebKit::WebExtensionContext *)a1, a2, 1);
  MEMORY[0x19972EAD0](&v18, @"declarativeNetRequestFeedback");
  if ((WebKit::WebExtensionContext::permissionState((WTF::StringImpl *)a1, &v18, 0, 2) & 0xFFFFFFFE) == 2)
  {
    BOOL v7 = 0;
  }
  else
  {
    MEMORY[0x19972EAD0](&v22, @"declarativeNetRequest");
    BOOL v7 = (WebKit::WebExtensionContext::permissionState((WTF::StringImpl *)a1, &v22, 0, 2) & 0xFFFFFFFE) != 2
      || (WebKit::WebExtensionContext::permissionState((uint64_t)a1, (URL *)a3, (URL *)a2, 3) & 0xFFFFFFFE) != 2;
    uint64_t v8 = v22;
    char v22 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
  }
  uint64_t v9 = v18;
  id v18 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      uint64_t v9 = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v6);
      if (v7) {
        return !v7;
      }
      goto LABEL_16;
    }
    *(_DWORD *)v9 -= 2;
  }
  if (v7) {
    return !v7;
  }
LABEL_16:
  id v10 = *(WTF::StringImpl **)a3;
  if (*(void *)a3) {
    *(_DWORD *)v10 += 2;
  }
  id v18 = v10;
  long long v19 = *(_OWORD *)(a3 + 8);
  long long v20 = *(_OWORD *)(a3 + 24);
  WTF::WallTime::now(v9);
  uint64_t v11 = a1 + 80;
  *(void *)&long long v21 = v12;
  *((void *)&v21 + 1) = *((void *)a2 + 2);
  unsigned int v13 = *((_DWORD *)a1 + 163);
  if (v13 == *((_DWORD *)a1 + 162))
  {
    WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMatchedRuleParameters>((uint64_t)v11, (unint64_t)&v18);
  }
  else
  {
    uint64_t v15 = *v11;
    WTF::URL::URL(*v11 + 56 * v13, (uint64_t *)&v18);
    *(_OWORD *)(v15 + 56 * v13 + 40) = v21;
    ++*((_DWORD *)a1 + 163);
  }
  uint64_t v16 = v18;
  id v18 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v14);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  return !v7;
}

void sub_199332DD8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionContext::purgeMatchedRulesFromBefore(WebKit::WebExtensionContext *this, const WTF::WallTime *a2)
{
  uint64_t v2 = *((unsigned int *)this + 163);
  if (!v2) {
    return 0;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unint64_t v5 = *((void *)this + 80);
  uint64_t v6 = 56 * v2;
  do
  {
    if (*(double *)(v5 + 40) >= *(double *)a2)
    {
      unsigned int v7 = HIDWORD(v18);
      if (HIDWORD(v18) == v18)
      {
        WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMatchedRuleParameters&>((uint64_t)&v17, v5);
      }
      else
      {
        uint64_t v8 = v17;
        uint64_t v9 = *(_DWORD **)v5;
        if (*(void *)v5) {
          *v9 += 2;
        }
        uint64_t v10 = v8 + 56 * v7;
        *(void *)uint64_t v10 = v9;
        long long v11 = *(_OWORD *)(v5 + 8);
        *(_OWORD *)(v10 + 24) = *(_OWORD *)(v5 + 24);
        *(_OWORD *)(v10 + 8) = v11;
        *(_OWORD *)(v10 + 40) = *(_OWORD *)(v5 + 40);
        ++HIDWORD(v18);
      }
    }
    v5 += 56;
    v6 -= 56;
  }
  while (v6);
  unsigned int v12 = *((_DWORD *)this + 163);
  unsigned int v13 = (WTF::StringImpl *)*((void *)this + 80);
  if (v12)
  {
    WTF::VectorDestructor<true,std::pair<WTF::URL,WebCore::CharacterRange>>::destruct(v13, (WTF::StringImpl *)((char *)v13 + 56 * v12));
    unsigned int v13 = (WTF::StringImpl *)*((void *)this + 80);
  }
  if (v13)
  {
    *((void *)this + 80) = 0;
    *((_DWORD *)this + 162) = 0;
    WTF::fastFree(v13, a2);
  }
  *((void *)this + 80) = v17;
  int v14 = HIDWORD(v18);
  *((_DWORD *)this + 162) = v18;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  *((_DWORD *)this + 163) = v14;
  BOOL v15 = v14 != 0;
  WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, a2);
  return v15;
}

void sub_199332FA0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id WebKit::WebExtensionContext::registeredContentScriptsStore(WebKit::WebExtensionContext *this)
{
  uint64_t v2 = (void *)*((void *)this + 52);
  if (!v2)
  {
    uint64_t v3 = [_WKWebExtensionRegisteredScriptsSQLiteStore alloc];
    if (*((void *)this + 15)) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    if (*((void *)this + 5))
    {
      unint64_t v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      uint64_t v6 = *((void *)this + 5);
      if (v6) {
        BOOL v7 = *(_DWORD *)(v6 + 4) == 0;
      }
      else {
        BOOL v7 = 1;
      }
    }
    else
    {
      BOOL v7 = 1;
      unint64_t v5 = &stru_1EEA10550;
    }
    uint64_t v8 = [(_WKWebExtensionRegisteredScriptsSQLiteStore *)v3 initWithUniqueIdentifier:v4 directory:v5 usesInMemoryDatabase:v7];
    uint64_t v9 = v8;
    if (v8) {
      CFRetain(v8);
    }

    uint64_t v10 = (const void *)*((void *)this + 52);
    *((void *)this + 52) = v9;
    if (v10) {
      CFRelease(v10);
    }

    uint64_t v2 = (void *)*((void *)this + 52);
  }

  return v2;
}

void sub_1993330C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::setSessionStorageAllowedInContentScripts(WebKit::WebExtensionContext *this, uint64_t a2)
{
  *((unsigned char *)this + 720) = a2;
  uint64_t v4 = WTF::RetainPtr<__IOHIDDevice *>::get();
  unint64_t v5 = [NSNumber numberWithBool:a2];
  [v4 setObject:v5 forKey:@"SessionStorageAllowedInContentScripts"];

  WebKit::WebExtensionContext::writeStateToStorage(this);
  uint64_t v6 = *((void *)this + 9);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7)
    {
      uint64_t v8 = *((void *)this + 4);
      WebKit::WebExtensionController::allProcesses((WebKit::WebExtensionController *)(v7 - 16), v28);
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v28, &v26);
      if (v28[0])
      {
        uint64_t v9 = *((unsigned int *)v28[0] - 1);
        uint64_t v10 = &v28[0][v9];
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v9 = 0;
      }
      long long v21 = v28;
      char v22 = v10;
      long long v23 = v10;
      unint64_t v24 = v10;
      unint64_t v25 = &v28[0][v9];
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v21);
      while (v27 != v22)
      {
        uint64_t v12 = *(void *)(*v27 + 8);
        uint64_t v13 = *(void *)(v12 + 136);
        if (v13 && *(unsigned char *)(v13 + 104) || *(void *)(v12 + 144))
        {
          char v20 = a2;
          int v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)int v14 = 1630;
          *((void *)v14 + 1) = v8;
          *((void *)v14 + 66) = (char *)v14 + 16;
          *((void *)v14 + 67) = 512;
          *((void *)v14 + 68) = 0;
          *((void *)v14 + 70) = 0;
          *((void *)v14 + 69) = 0;
          IPC::Encoder::encodeHeader(v14);
          uint64_t v31 = v14;
          IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v14, &v20);
          LOBYTE(v29) = 0;
          char v30 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v31, 0, (uint64_t)&v29, 1);
          if (v30)
          {
            uint64_t v16 = v29;
            uint64_t v29 = 0;
            if (v16) {
              (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
            }
          }
          uint64_t v17 = v31;
          uint64_t v31 = 0;
          if (v17)
          {
            IPC::Encoder::~Encoder(v17, v15);
            WTF::fastFree(v18, v19);
          }
        }
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v26);
      }
      if (v28[0]) {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable((unsigned int **)v28[0], v11);
      }
    }
  }
}

void sub_1993332F4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int **a21)
{
  if (a21) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(a21, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionContext::quotaForStorageType(WTF::StringImpl *a1, int a2)
{
  if (a2 == 4) {
    return 102400;
  }
  if (a2 == 2) {
    return 10485760;
  }
  if (a2 != 1) {
    return 0;
  }
  MEMORY[0x19972EAD0](&v7, @"unlimitedStorage");
  if ((WebKit::WebExtensionContext::permissionState(a1, &v7, 0, 2) & 0xFFFFFFFE) == 2) {
    uint64_t v4 = -1;
  }
  else {
    uint64_t v4 = 5242880;
  }
  unint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v4;
}

void sub_19933344C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

id WebKit::WebExtensionContext::localStorageStore(WebKit::WebExtensionContext *this)
{
  uint64_t v2 = (void *)*((void *)this + 91);
  if (!v2)
  {
    uint64_t v3 = [_WKWebExtensionStorageSQLiteStore alloc];
    if (*((void *)this + 15)) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    if (*((void *)this + 5))
    {
      unint64_t v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      uint64_t v6 = *((void *)this + 5);
      if (v6) {
        BOOL v7 = *(_DWORD *)(v6 + 4) == 0;
      }
      else {
        BOOL v7 = 1;
      }
    }
    else
    {
      BOOL v7 = 1;
      unint64_t v5 = &stru_1EEA10550;
    }
    uint64_t v8 = [(_WKWebExtensionStorageSQLiteStore *)v3 initWithUniqueIdentifier:v4 storageType:1 directory:v5 usesInMemoryDatabase:v7];
    uint64_t v9 = (const void **)((char *)this + 728);
    WTF::RetainPtr<_WKWebExtensionStorageSQLiteStore>::operator=(v9, v8);

    uint64_t v2 = (void *)*v9;
  }

  return WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v2);
}

void sub_199333568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionContext::sessionStorageStore(WebKit::WebExtensionContext *this)
{
  uint64_t v2 = (void *)*((void *)this + 92);
  if (!v2)
  {
    uint64_t v3 = [_WKWebExtensionStorageSQLiteStore alloc];
    if (*((void *)this + 15)) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    if (*((void *)this + 5)) {
      unint64_t v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      unint64_t v5 = &stru_1EEA10550;
    }
    uint64_t v6 = [(_WKWebExtensionStorageSQLiteStore *)v3 initWithUniqueIdentifier:v4 storageType:2 directory:v5 usesInMemoryDatabase:1];
    BOOL v7 = (const void **)((char *)this + 736);
    WTF::RetainPtr<_WKWebExtensionStorageSQLiteStore>::operator=(v7, v6);

    uint64_t v2 = (void *)*v7;
  }

  return WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v2);
}

void sub_199333660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionContext::syncStorageStore(WebKit::WebExtensionContext *this)
{
  uint64_t v2 = (void *)*((void *)this + 93);
  if (!v2)
  {
    uint64_t v3 = [_WKWebExtensionStorageSQLiteStore alloc];
    if (*((void *)this + 15)) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1EEA10550;
    }
    if (*((void *)this + 5))
    {
      unint64_t v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      uint64_t v6 = *((void *)this + 5);
      if (v6) {
        BOOL v7 = *(_DWORD *)(v6 + 4) == 0;
      }
      else {
        BOOL v7 = 1;
      }
    }
    else
    {
      BOOL v7 = 1;
      unint64_t v5 = &stru_1EEA10550;
    }
    uint64_t v8 = [(_WKWebExtensionStorageSQLiteStore *)v3 initWithUniqueIdentifier:v4 storageType:4 directory:v5 usesInMemoryDatabase:v7];
    uint64_t v9 = (const void **)((char *)this + 744);
    WTF::RetainPtr<_WKWebExtensionStorageSQLiteStore>::operator=(v9, v8);

    uint64_t v2 = (void *)*v9;
  }

  return WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v2);
}

void sub_199333774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionContext::storageForType(WebKit::WebExtensionContext *a1, int a2)
{
  switch(a2)
  {
    case 4:
      uint64_t v2 = WebKit::WebExtensionContext::syncStorageStore(a1);
      break;
    case 2:
      uint64_t v2 = WebKit::WebExtensionContext::sessionStorageStore(a1);
      break;
    case 1:
      uint64_t v2 = WebKit::WebExtensionContext::localStorageStore(a1);
      break;
    default:
      uint64_t v2 = 0;
      break;
  }

  return v2;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      unint64_t v5 = *(unsigned int **)v4;
      if (*(void *)v4 != -1)
      {
        uint64_t v6 = *(void *)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        if (v6)
        {
          CFRelease(*(CFTypeRef *)(v6 + 8));
          unint64_t v5 = *(unsigned int **)v4;
        }
        *(void *)uint64_t v4 = 0;
        if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v5);
          WTF::fastFree((WTF *)v5, a2);
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          WTF::RefCounted<WebKit::WebExtensionTab>::deref(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 16;
    do
    {
      if (*(unsigned __int8 *)(v4 - 16) != 254) {
        uint64_t v4 = WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
      }
      v4 += 32;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 8;
    do
    {
      if (*(void *)(v4 - 8) != -1)
      {
        WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        uint64_t v5 = *(void *)(v4 - 8);
        *(void *)(v4 - 8) = 0;
        if (v5) {
          CFRelease(*(CFTypeRef *)(v5 + 8));
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (unsigned int ***)(a1 + 8);
    do
    {
      if (*((unsigned __int8 *)v4 - 8) != 254 && *v4) {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v4, a2);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        uint64_t *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 6;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::deleteAllNodes(uint64_t result, void *a2)
{
  for (int i = *(WTF **)(result + 8); i; result = WTF::fastFree(v3, a2))
  {
    uint64_t v3 = i;
    int i = (WTF *)*((void *)i + 6);
    uint64_t v4 = *(WTF::StringImpl **)v3;
    *(void *)uint64_t v3 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return result;
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::recordError(NSError *)::$_0>(WebKit::WebExtensionContext::recordError(NSError *)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::recordError(NSError *)::$_0>(WebKit::WebExtensionContext::recordError(NSError *)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 32);
  id v3 = [MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v2 = WebKit::WebExtensionAction::wrapper(v1);
  [v3 postNotificationName:@"WKWebExtensionContextErrorsDidUpdate" object:v2 userInfo:0];
}

void sub_199333C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::clearError(WebKit::WebExtensionContext::Error)::$_0>(WebKit::WebExtensionContext::clearError(WebKit::WebExtensionContext::Error)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::clearError(WebKit::WebExtensionContext::Error)::$_0>(WebKit::WebExtensionContext::clearError(WebKit::WebExtensionContext::Error)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 32);
  id v3 = [MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v2 = WebKit::WebExtensionAction::wrapper(v1);
  [v3 postNotificationName:@"WKWebExtensionContextErrorsDidUpdate" object:v2 userInfo:0];
}

void sub_199333CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 32));
}

WTF::StringImpl ***WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=(WTF::StringImpl ***a1, void **a2)
{
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v6, a2);
  uint64_t v4 = *a1;
  *a1 = v6;
  uint64_t v6 = v4;
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
  }
  return a1;
}

uint64_t **WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::operator=(uint64_t **a1, void **a2)
{
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v6, a2);
  uint64_t v4 = *a1;
  *a1 = v6;
  uint64_t v6 = v4;
  if (v4) {
    WTF::HashTable<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>>::deallocateTable(v4, v3);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable(uint64_t *a1, void **a2)
{
  *a1 = 0;
  id v3 = *a2;
  if (*a2)
  {
    int v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      unsigned int v6 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      size_t v7 = 16 * v6;
      uint64_t v8 = WTF::fastMalloc((WTF *)(v7 + 16));
      uint64_t v9 = v8;
      uint64_t v10 = v8 + 16;
      if (v6) {
        bzero((void *)(v8 + 16), v7);
      }
      *a1 = v10;
      *(_DWORD *)(v9 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      long long v11 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
      uint64_t v12 = v11;
      int v14 = v13;
      uint64_t v15 = *a2 ? (uint64_t)&(*a2)[2 * *((unsigned int *)*a2 - 1)] : 0;
      if ((uint64_t *)v15 != v11)
      {
        do
        {
          uint64_t v26 = v12;
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = ~(*v12 << 32) + *v12;
          unint64_t v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
          unint64_t v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
          unsigned int v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~(v20 << 27)));
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            uint64_t v24 = *(void *)(v16 + 16 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (v24);
          WTF::IdentityHashTranslator<WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::translate<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable(WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>> const&)::{lambda(void)#1}>((uint64_t *)(v16 + 16 * v23), (uint64_t)v12, &v26);
          while (1)
          {
            v12 += 2;
            if (v12 == v14) {
              break;
            }
            if ((unint64_t)(*v12 + 1) > 1) {
              goto LABEL_19;
            }
          }
          uint64_t v12 = v14;
LABEL_19:
          ;
        }
        while (v12 != (uint64_t *)v15);
      }
    }
  }
  return a1;
}

void WTF::IdentityHashTranslator<WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::translate<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable(WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>> const&)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *a3;
  uint64_t v5 = **a3;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  uint64_t v6 = v4[1];
  uint64_t v7 = *a1;
  *a1 = v5;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  a1[1] = v6;
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::permissionsDidChange(NSString *,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0>(WebKit::WebExtensionContext::permissionsDidChange(NSString *,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1, WTF::StringImpl *a2)
{
  id v3 = (WTF::StringImpl **)a1[7];
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  int v4 = (const void *)a1[6];
  a1[6] = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = a1[5];
  a1[5] = 0;
  if (v5)
  {
    uint64_t v6 = *(const void **)(v5 + 8);
    CFRelease(v6);
  }
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::permissionsDidChange(NSString *,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0>(WebKit::WebExtensionContext::permissionsDidChange(NSString *,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(id **)(a1 + 32);
  id v3 = [MEMORY[0x1E4F28EB8] defaultCenter];
  int v4 = WTF::RetainPtr<__IOHIDDevice *>::get();
  uint64_t v5 = WebKit::WebExtensionAction::wrapper(v2);
  uint64_t v8 = @"permissions";
  uint64_t v6 = WebKit::toAPI((void **)(a1 + 56));
  v9[0] = v6;
  uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1];
  [v3 postNotificationName:v4 object:v5 userInfo:v7];
}

void sub_199334150(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::permissionsDidChange(NSString *,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0>(WebKit::WebExtensionContext::permissionsDidChange(NSString *,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1, void *a2)
{
  id v3 = (uint64_t *)a1[7];
  if (v3) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v3, a2);
  }
  int v4 = (const void *)a1[6];
  a1[6] = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = a1[5];
  a1[5] = 0;
  if (v5)
  {
    uint64_t v6 = *(const void **)(v5 + 8);
    CFRelease(v6);
  }
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::permissionsDidChange(NSString *,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0>(WebKit::WebExtensionContext::permissionsDidChange(NSString *,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(id **)(a1 + 32);
  id v3 = [MEMORY[0x1E4F28EB8] defaultCenter];
  int v4 = WTF::RetainPtr<__IOHIDDevice *>::get();
  uint64_t v5 = WebKit::WebExtensionAction::wrapper(v2);
  uint64_t v8 = @"matchPatterns";
  uint64_t v6 = WebKit::toAPI((void **)(a1 + 56));
  v9[0] = v6;
  uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1];
  [v3 postNotificationName:v4 object:v5 userInfo:v7];
}

void sub_19933430C(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

_DWORD *WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(_DWORD **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x1E4F1CAD0] set];
  WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>::operator()(v1, v2, 0);
}

void sub_1993343D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>::operator()(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = (uint64_t *)(a1 + 8);
  if (v7) {
    WTF::CompletionHandler<void ()(NSSet *,NSDate *)>::operator()(v6, v8, v5);
  }
}

void sub_199334450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(NSSet *,NSDate *)>::operator()(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v4 = *a1;
  *a1 = 0;
  id v5 = *(void (**)(uint64_t, id, id))(*(void *)v4 + 16);
  id v6 = a3;
  id v7 = a2;
  v5(v4, v7, v6);
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v9(v4);
}

void sub_199334528(_Unwind_Exception *a1)
{
  id v5 = *(void (**)(uint64_t))(*(void *)v1 + 8);

  v5(v1);
  _Unwind_Resume(a1);
}

_DWORD *WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(_DWORD **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void *,NSSet *,NSDate *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
}

_DWORD *WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(_DWORD **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x1E4F1CAD0] set];
  WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>::operator()(v1, v2, 0);
}

void sub_1993345FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

_DWORD *WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(_DWORD **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void *,NSSet *,NSDate *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
}

_DWORD *WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(_DWORD **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0>(WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x1E4F1CAD0] set];
  WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>::operator()(v1, v2, 0);
}

void sub_1993346A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

_DWORD *WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(_DWORD **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(result);
  }
  return result;
}

void WTF::BlockPtrArc<void ()(NSSet *,NSDate *)>::fromCallable<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1>(WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_1)::{lambda(void *,NSSet *,NSDate *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
}

BOOL WTF::WeakObjCPtrArc<NSObject  {objcproto20WKWebExtensionWindow}>::operator BOOL(id *a1)
{
  WTF::WeakObjCPtrArc<NSObject  {objcproto20WKWebExtensionWindow}>::get(a1, &cf);
  CFTypeRef v1 = cf;
  CFTypeRef cf = 0;
  if (v1) {
    CFRelease(v1);
  }
  return v1 != 0;
}

void WTF::WeakObjCPtrArc<NSObject  {objcproto20WKWebExtensionWindow}>::get(id *a1@<X0>, void *a2@<X8>)
{
  id v3 = objc_loadWeakRetained(a1);
  *a2 = v3;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
}

void sub_199334790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::operator BOOL(id *a1)
{
  WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::get(a1, &cf);
  CFTypeRef v1 = cf;
  CFTypeRef cf = 0;
  if (v1) {
    CFRelease(v1);
  }
  return v1 != 0;
}

void WTF::WeakObjCPtrArc<NSObject  {objcproto17WKWebExtensionTab}>::get(id *a1@<X0>, void *a2@<X8>)
{
  id v3 = objc_loadWeakRetained(a1);
  *a2 = v3;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
}

void sub_199334868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != -1)
      {
        uint64_t *v4 = 0;
        if (v5) {
          WTF::RefCounted<WebKit::WebExtensionTab>::deref(v5);
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::didChangeTabProperties(WebKit::WebExtensionTab &,WTF::OptionSet<WebKit::WebExtensionTab::ChangedProperties>)::$_0>(WebKit::WebExtensionContext::didChangeTabProperties(WebKit::WebExtensionTab &,WTF::OptionSet<WebKit::WebExtensionTab::ChangedProperties>)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::didChangeTabProperties(WebKit::WebExtensionTab &,WTF::OptionSet<WebKit::WebExtensionTab::ChangedProperties>)::$_0>(WebKit::WebExtensionContext::didChangeTabProperties(WebKit::WebExtensionTab &,WTF::OptionSet<WebKit::WebExtensionTab::ChangedProperties>)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 72);
  if (v2)
  {
    if (*(void *)(v2 + 8))
    {
      WebKit::WebExtensionContext::getTab(*(uint64_t **)(a1 + 32), *(void *)(a1 + 48), 0, &v17);
      uint64_t v3 = v17;
      if (v17)
      {
        uint64_t v4 = qword_1EB357DF8;
        if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
        {
          int v10 = *((unsigned __int16 *)v3 + 24);
          uint64_t v11 = *((void *)v3 + 2);
          *(_DWORD *)buf = 67240448;
          int v19 = v10;
          __int16 v20 = 2050;
          *(void *)unsigned int v21 = v11;
          _os_log_debug_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEBUG, "Firing updated tab properties (0x%{public}X) for tab %{public}llu", buf, 0x12u);
        }
        WebKit::WebExtensionTab::parameters(v3, (uint64_t)buf);
        WebKit::WebExtensionTab::changedParameters(v3, 0, (uint64_t)&v12);
        WebKit::WebExtensionContext::fireTabsUpdatedEventIfNeeded(v1, (long long *)buf, &v12);
        if (v16)
        {
          id v6 = v15;
          uint64_t v15 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2) {
              WTF::StringImpl::destroy(v6, v5);
            }
            else {
              *(_DWORD *)v6 -= 2;
            }
          }
        }
        if (v14)
        {
          id v7 = v13;
          uint64_t v13 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2) {
              WTF::StringImpl::destroy(v7, v5);
            }
            else {
              *(_DWORD *)v7 -= 2;
            }
          }
        }
        if (v24)
        {
          id v8 = v23;
          unsigned int v23 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2) {
              WTF::StringImpl::destroy(v8, v5);
            }
            else {
              *(_DWORD *)v8 -= 2;
            }
          }
        }
        if (v22)
        {
          uint64_t v9 = *(WTF::StringImpl **)&v21[6];
          *(void *)&v21[6] = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2) {
              WTF::StringImpl::destroy(v9, v5);
            }
            else {
              *(_DWORD *)v9 -= 2;
            }
          }
        }
        *((_WORD *)v3 + 24) = 0;
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v3);
      }
    }
  }
}

void sub_199334AE4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, WTF::StringImpl *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,WTF::StringImpl *a41,char a42)
{
  if (a19 && a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  if (a17 && a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a42 && a41)
  {
    if (*(_DWORD *)a41 == 2) {
      WTF::StringImpl::destroy(a41, a2);
    }
    else {
      *(_DWORD *)a41 -= 2;
    }
  }
  if (a40 && a35)
  {
    if (*(_DWORD *)a35 == 2) {
      WTF::StringImpl::destroy(a35, a2);
    }
    else {
      *(_DWORD *)a35 -= 2;
    }
  }
  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v42);
  _Unwind_Resume(a1);
}

void *WTF::RetainPtr<NSURLResponse>::RetainPtr(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  *a1 = v3;
  if (v3) {
    CFRetain(v3);
  }

  return a1;
}

void sub_199334C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *WTF::RetainPtr<objc_object * {__strong}>::RetainPtr(void *a1, id *a2)
{
  WTF::RetainPtr<NSSet>::get(a2);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = v3;
  *a1 = v3;
  if (v3) {
    CFRetain(v3);
  }

  return a1;
}

void sub_199334C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *WTF::RetainPtr<NSURLAuthenticationChallenge>::RetainPtr(void *a1, id *a2)
{
  WTF::RetainPtr<NSSet>::get(a2);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = v3;
  *a1 = v3;
  if (v3) {
    CFRetain(v3);
  }

  return a1;
}

void sub_199334CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(BOOL)>::fromCallable<WebKit::WebExtensionContext::loadBackgroundWebView(void)::$_0>(WebKit::WebExtensionContext::loadBackgroundWebView(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
}

void WTF::BlockPtrArc<void ()(BOOL)>::fromCallable<WebKit::WebExtensionContext::loadBackgroundWebView(void)::$_0>(WebKit::WebExtensionContext::loadBackgroundWebView(void)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, char a2)
{
  uint64_t v2 = *(const void ***)(a1 + 32);
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    WebKit::WebExtensionContext::performTasksAfterBackgroundContentLoads(v3);
  }
  else
  {
    WebKit::WebExtensionContext::createError(a1, 6, 0, 0);
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<NSError>::operator=(v2 + 43, v4);

    WTF::RetainPtr<__IOHIDDevice *>::get();
    uint64_t v5 = (NSError *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionContext::recordError(v2, v5);
  }
}

void sub_199334DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebExtensionContext::*&)(void),WebKit::WebExtensionContext*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1)
{
  uint64_t v2 = a1[7];
  a1[7] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  a1[6] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = a1[5];
  a1[5] = 0;
  if (v4)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  v47[10] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(CFTypeRef **)(a1 + 32);
  uint64_t v3 = std::to_address[abi:sn180100]<char const>();
  id v41 = 0;
  CFTypeRef v39 = +[_WKWebExtensionDeclarativeNetRequestTranslator jsonObjectsFromData:v3 errorStrings:&v41];
  id v4 = v41;

  id v40 = 0;
  uint64_t v5 = +[_WKWebExtensionDeclarativeNetRequestTranslator translateRules:v39 errorStrings:&v40];
  id v6 = v40;
  CFTypeRef v36 = v5;
  CFTypeRef v38 = WebKit::encodeJSONString(v5, 1, 0);
  if (v38)
  {
    id v7 = WTF::RetainPtr<__IOHIDDevice *>::get();
    WTF::RetainPtr<NSDictionary>::RetainPtr(&cf, v7);

    CFTypeRef v37 = WebKit::objectForKey<NSString>((id *)&cf, @"LastLoadedDeclarativeNetRequestHash", 1);
    CFTypeRef v8 = cf;
    CFTypeRef cf = 0;
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v9 = v38;
    WTF::SHA1::SHA1((WTF::SHA1 *)&cf);
    WTF::SHA1::addUTF8Bytes((WTF::SHA1 *)&cf, v9);
    WTF::SHA1::computeHash();
    WTF::SHA1::hexDigest();
    WTF::String::fromUTF8();
    if (v42) {
      int v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v10 = &stru_1EEA10550;
    }
    uint64_t v11 = objc_msgSend(NSString, "stringWithFormat:", @"-%zu", 1, v36);
    long long v12 = [(__CFString *)v10 stringByAppendingString:v11];

    char v14 = v42;
    uint64_t v42 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    int v19 = v43;
    uint64_t v43 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1) {
        WTF::fastFree(v19, v13);
      }
      else {
        --*(_DWORD *)v19;
      }
    }

    id v20 = MEMORY[0x1E4F14428];
    CFTypeRef cf = v2;
    CFRetain(v2[1]);
    uint64_t v21 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    *(void *)&long long v45 = v2;
    *((void *)&v45 + 1) = v21;
    MEMORY[0x19972EAD0](v46, v37);
    MEMORY[0x19972EAD0](&v46[1], v12);
    MEMORY[0x19972EAD0](v47, v9);
    CFTypeRef v22 = cf;
    long long v24 = v45;
    unsigned int v23 = v46[0];
    uint64_t v26 = v46[1];
    uint64_t v25 = v47[0];
    long long v45 = 0u;
    *(_OWORD *)CFTypeRef v46 = 0u;
    v47[0] = 0;
    unsigned int v27 = (char *)malloc_type_malloc(0x50uLL, 0x10E0040BD486B64uLL);
    *(void *)unsigned int v27 = MEMORY[0x1E4F14398];
    *((void *)v27 + 1) = 50331650;
    *((void *)v27 + 2) = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2}>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2})::{lambda(void *)#1}::__invoke;
    *((void *)v27 + 3) = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2}>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2})::descriptor;
    *((void *)v27 + 4) = v22;
    *(_OWORD *)(v27 + 40) = v24;
    *((void *)v27 + 7) = v23;
    *((void *)v27 + 8) = v26;
    *((void *)v27 + 9) = v25;
    uint64_t v28 = _Block_copy(v27);

    uint64_t v29 = _Block_copy(v28);
    dispatch_async(MEMORY[0x1E4F14428], v29);

    uint64_t v31 = v47[0];
    v47[0] = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v30);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
    uint64_t v32 = v46[1];
    v46[1] = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v30);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
    uint64_t v33 = v46[0];
    v46[0] = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, v30);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
    uint64_t v34 = *((void *)&v45 + 1);
    *((void *)&v45 + 1) = 0;
    if (v34) {
      (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
    }
    uint64_t v35 = v45;
    *(void *)&long long v45 = 0;
    if (v35) {
      CFRelease(*(CFTypeRef *)(v35 + 8));
    }
    unint64_t v18 = (void *)MEMORY[0x1E4F14428];
  }
  else
  {
    id v15 = MEMORY[0x1E4F14428];
    uint64_t v16 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    int v17 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    *int v17 = MEMORY[0x1E4F14398];
    v17[1] = 50331650;
    _DWORD v17[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1})::{lambda(void *)#1}::__invoke;
    v17[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1})::descriptor;
    v17[4] = v16;
    long long v12 = _Block_copy(v17);

    unint64_t v18 = _Block_copy(v12);
    CFTypeRef v37 = (void *)MEMORY[0x1E4F14428];
    dispatch_async(MEMORY[0x1E4F14428], v18);
  }
}

void sub_1993353BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF *a17, CFTypeRef cf, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF::StringImpl *a23)
{
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1})::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 32));
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2}>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2})::{lambda(void const*)#1}::__invoke(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[9];
  a1[9] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  id v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[6];
  a1[6] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[5];
  a1[5] = 0;
  if (v7)
  {
    CFTypeRef v8 = *(const void **)(v7 + 8);
    CFRelease(v8);
  }
}

WTF::StringImpl *WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2}>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2})::{lambda(void *)#1}::__invoke(API::ContentRuleListStore *a1)
{
  uint64_t v2 = *((void *)a1 + 4);
  uint64_t v3 = API::ContentRuleListStore::defaultStore(a1);
  WebKit::WebExtensionContext::declarativeNetRequestContentRuleListFilePath((WTF::StringImpl *)&v15, v2);
  WTF::String::isolatedCopy();
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v4 = *((void *)a1 + 6);
  uint64_t v5 = (_DWORD *)*((void *)a1 + 7);
  *((void *)a1 + 6) = 0;
  if (v5) {
    *v5 += 2;
  }
  uint64_t v6 = (_DWORD *)*((void *)a1 + 8);
  if (v6) {
    *v6 += 2;
  }
  uint64_t v7 = (_DWORD *)*((void *)a1 + 9);
  if (v7) {
    *v7 += 2;
  }
  CFTypeRef v8 = (void *)WTF::fastMalloc((WTF *)0x38);
  *CFTypeRef v8 = &unk_1EE9FED38;
  v8[1] = v2;
  v8[2] = v2;
  v8[3] = v4;
  v8[4] = v5;
  v8[5] = v6;
  v8[6] = v7;
  uint64_t v13 = v8;
  API::ContentRuleListStore::lookupContentRuleListFile((uint64_t)v3, (uint64_t)&v15, (uint64_t)&v14, (uint64_t *)&v13);
  uint64_t v10 = (uint64_t)v13;
  uint64_t v13 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v14;
  char v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v15;
  id v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_199335974(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2}::operator()(void)::{lambda(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API>,WTF::DefaultRefDerefTraits<API>>,std::error_code)#1},void,WTF::DefaultRefDerefTraits<API>,std::__1>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FED38;
  uint64_t v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[3];
  a1[3] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[2];
  a1[2] = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2}::operator()(void)::{lambda(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API>,WTF::DefaultRefDerefTraits<API>>,std::error_code)#1},void,WTF::DefaultRefDerefTraits<API>,std::__1>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v2 = (WTF *)WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2}::operator()(void)::{lambda(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API>,WTF::DefaultRefDerefTraits<API>>,std::error_code)#1},void,WTF::DefaultRefDerefTraits<API>,std::__1>::~CallableWrapper(a1, a2);

  return WTF::fastFree(v2, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#2}::operator()(void)::{lambda(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API>,WTF::DefaultRefDerefTraits<API>>,std::error_code)#1},void,WTF::DefaultRefDerefTraits<API>,std::__1>::call(uint64_t *a1, CFTypeRef **a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(v4 + 72);
  if (!v5 || !*(void *)(v5 + 8))
  {
LABEL_15:
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a1 + 3);
    goto LABEL_33;
  }
  if (v3)
  {
    id v6 = a1[4] ? (id)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    id v7 = a1[5] ? (id)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    int v8 = [v6 isEqualToString:v7];

    if (v8)
    {
      uint64_t v9 = *(void **)(v4 + 72);
      if (*(unsigned char *)(v4 + 273))
      {
        if (v9)
        {
          uint64_t v10 = v9[1];
          if (v10) {
            uint64_t v9 = (void *)(v10 - 16);
          }
          else {
            uint64_t v9 = 0;
          }
        }
        uint64_t v11 = (WTF::StringImpl *)(v9 + 15);
      }
      else
      {
        if (v9)
        {
          uint64_t v22 = v9[1];
          if (v22) {
            uint64_t v9 = (void *)(v22 - 16);
          }
          else {
            uint64_t v9 = 0;
          }
        }
        uint64_t v11 = (WTF::StringImpl *)(v9 + 17);
      }
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)v11, &v37);
      uint64_t v23 = *(void **)v11;
      if (*(void *)v11)
      {
        uint64_t v24 = *((unsigned int *)v23 - 1);
        uint64_t v25 = &v23[v24];
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v24 = 0;
      }
      uint64_t v32 = v11;
      uint64_t v33 = v25;
      uint64_t v34 = v25;
      uint64_t v35 = v25;
      CFTypeRef v36 = &v23[v24];
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v32);
      uint64_t v26 = v38;
      if (v38 != v33)
      {
        unsigned int v27 = (WTF::StringImpl **)(v4 + 80);
        do
        {
          uint64_t v28 = *(void *)(*v26 + 8);
          if (v28) {
            uint64_t v29 = (WebKit::WebUserContentControllerProxy *)(v28 - 16);
          }
          else {
            uint64_t v29 = 0;
          }
          WebKit::WebUserContentControllerProxy::addContentRuleList(v29, (API::ContentRuleList *)v3, v27);
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v37);
          uint64_t v26 = v38;
        }
        while (v38 != v33);
      }
      goto LABEL_15;
    }
  }
  long long v12 = API::ContentRuleListStore::defaultStore((API::ContentRuleListStore *)a1);
  WebKit::WebExtensionContext::declarativeNetRequestContentRuleListFilePath((WTF::StringImpl *)&v37, v4);
  WTF::String::isolatedCopy();
  uint64_t v13 = (WTF::StringImpl *)a1[6];
  if (v13) {
    *(_DWORD *)v13 += 2;
  }
  uint64_t v31 = v13;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  uint64_t v14 = a1[3];
  a1[3] = 0;
  id v15 = (_DWORD *)a1[5];
  if (v15) {
    *v15 += 2;
  }
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v16 = &unk_1EE9FED60;
  v16[1] = v4;
  uint64_t v16[2] = v4;
  v16[3] = v14;
  v16[4] = v15;
  char v30 = v16;
  API::ContentRuleListStore::compileContentRuleListFile((uint64_t)v12, (uint64_t)&v37, (uint64_t)&v32, (WebCore::ContentExtensions *)&v31, (uint64_t *)&v30);
  uint64_t v18 = (uint64_t)v30;
  char v30 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  int v19 = v31;
  uint64_t v31 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v17);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  id v20 = v32;
  uint64_t v32 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v17);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t v21 = v37;
  CFTypeRef v37 = 0;
  if (!v21)
  {
LABEL_33:
    if (!v3) {
      return;
    }
    goto LABEL_34;
  }
  if (*(_DWORD *)v21 != 2)
  {
    *(_DWORD *)v21 -= 2;
    goto LABEL_33;
  }
  WTF::StringImpl::destroy(v21, v17);
  if (v3) {
LABEL_34:
  }
    CFRelease(v3[1]);
}

void sub_199335EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  CFRelease(*(CFTypeRef *)(v16 + 8));
  _Unwind_Resume(a1);
}

void *_ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit19WebExtensionContext33compileDeclarativeNetRequestRulesEP7NSArrayONS_17CompletionHandlerIFvbEEEEN3__0clEvENUlvE0_clEvENUlNS_6RefPtrIN3API15ContentRuleListENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEENSt3__110error_codeEE_clESJ_SL_EUlSJ_SL_E_vJSJ_SL_EED1Ev(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FED60;
  uint64_t v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit19WebExtensionContext33compileDeclarativeNetRequestRulesEP7NSArrayONS_17CompletionHandlerIFvbEEEEN3__0clEvENUlvE0_clEvENUlNS_6RefPtrIN3API15ContentRuleListENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEENSt3__110error_codeEE_clESJ_SL_EUlSJ_SL_E_vJSJ_SL_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FED60;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit19WebExtensionContext33compileDeclarativeNetRequestRulesEP7NSArrayONS_17CompletionHandlerIFvbEEEEN3__0clEvENUlvE0_clEvENUlNS_6RefPtrIN3API15ContentRuleListENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEENSt3__110error_codeEE_clESJ_SL_EUlSJ_SL_E_vJSJ_SL_EE4callESJ_SL_(void *a1, CFTypeRef **a2, uint64_t a3, const std::error_category *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)&v24.__val_ = a3;
  v24.__cat_ = a4;
  if (a3)
  {
    id v6 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      std::error_code::message(&v23, &v24);
      uint64_t v22 = (v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v23
          : (std::string *)v23.__r_.__value_.__r.__words[0];
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v22;
      _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, "Error compiling declarativeNetRequest rules: %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    uint64_t v7 = a1[1];
    uint64_t v8 = *(void *)(v7 + 72);
    if (v8 && *(void *)(v8 + 8))
    {
      uint64_t v9 = WTF::RetainPtr<__IOHIDDevice *>::get();
      if (a1[4]) {
        uint64_t v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v10 = &stru_1EEA10550;
      }
      [v9 setObject:v10 forKey:@"LastLoadedDeclarativeNetRequestHash"];

      WebKit::WebExtensionContext::writeStateToStorage((WebKit::WebExtensionContext *)v7);
      uint64_t v11 = *(void *)(v7 + 72);
      if (*(unsigned char *)(v7 + 273))
      {
        if (v11)
        {
          uint64_t v12 = *(void *)(v11 + 8);
          if (v12) {
            uint64_t v11 = v12 - 16;
          }
          else {
            uint64_t v11 = 0;
          }
        }
        uint64_t v13 = (void **)(v11 + 120);
      }
      else
      {
        if (v11)
        {
          uint64_t v14 = *(void *)(v11 + 8);
          if (v14) {
            uint64_t v11 = v14 - 16;
          }
          else {
            uint64_t v11 = 0;
          }
        }
        uint64_t v13 = (void **)(v11 + 136);
      }
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v13, &v23);
      id v15 = *v13;
      if (*v13)
      {
        uint64_t v16 = *((unsigned int *)v15 - 1);
        int v17 = &v15[v16];
      }
      else
      {
        int v17 = 0;
        uint64_t v16 = 0;
      }
      *(void *)&long long buf = v13;
      *((void *)&buf + 1) = v17;
      uint64_t v26 = v17;
      unsigned int v27 = v17;
      uint64_t v28 = &v15[v16];
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&buf);
      std::string::size_type size = v23.__r_.__value_.__l.__size_;
      if (v23.__r_.__value_.__l.__size_ != *((void *)&buf + 1))
      {
        int v19 = (WTF::StringImpl **)(v7 + 80);
        do
        {
          uint64_t v20 = *(void *)(*(void *)size + 8);
          if (v20) {
            uint64_t v21 = (WebKit::WebUserContentControllerProxy *)(v20 - 16);
          }
          else {
            uint64_t v21 = 0;
          }
          WebKit::WebUserContentControllerProxy::addContentRuleList(v21, (API::ContentRuleList *)v5, v19);
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v23);
          std::string::size_type size = v23.__r_.__value_.__l.__size_;
        }
        while (v23.__r_.__value_.__l.__size_ != *((void *)&buf + 1));
      }
    }
  }
  WTF::CompletionHandler<void ()(BOOL)>::operator()(a1 + 3);
  if (v5) {
    CFRelease(v5[1]);
  }
}

void sub_1993363A8(_Unwind_Exception *a1)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(a1);
}

void *WTF::RetainPtr<NSMutableArray>::RetainPtr(void *a1, void *a2)
{
  *a2 = 0;
  uint64_t v3 = std::to_address[abi:sn180100]<char const>();

  *a1 = v3;
  return a1;
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void const*)#1}::__invoke(void *a1)
{
  uint64_t v2 = (const void *)a1[16];
  a1[16] = 0;
  if (v2) {
    CFRelease(v2);
  }
  WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0(a1 + 6);
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void *,NSArray *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if ([v3 count])
  {
    id v31 = 0;
    uint64_t v6 = WebKit::encodeJSONData(v3, 1, (uint64_t)&v31);
    uint64_t v7 = (WebKit *)v31;
    std::string v23 = (void *)v6;
    if (v7)
    {
      uint64_t v8 = (id)qword_1EB357DF8;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if (*(void *)(v4 + 120)) {
          uint64_t v9 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v9 = &stru_1EEA10550;
        }
        uint64_t v10 = v9;
        uint64_t v12 = WebKit::privacyPreservingDescription(v7, v11);
        *(_DWORD *)long long buf = 138478083;
        uint64_t v33 = v10;
        __int16 v34 = 2114;
        uint64_t v35 = v12;
        _os_log_error_impl(&dword_1985F2000, v8, OS_LOG_TYPE_ERROR, "Unable to serialize session declarativeNetRequest rules for extension with identifier %{private}@ with error: %{public}@", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v8 = WTF::RetainPtr<NSSet>::get((id *)(a1 + 128));
      [v8 addObject:v6];
    }

    uint64_t v30 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v14 = v3;
    uint64_t v15 = [v14 countByEnumeratingWithState:&v26 objects:buf count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v27 != v16) {
            objc_enumerationMutation(v14);
          }
          uint64_t v18 = WebKit::objectForKey<NSNumber>(*(void **)(*((void *)&v26 + 1) + 8 * i), @"id");
          [v18 doubleValue];
          uint64_t v25 = v19;
          WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::add(v24, &v30, &v25);
        }
        uint64_t v15 = [v14 countByEnumeratingWithState:&v26 objects:buf count:16];
      }
      while (v15);
      uint64_t v20 = v30;
    }
    else
    {
      uint64_t v20 = 0;
    }

    uint64_t v22 = *(void *)(v4 + 680);
    *(void *)(v4 + 680) = v20;
    if (v22) {
      WTF::fastFree((WTF *)(v22 - 16), v21);
    }
    WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(a1 + 48);
  }
  else
  {
    uint64_t v13 = *(void *)(v4 + 680);
    if (v13)
    {
      *(void *)(v4 + 680) = 0;
      WTF::fastFree((WTF *)(v13 - 16), v5);
    }
    WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(a1 + 48);
  }
}

void sub_199336724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(uint64_t a1)
{
  uint64_t v2 = *(WebKit::WebExtensionContext **)a1;
  id v3 = WebKit::WebExtensionContext::declarativeNetRequestDynamicRulesStore(*(WebKit::WebExtensionContext **)a1);
  std::string v23 = v2;
  CFRetain(*((CFTypeRef *)v2 + 1));
  std::error_code v24 = v2;
  WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_3::$_3((uint64_t)&v25, a1 + 16);
  WTF::RetainPtr<NSSet>::get((id *)(a1 + 72));
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v5 = v4;
  CFTypeRef v31 = v4;
  if (v4) {
    CFRetain(v4);
  }

  WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1}::NSString(&v32, &v23);
  uint64_t v6 = malloc_type_malloc(0x70uLL, 0x10E0040268650ECuLL);
  void *v6 = MEMORY[0x1E4F14398];
  v6[1] = 50331650;
  v6[2] = WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1}>(WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1})::{lambda(void *,NSArray *,NSString *)#1}::__invoke;
  v6[3] = &WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1}>(WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1})::descriptor;
  WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1}::NSString(v6 + 4, &v32);
  uint64_t v7 = _Block_copy(v6);

  CFTypeRef v8 = cf;
  CFTypeRef cf = 0;
  if (v8) {
    CFRelease(v8);
  }
  CFTypeRef v9 = v38;
  CFTypeRef v38 = 0;
  if (v9) {
    CFRelease(v9);
  }
  CFTypeRef v10 = v37;
  CFTypeRef v37 = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = v36;
  uint64_t v36 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = v35;
  uint64_t v35 = 0;
  if (v12) {
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  uint64_t v13 = v34;
  uint64_t v34 = 0;
  if (v13) {
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  uint64_t v14 = v33;
  uint64_t v33 = 0;
  if (v14) {
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
  uint64_t v15 = _Block_copy(v7);
  objc_msgSend(v3, "getRulesWithCompletionHandler:", v15, v23);

  CFTypeRef v16 = v31;
  CFTypeRef v31 = 0;
  if (v16) {
    CFRelease(v16);
  }
  CFTypeRef v17 = v30;
  CFTypeRef v30 = 0;
  if (v17) {
    CFRelease(v17);
  }
  CFTypeRef v18 = v29;
  CFTypeRef v29 = 0;
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = v28;
  uint64_t v28 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = v27;
  uint64_t v27 = 0;
  if (v20) {
    CFRelease(*(CFTypeRef *)(v20 + 8));
  }
  uint64_t v21 = v26;
  uint64_t v26 = 0;
  if (v21) {
    CFRelease(*(CFTypeRef *)(v21 + 8));
  }
  uint64_t v22 = v24;
  std::error_code v24 = 0;
  if (v22) {
    CFRelease(*((CFTypeRef *)v22 + 1));
  }
}

void sub_199336A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef a16, CFTypeRef cf, CFTypeRef a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,CFTypeRef a26,CFTypeRef a27,CFTypeRef a28)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a16) {
    CFRelease(a16);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (a14) {
    CFRelease(*(CFTypeRef *)(a14 + 8));
  }
  if (a12) {
    CFRelease(*(CFTypeRef *)(a12 + 8));
  }
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }

  _Unwind_Resume(a1);
}

void *WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1}::NSString(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  a2[1] = 0;
  a1[1] = v4;
  WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_3::$_3((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  WTF::RetainPtr<NSMutableArray>::RetainPtr(a1 + 9, a2 + 9);
  return a1;
}

void sub_199336C2C(_Unwind_Exception *exception_object)
{
  id v3 = (const void *)v1[8];
  v1[8] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)v1[7];
  v1[7] = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = v1[6];
  v1[6] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = v1[5];
  v1[5] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  uint64_t v7 = v1[3];
  v1[3] = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  uint64_t v8 = v1[1];
  v1[1] = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1}>(WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1})::{lambda(void const*)#1}::__invoke(void *a1)
{
  uint64_t v2 = (const void *)a1[13];
  a1[13] = 0;
  if (v2) {
    CFRelease(v2);
  }
  id v3 = (const void *)a1[12];
  a1[12] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[11];
  a1[11] = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = a1[10];
  a1[10] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[9];
  a1[9] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  uint64_t v7 = a1[7];
  a1[7] = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  uint64_t v8 = a1[5];
  a1[5] = 0;
  if (v8)
  {
    CFTypeRef v9 = *(const void **)(v8 + 8);
    CFRelease(v9);
  }
}

void WTF::BlockPtrArc<void ()(NSArray *,NSString *)>::fromCallable<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1}>(WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(NSArray *,NSString *)#1})::{lambda(void *,NSArray *,NSString *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if ([v3 count])
  {
    id v31 = 0;
    uint64_t v6 = WebKit::encodeJSONData(v3, 1, (uint64_t)&v31);
    uint64_t v7 = (WebKit *)v31;
    std::string v23 = (void *)v6;
    if (v7)
    {
      uint64_t v8 = (id)qword_1EB357DF8;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if (*(void *)(v4 + 120)) {
          CFTypeRef v9 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          CFTypeRef v9 = &stru_1EEA10550;
        }
        CFTypeRef v10 = v9;
        uint64_t v12 = WebKit::privacyPreservingDescription(v7, v11);
        *(_DWORD *)long long buf = 138478083;
        uint64_t v33 = v10;
        __int16 v34 = 2114;
        uint64_t v35 = v12;
        _os_log_error_impl(&dword_1985F2000, v8, OS_LOG_TYPE_ERROR, "Unable to serialize dynamic declarativeNetRequest rules for extension with identifier %{private}@ with error: %{public}@", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v8 = WTF::RetainPtr<NSSet>::get((id *)(a1 + 104));
      [v8 addObject:v6];
    }

    uint64_t v30 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v14 = v3;
    uint64_t v15 = [v14 countByEnumeratingWithState:&v26 objects:buf count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v27 != v16) {
            objc_enumerationMutation(v14);
          }
          CFTypeRef v18 = WebKit::objectForKey<NSNumber>(*(void **)(*((void *)&v26 + 1) + 8 * i), @"id");
          [v18 doubleValue];
          uint64_t v25 = v19;
          WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::add(v24, &v30, &v25);
        }
        uint64_t v15 = [v14 countByEnumeratingWithState:&v26 objects:buf count:16];
      }
      while (v15);
      uint64_t v20 = v30;
    }
    else
    {
      uint64_t v20 = 0;
    }

    uint64_t v22 = *(void *)(v4 + 688);
    *(void *)(v4 + 688) = v20;
    if (v22) {
      WTF::fastFree((WTF *)(v22 - 16), v21);
    }
    WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_3::operator()((id *)(a1 + 48));
  }
  else
  {
    uint64_t v13 = *(void *)(v4 + 688);
    if (v13)
    {
      *(void *)(v4 + 688) = 0;
      WTF::fastFree((WTF *)(v13 - 16), v5);
    }
    WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_3::operator()((id *)(a1 + 48));
  }
}

void sub_199337038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_3::operator()(id *a1)
{
  uint64_t v2 = (const void **)*a1;
  uint64_t v3 = *((void *)*a1 + 8);
  WebKit::WebExtension::populateDeclarativeNetRequestPropertiesIfNeeded((WebKit::WebExtension *)v3);
  unsigned int v5 = *(_DWORD *)(v3 + 84);
  if (v5)
  {
    uint64_t v6 = *(void *)(v3 + 72);
    uint64_t v7 = v6 + 24 * v5;
    do
    {
      uint64_t v8 = v2[84];
      if (v8)
      {
        int v9 = *((_DWORD *)v8 - 2);
        unsigned int v10 = *(_DWORD *)(*(void *)v6 + 16);
        if (v10 >= 0x100) {
          unsigned int v11 = v10 >> 8;
        }
        else {
          unsigned int v11 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v6);
        }
        for (int i = 0; ; v11 = i + v13)
        {
          int v13 = v11 & v9;
          id v14 = (WTF *)*((void *)v8 + (v11 & v9));
          if (v14 != (WTF *)-1)
          {
            if (!v14) {
              goto LABEL_4;
            }
            if (WTF::equal(v14, *(const WTF::StringImpl **)v6, v4)) {
              break;
            }
          }
          ++i;
        }
        uint64_t v15 = (uint64_t)v2[8];
        if (*(void *)(v6 + 16)) {
          uint64_t v16 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v16 = &stru_1EEA10550;
        }
        id v48 = 0;
        CFTypeRef v17 = WebKit::WebExtension::resourceDataForPath(v15, v16, &v48, 0, 0);
        CFTypeRef v18 = (NSError *)v48;

        if (v17)
        {
          uint64_t v19 = WTF::RetainPtr<NSSet>::get(a1 + 6);
          [v19 addObject:v17];
        }
        else
        {
          WebKit::WebExtensionContext::recordError(v2, v18);
        }
      }
LABEL_4:
      v6 += 24;
    }
    while (v6 != v7);
  }
  unint64_t v20 = (unint64_t)a1[2];
  uint64_t v21 = WTF::RetainPtr<NSSet>::get(a1 + 5);
  uint64_t v22 = [v21 count];

  if (v22)
  {
    WTF::RetainPtr<NSSet>::get(a1 + 5);
    id v23 = (id)objc_claimAutoreleasedReturnValue();
    std::error_code v24 = dispatch_get_global_queue(2, 0);
    v49.i64[0] = v20;
    CFRetain(*(CFTypeRef *)(v20 + 8));
    v49.i64[1] = v20;
    id v25 = v23;
    long long v26 = v25;
    CFTypeRef v50 = v25;
    if (v25)
    {
      CFRetain(v25);
      int64x2_t v27 = v49;
    }
    else
    {
      int64x2_t v27 = vdupq_n_s64(v20);
    }
    int64x2_t v47 = v27;

    id v34 = a1[4];
    a1[4] = 0;
    id v51 = v34;
    v49.i64[1] = 0;
    *(int64x2_t *)unsigned int v52 = v47;
    WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&cf, (uint64_t *)&v50);
    id v35 = v51;
    id v51 = 0;
    id v54 = v35;
    uint64_t v36 = malloc_type_malloc(0x40uLL, 0x10E00402817FE4AuLL);
    *uint64_t v36 = MEMORY[0x1E4F14398];
    v36[1] = 50331650;
    v36[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *)#1}::__invoke;
    v36[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebExtensionContext::compileDeclarativeNetRequestRules(NSArray *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
    long long v37 = *(_OWORD *)v52;
    v52[1] = 0;
    *((_OWORD *)v36 + 2) = v37;
    WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(v36 + 6, (uint64_t *)&cf);
    id v38 = v54;
    id v54 = 0;
    v36[7] = v38;
    CFTypeRef v39 = _Block_copy(v36);

    id v40 = v54;
    id v54 = 0;
    if (v40) {
      (*(void (**)(id))(*(void *)v40 + 8))(v40);
    }
    CFTypeRef v41 = cf;
    CFTypeRef cf = 0;
    if (v41) {
      CFRelease(v41);
    }
    uint64_t v42 = v52[1];
    v52[1] = 0;
    if (v42) {
      CFRelease(*((CFTypeRef *)v42 + 1));
    }
    uint64_t v43 = _Block_copy(v39);
    dispatch_async(v24, v43);

    id v44 = v51;
    id v51 = 0;
    if (v44) {
      (*(void (**)(id))(*(void *)v44 + 8))(v44);
    }
    CFTypeRef v45 = v50;
    CFTypeRef v50 = 0;
    if (v45) {
      CFRelease(v45);
    }
    uint64_t v46 = v49.i64[1];
    v49.i64[1] = 0;
    if (v46) {
      CFRelease(*(CFTypeRef *)(v46 + 8));
    }
  }
  else
  {
    long long v28 = (API::ContentRuleListStore *)WebKit::WebExtensionContext::removeDeclarativeNetRequestRules((void *)v20);
    long long v29 = API::ContentRuleListStore::defaultStore(v28);
    WebKit::WebExtensionContext::declarativeNetRequestContentRuleListFilePath((WTF::StringImpl *)v52, v20);
    id v30 = a1[4];
    a1[4] = 0;
    id v31 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v31 = &unk_1EE9FEDC8;
    v31[1] = v30;
    v49.i64[0] = (uint64_t)v31;
    API::ContentRuleListStore::removeContentRuleListFile((uint64_t)v29, (uint64_t)v52, v49.i64);
    if (v49.i64[0]) {
      (*(void (**)(uint64_t))(*(void *)v49.i64[0] + 8))(v49.i64[0]);
    }
    uint64_t v33 = v52[0];
    v52[0] = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, v32);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
}

void sub_199337540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, CFTypeRef cf, uint64_t a20)
{
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_2::operator()(void)::{lambda(std::error_code)#1},void,std::__1>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FEDC8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_2::operator()(void)::{lambda(std::error_code)#1},void,std::__1>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FEDC8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::loadDeclarativeNetRequestRules(WTF::CompletionHandler<void ()(BOOL)> &&)::$_2::operator()(void)::{lambda(std::error_code)#1},void,std::__1>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

double *WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::add(double *result, uint64_t *a2, uint64_t *a3)
{
  unsigned int v5 = result;
  uint64_t v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  unint64_t v9 = *a3 + ~(*a3 << 32);
  unint64_t v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  unsigned int v12 = v8 & ((v11 >> 31) ^ v11);
  int v13 = (double *)(v6 + 8 * v12);
  double v14 = *v13;
  uint64_t v15 = *a3;
  if (*v13 != INFINITY)
  {
    CFTypeRef v18 = 0;
    int v19 = 1;
    do
    {
      if (*a3 == *(void *)&v14)
      {
        if (v7) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = *(unsigned int *)(v6 - 4);
        }
        char v26 = 0;
        uint64_t v25 = v6 + 8 * v24;
        goto LABEL_26;
      }
      if (v14 == -INFINITY) {
        CFTypeRef v18 = v13;
      }
      unsigned int v12 = (v12 + v19) & v8;
      int v13 = (double *)(v6 + 8 * v12);
      double v14 = *v13;
      ++v19;
    }
    while (*v13 != INFINITY);
    if (v18)
    {
      double *v18 = INFINITY;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v15 = *a3;
      int v13 = v18;
    }
  }
  *(void *)int v13 = v15;
  uint64_t v16 = *a2;
  if (*a2) {
    int v17 = *(_DWORD *)(v16 - 12) + 1;
  }
  else {
    int v17 = 1;
  }
  *(_DWORD *)(v16 - 12) = v17;
  uint64_t v20 = *a2;
  if (*a2) {
    int v21 = *(_DWORD *)(v20 - 12);
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
  unint64_t v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
    {
LABEL_20:
      uint64_t result = WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::expand(a2, v13);
      int v13 = result;
      uint64_t v20 = *a2;
      if (*a2) {
        unint64_t v23 = *(unsigned int *)(v20 - 4);
      }
      else {
        unint64_t v23 = 0;
      }
    }
  }
  else if (3 * v23 <= 4 * v22)
  {
    goto LABEL_20;
  }
  uint64_t v25 = v20 + 8 * v23;
  char v26 = 1;
LABEL_26:
  *(void *)unsigned int v5 = v13;
  *((void *)v5 + 1) = v25;
  *((unsigned char *)v5 + 16) = v26;
  return result;
}

double *WTF::HashTable<double,double,WTF::IdentityExtractor,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<double>>::expand(uint64_t *a1, double *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastMalloc((WTF *)(8 * v7 + 16));
  uint64_t v10 = v8;
  uint64_t v11 = v8 + 16;
  if (v7) {
    memset_pattern16((void *)(v8 + 16), &unk_1994F8E90, 8 * v7);
  }
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v12 = 0;
    int v13 = 0;
    do
    {
      double v14 = (double *)(v4 + 8 * v12);
      double v15 = *v14;
      if (fabs(*v14) != INFINITY)
      {
        uint64_t v16 = *a1;
        if (*a1) {
          int v17 = *(_DWORD *)(v16 - 8);
        }
        else {
          int v17 = 0;
        }
        uint64_t v18 = (~(*(void *)&v15 << 32) + *(void *)&v15) ^ ((~(*(void *)&v15 << 32) + *(void *)&v15) >> 22);
        unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
        unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
        int v22 = 1;
        do
        {
          unsigned int v23 = v21;
          double v24 = *(double *)(v16 + 8 * v21);
          unsigned int v21 = (v21 + v22++) & v17;
        }
        while (v24 != INFINITY);
        uint64_t v25 = (double *)(v16 + 8 * v23);
        double *v25 = v15;
        if (v14 == a2) {
          int v13 = v25;
        }
      }
      ++v12;
    }
    while (v12 != v5);
  }
  else
  {
    int v13 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v13;
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::load(WebKit::WebExtensionController &,WTF::String,NSError * {__autoreleasing}*)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FEDF0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::load(WebKit::WebExtensionController &,WTF::String,NSError * {__autoreleasing}*)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FEDF0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::load(WebKit::WebExtensionController &,WTF::String,NSError * {__autoreleasing}*)::$_0,void>::call(uint64_t result)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(v1 + 72);
  if (v2 && *(void *)(v2 + 8))
  {
    if (WebKit::WebExtension::hasBackgroundContent(*(id **)(v1 + 64)))
    {
      *(unsigned char *)(v1 + 385) = 1;
      if (WebKit::WebExtension::backgroundContentIsPersistent(*(id **)(v1 + 64))) {
        goto LABEL_57;
      }
      uint64_t v3 = *(void *)(v1 + 40);
      if (v3 && *(_DWORD *)(v3 + 4) && !WebKit::WebExtension::backgroundContentIsPersistent(*(id **)(v1 + 64)))
      {
        int v5 = (uint64_t *)(v1 + 296);
        uint64_t v6 = *(void *)(v1 + 296);
        if (v6)
        {
          *int v5 = 0;
          WTF::fastFree((WTF *)(v6 - 16), v4);
        }
        unsigned int v7 = WTF::RetainPtr<__IOHIDDevice *>::get();
        WTF::RetainPtr<NSDictionary>::RetainPtr(cf, v7);

        uint64_t v8 = WebKit::objectForKey<NSNumber>((id *)cf, @"BackgroundContentEventListenersVersion");
        uint64_t v9 = [v8 unsignedLongValue];

        uint64_t v10 = *(const void **)cf;
        *(void *)CFTypeRef cf = 0;
        if (v10) {
          CFRelease(v10);
        }
        if (v9 == 3)
        {
          uint64_t v11 = WTF::RetainPtr<__IOHIDDevice *>::get();
          WTF::RetainPtr<NSDictionary>::RetainPtr(cf, v11);

          uint64_t v12 = WebKit::objectForKey<NSData>((id *)cf, @"BackgroundContentEventListeners");
          int v13 = *(const void **)cf;
          *(void *)CFTypeRef cf = 0;
          if (v13) {
            CFRelease(v13);
          }
          double v14 = (void *)MEMORY[0x1E4F28DC0];
          double v15 = (void *)MEMORY[0x1E4F1CAD0];
          CFTypeRef v50 = (void *)v12;
          uint64_t v16 = objc_opt_class();
          int v17 = objc_msgSend(v15, "setWithObjects:", v16, objc_opt_class(), 0);
          uint64_t v18 = [v14 _strictlyUnarchivedObjectOfClasses:v17 fromData:v12 error:0];

          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          id v19 = v18;
          uint64_t v20 = [v19 countByEnumeratingWithState:&v51 objects:cf count:16];
          if (v20)
          {
            uint64_t v21 = *(void *)v52;
            do
            {
              uint64_t v22 = 0;
              do
              {
                if (*(void *)v52 != v21) {
                  objc_enumerationMutation(v19);
                }
                unsigned int v23 = *(void **)(*((void *)&v51 + 1) + 8 * v22);
                unsigned __int8 v24 = [v23 unsignedIntValue];
                int v25 = [v19 countForObject:v23];
                uint64_t v26 = *v5;
                if (*v5
                  || (WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::expand((uint64_t *)(v1 + 296), 0), (uint64_t v26 = *v5) != 0))
                {
                  int v27 = *(_DWORD *)(v26 - 8);
                }
                else
                {
                  int v27 = 0;
                }
                unsigned int v28 = ~(v24 << 15) + v24;
                unsigned int v29 = (9 * (v28 ^ (v28 >> 10))) ^ ((9 * (v28 ^ (v28 >> 10))) >> 6);
                unsigned int v30 = v27 & ((v29 + ~(v29 << 11)) ^ ((v29 + ~(v29 << 11)) >> 16));
                id v31 = (void *)(v26 + 8 * v30);
                int v32 = *(unsigned __int8 *)v31;
                if (v32 == 255)
                {
LABEL_31:
                  *(unsigned char *)id v31 = v24;
                  *((_DWORD *)v31 + 1) = 0;
                  uint64_t v35 = *v5;
                  if (*v5) {
                    int v36 = *(_DWORD *)(v35 - 12) + 1;
                  }
                  else {
                    int v36 = 1;
                  }
                  *(_DWORD *)(v35 - 12) = v36;
                  uint64_t v37 = *v5;
                  if (*v5) {
                    int v38 = *(_DWORD *)(v37 - 12);
                  }
                  else {
                    int v38 = 0;
                  }
                  uint64_t v39 = (*(_DWORD *)(v37 - 16) + v38);
                  unint64_t v40 = *(unsigned int *)(v37 - 4);
                  if (v40 <= 0x400)
                  {
                    if (3 * v40 > 4 * v39) {
                      goto LABEL_40;
                    }
LABEL_39:
                    id v31 = WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::expand((uint64_t *)(v1 + 296), (unsigned __int8 *)v31);
                    goto LABEL_40;
                  }
                  if (v40 <= 2 * v39) {
                    goto LABEL_39;
                  }
                }
                else
                {
                  uint64_t v33 = 0;
                  int v34 = 1;
                  while (v32 != v24)
                  {
                    if (v32 == 254) {
                      uint64_t v33 = v31;
                    }
                    unsigned int v30 = (v30 + v34) & v27;
                    id v31 = (void *)(v26 + 8 * v30);
                    int v32 = *(unsigned __int8 *)v31;
                    ++v34;
                    if (v32 == 255)
                    {
                      if (v33)
                      {
                        *(unsigned char *)uint64_t v33 = -1;
                        *((_DWORD *)v33 + 1) = 0;
                        --*(_DWORD *)(*v5 - 16);
                        id v31 = v33;
                      }
                      goto LABEL_31;
                    }
                  }
                }
LABEL_40:
                *((_DWORD *)v31 + 1) += v25;
                ++v22;
              }
              while (v22 != v20);
              uint64_t v41 = [v19 countByEnumeratingWithState:&v51 objects:cf count:16];
              uint64_t v20 = v41;
            }
            while (v41);
          }
        }
        else
        {
          uint64_t v42 = qword_1EB357DF8;
          if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)CFTypeRef cf = 134349312;
            *(void *)&cf[4] = v9;
            __int16 v56 = 2050;
            uint64_t v57 = 3;
            _os_log_debug_impl(&dword_1985F2000, v42, OS_LOG_TYPE_DEBUG, "Background listener version mismatch %{public}zu != %{public}zu", cf, 0x16u);
          }
          uint64_t v43 = WTF::RetainPtr<__IOHIDDevice *>::get();
          [v43 removeObjectForKey:@"BackgroundContentEventListeners"];

          id v44 = WTF::RetainPtr<__IOHIDDevice *>::get();
          [v44 removeObjectForKey:@"BackgroundContentEventListenersVersion"];

          WebKit::WebExtensionContext::writeStateToStorage((WebKit::WebExtensionContext *)v1);
        }
      }
      BOOL v45 = *(unsigned char *)(v1 + 312) || *(unsigned char *)(v1 + 313) != 0;
      uint64_t v46 = *(void *)(v1 + 296);
      if (!v46) {
        goto LABEL_57;
      }
      if (!*(_DWORD *)(v46 - 12)) {
        BOOL v45 = 1;
      }
      if (v45) {
LABEL_57:
      }
        WebKit::WebExtensionContext::loadBackgroundWebView((WebKit::WebExtensionContext *)v1);
    }
    WebKit::WebExtensionContext::loadRegisteredContentScripts((CFTypeRef *)v1);
    WebKit::WebExtensionContext::loadDeclarativeNetRequestRulesetStateFromStorage((WebKit::WebExtensionContext *)v1, v47);
    id v48 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v48 = &unk_1EE9FEE18;
    *(void *)CFTypeRef cf = v48;
    WebKit::WebExtensionContext::loadDeclarativeNetRequestRules((CFTypeRef *)v1, (uint64_t *)cf);
    uint64_t v49 = *(void *)cf;
    *(void *)CFTypeRef cf = 0;
    if (v49) {
      (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
    }
    return WebKit::WebExtensionContext::addInjectedContent((WebKit::WebExtensionContext *)v1);
  }
  return result;
}

void sub_199338150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,CFTypeRef cf)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0x38E38E4)
  {
    int v5 = 72 * v3;
    uint64_t v6 = (WebKit::WebExtension::InjectedContentData *)WTF::fastMalloc((WTF *)(72 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
    *(void *)uint64_t v2 = v6;
    uint64_t v7 = *(unsigned int *)(a2 + 12);
    if (v7)
    {
      uint64_t v8 = *(const WebKit::WebExtension::InjectedContentData **)a2;
      uint64_t v9 = 72 * v7;
      do
      {
        uint64_t v6 = (WebKit::WebExtension::InjectedContentData *)((char *)WebKit::WebExtension::InjectedContentData::InjectedContentData(v6, v8)+ 72);
        uint64_t v8 = (const WebKit::WebExtension::InjectedContentData *)((char *)v8 + 72);
        v9 -= 72;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_1993382E4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtension::InjectedContentData const&>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (const WebKit::WebExtension::InjectedContentData *)WTF::Vector<WebKit::WebExtension::InjectedContentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebKit::WebExtension::InjectedContentData::InjectedContentData((WebKit::WebExtension::InjectedContentData *)(*(void *)a1 + 72 * *(unsigned int *)(a1 + 12)), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::remove(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  *a2 = -1;
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v5 = *a1;
  if (*a1) {
    int v6 = *(_DWORD *)(v5 - 12) - 1;
  }
  else {
    int v6 = -1;
  }
  *(_DWORD *)(v5 - 12) = v6;
  uint64_t v7 = *a1;
  if (*a1)
  {
    unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
    unsigned int v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
    {
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(a1, v9 >> 1, 0);
    }
  }
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    int v2 = *(_DWORD *)(result - 8);
    unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
    for (int i = 1; ; ++i)
    {
      uint64_t v8 = v6;
      uint64_t v9 = *(void *)(result + 8 * v6);
      if (v9 != -1)
      {
        if (!v9)
        {
          result += 8 * *(unsigned int *)(result - 4);
          return result;
        }
        if (v9 == a2) {
          break;
        }
      }
      unsigned int v6 = (v8 + i) & v2;
    }
    result += 8 * v8;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::permissionsDidChange(NSString *,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::$_1,void,WebKit::WebPageProxy &,BOOL &>::call(uint64_t a1, uint64_t a2)
{
  return WebKit::WebPreferences::setJavaScriptCanAccessClipboard(*(WebKit::WebPreferences **)(a2 + 272), *(const BOOL **)(a1 + 8));
}

void *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  int v13 = 0;
  if (v7)
  {
    uint64_t v14 = v7;
    double v15 = (uint64_t *)v6;
    do
    {
      if (*v15 != -1)
      {
        if (*v15)
        {
          uint64_t v16 = (void *)WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::lookupForReinsert(a1, v15);
          uint64_t v17 = *v16;
          void *v16 = 0;
          if (v17) {
            CFRelease(*(CFTypeRef *)(v17 + 8));
          }
          uint64_t v18 = *v15;
          uint64_t *v15 = 0;
          void *v16 = v18;
          v16[1] = v15[1];
          uint64_t v19 = *v15;
          uint64_t *v15 = 0;
          if (v19) {
            CFRelease(*(CFTypeRef *)(v19 + 8));
          }
          if (v15 == a3) {
            int v13 = v16;
          }
        }
        else
        {
          uint64_t *v15 = 0;
        }
      }
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::shrinkToBestSize(uint64_t *a1)
{
  if (*a1) {
    unsigned int v2 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v2 = 0;
  }
  unsigned int v3 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(v2);
  if (v3 <= 8) {
    unsigned int v4 = 8;
  }
  else {
    unsigned int v4 = v3;
  }

  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v4, 0);
}

void *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::shrinkToBestSize(uint64_t *a1)
{
  if (*a1) {
    unsigned int v2 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v2 = 0;
  }
  unsigned int v3 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(v2);
  if (v3 <= 8) {
    unsigned int v4 = 8;
  }
  else {
    unsigned int v4 = v3;
  }

  return WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(a1, v4, 0);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9FEE68;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (uint64_t *)a1[3];
  if (v4) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FEE68;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (uint64_t *)*((void *)this + 3);
  if (v4) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissionMatchPatterns(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::call(uint64_t a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v19 = v5;
  unsigned int v7 = (WebKit *)v6;
  uint64_t v8 = *(void *)(a1 + 8);
  --*(void *)(v8 + 264);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Object returned by webExtensionController:promptForPermissionMatchPatterns:inTab:forExtensionContext:completionHandler: is not a set"];
  }
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Object returned by webExtensionController:promptForPermissionMatchPatterns:inTab:forExtensionContext:completionHandler: is not a date"];
    }
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v9 = v19;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v22;
    uint64_t v18 = *MEMORY[0x1E4F1C3B8];
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v22 != v11) {
          objc_enumerationMutation(v9);
        }
        int v13 = *(void **)(*((void *)&v21 + 1) + 8 * v12);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          [MEMORY[0x1E4F1CA00] raise:v18 format:@"Object returned in set by webExtensionController:promptForPermissionMatchPatterns:inTab:forExtensionContext:completionHandler: is not a WKWebExtensionMatchPattern"];
        }
        int v25 = (void *)[v13 _webExtensionMatchPattern];
        if ((WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>,WebKit::WebExtensionMatchPattern const*>((uint64_t *)(a1 + 24), &v25) & 1) == 0)[MEMORY[0x1E4F1CA00] raise:v18 format:@"Set returned by webExtensionController:promptForPermissionMatchPatterns:inTab:forExtensionContext:completionHandler: doesn't contain the requested match patterns"]; {
        ++v12;
        }
      }
      while (v10 != v12);
      uint64_t v10 = [v9 countByEnumeratingWithState:&v21 objects:v26 count:16];
    }
    while (v10);
  }

  WebKit::toPatterns((WebKit *)v9, (uint64_t *)&v25);
  double v15 = v7;
  if (!v7)
  {
    double v15 = [MEMORY[0x1E4F1C9C8] distantFuture];
  }
  double v17 = WebKit::toImpl(v15, v14);
  if (!v7) {

  }
  if (*(unsigned char *)(a1 + 32))
  {
    if (v25)
    {
      if (*((_DWORD *)v25 - 3))
      {
        WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable((uint64_t *)&v20, &v25);
        WebKit::WebExtensionContext::grantPermissionMatchPatterns((double *)v8, &v20, 1, v17);
        if (v20) {
          WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v20, v16);
        }
      }
    }
  }
  if (*(void *)(a1 + 40)) {
    WTF::CompletionHandler<void ()(WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits> &,WTF::WallTime)>::operator()((uint64_t *)(a1 + 40));
  }
  if (v25) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v25, v16);
  }
}

void sub_199338B18(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22)
{
  if (a12) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a12, a2);
  }
  if (a22) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a22, a2);
  }

  _Unwind_Resume(a1);
}

_DWORD *WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(NSSet *,NSDate *)>>::deref(_DWORD *result)
{
  uint64_t v1 = (void **)result;
  if (*result == 1)
  {
    unsigned int v2 = (uint64_t *)(result + 2);
    if (v1[1]) {
      WTF::CompletionHandler<void ()(NSSet *,NSDate *)>::operator()(v2, v1[2], v1[3]);
    }

    unsigned int v4 = v1[1];
    v1[1] = 0;
    if (v4) {
      (*(void (**)(void *))(*(void *)v4 + 8))(v4);
    }
    return (_DWORD *)WTF::fastFree((WTF *)v1, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

void sub_199338C3C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FEE90;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (WTF::StringImpl **)a1[3];
  if (v4) {
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FEE90;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (WTF::StringImpl **)*((void *)this + 3);
  if (v4) {
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissionToAccessURLs(WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::call(uint64_t a1, void *a2, void *a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v52 = v5;
  long long v53 = (WebKit *)v6;
  uint64_t v7 = *(void *)(a1 + 8);
  --*(void *)(v7 + 264);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Object returned by webExtensionController:promptForPermissionToAccessURLs:inTab:forExtensionContext:completionHandler: is not a set"];
  }
  if (v53)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Object returned by webExtensionController:promptForPermissionToAccessURLs:inTab:forExtensionContext:completionHandler: is not a date"];
    }
  }
  uint64_t v49 = v7;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  obint j = v52;
  uint64_t v8 = [obj countByEnumeratingWithState:&v64 objects:v70 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v65;
    uint64_t v51 = *MEMORY[0x1E4F1C3B8];
    unint64_t v10 = 0x1E4F1C000uLL;
    do
    {
      uint64_t v11 = 0;
      uint64_t v54 = v8;
      do
      {
        if (*(void *)v65 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void *)(*((void *)&v64 + 1) + 8 * v11);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v51, @"Object returned in set by webExtensionController:promptForPermissionToAccessURLs:inTab:forExtensionContext:completionHandler: is not a URL", v49);
        }
        MEMORY[0x19972E8A0](v69, v12);
        uint64_t v14 = *(void *)(a1 + 24);
        if (v14
          && ((int v15 = *(_DWORD *)(v14 - 8), v16 = *((_DWORD *)v69[0] + 4), v16 >= 0x100)
            ? (unsigned int v17 = v16 >> 8)
            : (unsigned int v17 = WTF::StringImpl::hashSlowCase(v69[0])),
              unsigned int v18 = v17 & v15,
              id v19 = (WTF **)(v14 + 40 * (v17 & v15)),
              (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v19) & 1) == 0))
        {
          uint64_t v22 = v9;
          unint64_t v23 = v10;
          uint64_t v24 = a1;
          int v25 = 1;
          while (*v19 == (WTF *)-1 || (WTF::equal(*v19, v69[0], v20) & 1) == 0)
          {
            unsigned int v18 = (v18 + v25) & v15;
            id v19 = (WTF **)(v14 + 40 * v18);
            ++v25;
            if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v19))
            {
              char v21 = 0;
              goto LABEL_25;
            }
          }
          char v21 = 1;
LABEL_25:
          a1 = v24;
          unint64_t v10 = v23;
          uint64_t v9 = v22;
          uint64_t v8 = v54;
        }
        else
        {
          char v21 = 0;
        }
        uint64_t v26 = v69[0];
        v69[0] = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
          {
            WTF::StringImpl::destroy(v26, v13);
            if (v21) {
              goto LABEL_32;
            }
            goto LABEL_34;
          }
          *(_DWORD *)v26 -= 2;
        }
        if (v21) {
          goto LABEL_32;
        }
LABEL_34:
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v51, @"Result returned by webExtensionController:promptForPermissionToAccessURLs:inTab:forExtensionContext:completionHandler: doesn't contain the requested URLs", v49);
LABEL_32:
        ++v11;
      }
      while (v11 != v8);
      uint64_t v27 = [obj countByEnumeratingWithState:&v64 objects:v70 count:16];
      uint64_t v8 = v27;
    }
    while (v27);
  }

  unsigned int v29 = v53;
  if (!v53)
  {
    unsigned int v29 = [MEMORY[0x1E4F1C9C8] distantFuture];
  }
  double v30 = WebKit::toImpl(v29, v28);
  if (!v53) {

  }
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  unsigned int v31 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(objc_msgSend(obj, "count", v49));
  if (v31 <= 8) {
    unsigned int v32 = 8;
  }
  else {
    unsigned int v32 = v31;
  }
  uint64_t v33 = WTF::fastZeroedMalloc((WTF *)(40 * v32 + 16));
  uint64_t v63 = (WTF::StringImpl **)(v33 + 16);
  *(_DWORD *)(v33 + 8) = v32 - 1;
  *(_DWORD *)(v33 + 12) = v32;
  *(_DWORD *)uint64_t v33 = 0;
  *((_DWORD *)v63 - 3) = 0;
  unsigned int v34 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize([obj count]);
  if (v34 <= 8) {
    unsigned int v35 = 8;
  }
  else {
    unsigned int v35 = v34;
  }
  uint64_t v36 = WTF::fastZeroedMalloc((WTF *)(8 * v35 + 16));
  uint64_t v62 = (void *)(v36 + 16);
  *(_DWORD *)(v36 + 8) = v35 - 1;
  *(_DWORD *)(v36 + 12) = v35;
  *(_DWORD *)uint64_t v36 = 0;
  *((_DWORD *)v62 - 3) = 0;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  id v37 = obj;
  uint64_t v38 = [v37 countByEnumeratingWithState:&v58 objects:v69 count:16];
  if (v38)
  {
    uint64_t v39 = *(void *)v59;
    do
    {
      for (uint64_t i = 0; i != v38; ++i)
      {
        if (*(void *)v59 != v39) {
          objc_enumerationMutation(v37);
        }
        uint64_t v41 = *(void *)(*((void *)&v58 + 1) + 8 * i);
        MEMORY[0x19972E8A0](v56, v41);
        WebKit::WebExtensionMatchPattern::getOrCreate((uint64_t)v56, 6, &v57);
        uint64_t v43 = v56[0];
        v56[0] = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2) {
            WTF::StringImpl::destroy(v43, v42);
          }
          else {
            *(_DWORD *)v43 -= 2;
          }
        }
        if (v57)
        {
          MEMORY[0x19972E8A0](v56, v41);
          WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::add((uint64_t *)&v63, (uint64_t *)v56, (uint64_t)v68);
          BOOL v45 = v56[0];
          v56[0] = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2) {
              WTF::StringImpl::destroy(v45, v44);
            }
            else {
              *(_DWORD *)v45 -= 2;
            }
          }
          v68[0] = v57;
          uint64_t v57 = 0;
          WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v62, v68, (uint64_t)v56);
          uint64_t v46 = v68[0];
          v68[0] = 0;
          if (v46) {
            CFRelease(*(CFTypeRef *)(v46 + 8));
          }
          uint64_t v47 = v57;
          uint64_t v57 = 0;
          if (v47) {
            CFRelease(*(CFTypeRef *)(v47 + 8));
          }
        }
      }
      uint64_t v38 = [v37 countByEnumeratingWithState:&v58 objects:v69 count:16];
    }
    while (v38);
  }

  if (*(unsigned char *)(a1 + 32) && v62 && *((_DWORD *)v62 - 3)) {
    WebKit::WebExtensionContext::grantPermissionMatchPatterns(v50, &v62, 1, v30);
  }
  if (*(void *)(a1 + 40)) {
    WTF::CompletionHandler<void ()(WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &,WTF::WallTime)>::operator()((uint64_t *)(a1 + 40));
  }
  if (v62) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v62, v48);
  }
  if (v63) {
    WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::deallocateTable(v63, (WTF::StringImpl *)v48);
  }
}

void sub_199339360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,WTF::StringImpl *a43)
{
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FEEB8;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (WTF::StringImpl **)a1[3];
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FEEB8;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (WTF::StringImpl **)*((void *)this + 3);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::requestPermissions(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>&,WTF::WallTime)> &&,WebKit::WebExtensionContext::GrantOnCompletion,WTF::OptionSet<WebKit::WebExtensionContext::PermissionStateOptions>)::$_2,void,NSSet * {__strong},NSDate * {__strong}>::call(uint64_t a1, void *a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  uint64_t v8 = (WebKit *)v6;
  uint64_t v30 = *(void *)(a1 + 8);
  --*(void *)(v30 + 264);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3B8], @"Object returned by webExtensionController:promptForPermissions:inTab:forExtensionContext:completionHandler: is not a set", v30);
  }
  if (v8)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Object returned by webExtensionController:promptForPermissions:inTab:forExtensionContext:completionHandler: is not a date"];
    }
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v9 = v7;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v35 objects:v39 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v36;
    uint64_t v31 = *MEMORY[0x1E4F1C3B8];
    unsigned int v32 = v8;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v36 != v11) {
          objc_enumerationMutation(v9);
        }
        uint64_t v13 = *(void *)(*((void *)&v35 + 1) + 8 * v12);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          [MEMORY[0x1E4F1CA00] raise:v31 format:@"Object returned in set by webExtensionController:promptForPermissions:inTab:forExtensionContext:completionHandler: is not a WKWebExtensionPermission"];
        }
        MEMORY[0x19972EAD0](&v34, v13);
        uint64_t v16 = *(void *)(a1 + 24);
        unsigned int v17 = v34;
        if (v16)
        {
          int v19 = *(_DWORD *)(v16 - 8);
          unsigned int v20 = *((_DWORD *)v34 + 4);
          if (v20 >= 0x100) {
            unsigned int v21 = v20 >> 8;
          }
          else {
            unsigned int v21 = WTF::StringImpl::hashSlowCase(v34);
          }
          for (int i = 0; ; v21 = i + v23)
          {
            int v23 = v21 & v19;
            uint64_t v24 = *(WTF **)(v16 + 8 * (v21 & v19));
            if (v24 != (WTF *)-1)
            {
              if (!v24)
              {
                char v18 = 0;
                goto LABEL_33;
              }
              if (WTF::equal(v24, v34, v15)) {
                break;
              }
            }
            ++i;
          }
          char v18 = 1;
LABEL_33:
          unsigned int v17 = v34;
          uint64_t v8 = v32;
        }
        else
        {
          char v18 = 0;
        }
        unsigned int v34 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::destroy(v17, v14);
            if (v18) {
              goto LABEL_21;
            }
            goto LABEL_34;
          }
          *(_DWORD *)v17 -= 2;
        }
        if (v18) {
          goto LABEL_21;
        }
LABEL_34:
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v31, @"Result returned by webExtensionController:promptForPermissions:inTab:forExtensionContext:completionHandler: doesn't contain the requested permissions", v30);
LABEL_21:
        ++v12;
      }
      while (v12 != v10);
      uint64_t v25 = [v9 countByEnumeratingWithState:&v35 objects:v39 count:16];
      uint64_t v10 = v25;
    }
    while (v25);
  }

  WebKit::toImpl((WebKit *)v9, (uint64_t *)&v34);
  uint64_t v27 = v8;
  if (!v8)
  {
    uint64_t v27 = [MEMORY[0x1E4F1C9C8] distantFuture];
  }
  double v29 = WebKit::toImpl(v27, v26);
  if (!v8) {

  }
  if (*(unsigned char *)(a1 + 32))
  {
    if (v34)
    {
      if (*((_DWORD *)v34 - 3))
      {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v33, (void **)&v34);
        WebKit::WebExtensionContext::grantPermissions((double *)v30, &v33, v29);
        if (v33) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v33, v28);
        }
      }
    }
  }
  if (*(void *)(a1 + 40)) {
    WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> &&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> &,WTF::WallTime)>::operator()((uint64_t *)(a1 + 40));
  }
  if (v34) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v34, v28);
  }
}

void sub_199339984(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl **a13, WTF::StringImpl **a14)
{
  if (a13) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a13, a2);
  }
  if (a14) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a14, a2);
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::URL> *,WTF::ListHashSetNode<WTF::URL> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::URL>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>>::expand(uint64_t *a1, WTF::StringImpl ***a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ListHashSetNode<WTF::URL> *,WTF::ListHashSetNode<WTF::URL> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::URL>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::URL> *,WTF::ListHashSetNode<WTF::URL> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::URL>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::URL> *>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl ***a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (WTF::StringImpl ***)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        uint64_t v15 = *a1;
        if (*a1) {
          int v16 = *(_DWORD *)(v15 - 8);
        }
        else {
          int v16 = 0;
        }
        unsigned int v17 = *v14;
        unsigned int v18 = *((_DWORD *)*v14 + 4);
        if (v18 >= 0x100) {
          unsigned int v19 = v18 >> 8;
        }
        else {
          unsigned int v19 = WTF::StringImpl::hashSlowCase(v17);
        }
        int v20 = 0;
        do
        {
          uint64_t v21 = v19 & v16;
          unsigned int v19 = ++v20 + v21;
        }
        while (*(void *)(v15 + 8 * v21));
        *(void *)(v15 + 8 * v21) = *v13;
        if (v13 == a3) {
          uint64_t v12 = v15 + 8 * v21;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebKit::WebExtensionContext::PermissionState>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebKit::WebExtensionContext::PermissionState,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebKit::WebExtensionContext::PermissionState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  uint64_t v9 = result;
  uint64_t v10 = result + 16;
  if (a2)
  {
    uint64_t v11 = a2;
    uint64_t v12 = (unsigned char *)(result + 56);
    do
    {
      uint64_t result = (uint64_t)WTF::URL::URL((WTF::URL *)(v12 - 40));
      unsigned char *v12 = 0;
      v12 += 48;
      --v11;
    }
    while (v11);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v5;
    uint64_t v30 = v5;
    do
    {
      int v16 = (WTF::StringImpl **)(v4 + 48 * v13);
      if (*v16 != (WTF::StringImpl *)-1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)(v4 + 48 * v13)))
        {
          unsigned int v17 = *v16;
          void *v16 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v8);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
        }
        else
        {
          uint64_t v18 = *a1;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unsigned int v20 = *((_DWORD *)*v16 + 4);
          uint64_t v21 = v14;
          if (v20 >= 0x100) {
            unsigned int v22 = v20 >> 8;
          }
          else {
            unsigned int v22 = WTF::StringImpl::hashSlowCase(*v16);
          }
          int v23 = 0;
          do
          {
            unsigned int v24 = v22 & v19;
            uint64_t v25 = (WTF **)(v18 + 48 * (v22 & v19));
            int v27 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v25);
            unsigned int v22 = ++v23 + v24;
          }
          while (!v27);
          unsigned int v28 = *v25;
          void *v25 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v26);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          WTF::URL::URL(v18 + 48 * v24, (uint64_t *)(v4 + 48 * v13));
          *(unsigned char *)(v18 + 48 * v24 + 40) = *(unsigned char *)(v4 + 48 * v13 + 40);
          double v29 = *v16;
          void *v16 = 0;
          uint64_t v14 = v21;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, v8);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          uint64_t v15 = v30;
          if (v16 == a3) {
            uint64_t v14 = v25;
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t *WTF::HashSet<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTableTraits>::HashSet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = 0;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(a1, a2++, (uint64_t)v7);
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_199339E98(_Unwind_Exception *exception_object, void *a2)
{
  if (*v2) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          int v23 = (uint64_t *)(v14 + 16 * v21);
          uint64_t v24 = v23[1];
          v23[1] = 0;
          if (v24) {
            WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v24);
          }
          uint64_t *v23 = *v10;
          uint64_t v25 = v4 + 16 * v9;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          uint64_t v13 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (!v13) {
            goto LABEL_19;
          }
LABEL_18:
          WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v13);
          goto LABEL_19;
        }
        uint64_t v12 = v4 + 16 * v9;
        uint64_t v13 = *(void *)(v12 + 8);
        *(void *)(v12 + 8) = 0;
        if (v13) {
          goto LABEL_18;
        }
      }
LABEL_19:
      if (++v9 == v5) {
        goto LABEL_22;
      }
    }
  }
  if (v4)
  {
LABEL_22:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          int v23 = (uint64_t *)(v14 + 16 * v21);
          uint64_t v24 = v23[1];
          v23[1] = 0;
          if (v24) {
            WTF::RefCounted<WebKit::WebExtensionTab>::deref(v24);
          }
          uint64_t *v23 = *v10;
          uint64_t v25 = v4 + 16 * v9;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          uint64_t v13 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (!v13) {
            goto LABEL_19;
          }
LABEL_18:
          WTF::RefCounted<WebKit::WebExtensionTab>::deref(v13);
          goto LABEL_19;
        }
        uint64_t v12 = v4 + 16 * v9;
        uint64_t v13 = *(void *)(v12 + 8);
        *(void *)(v12 + 8) = 0;
        if (v13) {
          goto LABEL_18;
        }
      }
LABEL_19:
      if (++v9 == v5) {
        goto LABEL_22;
      }
    }
  }
  if (v4)
  {
LABEL_22:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

void *WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  unsigned int v3 = (void *)(*(void *)(a1 + 8) + 16);
  *(void *)(a1 + 8) = v3;
  while (v3 != v2 && (unint64_t)(*v3 + 1) <= 1)
  {
    v3 += 2;
    *(void *)(a1 + 8) = v3;
  }
  ++*(_DWORD *)(a1 + 40);
  uint64_t result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets((void *)a1);
  ++*(_DWORD *)(*(void *)a1 + 8);
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::openNewWindow(WebKit::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionWindowParameters>,WTF::String> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FEEE0;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::openNewWindow(WebKit::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionWindowParameters>,WTF::String> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FEEE0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::openNewWindow(WebKit::WebExtensionWindowParameters const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionWindowParameters>,WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 112) || !*(unsigned char *)(a2 + 104))
  {
    uint64_t v5 = 0;
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>)>::operator()((uint64_t *)(a1 + 24), &v5);
  }
  else
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      uint64_t v4 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
      if (v5) {
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v5);
      }
      _Unwind_Resume(v4);
    }
    uint64_t v2 = (uint64_t *)(a1 + 24);
    WebKit::WebExtensionContext::getWindow(*(void *)(a1 + 8), *(void *)(a2 + 8), 0, 0, 0, &v5);
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>)>::operator()(v2, &v5);
  }
  uint64_t result = v5;
  if (v5)
  {
    return WTF::RefCounted<WebKit::WebExtensionWindow>::deref(result);
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v6 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v6);
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v4);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

void sub_19933A5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(a10);
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::openNewTab(WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FEF08;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::openNewTab(WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FEF08;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

WebKit::WebExtensionTab *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::openNewTab(WebKit::WebExtensionTabParameters const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionTabParameters>,WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 192) || !*(unsigned char *)(a2 + 184))
  {
    uint64_t v5 = 0;
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>)>::operator()((uint64_t *)(a1 + 24), (uint64_t *)&v5);
  }
  else
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      uint64_t v4 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
      if (v5) {
        WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v5);
      }
      _Unwind_Resume(v4);
    }
    uint64_t v2 = (uint64_t *)(a1 + 24);
    WebKit::WebExtensionContext::getTab(*(uint64_t **)(a1 + 8), *(void *)(a2 + 8), 0, &v5);
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>)>::operator()(v2, (uint64_t *)&v5);
  }
  uint64_t result = v5;
  if (v5)
  {
    return (WebKit::WebExtensionTab *)WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)result);
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v6 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v6);
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

void sub_19933A868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(a10);
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    uint64_t v13 = (uint64_t *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          uint64_t v14 = (uint64_t *)WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::lookupForReinsert(a1, v13);
          uint64_t v15 = *v14;
          uint64_t *v14 = 0;
          if (v15) {
            WTF::RefCounted<WebKit::WebExtensionTab>::deref(v15);
          }
          uint64_t v16 = *v13;
          uint64_t *v13 = 0;
          uint64_t *v14 = v16;
          uint64_t v17 = *v13;
          uint64_t *v13 = 0;
          if (v17) {
            WTF::RefCounted<WebKit::WebExtensionTab>::deref(v17);
          }
          if (v13 == a3) {
            uint64_t v11 = v14;
          }
        }
        else
        {
          uint64_t *v13 = 0;
        }
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    unsigned int v2 = *(_DWORD *)(v1 - 4);
    int v3 = *(_DWORD *)(v1 - 12);
    if (v2)
    {
      unsigned int v4 = v2 << (6 * v3 >= 2 * v2);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v2 = 0;
    int v3 = 0;
  }
  unsigned int v4 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(24 * v4 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v3;
  if (v2)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v2;
    do
    {
      uint64_t v9 = (uint64_t *)(v1 + 24 * v7);
      uint64_t v10 = *v9;
      if (*v9 != -1)
      {
        if (v10)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            int v23 = (void *)(v15 + 24 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (*v23);
          unsigned int v24 = v22;
          uint64_t v25 = v15 + 24 * v22;
          unsigned int v28 = *(WTF **)(v25 + 8);
          int v27 = (void *)(v25 + 8);
          uint64_t v26 = v28;
          if (v28)
          {
            void *v27 = 0;
            *(_DWORD *)(v15 + 24 * v22 + 16) = 0;
            WTF::fastFree(v26, v6);
            uint64_t v10 = *v9;
          }
          void *v23 = v10;
          uint64_t v29 = v1 + 24 * v7;
          void *v27 = 0;
          v27[1] = 0;
          uint64_t v31 = *(void *)(v29 + 8);
          uint64_t v30 = v29 + 8;
          *(void *)uint64_t v30 = 0;
          void *v27 = v31;
          int v32 = *(_DWORD *)(v30 + 8);
          *(_DWORD *)(v30 + 8) = 0;
          uint64_t v33 = v15 + 24 * v24;
          *(_DWORD *)(v33 + 16) = v32;
          int v34 = *(_DWORD *)(v30 + 12);
          *(_DWORD *)(v30 + 12) = 0;
          *(_DWORD *)(v33 + 20) = v34;
          long long v35 = *(WTF **)v30;
          if (*(void *)v30)
          {
            *(void *)uint64_t v30 = 0;
            *(_DWORD *)(v30 + 8) = 0;
            WTF::fastFree(v35, v6);
          }
        }
        else
        {
          uint64_t v11 = v1 + 24 * v7;
          uint64_t v14 = *(WTF **)(v11 + 8);
          uint64_t v13 = (void *)(v11 + 8);
          uint64_t v12 = v14;
          if (v14)
          {
            void *v13 = 0;
            *(_DWORD *)(v1 + 24 * v7 + 16) = 0;
            WTF::fastFree(v12, v6);
          }
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  else if (!v1)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v1 - 16), v6);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didStartProvisionalLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::WallTime)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FEF30;
  int v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didStartProvisionalLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::WallTime)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FEF30;
  int v3 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didStartProvisionalLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::WallTime)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 16);
  v4[0] = a1 + 96;
  v4[1] = &v3;
  void v4[2] = a1 + 32;
  v4[3] = a1 + 40;
  v4[4] = a1 + 48;
  v4[5] = a1 + 88;
  return WebKit::WebExtensionContext::sendToProcessesForEvent<Messages::WebExtensionContextProxy::DispatchWebNavigationEvent>(v1, 41, (uint64_t)v4);
}

uint64_t *WebKit::WebExtensionContext::sendToProcessesForEvent<Messages::WebExtensionContextProxy::DispatchWebNavigationEvent>(void *a1, char a2, uint64_t a3)
{
  WebKit::WebExtensionContext::processes(a1, a2, 0, (uint64_t *)&v27);
  unsigned int v24 = a1;
  uint64_t v5 = a1[9];
  if (v5 && *(void *)(v5 + 8))
  {
    uint64_t v6 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v27);
    uint64_t v7 = v6;
    uint64_t v8 = v4;
    uint64_t v9 = v27;
    if (v27) {
      uint64_t v9 = &v27[*((unsigned int *)v27 - 1)];
    }
    if (v9 != v6)
    {
      int v23 = v9;
      do
      {
        uint64_t v26 = *v7;
        uint64_t v10 = *(char **)a3;
        uint64_t v11 = *(uint64_t **)(a3 + 8);
        uint64_t v13 = *(uint64_t **)(a3 + 16);
        uint64_t v12 = *(uint64_t **)(a3 + 24);
        uint64_t v15 = *(uint64_t **)(a3 + 32);
        uint64_t v14 = *(double **)(a3 + 40);
        uint64_t v16 = v24[4];
        unint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unint64_t v17 = 1622;
        *((void *)v17 + 1) = v16;
        *((void *)v17 + 66) = (char *)v17 + 16;
        *((void *)v17 + 67) = 512;
        *((void *)v17 + 68) = 0;
        *((void *)v17 + 70) = 0;
        *((void *)v17 + 69) = 0;
        IPC::Encoder::encodeHeader(v17);
        uint64_t v30 = v17;
        IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::encode<IPC::Encoder>(v17, *v10);
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v17, v11);
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v17, v13);
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v17, v12);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, v15);
        IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v17, *v14);
        LOBYTE(v28) = 0;
        char v29 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v26, &v30, 0, (uint64_t)&v28, 1);
        if (v29)
        {
          uint64_t v18 = v28;
          uint64_t v28 = 0;
          if (v18) {
            (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
          }
        }
        unint64_t v19 = v30;
        uint64_t v30 = 0;
        if (v19)
        {
          IPC::Encoder::~Encoder(v19, v4);
          WTF::fastFree(v20, v21);
        }
        while (++v7 != v8)
        {
          if ((unint64_t)(*v7 + 1) > 1) {
            goto LABEL_16;
          }
        }
        uint64_t v7 = v8;
LABEL_16:
        ;
      }
      while (v7 != v23);
    }
  }
  uint64_t result = v27;
  if (v27) {
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v27, v4);
  }
  return result;
}

void sub_19933AFA8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, char a17, IPC::Encoder *a18)
{
  if (a14) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a14, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  for (int i = 1; ; ++i)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(void *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10) {
        return 0;
      }
      if (v10 == a2) {
        break;
      }
    }
    unsigned int v7 = (v9 + i) & v3;
  }
  return *(void *)(v2 + 16 * v9 + 8);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didCommitLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::WallTime)::$_1,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FEF58;
  int v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didCommitLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::WallTime)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FEF58;
  int v3 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didCommitLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::WallTime)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 16);
  uint64_t v9 = a1 + 96;
  uint64_t v3 = a1 + 32;
  uint64_t v4 = a1 + 40;
  uint64_t v5 = a1 + 48;
  uint64_t v6 = a1 + 88;
  uint64_t v10 = &v8;
  uint64_t v11 = a1 + 32;
  uint64_t v12 = a1 + 40;
  uint64_t v13 = a1 + 48;
  uint64_t v14 = a1 + 88;
  WebKit::WebExtensionContext::sendToProcessesForEvent<Messages::WebExtensionContextProxy::DispatchWebNavigationEvent>(v2, 42, (uint64_t)&v9);
  uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 16);
  uint64_t v9 = a1 + 97;
  uint64_t v10 = &v8;
  uint64_t v11 = v3;
  uint64_t v12 = v4;
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  return WebKit::WebExtensionContext::sendToProcessesForEvent<Messages::WebExtensionContextProxy::DispatchWebNavigationEvent>(v2, 44, (uint64_t)&v9);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didFinishLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::WallTime)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FEF80;
  uint64_t v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didFinishLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::WallTime)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FEF80;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didFinishLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::WallTime)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 16);
  v4[0] = a1 + 96;
  v4[1] = &v3;
  void v4[2] = a1 + 32;
  v4[3] = a1 + 40;
  v4[4] = a1 + 48;
  v4[5] = a1 + 88;
  return WebKit::WebExtensionContext::sendToProcessesForEvent<Messages::WebExtensionContextProxy::DispatchWebNavigationEvent>(v1, 43, (uint64_t)v4);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didFailLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::WallTime)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FEFA8;
  uint64_t v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didFailLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::WallTime)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FEFA8;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::didFailLoadForFrame(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::WallTime)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 16);
  v4[0] = a1 + 96;
  v4[1] = &v3;
  void v4[2] = a1 + 32;
  v4[3] = a1 + 40;
  v4[4] = a1 + 48;
  v4[5] = a1 + 88;
  return WebKit::WebExtensionContext::sendToProcessesForEvent<Messages::WebExtensionContextProxy::DispatchWebNavigationEvent>(v1, 45, (uint64_t)v4);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FEFD0;
  WebKit::WebExtensionContext::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9FEFD0;
  WebKit::WebExtensionContext::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0::~$_0((void *)a1 + 1, a2);

  return WTF::fastFree(a1, v3);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidSendRequest(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceRequest const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v21, *(unsigned char **)(a1 + 24), *(void *)(a1 + 32));
  uint64_t v20 = *(void *)(*(void *)(a1 + 40) + 16);
  WebKit::WebExtensionContext::processes(v2, &v21, 0, (uint64_t *)&v22);
  uint64_t v4 = v2[9];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v5 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v22);
    uint64_t v6 = v5;
    unsigned int v7 = v3;
    uint64_t v8 = v22 ? &v22[*((unsigned int *)v22 - 1)] : 0;
    if (v8 != v5)
    {
      uint64_t v9 = (uint64_t *)(a1 + 48);
      uint64_t v10 = (WebCore::ResourceRequest *)(a1 + 56);
      uint64_t v11 = a1 + 256;
      do
      {
        uint64_t v12 = *v6;
        uint64_t v13 = v2[4];
        uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v14 = 1628;
        *((void *)v14 + 1) = v13;
        *((void *)v14 + 66) = (char *)v14 + 16;
        *((void *)v14 + 67) = 512;
        *((void *)v14 + 68) = 0;
        *((void *)v14 + 70) = 0;
        *((void *)v14 + 69) = 0;
        IPC::Encoder::encodeHeader(v14);
        uint64_t v25 = v14;
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, &v20);
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, v9);
        IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v14, v10);
        IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode(v14, v11);
        LOBYTE(v23) = 0;
        char v24 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v25, 0, (uint64_t)&v23, 1);
        if (v24)
        {
          uint64_t v15 = v23;
          uint64_t v23 = 0;
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
        }
        uint64_t v16 = v25;
        uint64_t v25 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v3);
          WTF::fastFree(v17, v18);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_17;
          }
        }
        uint64_t v6 = v7;
LABEL_17:
        ;
      }
      while (v6 != v8);
    }
  }
  uint64_t result = v22;
  if (v22) {
    uint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v22, v3);
  }
  if (v21) {
    return (uint64_t *)WTF::fastFree((WTF *)(v21 - 16), v3);
  }
  return result;
}

void sub_19933B810(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a12) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a12, a2);
  }
  if (a11) {
    WTF::fastFree((WTF *)(a11 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FEFF8;
  WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&)::$_0::~$_0(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&)::$_0,void>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9FEFF8;
  WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&)::$_0::~$_0((void *)a1 + 1);

  return WTF::fastFree(a1, v2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidPerformHTTPRedirection(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v22, *(unsigned char **)(a1 + 24), *(void *)(a1 + 32));
  uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 16);
  WebKit::WebExtensionContext::processes(v2, &v22, 0, (uint64_t *)&v23);
  uint64_t v4 = v2[9];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v5 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v23);
    uint64_t v6 = v5;
    unsigned int v7 = v3;
    uint64_t v8 = v23 ? &v23[*((unsigned int *)v23 - 1)] : 0;
    if (v8 != v5)
    {
      uint64_t v20 = (uint64_t *)(a1 + 48);
      uint64_t v9 = (WebCore::ResourceResponseBase *)(a1 + 56);
      uint64_t v10 = a1 + 312;
      uint64_t v11 = (WebCore::ResourceRequest *)(a1 + 432);
      do
      {
        uint64_t v12 = *v6;
        uint64_t v13 = v2[4];
        uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v14 = 1625;
        *((void *)v14 + 1) = v13;
        *((void *)v14 + 66) = (char *)v14 + 16;
        *((void *)v14 + 67) = 512;
        *((void *)v14 + 68) = 0;
        *((void *)v14 + 70) = 0;
        *((void *)v14 + 69) = 0;
        IPC::Encoder::encodeHeader(v14);
        uint64_t v26 = v14;
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, &v21);
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, v20);
        IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v14, v9);
        IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode(v14, v10);
        IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v14, v11);
        LOBYTE(v24) = 0;
        char v25 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v26, 0, (uint64_t)&v24, 1);
        if (v25)
        {
          uint64_t v15 = v24;
          uint64_t v24 = 0;
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
        }
        uint64_t v16 = v26;
        uint64_t v26 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v3);
          WTF::fastFree(v17, v18);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_17;
          }
        }
        uint64_t v6 = v7;
LABEL_17:
        ;
      }
      while (v6 != v8);
    }
  }
  uint64_t result = v23;
  if (v23) {
    uint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v23, v3);
  }
  if (v22) {
    return (uint64_t *)WTF::fastFree((WTF *)(v22 - 16), v3);
  }
  return result;
}

void sub_19933BB48(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a12) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a12, a2);
  }
  if (a11) {
    WTF::fastFree((WTF *)(a11 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::AuthenticationChallenge const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FF020;
  WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::AuthenticationChallenge const&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::AuthenticationChallenge const&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9FF020;
  WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::AuthenticationChallenge const&)::$_0::~$_0((void *)a1 + 1, a2);

  return WTF::fastFree(a1, v3);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidReceiveChallenge(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::AuthenticationChallenge const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v21, *(unsigned char **)(a1 + 24), *(void *)(a1 + 32));
  uint64_t v20 = *(void *)(*(void *)(a1 + 40) + 16);
  WebKit::WebExtensionContext::processes(v2, &v21, 0, (uint64_t *)&v22);
  uint64_t v4 = v2[9];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v5 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v22);
    uint64_t v6 = v5;
    unsigned int v7 = v3;
    uint64_t v8 = v22 ? &v22[*((unsigned int *)v22 - 1)] : 0;
    if (v8 != v5)
    {
      uint64_t v9 = (uint64_t *)(a1 + 48);
      uint64_t v10 = (WebCore::AuthenticationChallengeBase *)(a1 + 56);
      uint64_t v11 = a1 + 488;
      do
      {
        uint64_t v12 = *v6;
        uint64_t v13 = v2[4];
        uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v14 = 1626;
        *((void *)v14 + 1) = v13;
        *((void *)v14 + 66) = (char *)v14 + 16;
        *((void *)v14 + 67) = 512;
        *((void *)v14 + 68) = 0;
        *((void *)v14 + 70) = 0;
        *((void *)v14 + 69) = 0;
        IPC::Encoder::encodeHeader(v14);
        char v25 = v14;
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, &v20);
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, v9);
        IPC::ArgumentCoder<WebCore::AuthenticationChallenge,void>::encode(v14, v10);
        IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode(v14, v11);
        LOBYTE(v23) = 0;
        char v24 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v25, 0, (uint64_t)&v23, 1);
        if (v24)
        {
          uint64_t v15 = v23;
          uint64_t v23 = 0;
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
        }
        uint64_t v16 = v25;
        char v25 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v3);
          WTF::fastFree(v17, v18);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_17;
          }
        }
        uint64_t v6 = v7;
LABEL_17:
        ;
      }
      while (v6 != v8);
    }
  }
  uint64_t result = v22;
  if (v22) {
    uint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v22, v3);
  }
  if (v21) {
    return (uint64_t *)WTF::fastFree((WTF *)(v21 - 16), v3);
  }
  return result;
}

void sub_19933BE6C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a12) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a12, a2);
  }
  if (a11) {
    WTF::fastFree((WTF *)(a11 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FF048;
  WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9FF048;
  WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&)::$_0::~$_0((void *)a1 + 1, a2);

  return WTF::fastFree(a1, v3);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidReceiveResponse(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v21, *(unsigned char **)(a1 + 24), *(void *)(a1 + 32));
  uint64_t v20 = *(void *)(*(void *)(a1 + 40) + 16);
  WebKit::WebExtensionContext::processes(v2, &v21, 0, (uint64_t *)&v22);
  uint64_t v4 = v2[9];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v5 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v22);
    uint64_t v6 = v5;
    unsigned int v7 = v3;
    uint64_t v8 = v22 ? &v22[*((unsigned int *)v22 - 1)] : 0;
    if (v8 != v5)
    {
      uint64_t v9 = (uint64_t *)(a1 + 48);
      uint64_t v10 = (WebCore::ResourceResponseBase *)(a1 + 56);
      uint64_t v11 = a1 + 312;
      do
      {
        uint64_t v12 = *v6;
        uint64_t v13 = v2[4];
        uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v14 = 1627;
        *((void *)v14 + 1) = v13;
        *((void *)v14 + 66) = (char *)v14 + 16;
        *((void *)v14 + 67) = 512;
        *((void *)v14 + 68) = 0;
        *((void *)v14 + 70) = 0;
        *((void *)v14 + 69) = 0;
        IPC::Encoder::encodeHeader(v14);
        char v25 = v14;
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, &v20);
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, v9);
        IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v14, v10);
        IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode(v14, v11);
        LOBYTE(v23) = 0;
        char v24 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v25, 0, (uint64_t)&v23, 1);
        if (v24)
        {
          uint64_t v15 = v23;
          uint64_t v23 = 0;
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
        }
        uint64_t v16 = v25;
        char v25 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v3);
          WTF::fastFree(v17, v18);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_17;
          }
        }
        uint64_t v6 = v7;
LABEL_17:
        ;
      }
      while (v6 != v8);
    }
  }
  uint64_t result = v22;
  if (v22) {
    uint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v22, v3);
  }
  if (v21) {
    return (uint64_t *)WTF::fastFree((WTF *)(v21 - 16), v3);
  }
  return result;
}

void sub_19933C190(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a12) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a12, a2);
  }
  if (a11) {
    WTF::fastFree((WTF *)(a11 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceError const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FF070;
  WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceError const&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceError const&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9FF070;
  WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceError const&)::$_0::~$_0((void *)a1 + 1, a2);

  return WTF::fastFree(a1, v3);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::resourceLoadDidCompleteWithError(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::ResourceLoadInfo const&,WebCore::ResourceResponse const&,WebCore::ResourceError const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  WTF::HashSet<WebKit::WebExtensionEventListenerType,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTableTraits>::HashSet((uint64_t *)&v22, *(unsigned char **)(a1 + 24), *(void *)(a1 + 32));
  uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 16);
  WebKit::WebExtensionContext::processes(v2, &v22, 0, (uint64_t *)&v23);
  uint64_t v4 = v2[9];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v5 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(&v23);
    uint64_t v6 = v5;
    unsigned int v7 = v3;
    uint64_t v8 = v23 ? &v23[*((unsigned int *)v23 - 1)] : 0;
    if (v8 != v5)
    {
      uint64_t v20 = (uint64_t *)(a1 + 48);
      uint64_t v9 = (WebCore::ResourceResponseBase *)(a1 + 56);
      uint64_t v10 = (WebCore::ResourceError *)(a1 + 312);
      uint64_t v11 = a1 + 392;
      do
      {
        uint64_t v12 = *v6;
        uint64_t v13 = v2[4];
        uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v14 = 1624;
        *((void *)v14 + 1) = v13;
        *((void *)v14 + 66) = (char *)v14 + 16;
        *((void *)v14 + 67) = 512;
        *((void *)v14 + 68) = 0;
        *((void *)v14 + 70) = 0;
        *((void *)v14 + 69) = 0;
        IPC::Encoder::encodeHeader(v14);
        uint64_t v26 = v14;
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, &v21);
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, v20);
        IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v14, v9);
        IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v14, v10);
        IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode(v14, v11);
        LOBYTE(v24) = 0;
        char v25 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v26, 0, (uint64_t)&v24, 1);
        if (v25)
        {
          uint64_t v15 = v24;
          uint64_t v24 = 0;
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
        }
        uint64_t v16 = v26;
        uint64_t v26 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v3);
          WTF::fastFree(v17, v18);
        }
        while (++v6 != v7)
        {
          if ((unint64_t)(*v6 + 1) > 1) {
            goto LABEL_17;
          }
        }
        uint64_t v6 = v7;
LABEL_17:
        ;
      }
      while (v6 != v8);
    }
  }
  uint64_t result = v23;
  if (v23) {
    uint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(v23, v3);
  }
  if (v22) {
    return (uint64_t *)WTF::fastFree((WTF *)(v22 - 16), v3);
  }
  return result;
}

void sub_19933C4C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a12) {
    WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::deallocateTable(a12, a2);
  }
  if (a11) {
    WTF::fastFree((WTF *)(a11 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void WTF::WeakHashMap<WebKit::WebExtensionWindow,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)a1;
  if (*(void *)a1)
  {
    int v4 = *(_DWORD *)(v3 - 4);
    if (!v4) {
      goto LABEL_19;
    }
    int v5 = 0;
    unsigned int v6 = v4 - 1;
    do
    {
      uint64_t v7 = v3 + 16 * v6;
      if ((unint64_t)(*(void *)v7 + 1) >= 2 && !*(void *)(*(void *)v7 + 8))
      {
        WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>::customDeleteBucket(v7, a2);
        ++v5;
      }
    }
    while ((unint64_t)v6--);
    uint64_t v3 = *(void *)a1;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      uint64_t v9 = *(void *)a1;
      if (*(void *)a1) {
        int v10 = *(_DWORD *)(v9 - 12);
      }
      else {
        int v10 = 0;
      }
      *(_DWORD *)(v9 - 12) = v10 - v5;
      uint64_t v3 = *(void *)a1;
    }
    if (v3)
    {
      unsigned int v11 = *(_DWORD *)(v3 - 4);
      if (v11 >= 9 && 6 * *(_DWORD *)(v3 - 12) < v11)
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
        uint64_t v3 = *(void *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          unsigned int v13 = 0;
          goto LABEL_23;
        }
LABEL_20:
        unsigned int v13 = *(_DWORD *)(v3 - 12);
        int v14 = 0x7FFFFFFF;
        if (v13 >= 0x7FFFFFFF) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
LABEL_19:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_20;
    }
  }
  unsigned int v13 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_23:
  int v14 = v13;
LABEL_24:
  *(_DWORD *)(a1 + 12) = 2 * v14;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(uint64_t *a1)
{
  if (*a1) {
    unsigned int v1 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v1 = 0;
  }
  unsigned int v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  unint64_t v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1) {
      goto LABEL_9;
    }
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_7:
    double v5 = (double)v1;
    double v6 = (double)v4;
    double v7 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400) {
    goto LABEL_7;
  }
LABEL_9:
  double v5 = (double)v1;
  double v6 = (double)v4;
  double v7 = 0.416666667;
LABEL_10:
  if (v6 * v7 <= v5) {
    LODWORD(v4) = 2 * v4;
  }
  if (v4 <= 8) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = v4;
  }
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v8, 0);
}

void WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>::customDeleteBucket(uint64_t a1, void *a2)
{
  unsigned int v2 = *(unsigned int **)a1;
  *(void *)a1 = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    uint64_t v5 = a1;
    WTF::fastFree((WTF *)v2, a2);
    a1 = v5;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)a1 = -1;
  *(void *)(a1 + 8) = 0;
  if (v3)
  {
    unint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v7;
    do
    {
      int v14 = (unsigned int **)(v6 + 16 * v11);
      uint64_t v15 = *v14;
      if (*v14 != (unsigned int *)-1)
      {
        if (v15)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unint64_t v20 = ((unint64_t)v15 + ~((void)v15 << 32)) ^ (((unint64_t)v15 + ~((void)v15 << 32)) >> 22);
          unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
          int v24 = 1;
          do
          {
            unsigned int v25 = v23;
            uint64_t v26 = *(void *)(v18 + 16 * v23);
            unsigned int v23 = (v23 + v24++) & v19;
          }
          while (v26);
          uint64_t v27 = v18 + 16 * v25;
          uint64_t v28 = *(void *)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          if (v28)
          {
            CFRelease(*(CFTypeRef *)(v28 + 8));
            char v29 = *(unsigned int **)v27;
            *(void *)uint64_t v27 = 0;
            if (v29 && atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v29);
              WTF::fastFree((WTF *)v29, v10);
            }
          }
          else
          {
            *(void *)uint64_t v27 = 0;
          }
          uint64_t v30 = *v14;
          IPC::Encoder *v14 = 0;
          *(void *)uint64_t v27 = v30;
          uint64_t v31 = v6 + 16 * v11;
          uint64_t v32 = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          *(void *)(v27 + 8) = v32;
          uint64_t v33 = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          if (v33) {
            CFRelease(*(CFTypeRef *)(v33 + 8));
          }
          int v34 = *v14;
          IPC::Encoder *v14 = 0;
          if (v34 && atomic_fetch_add((atomic_uint *volatile)v34, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v34);
            WTF::fastFree((WTF *)v34, v10);
          }
          if (v14 == a3) {
            uint64_t v12 = v27;
          }
        }
        else
        {
          uint64_t v16 = v6 + 16 * v11;
          uint64_t v17 = *(void *)(v16 + 8);
          *(void *)(v16 + 8) = 0;
          if (v17)
          {
            CFRelease(*(CFTypeRef *)(v17 + 8));
            uint64_t v15 = *v14;
          }
          IPC::Encoder *v14 = 0;
          if (v15)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v15);
              WTF::fastFree((WTF *)v15, v10);
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAction,WTF::RawPtrTraits<WebKit::WebExtensionAction>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

BOOL WTF::WeakHashMap<WebKit::WebPageProxy,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)a1;
  if (*(void *)a1)
  {
    int v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
    {
      BOOL v10 = 0;
      goto LABEL_23;
    }
    int v5 = 0;
    unsigned int v6 = v4 - 1;
    do
    {
      unsigned int v7 = (uint64_t *)(v3 + 16 * v6);
      uint64_t v8 = *v7;
      if ((unint64_t)(*v7 + 1) >= 2 && !*(void *)(v8 + 8))
      {
        uint64_t *v7 = 0;
        if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v8);
          WTF::fastFree((WTF *)v8, a2);
        }
        uint64_t *v7 = -1;
        ++v5;
      }
    }
    while ((unint64_t)v6--);
    uint64_t v3 = *(void *)a1;
    BOOL v10 = v5 != 0;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      uint64_t v11 = *(void *)a1;
      if (*(void *)a1) {
        int v12 = *(_DWORD *)(v11 - 12);
      }
      else {
        int v12 = 0;
      }
      *(_DWORD *)(v11 - 12) = v12 - v5;
      uint64_t v3 = *(void *)a1;
    }
    if (v3)
    {
      unsigned int v13 = *(_DWORD *)(v3 - 4);
      uint64_t v14 = *(unsigned int *)(v3 - 12);
      if (v13 >= 9 && 6 * (int)v14 < v13)
      {
        unsigned int v19 = (v14 - 1) | ((v14 - 1) >> 1) | (((v14 - 1) | ((v14 - 1) >> 1)) >> 2);
        unsigned int v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
        unint64_t v21 = (v20 | HIWORD(v20)) + 1;
        if (v21 > 0x400)
        {
          if (v21 > 2 * v14) {
            goto LABEL_34;
          }
        }
        else if (3 * v21 > 4 * v14)
        {
LABEL_32:
          double v22 = (double)v14;
          double v23 = (double)v21;
          double v24 = 0.604166667;
          goto LABEL_35;
        }
        LODWORD(v21) = 2 * v21;
        if (v21 <= 0x400) {
          goto LABEL_32;
        }
LABEL_34:
        double v22 = (double)v14;
        double v23 = (double)v21;
        double v24 = 0.416666667;
LABEL_35:
        if (v23 * v24 <= v22) {
          LODWORD(v21) = 2 * v21;
        }
        if (v21 <= 8) {
          unsigned int v25 = 8;
        }
        else {
          unsigned int v25 = v21;
        }
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v25, 0);
        uint64_t v3 = *(void *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          unsigned int v16 = 0;
          goto LABEL_27;
        }
LABEL_24:
        unsigned int v16 = *(_DWORD *)(v3 - 12);
        int v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
LABEL_23:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_24;
    }
  }
  else
  {
    BOOL v10 = 0;
  }
  unsigned int v16 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_27:
  int v17 = v16;
LABEL_28:
  *(_DWORD *)(a1 + 12) = 2 * v17;
  return v10;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    do
    {
      unsigned int v13 = (unsigned int **)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != (unsigned int *)-1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = ((unint64_t)v14 + ~((void)v14 << 32)) ^ (((unint64_t)v14 + ~((void)v14 << 32)) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 16 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          double v24 = (unsigned int **)(v15 + 16 * v22);
          void *v24 = 0;
          unsigned int v25 = *v13;
          uint64_t *v13 = 0;
          void *v24 = v25;
          v24[1] = *(unsigned int **)(v6 + 16 * v11 + 8);
          uint64_t v26 = *v13;
          uint64_t *v13 = 0;
          if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v26);
            WTF::fastFree((WTF *)v26, v10);
          }
          if (v13 == a3) {
            int v12 = v24;
          }
        }
        else
        {
          uint64_t *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    int v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::inlineSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>@<X0>(uint64_t *result@<X0>, void *a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    unsigned int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    unsigned int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = 0;
  int v12 = (uint64_t *)*a2;
  unint64_t v13 = ~(*a2 << 32) + *a2;
  unint64_t v14 = 9
      * (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) ^ (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) >> 8));
  unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  int v16 = (v15 >> 31) ^ v15;
  for (int i = 1; ; ++i)
  {
    uint64_t v18 = v16 & v10;
    unint64_t v19 = (uint64_t **)(v8 + 16 * v18);
    unsigned int v20 = *v19;
    if (*v19 != (uint64_t *)-1) {
      break;
    }
    uint64_t v11 = (uint64_t **)(v8 + 16 * v18);
LABEL_10:
    int v16 = i + v18;
  }
  if (!v20)
  {
    if (v11)
    {
      WebCore::ResourceRequest *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      int v12 = (uint64_t *)*a2;
      unint64_t v19 = v11;
    }
    *a2 = 0;
    uint64_t result = *v19;
    *unint64_t v19 = v12;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      uint64_t v28 = v19;
      uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, v19);
      unint64_t v19 = v28;
    }
    v19[1] = *a3;
    uint64_t v21 = *v6;
    if (*v6) {
      int v22 = *(_DWORD *)(v21 - 12) + 1;
    }
    else {
      int v22 = 1;
    }
    *(_DWORD *)(v21 - 12) = v22;
    uint64_t v24 = *v6;
    if (*v6) {
      int v25 = *(_DWORD *)(v24 - 12);
    }
    else {
      int v25 = 0;
    }
    uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
    unint64_t v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
      {
LABEL_26:
        uint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v6, (unsigned int **)v19);
        unint64_t v19 = (uint64_t **)result;
        uint64_t v24 = *v6;
        if (*v6) {
          unint64_t v27 = *(unsigned int *)(v24 - 4);
        }
        else {
          unint64_t v27 = 0;
        }
      }
    }
    else if (3 * v27 <= 4 * v26)
    {
      goto LABEL_26;
    }
    *(void *)a4 = v19;
    *(void *)(a4 + 8) = v24 + 16 * v27;
    *(unsigned char *)(a4 + 16) = 1;
    return result;
  }
  if (v20 != v12) {
    goto LABEL_10;
  }
  if (v9) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *(unsigned int *)(v8 - 4);
  }
  *(void *)a4 = v19;
  *(void *)(a4 + 8) = v8 + 16 * v23;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)(v8 + 16 * v18 + 8) = *a3;
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebExtensionContextProxy::AddTabPageIdentifier>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1598;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v8, *(void *)(a2 + 16));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  int v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_19933D0E4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::relatedWebView(void)::$_0,void,WebKit::WebPageProxy &,BOOL &>::call(uint64_t a1, WebKit::WebPageProxy *this, unsigned char *a3)
{
  WebKit::WebPageProxy::cocoaView(this, &cf);
  uint64_t v5 = WTF::RetainPtr<NSSet>::get((id *)&cf);
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
  int v7 = *(void ***)(a1 + 8);
  uint64_t v8 = *v7;
  uint64_t *v7 = (void *)v5;

  *a3 = 1;
}

void sub_19933D1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::loadBackgroundContent(WTF::CompletionHandler<void ()(NSError *)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FF0C0;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::loadBackgroundContent(WTF::CompletionHandler<void ()(NSError *)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FF0C0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::loadBackgroundContent(WTF::CompletionHandler<void ()(NSError *)> &&)::$_0,void>::call(uint64_t a1)
{
  unsigned int v1 = (uint64_t *)(a1 + 24);
  if (*(void *)(a1 + 24))
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    WTF::CompletionHandler<void ()(NSError *)>::operator()(v1, v2);
  }
}

void sub_19933D370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL WTF::HashTable<WebKit::WebExtensionEventListenerType,WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebExtensionEventListenerType,unsigned int>>,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebExtensionEventListenerType>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::WebExtensionEventListenerType,unsigned int,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<WebKit::WebExtensionEventListenerType>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::WebExtensionEventListenerType>>,WebKit::WebExtensionEventListenerType>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  int v4 = *a2;
  unsigned int v5 = 9 * ((~(v4 << 15) + v4) ^ ((~(v4 << 15) + v4) >> 10));
  unsigned int v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  unsigned int v7 = (v6 ^ HIWORD(v6)) & v3;
  int v8 = *(unsigned __int8 *)(v2 + 8 * v7);
  if (v8 == v4) {
    return 1;
  }
  int v10 = 1;
  do
  {
    BOOL result = v8 != 255;
    if (v8 == 255) {
      break;
    }
    unsigned int v7 = (v7 + v10) & v3;
    int v8 = *(unsigned __int8 *)(v2 + 8 * v7);
    ++v10;
  }
  while (v8 != v4);
  return result;
}

void *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    int v10 = 0;
    uint64_t v11 = v5;
    do
    {
      int v12 = (uint64_t *)(v4 + 24 * v9);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = (void *)(v15 + 24 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (*v23);
          unsigned int v24 = v22;
          int v25 = (void *)(v15 + 24 * v22 + 8);
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v8);
          uint64_t v27 = *v23;
          void *v23 = 0;
          if (v27) {
            CFRelease(*(CFTypeRef *)(v27 + 8));
          }
          uint64_t v28 = *v12;
          uint64_t *v12 = 0;
          void *v23 = v28;
          uint64_t v29 = v4 + 24 * v9;
          void *v25 = 0;
          v25[1] = 0;
          uint64_t v30 = *(void *)(v29 + 8);
          v29 += 8;
          *(void *)uint64_t v29 = 0;
          void *v25 = v30;
          LODWORD(v28) = *(_DWORD *)(v29 + 8);
          *(_DWORD *)(v29 + 8) = 0;
          uint64_t v31 = v15 + 24 * v24;
          *(_DWORD *)(v31 + 16) = v28;
          LODWORD(v28) = *(_DWORD *)(v29 + 12);
          *(_DWORD *)(v29 + 12) = 0;
          *(_DWORD *)(v31 + 20) = v28;
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, v26);
          uint64_t v32 = *v12;
          uint64_t *v12 = 0;
          if (v32) {
            CFRelease(*(CFTypeRef *)(v32 + 8));
          }
          if (v12 == a3) {
            int v10 = v23;
          }
        }
        else
        {
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 24 * v9 + 8, v8);
          uint64_t v14 = *v12;
          uint64_t *v12 = 0;
          if (v14) {
            CFRelease(*(CFTypeRef *)(v14 + 8));
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    int v10 = 0;
    BOOL result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

WTF *WTF::GenericHashTraits<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Ref<API::UserScript,WTF::RawPtrTraits<API::UserScript>,WTF::DefaultRefDerefTraits<API::UserScript>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if (v4)
  {
    unsigned int v5 = *(uint64_t **)a1;
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5;
      *unsigned int v5 = 0;
      if (v7) {
        CFRelease(*(CFTypeRef *)(v7 + 8));
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }

  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1, a2);
}

uint64_t WTF::Vector<WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<API::UserStyleSheet,WTF::RawPtrTraits<API::UserStyleSheet>,WTF::DefaultRefDerefTraits<API::UserStyleSheet>>&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)v3;
  CFRetain(*(CFTypeRef *)(*(void *)v3 + 8));
  *(void *)(v5 + 8 * v4) = v6;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::addDeclarativeNetRequestRulesToPrivateUserContentControllers(void)::$_0,void,WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FF0E8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::addDeclarativeNetRequestRulesToPrivateUserContentControllers(void)::$_0,void,WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FF0E8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContext::addDeclarativeNetRequestRulesToPrivateUserContentControllers(void)::$_0,void,WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code>::call(uint64_t a1, CFTypeRef **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(v3 + 72);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        uint64_t v6 = (void *)(v5 + 136);
        WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v5 + 136), &v18);
        uint64_t v7 = *v6;
        if (*v6)
        {
          uint64_t v8 = *(unsigned int *)(v7 - 4);
          uint64_t v9 = v7 + 8 * v8;
        }
        else
        {
          uint64_t v9 = 0;
          uint64_t v8 = 0;
        }
        uint64_t v13 = v6;
        uint64_t v14 = v9;
        uint64_t v15 = v9;
        uint64_t v16 = v9;
        uint64_t v17 = v7 + 8 * v8;
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v13);
        for (uint64_t i = v19; v19 != v14; uint64_t i = v19)
        {
          uint64_t v11 = *(void *)(*(void *)i + 8);
          if (v11) {
            int v12 = (WebKit::WebUserContentControllerProxy *)(v11 - 16);
          }
          else {
            int v12 = 0;
          }
          WebKit::WebUserContentControllerProxy::addContentRuleList(v12, (API::ContentRuleList *)v2, (WTF::StringImpl **)(v3 + 80));
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v18);
        }
      }
    }
    CFRelease(v2[1]);
  }
}

void sub_19933D8C0(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContext::didReceiveMessage(CFTypeRef *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  CFRetain(this[1]);
  int v15 = *((unsigned __int16 *)a3 + 25);
  if (v15 == 1635)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t)v735, (uint64_t *)a3);
      if (v735[32])
      {
        uint64_t v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (v17)
        {
          *(void *)&long long v745 = v16;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
          uint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v18 = &unk_1EE9FF110;
          v18[1] = v745;
          uint64_t v19 = *((void *)&v745 + 1);
          *((void *)&v745 + 1) = 0;
          v18[2] = v19;
          *(void *)v732 = v18;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
          WebKit::WebExtensionContext::actionGetTitle((WebKit::WebExtensionContext *)this, *(uint64_t *)v735, v735[8], *(uint64_t *)&v735[16], v735[24], (uint64_t *)v732);
          goto LABEL_45;
        }
      }
      goto LABEL_807;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1641)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>((uint64_t)v735, (uint64_t *)a3);
      if (!v735[40]) {
        goto LABEL_807;
      }
      uint64_t v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)v21)
      {
        *(void *)&long long v745 = v20;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
        unsigned int v22 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v22 = &unk_1EE9FF138;
        v22[1] = v745;
        uint64_t v23 = *((void *)&v745 + 1);
        *((void *)&v745 + 1) = 0;
        uint64_t v22[2] = v23;
        *(void *)v732 = v22;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
        WebKit::WebExtensionContext::actionSetTitle((WebKit::WebExtensionContext *)this, *(uint64_t *)v735, v735[8], *(uint64_t *)&v735[16], v735[24], (WTF::StringImpl **)&v735[32], (uint64_t *)v732);
        goto LABEL_53;
      }
LABEL_56:
      long long v53 = *(WTF::StringImpl **)&v735[32];
      *(void *)&v735[32] = 0;
      if (!v53) {
        goto LABEL_807;
      }
LABEL_57:
      if (*(_DWORD *)v53 != 2)
      {
        *(_DWORD *)v53 -= 2;
        goto LABEL_807;
      }
      goto LABEL_806;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1639)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>((uint64_t)v735, (uint64_t *)a3);
      if (!v735[40]) {
        goto LABEL_807;
      }
      uint64_t v24 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!(_BYTE)v21) {
        goto LABEL_56;
      }
      *(void *)&long long v745 = v24;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
      int v25 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v25 = &unk_1EE9FF160;
      v25[1] = v745;
      uint64_t v26 = *((void *)&v745 + 1);
      *((void *)&v745 + 1) = 0;
      void v25[2] = v26;
      *(void *)v732 = v25;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
      WebKit::WebExtensionContext::actionSetIcon((WebKit::WebExtensionContext *)this, *(uint64_t *)v735, v735[8], *(uint64_t *)&v735[16], v735[24], &v735[32], (uint64_t *)v732);
      goto LABEL_53;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1634)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t)v735, (uint64_t *)a3);
      if (!v735[32]) {
        goto LABEL_807;
      }
      uint64_t v27 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v28) {
        goto LABEL_807;
      }
      *(void *)&long long v745 = v27;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
      uint64_t v29 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v29 = &unk_1EE9FF188;
      v29[1] = v745;
      uint64_t v30 = *((void *)&v745 + 1);
      *((void *)&v745 + 1) = 0;
      _OWORD v29[2] = v30;
      *(void *)v732 = v29;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
      WebKit::WebExtensionContext::actionGetPopup((WebKit::WebExtensionContext *)this, *(uint64_t *)v735, v735[8], *(uint64_t *)&v735[16], v735[24], (uint64_t *)v732);
      goto LABEL_45;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1640)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>((uint64_t)v735, (uint64_t *)a3);
      if (!v735[40]) {
        goto LABEL_807;
      }
      uint64_t v31 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!(_BYTE)v21) {
        goto LABEL_56;
      }
      *(void *)&long long v745 = v31;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
      uint64_t v32 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v32 = &unk_1EE9FF1B0;
      v32[1] = v745;
      uint64_t v33 = *((void *)&v745 + 1);
      *((void *)&v745 + 1) = 0;
      void v32[2] = v33;
      *(void *)v732 = v32;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
      WebKit::WebExtensionContext::actionSetPopup((WebKit::WebExtensionContext *)this, *(uint64_t *)v735, v735[8], *(uint64_t *)&v735[16], v735[24], (WTF::StringImpl **)&v735[32], (uint64_t *)v732);
      goto LABEL_53;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1636)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      uint64_t v34 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v35)
      {
        uint64_t v3 = v34;
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3, &v745);
        if (v746[0])
        {
          IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3, v735);
          if (v735[16])
          {
            if (v746[0])
            {
              uint64_t v36 = v745;
              char v37 = BYTE8(v745);
              uint64_t v38 = *(void *)v735;
              char v39 = v735[8];
              uint64_t v40 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
              if (!v41) {
                goto LABEL_807;
              }
              *(void *)v735 = v40;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
              uint64_t v42 = (void *)WTF::fastMalloc((WTF *)0x18);
              *uint64_t v42 = &unk_1EE9FF1D8;
              v42[1] = *(void *)v735;
              uint64_t v43 = *(void *)&v735[8];
              *(void *)&v735[8] = 0;
              void v42[2] = v43;
              *(void *)&long long v745 = v42;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
              WebKit::WebExtensionContext::actionOpenPopup((uint64_t)this, v3, v36, v37, v38, v39, (uint64_t *)&v745);
              goto LABEL_75;
            }
            goto LABEL_991;
          }
        }
      }
      goto LABEL_366;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1632)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t)v735, (uint64_t *)a3);
      if (!v735[32]) {
        goto LABEL_807;
      }
      uint64_t v44 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v45) {
        goto LABEL_807;
      }
      *(void *)&long long v745 = v44;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
      uint64_t v46 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v46 = &unk_1EE9FF200;
      v46[1] = v745;
      uint64_t v47 = *((void *)&v745 + 1);
      *((void *)&v745 + 1) = 0;
      void v46[2] = v47;
      *(void *)v732 = v46;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
      WebKit::WebExtensionContext::actionGetBadgeText((WebKit::WebExtensionContext *)this, *(uint64_t *)v735, v735[8], *(uint64_t *)&v735[16], v735[24], (uint64_t *)v732);
LABEL_45:
      uint64_t v48 = *(void *)v732;
      *(void *)v732 = 0;
      if (!v48) {
        goto LABEL_807;
      }
      goto LABEL_775;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1637)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>((uint64_t)v735, (uint64_t *)a3);
      if (!v735[40]) {
        goto LABEL_807;
      }
      uint64_t v49 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!(_BYTE)v21) {
        goto LABEL_56;
      }
      *(void *)&long long v745 = v49;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
      CFTypeRef v50 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v50 = &unk_1EE9FF228;
      v50[1] = v745;
      uint64_t v51 = *((void *)&v745 + 1);
      *((void *)&v745 + 1) = 0;
      void v50[2] = v51;
      *(void *)v732 = v50;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
      WebKit::WebExtensionContext::actionSetBadgeText((WebKit::WebExtensionContext *)this, *(uint64_t *)v735, v735[8], *(uint64_t *)&v735[16], v735[24], (WTF::StringImpl **)&v735[32], (uint64_t *)v732);
LABEL_53:
      uint64_t v52 = *(void *)v732;
      *(void *)v732 = 0;
      if (v52) {
        (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
      }
      if (!v735[40]) {
        goto LABEL_807;
      }
      goto LABEL_56;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1633)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t)v735, (uint64_t *)a3);
      if (!v735[32]) {
        goto LABEL_807;
      }
      uint64_t v54 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v55) {
        goto LABEL_807;
      }
      *(void *)&long long v745 = v54;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
      __int16 v56 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v56 = &unk_1EE9FF250;
      v56[1] = v745;
      uint64_t v57 = *((void *)&v745 + 1);
      *((void *)&v745 + 1) = 0;
      void v56[2] = v57;
      *(void *)v732 = v56;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
      WebKit::WebExtensionContext::actionGetEnabled((WebKit::WebExtensionContext *)this, *(uint64_t *)v735, v735[8], *(uint64_t *)&v735[16], v735[24], (uint64_t *)v732);
      uint64_t v48 = *(void *)v732;
      *(void *)v732 = 0;
      if (!v48) {
        goto LABEL_807;
      }
LABEL_775:
      (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
      goto LABEL_807;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1638)
  {
    if (WebKit::WebExtensionContext::isActionMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3, v735);
      if (!v735[16]) {
        goto LABEL_366;
      }
      unint64_t v58 = *((void *)a3 + 1);
      uint64_t v59 = *(void *)a3;
      unint64_t v60 = *((void *)a3 + 2) - *(void *)a3;
      if (v58 <= v60)
      {
        unint64_t v241 = 0;
        uint64_t v242 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v243 = *((void *)a3 + 3);
        if (v243)
        {
          if (v58)
          {
            (*(void (**)(uint64_t))(*(void *)v243 + 16))(v243);
            uint64_t v242 = *(void *)a3;
            unint64_t v241 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v241 = 0;
            uint64_t v242 = 0;
          }
        }
      }
      else
      {
        long long v61 = (unsigned __int8 *)(v59 + v60);
        *((void *)a3 + 2) = v61 + 1;
        if (v59)
        {
          unsigned int v62 = *v61;
          if (v62 < 2)
          {
            uint64_t v63 = *(void *)v735;
            char v64 = v735[8];
            uint64_t v65 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
            if (!v66) {
              goto LABEL_807;
            }
            *(void *)v735 = v65;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
            long long v67 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v67 = &unk_1EE9FF278;
            v67[1] = *(void *)v735;
            uint64_t v68 = *(void *)&v735[8];
            *(void *)&v735[8] = 0;
            void v67[2] = v68;
            *(void *)&long long v745 = v67;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
            WebKit::WebExtensionContext::actionSetEnabled((WebKit::WebExtensionContext *)this, v63, v64, v62 != 0, (uint64_t *)&v745);
LABEL_75:
            uint64_t v48 = v745;
            *(void *)&long long v745 = 0;
            if (!v48) {
              goto LABEL_807;
            }
            goto LABEL_775;
          }
          goto LABEL_365;
        }
        unint64_t v241 = v58;
        uint64_t v242 = 0;
      }
      unint64_t v58 = 0;
      uint64_t v59 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v244 = *((void *)a3 + 3);
      if (v244)
      {
        if (v241)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v244 + 16))(v244, v242, v241);
          uint64_t v59 = *(void *)a3;
          unint64_t v58 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v58 = 0;
          uint64_t v59 = 0;
        }
      }
LABEL_365:
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v245 = *((void *)a3 + 3);
      if (v245 && v58) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v245 + 16))(v245, v59);
      }
LABEL_366:
      uint64_t v246 = *(void *)a3;
      uint64_t v247 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v248 = *((void *)a3 + 3);
      if (!v248) {
        goto LABEL_807;
      }
LABEL_367:
      if (!v247) {
        goto LABEL_807;
      }
      goto LABEL_368;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1645)
  {
    if (WebKit::WebExtensionContext::isAlarmsMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v745);
      if (BYTE8(v745))
      {
        CFTypeRef v69 = (IPC::Connection *)IPC::Decoder::decode<WTF::Seconds>((uint64_t *)a3);
        if ((_BYTE)v70
          && (a2 = (atomic_uchar *volatile *)v69, uint64_t v71 = IPC::Decoder::decode<WTF::Seconds>((uint64_t *)a3), (_BYTE)v70))
        {
          if (!BYTE8(v745)) {
            goto LABEL_991;
          }
          int v72 = 0;
          uint64_t v73 = v745;
          *(void *)&long long v745 = 0;
          *(void *)v735 = v73;
          *(void *)&v735[8] = a2;
          *(void *)&v735[16] = v71;
          int v10 = a2;
          double v9 = *(double *)&v71;
          int v74 = 1;
        }
        else
        {
          int v74 = 0;
          v735[0] = 0;
          int v72 = 1;
        }
        v735[24] = v74;
        if (BYTE8(v745))
        {
          uint64_t v82 = (WTF::StringImpl *)v745;
          *(void *)&long long v745 = 0;
          if (v82)
          {
            if (*(_DWORD *)v82 == 2) {
              WTF::StringImpl::destroy(v82, v70);
            }
            else {
              *(_DWORD *)v82 -= 2;
            }
          }
        }
        if (!v72) {
          goto LABEL_130;
        }
      }
      else
      {
        int v74 = 0;
        v735[0] = 0;
        v735[24] = 0;
      }
      uint64_t v229 = *(void *)a3;
      uint64_t v230 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v231 = *((void *)a3 + 3);
      if (v231 && v230) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v231 + 16))(v231, v229);
      }
LABEL_130:
      if (!v74) {
        goto LABEL_807;
      }
      WebKit::WebExtensionContext::alarmsCreate((uint64_t)this, (WTF::StringImpl **)v735, *(double *)&v10, v9);
      if (!v735[24]) {
        goto LABEL_807;
      }
      goto LABEL_132;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1646)
  {
    if (WebKit::WebExtensionContext::isAlarmsMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)v735);
      if (!v735[8]) {
        goto LABEL_807;
      }
      uint64_t v75 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!(_BYTE)v21) {
        goto LABEL_101;
      }
      *(void *)&long long v745 = v75;
      a3 = (IPC::Decoder *)((char *)&v745 + 8);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
      CFTypeRef v76 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v76 = &unk_1EE9FF2A0;
      v76[1] = v745;
      uint64_t v77 = *((void *)&v745 + 1);
      *((void *)&v745 + 1) = 0;
      v76[2] = v77;
      *(void *)v732 = v76;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
      if (!v735[8]) {
        goto LABEL_991;
      }
      WebKit::WebExtensionContext::alarmsGet((uint64_t)this, (WTF::StringImpl **)v735, (uint64_t *)v732);
      uint64_t v78 = *(void *)v732;
      *(void *)v732 = 0;
      if (!v78) {
        goto LABEL_101;
      }
LABEL_100:
      (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
LABEL_101:
      if (!v735[8]) {
        goto LABEL_807;
      }
LABEL_132:
      long long v53 = *(WTF::StringImpl **)v735;
      *(void *)v735 = 0;
      if (!v53) {
        goto LABEL_807;
      }
      goto LABEL_57;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1643)
  {
    if (WebKit::WebExtensionContext::isAlarmsMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)v735);
      if (!v735[8]) {
        goto LABEL_807;
      }
      uint64_t v79 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!(_BYTE)v21) {
        goto LABEL_101;
      }
      *(void *)&long long v745 = v79;
      a3 = (IPC::Decoder *)((char *)&v745 + 8);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
      uint64_t v80 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v80 = &unk_1EE9FF2C8;
      v80[1] = v745;
      uint64_t v81 = *((void *)&v745 + 1);
      *((void *)&v745 + 1) = 0;
      v80[2] = v81;
      *(void *)v732 = v80;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
      if (!v735[8]) {
        goto LABEL_991;
      }
      WebKit::WebExtensionContext::alarmsClear((uint64_t)this, (WTF::StringImpl **)v735, (const WTF::StringImpl *)v732);
      uint64_t v78 = *(void *)v732;
      *(void *)v732 = 0;
      if (!v78) {
        goto LABEL_101;
      }
      goto LABEL_100;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1647)
  {
    if (WebKit::WebExtensionContext::isAlarmsMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      uint64_t v83 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v84) {
        goto LABEL_807;
      }
      *(void *)v735 = v83;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
      uint64_t v85 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v85 = &unk_1EE9FF2F0;
      v85[1] = *(void *)v735;
      uint64_t v86 = *(void *)&v735[8];
      *(void *)&v735[8] = 0;
      v85[2] = v86;
      *(void *)&long long v745 = v85;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
      WebKit::WebExtensionContext::alarmsGetAll((uint64_t)this, (uint64_t *)&v745);
      uint64_t v87 = v745;
      *(void *)&long long v745 = 0;
      if (!v87) {
        goto LABEL_807;
      }
      goto LABEL_127;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1644)
  {
    if (WebKit::WebExtensionContext::isAlarmsMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      uint64_t v88 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v89) {
        goto LABEL_807;
      }
      *(void *)v735 = v88;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
      BOOL v90 = (void *)WTF::fastMalloc((WTF *)0x18);
      *BOOL v90 = &unk_1EE9FF318;
      v90[1] = *(void *)v735;
      uint64_t v91 = *(void *)&v735[8];
      *(void *)&v735[8] = 0;
      v90[2] = v91;
      *(void *)&long long v745 = v90;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
      WebKit::WebExtensionContext::alarmsClearAll((uint64_t)this, (WTF::StringImpl *)&v745);
      uint64_t v87 = v745;
      *(void *)&long long v745 = 0;
      if (!v87) {
        goto LABEL_807;
      }
      goto LABEL_127;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1648)
  {
    uint64_t v92 = this[9];
    if (!v92 || !v92[1]) {
      goto LABEL_807;
    }
    uint64_t v3 = (uint64_t)this[8];
    WebKit::WebExtension::populateCommandsIfNeeded((WebKit::WebExtension *)v3);
    if (*(_DWORD *)(v3 + 68))
    {
      uint64_t v93 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v94) {
        goto LABEL_807;
      }
      *(void *)v735 = v93;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
      uint64_t v95 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v95 = &unk_1EE9FF340;
      v95[1] = *(void *)v735;
      uint64_t v96 = *(void *)&v735[8];
      *(void *)&v735[8] = 0;
      v95[2] = v96;
      *(void *)&long long v745 = v95;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
      WebKit::WebExtensionContext::commandsGetAll((WebKit::WebExtensionContext *)this, (uint64_t *)&v745);
      uint64_t v87 = v745;
      *(void *)&long long v745 = 0;
      if (!v87) {
        goto LABEL_807;
      }
LABEL_127:
      (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
      goto LABEL_807;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1649)
  {
    if (WebKit::WebExtensionContext::isCookiesMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>>((uint64_t)v735, a3);
      if (v735[64])
      {
        uint64_t v98 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if ((_BYTE)v97)
        {
          *(void *)&long long v745 = v98;
          a3 = (IPC::Decoder *)((char *)&v745 + 8);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
          uint64_t v99 = (void *)WTF::fastMalloc((WTF *)0x18);
          *uint64_t v99 = &unk_1EE9FF368;
          v99[1] = v745;
          uint64_t v100 = *((void *)&v745 + 1);
          *((void *)&v745 + 1) = 0;
          CFTypeRef v99[2] = v100;
          *(void *)v732 = v99;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
          if (!v735[64]) {
            goto LABEL_991;
          }
          WebKit::WebExtensionContext::cookiesGet((uint64_t)this, *(const void **)v735, v735[8], (WTF::StringImpl **)&v735[16], (uint64_t)&v735[24], (uint64_t *)v732);
          goto LABEL_174;
        }
      }
      goto LABEL_176;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1650)
  {
    if (WebKit::WebExtensionContext::isCookiesMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::optional<PAL::SessionID>>(a3, v730);
      if (!v731) {
        goto LABEL_366;
      }
      IPC::Decoder::decode<WTF::URL>(a3, v732);
      if (!v734) {
        goto LABEL_366;
      }
      IPC::ArgumentCoder<WebKit::WebExtensionCookieFilterParameters,void>::decode(a3, (uint64_t)&v745);
      if (!v746[40])
      {
        v101 = *(WTF::StringImpl **)a3;
        uint64_t v342 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v343 = *((void *)a3 + 3);
        if (!v343
          || !v342
          || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v343 + 16))(v343, v101), !v746[40]))
        {
          int v106 = 0;
          v735[0] = 0;
          v735[112] = 0;
          int v138 = 1;
          goto LABEL_210;
        }
      }
      if (!v731 || !v734) {
        goto LABEL_991;
      }
      *(_OWORD *)v735 = *(_OWORD *)v730;
      uint64_t v102 = *(void *)v732;
      *(void *)v732 = 0;
      *(void *)&v735[16] = v102;
      *(_OWORD *)&v735[24] = *(_OWORD *)&v732[8];
      *(_OWORD *)&v735[40] = v733;
      *(_DWORD *)&v732[8] &= ~1u;
      v735[56] = 0;
      v735[64] = 0;
      int v103 = BYTE8(v745);
      if (BYTE8(v745))
      {
        uint64_t v104 = v745;
        *(void *)&long long v745 = 0;
        *(void *)&v735[56] = v104;
        v735[64] = 1;
      }
      v735[72] = 0;
      v735[80] = 0;
      if (v746[8])
      {
        uint64_t v105 = *(void *)v746;
        *(void *)v746 = 0;
        *(void *)&v735[72] = v105;
        v735[80] = 1;
      }
      v735[88] = 0;
      v735[96] = 0;
      if (v746[24])
      {
        *(void *)&v735[88] = *(void *)&v746[16];
        int v106 = 1;
        v735[96] = 1;
        int v107 = *(_DWORD *)&v746[32];
        *(void *)&v746[16] = 0;
      }
      else
      {
        int v106 = 0;
        int v107 = *(_DWORD *)&v746[32];
      }
      *(_DWORD *)&v735[104] = v107;
      v735[112] = 1;
      if (v746[8])
      {
        char v131 = *(WTF::StringImpl **)v746;
        *(void *)v746 = 0;
        if (v131)
        {
          if (*(_DWORD *)v131 == 2)
          {
            WTF::StringImpl::destroy(v131, v101);
            int v103 = BYTE8(v745);
          }
          else
          {
            *(_DWORD *)v131 -= 2;
          }
        }
      }
      if (v103)
      {
        uint64_t v137 = (WTF::StringImpl *)v745;
        *(void *)&long long v745 = 0;
        if (v137)
        {
          if (*(_DWORD *)v137 != 2)
          {
            int v138 = 0;
            *(_DWORD *)v137 -= 2;
LABEL_210:
            if (v734)
            {
              long long v139 = *(WTF::StringImpl **)v732;
              *(void *)v732 = 0;
              if (v139)
              {
                if (*(_DWORD *)v139 == 2) {
                  WTF::StringImpl::destroy(v139, v101);
                }
                else {
                  *(_DWORD *)v139 -= 2;
                }
              }
            }
            if (!v138)
            {
              uint64_t v140 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
              if ((_BYTE)v21)
              {
                *(void *)&long long v745 = v140;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
                long long v141 = (void *)WTF::fastMalloc((WTF *)0x18);
                *long long v141 = &unk_1EE9FF390;
                v141[1] = v745;
                uint64_t v142 = *((void *)&v745 + 1);
                *((void *)&v745 + 1) = 0;
                v141[2] = v142;
                *(void *)v732 = v141;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
                WebKit::WebExtensionContext::cookiesGetAll((uint64_t)this, *(const void **)v735, v735[8], (uint64_t)&v735[16], (uint64_t)&v735[56], (uint64_t *)v732);
                uint64_t v143 = *(void *)v732;
                *(void *)v732 = 0;
                if (v143) {
                  (*(void (**)(uint64_t))(*(void *)v143 + 8))(v143);
                }
                if (!v735[112]) {
                  goto LABEL_807;
                }
                int v106 = v735[96];
              }
              if (v106)
              {
                long long v144 = *(WTF::StringImpl **)&v735[88];
                *(void *)&v735[88] = 0;
                if (v144)
                {
                  if (*(_DWORD *)v144 == 2) {
                    WTF::StringImpl::destroy(v144, v21);
                  }
                  else {
                    *(_DWORD *)v144 -= 2;
                  }
                }
              }
              if (v735[80])
              {
                id v163 = *(WTF::StringImpl **)&v735[72];
                *(void *)&v735[72] = 0;
                if (v163)
                {
                  if (*(_DWORD *)v163 == 2) {
                    WTF::StringImpl::destroy(v163, v21);
                  }
                  else {
                    *(_DWORD *)v163 -= 2;
                  }
                }
              }
              if (v735[64])
              {
                CFTypeRef v164 = *(WTF::StringImpl **)&v735[56];
                *(void *)&v735[56] = 0;
                if (v164)
                {
                  if (*(_DWORD *)v164 == 2) {
                    WTF::StringImpl::destroy(v164, v21);
                  }
                  else {
                    *(_DWORD *)v164 -= 2;
                  }
                }
              }
              long long v53 = *(WTF::StringImpl **)&v735[16];
              *(void *)&v735[16] = 0;
              if (!v53) {
                goto LABEL_807;
              }
              goto LABEL_57;
            }
            goto LABEL_366;
          }
          WTF::StringImpl::destroy(v137, v101);
        }
      }
      int v138 = 0;
      goto LABEL_210;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  uint64_t v5 = &v745;
  uint64_t v4 = (uint64_t)v735;
  if (v15 == 1653)
  {
    if (WebKit::WebExtensionContext::isCookiesMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::optional<PAL::SessionID>>(a3, v732);
      if (v732[16])
      {
        IPC::Decoder::decode<WebKit::WebExtensionCookieParameters>(a3, (uint64_t)&v745);
        if (v750[8])
        {
          if (v732[16])
          {
            long long v109 = *(_OWORD *)v746;
            *(_OWORD *)v735 = *(_OWORD *)v732;
            *(_OWORD *)&v735[16] = v745;
            long long v110 = *(_OWORD *)&v746[16];
            memset(v746, 0, 32);
            *(_OWORD *)&v735[32] = v109;
            *(_OWORD *)&v735[48] = v110;
            *(_OWORD *)&v735[64] = *(_OWORD *)&v746[32];
            *(_OWORD *)&v735[75] = *(_OWORD *)&v746[43];
            long long v111 = *(_OWORD *)&v746[64];
            *(_OWORD *)&v746[64] = 0u;
            uint64_t v3 = (uint64_t)v735;
            uint64_t v6 = &v745;
            *(_OWORD *)&v735[96] = v111;
            *(_OWORD *)&v735[112] = v747;
            *(_OWORD *)&v735[128] = v748;
            LODWORD(v747) = v747 & 0xFFFFFFFE;
            uint64_t v112 = *((void *)&v749 + 1);
            *(void *)&v735[144] = v749;
            long long v749 = 0uLL;
            *(void *)&long long v736 = v112;
            BYTE8(v736) = v750[0];
            v737[0] = 1;
            WebCore::Cookie::~Cookie((WebCore::Cookie *)v746, v108);
            uint64_t v113 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
            if ((_BYTE)v114)
            {
              *(void *)&long long v745 = v113;
              a3 = (IPC::Decoder *)((char *)&v745 + 8);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
              uint64_t v115 = (void *)WTF::fastMalloc((WTF *)0x18);
              *uint64_t v115 = &unk_1EE9FF3B8;
              v115[1] = v745;
              uint64_t v116 = *((void *)&v745 + 1);
              *((void *)&v745 + 1) = 0;
              v115[2] = v116;
              *(void *)v732 = v115;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
              if (!v737[0]) {
                goto LABEL_991;
              }
              WebKit::WebExtensionContext::cookiesSet((uint64_t)this, *(const void **)v735, v735[8], (long long *)&v735[16], (uint64_t *)v732);
              uint64_t v117 = *(void *)v732;
              *(void *)v732 = 0;
              if (v117) {
                (*(void (**)(uint64_t))(*(void *)v117 + 8))(v117);
              }
              if (!v737[0]) {
                goto LABEL_807;
              }
            }
            WebCore::Cookie::~Cookie((WebCore::Cookie *)&v735[32], v114);
            goto LABEL_807;
          }
LABEL_991:
          __break(1u);
LABEL_992:
          long long v679 = v5[4];
          *(_OWORD *)(v4 + 56) = v5[3];
          *(_OWORD *)(v4 + 72) = v679;
          *(_OWORD *)(v4 + 84) = *(long long *)((char *)v5 + 76);
LABEL_993:
          v735[104] = 1;
          uint64_t v680 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if ((_BYTE)v681)
          {
            *(void *)&long long v745 = v680;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
            v682 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v682 = &unk_1EE9FFE58;
            v682[1] = v745;
            uint64_t v683 = *((void *)&v745 + 1);
            *((void *)&v745 + 1) = 0;
            v682[2] = v683;
            *(void *)v732 = v682;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
            *uint64_t v5 = *(_OWORD *)&v735[8];
            *(_DWORD *)v746 = *(_DWORD *)&v735[24];
            v746[8] = 0;
            v746[24] = 0;
            if (v6)
            {
              uint64_t v684 = *(void *)&v735[32];
              *(void *)&v735[32] = 0;
              *(void *)&v735[40] = 0;
              *(void *)&v746[8] = v684;
              *(_DWORD *)&v746[16] = v8;
              *(_DWORD *)&v746[20] = v7;
              v746[24] = 1;
            }
            long long v685 = *(_OWORD *)(v4 + 72);
            void v5[3] = *(_OWORD *)(v4 + 56);
            v5[4] = v685;
            *(long long *)((char *)v5 + 76) = *(_OWORD *)(v4 + 84);
            WebKit::WebExtensionContext::windowsUpdate((uint64_t)this, v3, &v745, (uint64_t *)v732);
            if (v746[24]) {
              WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v746[8], v681);
            }
            uint64_t v686 = *(void *)v732;
            *(void *)v732 = 0;
            if (v686) {
              (*(void (**)(uint64_t))(*(void *)v686 + 8))(v686);
            }
          }
          if (v6) {
            WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v735[32], v681);
          }
          goto LABEL_807;
        }
      }
      goto LABEL_366;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1652)
  {
    if (WebKit::WebExtensionContext::isCookiesMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>>((uint64_t)v735, a3);
      if (v735[64])
      {
        uint64_t v118 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if ((_BYTE)v97)
        {
          *(void *)&long long v745 = v118;
          a3 = (IPC::Decoder *)((char *)&v745 + 8);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
          uint64_t v119 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v119 = &unk_1EE9FF3E0;
          v119[1] = v745;
          uint64_t v120 = *((void *)&v745 + 1);
          *((void *)&v745 + 1) = 0;
          v119[2] = v120;
          *(void *)v732 = v119;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
          if (!v735[64]) {
            goto LABEL_991;
          }
          WebKit::WebExtensionContext::cookiesRemove((uint64_t)this, *(const void **)v735, v735[8], (WTF::StringImpl **)&v735[16], (uint64_t)&v735[24], (uint64_t *)v732);
LABEL_174:
          uint64_t v121 = *(void *)v732;
          *(void *)v732 = 0;
          if (v121) {
            (*(void (**)(uint64_t))(*(void *)v121 + 8))(v121);
          }
        }
      }
LABEL_176:
      std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v735, v97);
      goto LABEL_807;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1651)
  {
    if (WebKit::WebExtensionContext::isCookiesMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      uint64_t v122 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v123) {
        goto LABEL_807;
      }
      *(void *)v735 = v122;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
      uint64_t v124 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v124 = &unk_1EE9FF408;
      v124[1] = *(void *)v735;
      uint64_t v125 = *(void *)&v735[8];
      *(void *)&v735[8] = 0;
      v124[2] = v125;
      *(void *)&long long v745 = v124;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
      WebKit::WebExtensionContext::cookiesGetAllCookieStores((uint64_t)this, (uint64_t *)&v745);
      uint64_t v126 = v745;
      *(void *)&long long v745 = 0;
      if (!v126) {
        goto LABEL_807;
      }
      goto LABEL_850;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1656)
  {
    if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      uint64_t v127 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v128) {
        goto LABEL_807;
      }
      *(void *)v735 = v127;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
      v129 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v129 = &unk_1EE9FF430;
      v129[1] = *(void *)v735;
      uint64_t v130 = *(void *)&v735[8];
      *(void *)&v735[8] = 0;
      v129[2] = v130;
      *(void *)&long long v745 = v129;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
      WebKit::WebExtensionContext::declarativeNetRequestGetEnabledRulesets((uint64_t)this, (uint64_t *)&v745);
      uint64_t v126 = v745;
      *(void *)&long long v745 = 0;
      if (!v126) {
        goto LABEL_807;
      }
      goto LABEL_850;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1661)
  {
    if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a3, v14, v735);
      if (v735[32])
      {
        uint64_t v133 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if ((_BYTE)v132)
        {
          *(void *)&long long v745 = v133;
          a3 = (IPC::Decoder *)((char *)&v745 + 8);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
          long long v134 = (void *)WTF::fastMalloc((WTF *)0x18);
          *long long v134 = &unk_1EE9FF458;
          v134[1] = v745;
          uint64_t v135 = *((void *)&v745 + 1);
          *((void *)&v745 + 1) = 0;
          v134[2] = v135;
          *(void *)v732 = v134;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
          if (!v735[32]) {
            goto LABEL_991;
          }
          WebKit::WebExtensionContext::declarativeNetRequestUpdateEnabledRulesets((uint64_t)this, (uint64_t)v735, (uint64_t)&v735[16], (uint64_t *)v732);
          uint64_t v136 = *(void *)v732;
          *(void *)v732 = 0;
          if (v136) {
            (*(void (**)(uint64_t))(*(void *)v136 + 8))(v136);
          }
        }
      }
      std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v735, v132);
      goto LABEL_807;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1654)
  {
    if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      unsigned __int16 v145 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v145 > 0xFFu)
      {
        char v146 = v145;
        uint64_t v147 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (!v148) {
          goto LABEL_807;
        }
        *(void *)v735 = v147;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
        long long v149 = (void *)WTF::fastMalloc((WTF *)0x18);
        *long long v149 = &unk_1EE9FF480;
        v149[1] = *(void *)v735;
        uint64_t v150 = *(void *)&v735[8];
        *(void *)&v735[8] = 0;
        v149[2] = v150;
        *(void *)&long long v745 = v149;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
        WebKit::WebExtensionContext::declarativeNetRequestDisplayActionCountAsBadgeText((uint64_t *)this, v146 != 0, (uint64_t *)&v745);
        goto LABEL_75;
      }
      goto LABEL_366;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1659)
  {
    if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      uint64_t v151 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v152)
      {
        unint64_t v153 = *((void *)a3 + 1);
        uint64_t v154 = *(void *)a3;
        unint64_t v155 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
        if (v153 < v155 || v153 - v155 <= 7)
        {
          unint64_t v381 = 0;
          uint64_t v382 = 0;
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v383 = *((void *)a3 + 3);
          if (v383)
          {
            if (v153)
            {
              (*(void (**)(uint64_t))(*(void *)v383 + 16))(v383);
              uint64_t v382 = *(void *)a3;
              unint64_t v381 = *((void *)a3 + 1);
            }
            else
            {
              unint64_t v381 = 0;
              uint64_t v382 = 0;
            }
          }
        }
        else
        {
          v156 = (double *)(v154 + v155);
          *((void *)a3 + 2) = v156 + 1;
          if (v154)
          {
            uint64_t v157 = v151;
            double v158 = *v156;
            uint64_t v159 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
            if (!v160) {
              goto LABEL_807;
            }
            *(void *)v735 = v159;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
            char v161 = (void *)WTF::fastMalloc((WTF *)0x18);
            *char v161 = &unk_1EE9FF4A8;
            v161[1] = *(void *)v735;
            uint64_t v162 = *(void *)&v735[8];
            *(void *)&v735[8] = 0;
            v161[2] = v162;
            *(void *)&long long v745 = v161;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
            WebKit::WebExtensionContext::declarativeNetRequestIncrementActionCount((uint64_t *)this, v157, (uint64_t *)&v745, v158);
            goto LABEL_75;
          }
          unint64_t v381 = v153;
          uint64_t v382 = 0;
        }
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v384 = *((void *)a3 + 3);
        if (v384 && v381) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v384 + 16))(v384, v382);
        }
      }
      goto LABEL_366;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1657)
  {
    if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3, &v745);
      if (!v746[0]) {
        goto LABEL_366;
      }
      IPC::Decoder::decode<std::optional<WTF::WallTime>>((uint64_t *)a3, v735);
      if (!v735[16]) {
        goto LABEL_366;
      }
      if (!v746[0]) {
        goto LABEL_991;
      }
      uint64_t v165 = v745;
      unsigned __int8 v166 = BYTE8(v745);
      uint64_t v167 = *(void *)v735;
      char v168 = v735[8];
      uint64_t v169 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v170) {
        goto LABEL_807;
      }
      *(void *)v735 = v169;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
      v171 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v171 = &unk_1EE9FF4D0;
      v171[1] = *(void *)v735;
      uint64_t v172 = *(void *)&v735[8];
      *(void *)&v735[8] = 0;
      v171[2] = v172;
      *(void *)&long long v745 = v171;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
      WebKit::WebExtensionContext::declarativeNetRequestGetMatchedRules((uint64_t)this, v165, v166, v167, v168, (uint64_t *)&v745);
      uint64_t v126 = v745;
      *(void *)&long long v745 = 0;
      if (!v126) {
        goto LABEL_807;
      }
LABEL_850:
      (*(void (**)(uint64_t))(*(void *)v126 + 8))(v126);
      goto LABEL_807;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1655)
  {
    if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      uint64_t v173 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v174) {
        goto LABEL_807;
      }
      *(void *)v735 = v173;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
      uint64_t v175 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v175 = &unk_1EE9FF4F8;
      v175[1] = *(void *)v735;
      uint64_t v176 = *(void *)&v735[8];
      *(void *)&v735[8] = 0;
      v175[2] = v176;
      *(void *)&long long v745 = v175;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
      WebKit::WebExtensionContext::declarativeNetRequestGetDynamicRules(this, (uint64_t *)&v745);
      goto LABEL_279;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1660)
  {
    if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v735, a3);
      if (v735[24])
      {
        uint64_t v178 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if ((_BYTE)v177)
        {
          *(void *)&long long v745 = v178;
          a3 = (IPC::Decoder *)((char *)&v745 + 8);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
          long long v179 = (void *)WTF::fastMalloc((WTF *)0x18);
          *long long v179 = &unk_1EE9FF520;
          v179[1] = v745;
          uint64_t v180 = *((void *)&v745 + 1);
          *((void *)&v745 + 1) = 0;
          v179[2] = v180;
          *(void *)v732 = v179;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
          if (!v735[24]) {
            goto LABEL_991;
          }
          WebKit::WebExtensionContext::declarativeNetRequestUpdateDynamicRules((WebKit::WebExtensionContext *)this, v735, (uint64_t)&v735[8], (uint64_t *)v732);
          goto LABEL_288;
        }
      }
      goto LABEL_290;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1658)
  {
    if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      uint64_t v181 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v182) {
        goto LABEL_807;
      }
      *(void *)v735 = v181;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
      v183 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v183 = &unk_1EE9FF548;
      v183[1] = *(void *)v735;
      uint64_t v184 = *(void *)&v735[8];
      *(void *)&v735[8] = 0;
      v183[2] = v184;
      *(void *)&long long v745 = v183;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
      WebKit::WebExtensionContext::declarativeNetRequestGetSessionRules(this, (uint64_t *)&v745);
LABEL_279:
      uint64_t v48 = v745;
      *(void *)&long long v745 = 0;
      if (!v48) {
        goto LABEL_807;
      }
      goto LABEL_775;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1662)
  {
    if (WebKit::WebExtensionContext::isDeclarativeNetRequestMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v735, a3);
      if (v735[24])
      {
        uint64_t v185 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if ((_BYTE)v177)
        {
          *(void *)&long long v745 = v185;
          a3 = (IPC::Decoder *)((char *)&v745 + 8);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
          v186 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v186 = &unk_1EE9FF570;
          v186[1] = v745;
          uint64_t v187 = *((void *)&v745 + 1);
          *((void *)&v745 + 1) = 0;
          v186[2] = v187;
          *(void *)v732 = v186;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
          if (!v735[24]) {
            goto LABEL_991;
          }
          WebKit::WebExtensionContext::declarativeNetRequestUpdateSessionRules((uint64_t *)this, v735, (uint64_t)&v735[8], (uint64_t *)v732);
LABEL_288:
          uint64_t v188 = *(void *)v732;
          *(void *)v732 = 0;
          if (v188) {
            (*(void (**)(uint64_t))(*(void *)v188 + 8))(v188);
          }
        }
      }
LABEL_290:
      std::__optional_destruct_base<WebKit::WebGPU::BindGroupLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v735, v177);
      goto LABEL_807;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 <= 1663)
  {
    if (v15 != 1642)
    {
      if (v15 == 1663)
      {
        v189 = this[9];
        if (!v189) {
          goto LABEL_807;
        }
        if (!v189[1]) {
          goto LABEL_807;
        }
        uint64_t v190 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (!v191) {
          goto LABEL_807;
        }
        *(void *)v735 = v190;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
        v192 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v192 = &unk_1EE9FF598;
        v192[1] = *(void *)v735;
        uint64_t v193 = *(void *)&v735[8];
        *(void *)&v735[8] = 0;
        v192[2] = v193;
        *(void *)&long long v745 = v192;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
        WebKit::WebExtensionContext::extensionIsAllowedIncognitoAccess((uint64_t)this, (uint64_t *)&v745);
        uint64_t v126 = v745;
        *(void *)&long long v745 = 0;
        if (!v126) {
          goto LABEL_807;
        }
        goto LABEL_850;
      }
      goto LABEL_332;
    }
    v204 = this[9];
    if (!v204 || !v204[1]) {
      goto LABEL_807;
    }
    uint64_t v205 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
    if (v206)
    {
      uint64_t v207 = v205;
      unsigned __int16 v208 = IPC::Decoder::decode<WebKit::WebExtensionEventListenerType>((uint64_t *)a3);
      if (v208 >= 0x100u)
      {
        unsigned __int8 v209 = v208;
        unsigned __int16 v210 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3);
        if (v210 > 0xFFu)
        {
          WebKit::WebExtensionContext::addListener((uint64_t)this, v207, v209, v210);
          goto LABEL_807;
        }
      }
    }
    uint64_t v201 = *(void *)a3;
    uint64_t v202 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v203 = *((void *)a3 + 3);
    if (!v203) {
      goto LABEL_807;
    }
LABEL_315:
    if (v202) {
LABEL_316:
    }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v203 + 16))(v203, v201);
    goto LABEL_807;
  }
  if (v15 != 1664)
  {
    if (v15 != 1674) {
      goto LABEL_332;
    }
    id v194 = this[9];
    if (!v194 || !v194[1]) {
      goto LABEL_807;
    }
    uint64_t v195 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
    if (v196)
    {
      uint64_t v197 = v195;
      unsigned __int16 v198 = IPC::Decoder::decode<WebKit::WebExtensionEventListenerType>((uint64_t *)a3);
      if (v198 >= 0x100u)
      {
        unsigned __int8 v199 = v198;
        unsigned __int16 v200 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3);
        if (v200 >= 0x100u)
        {
          unint64_t v261 = *((void *)a3 + 1);
          uint64_t v262 = *(void *)a3;
          unint64_t v263 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
          if (v261 < v263 || v261 - v263 <= 7)
          {
            unint64_t v593 = 0;
            uint64_t v594 = 0;
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v595 = *((void *)a3 + 3);
            if (v595)
            {
              if (v261)
              {
                (*(void (**)(uint64_t))(*(void *)v595 + 16))(v595);
                uint64_t v594 = *(void *)a3;
                unint64_t v593 = *((void *)a3 + 1);
              }
              else
              {
                unint64_t v593 = 0;
                uint64_t v594 = 0;
              }
            }
          }
          else
          {
            v264 = (uint64_t *)(v262 + v263);
            *((void *)a3 + 2) = v264 + 1;
            if (v262)
            {
              WebKit::WebExtensionContext::removeListener((uint64_t)this, v197, v199, v200, *v264);
              goto LABEL_807;
            }
            unint64_t v593 = v261;
            uint64_t v594 = 0;
          }
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v596 = *((void *)a3 + 3);
          if (v596 && v593) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v596 + 16))(v596, v594);
          }
        }
      }
    }
    uint64_t v201 = *(void *)a3;
    uint64_t v202 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v203 = *((void *)a3 + 3);
    if (!v203) {
      goto LABEL_807;
    }
    goto LABEL_315;
  }
  if (WebKit::WebExtensionContext::isMenusMessageAllowed((WebKit::WebExtensionContext *)this))
  {
    IPC::Decoder::decode<WebKit::WebExtensionMenuItemParameters>(a3, (uint64_t)v735);
    if (v735[120])
    {
      uint64_t v212 = *(void *)v735;
      *(void *)v735 = 0;
      *(void *)&long long v745 = v212;
      BYTE8(v745) = 0;
      v746[0] = 0;
      if (v735[16])
      {
        uint64_t v213 = *(void *)&v735[8];
        *(void *)&v735[8] = 0;
        *((void *)&v745 + 1) = v213;
        v746[0] = 1;
      }
      *(_WORD *)&v746[8] = *(_WORD *)&v735[24];
      long long v214 = *(_OWORD *)&v735[32];
      memset(&v735[32], 0, 24);
      *(_OWORD *)&v746[16] = v214;
      *(void *)&v746[32] = *(void *)&v735[48];
      *(_DWORD *)&v746[40] = *(_DWORD *)&v735[56];
      *(_WORD *)&v746[44] = *(_WORD *)&v735[60];
      v746[48] = 0;
      v746[64] = 0;
      if (v735[80])
      {
        *(void *)&v746[48] = *(void *)&v735[64];
        uint64_t v215 = *(void *)&v735[72];
        *(void *)&v735[64] = 0;
        *(void *)&v735[72] = 0;
        *(void *)&v746[56] = v215;
        v746[64] = 1;
      }
      v746[72] = 0;
      BYTE8(v747) = 0;
      if (v735[104])
      {
        *(void *)&v746[72] = *(void *)&v735[88];
        uint64_t v216 = *(void *)&v735[96];
        *(void *)&v735[88] = 0;
        *(void *)&v735[96] = 0;
        *(void *)&long long v747 = v216;
        BYTE8(v747) = 1;
      }
      LODWORD(v748) = *(_DWORD *)&v735[112];
      BYTE8(v748) = 1;
      uint64_t v3 = (uint64_t)v735;
      WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)v735, v211);
      uint64_t v217 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)v218)
      {
        *(void *)v735 = v217;
        a3 = (IPC::Decoder *)&v735[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
        v219 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v219 = &unk_1EE9FF5C0;
        v219[1] = *(void *)v735;
        uint64_t v220 = *(void *)&v735[8];
        *(void *)&v735[8] = 0;
        v219[2] = v220;
        *(void *)v732 = v219;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
        if (!BYTE8(v748)) {
          goto LABEL_991;
        }
        WebKit::WebExtensionContext::menusCreate((uint64_t)this, (uint64_t)&v745, (uint64_t *)v732);
        uint64_t v221 = *(void *)v732;
        *(void *)v732 = 0;
        if (v221) {
          (*(void (**)(uint64_t))(*(void *)v221 + 8))(v221);
        }
        if (!BYTE8(v748)) {
          goto LABEL_807;
        }
      }
      WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)&v745, v218);
      goto LABEL_807;
    }
    goto LABEL_973;
  }
  int v15 = *((unsigned __int16 *)a3 + 25);
LABEL_332:
  if (v15 == 1667)
  {
    if (WebKit::WebExtensionContext::isMenusMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)v732);
      if (v732[8])
      {
        IPC::Decoder::decode<WebKit::WebExtensionMenuItemParameters>(a3, (uint64_t)&v745);
        uint64_t v3 = BYTE8(v748);
        if (BYTE8(v748))
        {
          if (!v732[8]) {
            goto LABEL_991;
          }
          uint64_t v223 = *(void *)v732;
          *(void *)v732 = 0;
          uint64_t v224 = v745;
          *(void *)&long long v745 = 0;
          *(void *)v735 = v223;
          *(void *)&v735[8] = v224;
          v735[16] = 0;
          v735[24] = 0;
          if (v746[0])
          {
            uint64_t v225 = *((void *)&v745 + 1);
            *((void *)&v745 + 1) = 0;
            *(void *)&v735[16] = v225;
            v735[24] = 1;
          }
          *(_WORD *)&v735[32] = *(_WORD *)&v746[8];
          long long v226 = *(_OWORD *)&v746[16];
          memset(&v746[16], 0, 24);
          *(_OWORD *)&v735[40] = v226;
          *(void *)&v735[56] = *(void *)&v746[32];
          *(_DWORD *)&v735[64] = *(_DWORD *)&v746[40];
          *(_WORD *)&v735[68] = *(_WORD *)&v746[44];
          v735[72] = 0;
          v735[88] = 0;
          if (v746[64])
          {
            *(void *)&v735[72] = *(void *)&v746[48];
            uint64_t v227 = *(void *)&v746[56];
            *(void *)&v746[48] = 0;
            *(void *)&v746[56] = 0;
            *(void *)&v735[80] = v227;
            v735[88] = 1;
          }
          v735[96] = 0;
          v735[112] = 0;
          if (BYTE8(v747))
          {
            *(void *)&v735[96] = *(void *)&v746[72];
            uint64_t v228 = v747;
            *(void *)&v746[72] = 0;
            *(void *)&long long v747 = 0;
            *(void *)&v735[104] = v228;
            v735[112] = 1;
          }
          *(_DWORD *)&v735[120] = v748;
          uint64_t v4 = 1;
          v735[128] = 1;
          WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)&v745, v222);
        }
        else
        {
          uint64_t v4 = 0;
          v735[0] = 0;
          v735[128] = 0;
        }
        if (v732[8])
        {
          v255 = *(WTF::StringImpl **)v732;
          *(void *)v732 = 0;
          if (v255)
          {
            if (*(_DWORD *)v255 == 2) {
              WTF::StringImpl::destroy(v255, (WTF::StringImpl *)v222);
            }
            else {
              *(_DWORD *)v255 -= 2;
            }
          }
        }
        if (v3) {
          goto LABEL_383;
        }
      }
      else
      {
        uint64_t v4 = 0;
        v735[0] = 0;
        v735[128] = 0;
      }
      uint64_t v432 = *(void *)a3;
      uint64_t v433 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v434 = *((void *)a3 + 3);
      if (v434 && v433) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v434 + 16))(v434, v432);
      }
LABEL_383:
      if (!v4) {
        goto LABEL_807;
      }
      uint64_t v256 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)v257)
      {
        *(void *)&long long v745 = v256;
        a3 = (IPC::Decoder *)((char *)&v745 + 8);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
        v258 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v258 = &unk_1EE9FF5E8;
        v258[1] = v745;
        uint64_t v259 = *((void *)&v745 + 1);
        *((void *)&v745 + 1) = 0;
        v258[2] = v259;
        *(void *)v732 = v258;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
        if (!v735[128]) {
          goto LABEL_991;
        }
        WebKit::WebExtensionContext::menusUpdate((uint64_t *)this, (WTF::StringImpl **)v735, (uint64_t)&v735[8], (NSString *)v732);
        uint64_t v260 = *(void *)v732;
        *(void *)v732 = 0;
        if (v260) {
          (*(void (**)(uint64_t))(*(void *)v260 + 8))(v260);
        }
        if (!v735[128]) {
          goto LABEL_807;
        }
      }
      WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)&v735[8], v257);
      goto LABEL_390;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1665)
  {
    if (WebKit::WebExtensionContext::isMenusMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)v735);
      if (!v735[8]) {
        goto LABEL_807;
      }
      uint64_t v232 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)v21)
      {
        *(void *)&long long v745 = v232;
        a3 = (IPC::Decoder *)((char *)&v745 + 8);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
        v233 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v233 = &unk_1EE9FF610;
        v233[1] = v745;
        uint64_t v234 = *((void *)&v745 + 1);
        *((void *)&v745 + 1) = 0;
        v233[2] = v234;
        *(void *)v732 = v233;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
        if (!v735[8]) {
          goto LABEL_991;
        }
        WebKit::WebExtensionContext::menusRemove((uint64_t)this, (WTF::StringImpl **)v735, (uint64_t *)v732, v235);
        uint64_t v236 = *(void *)v732;
        *(void *)v732 = 0;
        if (v236) {
          (*(void (**)(uint64_t))(*(void *)v236 + 8))(v236);
        }
      }
      if (!v735[8]) {
        goto LABEL_807;
      }
LABEL_390:
      long long v53 = *(WTF::StringImpl **)v735;
      *(void *)v735 = 0;
      if (!v53) {
        goto LABEL_807;
      }
      goto LABEL_57;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  if (v15 == 1666)
  {
    if (WebKit::WebExtensionContext::isMenusMessageAllowed((WebKit::WebExtensionContext *)this))
    {
      uint64_t v237 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v238) {
        goto LABEL_807;
      }
      *(void *)v735 = v237;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
      v239 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v239 = &unk_1EE9FF638;
      v239[1] = *(void *)v735;
      uint64_t v240 = *(void *)&v735[8];
      *(void *)&v735[8] = 0;
      v239[2] = v240;
      *(void *)&long long v745 = v239;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
      WebKit::WebExtensionContext::menusRemoveAll((uint64_t)this, &v745);
      goto LABEL_75;
    }
    int v15 = *((unsigned __int16 *)a3 + 25);
  }
  switch(v15)
  {
    case 1668:
      v249 = this[9];
      if (v249 && v249[1])
      {
        IPC::Decoder::decode<std::tuple<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>((uint64_t)v735, a3);
        if (v735[16])
        {
          uint64_t v251 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if ((_BYTE)v250)
          {
            *(void *)&long long v745 = v251;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
            v252 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v252 = &unk_1EE9FF688;
            v252[1] = v745;
            uint64_t v253 = *((void *)&v745 + 1);
            *((void *)&v745 + 1) = 0;
            v252[2] = v253;
            *(void *)v732 = v252;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
            v254 = (void (*)(void *, WTF::StringImpl ***, WTF::StringImpl ***, uint64_t))WebKit::WebExtensionContext::permissionsContains;
            goto LABEL_473;
          }
        }
        goto LABEL_475;
      }
      goto LABEL_807;
    case 1669:
      v296 = this[9];
      if (v296)
      {
        if (v296[1])
        {
          uint64_t v297 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if (v298)
          {
            *(void *)v735 = v297;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
            v299 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v299 = &unk_1EE9FF660;
            v299[1] = *(void *)v735;
            uint64_t v300 = *(void *)&v735[8];
            *(void *)&v735[8] = 0;
            v299[2] = v300;
            *(void *)&long long v745 = v299;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
            WebKit::WebExtensionContext::permissionsGetAll((WebKit::WebExtensionContext *)this, (uint64_t *)&v745);
            uint64_t v126 = v745;
            *(void *)&long long v745 = 0;
            if (v126) {
              goto LABEL_850;
            }
          }
        }
      }
      goto LABEL_807;
    case 1670:
      v277 = this[9];
      if (v277 && v277[1])
      {
        IPC::Decoder::decode<std::tuple<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>((uint64_t)v735, a3);
        if (v735[16])
        {
          uint64_t v278 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if ((_BYTE)v250)
          {
            *(void *)&long long v745 = v278;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
            v279 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v279 = &unk_1EE9FF6D8;
            v279[1] = v745;
            uint64_t v280 = *((void *)&v745 + 1);
            *((void *)&v745 + 1) = 0;
            v279[2] = v280;
            *(void *)v732 = v279;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
            v254 = (void (*)(void *, WTF::StringImpl ***, WTF::StringImpl ***, uint64_t))WebKit::WebExtensionContext::permissionsRemove;
            goto LABEL_473;
          }
        }
        goto LABEL_475;
      }
      goto LABEL_807;
    case 1671:
      v322 = this[9];
      if (v322 && v322[1])
      {
        IPC::Decoder::decode<std::tuple<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>((uint64_t)v735, a3);
        if (v735[16])
        {
          uint64_t v323 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if ((_BYTE)v250)
          {
            *(void *)&long long v745 = v323;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
            v324 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v324 = &unk_1EE9FF6B0;
            v324[1] = v745;
            uint64_t v325 = *((void *)&v745 + 1);
            *((void *)&v745 + 1) = 0;
            v324[2] = v325;
            *(void *)v732 = v324;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
            v254 = (void (*)(void *, WTF::StringImpl ***, WTF::StringImpl ***, uint64_t))WebKit::WebExtensionContext::permissionsRequest;
LABEL_473:
            IPC::callMemberFunction<WebKit::WebExtensionContext,WebKit::WebExtensionContext,void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&),std::tuple<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,void ()(BOOL)>((uint64_t)this, v254, 0, (uint64_t)v735, (uint64_t)v732);
            uint64_t v326 = *(void *)v732;
            *(void *)v732 = 0;
            if (v326) {
              (*(void (**)(uint64_t))(*(void *)v326 + 8))(v326);
            }
          }
        }
LABEL_475:
        std::__optional_destruct_base<std::tuple<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v735, v250);
      }
      goto LABEL_807;
    case 1672:
      v327 = this[9];
      if (v327 && v327[1])
      {
        v328 = (IPC::Connection *)IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3);
        if ((unsigned __int16)v328 < 0x100u) {
          goto LABEL_973;
        }
        a2 = (atomic_uchar *volatile *)v328;
        uint64_t v329 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3);
        if ((unsigned __int16)v329 < 0x100u) {
          goto LABEL_973;
        }
        uint64_t v3 = v329;
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a3, &v745);
        if (!v746[0]) {
          goto LABEL_973;
        }
        uint64_t v330 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
        if (!v331) {
          goto LABEL_973;
        }
        uint64_t v4 = v330;
        IPC::Decoder::decode<WTF::String>(a3, (uint64_t)v732);
        if (!v732[8]) {
          goto LABEL_973;
        }
        if (!v746[0]) {
          goto LABEL_991;
        }
        v735[0] = (_BYTE)a2;
        v735[1] = v3;
        *(_OWORD *)&v735[8] = v745;
        *(void *)&v735[24] = v4;
        *(void *)&v735[32] = *(void *)v732;
        v735[40] = 1;
        WebKit::WebExtensionContext::portPostMessage((uint64_t *)this, a2, v3, v745, *((uint64_t *)&v745 + 1), v4, &v735[32]);
        if (v735[40])
        {
LABEL_485:
          long long v53 = *(WTF::StringImpl **)&v735[32];
          *(void *)&v735[32] = 0;
          if (v53) {
            goto LABEL_57;
          }
        }
      }
      goto LABEL_807;
    case 1673:
      v281 = this[9];
      if (v281 && v281[1])
      {
        unsigned __int16 v282 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3);
        if (v282 >= 0x100u
          && (unsigned __int8 v283 = v282,
              unsigned __int16 v284 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3),
              v284 >= 0x100u)
          && (unsigned __int8 v285 = v284,
              uint64_t v286 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3),
              v287)
          && (uint64_t v288 = v286,
              uint64_t v289 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3),
              v290))
        {
          WebKit::WebExtensionContext::portRemoved((uint64_t *)this, v283, v285, v288, v289);
        }
        else
        {
          uint64_t v201 = *(void *)a3;
          uint64_t v202 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v203 = *((void *)a3 + 3);
          if (v203) {
            goto LABEL_315;
          }
        }
      }
      goto LABEL_807;
    case 1675:
      v301 = this[9];
      if (v301 && v301[1])
      {
        IPC::Decoder::decode<std::tuple<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,WebKit::WebExtensionMessageSenderParameters>>((uint64_t)v735, a3);
        if (!v742) {
          goto LABEL_445;
        }
        uint64_t v302 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (!(_BYTE)v266) {
          goto LABEL_445;
        }
        *(void *)&long long v745 = v302;
        a3 = (IPC::Decoder *)((char *)&v745 + 8);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
        v303 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v303 = &unk_1EE9FF778;
        v303[1] = v745;
        uint64_t v304 = *((void *)&v745 + 1);
        *((void *)&v745 + 1) = 0;
        v303[2] = v304;
        *(void *)v732 = v303;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
        if (!v742) {
          goto LABEL_991;
        }
        WebKit::WebExtensionContext::runtimeConnect((uint64_t)this, (const WTF::StringImpl **)v735, *(uint64_t *)&v735[8], (WTF::StringImpl **)&v735[16], (uint64_t)&v735[24], (uint64_t *)v732);
        goto LABEL_443;
      }
      goto LABEL_807;
    case 1676:
      v306 = this[9];
      if (!v306 || !v306[1]) {
        goto LABEL_807;
      }
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v745);
      if (BYTE8(v745))
      {
        uint64_t v3 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
        if ((_BYTE)v307
          && (uint64_t v308 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3),
              (_BYTE)v307))
        {
          if (!BYTE8(v745)) {
            goto LABEL_991;
          }
          uint64_t v4 = v308;
          int v309 = 0;
          uint64_t v310 = v745;
          *(void *)&long long v745 = 0;
          *(void *)v735 = v310;
          *(void *)&v735[8] = v3;
          *(void *)&v735[16] = v308;
          int v311 = 1;
        }
        else
        {
          int v311 = 0;
          v735[0] = 0;
          int v309 = 1;
        }
        v735[24] = v311;
        if (BYTE8(v745))
        {
          v356 = (WTF::StringImpl *)v745;
          *(void *)&long long v745 = 0;
          if (v356)
          {
            if (*(_DWORD *)v356 == 2) {
              WTF::StringImpl::destroy(v356, v307);
            }
            else {
              *(_DWORD *)v356 -= 2;
            }
          }
        }
        if (!v309)
        {
LABEL_560:
          if (v311)
          {
            uint64_t v370 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
            if (!(_BYTE)v21) {
              goto LABEL_390;
            }
            *(void *)&long long v745 = v370;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
            v371 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v371 = &unk_1EE9FF7C8;
            v371[1] = v745;
            uint64_t v372 = *((void *)&v745 + 1);
            *((void *)&v745 + 1) = 0;
            v371[2] = v372;
            *(void *)v732 = v371;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
            WebKit::WebExtensionContext::runtimeConnectNative((uint64_t)this, (WTF::StringImpl **)v735, v3, (WTF::StringImpl *)v4, (uint64_t *)v732);
            uint64_t v373 = *(void *)v732;
            *(void *)v732 = 0;
            if (v373) {
              (*(void (**)(uint64_t))(*(void *)v373 + 8))(v373);
            }
            if (v735[24]) {
              goto LABEL_390;
            }
          }
          goto LABEL_807;
        }
      }
      else
      {
        int v311 = 0;
        v735[0] = 0;
        v735[24] = 0;
      }
      uint64_t v636 = *(void *)a3;
      uint64_t v637 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v638 = *((void *)a3 + 3);
      if (v638 && v637) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v638 + 16))(v638, v636);
      }
      goto LABEL_560;
    case 1677:
      v337 = this[9];
      if (v337)
      {
        if (v337[1])
        {
          uint64_t v338 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if (v339)
          {
            *(void *)v735 = v338;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
            v340 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v340 = &unk_1EE9FF700;
            v340[1] = *(void *)v735;
            uint64_t v341 = *(void *)&v735[8];
            *(void *)&v735[8] = 0;
            v340[2] = v341;
            *(void *)&long long v745 = v340;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
            WebKit::WebExtensionContext::runtimeGetBackgroundPage((uint64_t)this, (uint64_t *)&v745);
            uint64_t v126 = v745;
            *(void *)&long long v745 = 0;
            if (v126) {
              goto LABEL_850;
            }
          }
        }
      }
      goto LABEL_807;
    case 1678:
      v332 = this[9];
      if (v332)
      {
        if (v332[1])
        {
          uint64_t v333 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if (v334)
          {
            *(void *)v735 = v333;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
            v335 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v335 = &unk_1EE9FF728;
            v335[1] = *(void *)v735;
            uint64_t v336 = *(void *)&v735[8];
            *(void *)&v735[8] = 0;
            v335[2] = v336;
            *(void *)&long long v745 = v335;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
            WebKit::WebExtensionContext::runtimeOpenOptionsPage((uint64_t)this, (uint64_t *)&v745);
            goto LABEL_75;
          }
        }
      }
      goto LABEL_807;
    case 1679:
      v270 = this[9];
      if (v270 && v270[1]) {
        WebKit::WebExtensionContext::reload((uint64_t)this, 0);
      }
      goto LABEL_807;
    case 1680:
      v291 = this[9];
      if (v291 && v291[1])
      {
        IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebKit::WebExtensionMessageSenderParameters>>((uint64_t)v735, a3);
        if (!v741) {
          goto LABEL_461;
        }
        uint64_t v293 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (!(_BYTE)v292) {
          goto LABEL_461;
        }
        *(void *)&long long v745 = v293;
        a3 = (IPC::Decoder *)((char *)&v745 + 8);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
        v294 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v294 = &unk_1EE9FF750;
        v294[1] = v745;
        uint64_t v295 = *((void *)&v745 + 1);
        *((void *)&v745 + 1) = 0;
        v294[2] = v295;
        *(void *)v732 = v294;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
        if (!v741) {
          goto LABEL_991;
        }
        WebKit::WebExtensionContext::runtimeSendMessage((uint64_t)this, (const WTF::StringImpl **)v735, (const WTF::StringImpl *)&v735[8], (uint64_t)&v735[16], (uint64_t *)v732);
        goto LABEL_459;
      }
      goto LABEL_807;
    case 1681:
      v271 = this[9];
      if (v271 && v271[1])
      {
        IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>(a3, v735);
        if (v735[16])
        {
          uint64_t v273 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if ((_BYTE)v272)
          {
            *(void *)&long long v745 = v273;
            a3 = (IPC::Decoder *)((char *)&v745 + 8);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
            v274 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v274 = &unk_1EE9FF7A0;
            v274[1] = v745;
            uint64_t v275 = *((void *)&v745 + 1);
            *((void *)&v745 + 1) = 0;
            v274[2] = v275;
            *(void *)v732 = v274;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
            if (!v735[16]) {
              goto LABEL_991;
            }
            WebKit::WebExtensionContext::runtimeSendNativeMessage((uint64_t)this, v735, &v735[8], (uint64_t *)v732);
            uint64_t v276 = *(void *)v732;
            *(void *)v732 = 0;
            if (v276) {
              (*(void (**)(uint64_t))(*(void *)v276 + 8))(v276);
            }
          }
        }
        std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v735, v272);
      }
      goto LABEL_807;
    case 1682:
      v265 = this[9];
      if (v265 && v265[1])
      {
        IPC::Decoder::decode<std::tuple<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,WebKit::WebExtensionMessageSenderParameters>>((uint64_t)v735, a3);
        if (v742)
        {
          uint64_t v267 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if ((_BYTE)v266)
          {
            *(void *)&long long v745 = v267;
            a3 = (IPC::Decoder *)((char *)&v745 + 8);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
            v268 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v268 = &unk_1EE9FF818;
            v268[1] = v745;
            uint64_t v269 = *((void *)&v745 + 1);
            *((void *)&v745 + 1) = 0;
            v268[2] = v269;
            *(void *)v732 = v268;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
            if (!v742) {
              goto LABEL_991;
            }
            WebKit::WebExtensionContext::runtimeWebPageConnect((uint64_t)this, (const WTF::StringImpl **)v735, *(uint64_t *)&v735[8], (WTF::StringImpl **)&v735[16], (uint64_t)&v735[24], (WTF::StringImpl **)v732);
LABEL_443:
            uint64_t v305 = *(void *)v732;
            *(void *)v732 = 0;
            if (v305) {
              (*(void (**)(uint64_t))(*(void *)v305 + 8))(v305);
            }
          }
        }
LABEL_445:
        std::__optional_destruct_base<std::tuple<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,WebKit::WebExtensionMessageSenderParameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v735, v266);
      }
      goto LABEL_807;
    case 1683:
      v312 = this[9];
      if (v312 && v312[1])
      {
        IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebKit::WebExtensionMessageSenderParameters>>((uint64_t)v735, a3);
        if (v741)
        {
          uint64_t v313 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if ((_BYTE)v292)
          {
            *(void *)&long long v745 = v313;
            a3 = (IPC::Decoder *)((char *)&v745 + 8);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
            v314 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v314 = &unk_1EE9FF7F0;
            v314[1] = v745;
            uint64_t v315 = *((void *)&v745 + 1);
            *((void *)&v745 + 1) = 0;
            v314[2] = v315;
            *(void *)v732 = v314;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
            if (!v741) {
              goto LABEL_991;
            }
            WebKit::WebExtensionContext::runtimeWebPageSendMessage((uint64_t)this, (const WTF::StringImpl **)v735, (WTF::StringImpl **)&v735[8], (uint64_t)&v735[16], (WTF::StringImpl **)v732);
LABEL_459:
            uint64_t v316 = *(void *)v732;
            *(void *)v732 = 0;
            if (v316) {
              (*(void (**)(uint64_t))(*(void *)v316 + 8))(v316);
            }
          }
        }
LABEL_461:
        std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebKit::WebExtensionMessageSenderParameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v735, v292);
      }
      goto LABEL_807;
    case 1684:
      if (!WebKit::WebExtensionContext::isScriptingMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        int v15 = *((unsigned __int16 *)a3 + 25);
        goto LABEL_499;
      }
      IPC::Decoder::decode<std::tuple<WebKit::WebExtensionScriptInjectionParameters>>((uint64_t)v735, (uint64_t *)a3);
      if (!v735[136]) {
        goto LABEL_514;
      }
      uint64_t v317 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v318) {
        goto LABEL_514;
      }
      *(void *)&long long v745 = v317;
      a3 = (IPC::Decoder *)((char *)&v745 + 8);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
      v319 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v319 = &unk_1EE9FF840;
      v319[1] = v745;
      uint64_t v320 = *((void *)&v745 + 1);
      *((void *)&v745 + 1) = 0;
      v319[2] = v320;
      *(void *)v732 = v319;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
      if (!v735[136]) {
        goto LABEL_991;
      }
      WebKit::WebExtensionContext::scriptingExecuteScript((uint64_t)this, (uint64_t)v735, (uint64_t *)v732);
      uint64_t v321 = *(void *)v732;
      *(void *)v732 = 0;
      if (!v321) {
        goto LABEL_514;
      }
      goto LABEL_513;
    default:
LABEL_499:
      if (v15 != 1686) {
        goto LABEL_506;
      }
      if (WebKit::WebExtensionContext::isScriptingMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        IPC::Decoder::decode<std::tuple<WebKit::WebExtensionScriptInjectionParameters>>((uint64_t)v735, (uint64_t *)a3);
        if (v735[136])
        {
          uint64_t v344 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if (v345)
          {
            *(void *)&long long v745 = v344;
            a3 = (IPC::Decoder *)((char *)&v745 + 8);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
            v346 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v346 = &unk_1EE9FF868;
            v346[1] = v745;
            uint64_t v347 = *((void *)&v745 + 1);
            *((void *)&v745 + 1) = 0;
            v346[2] = v347;
            *(void *)v732 = v346;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
            if (!v735[136]) {
              goto LABEL_991;
            }
            WebKit::WebExtensionContext::scriptingInsertCSS((uint64_t)this, (uint64_t)v735, (uint64_t *)v732);
LABEL_512:
            uint64_t v321 = *(void *)v732;
            *(void *)v732 = 0;
            if (v321) {
LABEL_513:
            }
              (*(void (**)(uint64_t))(*(void *)v321 + 8))(v321);
            goto LABEL_514;
          }
        }
        goto LABEL_514;
      }
      int v15 = *((unsigned __int16 *)a3 + 25);
LABEL_506:
      if (v15 == 1688)
      {
        if (WebKit::WebExtensionContext::isScriptingMessageAllowed((WebKit::WebExtensionContext *)this))
        {
          IPC::Decoder::decode<std::tuple<WebKit::WebExtensionScriptInjectionParameters>>((uint64_t)v735, (uint64_t *)a3);
          if (v735[136])
          {
            uint64_t v348 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
            if (v349)
            {
              *(void *)&long long v745 = v348;
              a3 = (IPC::Decoder *)((char *)&v745 + 8);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
              v350 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v350 = &unk_1EE9FF890;
              v350[1] = v745;
              uint64_t v351 = *((void *)&v745 + 1);
              *((void *)&v745 + 1) = 0;
              v350[2] = v351;
              *(void *)v732 = v350;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
              if (!v735[136]) {
                goto LABEL_991;
              }
              WebKit::WebExtensionContext::scriptingRemoveCSS((uint64_t)this, (uint64_t)v735, (uint64_t *)v732);
              goto LABEL_512;
            }
          }
LABEL_514:
          std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v735);
          goto LABEL_807;
        }
        int v15 = *((unsigned __int16 *)a3 + 25);
      }
      if (v15 != 1687) {
        goto LABEL_530;
      }
      if (WebKit::WebExtensionContext::isScriptingMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v735, a3);
        if (!v735[16]) {
          goto LABEL_807;
        }
        uint64_t v352 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (!(_BYTE)v353) {
          goto LABEL_539;
        }
        *(void *)&long long v745 = v352;
        a3 = (IPC::Decoder *)((char *)&v745 + 8);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
        v354 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v354 = &unk_1EE9FF8B8;
        v354[1] = v745;
        uint64_t v355 = *((void *)&v745 + 1);
        *((void *)&v745 + 1) = 0;
        v354[2] = v355;
        *(void *)v732 = v354;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
        if (!v735[16]) {
          goto LABEL_991;
        }
        WebKit::WebExtensionContext::scriptingRegisterContentScripts(this, (uint64_t)v735, (uint64_t *)v732);
LABEL_536:
        uint64_t v360 = *(void *)v732;
        *(void *)v732 = 0;
        if (v360) {
          (*(void (**)(uint64_t))(*(void *)v360 + 8))(v360);
        }
        if (!v735[16]) {
          goto LABEL_807;
        }
LABEL_539:
        WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v735, v353);
        goto LABEL_807;
      }
      int v15 = *((unsigned __int16 *)a3 + 25);
LABEL_530:
      if (v15 == 1690)
      {
        if (WebKit::WebExtensionContext::isScriptingMessageAllowed((WebKit::WebExtensionContext *)this))
        {
          IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v735, a3);
          if (!v735[16]) {
            goto LABEL_807;
          }
          uint64_t v357 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if (!(_BYTE)v353) {
            goto LABEL_539;
          }
          *(void *)&long long v745 = v357;
          a3 = (IPC::Decoder *)((char *)&v745 + 8);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
          v358 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v358 = &unk_1EE9FF8E0;
          v358[1] = v745;
          uint64_t v359 = *((void *)&v745 + 1);
          *((void *)&v745 + 1) = 0;
          v358[2] = v359;
          *(void *)v732 = v358;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
          if (!v735[16]) {
            goto LABEL_991;
          }
          WebKit::WebExtensionContext::scriptingUpdateRegisteredScripts((uint64_t)this, (uint64_t)v735, (uint64_t *)v732);
          goto LABEL_536;
        }
        int v15 = *((unsigned __int16 *)a3 + 25);
      }
      if (v15 != 1685) {
        goto LABEL_549;
      }
      if (WebKit::WebExtensionContext::isScriptingMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a3, v14, (uint64_t)v735);
        if (!v735[16]) {
          goto LABEL_807;
        }
        uint64_t v361 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (!(_BYTE)v362) {
          goto LABEL_556;
        }
        *(void *)&long long v745 = v361;
        a3 = (IPC::Decoder *)((char *)&v745 + 8);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
        v363 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v363 = &unk_1EE9FF908;
        v363[1] = v745;
        uint64_t v364 = *((void *)&v745 + 1);
        *((void *)&v745 + 1) = 0;
        v363[2] = v364;
        *(void *)v732 = v363;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
        if (!v735[16]) {
          goto LABEL_991;
        }
        WebKit::WebExtensionContext::scriptingGetRegisteredScripts((uint64_t)this, (uint64_t)v735, (const WTF::StringImpl *)v732);
        uint64_t v365 = *(void *)v732;
        *(void *)v732 = 0;
        if (!v365) {
          goto LABEL_556;
        }
LABEL_555:
        (*(void (**)(uint64_t))(*(void *)v365 + 8))(v365);
LABEL_556:
        if (!v735[16]) {
          goto LABEL_807;
        }
        v369 = v735;
        goto LABEL_610;
      }
      int v15 = *((unsigned __int16 *)a3 + 25);
LABEL_549:
      if (v15 == 1689)
      {
        if (WebKit::WebExtensionContext::isScriptingMessageAllowed((WebKit::WebExtensionContext *)this))
        {
          IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a3, v14, (uint64_t)v735);
          if (!v735[16]) {
            goto LABEL_807;
          }
          uint64_t v366 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if (!(_BYTE)v362) {
            goto LABEL_556;
          }
          *(void *)&long long v745 = v366;
          a3 = (IPC::Decoder *)((char *)&v745 + 8);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
          v367 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v367 = &unk_1EE9FF930;
          v367[1] = v745;
          uint64_t v368 = *((void *)&v745 + 1);
          *((void *)&v745 + 1) = 0;
          v367[2] = v368;
          *(void *)v732 = v367;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
          if (!v735[16]) {
            goto LABEL_991;
          }
          WebKit::WebExtensionContext::scriptingUnregisterContentScripts((uint64_t)this, (uint64_t)v735, (uint64_t *)v732);
          uint64_t v365 = *(void *)v732;
          *(void *)v732 = 0;
          if (!v365) {
            goto LABEL_556;
          }
          goto LABEL_555;
        }
        int v15 = *((unsigned __int16 *)a3 + 25);
      }
      if (v15 != 1692) {
        goto LABEL_575;
      }
      if (WebKit::WebExtensionContext::isStorageMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v735, a3);
        if (!v735[32]) {
          goto LABEL_807;
        }
        uint64_t v374 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if ((_BYTE)v362)
        {
          *(void *)&long long v745 = v374;
          a3 = (IPC::Decoder *)((char *)&v745 + 8);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
          v375 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v375 = &unk_1EE9FF958;
          v375[1] = v745;
          uint64_t v376 = *((void *)&v745 + 1);
          *((void *)&v745 + 1) = 0;
          v375[2] = v376;
          *(void *)v732 = v375;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
          if (!v735[32]) {
            goto LABEL_991;
          }
          WebKit::WebExtensionContext::storageGet((WebKit::WebExtensionContext *)this, *(uint64_t *)v735, v735[8], (uint64_t)&v735[16], (uint64_t *)v732);
          uint64_t v377 = *(void *)v732;
          *(void *)v732 = 0;
          if (!v377) {
            goto LABEL_608;
          }
LABEL_607:
          (*(void (**)(uint64_t))(*(void *)v377 + 8))(v377);
LABEL_608:
          if (!v735[32]) {
            goto LABEL_807;
          }
          goto LABEL_609;
        }
        goto LABEL_609;
      }
      int v15 = *((unsigned __int16 *)a3 + 25);
LABEL_575:
      if (v15 == 1693)
      {
        if (WebKit::WebExtensionContext::isStorageMessageAllowed((WebKit::WebExtensionContext *)this))
        {
          IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v735, a3);
          if (!v735[32]) {
            goto LABEL_807;
          }
          uint64_t v378 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if ((_BYTE)v362)
          {
            *(void *)&long long v745 = v378;
            a3 = (IPC::Decoder *)((char *)&v745 + 8);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
            v379 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v379 = &unk_1EE9FF980;
            v379[1] = v745;
            uint64_t v380 = *((void *)&v745 + 1);
            *((void *)&v745 + 1) = 0;
            v379[2] = v380;
            *(void *)v732 = v379;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
            if (!v735[32]) {
              goto LABEL_991;
            }
            WebKit::WebExtensionContext::storageGetBytesInUse((WebKit::WebExtensionContext *)this, *(uint64_t *)v735, v735[8], (uint64_t)&v735[16], (uint64_t *)v732);
            uint64_t v377 = *(void *)v732;
            *(void *)v732 = 0;
            if (!v377) {
              goto LABEL_608;
            }
            goto LABEL_607;
          }
LABEL_609:
          v369 = &v735[16];
LABEL_610:
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v369, v362);
          goto LABEL_807;
        }
        int v15 = *((unsigned __int16 *)a3 + 25);
      }
      if (v15 != 1695) {
        goto LABEL_601;
      }
      if (WebKit::WebExtensionContext::isStorageMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        uint64_t v385 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (v386)
        {
          uint64_t v387 = v385;
          unsigned __int16 v388 = IPC::Decoder::decode<WebKit::WebExtensionDataType>((uint64_t *)a3);
          if (v388 >= 0x100u)
          {
            unsigned __int8 v389 = v388;
            IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v745);
            if (BYTE8(v745))
            {
              *(void *)v735 = v387;
              v735[8] = v389;
              v390 = (WTF::StringImpl *)v745;
              *(void *)&v735[16] = v745;
              v735[24] = 1;
              uint64_t v391 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
              if ((_BYTE)v21)
              {
                *(void *)&long long v745 = v391;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
                v392 = (void *)WTF::fastMalloc((WTF *)0x18);
                void *v392 = &unk_1EE9FF9A8;
                v392[1] = v745;
                uint64_t v393 = *((void *)&v745 + 1);
                *((void *)&v745 + 1) = 0;
                v392[2] = v393;
                *(void *)v732 = v392;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
                WebKit::WebExtensionContext::storageSet(this, v387, v389, &v735[16], (uint64_t *)v732);
                uint64_t v394 = *(void *)v732;
                *(void *)v732 = 0;
                if (v394) {
                  (*(void (**)(uint64_t))(*(void *)v394 + 8))(v394);
                }
                if (!v735[24]) {
                  goto LABEL_807;
                }
                v390 = *(WTF::StringImpl **)&v735[16];
              }
              *(void *)&v735[16] = 0;
              if (!v390) {
                goto LABEL_807;
              }
              if (*(_DWORD *)v390 != 2)
              {
                *(_DWORD *)v390 -= 2;
                goto LABEL_807;
              }
              long long v53 = v390;
LABEL_806:
              WTF::StringImpl::destroy(v53, v21);
              goto LABEL_807;
            }
          }
        }
LABEL_973:
        uint64_t v246 = *(void *)a3;
        uint64_t v673 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v248 = *((void *)a3 + 3);
        if (!v248 || !v673) {
          goto LABEL_807;
        }
LABEL_368:
        (*(void (**)(uint64_t, uint64_t))(*(void *)v248 + 16))(v248, v246);
        goto LABEL_807;
      }
      int v15 = *((unsigned __int16 *)a3 + 25);
LABEL_601:
      if (v15 == 1694)
      {
        if (WebKit::WebExtensionContext::isStorageMessageAllowed((WebKit::WebExtensionContext *)this))
        {
          IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebExtensionDataType,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v735, a3);
          if (!v735[32]) {
            goto LABEL_807;
          }
          uint64_t v395 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if ((_BYTE)v362)
          {
            *(void *)&long long v745 = v395;
            a3 = (IPC::Decoder *)((char *)&v745 + 8);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
            v396 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v396 = &unk_1EE9FF9D0;
            v396[1] = v745;
            uint64_t v397 = *((void *)&v745 + 1);
            *((void *)&v745 + 1) = 0;
            v396[2] = v397;
            *(void *)v732 = v396;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
            if (!v735[32]) {
              goto LABEL_991;
            }
            WebKit::WebExtensionContext::storageRemove(this, *(uint64_t *)v735, v735[8], (uint64_t)&v735[16], (uint64_t *)v732);
            uint64_t v377 = *(void *)v732;
            *(void *)v732 = 0;
            if (!v377) {
              goto LABEL_608;
            }
            goto LABEL_607;
          }
          goto LABEL_609;
        }
        int v15 = *((unsigned __int16 *)a3 + 25);
      }
      if (v15 == 1691)
      {
        if (WebKit::WebExtensionContext::isStorageMessageAllowed((WebKit::WebExtensionContext *)this))
        {
          uint64_t v398 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if (v399)
          {
            uint64_t v400 = v398;
            unsigned __int16 v401 = IPC::Decoder::decode<WebKit::WebExtensionDataType>((uint64_t *)a3);
            if (v401 > 0xFFu)
            {
              unsigned __int8 v435 = v401;
              uint64_t v436 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
              if (!v437) {
                goto LABEL_807;
              }
              *(void *)v735 = v436;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
              v438 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v438 = &unk_1EE9FF9F8;
              v438[1] = *(void *)v735;
              uint64_t v439 = *(void *)&v735[8];
              *(void *)&v735[8] = 0;
              v438[2] = v439;
              *(void *)&long long v745 = v438;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
              WebKit::WebExtensionContext::storageClear(this, v400, v435, (uint64_t *)&v745);
              goto LABEL_75;
            }
          }
          uint64_t v246 = *(void *)a3;
          uint64_t v247 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v248 = *((void *)a3 + 3);
          if (!v248) {
            goto LABEL_807;
          }
          goto LABEL_367;
        }
        int v15 = *((unsigned __int16 *)a3 + 25);
      }
      if (v15 != 1696) {
        break;
      }
      if (WebKit::WebExtensionContext::isStorageMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        uint64_t v402 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (!v403) {
          goto LABEL_1008;
        }
        uint64_t v404 = v402;
        unsigned __int16 v405 = IPC::Decoder::decode<WebKit::WebExtensionDataType>((uint64_t *)a3);
        if (v405 < 0x100u) {
          goto LABEL_1008;
        }
        unint64_t v406 = *((void *)a3 + 1);
        uint64_t v407 = *(void *)a3;
        unint64_t v408 = *((void *)a3 + 2) - *(void *)a3;
        if (v406 <= v408)
        {
          unint64_t v692 = 0;
          uint64_t v693 = 0;
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v694 = *((void *)a3 + 3);
          if (v694)
          {
            if (v406)
            {
              (*(void (**)(uint64_t))(*(void *)v694 + 16))(v694);
              uint64_t v693 = *(void *)a3;
              unint64_t v692 = *((void *)a3 + 1);
            }
            else
            {
              unint64_t v692 = 0;
              uint64_t v693 = 0;
            }
          }
        }
        else
        {
          v409 = (unsigned __int8 *)(v407 + v408);
          *((void *)a3 + 2) = v409 + 1;
          if (v407)
          {
            unsigned int v410 = *v409;
            if (v410 < 2)
            {
              unsigned __int8 v411 = v405;
              uint64_t v412 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
              if (!v413) {
                goto LABEL_807;
              }
              *(void *)v735 = v412;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
              v414 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v414 = &unk_1EE9FFA20;
              v414[1] = *(void *)v735;
              uint64_t v415 = *(void *)&v735[8];
              *(void *)&v735[8] = 0;
              v414[2] = v415;
              *(void *)&long long v745 = v414;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
              WebKit::WebExtensionContext::storageSetAccessLevel((WebKit::WebExtensionContext *)this, v404, v411, v410, (uint64_t *)&v745);
              goto LABEL_75;
            }
            goto LABEL_1007;
          }
          unint64_t v692 = v406;
          uint64_t v693 = 0;
        }
        unint64_t v406 = 0;
        uint64_t v407 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v695 = *((void *)a3 + 3);
        if (v695)
        {
          if (v692)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v695 + 16))(v695, v693, v692);
            uint64_t v407 = *(void *)a3;
            unint64_t v406 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v406 = 0;
            uint64_t v407 = 0;
          }
        }
LABEL_1007:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v696 = *((void *)a3 + 3);
        if (v696 && v406) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v696 + 16))(v696, v407);
        }
LABEL_1008:
        uint64_t v246 = *(void *)a3;
        uint64_t v247 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v248 = *((void *)a3 + 3);
        if (!v248) {
          goto LABEL_807;
        }
        goto LABEL_367;
      }
      int v15 = *((unsigned __int16 *)a3 + 25);
      break;
  }
  switch(v15)
  {
    case 1697:
      v416 = this[9];
      if (!v416 || !v416[1]) {
        goto LABEL_807;
      }
      uint64_t v417 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v418) {
        goto LABEL_1045;
      }
      uint64_t v419 = v417;
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3, v735);
      if (!v735[16]) {
        goto LABEL_1045;
      }
      unint64_t v420 = *((void *)a3 + 1);
      uint64_t v421 = *(void *)a3;
      unint64_t v422 = *((void *)a3 + 2) - *(void *)a3;
      if (v420 <= v422)
      {
        unint64_t v712 = 0;
        uint64_t v713 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v714 = *((void *)a3 + 3);
        if (v714)
        {
          if (v420)
          {
            (*(void (**)(uint64_t))(*(void *)v714 + 16))(v714);
            uint64_t v713 = *(void *)a3;
            unint64_t v712 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v712 = 0;
            uint64_t v713 = 0;
          }
        }
      }
      else
      {
        v423 = (unsigned __int8 *)(v421 + v422);
        *((void *)a3 + 2) = v423 + 1;
        if (v421)
        {
          unsigned int v424 = *v423;
          if (v424 < 2)
          {
            if (v420 > (unint64_t)&v423[-v421 + 1])
            {
              *((void *)a3 + 2) = v423 + 2;
              __int16 v425 = v423[1];
              uint64_t v426 = *(void *)v735;
              char v427 = v735[8];
              uint64_t v428 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
              if (v429)
              {
                *(void *)v735 = v428;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
                v430 = (void *)WTF::fastMalloc((WTF *)0x18);
                void *v430 = &unk_1EE9FFC00;
                v430[1] = *(void *)v735;
                uint64_t v431 = *(void *)&v735[8];
                *(void *)&v735[8] = 0;
                v430[2] = v431;
                *(void *)&long long v745 = v430;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
                WebKit::WebExtensionContext::tabsCaptureVisibleTab((uint64_t)this, v419, v426, v427, v424, v425, (uint64_t *)&v745);
                uint64_t v126 = v745;
                *(void *)&long long v745 = 0;
                if (v126) {
                  goto LABEL_850;
                }
              }
              goto LABEL_807;
            }
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v726 = *((void *)a3 + 3);
            if (!v726
              || ((*(void (**)(uint64_t))(*(void *)v726 + 16))(v726),
                  uint64_t v421 = *(void *)a3,
                  unint64_t v420 = *((void *)a3 + 1),
                  uint64_t v716 = *((void *)a3 + 3),
                  *(void *)a3 = 0,
                  *((void *)a3 + 1) = 0,
                  !v716))
            {
LABEL_1045:
              uint64_t v201 = *(void *)a3;
              uint64_t v202 = *((void *)a3 + 1);
              *(void *)a3 = 0;
              *((void *)a3 + 1) = 0;
              uint64_t v203 = *((void *)a3 + 3);
              if (v203) {
                goto LABEL_315;
              }
              goto LABEL_807;
            }
LABEL_1060:
            if (v420) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v716 + 16))(v716, v421);
            }
            goto LABEL_1045;
          }
LABEL_1044:
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v716 = *((void *)a3 + 3);
          if (!v716) {
            goto LABEL_1045;
          }
          goto LABEL_1060;
        }
        unint64_t v712 = v420;
        uint64_t v713 = 0;
      }
      unint64_t v420 = 0;
      uint64_t v421 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v715 = *((void *)a3 + 3);
      if (v715)
      {
        if (v712)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v715 + 16))(v715, v713, v712);
          uint64_t v421 = *(void *)a3;
          unint64_t v420 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v420 = 0;
          uint64_t v421 = 0;
        }
      }
      goto LABEL_1044;
    case 1698:
      v497 = this[9];
      if (!v497 || !v497[1]) {
        goto LABEL_807;
      }
      uint64_t v498 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v499
        && (uint64_t v3 = v498,
            uint64_t v500 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3),
            v501))
      {
        uint64_t v4 = v500;
        IPC::Decoder::decode<WTF::String>(a3, (uint64_t)v730);
        if (LOBYTE(v730[1]))
        {
          IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3, v732);
          if (v732[16])
          {
            IPC::Decoder::decode<WebKit::WebExtensionMessageSenderParameters>(a3, (uint64_t)&v745);
            char v504 = v752;
            if (v752)
            {
              if (!LOBYTE(v730[1]) || !v732[16]) {
                goto LABEL_991;
              }
              *(void *)v735 = v3;
              *(void *)&v735[8] = v4;
              v505 = v730[0];
              v730[0] = 0;
              *(void *)&v735[16] = v505;
              *(_OWORD *)&v735[24] = *(_OWORD *)v732;
              std::__tuple_leaf<3ul,WebKit::WebExtensionMessageSenderParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionMessageSenderParameters,void>((uint64_t)&v735[40], (uint64_t *)&v745);
              char v504 = 1;
            }
            else
            {
              v735[0] = 0;
            }
            char v744 = v504;
            std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v745, v503);
          }
          else
          {
            v735[0] = 0;
            char v744 = 0;
          }
          if (LOBYTE(v730[1]))
          {
            v661 = v730[0];
            v730[0] = 0;
            if (v661)
            {
              if (*(_DWORD *)v661 == 2) {
                WTF::StringImpl::destroy(v661, v502);
              }
              else {
                *(_DWORD *)v661 -= 2;
              }
            }
          }
        }
        else
        {
          v735[0] = 0;
          char v744 = 0;
        }
        if (v744) {
          goto LABEL_932;
        }
      }
      else
      {
        v735[0] = 0;
        char v744 = 0;
      }
      uint64_t v697 = *(void *)a3;
      uint64_t v698 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v699 = *((void *)a3 + 3);
      if (!v699) {
        goto LABEL_807;
      }
      if (!v698) {
        goto LABEL_807;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v699 + 16))(v699, v697);
      if (!v744) {
        goto LABEL_807;
      }
LABEL_932:
      uint64_t v662 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)v663)
      {
        *(void *)&long long v745 = v662;
        a3 = (IPC::Decoder *)((char *)&v745 + 8);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
        v664 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v664 = &unk_1EE9FFC50;
        v664[1] = v745;
        uint64_t v665 = *((void *)&v745 + 1);
        *((void *)&v745 + 1) = 0;
        v664[2] = v665;
        *(void *)v732 = v664;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
        if (!v744) {
          goto LABEL_991;
        }
        long long v666 = *(_OWORD *)&v735[16];
        *(void *)&v735[16] = 0;
        *(void *)&long long v745 = v666;
        WebKit::WebExtensionContext::tabsConnect((uint64_t)this, *(uint64_t *)v735, *(uint64_t *)&v735[8], (uint64_t)&v745, *((uint64_t *)&v666 + 1), *(uint64_t *)&v735[32], (uint64_t)&v735[40], (uint64_t *)v732);
        v667 = (WTF::StringImpl *)v745;
        *(void *)&long long v745 = 0;
        if (v667)
        {
          if (*(_DWORD *)v667 == 2) {
            WTF::StringImpl::destroy(v667, v663);
          }
          else {
            *(_DWORD *)v667 -= 2;
          }
        }
        uint64_t v668 = *(void *)v732;
        *(void *)v732 = 0;
        if (v668) {
          (*(void (**)(uint64_t))(*(void *)v668 + 8))(v668);
        }
      }
      if (v744)
      {
        v669 = v740;
        v740 = 0;
        if (v669)
        {
          if (*(_DWORD *)v669 == 2) {
            WTF::StringImpl::destroy(v669, v663);
          }
          else {
            *(_DWORD *)v669 -= 2;
          }
        }
        std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v735[56]);
        if (v735[48])
        {
          v671 = *(WTF::StringImpl **)&v735[40];
          *(void *)&v735[40] = 0;
          if (v671)
          {
            if (*(_DWORD *)v671 == 2) {
              WTF::StringImpl::destroy(v671, v21);
            }
            else {
              *(_DWORD *)v671 -= 2;
            }
          }
        }
        long long v53 = *(WTF::StringImpl **)&v735[16];
        *(void *)&v735[16] = 0;
        if (v53) {
          goto LABEL_57;
        }
      }
      goto LABEL_807;
    case 1699:
      v476 = this[9];
      if (!v476 || !v476[1]) {
        goto LABEL_807;
      }
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a3, v732);
      if (v732[16])
      {
        IPC::Decoder::decode<WebKit::WebExtensionTabParameters>((uint64_t *)a3, &v745);
        char v477 = v751;
        if (v751)
        {
          if (!v732[16]) {
            goto LABEL_991;
          }
          *(_OWORD *)v735 = *(_OWORD *)v732;
          std::__tuple_leaf<1ul,WebKit::WebExtensionTabParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)&v735[16], (uint64_t)&v745);
          char v477 = 1;
        }
        else
        {
          v735[0] = 0;
        }
        v737[24] = v477;
        std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v745);
        if (v737[24]) {
          goto LABEL_884;
        }
      }
      else
      {
        v735[0] = 0;
        v737[24] = 0;
      }
      uint64_t v706 = *(void *)a3;
      uint64_t v707 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v708 = *((void *)a3 + 3);
      if (!v708) {
        goto LABEL_807;
      }
      if (!v707) {
        goto LABEL_807;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v708 + 16))(v708, v706);
      if (!v737[24]) {
        goto LABEL_807;
      }
LABEL_884:
      uint64_t v644 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)v21)
      {
        *(void *)&long long v745 = v644;
        a3 = (IPC::Decoder *)((char *)&v745 + 8);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
        v645 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v645 = &unk_1EE9FFA48;
        v645[1] = v745;
        uint64_t v646 = *((void *)&v745 + 1);
        *((void *)&v745 + 1) = 0;
        v645[2] = v646;
        *(void *)v732 = v645;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
        if (!v737[24]) {
          goto LABEL_991;
        }
        WebKit::WebExtensionContext::tabsCreate((uint64_t)this, *(uint64_t *)v735, v735[8], (uint64_t)&v735[16], (uint64_t *)v732);
        uint64_t v647 = *(void *)v732;
        *(void *)v732 = 0;
        if (v647) {
          (*(void (**)(uint64_t))(*(void *)v647 + 8))(v647);
        }
      }
      if (v737[24])
      {
        if (v735[88])
        {
          v648 = *(WTF::StringImpl **)&v735[80];
          *(void *)&v735[80] = 0;
          if (v648)
          {
            if (*(_DWORD *)v648 == 2) {
              WTF::StringImpl::destroy(v648, v21);
            }
            else {
              *(_DWORD *)v648 -= 2;
            }
          }
        }
        if (v735[72]) {
          goto LABEL_485;
        }
      }
      goto LABEL_807;
    case 1700:
      v484 = this[9];
      if (v484)
      {
        if (v484[1])
        {
          IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t)v735, a3);
          if (v735[24])
          {
            uint64_t v485 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
            if (v486)
            {
              *(void *)&long long v745 = v485;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
              v487 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v487 = &unk_1EE9FFBB0;
              v487[1] = v745;
              uint64_t v488 = *((void *)&v745 + 1);
              *((void *)&v745 + 1) = 0;
              v487[2] = v488;
              *(void *)v732 = v487;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
              WebKit::WebExtensionContext::tabsDetectLanguage((uint64_t *)this, *(uint64_t *)v735, *(uint64_t *)&v735[8], v735[16], (uint64_t *)v732);
              uint64_t v48 = *(void *)v732;
              *(void *)v732 = 0;
              if (v48) {
                goto LABEL_775;
              }
            }
          }
        }
      }
      goto LABEL_807;
    case 1701:
      v461 = this[9];
      if (!v461 || !v461[1]) {
        goto LABEL_807;
      }
      uint64_t v462 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v463)
      {
        uint64_t v3 = v462;
        IPC::Decoder::decode<WebKit::WebExtensionTabParameters>((uint64_t *)a3, &v745);
        char v464 = v751;
        if (v751)
        {
          *(void *)v735 = v3;
          std::__tuple_leaf<1ul,WebKit::WebExtensionTabParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionTabParameters,void>((uint64_t)&v735[8], (uint64_t)&v745);
          char v464 = 1;
        }
        else
        {
          v735[0] = 0;
        }
        v737[16] = v464;
        std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v745);
        if (v737[16]) {
          goto LABEL_873;
        }
      }
      else
      {
        v735[0] = 0;
        v737[16] = 0;
      }
      uint64_t v703 = *(void *)a3;
      uint64_t v704 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v705 = *((void *)a3 + 3);
      if (!v705) {
        goto LABEL_807;
      }
      if (!v704) {
        goto LABEL_807;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v705 + 16))(v705, v703);
      if (!v737[16]) {
        goto LABEL_807;
      }
LABEL_873:
      uint64_t v639 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)v21)
      {
        *(void *)&long long v745 = v639;
        a3 = (IPC::Decoder *)((char *)&v745 + 8);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
        v640 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v640 = &unk_1EE9FFA98;
        v640[1] = v745;
        uint64_t v641 = *((void *)&v745 + 1);
        *((void *)&v745 + 1) = 0;
        v640[2] = v641;
        *(void *)v732 = v640;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
        if (!v737[16]) {
          goto LABEL_991;
        }
        WebKit::WebExtensionContext::tabsDuplicate((uint64_t *)this, *(uint64_t *)v735, (uint64_t)&v735[8], (uint64_t *)v732);
        uint64_t v642 = *(void *)v732;
        *(void *)v732 = 0;
        if (v642) {
          (*(void (**)(uint64_t))(*(void *)v642 + 8))(v642);
        }
      }
      if (v737[16])
      {
        if (v735[80])
        {
          v643 = *(WTF::StringImpl **)&v735[72];
          *(void *)&v735[72] = 0;
          if (v643)
          {
            if (*(_DWORD *)v643 == 2) {
              WTF::StringImpl::destroy(v643, v21);
            }
            else {
              *(_DWORD *)v643 -= 2;
            }
          }
        }
        if (v735[64])
        {
          long long v53 = *(WTF::StringImpl **)&v735[24];
          *(void *)&v735[24] = 0;
          if (v53) {
            goto LABEL_57;
          }
        }
      }
      goto LABEL_807;
    case 1702:
      v521 = this[9];
      if (v521 && v521[1])
      {
        IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters>>((uint64_t)v735, a3);
        if (!BYTE8(v736)) {
          goto LABEL_743;
        }
        uint64_t v522 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (!v523) {
          goto LABEL_743;
        }
        *(void *)&long long v745 = v522;
        a3 = (IPC::Decoder *)((char *)&v745 + 8);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
        v524 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v524 = &unk_1EE9FFCF0;
        v524[1] = v745;
        uint64_t v525 = *((void *)&v745 + 1);
        *((void *)&v745 + 1) = 0;
        v524[2] = v525;
        *(void *)v732 = v524;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
        if (!BYTE8(v736)) {
          goto LABEL_991;
        }
        WebKit::WebExtensionContext::tabsExecuteScript((uint64_t)this, *(uint64_t *)v735, *(uint64_t *)&v735[8], v735[16], (uint64_t)&v735[24], (uint64_t *)v732);
        uint64_t v483 = *(void *)v732;
        *(void *)v732 = 0;
        if (!v483) {
          goto LABEL_743;
        }
        goto LABEL_742;
      }
      goto LABEL_807;
    case 1703:
      v548 = this[9];
      if (v548)
      {
        if (v548[1])
        {
          uint64_t v549 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
          if (v550)
          {
            uint64_t v551 = v549;
            uint64_t v552 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
            if (v553)
            {
              *(void *)v735 = v552;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
              v554 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v554 = &unk_1EE9FFAC0;
              v554[1] = *(void *)v735;
              uint64_t v555 = *(void *)&v735[8];
              *(void *)&v735[8] = 0;
              v554[2] = v555;
              *(void *)&long long v745 = v554;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
              WebKit::WebExtensionContext::tabsGet((uint64_t *)this, v551, (uint64_t *)&v745);
              goto LABEL_763;
            }
          }
        }
      }
      goto LABEL_807;
    case 1704:
      v489 = this[9];
      if (v489)
      {
        if (v489[1])
        {
          uint64_t v490 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
          if (v491)
          {
            uint64_t v492 = v490;
            uint64_t v493 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
            if (v494)
            {
              *(void *)v735 = v493;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
              v495 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v495 = &unk_1EE9FFAE8;
              v495[1] = *(void *)v735;
              uint64_t v496 = *(void *)&v735[8];
              *(void *)&v735[8] = 0;
              v495[2] = v496;
              *(void *)&long long v745 = v495;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
              WebKit::WebExtensionContext::tabsGetCurrent((uint64_t)this, v492, (uint64_t *)&v745);
LABEL_763:
              uint64_t v126 = v745;
              *(void *)&long long v745 = 0;
              if (v126) {
                goto LABEL_850;
              }
            }
          }
        }
      }
      goto LABEL_807;
    case 1705:
      v561 = this[9];
      if (v561)
      {
        if (v561[1])
        {
          IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t)v735, a3);
          if (v735[24])
          {
            uint64_t v562 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
            if (v563)
            {
              *(void *)&long long v745 = v562;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
              v564 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v564 = &unk_1EE9FFC78;
              v564[1] = v745;
              uint64_t v565 = *((void *)&v745 + 1);
              *((void *)&v745 + 1) = 0;
              v564[2] = v565;
              *(void *)v732 = v564;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
              WebKit::WebExtensionContext::tabsGetZoom((uint64_t *)this, *(uint64_t *)v735, *(uint64_t *)&v735[8], v735[16], (uint64_t *)v732);
              uint64_t v48 = *(void *)v732;
              *(void *)v732 = 0;
              if (v48) {
                goto LABEL_775;
              }
            }
          }
        }
      }
      goto LABEL_807;
    case 1706:
      v471 = this[9];
      if (v471)
      {
        if (v471[1])
        {
          IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t)v735, a3);
          if (v735[24])
          {
            uint64_t v472 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
            if (v473)
            {
              *(void *)&long long v745 = v472;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
              v474 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v474 = &unk_1EE9FFB60;
              v474[1] = v745;
              uint64_t v475 = *((void *)&v745 + 1);
              *((void *)&v745 + 1) = 0;
              v474[2] = v475;
              *(void *)v732 = v474;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
              WebKit::WebExtensionContext::tabsGoBack((uint64_t *)this, *(uint64_t *)v735, *(uint64_t *)&v735[8], v735[16], (uint64_t *)v732);
              goto LABEL_781;
            }
          }
        }
      }
      goto LABEL_807;
    case 1707:
      v566 = this[9];
      if (v566)
      {
        if (v566[1])
        {
          IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t)v735, a3);
          if (v735[24])
          {
            uint64_t v567 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
            if (v568)
            {
              *(void *)&long long v745 = v567;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
              v569 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v569 = &unk_1EE9FFB88;
              v569[1] = v745;
              uint64_t v570 = *((void *)&v745 + 1);
              *((void *)&v745 + 1) = 0;
              v569[2] = v570;
              *(void *)v732 = v569;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
              WebKit::WebExtensionContext::tabsGoForward((uint64_t *)this, *(uint64_t *)v735, *(uint64_t *)&v735[8], v735[16], (uint64_t *)v732);
              goto LABEL_781;
            }
          }
        }
      }
      goto LABEL_807;
    case 1708:
      v456 = this[9];
      if (v456 && v456[1])
      {
        IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters>>((uint64_t)v735, a3);
        if (!BYTE8(v736)) {
          goto LABEL_743;
        }
        uint64_t v457 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (!v458) {
          goto LABEL_743;
        }
        *(void *)&long long v745 = v457;
        a3 = (IPC::Decoder *)((char *)&v745 + 8);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
        v459 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v459 = &unk_1EE9FFD18;
        v459[1] = v745;
        uint64_t v460 = *((void *)&v745 + 1);
        *((void *)&v745 + 1) = 0;
        v459[2] = v460;
        *(void *)v732 = v459;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
        if (!BYTE8(v736)) {
          goto LABEL_991;
        }
        WebKit::WebExtensionContext::tabsInsertCSS((uint64_t)this, *(uint64_t *)v735, *(uint64_t *)&v735[8], v735[16], (uint64_t)&v735[24], (uint64_t *)v732);
        goto LABEL_704;
      }
      goto LABEL_807;
    case 1709:
      v465 = this[9];
      if (!v465 || !v465[1]) {
        goto LABEL_807;
      }
      uint64_t v466 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v467) {
        goto LABEL_973;
      }
      uint64_t v468 = v466;
      IPC::ArgumentCoder<WebKit::WebExtensionTabQueryParameters,void>::decode(a3, (uint64_t)&v745);
      if (!(_BYTE)v747)
      {
        uint64_t v709 = *(void *)a3;
        uint64_t v710 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v711 = *((void *)a3 + 3);
        if (!v711) {
          goto LABEL_973;
        }
        if (!v710) {
          goto LABEL_973;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v711 + 16))(v711, v709);
        if (!(_BYTE)v747) {
          goto LABEL_973;
        }
      }
      *(void *)v735 = v468;
      v735[8] = 0;
      v735[24] = 0;
      if (v746[0])
      {
        uint64_t v470 = *((void *)&v745 + 1);
        *(void *)&v735[8] = v745;
        long long v745 = 0uLL;
        *(void *)&v735[16] = v470;
        v735[24] = 1;
      }
      v735[32] = 0;
      v735[40] = 0;
      if (v746[16])
      {
        *(void *)&v735[32] = *(void *)&v746[8];
        LODWORD(v6) = 1;
        v735[40] = 1;
        *(_OWORD *)&v735[48] = *(_OWORD *)&v746[24];
        *(_OWORD *)&v735[64] = *(_OWORD *)&v746[40];
        *(_OWORD *)&v735[80] = *(_OWORD *)&v746[56];
        *(void *)&v735[94] = *(void *)&v746[70];
        *(void *)&v746[8] = 0;
      }
      else
      {
        LODWORD(v6) = 0;
        *(_OWORD *)&v735[48] = *(_OWORD *)&v746[24];
        *(_OWORD *)&v735[64] = *(_OWORD *)&v746[40];
        *(_OWORD *)&v735[80] = *(_OWORD *)&v746[56];
        *(void *)&v735[94] = *(void *)&v746[70];
      }
      uint64_t v3 = (uint64_t)&v735[8];
      v735[104] = 1;
      if (v746[0]) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v745, v469);
      }
      uint64_t v649 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!(_BYTE)v362) {
        goto LABEL_904;
      }
      *(void *)&long long v745 = v649;
      a3 = (IPC::Decoder *)((char *)&v745 + 8);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
      v650 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v650 = &unk_1EE9FFB10;
      v650[1] = v745;
      uint64_t v651 = *((void *)&v745 + 1);
      *((void *)&v745 + 1) = 0;
      v650[2] = v651;
      *(void *)v732 = v650;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
      if (!v735[104]) {
        goto LABEL_991;
      }
      WebKit::WebExtensionContext::tabsQuery((unsigned int *)this, *(uint64_t *)v735, (uint64_t)&v735[8], (WebKit::WebExtensionWindow **)v732);
      uint64_t v652 = *(void *)v732;
      *(void *)v732 = 0;
      if (v652) {
        (*(void (**)(uint64_t))(*(void *)v652 + 8))(v652);
      }
      if (v735[104])
      {
        LODWORD(v6) = v735[40];
LABEL_904:
        if (v6)
        {
          v653 = *(WTF::StringImpl **)&v735[32];
          *(void *)&v735[32] = 0;
          if (v653)
          {
            if (*(_DWORD *)v653 == 2) {
              WTF::StringImpl::destroy(v653, (WTF::StringImpl *)v362);
            }
            else {
              *(_DWORD *)v653 -= 2;
            }
          }
        }
        if (v735[24])
        {
          v369 = &v735[8];
          goto LABEL_610;
        }
      }
      goto LABEL_807;
    case 1710:
      v533 = this[9];
      if (!v533 || !v533[1]) {
        goto LABEL_807;
      }
      uint64_t v534 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v535) {
        goto LABEL_1050;
      }
      uint64_t v536 = v534;
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3, v735);
      if (!v735[16]) {
        goto LABEL_1050;
      }
      unint64_t v537 = *((void *)a3 + 1);
      uint64_t v538 = *(void *)a3;
      unint64_t v539 = *((void *)a3 + 2) - *(void *)a3;
      if (v537 <= v539)
      {
        unint64_t v717 = 0;
        uint64_t v718 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v719 = *((void *)a3 + 3);
        if (v719)
        {
          if (v537)
          {
            (*(void (**)(uint64_t))(*(void *)v719 + 16))(v719);
            uint64_t v718 = *(void *)a3;
            unint64_t v717 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v717 = 0;
            uint64_t v718 = 0;
          }
        }
        goto LABEL_1048;
      }
      v540 = (unsigned __int8 *)(v538 + v539);
      *((void *)a3 + 2) = v540 + 1;
      if (!v538)
      {
        unint64_t v717 = v537;
        uint64_t v718 = 0;
LABEL_1048:
        unint64_t v537 = 0;
        uint64_t v538 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v720 = *((void *)a3 + 3);
        if (v720)
        {
          if (v717)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v720 + 16))(v720, v718, v717);
            uint64_t v538 = *(void *)a3;
            unint64_t v537 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v537 = 0;
            uint64_t v538 = 0;
          }
        }
        goto LABEL_1049;
      }
      unsigned int v541 = *v540;
      if (v541 < 2)
      {
        uint64_t v542 = *(void *)v735;
        char v543 = v735[8];
        uint64_t v544 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (v545)
        {
          *(void *)v735 = v544;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
          v546 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v546 = &unk_1EE9FFB38;
          v546[1] = *(void *)v735;
          uint64_t v547 = *(void *)&v735[8];
          *(void *)&v735[8] = 0;
          v546[2] = v547;
          *(void *)&long long v745 = v546;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
          WebKit::WebExtensionContext::tabsReload((uint64_t *)this, v536, v542, v543, v541 != 0, (uint64_t *)&v745);
          goto LABEL_75;
        }
        goto LABEL_807;
      }
LABEL_1049:
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v721 = *((void *)a3 + 3);
      if (v721)
      {
        if (v537)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v721 + 16))(v721, v538);
          uint64_t v727 = *((void *)a3 + 3);
          uint64_t v728 = *(void *)a3;
          uint64_t v729 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          if (v727)
          {
            if (v729) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v727 + 16))(v727, v728);
            }
          }
        }
      }
LABEL_1050:
      uint64_t v201 = *(void *)a3;
      uint64_t v202 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v203 = *((void *)a3 + 3);
      if (v203) {
        goto LABEL_315;
      }
LABEL_807:
      CFTypeRef v582 = this[1];
      CFRelease(v582);
      return;
    case 1711:
      v447 = this[9];
      if (v447 && v447[1])
      {
        IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, v14, (uint64_t)v735);
        if (v735[16])
        {
          v448 = *(WTF **)v735;
          uint64_t v449 = *(void *)&v735[8];
          uint64_t v450 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if ((_BYTE)v451)
          {
            *(void *)v735 = v450;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
            v452 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v452 = &unk_1EE9FFCC8;
            v452[1] = *(void *)v735;
            uint64_t v453 = *(void *)&v735[8];
            *(void *)&v735[8] = 0;
            v452[2] = v453;
            *(void *)&long long v745 = v452;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
            *(void *)v735 = v448;
            *(void *)&v735[8] = v449;
            WebKit::WebExtensionContext::tabsRemove((uint64_t)this, (uint64_t *)v735, (uint64_t *)&v745);
            v455 = *(WTF **)v735;
            if (*(void *)v735)
            {
              *(void *)v735 = 0;
              *(_DWORD *)&v735[8] = 0;
              WTF::fastFree(v455, v454);
            }
            goto LABEL_836;
          }
          if (v448) {
            WTF::fastFree(v448, v451);
          }
        }
        else
        {
          uint64_t v201 = *(void *)a3;
          uint64_t v202 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v203 = *((void *)a3 + 3);
          if (v203) {
            goto LABEL_315;
          }
        }
      }
      goto LABEL_807;
    case 1712:
      v478 = this[9];
      if (v478 && v478[1])
      {
        IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters>>((uint64_t)v735, a3);
        if (BYTE8(v736))
        {
          uint64_t v479 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if (v480)
          {
            *(void *)&long long v745 = v479;
            a3 = (IPC::Decoder *)((char *)&v745 + 8);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
            v481 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v481 = &unk_1EE9FFD40;
            v481[1] = v745;
            uint64_t v482 = *((void *)&v745 + 1);
            *((void *)&v745 + 1) = 0;
            v481[2] = v482;
            *(void *)v732 = v481;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
            if (!BYTE8(v736)) {
              goto LABEL_991;
            }
            WebKit::WebExtensionContext::tabsRemoveCSS((uint64_t *)this, *(uint64_t *)v735, *(uint64_t *)&v735[8], v735[16], (uint64_t)&v735[24], (uint64_t *)v732);
LABEL_704:
            uint64_t v483 = *(void *)v732;
            *(void *)v732 = 0;
            if (v483) {
LABEL_742:
            }
              (*(void (**)(uint64_t))(*(void *)v483 + 8))(v483);
          }
        }
LABEL_743:
        std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebExtensionScriptInjectionParameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v735);
      }
      goto LABEL_807;
    case 1713:
      v440 = this[9];
      if (!v440 || !v440[1]) {
        goto LABEL_807;
      }
      uint64_t v441 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v442)
      {
        uint64_t v3 = v441;
        IPC::Decoder::decode<WTF::String>(a3, (uint64_t)v730);
        if (LOBYTE(v730[1]))
        {
          IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3, v732);
          if (v732[16])
          {
            IPC::Decoder::decode<WebKit::WebExtensionMessageSenderParameters>(a3, (uint64_t)&v745);
            char v445 = v752;
            if (v752)
            {
              if (!LOBYTE(v730[1]) || !v732[16]) {
                goto LABEL_991;
              }
              v446 = v730[0];
              v730[0] = 0;
              *(void *)v735 = v3;
              *(void *)&v735[8] = v446;
              *(_OWORD *)&v735[16] = *(_OWORD *)v732;
              std::__tuple_leaf<3ul,WebKit::WebExtensionMessageSenderParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionMessageSenderParameters,void>((uint64_t)&v735[32], (uint64_t *)&v745);
              char v445 = 1;
            }
            else
            {
              v735[0] = 0;
            }
            char v743 = v445;
            std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v745, v444);
          }
          else
          {
            v735[0] = 0;
            char v743 = 0;
          }
          if (LOBYTE(v730[1]))
          {
            v654 = v730[0];
            v730[0] = 0;
            if (v654)
            {
              if (*(_DWORD *)v654 == 2) {
                WTF::StringImpl::destroy(v654, v443);
              }
              else {
                *(_DWORD *)v654 -= 2;
              }
            }
          }
        }
        else
        {
          v735[0] = 0;
          char v743 = 0;
        }
        if (v743) {
          goto LABEL_916;
        }
      }
      else
      {
        v735[0] = 0;
        char v743 = 0;
      }
      uint64_t v700 = *(void *)a3;
      uint64_t v701 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v702 = *((void *)a3 + 3);
      if (!v702) {
        goto LABEL_807;
      }
      if (!v701) {
        goto LABEL_807;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v702 + 16))(v702, v700);
      if (!v743) {
        goto LABEL_807;
      }
LABEL_916:
      uint64_t v655 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)v656)
      {
        *(void *)&long long v745 = v655;
        a3 = (IPC::Decoder *)((char *)&v745 + 8);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
        v657 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v657 = &unk_1EE9FFC28;
        v657[1] = v745;
        uint64_t v658 = *((void *)&v745 + 1);
        *((void *)&v745 + 1) = 0;
        v657[2] = v658;
        *(void *)v732 = v657;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
        if (!v743) {
          goto LABEL_991;
        }
        WebKit::WebExtensionContext::tabsSendMessage((uint64_t)this, *(uint64_t *)v735, (uint64_t)&v735[8], *(uint64_t *)&v735[16], *(uint64_t *)&v735[24], (uint64_t)&v735[32], (uint64_t *)v732);
        uint64_t v659 = *(void *)v732;
        *(void *)v732 = 0;
        if (v659) {
          (*(void (**)(uint64_t))(*(void *)v659 + 8))(v659);
        }
      }
      if (v743)
      {
        v660 = v739;
        v739 = 0;
        if (v660)
        {
          if (*(_DWORD *)v660 == 2) {
            WTF::StringImpl::destroy(v660, v656);
          }
          else {
            *(_DWORD *)v660 -= 2;
          }
        }
        std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v735[48]);
        if (v735[40])
        {
          v670 = *(WTF::StringImpl **)&v735[32];
          *(void *)&v735[32] = 0;
          if (v670)
          {
            if (*(_DWORD *)v670 == 2) {
              WTF::StringImpl::destroy(v670, v21);
            }
            else {
              *(_DWORD *)v670 -= 2;
            }
          }
        }
        long long v53 = *(WTF::StringImpl **)&v735[8];
        *(void *)&v735[8] = 0;
        if (v53) {
          goto LABEL_57;
        }
      }
      goto LABEL_807;
    case 1714:
      v506 = this[9];
      if (!v506 || !v506[1]) {
        goto LABEL_807;
      }
      uint64_t v507 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v508) {
        goto LABEL_1054;
      }
      uint64_t v509 = v507;
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3, v735);
      if (!v735[16]) {
        goto LABEL_1054;
      }
      unint64_t v510 = *((void *)a3 + 1);
      uint64_t v511 = *(void *)a3;
      unint64_t v512 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v510 < v512 || v510 - v512 <= 7)
      {
        unint64_t v722 = 0;
        uint64_t v723 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v724 = *((void *)a3 + 3);
        if (v724)
        {
          if (v510)
          {
            (*(void (**)(uint64_t))(*(void *)v724 + 16))(v724);
            uint64_t v723 = *(void *)a3;
            unint64_t v722 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v722 = 0;
            uint64_t v723 = 0;
          }
        }
      }
      else
      {
        v513 = (double *)(v511 + v512);
        *((void *)a3 + 2) = v513 + 1;
        if (v511)
        {
          double v514 = *v513;
          uint64_t v515 = *(void *)v735;
          char v516 = v735[8];
          uint64_t v517 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if (v518)
          {
            *(void *)v735 = v517;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
            v519 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v519 = &unk_1EE9FFCA0;
            v519[1] = *(void *)v735;
            uint64_t v520 = *(void *)&v735[8];
            *(void *)&v735[8] = 0;
            v519[2] = v520;
            *(void *)&long long v745 = v519;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
            WebKit::WebExtensionContext::tabsSetZoom((uint64_t *)this, v509, v515, v516, (uint64_t *)&v745, v514);
LABEL_836:
            uint64_t v126 = v745;
            *(void *)&long long v745 = 0;
            if (v126) {
              goto LABEL_850;
            }
          }
          goto LABEL_807;
        }
        unint64_t v722 = v510;
        uint64_t v723 = 0;
      }
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v725 = *((void *)a3 + 3);
      if (v725 && v722) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v725 + 16))(v725, v723);
      }
LABEL_1054:
      uint64_t v201 = *(void *)a3;
      uint64_t v202 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v203 = *((void *)a3 + 3);
      if (v203) {
        goto LABEL_315;
      }
      goto LABEL_807;
    case 1715:
      v556 = this[9];
      if (v556)
      {
        if (v556[1])
        {
          IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t)v735, a3);
          if (v735[24])
          {
            uint64_t v557 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
            if (v558)
            {
              *(void *)&long long v745 = v557;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
              v559 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v559 = &unk_1EE9FFBD8;
              v559[1] = v745;
              uint64_t v560 = *((void *)&v745 + 1);
              *((void *)&v745 + 1) = 0;
              v559[2] = v560;
              *(void *)v732 = v559;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
              WebKit::WebExtensionContext::tabsToggleReaderMode((uint64_t *)this, *(uint64_t *)v735, *(uint64_t *)&v735[8], v735[16], (uint64_t *)v732);
LABEL_781:
              uint64_t v48 = *(void *)v732;
              *(void *)v732 = 0;
              if (v48) {
                goto LABEL_775;
              }
            }
          }
        }
      }
      goto LABEL_807;
    case 1716:
      v571 = this[9];
      if (!v571 || !v571[1]) {
        goto LABEL_807;
      }
      uint64_t v572 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v573) {
        goto LABEL_973;
      }
      uint64_t v3 = v572;
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3, v732);
      if (!v732[16]) {
        goto LABEL_973;
      }
      IPC::Decoder::decode<WebKit::WebExtensionTabParameters>((uint64_t *)a3, &v745);
      if (!v751)
      {
        std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v745);
        goto LABEL_973;
      }
      if (!v732[16]) {
        goto LABEL_991;
      }
      *(void *)v735 = v3;
      *(_OWORD *)&v735[8] = *(_OWORD *)v732;
      *(_OWORD *)&v735[24] = v745;
      v735[40] = 0;
      v735[80] = 0;
      if (v746[40])
      {
        uint64_t v574 = *(void *)v746;
        *(void *)v746 = 0;
        *(void *)&v735[40] = v574;
        *(_OWORD *)&v735[48] = *(_OWORD *)&v746[8];
        *(_OWORD *)&v735[64] = *(_OWORD *)&v746[24];
        *(_DWORD *)&v746[8] &= ~1u;
        v735[80] = 1;
      }
      int v575 = 0;
      v735[88] = 0;
      v735[96] = 0;
      if (v746[56])
      {
        uint64_t v576 = *(void *)&v746[48];
        *(void *)&v746[48] = 0;
        *(void *)&v735[88] = v576;
        int v575 = 1;
        v735[96] = 1;
      }
      *(_OWORD *)&v735[136] = v748;
      long long v736 = v749;
      *(_OWORD *)v737 = *(_OWORD *)v750;
      *(_OWORD *)&v737[10] = *(_OWORD *)&v750[10];
      *(_OWORD *)&v735[104] = *(_OWORD *)&v746[64];
      *(_OWORD *)&v735[120] = v747;
      char v738 = 1;
      std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v745);
      uint64_t v577 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)v21)
      {
        *(void *)&long long v745 = v577;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v745 + 1, a2);
        v578 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v578 = &unk_1EE9FFA70;
        v578[1] = v745;
        uint64_t v579 = *((void *)&v745 + 1);
        *((void *)&v745 + 1) = 0;
        v578[2] = v579;
        *(void *)v732 = v578;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v745 + 1);
        WebKit::WebExtensionContext::tabsUpdate((uint64_t)this, v3, *(uint64_t *)&v735[8], v735[16], (long long *)&v735[24], (uint64_t *)v732);
        uint64_t v580 = *(void *)v732;
        *(void *)v732 = 0;
        if (v580) {
          (*(void (**)(uint64_t))(*(void *)v580 + 8))(v580);
        }
        if (!v738) {
          goto LABEL_807;
        }
        int v575 = v735[96];
      }
      if (v575)
      {
        v581 = *(WTF::StringImpl **)&v735[88];
        *(void *)&v735[88] = 0;
        if (v581)
        {
          if (*(_DWORD *)v581 == 2) {
            WTF::StringImpl::destroy(v581, v21);
          }
          else {
            *(_DWORD *)v581 -= 2;
          }
        }
      }
      if (v735[80])
      {
        long long v53 = *(WTF::StringImpl **)&v735[40];
        *(void *)&v735[40] = 0;
        if (v53) {
          goto LABEL_57;
        }
      }
      goto LABEL_807;
    case 1717:
      if (!WebKit::WebExtensionContext::isWebNavigationMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        int v15 = *((unsigned __int16 *)a3 + 25);
        goto LABEL_811;
      }
      uint64_t v526 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v527)
      {
        uint64_t v528 = v526;
        uint64_t v529 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (v530)
        {
          *(void *)v735 = v529;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
          v531 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v531 = &unk_1EE9FFD68;
          v531[1] = *(void *)v735;
          uint64_t v532 = *(void *)&v735[8];
          *(void *)&v735[8] = 0;
          v531[2] = v532;
          *(void *)&long long v745 = v531;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
          WebKit::WebExtensionContext::webNavigationGetAllFrames((uint64_t)this, v528, (uint64_t *)&v745);
          uint64_t v126 = v745;
          *(void *)&long long v745 = 0;
          if (v126) {
            goto LABEL_850;
          }
        }
      }
      goto LABEL_807;
    default:
LABEL_811:
      if (v15 != 1718) {
        goto LABEL_823;
      }
      if (!WebKit::WebExtensionContext::isWebNavigationMessageAllowed((WebKit::WebExtensionContext *)this))
      {
        int v15 = *((unsigned __int16 *)a3 + 25);
LABEL_823:
        switch(v15)
        {
          case 1719:
            v597 = this[9];
            if (v597 && v597[1])
            {
              IPC::Decoder::decode<WebKit::WebExtensionWindowParameters>((uint64_t *)a3, (uint64_t)v735);
              if (!v735[96]) {
                goto LABEL_969;
              }
              long long v745 = *(_OWORD *)v735;
              *(_DWORD *)v746 = *(_DWORD *)&v735[16];
              v746[8] = 0;
              v746[24] = 0;
              if (v735[40])
              {
                *(void *)&v746[8] = *(void *)&v735[24];
                uint64_t v599 = *(void *)&v735[32];
                *(void *)&v735[24] = 0;
                *(void *)&v735[32] = 0;
                *(void *)&v746[16] = v599;
                uint64_t v3 = 1;
                v746[24] = 1;
                *(_OWORD *)&v746[32] = *(_OWORD *)&v735[48];
                *(_OWORD *)&v746[48] = *(_OWORD *)&v735[64];
                *(_OWORD *)&v746[60] = *(_OWORD *)&v735[76];
                WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v735[24], v598);
              }
              else
              {
                uint64_t v3 = 0;
                *(_OWORD *)&v746[32] = *(_OWORD *)&v735[48];
                *(_OWORD *)&v746[48] = *(_OWORD *)&v735[64];
                *(_OWORD *)&v746[60] = *(_OWORD *)&v735[76];
              }
              LOBYTE(v747) = 1;
              uint64_t v674 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
              if (!(_BYTE)v675) {
                goto LABEL_989;
              }
              *(void *)v735 = v674;
              a3 = (IPC::Decoder *)&v735[8];
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
              v676 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v676 = &unk_1EE9FFDB8;
              v676[1] = *(void *)v735;
              uint64_t v677 = *(void *)&v735[8];
              *(void *)&v735[8] = 0;
              v676[2] = v677;
              *(void *)v732 = v676;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
              if (!(_BYTE)v747) {
                goto LABEL_991;
              }
              WebKit::WebExtensionContext::windowsCreate((uint64_t)this, (uint64_t)&v745, (uint64_t *)v732);
              uint64_t v678 = *(void *)v732;
              *(void *)v732 = 0;
              if (v678) {
                (*(void (**)(uint64_t))(*(void *)v678 + 8))(v678);
              }
              LODWORD(v3) = v746[24];
              if ((_BYTE)v747)
              {
LABEL_989:
                if (v3) {
                  WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v746[8], v675);
                }
              }
            }
            break;
          case 1720:
            v622 = this[9];
            if (v622 && v622[1])
            {
              uint64_t v623 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
              if (v624
                && (uint64_t v625 = v623,
                    uint64_t v626 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3),
                    v627)
                && (uint64_t v628 = v626,
                    unsigned __int16 v629 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a3),
                    v629 >= 0x100u)
                && (unsigned __int8 v630 = v629, v631 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a3), v631 > 0xFFu))
              {
                char v687 = v631;
                uint64_t v688 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
                if (v689)
                {
                  *(void *)v735 = v688;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
                  v690 = (void *)WTF::fastMalloc((WTF *)0x18);
                  void *v690 = &unk_1EE9FFDE0;
                  v690[1] = *(void *)v735;
                  uint64_t v691 = *(void *)&v735[8];
                  *(void *)&v735[8] = 0;
                  v690[2] = v691;
                  *(void *)&long long v745 = v690;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
                  WebKit::WebExtensionContext::windowsGet((uint64_t)this, v625, v628, v630, v687 != 0, (uint64_t *)&v745);
                  goto LABEL_849;
                }
              }
              else
              {
                uint64_t v246 = *(void *)a3;
                uint64_t v247 = *((void *)a3 + 1);
                *(void *)a3 = 0;
                *((void *)a3 + 1) = 0;
                uint64_t v248 = *((void *)a3 + 3);
                if (v248) {
                  goto LABEL_367;
                }
              }
            }
            break;
          case 1721:
            v608 = this[9];
            if (v608)
            {
              if (v608[1])
              {
                uint64_t v609 = IPC::Decoder::decode<std::tuple<WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs>>((uint64_t *)a3);
                if ((v609 & 0xFFFFFF) >= 0x10000)
                {
                  __int16 v610 = v609;
                  uint64_t v611 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
                  if (v612)
                  {
                    *(void *)v735 = v611;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
                    v613 = (void *)WTF::fastMalloc((WTF *)0x18);
                    void *v613 = &unk_1EE9FFE30;
                    v613[1] = *(void *)v735;
                    uint64_t v614 = *(void *)&v735[8];
                    *(void *)&v735[8] = 0;
                    v613[2] = v614;
                    *(void *)&long long v745 = v613;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
                    WebKit::WebExtensionContext::windowsGetAll((unsigned int *)this, v610, (v610 & 0xFF00) != 0, (uint64_t *)&v745);
                    uint64_t v126 = v745;
                    *(void *)&long long v745 = 0;
                    if (v126) {
                      goto LABEL_850;
                    }
                  }
                }
              }
            }
            break;
          case 1722:
            v615 = this[9];
            if (v615)
            {
              if (v615[1])
              {
                uint64_t v616 = IPC::Decoder::decode<std::tuple<WTF::OptionSet<WebKit::WebExtensionWindowTypeFilter>,WebKit::WebExtensionWindow::PopulateTabs>>((uint64_t *)a3);
                if ((v616 & 0xFFFFFF) >= 0x10000)
                {
                  __int16 v617 = v616;
                  uint64_t v618 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
                  if (v619)
                  {
                    *(void *)v735 = v618;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
                    v620 = (void *)WTF::fastMalloc((WTF *)0x18);
                    void *v620 = &unk_1EE9FFE08;
                    v620[1] = *(void *)v735;
                    uint64_t v621 = *(void *)&v735[8];
                    *(void *)&v735[8] = 0;
                    v620[2] = v621;
                    *(void *)&long long v745 = v620;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
                    WebKit::WebExtensionContext::windowsGetLastFocused((uint64_t)this, v617, (v617 & 0xFF00) != 0, (NSString *)&v745);
LABEL_849:
                    uint64_t v126 = v745;
                    *(void *)&long long v745 = 0;
                    if (v126) {
                      goto LABEL_850;
                    }
                  }
                }
              }
            }
            break;
          case 1723:
            v600 = this[9];
            if (v600 && v600[1])
            {
              uint64_t v601 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
              if (v602)
              {
                uint64_t v603 = v601;
                uint64_t v604 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
                if (v605)
                {
                  *(void *)v735 = v604;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
                  v606 = (void *)WTF::fastMalloc((WTF *)0x18);
                  void *v606 = &unk_1EE9FFE80;
                  v606[1] = *(void *)v735;
                  uint64_t v607 = *(void *)&v735[8];
                  *(void *)&v735[8] = 0;
                  v606[2] = v607;
                  *(void *)&long long v745 = v606;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
                  WebKit::WebExtensionContext::windowsRemove((uint64_t)this, v603, (uint64_t *)&v745);
                  goto LABEL_836;
                }
              }
              else
              {
                uint64_t v246 = *(void *)a3;
                uint64_t v247 = *((void *)a3 + 1);
                *(void *)a3 = 0;
                *((void *)a3 + 1) = 0;
                uint64_t v248 = *((void *)a3 + 3);
                if (v248) {
                  goto LABEL_367;
                }
              }
            }
            break;
          case 1724:
            v632 = this[9];
            if (v632 && v632[1])
            {
              uint64_t v633 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
              if (v634)
              {
                uint64_t v3 = v633;
                IPC::Decoder::decode<WebKit::WebExtensionWindowParameters>((uint64_t *)a3, (uint64_t)&v745);
                if ((_BYTE)v747)
                {
                  *(void *)v735 = v3;
                  *(_OWORD *)&v735[8] = v745;
                  *(_DWORD *)&v735[24] = *(_DWORD *)v746;
                  v735[32] = 0;
                  v735[48] = 0;
                  LODWORD(v6) = v746[24];
                  if (!v746[24]) {
                    goto LABEL_992;
                  }
                  *(_OWORD *)&v735[56] = *(_OWORD *)&v746[32];
                  *(void *)&v735[32] = *(void *)&v746[8];
                  int v8 = *(_DWORD *)&v746[16];
                  int v7 = *(_DWORD *)&v746[20];
                  *(void *)&v746[8] = 0;
                  *(void *)&v746[16] = 0;
                  *(_DWORD *)&v735[40] = v8;
                  *(_DWORD *)&v735[44] = v7;
                  v735[48] = 1;
                  *(_OWORD *)&v735[72] = *(_OWORD *)&v746[48];
                  *(_OWORD *)&v735[84] = *(_OWORD *)&v746[60];
                  WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v746[8], v635);
                  goto LABEL_993;
                }
              }
LABEL_969:
              uint64_t v201 = *(void *)a3;
              uint64_t v672 = *((void *)a3 + 1);
              *(void *)a3 = 0;
              *((void *)a3 + 1) = 0;
              uint64_t v203 = *((void *)a3 + 3);
              if (v203 && v672) {
                goto LABEL_316;
              }
            }
            break;
          default:
            goto LABEL_807;
        }
        goto LABEL_807;
      }
      uint64_t v583 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v584
        && (uint64_t v585 = v583,
            uint64_t v586 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3),
            v587))
      {
        uint64_t v588 = v586;
        uint64_t v589 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (v590)
        {
          *(void *)v735 = v589;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v735[8], a2);
          v591 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v591 = &unk_1EE9FFD90;
          v591[1] = *(void *)v735;
          uint64_t v592 = *(void *)&v735[8];
          *(void *)&v735[8] = 0;
          v591[2] = v592;
          *(void *)&long long v745 = v591;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v735[8]);
          WebKit::WebExtensionContext::webNavigationGetFrame((uint64_t)this, v585, v588, (uint64_t *)&v745);
          uint64_t v126 = v745;
          *(void *)&long long v745 = 0;
          if (v126) {
            goto LABEL_850;
          }
        }
      }
      else
      {
        uint64_t v246 = *(void *)a3;
        uint64_t v247 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v248 = *((void *)a3 + 3);
        if (v248) {
          goto LABEL_367;
        }
      }
      goto LABEL_807;
  }
}

void non-virtual thunk to'WebKit::WebExtensionContext::didReceiveMessage(CFTypeRef *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
}

void non-virtual thunk to'WebKit::WebExtensionContext::~WebExtensionContext(WebKit::WebExtensionContext *this, void *a2)
{
}

{
  uint64_t vars8;

  WebKit::WebExtensionContext::~WebExtensionContext((WebKit::WebExtensionContext *)((char *)this - 16), a2);

  JUMPOUT(0x199740C10);
}

uint64_t *IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2, &v9);
  if (v10
    && (BOOL result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2, &v11), v12))
  {
    if (v10)
    {
      long long v5 = v11;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v5;
      *(unsigned char *)(a1 + 32) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    BOOL result = (uint64_t *)a2[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      int v8 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v8();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionGetTitleEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESP_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF110;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionGetTitleEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESP_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF110;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionGetTitleEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESP_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3244;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  BOOL result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  long long v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (v6)
    {
      *long long v5 = 0;
      if (*(_DWORD *)(a2 + 8) == 1) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x1993442DCLL);
  }
  if (!v6) {
    goto LABEL_10;
  }
  *long long v5 = 1;
  if (*(_DWORD *)(a2 + 8))
  {
LABEL_9:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_10;
  }
LABEL_4:

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2, &v9);
  if (v10
    && (IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2, &v11), v12)&& (BOOL result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v13), v14))
  {
    if (v10 && v12)
    {
      long long v5 = v11;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v5;
      *(void *)(a1 + 32) = v13;
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 40) = 0;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    BOOL result = (IPC::Decoder *)a2[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      int v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (IPC::Decoder *)v8();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionSetTitleEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSL_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF138;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionSetTitleEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSL_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF138;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionSetTitleEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSL_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3250;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  BOOL result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (v6)
    {
      *(unsigned char *)unint64_t result = 1;
      return result;
    }
    goto LABEL_11;
  }
  if (!v6)
  {
    __break(0xC471u);
    goto LABEL_10;
  }
  *(unsigned char *)unint64_t result = 0;
  if (!*(unsigned char *)(a2 + 8))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    unint64_t result = 831;
    __break(0xC471u);
    return result;
  }

  return (unint64_t)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13ActionSetIconEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSL_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF160;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13ActionSetIconEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSL_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF160;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13ActionSetIconEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSL_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3248;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionGetPopupEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESP_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF188;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionGetPopupEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESP_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF188;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionGetPopupEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESP_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3243;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionSetPopupEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSL_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF1B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionSetPopupEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSL_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF1B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14ActionSetPopupEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSL_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3249;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext15ActionOpenPopupEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_32WebExtensionWindowIdentifierTypeESC_yLSD_1EEEEENSG_INS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF1D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext15ActionOpenPopupEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_32WebExtensionWindowIdentifierTypeESC_yLSD_1EEEEENSG_INS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF1D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext15ActionOpenPopupEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINS9_INS7_32WebExtensionWindowIdentifierTypeESC_yLSD_1EEEEENSG_INS9_INS7_29WebExtensionTabIdentifierTypeESC_yLSD_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3245;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ActionGetBadgeTextEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESP_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF200;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ActionGetBadgeTextEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESP_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF200;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ActionGetBadgeTextEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESP_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3241;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ActionSetBadgeTextEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSL_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF228;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ActionSetBadgeTextEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSL_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF228;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ActionSetBadgeTextEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSL_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3246;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext16ActionGetEnabledEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF250;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext16ActionGetEnabledEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF250;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext16ActionGetEnabledEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebExtensionWindowIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INSB_INS7_29WebExtensionTabIdentifierTypeESE_yLSF_1EEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3242;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v16 = v5;
  LODWORD(v4) = *((_DWORD *)a2 + 2);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x199344F7CLL);
    }
    unsigned char *v6 = 1;
    if (!*((_DWORD *)a2 + 2))
    {
      char v8 = *a2;
      long long v9 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
      if (!v10)
      {
        __break(0xC471u);
        JUMPOUT(0x199344F9CLL);
      }
      unsigned char *v9 = v8;
      goto LABEL_9;
    }
LABEL_15:
    uint64_t v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext16ActionSetEnabledEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEbONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(v15);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x199344F5CLL);
  }
  unsigned char *v6 = 0;
  if (*((_DWORD *)a2 + 2) != 1) {
    goto LABEL_15;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
LABEL_9:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  unint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext16ActionSetEnabledEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEbONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF278;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext16ActionSetEnabledEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEbONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF278;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext16ActionSetEnabledEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEbONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3247;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext9AlarmsGetEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS7_27WebExtensionAlarmParametersEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF2A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext9AlarmsGetEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS7_27WebExtensionAlarmParametersEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF2A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext9AlarmsGetEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS7_27WebExtensionAlarmParametersEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3254;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 32);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x199345280);
    }
    unsigned char *v6 = 1;
    if (!*(unsigned char *)(a2 + 32))
    {
      uint64_t v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11AlarmsClearEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(v12);
    }
    IPC::ArgumentCoder<WebKit::WebExtensionAlarmParameters,void>::encode(v5, a2);
  }
  else
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1993452A0);
    }
    unsigned char *v6 = 0;
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  unint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11AlarmsClearEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF2C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11AlarmsClearEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF2C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11AlarmsClearEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3252;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  unint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext12AlarmsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_27WebExtensionAlarmParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF2F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext12AlarmsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_27WebExtensionAlarmParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF2F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext12AlarmsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_27WebExtensionAlarmParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3253;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = 32 * v6;
    do
    {
      IPC::ArgumentCoder<WebKit::WebExtensionAlarmParameters,void>::encode(v5, v7);
      v7 += 32;
      v8 -= 32;
    }
    while (v8);
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  unint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14AlarmsClearAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF318;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14AlarmsClearAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF318;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14AlarmsClearAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3251;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  unint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14CommandsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvNS_6VectorINS7_29WebExtensionCommandParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF340;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14CommandsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvNS_6VectorINS7_29WebExtensionCommandParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF340;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14CommandsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvNS_6VectorINS7_29WebExtensionCommandParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3255;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)a2;
    uint64_t v8 = 24 * v6;
    do
    {
      IPC::ArgumentCoder<WebKit::WebExtensionCommandParameters,void>::encode(v5, v7);
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  unint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<std::optional<PAL::SessionID>>(a2, &v13);
  if (v14)
  {
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v15);
    if (v16)
    {
      IPC::Decoder::decode<WTF::URL>(a2, v17);
      if (!v18)
      {
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 64) = 0;
LABEL_11:
        if (v16)
        {
          uint64_t v8 = v15;
          uint64_t v15 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2) {
              WTF::StringImpl::destroy(v8, v5);
            }
            else {
              *(_DWORD *)v8 -= 2;
            }
          }
        }
LABEL_16:
        if (*(unsigned char *)(a1 + 64)) {
          return;
        }
        goto LABEL_21;
      }
      if (v14 && v16)
      {
        *(_OWORD *)a1 = v13;
        uint64_t v6 = v15;
        uint64_t v15 = 0;
        *(void *)(a1 + 16) = v6;
        v4.n128_f64[0] = WTF::URL::URL(a1 + 24, (uint64_t *)v17);
        *(unsigned char *)(a1 + 64) = 1;
        if (v18)
        {
          uint64_t v7 = v17[0];
          v17[0] = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2) {
              WTF::StringImpl::destroy(v7, v5);
            }
            else {
              *(_DWORD *)v7 -= 2;
            }
          }
        }
        goto LABEL_11;
      }
      __break(1u);
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 64) = 0;
    goto LABEL_16;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 64) = 0;
LABEL_21:
  uint64_t v9 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v10 = *((void *)a2 + 3);
  if (v10) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t v12 = *(void (**)(__n128))(*(void *)v10 + 16);
    v12(v4);
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10CookiesGetEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_INS7_28WebExtensionCookieParametersEEESE_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF368;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10CookiesGetEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_INS7_28WebExtensionCookieParametersEEESE_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF368;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10CookiesGetEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_INS7_28WebExtensionCookieParametersEEESE_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3258;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 168);
  long long v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x199345BC0);
    }
    *long long v5 = 0;
    if (*(_DWORD *)(a2 + 168) == 1)
    {
      return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
    }
    goto LABEL_21;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x199345BE0);
  }
  *long long v5 = 1;
  if (*(_DWORD *)(a2 + 168))
  {
LABEL_21:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_22:
    uint64_t v10 = std::__throw_bad_optional_access[abi:sn180100]();
    return (_DWORD *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13CookiesGetAllEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_3URLERKNS7_34WebExtensionCookieFilterParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_28WebExtensionCookieParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(v10);
  }
  int v8 = *(unsigned __int8 *)(a2 + 160);
  unint64_t result = (_DWORD *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v8)
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x199345C00);
    }
    *(unsigned char *)unint64_t result = 1;
    if (!*(unsigned char *)(a2 + 160)) {
      goto LABEL_22;
    }
    IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(a1, a2 + 8);
    return (_DWORD *)IPC::ArgumentCoder<WebCore::Cookie,void>::encode(a1, a2 + 24);
  }
  else
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x199345C20);
    }
    *(unsigned char *)unint64_t result = 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13CookiesGetAllEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_3URLERKNS7_34WebExtensionCookieFilterParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_28WebExtensionCookieParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF390;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13CookiesGetAllEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_3URLERKNS7_34WebExtensionCookieFilterParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_28WebExtensionCookieParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF390;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13CookiesGetAllEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_3URLERKNS7_34WebExtensionCookieFilterParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_28WebExtensionCookieParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EE4callESV_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3257;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v16 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x199345E34);
    }
    unsigned char *v6 = 1;
    if (!*(_DWORD *)(a2 + 16))
    {
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
      unsigned int v8 = *(_DWORD *)(a2 + 12);
      if (v8)
      {
        uint64_t v9 = *(void *)a2;
        uint64_t v10 = v9 + 152 * v8;
        do
        {
          IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v5, v9);
          IPC::ArgumentCoder<WebCore::Cookie,void>::encode(v5, v9 + 16);
          v9 += 152;
        }
        while (v9 != v10);
      }
      goto LABEL_10;
    }
LABEL_15:
    uint64_t v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10CookiesSetEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS7_28WebExtensionCookieParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISE_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(v15);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x199345E14);
  }
  unsigned char *v6 = 0;
  if (*(_DWORD *)(a2 + 16) != 1) {
    goto LABEL_15;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
LABEL_10:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  unint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10CookiesSetEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS7_28WebExtensionCookieParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISE_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF3B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10CookiesSetEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS7_28WebExtensionCookieParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISE_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF3B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext10CookiesSetEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS7_28WebExtensionCookieParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_ISE_EENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3260;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13CookiesRemoveEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_INS7_28WebExtensionCookieParametersEEESE_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF3E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13CookiesRemoveEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_INS7_28WebExtensionCookieParametersEEESE_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF3E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext13CookiesRemoveEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalIN3PAL9SessionIDEEERKNS_6StringERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_INS7_28WebExtensionCookieParametersEEESE_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3259;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25CookiesGetAllCookieStoresEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7HashMapIN3PAL9SessionIDENS_6VectorINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISF_EENS_10HashTraitsISF_EENSS_ISP_EENS_15HashTableTraitsEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSZ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF408;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25CookiesGetAllCookieStoresEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7HashMapIN3PAL9SessionIDENS_6VectorINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISF_EENS_10HashTraitsISF_EENSS_ISP_EENS_15HashTableTraitsEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSZ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF408;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25CookiesGetAllCookieStoresEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7HashMapIN3PAL9SessionIDENS_6VectorINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISF_EENS_10HashTraitsISF_EENSS_ISP_EENS_15HashTableTraitsEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSZ_EE4callESZ_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3256;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v26 = v5;
  LODWORD(v4) = *((_DWORD *)a2 + 2);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1993463D0);
    }
    unsigned char *v6 = 1;
    if (*((_DWORD *)a2 + 2)) {
      goto LABEL_40;
    }
    if (*a2) {
      int v8 = *(_DWORD *)(*a2 - 12);
    }
    else {
      int v8 = 0;
    }
    uint64_t v9 = (_DWORD *)IPC::Encoder::grow(v5, 4uLL, 4);
    if (v10 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1993463F0);
    }
    _DWORD *v9 = v8;
    uint64_t v11 = *a2;
    if (*a2)
    {
      uint64_t v12 = *(unsigned int *)(v11 - 4);
      uint64_t v13 = v11 + 24 * v12;
      if (*(_DWORD *)(v11 - 12))
      {
        uint64_t v14 = *a2;
        if (v12)
        {
          uint64_t v15 = 24 * v12;
          uint64_t v14 = v11;
          while ((unint64_t)(*(void *)v14 + 1) <= 1)
          {
            v14 += 24;
            v15 -= 24;
            if (!v15)
            {
              uint64_t v14 = v13;
              goto LABEL_21;
            }
          }
        }
        goto LABEL_21;
      }
      uint64_t v14 = v11 + 24 * v12;
    }
    else
    {
      uint64_t v14 = 0;
      LODWORD(v12) = 0;
    }
    uint64_t v13 = v11 + 24 * v12;
LABEL_21:
    if (v11) {
      uint64_t v16 = v11 + 24 * *(unsigned int *)(v11 - 4);
    }
    else {
      uint64_t v16 = 0;
    }
    while (v14 != v16)
    {
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, (uint64_t *)v14);
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(v14 + 20));
      uint64_t v17 = *(unsigned int *)(v14 + 20);
      if (v17)
      {
        char v18 = *(uint64_t **)(v14 + 8);
        uint64_t v19 = 8 * v17;
        do
        {
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, v18++);
          v19 -= 8;
        }
        while (v19);
      }
      uint64_t v20 = v14 + 24;
      uint64_t v14 = v13;
      if (v20 != v13)
      {
        uint64_t v14 = v20;
        while ((unint64_t)(*(void *)v14 + 1) <= 1)
        {
          v14 += 24;
          if (v14 == v13)
          {
            uint64_t v14 = v13;
            break;
          }
        }
      }
    }
    goto LABEL_34;
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1993463B0);
  }
  unsigned char *v6 = 0;
  if (*((_DWORD *)a2 + 2) != 1)
  {
LABEL_40:
    uint64_t v25 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestGetEnabledRulesetsEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(v25);
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
LABEL_34:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v26, 0, 0);
  unint64_t result = v26;
  uint64_t v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestGetEnabledRulesetsEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF430;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestGetEnabledRulesetsEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF430;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestGetEnabledRulesetsEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3263;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext42DeclarativeNetRequestUpdateEnabledRulesetsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESF_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF458;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext42DeclarativeNetRequestUpdateEnabledRulesetsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESF_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF458;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext42DeclarativeNetRequestUpdateEnabledRulesetsEN6WebKit19WebExtensionContextES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESF_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvSA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3268;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext50DeclarativeNetRequestDisplayActionCountAsBadgeTextEN6WebKit19WebExtensionContextES8_FvbONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF480;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext50DeclarativeNetRequestDisplayActionCountAsBadgeTextEN6WebKit19WebExtensionContextES8_FvbONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF480;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext50DeclarativeNetRequestDisplayActionCountAsBadgeTextEN6WebKit19WebExtensionContextES8_FvbONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3261;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext41DeclarativeNetRequestIncrementActionCountEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEdONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF4A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext41DeclarativeNetRequestIncrementActionCountEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEdONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF4A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext41DeclarativeNetRequestIncrementActionCountEN6WebKit19WebExtensionContextES8_FvNS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEdONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3266;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetMatchedRulesEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INS_8WallTimeEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_33WebExtensionMatchedRuleParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF4D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetMatchedRulesEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INS_8WallTimeEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_33WebExtensionMatchedRuleParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF4D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetMatchedRulesEN6WebKit19WebExtensionContextES8_FvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_29WebExtensionTabIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INS_8WallTimeEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_33WebExtensionMatchedRuleParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EE4callESV_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3264;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v16 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x199346B04);
    }
    unsigned char *v6 = 1;
    if (!*(_DWORD *)(a2 + 16))
    {
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
      uint64_t v8 = *(unsigned int *)(a2 + 12);
      if (v8)
      {
        uint64_t v9 = *(void *)a2;
        uint64_t v10 = 56 * v8;
        do
        {
          IPC::ArgumentCoder<WebKit::WebExtensionMatchedRuleParameters,void>::encode(v5, v9);
          v9 += 56;
          v10 -= 56;
        }
        while (v10);
      }
      goto LABEL_10;
    }
LABEL_15:
    uint64_t v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetDynamicRulesEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(v15);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x199346AE4);
  }
  unsigned char *v6 = 0;
  if (*(_DWORD *)(a2 + 16) != 1) {
    goto LABEL_15;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
LABEL_10:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  unint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetDynamicRulesEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF4F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetDynamicRulesEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF4F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetDynamicRulesEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3262;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v12);
  if (v13)
  {
    uint64_t result = IPC::Decoder::decode<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v14);
    if (v15)
    {
      if (v13)
      {
        uint64_t v6 = v14[0];
        *(void *)a1 = v12;
        *(void *)(a1 + 8) = v6;
        *(void *)(a1 + 16) = v14[1];
        *(unsigned char *)(a1 + 24) = 1;
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    *(unsigned char *)a1 = 0;
    int v7 = v13;
    *(unsigned char *)(a1 + 24) = 0;
    if (v7)
    {
      uint64_t v8 = v12;
      uint64_t v12 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v5);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  uint64_t v9 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    uint64_t v11 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v11();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestUpdateDynamicRulesEN6WebKit19WebExtensionContextES8_FvONS_6StringEONS_6VectorIdLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF520;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestUpdateDynamicRulesEN6WebKit19WebExtensionContextES8_FvONS_6StringEONS_6VectorIdLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF520;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestUpdateDynamicRulesEN6WebKit19WebExtensionContextES8_FvONS_6StringEONS_6VectorIdLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3267;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetSessionRulesEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF548;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetSessionRulesEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF548;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext36DeclarativeNetRequestGetSessionRulesEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6StringESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3265;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestUpdateSessionRulesEN6WebKit19WebExtensionContextES8_FvONS_6StringEONS_6VectorIdLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF570;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestUpdateSessionRulesEN6WebKit19WebExtensionContextES8_FvONS_6StringEONS_6VectorIdLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF570;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext39DeclarativeNetRequestUpdateSessionRulesEN6WebKit19WebExtensionContextES8_FvONS_6StringEONS_6VectorIdLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3269;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::WebExtensionEventListenerType>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::WebExtensionEventListenerType,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        uint64_t v8 = *v12;
        unint64_t v7 = v12[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_6;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
    }
    goto LABEL_7;
  }
  unsigned int v5 = *v4;
  if (v5 >= 0x3A)
  {
LABEL_7:
    unsigned int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext33ExtensionIsAllowedIncognitoAccessEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF598;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext33ExtensionIsAllowedIncognitoAccessEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF598;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext33ExtensionIsAllowedIncognitoAccessEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3270;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  int v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void IPC::Decoder::decode<WebKit::WebExtensionMenuItemParameters>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebKit::WebExtensionMenuItemParameters,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 120))
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusCreateEN6WebKit19WebExtensionContextES8_FvRKNS7_30WebExtensionMenuItemParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF5C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusCreateEN6WebKit19WebExtensionContextES8_FvRKNS7_30WebExtensionMenuItemParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF5C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusCreateEN6WebKit19WebExtensionContextES8_FvRKNS7_30WebExtensionMenuItemParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3271;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusUpdateEN6WebKit19WebExtensionContextES8_FvRKNS_6StringERKNS7_30WebExtensionMenuItemParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF5E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusUpdateEN6WebKit19WebExtensionContextES8_FvRKNS_6StringERKNS7_30WebExtensionMenuItemParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF5E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusUpdateEN6WebKit19WebExtensionContextES8_FvRKNS_6StringERKNS7_30WebExtensionMenuItemParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3274;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusRemoveEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF610;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusRemoveEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF610;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext11MenusRemoveEN6WebKit19WebExtensionContextES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3273;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14MenusRemoveAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF638;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14MenusRemoveAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF638;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14MenusRemoveAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3272;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17PermissionsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESF_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SF_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF660;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17PermissionsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESF_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SF_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF660;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17PermissionsGetAllEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESF_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SF_EE4callESF_SF_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3276;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v7, a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>(uint64_t a1, WTF::StringImpl *a2)
{
  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(a2, &v11);
  if (v12)
  {
    uint64_t result = IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(a2, &v13);
    if (v14)
    {
      if (v12)
      {
        uint64_t v6 = v13;
        *(void *)a1 = v11;
        *(void *)(a1 + 8) = v6;
        *(unsigned char *)(a1 + 16) = 1;
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    *(unsigned char *)a1 = 0;
    int v7 = v12;
    *(unsigned char *)(a1 + 16) = 0;
    if (v7 && v11) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v5);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
  }
  uint64_t v8 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (WTF::StringImpl *)v10();
  }
  return result;
}

WTF::StringImpl **IPC::callMemberFunction<WebKit::WebExtensionContext,WebKit::WebExtensionContext,void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::CompletionHandler<void ()(BOOL)> &&),std::tuple<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,void ()(BOOL)>(uint64_t a1, void (*a2)(void *, WTF::StringImpl ***, WTF::StringImpl ***, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  uint64_t v6 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v5 = *(void (**)(void *, WTF::StringImpl ***, WTF::StringImpl ***, uint64_t))(*v6 + a2);
  }
  int v7 = *(WTF::StringImpl ***)a4;
  uint64_t v10 = *(WTF::StringImpl ***)(a4 + 8);
  uint64_t v11 = v7;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  v5(v6, &v11, &v10, a5);
  if (v10) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v8);
  }
  uint64_t result = v11;
  if (v11) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v8);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext19PermissionsContainsEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF688;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext19PermissionsContainsEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF688;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext19PermissionsContainsEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3275;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned __int8 v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unsigned __int8 v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v3 = *(WTF::StringImpl ***)(a1 + 8);
    if (v3) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
    }
    if (*(void *)a1) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)a1, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18PermissionsRequestEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF6B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18PermissionsRequestEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF6B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18PermissionsRequestEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3278;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned __int8 v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unsigned __int8 v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17PermissionsRemoveEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF6D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17PermissionsRemoveEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF6D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext17PermissionsRemoveEN6WebKit19WebExtensionContextES8_FvNS_7HashSetINS_6StringENS_11DefaultHashISA_EENS_10HashTraitsISA_EENS_15HashTableTraitsEEESG_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3277;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned __int8 v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unsigned __int8 v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext24RuntimeGetBackgroundPageEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF700;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext24RuntimeGetBackgroundPageEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF700;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext24RuntimeGetBackgroundPageEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3281;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1993482FCLL);
    }
    unsigned char *v6 = 0;
    if (*(_DWORD *)(a2 + 24) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)(a2 + 8));
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext22RuntimeOpenOptionsPageEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(v12);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19934831CLL);
  }
  unsigned char *v6 = 1;
  if (*(_DWORD *)(a2 + 24)) {
    goto LABEL_13;
  }
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v5, a2 + 8);
LABEL_8:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext22RuntimeOpenOptionsPageEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF728;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext22RuntimeOpenOptionsPageEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF728;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext22RuntimeOpenOptionsPageEN6WebKit19WebExtensionContextES8_FvONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3282;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebKit::WebExtensionMessageSenderParameters>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v13);
  if (!v14)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 288) = 0;
    goto LABEL_22;
  }
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v15);
  if (!v16)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 288) = 0;
LABEL_17:
    if (v14)
    {
      uint64_t result = v13;
      uint64_t v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
LABEL_22:
    if (*(unsigned char *)(a1 + 288)) {
      return result;
    }
    goto LABEL_27;
  }
  IPC::Decoder::decode<WebKit::WebExtensionMessageSenderParameters>(a2, (uint64_t)&v17);
  char v7 = v22;
  if (!v22)
  {
    *(unsigned char *)a1 = 0;
LABEL_12:
    *(unsigned char *)(a1 + 288) = v7;
    uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17, v6);
    if (v16)
    {
      uint64_t result = v15;
      char v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    goto LABEL_17;
  }
  if (v14 && v16)
  {
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    BOOL v9 = v15;
    char v15 = 0;
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v9;
    *(unsigned char *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 0;
    if (v18)
    {
      uint64_t v10 = v17;
      uint64_t v17 = 0;
      *(void *)(a1 + 16) = v10;
      *(unsigned char *)(a1 + 24) = 1;
    }
    *(unsigned char *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 208) = 0;
    if (v19[176])
    {
      std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters*>(a1 + 32, (uint64_t)v19);
      *(unsigned char *)(a1 + 208) = 1;
    }
    *(_OWORD *)(a1 + 216) = v20[0];
    *(_OWORD *)(a1 + 225) = *(_OWORD *)((char *)v20 + 9);
    WTF::URL::URL(a1 + 248, v21);
    char v7 = 1;
    goto LABEL_12;
  }
  __break(1u);
LABEL_27:
  uint64_t v11 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result && v11)
  {
    uint64_t v12 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (WTF::StringImpl *)v12();
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebExtensionMessageSenderParameters>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 272))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18RuntimeSendMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF750;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18RuntimeSendMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF750;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18RuntimeSendMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3283;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebKit::WebExtensionMessageSenderParameters>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 288))
  {
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 248);
    *(void *)(a1 + 248) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](a1 + 32);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 16);
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,WebKit::WebExtensionMessageSenderParameters>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v13);
  if (v14)
  {
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a2);
    if ((_BYTE)v5 && (uint64_t v6 = result, result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v15), v16))
    {
      uint64_t result = IPC::Decoder::decode<WebKit::WebExtensionMessageSenderParameters>(a2, (uint64_t)v17);
      char v8 = v18;
      if (v18)
      {
        if (!v14 || !v16)
        {
          __break(1u);
          return result;
        }
        BOOL v9 = v13;
        uint64_t v13 = 0;
        *(void *)a1 = v9;
        *(void *)(a1 + 8) = v6;
        uint64_t v10 = v15;
        char v15 = 0;
        *(void *)(a1 + 16) = v10;
        std::__tuple_leaf<3ul,WebKit::WebExtensionMessageSenderParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionMessageSenderParameters,void>(a1 + 24, v17);
        char v8 = 1;
      }
      else
      {
        *(unsigned char *)a1 = 0;
      }
      *(unsigned char *)(a1 + 296) = v8;
      uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v7);
      if (v16)
      {
        uint64_t result = v15;
        char v15 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 296) = 0;
    }
    if (v14)
    {
      uint64_t result = v13;
      uint64_t v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 296) = 0;
  }
  if (!*(unsigned char *)(a1 + 296))
  {
    uint64_t v11 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result)
    {
      if (v11)
      {
        uint64_t v12 = *(uint64_t (**)(void))(*(void *)result + 16);
        return (WTF::StringImpl *)v12();
      }
    }
  }
  return result;
}

uint64_t std::__tuple_leaf<3ul,WebKit::WebExtensionMessageSenderParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::WebExtensionMessageSenderParameters,void>(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  if (*((unsigned char *)a2 + 8))
  {
    uint64_t v4 = *a2;
    *a2 = 0;
    *(void *)a1 = v4;
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v5 = a1 + 16;
  *(unsigned char *)(a1 + 192) = 0;
  if (*((unsigned char *)a2 + 192))
  {
    std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters*>(v5, (uint64_t)(a2 + 2));
    *(unsigned char *)(a1 + 192) = 1;
  }
  long long v6 = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 209) = *(_OWORD *)((char *)a2 + 209);
  *(_OWORD *)(a1 + 200) = v6;
  WTF::URL::URL(a1 + 232, a2 + 29);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14RuntimeConnectEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF778;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14RuntimeConnectEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF778;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext14RuntimeConnectEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3280;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,WebKit::WebExtensionMessageSenderParameters>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 296))
  {
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 256);
    *(void *)(a1 + 256) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](a1 + 40);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 24);
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    long long v6 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext24RuntimeSendNativeMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF7A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext24RuntimeSendNativeMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF7A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext24RuntimeSendNativeMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3284;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20RuntimeConnectNativeEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSC_INS7_26WebPageProxyIdentifierTypeESF_yLSG_1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF7C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20RuntimeConnectNativeEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSC_INS7_26WebPageProxyIdentifierTypeESF_yLSG_1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF7C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext20RuntimeConnectNativeEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSC_INS7_26WebPageProxyIdentifierTypeESF_yLSG_1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3279;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25RuntimeWebPageSendMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF7F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25RuntimeWebPageSendMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF7F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext25RuntimeWebPageSendMessageEN6WebKit19WebExtensionContextES8_FvRKNS_6StringESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS9_S9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3286;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21RuntimeWebPageConnectEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF818;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21RuntimeWebPageConnectEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF818;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext21RuntimeWebPageConnectEN6WebKit19WebExtensionContextES8_FvRKNS_6StringENS_23ObjectIdentifierGenericINS7_37WebExtensionPortChannelIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESB_RKNS7_35WebExtensionMessageSenderParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3285;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::WebExtensionScriptInjectionParameters>>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebKit::WebExtensionScriptInjectionParameters>((uint64_t)&v14, a2);
  if (v30)
  {
    *(_OWORD *)a1 = v14;
    *(unsigned char *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 0;
    if (v16)
    {
      uint64_t v4 = v15;
      uint64_t v15 = 0;
      *(void *)(a1 + 16) = v4;
      *(unsigned char *)(a1 + 24) = 1;
    }
    *(unsigned char *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    if (v19)
    {
      *(void *)(a1 + 32) = v17;
      uint64_t v5 = v18;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      *(void *)(a1 + 40) = v5;
      *(unsigned char *)(a1 + 48) = 1;
    }
    *(unsigned char *)(a1 + 56) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    if (v22)
    {
      *(void *)(a1 + 56) = v20;
      uint64_t v6 = v21;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      *(void *)(a1 + 64) = v6;
      *(unsigned char *)(a1 + 72) = 1;
    }
    *(unsigned char *)(a1 + 80) = 0;
    *(unsigned char *)(a1 + 88) = 0;
    if (v24)
    {
      uint64_t v7 = v23;
      uint64_t v23 = 0;
      *(void *)(a1 + 80) = v7;
      *(unsigned char *)(a1 + 88) = 1;
    }
    *(unsigned char *)(a1 + 96) = 0;
    *(unsigned char *)(a1 + 104) = 0;
    if (v26)
    {
      uint64_t v8 = v25;
      uint64_t v25 = 0;
      *(void *)(a1 + 96) = v8;
      *(unsigned char *)(a1 + 104) = 1;
    }
    *(unsigned char *)(a1 + 112) = 0;
    *(unsigned char *)(a1 + 120) = 0;
    if (v28)
    {
      uint64_t v9 = v27;
      uint64_t v27 = 0;
      *(void *)(a1 + 112) = v9;
      *(unsigned char *)(a1 + 120) = 1;
    }
    *(_WORD *)(a1 + 128) = v29;
    *(unsigned char *)(a1 + 136) = 1;
    return std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 136) = 0;
    std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14);
    uint64_t v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      uint64_t v13 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v13();
    }
  }
  return result;
}

void IPC::Decoder::decode<WebKit::WebExtensionScriptInjectionParameters>(uint64_t a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionParameters,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 136))
  {
    uint64_t v4 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v5 = a2[3];
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

uint64_t std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 112);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 96);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 80);
    if (*(unsigned char *)(a1 + 72))
    {
      unint64_t v3 = *(WTF **)(a1 + 56);
      if (v3)
      {
        *(void *)(a1 + 56) = 0;
        *(_DWORD *)(a1 + 64) = 0;
        WTF::fastFree(v3, v2);
      }
    }
    if (*(unsigned char *)(a1 + 48)) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 32, v2);
    }
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v4 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = 0;
      if (v4) {
        CFRelease(*(CFTypeRef *)(v4 + 8));
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext22ScriptingExecuteScriptEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF840;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext22ScriptingExecuteScriptEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF840;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext22ScriptingExecuteScriptEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS7_43WebExtensionScriptInjectionResultParametersELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3287;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1993496F0);
    }
    *uint64_t v5 = 0;
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
    }
LABEL_15:
    uint64_t v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_DWORD *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ScriptingInsertCSSEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(v11);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x199349710);
  }
  *uint64_t v5 = 1;
  if (*(_DWORD *)(a2 + 16)) {
    goto LABEL_15;
  }
  uint64_t result = (_DWORD *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v8 = *(unsigned int *)(a2 + 12);
  if (v8)
  {
    uint64_t v9 = *(void *)a2;
    uint64_t v10 = 48 * v8;
    do
    {
      uint64_t result = IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionResultParameters,void>::encode(a1, v9);
      v9 += 48;
      v10 -= 48;
    }
    while (v10);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ScriptingInsertCSSEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FF868;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19WebExtensionContext18ScriptingInsertCSSEN6WebKit19WebExtensionContextES8_FvRKNS7_37WebExtensionScriptInjectionParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvNS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FF868;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}